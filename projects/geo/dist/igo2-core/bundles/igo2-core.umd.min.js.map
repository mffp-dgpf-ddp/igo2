{"version":3,"sources":["ng://@igo2/core/lib/activity/activity.service.ts","ng://@igo2/core/lib/activity/activity.interceptor.ts","ng://@igo2/core/lib/activity/activity.module.ts","ng://@igo2/core/lib/config/version.ts","ng://@igo2/core/lib/config/config.service.ts","ng://@igo2/core/lib/config/config.provider.ts","ng://@igo2/core/lib/config/config.module.ts","ng://@igo2/core/lib/language/shared/language.loader.ts","ng://@igo2/core/lib/language/shared/language.provider.ts","ng://@igo2/core/lib/language/shared/missing-translation.guard.ts","ng://@igo2/core/lib/language/language.module.ts","ng://@igo2/core/lib/message/message-center/message-center.component.ts","ng://@igo2/core/lib/message/message.module.ts","ng://@igo2/core/lib/message/shared/message.enum.ts","ng://@igo2/core/lib/message/shared/message.service.ts","ng://@igo2/core/lib/language/shared/language.service.ts","ng://@igo2/core/lib/request/error.interceptor.ts","ng://@igo2/core/lib/request/error.module.ts","ng://@igo2/core/lib/core.module.ts","node_modules/tslib/tslib.es6.js","ng://@igo2/core/lib/gesture/gesture.provider.ts","ng://@igo2/core/lib/gesture/gesture.module.ts","ng://@igo2/core/lib/request/logging.interceptor.ts","ng://@igo2/core/lib/request/logging.module.ts","ng://@igo2/core/lib/route/route.service.ts","ng://@igo2/core/lib/analytics/shared/analytics.service.ts","ng://@igo2/core/lib/media/media.enum.ts","ng://@igo2/core/lib/media/media.service.ts","ng://@igo2/core/lib/storage/storage.interface.ts","ng://@igo2/core/lib/storage/storage.service.ts","ng://@igo2/core/lib/network/network.service.ts","ng://@igo2/core/lib/network/network-ionic.service.ts"],"names":["ActivityService","prototype","register","id","uuid","this","ids","push","counter$","next","length","unregister","index","indexOf","splice","Injectable","args","providedIn","BehaviorSubject","ActivityInterceptor","intercept","req","_this","activity","headers","get","actReq","clone","delete","handle","activityService","pipe","finalize","IgoActivityModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","declarations","exports","version","lib","ConfigService","getConfig","key","ObjectUtils","resolve","config","load","options","baseConfig","default","path","http","injector","HttpClient","Promise","_reject","catchError","error","console","log","throwError","subscribe","configResponse","mergeDeep","Injector","CONFIG_OPTIONS","InjectionToken","provideConfigOptions","useValue","configFactory","configService","provideConfigLoader","APP_INITIALIZER","useFactory","deps","IgoConfigModule","LanguageLoader","getTranslation","lang","translation","require","igoLocale$","of","prefix","appLocale$","suffix","combineLatest","map","translations","defaultLanguageLoader","undefined","provideDefaultLanguageLoader","loader","TranslateLoader","IgoMissingTranslationHandler","params","translateService","langs","Error","substr","IgoLanguageModule","TranslateModule","MissingTranslationHandler","i1$1","MessageCenterComponent","Object","assign","defaultOptions","_options","value","configurable","timeOut","hasCloseIcon","showProgressBar","pauseOnHover","clickToClose","maxLength","maxStack","preventDuplicates","Component","selector","styles","Input","IgoMessageModule","CommonModule","common","i1","SimpleNotificationsModule","MessageType","ERROR","ALERT","INFO","MessageService","httpError","caught","message","title","notification","messages$","concat","text","notificationService","create","html","icon","theClass","addIcon","type","SUCCESS","remove","template","replace","NotificationsService","ngInjectableDef","i0","defineInjectable","factory","inject","token","rxjs","LanguageService","language","match","translate","use","reloadLang","TranslateService","getLanguage","setDefaultLang","ErrorInterceptor","errorContainer","handleCaughtError","handleUncaughtError","errorObj","statusText","HttpErrorResponse","status","url","toDisplay","messageService","instant","INJECTOR","IgoErrorModule","parentModule","IgoCoreModule","HttpClientModule","DomSanitizer","matIconRegistry","domSanitizer","addSvgIconSet","bypassSecurityTrustResourceUrl","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_super","tslib_1.__extends","__extends","__","constructor","IgoGestureConfig","mc","buildHammer","call","element","set","touchAction","GestureConfig","apply","arguments","IgoGestureModule","platformBrowser","HAMMER_GESTURE_CONFIG","LoggingInterceptor","msg","method","urlWithParams","ok","elapsed","IgoLoggingModule","RouteService","route","queryParams","i1$2","ActivatedRoute","ROUTE_SERVICE_OPTIONS","centerKey","zoomKey","projectionKey","contextKey","searchKey","visibleOnLayersKey","visibleOffLayersKey","directionsCoordKey","toolKey","wmsUrlKey","wmsLayersKey","wmtsUrlKey","wmtsLayersKey","vectorKey","AnalyticsService","_paq","paq","s","document","getElementsByTagName","g","async","defer","src","parentNode","insertBefore","user","profils","provider","name_1","firstName","lastName","sourceId","term","nbResults","category","action","name","initMatomo","Media","Mobile","Tablet","MediaOrientation","Portrait","MediaService","media$","orientation$","documentElement","i1$3","BreakpointObserver","breakpointObserver","observe","Breakpoints","HandsetLandscape","res","matches","Landscape","Desktop","StorageScope","SESSION","StorageService","scope","sessionStorage","getItem","LOCAL","localStorage","JSON","parse","_a","setItem","stringify","removeItem","NetworkService","info","state","connection","emitEvent","stateChangeEventEmitter","emit","offlineSubscription","unsubscribe","onlineSubscription","e","reportState","debounceTime","operators","startWith","EventEmitter","window","navigator","onLine","checkNetworkState","NetworkIonicService","previousState","Network","Platform","i2","i3","network","platform","is","checkNetworkStateMobile","provideLanguageLoader","provideRouteServiceOptions"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityService {\r\n  public counter$ = new BehaviorSubject<number>(0);\r\n\r\n  private ids: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  register(): string {\r\n    const id = uuid();\r\n    this.ids.push(id);\r\n    this.counter$.next(this.ids.length);\r\n\r\n    return id;\r\n  }\r\n\r\n  unregister(id: string) {\r\n    const index = this.ids.indexOf(id);\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n    this.ids.splice(index, 1);\r\n\r\n    this.counter$.next(this.ids.length);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ActivityService } from './activity.service';\r\n\r\n@Injectable()\r\nexport class ActivityInterceptor implements HttpInterceptor {\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const activity = req.headers.get('activityInterceptor');\r\n    if (activity) {\r\n      const actReq = req.clone({\r\n        headers: req.headers.delete('activityInterceptor')\r\n      });\r\n      if (activity === 'false') {\r\n        return next.handle(actReq);\r\n      }\r\n    }\r\n\r\n    const id = this.activityService.register();\r\n\r\n    return next.handle(req).pipe(\r\n      finalize(() => {\r\n        this.activityService.unregister(id);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ActivityInterceptor } from './activity.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoActivityModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoActivityModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: ActivityInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","export interface Version {\r\n  lib: string;\r\n}\r\n\r\nexport const version: Version = {\r\n  lib: '1.4.1'\r\n};\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { ConfigOptions } from './config.interface';\r\nimport { version } from './version';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigService {\r\n  private config: object = {};\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  /**\r\n   * Use to get the data found in config file\r\n   */\r\n  public getConfig(key: string): any {\r\n    return ObjectUtils.resolve(this.config, key);\r\n  }\r\n\r\n  /**\r\n   * This method loads \"[path]\" to get all config's variables\r\n   */\r\n  public load(options: ConfigOptions) {\r\n    const baseConfig = options.default || {};\r\n    if (!options.path) {\r\n      this.config = baseConfig;\r\n      return true;\r\n    }\r\n\r\n    const http = this.injector.get(HttpClient);\r\n\r\n    return new Promise((resolve, _reject) => {\r\n      http\r\n        .get(options.path)\r\n        .pipe(\r\n          catchError((error: any): any => {\r\n            console.log(`Configuration file ${options.path} could not be read`);\r\n            resolve(true);\r\n            return throwError(error.error || 'Server error');\r\n          })\r\n        )\r\n        .subscribe(configResponse => {\r\n          this.config = ObjectUtils.mergeDeep(\r\n            ObjectUtils.mergeDeep({ version }, baseConfig),\r\n            configResponse\r\n          );\r\n          resolve(true);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import { APP_INITIALIZER, InjectionToken } from '@angular/core';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { ConfigOptions } from './config.interface';\r\n\r\nexport let CONFIG_OPTIONS = new InjectionToken<ConfigOptions>('configOptions');\r\n\r\nexport function provideConfigOptions(options: ConfigOptions) {\r\n  return {\r\n    provide: CONFIG_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\nexport function configFactory(\r\n  configService: ConfigService,\r\n  options: ConfigOptions\r\n) {\r\n  return () => configService.load(options);\r\n}\r\n\r\nexport function provideConfigLoader() {\r\n  return {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: configFactory,\r\n    multi: true,\r\n    deps: [ConfigService, CONFIG_OPTIONS]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { provideConfigOptions, provideConfigLoader } from './config.provider';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoConfigModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoConfigModule,\r\n      providers: [provideConfigOptions({}), provideConfigLoader()]\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { of, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\ndeclare function require(arg: string): any;\r\n\r\nexport class LanguageLoader implements TranslateLoader {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private prefix?: string,\r\n    private suffix: string = '.json',\r\n    private config?: ConfigService\r\n  ) {}\r\n\r\n  public getTranslation(lang: string): any {\r\n    const translation = require(`../locale/${lang}.json`);\r\n    const igoLocale$ = of(translation);\r\n\r\n    if (this.config && !this.prefix) {\r\n      this.prefix = this.config.getConfig('language.prefix');\r\n    }\r\n\r\n    if (!this.prefix) {\r\n      return igoLocale$;\r\n    }\r\n\r\n    const appLocale$ = this.http.get(`${this.prefix}${lang}${this.suffix}`);\r\n\r\n    const locale$ = combineLatest([igoLocale$, appLocale$]);\r\n\r\n    return locale$.pipe(\r\n      map(translations => {\r\n        return ObjectUtils.mergeDeep(translations[0], translations[1]);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\nimport { LanguageLoader } from './language.loader';\r\n\r\nexport function defaultLanguageLoader(\r\n  http: HttpClient,\r\n  config?: ConfigService\r\n) {\r\n  return new LanguageLoader(http, undefined, undefined, config);\r\n}\r\n\r\nexport function provideLanguageLoader(loader?) {\r\n  return {\r\n    provide: TranslateLoader,\r\n    useFactory: loader || defaultLanguageLoader,\r\n    deps: [HttpClient]\r\n  };\r\n}\r\n\r\nexport function provideDefaultLanguageLoader(loader?) {\r\n  return {\r\n    provide: TranslateLoader,\r\n    useFactory: loader || defaultLanguageLoader,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import {\r\n  MissingTranslationHandler,\r\n  MissingTranslationHandlerParams\r\n} from '@ngx-translate/core';\r\n\r\nexport class IgoMissingTranslationHandler implements MissingTranslationHandler {\r\n  handle(params: MissingTranslationHandlerParams) {\r\n    if (!params.translateService.langs.length) {\r\n      const error =\r\n        'Translations are not yet loaded. \\\r\n         Check that the LanguageService is injected.';\r\n      throw new Error(error);\r\n    }\r\n\r\n    if (params.key.substr(0, 4) === 'igo.') {\r\n      throw new Error(`The Key \"${params.key}\" is missing in locale file.`);\r\n    } else {\r\n      return params.key;\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport {\r\n  TranslateModule,\r\n  MissingTranslationHandler\r\n} from '@ngx-translate/core';\r\n\r\nimport { provideDefaultLanguageLoader } from './shared/language.provider';\r\nimport { IgoMissingTranslationHandler } from './shared/missing-translation.guard';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TranslateModule.forRoot({\r\n      missingTranslationHandler: {\r\n        provide: MissingTranslationHandler,\r\n        useClass: IgoMissingTranslationHandler\r\n      }\r\n    })\r\n  ],\r\n  declarations: [],\r\n  exports: [TranslateModule]\r\n})\r\nexport class IgoLanguageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLanguageModule,\r\n      providers: [provideDefaultLanguageLoader()]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-message-center',\r\n  templateUrl: './message-center.component.html',\r\n  styleUrls: ['./message-center.component.scss']\r\n})\r\nexport class MessageCenterComponent {\r\n  static defaultOptions = {\r\n    timeOut: 5000,\r\n    hasCloseIcon: false,\r\n    showProgressBar: true,\r\n    pauseOnHover: true,\r\n    clickToClose: true,\r\n    maxLength: 100,\r\n    maxStack: 3,\r\n    preventDuplicates: true\r\n  };\r\n\r\n  @Input()\r\n  get options(): any {\r\n    return Object.assign(\r\n      {},\r\n      MessageCenterComponent.defaultOptions,\r\n      this._options\r\n    );\r\n  }\r\n  set options(value: any) {\r\n    this._options = value;\r\n  }\r\n  private _options: any = {};\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\n\r\nimport { MessageCenterComponent } from './message-center/message-center.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SimpleNotificationsModule.forRoot()],\r\n  declarations: [MessageCenterComponent],\r\n  exports: [MessageCenterComponent]\r\n})\r\nexport class IgoMessageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMessageModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","export enum MessageType {\r\n  ERROR = 'error',\r\n  ALERT = 'alert',\r\n  INFO = 'info',\r\n  SUCCESS = 'success'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Notification, NotificationsService, NotificationType} from 'angular2-notifications';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\nimport { Message, MessageOptions } from './message.interface';\r\nimport { MessageType } from './message.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  public messages$ = new BehaviorSubject<Message[]>([]);\r\n  private options: MessageOptions;\r\n\r\n  constructor(\r\n    private notificationService: NotificationsService,\r\n    private configService: ConfigService\r\n  ) {\r\n    this.options = this.configService.getConfig('message') || {};\r\n  }\r\n\r\n  showError(httpError: HttpErrorResponse) {\r\n    httpError.error.caught = true;\r\n    return this.error(httpError.error.message, httpError.error.title);\r\n  }\r\n\r\n  message(message: Message) {\r\n    this.messages$.next(this.messages$.value.concat([message]));\r\n\r\n    message.options = message.options || {};\r\n    message = this.handleTemplate(message);\r\n\r\n    let notification: Notification;\r\n    if (message.text) {\r\n      notification = this.notificationService.create(\r\n        message.title,\r\n        message.text,\r\n        (message.type as any) as NotificationType,\r\n        message.options\r\n      );\r\n    } else if (message.html) {\r\n      if (!message.icon) {\r\n        message.options.theClass = message.options.theClass\r\n          ? message.options.theClass + ' noIcon'\r\n          : 'noIcon';\r\n      }\r\n\r\n      notification = this.notificationService.html(\r\n        message.html,\r\n        (message.type as any) as NotificationType,\r\n        message.options\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (message.icon !== undefined) {\r\n      this.addIcon(notification, message.icon);\r\n    }\r\n\r\n    return notification;\r\n  }\r\n\r\n  success(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'check',\r\n      options,\r\n      type: MessageType.SUCCESS\r\n    });\r\n  }\r\n\r\n  error(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'error_outline',\r\n      options,\r\n      type: MessageType.ERROR\r\n    });\r\n  }\r\n\r\n  info(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'info_outline',\r\n      options,\r\n      type: MessageType.INFO\r\n    });\r\n  }\r\n\r\n  alert(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'access_alarm',\r\n      options,\r\n      type: MessageType.ALERT\r\n    });\r\n  }\r\n\r\n  remove(id?: string) {\r\n    this.notificationService.remove(id);\r\n  }\r\n\r\n  private addIcon(notification: Notification, icon: string) {\r\n    // There is no way to add an icon to a notification when reating\r\n    // it so we simply set it on the notification directly.\r\n    // See https://github.com/flauc/angular2-notifications/issues/165\r\n    notification.icon = `\r\n      <mat-icon class=\"material-icons mat-icon mat-list-avatar\" svgIcon=\"${icon}\">\r\n      </mat-icon>`;\r\n  }\r\n\r\n  private handleTemplate(message: Message): Message {\r\n    if (!this.options.template || message.html) {\r\n      return message;\r\n    }\r\n\r\n    let html = this.options.template;\r\n    html = html.replace('${text}', message.text);\r\n    html = html.replace('${title}', message.title);\r\n    html = html.replace('${icon}', message.icon);\r\n\r\n    message.html = html;\r\n    message.text = undefined;\r\n    message.title = undefined;\r\n    message.icon = undefined;\r\n    return message;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService {\r\n  private language: string = this.translate.getBrowserLang();\r\n\r\n  constructor(public translate: TranslateService) {\r\n    const lang = this.getLanguage();\r\n    this.translate.setDefaultLang(lang);\r\n  }\r\n\r\n  public getLanguage(): string {\r\n    return this.language.match(/en|fr/) ? this.language : 'en';\r\n  }\r\n\r\n  public setLanguage(language: string) {\r\n    this.language = language.match(/en|fr/) ? language : 'en';\r\n    this.translate.use(this.language);\r\n    this.translate.reloadLang(this.language);\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n  HttpEvent,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../message/shared/message.service';\r\nimport { LanguageService } from '../language/shared/language.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const errorContainer = { httpError: undefined };\r\n    return next.handle(req).pipe(\r\n      catchError(error => this.handleError(error, errorContainer)),\r\n      finalize(() => {\r\n        this.handleCaughtError(errorContainer);\r\n        this.handleUncaughtError(errorContainer);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleError(\r\n    httpError: HttpErrorResponse,\r\n    errorContainer: { httpError: HttpErrorResponse }\r\n  ) {\r\n    if (httpError instanceof HttpErrorResponse) {\r\n      const errorObj = httpError.error === 'object' ? httpError.error : {};\r\n      errorObj.message = httpError.error.message || httpError.statusText;\r\n      errorObj.caught = false;\r\n\r\n      httpError = new HttpErrorResponse({\r\n        error: errorObj,\r\n        headers: httpError.headers,\r\n        status: httpError.status,\r\n        statusText: httpError.statusText,\r\n        url: httpError.url\r\n      });\r\n    }\r\n\r\n    errorContainer.httpError = httpError;\r\n    return throwError(httpError);\r\n  }\r\n\r\n  private handleCaughtError(errorContainer: { httpError: HttpErrorResponse }) {\r\n    const httpError = errorContainer.httpError;\r\n    if (httpError && httpError.error.toDisplay) {\r\n      httpError.error.caught = true;\r\n      this.messageService.error(httpError.error.message, httpError.error.title);\r\n    }\r\n  }\r\n\r\n  private handleUncaughtError(errorContainer: {\r\n    httpError: HttpErrorResponse;\r\n  }) {\r\n    const httpError = errorContainer.httpError;\r\n    if (httpError && !httpError.error.caught) {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.errors.uncaught.message');\r\n      const title = translate.instant('igo.core.errors.uncaught.title');\r\n      httpError.error.caught = true;\r\n      this.messageService.error(message, title);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Optional,\r\n  SkipSelf\r\n} from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ErrorInterceptor } from './error.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoErrorModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoErrorModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: ErrorInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  constructor(@Optional() @SkipSelf() parentModule: IgoErrorModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'IgoErrorModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material';\r\n\r\nimport { IgoActivityModule } from './activity/activity.module';\r\nimport { IgoConfigModule } from './config/config.module';\r\nimport { IgoLanguageModule } from './language/language.module';\r\nimport { IgoMessageModule } from './message/message.module';\r\nimport { IgoErrorModule } from './request/error.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    IgoActivityModule.forRoot(),\r\n    IgoConfigModule.forRoot(),\r\n    IgoErrorModule.forRoot(),\r\n    IgoLanguageModule.forRoot(),\r\n    IgoMessageModule.forRoot()\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n    IgoActivityModule,\r\n    IgoConfigModule,\r\n    IgoErrorModule,\r\n    IgoLanguageModule,\r\n    IgoMessageModule\r\n  ]\r\n})\r\nexport class IgoCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCoreModule,\r\n      providers: []\r\n    };\r\n  }\r\n\r\n  constructor(matIconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    matIconRegistry.addSvgIconSet(\r\n      domSanitizer.bypassSecurityTrustResourceUrl(\r\n        './assets/igo2/core/icons/mdi.svg'\r\n      )\r\n    );\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GestureConfig, HammerManager } from '@angular/material';\r\n\r\n@Injectable()\r\nexport class IgoGestureConfig extends GestureConfig {\r\n  buildHammer(element: HTMLElement) {\r\n    const mc = super.buildHammer(element) as HammerManager;\r\n    mc.set({ touchAction: 'pan-y' });\r\n    return mc;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\r\n\r\nimport { IgoGestureConfig } from './gesture.provider';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoGestureModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoGestureModule,\r\n      providers: [\r\n        {\r\n          provide: HAMMER_GESTURE_CONFIG,\r\n          useClass: IgoGestureConfig\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpRequest,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { tap, finalize } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class LoggingInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const started = Date.now();\r\n    let ok: string;\r\n\r\n    // extend server response observable with logging\r\n    return next.handle(req).pipe(\r\n      tap(\r\n        // Succeeds when there is a response; ignore other events\r\n        event => (ok = event instanceof HttpResponse ? 'succeeded' : ''),\r\n        // Operation failed; error is an HttpErrorResponse\r\n        error => (ok = 'failed')\r\n      ),\r\n      // Log when response observable either completes or errors\r\n      finalize(() => {\r\n        const elapsed = Date.now() - started;\r\n        const msg = `${req.method} \"${req.urlWithParams}\"\r\n             ${ok} in ${elapsed} ms.`;\r\n\r\n        console.log(msg);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { LoggingInterceptor } from './logging.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoLoggingModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLoggingModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: LoggingInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject, InjectionToken, Optional } from '@angular/core';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { RouteServiceOptions } from './route.interface';\r\n\r\nexport let ROUTE_SERVICE_OPTIONS = new InjectionToken<RouteServiceOptions>(\r\n  'routeServiceOptions'\r\n);\r\n\r\nexport function provideRouteServiceOptions(options: RouteServiceOptions) {\r\n  return {\r\n    provide: ROUTE_SERVICE_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RouteService {\r\n  public options: RouteServiceOptions;\r\n\r\n  constructor(\r\n    public route: ActivatedRoute,\r\n    @Inject(ROUTE_SERVICE_OPTIONS)\r\n    @Optional()\r\n    options: RouteServiceOptions\r\n  ) {\r\n    const defaultOptions = {\r\n      centerKey: 'center',\r\n      zoomKey: 'zoom',\r\n      projectionKey: 'projection',\r\n      contextKey: 'context',\r\n      searchKey: 'search',\r\n      visibleOnLayersKey: 'visiblelayers',\r\n      visibleOffLayersKey: 'invisiblelayers',\r\n      directionsCoordKey: 'routing',\r\n      toolKey: 'tool',\r\n      wmsUrlKey: 'wmsUrl',\r\n      wmsLayersKey:  'wmsLayers',\r\n      wmtsUrlKey: 'wmtsUrl',\r\n      wmtsLayersKey:  'wmtsLayers',\r\n      vectorKey: 'vector'\r\n    };\r\n    this.options = Object.assign({}, defaultOptions, options);\r\n  }\r\n\r\n  get queryParams(): Observable<Params> {\r\n    return this.route.queryParams;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\nimport { AnalyticsOptions } from './analytics.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AnalyticsService {\r\n  private options: AnalyticsOptions;\r\n\r\n  get paq() {\r\n    return ((window as any)._paq = (window as any)._paq || []);\r\n  }\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.options = this.config.getConfig('analytics') || {};\r\n\r\n    if (this.options.provider === 'matomo') {\r\n      this.initMatomo();\r\n    }\r\n  }\r\n\r\n  private initMatomo() {\r\n    if (!this.options.url || !this.options.id) {\r\n      return;\r\n    }\r\n    const url =\r\n      this.options.url.substr(-1) === '/'\r\n        ? this.options.url + 'matomo'\r\n        : this.options.url;\r\n\r\n    // this.paq.push(['trackPageView']);\r\n    // this.paq.push(['enableLinkTracking']);\r\n    (() => {\r\n      this.paq.push(['setTrackerUrl', url + '.php']);\r\n      this.paq.push(['setSiteId', this.options.id]);\r\n      const g = document.createElement('script');\r\n      const s = document.getElementsByTagName('script')[0];\r\n      g.type = 'text/javascript';\r\n      g.async = true;\r\n      g.defer = true;\r\n      g.src = url + '.js';\r\n      s.parentNode.insertBefore(g, s);\r\n    })();\r\n  }\r\n\r\n  public setUser(\r\n    user?: {\r\n      id: number;\r\n      sourceId?: string;\r\n      firstName?: string;\r\n      lastName?: string;\r\n    },\r\n    profils?: string[]\r\n  ) {\r\n    if (this.options.provider === 'matomo') {\r\n      if (!user) {\r\n        this.paq.push(['resetUserId']);\r\n        this.paq.push(['deleteCustomVariable', 1, 'user']);\r\n        this.paq.push(['deleteCustomVariable', 2, 'name']);\r\n        this.paq.push(['deleteCustomVariable', 3, 'profils']);\r\n      } else {\r\n        this.paq.push(['setUserId', user.id]);\r\n\r\n        const name = `${user.firstName} ${user.lastName}`;\r\n        this.paq.push(['setCustomVariable', 1, 'user', user.sourceId, 'visit']);\r\n        this.paq.push(['setCustomVariable', 2, 'name', name, 'visit']);\r\n        this.paq.push(['setCustomVariable', 3, 'profils', profils, 'visit']);\r\n      }\r\n\r\n      this.paq.push(['trackPageView']);\r\n      this.paq.push(['enableLinkTracking']);\r\n    }\r\n  }\r\n\r\n  public trackSearch(term: string, nbResults: number) {\r\n    if (this.options.provider === 'matomo') {\r\n      this.paq.push(['trackSiteSearch', term, false, nbResults]);\r\n    }\r\n  }\r\n\r\n  public trackEvent(category: string, action: string, name: string) {\r\n    if (this.options.provider === 'matomo') {\r\n      this.paq.push(['trackEvent', category, action, name]);\r\n    }\r\n  }\r\n}\r\n","export enum Media {\r\n  Mobile = 'mobile',\r\n  Tablet = 'tablet',\r\n  Desktop = 'desktop'\r\n}\r\n\r\nexport enum MediaOrientation {\r\n  Portrait = 'portrait',\r\n  Landscape = 'landscape'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Media, MediaOrientation } from './media.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MediaService {\r\n  public media$ = new BehaviorSubject<Media>(undefined);\r\n  public orientation$ = new BehaviorSubject<MediaOrientation>(undefined);\r\n\r\n  constructor(breakpointObserver: BreakpointObserver) {\r\n    breakpointObserver\r\n      .observe([Breakpoints.HandsetLandscape])\r\n      .subscribe(res => {\r\n        if (res.matches) {\r\n          this.media$.next(Media.Mobile);\r\n          this.orientation$.next(MediaOrientation.Landscape);\r\n        }\r\n      });\r\n\r\n    breakpointObserver.observe([Breakpoints.HandsetPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Mobile);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.TabletLandscape]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Tablet);\r\n        this.orientation$.next(MediaOrientation.Landscape);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.TabletPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Tablet);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.WebLandscape]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Desktop);\r\n        this.orientation$.next(MediaOrientation.Landscape);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.WebPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Desktop);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n  }\r\n\r\n  getMedia(): Media {\r\n    return this.media$.value;\r\n  }\r\n\r\n  getOrientation(): MediaOrientation {\r\n    return this.orientation$.value;\r\n  }\r\n\r\n  isTouchScreen(): boolean {\r\n    return 'ontouchstart' in document.documentElement ? true : false;\r\n  }\r\n}\r\n","export enum StorageScope {\r\n  SESSION = 'Session',\r\n  LOCAL = 'Local'\r\n}\r\n\r\nexport interface StorageOptions {\r\n  key: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '../config/config.service';\r\nimport { StorageScope, StorageOptions } from './storage.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n  protected options: StorageOptions;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.options = this.config.getConfig('storage') || { key: 'igo' };\r\n  }\r\n  /**\r\n   * Use to get the data found in storage file\r\n   */\r\n  get(key: string, scope?: StorageScope): string | object | boolean | number {\r\n    let value: any;\r\n\r\n    if (!scope || scope === StorageScope.SESSION) {\r\n      value = sessionStorage.getItem(`${this.options.key}.${key}`);\r\n    }\r\n\r\n    if (scope === StorageScope.LOCAL || (!value && !scope)) {\r\n      value = localStorage.getItem(`${this.options.key}.${key}`);\r\n    }\r\n\r\n    if (value) {\r\n      try {\r\n        value = JSON.parse(value);\r\n      } catch {\r\n        value = value;\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  set(\r\n    key: string,\r\n    value: string | object | boolean | number,\r\n    scope: StorageScope = StorageScope.LOCAL\r\n  ) {\r\n    if (scope === StorageScope.SESSION) {\r\n      sessionStorage.setItem(\r\n        `${this.options.key}.${key}`,\r\n        JSON.stringify(value)\r\n      );\r\n    } else {\r\n      localStorage.setItem(`${this.options.key}.${key}`, JSON.stringify(value));\r\n    }\r\n  }\r\n\r\n  remove(key: string, scope: StorageScope = StorageScope.LOCAL) {\r\n    if (scope === StorageScope.SESSION) {\r\n      sessionStorage.removeItem(`${this.options.key}.${key}`);\r\n    } else {\r\n      localStorage.removeItem(`${this.options.key}.${key}`);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, EventEmitter, OnDestroy, Injector } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { debounceTime, startWith } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../message/shared/message.service';\r\nimport { LanguageService } from '../language/shared/language.service';\r\nimport { ConnectionState } from './network.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NetworkService implements OnDestroy {\r\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\r\n  private onlineSubscription: Subscription;\r\n  private offlineSubscription: Subscription;\r\n\r\n  private state: ConnectionState = {\r\n    connection: window.navigator.onLine\r\n  };\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector\r\n  ) {\r\n      this.checkNetworkState();\r\n  }\r\n\r\n  private checkNetworkState() {\r\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.online.message');\r\n      const title = translate.instant('igo.core.network.online.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = true;\r\n      this.emitEvent();\r\n    });\r\n\r\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.offline.message');\r\n      const title = translate.instant('igo.core.network.offline.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = false;\r\n      this.emitEvent();\r\n    });\r\n  }\r\n\r\n  private emitEvent() {\r\n    this.stateChangeEventEmitter.emit(this.state);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    try {\r\n      this.offlineSubscription.unsubscribe();\r\n      this.onlineSubscription.unsubscribe();\r\n    } catch (e) {}\r\n  }\r\n\r\n  currentState(reportState = true): Observable<ConnectionState> {\r\n    return reportState\r\n      ? this.stateChangeEventEmitter.pipe(\r\n          debounceTime(300),\r\n          startWith(this.state)\r\n        )\r\n      : this.stateChangeEventEmitter.pipe(debounceTime(300));\r\n  }\r\n}\r\n","import { Injectable, EventEmitter, OnDestroy, Injector, ViewChild } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { debounceTime, startWith } from 'rxjs/operators';\r\n\r\nimport { Network } from '@ionic-native/network/ngx';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nimport { MessageService } from '../message/shared/message.service';\r\nimport { LanguageService } from '../language/shared/language.service';\r\nimport { ConnectionState } from './network.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NetworkIonicService implements OnDestroy {\r\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\r\n  private onlineSubscription: Subscription;\r\n  private offlineSubscription: Subscription;\r\n\r\n  private state: ConnectionState = {\r\n    connection: window.navigator.onLine\r\n  };\r\n\r\n  private previousState: boolean = !window.navigator.onLine;\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector,\r\n    private network: Network,\r\n    private platform: Platform\r\n  ) {\r\n    this.platform.ready().then(() => {\r\n      if (this.platform.is('cordova')) {\r\n        if (this.platform.is('android')) {\r\n          this.checkNetworkStateMobile();\r\n        }\r\n      } else {\r\n        this.checkNetworkState();\r\n      }\r\n    });\r\n  }\r\n\r\n  private checkNetworkState() {\r\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.online.message');\r\n      const title = translate.instant('igo.core.network.online.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = true;\r\n      this.emitEvent();\r\n    });\r\n\r\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.offline.message');\r\n      const title = translate.instant('igo.core.network.offline.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = false;\r\n      this.emitEvent();\r\n    });\r\n  }\r\n\r\n  private checkNetworkStateMobile() {\r\n    this.offlineSubscription = this.network.onDisconnect().subscribe(() => {\r\n      this.state.connection = false;\r\n      if (this.previousState !== this.state.connection) {\r\n        setTimeout(() => {\r\n          if (!this.state.connection) {\r\n            const translate = this.injector.get(LanguageService).translate;\r\n            const message = translate.instant('igo.core.network.offline.message');\r\n            const title = translate.instant('igo.core.network.offline.title');\r\n            this.messageService.info(message, title);\r\n            this.state.connection = false;\r\n            this.emitEvent();\r\n            this.previousState = this.state.connection;\r\n          }\r\n        }, 10000);\r\n      }\r\n    });\r\n\r\n    this.onlineSubscription = this.network.onConnect().subscribe(() => {\r\n      this.state.connection = true;\r\n      if (this.previousState !== this.state.connection) {\r\n        setTimeout(() => {\r\n          if (this.state.connection) {\r\n            const translate = this.injector.get(LanguageService).translate;\r\n            const message = translate.instant('igo.core.network.online.message');\r\n            const title = translate.instant('igo.core.network.online.title');\r\n            this.messageService.info(message, title);\r\n            this.state.connection = true;\r\n            this.emitEvent();\r\n            this.previousState = this.state.connection;\r\n          }\r\n        }, 10000);\r\n      }\r\n    });\r\n  }\r\n\r\n  private emitEvent() {\r\n    this.stateChangeEventEmitter.emit(this.state);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    try {\r\n      this.offlineSubscription.unsubscribe();\r\n      this.onlineSubscription.unsubscribe();\r\n    } catch (e) {}\r\n  }\r\n\r\n  currentState(reportState = true): Observable<ConnectionState> {\r\n    return reportState\r\n      ? this.stateChangeEventEmitter.pipe(\r\n          debounceTime(300),\r\n          startWith(this.state)\r\n        )\r\n      : this.stateChangeEventEmitter.pipe(debounceTime(300));\r\n  }\r\n}\r\n"]}