{"version":3,"sources":["ng://@igo2/geo/lib/metadata/shared/metadata.service.ts","ng://@igo2/geo/lib/metadata/metadata-button/metadata-button.component.ts","ng://@igo2/geo/lib/metadata/metadata.module.ts","node_modules/tslib/tslib.es6.js","ng://@igo2/geo/lib/datasource/shared/datasources/data.service.ts","ng://@igo2/geo/lib/utils/id-generator.ts","ng://@igo2/geo/lib/datasource/shared/datasources/datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/feature-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/osm-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/xyz-datasource.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-wfs.utils.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs.service.ts","ng://@igo2/geo/lib/query/shared/query.enums.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-datasource.ts","ng://@igo2/geo/lib/datasource/utils/tilegrid.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wmts-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/carto-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/arcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/tilearcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/websocket-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/mvt-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/cluster-datasource.ts","ng://@igo2/geo/lib/feature/shared/feature.enums.ts","ng://@igo2/geo/lib/layer/shared/layer.enums.ts","ng://@igo2/geo/lib/map/shared/map.utils.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.interface.ts","ng://@igo2/geo/lib/layer/utils/image-watcher.ts","ng://@igo2/geo/lib/layer/utils/tile-watcher.ts","ng://@igo2/geo/lib/layer/utils/outputLegend.ts","ng://@igo2/geo/lib/layer/utils/vector-watcher.ts","ng://@igo2/geo/lib/layer/shared/layers/image-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/tile-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vector-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vectortile-layer.ts","ng://@igo2/geo/lib/map/map-browser/map-browser.component.ts","ng://@igo2/geo/lib/overlay/shared/overlay.enum.ts","ng://@igo2/geo/lib/overlay/shared/overlay.service.ts","ng://@igo2/geo/lib/overlay/shared/overlay.directive.ts","ng://@igo2/geo/lib/overlay/shared/overlay.utils.ts","ng://@igo2/geo/lib/layer/shared/style.service.ts","ng://@igo2/geo/lib/query/shared/query.utils.ts","ng://@igo2/geo/lib/layer/layer-item/layer-item.component.ts","ng://@igo2/geo/lib/layer/layer-legend/layer-legend.component.ts","ng://@igo2/geo/lib/layer/layer-legend-item/layer-legend-item.component.ts","ng://@igo2/geo/lib/layer/layer-legend-list/layer-legend-list.component.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.enum.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.component.ts","ng://@igo2/geo/lib/map/shared/map.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list-binding.directive.ts","ng://@igo2/geo/lib/layer/layer-list-tool/layer-list-tool.component.ts","ng://@igo2/geo/lib/layer/layer-list-tool/layer-list-tool.service.ts","ng://@igo2/geo/lib/layer/track-feature-button/track-feature-button.component.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading-layer.ts","ng://@igo2/geo/lib/feature/shared/store.ts","ng://@igo2/geo/lib/feature/shared/strategies/selection.ts","ng://@igo2/geo/lib/feature/shared/feature.utils.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.component.ts","ng://@igo2/geo/lib/overlay/shared/overlay.ts","ng://@igo2/geo/lib/map/utils/layer-watcher.ts","ng://@igo2/geo/lib/map/shared/map.enums.ts","ng://@igo2/geo/lib/map/shared/controllers/controller.ts","ng://@igo2/geo/lib/map/shared/controllers/view.ts","ng://@igo2/geo/lib/map/shared/map.ts","ng://@igo2/geo/lib/map/shared/mapOffline.directive.ts","ng://@igo2/geo/lib/map/shared/map-pointer-position.directive.ts","ng://@igo2/geo/lib/map/shared/map-pointer-position-by-key.directive.ts","ng://@igo2/geo/lib/map/shared/projection.service.ts","ng://@igo2/geo/lib/map/zoom-button/zoom-button.component.ts","ng://@igo2/geo/lib/map/geolocate-button/geolocate-button.component.ts","ng://@igo2/geo/lib/map/offline-button/offline-button.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.animation.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/mini-basemap.component.ts","ng://@igo2/geo/lib/map/rotation-button/rotation-button.component.ts","ng://@igo2/geo/lib/datasource/utils/esri-style-generator.ts","ng://@igo2/geo/lib/filter/shared/time-filter.enum.ts","ng://@igo2/geo/lib/datasource/shared/capabilities.service.ts","ng://@igo2/geo/lib/datasource/shared/options/options.service.ts","ng://@igo2/geo/lib/datasource/shared/datasource.service.ts","ng://@igo2/geo/lib/datasource/shared/options/options-api.service.ts","ng://@igo2/geo/lib/layer/shared/layer.service.ts","ng://@igo2/geo/lib/catalog/shared/catalog.enum.ts","ng://@igo2/geo/lib/catalog/shared/catalog.abstract.ts","ng://@igo2/geo/lib/query/shared/query.service.ts","ng://@igo2/geo/lib/query/shared/query.directive.ts","ng://@igo2/geo/lib/search/shared/sources/source.ts","ng://@igo2/geo/lib/query/shared/query-search-source.ts","ng://@igo2/geo/lib/utils/googleLinks.ts","ng://@igo2/geo/lib/utils/osmLinks.ts","ng://@igo2/geo/lib/catalog/shared/catalog.service.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-layer.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-group.component.ts","ng://@igo2/geo/lib/layer/layer-legend-list/layer-legend-list-binding.directive.ts","ng://@igo2/geo/lib/layer/layer.module.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.module.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library-item.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.module.ts","ng://@igo2/geo/lib/catalog/catalog.module.ts","ng://@igo2/geo/lib/datasource/datasource.module.ts","ng://@igo2/geo/lib/filter/shared/filterable-datasource.pipe.ts","ng://@igo2/geo/lib/filter/shared/time-filter.service.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.service.ts","ng://@igo2/geo/lib/filter/shared/spatial-filter.enum.ts","ng://@igo2/geo/lib/filter/shared/spatial-filter.service.ts","ng://@igo2/geo/lib/download/shared/download.service.ts","ng://@igo2/geo/lib/download/download-button/download-button.component.ts","ng://@igo2/geo/lib/download/download.module.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.component.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.module.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.module.ts","ng://@igo2/geo/lib/feature/feature.module.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.component.ts","ng://@igo2/geo/lib/measure/shared/measure.enum.ts","ng://@igo2/geo/lib/measure/shared/measure.utils.ts","ng://@igo2/geo/lib/geometry/shared/geometry.errors.ts","ng://@igo2/geo/lib/geometry/shared/geometry.utils.ts","ng://@igo2/geo/lib/geometry/shared/controls/draw.ts","ng://@igo2/geo/lib/geometry/shared/controls/modify.ts","ng://@igo2/geo/lib/geometry/shared/controls/slice.ts","ng://@igo2/geo/lib/measure/measurer/measurer-dialog.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.component.ts","ng://@igo2/geo/lib/measure/measurer/measure-format.pipe.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field-input.component.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.module.ts","ng://@igo2/geo/lib/geometry/geometry.module.ts","ng://@igo2/geo/lib/filter/time-filter-button/time-filter-button.component.ts","ng://@igo2/geo/lib/filter/time-filter-form/time-filter-form.component.ts","ng://@igo2/geo/lib/filter/time-filter-item/time-filter-item.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list-binding.directive.ts","ng://@igo2/geo/lib/wkt/shared/wkt.service.ts","ng://@igo2/geo/lib/filter/ogc-filter-form/ogc-filter-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-form/ogc-filterable-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-item/ogc-filterable-item.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list-binding.directive.ts","ng://@igo2/geo/lib/filter/ogc-filter-button/ogc-filter-button.component.ts","ng://@igo2/geo/lib/filter/ogc-filter-toggle-button/ogc-filter-toggle-button.component.ts","ng://@igo2/geo/lib/filter/spatial-filter/spatial-filter-type/spatial-filter-type.component.ts","ng://@igo2/geo/lib/filter/spatial-filter/spatial-filter-list/spatial-filter-list.component.ts","ng://@igo2/geo/lib/filter/spatial-filter/spatial-filter-item/spatial-filter-item.component.ts","ng://@igo2/geo/lib/filter/filter.module.ts","ng://@igo2/geo/lib/import-export/export-button/export-button.component.ts","ng://@igo2/geo/lib/import-export/shared/export.errors.ts","ng://@igo2/geo/lib/import-export/shared/export.utils.ts","ng://@igo2/geo/lib/import-export/shared/export.type.ts","ng://@igo2/geo/lib/import-export/shared/export.service.ts","ng://@igo2/geo/lib/import-export/shared/import.errors.ts","ng://@igo2/geo/lib/import-export/shared/import.utils.ts","ng://@igo2/geo/lib/import-export/shared/import.service.ts","ng://@igo2/geo/lib/import-export/style-list/style-list.service.ts","ng://@igo2/geo/lib/import-export/import-export/import-export.component.ts","ng://@igo2/geo/lib/import-export/shared/drop-geo-file.directive.ts","ng://@igo2/geo/lib/import-export/style-list/style-list.provider.ts","ng://@igo2/geo/lib/import-export/style-list/style-list.module.ts","ng://@igo2/geo/lib/import-export/import-export.module.ts","ng://@igo2/geo/lib/map/map.module.ts","ng://@igo2/geo/lib/measure/measurer/measurer-item.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.module.ts","ng://@igo2/geo/lib/measure/measure.module.ts","ng://@igo2/geo/lib/overlay/overlay.module.ts","ng://@igo2/geo/lib/print/shared/print.service.ts","ng://@igo2/geo/lib/print/print/print.component.ts","ng://@igo2/geo/lib/print/shared/print.type.ts","ng://@igo2/geo/lib/print/print-form/print-form.component.ts","ng://@igo2/geo/lib/print/print.module.ts","ng://@igo2/geo/lib/query/shared/query-search-source.providers.ts","ng://@igo2/geo/lib/query/query.module.ts","ng://@igo2/geo/lib/search/shared/search-source.service.ts","ng://@igo2/geo/lib/search/shared/search.utils.ts","ng://@igo2/geo/lib/search/shared/search.service.ts","ng://@igo2/geo/lib/directions/directions-sources/directions-source.ts","ng://@igo2/geo/lib/directions/shared/directions-source.service.ts","ng://@igo2/geo/lib/directions/shared/directions.service.ts","ng://@igo2/geo/lib/directions/directions-form/directions-form.service.ts","ng://@igo2/geo/lib/directions/directions-form/directions-form.component.ts","ng://@igo2/geo/lib/directions/directions-form/directions-form-binding.directive.ts","ng://@igo2/geo/lib/directions/directions.module.ts","ng://@igo2/geo/lib/search/shared/search-source-service.providers.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.providers.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.providers.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.providers.ts","ng://@igo2/geo/lib/search/shared/search.enums.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.component.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.module.ts","ng://@igo2/geo/lib/search/search-settings/search-settings.component.ts","ng://@igo2/geo/lib/search/search-settings/search-settings.module.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.component.ts","ng://@igo2/geo/lib/search/search-bar/search-url-param.directive.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.module.ts","ng://@igo2/geo/lib/search/search-results/search-results.component.ts","ng://@igo2/geo/lib/search/search-results/search-results-item.component.ts","ng://@igo2/geo/lib/search/search-results/search-results-add-button.component.ts","ng://@igo2/geo/lib/search/search-results/search-results.module.ts","ng://@igo2/geo/lib/search/shared/search-pointer-summary.directive.ts","ng://@igo2/geo/lib/search/search.module.ts","ng://@igo2/geo/lib/toast/toast.component.ts","ng://@igo2/geo/lib/toast/toast.module.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.component.ts","ng://@igo2/geo/lib/workspace/widgets/widgets.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.module.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.service.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.service.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.directive.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.module.ts","ng://@igo2/geo/lib/workspace/workspace.module.ts","ng://@igo2/geo/lib/wkt/wkt.module.ts","ng://@igo2/geo/lib/geo.module.ts","ng://@igo2/geo/lib/datasource/shared/options/options-api.providers.ts","ng://@igo2/geo/lib/search/shared/sources/cadastre.ts","ng://@igo2/geo/lib/search/shared/sources/cadastre.providers.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.providers.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.providers.ts","ng://@igo2/geo/lib/directions/shared/directions.enum.ts","ng://@igo2/geo/lib/directions/directions-sources/osrm-directions-source.ts","ng://@igo2/geo/lib/directions/directions-sources/directions-source.provider.ts","ng://@igo2/geo/lib/import-export/shared/export-ionic.service.ts","ng://@igo2/geo/lib/print/shared/print-ionic.service.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.enum.ts","ng://@igo2/geo/lib/layer/layer-list-tool/layer-list-tool.enum.ts"],"names":["MetadataService","prototype","open","metadata","extern","window","url","Injectable","args","providedIn","MetadataButtonComponent","Object","defineProperty","this","_layer","value","_color","openMetadata","metadataService","layer","options","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","IgoMetadataModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","MatIconModule","MatButtonModule","MatTooltipModule","IgoLanguageModule","exports","declarations","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadataKey","metadataValue","__values","o","m","Symbol","iterator","next","done","__read","e","ar","push","error","__spread","concat","DataService","generateIdFromSourceOptions","wms","generateWMSIdFromSourceOptions","wmts","generateWMTSIdFromSourceOptions","xyz","generateXYZIdFromSourceOptions","feature","generateFeatureIdFromSourceOptions","osm","_options","type","generateId","layers","params","LAYERS","chain","charAt","location","origin","Md5","hashStr","uuid","DataSource","getLegend","style","scale","legend","setLegend","html","dataService","id","ol","createOlSource","tslib_1.__extends","FeatureDataSource","sourceOptions","format","getSourceFormatFromOptions","olSourceVector","olFormatCls","formatType","olformat","undefined","Error","olformat.GeoJSON","formatOptions","onUnwatch","queryTitle","OSMDataSource","olSourceOSM","XYZDataSource","olSourceXYZ","OgcFilterWriter","defineOgcFiltersDefaultOptions","ogcFiltersOptions","fieldNameGeometry","srcType","ogcFiltersDefaultValue","enabled","editable","geometryName","advancedOgcFilters","pushButtons","buildFilter","filters","extent","proj","ourBboxFilter","enableBbox","test","JSON","stringify","olfilter.bbox","getCode","join","checkIgoFiltersProperties","wfsOptions","srsName","featureNS","featurePrefix","featureTypes","filter","olfilter.and","bundleFilter","outputFormat","query","olFormatWFS","writeGetFeature","XMLSerializer","serializeToString","split","filterObject","_this","logicalArray_1","forEach","element","createFilter","operator","logical","logicalArray","filterOptions","geometry","wfsPropertyName","propertyName","wfsPattern","pattern","wfsMatchCase","matchCase","wfsWildCard","wildCard","wfsSingleChar","singleChar","wfsEscapeChar","escapeChar","wfsLowerBoundary","lowerBoundary","wfsUpperBoundary","upperBoundary","wfsGeometryName","wfsExtent","wfsWktGeometry","wkt_geometry","wfsSrsName","wfsBegin","begin","wfsEnd","end","wfsExpression","expression","olFormatWKT","readGeometry","dataProjection","featureProjection","olfilter.between","olfilter.contains","olfilter.during","olfilter.equalTo","olfilter.greaterThan","olfilter.greaterThanOrEqualTo","olfilter.intersects","olfilter.isNull","olfilter.lessThan","olfilter.lessThanOrEqualTo","olfilter.like","replace","olfilter.notEqualTo","olfilter.within","olfilter.or","olfilter.not","defineInterfaceFilterSequence","level","filterSequence","addInterfaceFilter","computeAllowedOperators","fields","defaultOperatorsType","allowedOperators","effectiveOperators","srcField","find","field","name","allowedOperatorsType","toLowerCase","operators","Intersects","spatial","fieldRestrict","Within","PropertyIsEqualTo","PropertyIsNotEqualTo","During","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","igoOgcFilterObject","parentLogical","f","active","filterid","igoSpatialSelector","filterArray","addFilterProperties","status","rebuiltIgoOgcFilterObjectFromSequence","sequence","nextElement_1","lastProcessedFilter_1","lastParentLogical_1","logicalArray_2","uiFilter","index","indexOf","console","log","computeIgoPushButton","groups","every","group","computedButtons","pb","bundles","bundle","ObjectUtils","copyDeep","title","ids","includes","pbGroup","handleOgcFiltersAppliedValue","ogcFilters","filterQueryStringPushButton","filterQueryStringAdvancedFilters","pushButtonBundle","g","conditions_1","map","buttonBundle","bundleCondition","buttons","ogcpb","enabledPb","igoFilters","filterQueryString","formatProcessedOgcFilter","processedFilter","layersOrTypenames","appliedFilter","layerOrTypenames","PropertyIsLike","PropertyIsBetween","PropertyIsNull","Contains","defaultEpsg","defaultMaxFeatures","defaultWfsVersion","defaultFieldNameGeometry","gmlRegex","RegExp","jsonRegex","formatWFSQueryString","dataSourceOptions","count","epsg","properties","versionWfs200","urlWfs","paramsWFS","effectiveCount","epsgCode","version","paramMaxFeatures","cnt","maxFeatures","srs","valueReference","sourceFields","fieldsNames_1","sourcefield","getFeature","getpropertyvalue","checkWfsParams","wfsDataSourceOptions","getFormatFromOptions","OlFormat.WFS","OlFormat","match","gmlFormat","olFormatGML2","olFormatGML32","olFormatGML3","OlFormat.TopoJSON","OlFormat.GeoJSON","OlFormat.EsriJSON","OlFormat.GPX","OlFormat.WKT","olFormatOSMXML","OlFormat.KML","WFSDataSource","overlaps","resolution","buildUrl","strategy","OlLoadingStrategy.bbox","queryStringValues","ogcFilterWriter","filterOrBox","filterOrPush","prefix","xmlFilter","baseUrl","download","dynamicUrl","wfsService","_super","getSourceFieldsFromWFS","WFSService","getData","defineFieldAndValuefromWFS","subscribe","getfeatureSourceField","alias","values","sf","wfsGetFeature","nb","http","get","responseType","Observable","fieldList","fieldListWoGeom","fieldListWoGeomStr","olFormats","oneFeature","features","readFeatures","getKeys","getGeometryName","manyFeatures","mfeatures","built_properties_value","complete","kv","getProperties","boundedBy","property","fieldType","featureProperties","v","HttpClient","GML2","GML3","GEOJSON","GEOJSON2","ESRIJSON","TEXT","HTML","HTMLGML2","IFRAME","BLANK","WMSDataSource","mapLabel","queryHtmlTarget","QueryHtmlTarget","refresh","updateParams","igoRefresh","Math","random","buildDynamicDownloadUrlFromParamsWFS","asWFSDataSourceOptions","olSourceImageWMS","sourceParams","VERSION","separator","currentStyle","dpi","DPI","MAP_RESOLUTION","FORMAT_OPTIONS","refreshIntervalSec","setInterval","wfsCheckup","mergeDeep","sourceField","initOgcFilters","FILTER","createDefaultTileGrid","projectionExtent","olproj.get","getExtent","size","extentGetWidth","resolutions","matrixIds","z","pow","olTileGridWMTS","extentGetTopLeft","WMTSDataSource","tileGrid","olSourceWMTS","CartoDataSource","crossOrigin","olSourceCarto","htmlString","config","items","visible","layerOptions","types_1","tslib_1.__values","types_1_1","oneType","cartocss","pop","color","substr","colors","data","j","layer_name","ArcGISRestDataSource","esrijsonFormat","olFormatEsriJSON","attributions","encodeURIComponent","timeFilter","time","timeExtent","customParams","bind","olloadingstrategy.bbox","legendInfo","parseInt","lyr","layerName","_b","_c","lyrLegend","layerId","label","TileArcGISRestDataSource","olSourceTileArcGISRest","WebSocketDataSource","createWebSocket","ws","WebSocket","onmessage","onMessage","onclose","onClose","onerror","onError","onopen","onOpen","event","featureAdded","readFeature","featureToRemove","getFeatureById","getId","removeFeature","addFeature","clear","close","MVTDataSource","mvtFormat","featureClass","olFormatMVT","olSourceVectorTile","ClusterDataSource","source","olSourceCluster","FEATURE","None","Move","Zoom","Default","LAYER","stringToLonLat","str","mapProjection","opts","lonLat","coordStr","negativeLon","degreesLon","minutesLon","secondsLon","directionLon","decimalLon","negativeLat","degreesLat","minutesLat","secondsLat","directionLat","decimalLat","zone","radius","conf","lon","lat","projectionStr","projectionRegex","lonlatCoord","lonLatPattern","lonLatRegex","dmsCoord","dmsCoordPattern","dmsRegex","patternUtm","utmRegex","patternMtm","mtmRegex","ddCoord","patternDd","ddRegex","dmdCoord","patternDmd","dmdRegex","patternBELL","bellRegex","mmCoord","mmPattern","mmRegex","isXYCoords","toLocaleUpperCase","trim","_a","parseFloat","convertDMSToDD","_d","epsgUtm","Number","_e","olproj","transform","_f","epsgMtm","_g","_h","_j","_k","message","_l","forceNA","olproj.transform","degrees","minutes","seconds","direction","dd","viewStatesAreEqual","state1","state2","zoom","trunc","center","formatScale","round","getResolutionFromScale","getScaleFromResolution","unit","olproj.METERS_PER_UNIT","ctrlKeyDown","originalEvent","altKey","MAC","metaKey","ctrlKey","shiftKey","roundCoordTo","coord","decimal","toFixed","lonLatConversion","projections","rawCoord3857","convertedLonLat","code","igo2CoordFormat","utmZone","utmZoneFromLonLat","utmName","rawCoordUtm","mtmZone","mtmZoneFromLonLat","mtmName","rawCoordMtm","projection","rawCoord","numericEpsgCode","ceil","long","Layer","dataSource","getZIndex","zIndex","setZIndex","baseLayer","opacity","setOpacity","isInResolutionsRange$","getMaxResolution","setMaxResolution","Infinity","updateInResolutionsRange","getMinResolution","setMinResolution","visible$","setVisible","isInResolutionsRange","showInLayerList","setMap","igoMap","unobserveResolution","observeResolution","resolution$$","viewController","resolution$","unsubscribe","getResolution","minResolution","maxResolution","authInterceptor","legendCollapsed","firstLoadComponent","BehaviorSubject","displayed$","combineLatest","pipe","bunch","createOlLayer","maxScaleDenom","minScaleDenom","legendOptions","collapsed","set","TITLE","ABSTRACT","CUSTOM","Watcher","ImageWatcher","watch","on","handleLoadStart","handleLoadEnd","unwatch","un","image","__watchers__","loading","SubjectStatus","Working","watcherIndex","splice","loaded","Done","TileWatcher","tile","getLayersLegends","legends","newContext","document","createElement","getContext","font","heightPos","layers_1","layers_1_1","legendUrls","legendUrl","legendImage","Image","src","onload","fillText","drawImage","height","legendUrls_1","legendUrls_1_1","VectorWatcher","ImageLayer","olOptions","olLayerImage","getSource","setImageLoadFunction","customLoader","watcher","xhr","XMLHttpRequest","interceptXhr","abort","getImage","arrayBufferView","Uint8Array","response","blob","Blob","imageUrl","URL","createObjectURL","send","status$","TileLayer","olLayerTile","VectorLayer","browsable","exportable","animation","flash","trackFeature","enableTrackFeature","olLayerVector","start","Date","getTime","listenerKey","animate","vectorContext","frameState","flashGeom","getGeometry","clone","elapsed","elapsedRatio","duration","easeOut","newColor","ColorAsArray","getStyleFunction","style2","styleClone","getType","getRadius","setRadius","getStroke","setColor","setWidth","getWidth","getFill","setText","setStyle","drawGeometry","unByKey","render","stopAnimation","trackFeatureListenerId","centerMapOnFeature","feat","getView","setCenter","getCoordinates","disableTrackFeature","VectorTileLayer","olLayerVectorTile","MapBrowserComponent","_view","updateView","ngOnInit","status$$","handleStatusChange","ngAfterViewInit","setTarget","ngOnDestroy","activityService","unregister","activityId","register","ActivityService","ZoomIfOutMapExtent","OverlayService","setFeatures","action","OverlayAction","features$","OverlayDirective","component","features$$","overlayService","res","handleFeatures","Directive","Self","olFormatGeoJSON","createOverlayLayer","overlayDataSource","createOverlayLayerStyle","defaultStyle","createOverlayDefaultStyle","markerStyle","createOverlayMarkerStyle","olFeature","createBufferStyle","strokeRGBA","strokeWidth","fillRGBA","bufferRadius","stroke","olstyle.Stroke","width","fill","olstyle.Style","olstyle.Circle","text","olstyle.Text","olstyle.Fill","overflow","customStyle","StyleService","createStyle","geometryType","getText","fillOpacity","strokeOpacity","strokeColor","fillWithOpacity","slice","strokeWithOpacity","iconColor","svgIconColor","svgOutlineColor","svg","outlineColor","isIE","navigator","userAgent","olstyle.Icon","imgSize","anchor","parseStyle","styleOptions","olCls","getOlCls","keys","_key","olKey","getOlKey","olstyle","toUpperCase","olstyle.RegularShape","createStyleByAttribute","styleByAttribute","attribute","icon","labelStyle","getLabel","baseStyle","val","toString","getStyle","OlFeature","createClusterStyle","clusterParam","layerStyle","clusterRanges","minRadius","maxRadius","showRange","dynamicRadius","clusterRadius","radiusMin","image_","radiusCalc","labelMatch","labelToGet","from","matchAll","layerIsQueryable","queryable","olLayerIsQueryable","olLayer","LayerItemComponent","_activeLayer","selectionMode","layerTool$","renderer","addClass","elRef","nativeElement","focusedCls","removeClass","_selectAll","layerCheck","layers$","removable","expandLegendIfVisible","toggleLegend","updateQueryBadge","onResolutionChange","tooltipText","computeTooltip","networkService","currentState","state","showLegend$","toggleLegendOnClick","toggleVisibility","toggleLegendOnVisibilityChange","tooltip","layerTooltip","layerMetadata","TooltipType","abstract","inResolutionRange","updateLegendOnResolutionChange","inResolutionRange$","hidden","queryBadge","queryBadgeHidden$","toggleLayerTool","getValue","emit","check","checkbox","NetworkService","Renderer2","ElementRef","Output","orderable","lowerDisabled","raiseDisabled","EventEmitter","LayerLegendComponent","lastlLegend","styles","listStyles","STYLES","legendItems$","toggleLegendItem","item","transfertToggleLegendItem","newLegends","outLegends","lastLegends","computeItemTitle","layerLegend","of","localLayerOptions","parse","capabilitiesService","getWMSOptions","wmsDataSourceOptions","_layerOptionsFromSource","getScale","updateLegend","legendItems","stylesAvailable","languageService","translate","instant","sA","normalize","onChangeStyle","getParams","onLoadImage","elemRef","renderedLegends","first","renderedLegend","imagesHeight","CapabilitiesService","LanguageService","ViewChildren","LayerLegendItemComponent","LayerLegendListComponent","_layers","change$$","change$","debounce","EMPTY","timer","computeShownLayers","hasVisibleOrInRangeLayers$","hasVisibleAndNotInRangeLayers$","layersInUi$","excludeBaseLayers","shownLayers","showAllLegendsValue","sortLayersByZindex","sort","layer1","layer2","toggleShowAllLegends","toggle","allLegendsShown","showAllLegend","ReplaySubject","allowShowAllLegends","always","never","default","LayerListComponent","_map","activeLayer$","_keyword","_onlyVisible","_sortedAlpha","activeLayer","getUpperLayer","isUpperBaselayer","getLowerLayer","isLowerBaselayer","layersChecked","raisableLayers","selectAllCheck","lowerableLayers","layersCheckedOpacity","showToolbar$","computeShowToolbar","computeLayers","appliedFilterAndSort","keyword","sortAlpha","onlyVisible","selectAllCheck$$","selectAllCheck$","checks","layerTool","lay","clearKeyword","l","reduce","prev","current","findIndex","base","mapIndex","this_1","currentLayer","previousLayer","raisableLayer","raiseLayers","layersToRaise","this_2","layers_2","layers_2_1","setTimeout","elements","computeElementRef","isScrolledIntoView","offsetParent","scrollTop","offsetTop","this_3","nextLayer","layers_3","layers_3_1","lowerableLayer","lowerLayers","layersToLower","this_4","layers_4","layers_4_1","offsetHeight","clientHeight","layersOut","filterLayers","sortLayersByTitle","onKeywordChange","term","onAppliedFilterAndSortChange","layerFilterAndSortOptions","showToolbar","LayerListControlsEnum","keepLayerIds","layerKeywords","keywordList","kw","localKeyword","layerTitle","dataSourceType","keywordRegex_1","keywordInList","a","thresholdToFilterAndSort","toggleOpacity","removeLayers","layers_5","layers_5_1","removeLayer","layersCheck","eventMapIndex","this_5","toggleSelectionMode","selection","selectAll","elemSource","elem","docViewTop","docViewBottom","elemTop","checkItems","getElementsByClassName","checkItem","getElementsByTagName","ContentChild","layersAreAllVisible","ogcButton","timeButton","floatLabel","expandLegendOfVisibleLayers","MapService","getMap","LayerListBindingDirective","layersOrResolutionChange$$","mapService","debounceTime","setLayersVisibilityStatus","layersVisibility$$","visibles","Boolean","allLayersAreVisible","RouteService","Optional","route","LayerListToolComponent","onlyVisible$","sortAlpha$","term$","term$$","onlyVisible$$","sortAlpha$$","clearTerm","toggleSortAlpha","toggleOnlyVisible","LayerListToolService","onlyInRange","keywordInitialized","sortedAlphaInitialized","onlyVisibleInitialized","onlyInRangeInitialized","TrackFeatureButtonComponent","toggleTrackFeature","EntityStoreStrategy","FeatureStoreLoadingStrategy","bindStore","store","watchStore","unbindStore","unwatchStore","doActivate","stores","doDeactivate","unwatchAll","stores$$","has","subscription","view","all$","onFeaturesChange","delete","entries","clearLayer","setLayerFeatures","selectMotion","viewScale","areaRatio","getFeatureId","motion","pristine","FeatureMotion","Map","FeatureStoreLoadingLayerStrategy","onSourceChanges","olFeatures","getFeatures","setStoreOlFeatures","EntityStore","FeatureStore","bindLayer","getEntityId","checkLayer","featureToOl","setLayerOlFeatures","featureFromOl","load","diff","computeOlFeaturesDiff","remove","removeOlFeaturesFromLayer","add","addOlFeaturesToLayer","moveToOlFeatures","addFeatures","entities","OlDragSelectInteraction","OlDragBoxInteraction","FeatureStoreSelectionStrategy","_overlayStore","activate","unselectAll","updateAll","selected","overlayStore","addOverlayLayer","listenToMapClick","dragBox","addDragBoxInteraction","watchAll","unlistenToMapClick","removeDragBoxInteraction","removeOverlayLayer","stores$","stateView","manyBy$","record","records","entity","skip","onSelectFromStore","mapClickListener","onMapClick","listener","exclusive","reverse","getFeaturesAtPixel","pixel","hitTolerance","layerFilter","onSelectFromMap","olDragSelectInteraction","olInteractions","getInteractions","getArray","olInteractions_1","olInteractions_1_1","olInteraction","condition","addInteraction","olDragSelectInteractionEndKey","onDragBoxEnd","removeInteraction","mapBrowserEvent","acc","olSource","getFeaturesInExtent","doMotion","overlayFeaturesKeys","featuresKeys","getKey","groupedFeatures","groupFeaturesByStore","unselectAllFeaturesFromStore","selectFeaturesFromStore","reverseMany","updateMany","createOverlayStore","overlayLayer","addLayer","projectionOut","OlFormatGeoJSON","setId","getEntityTitle","mapTitle","getEntityProperty","getEntityRevision","getEntityIcon","meta","sourceId","renderFeatureFromOl","olRenderFeature","projectionIn","geom","exclude","excludeOffline","excludeAttribute","excludeAttributeOffline","olFormat","ends","ends_","OlPolygon","flatCoordinates_","OlGeometryLayout","XY","OlPoint","OlLineString","writeGeometryObject","startsWith","revision","getRevision","computeOlFeatureExtent","olExtent","olextent.createEmpty","olFeatureExtent","olFeatureProjection","olproj.transformExtent","olGeometry","computeOlFeaturesExtent","featureExtent","olextent.extend","scaleExtent","olextent","getSize","featuresAreOutOfView","featuresExtent","mapExtent","viewExtent","x","olextent.containsExtent","featuresAreTooDeepInView","mapExtentArea","olextent.getArea","featuresExtentArea","getZoom","zoomToExtent","moveToExtent","tryBindStoreLayer","tryAddLoadingStrategy","getStrategyOfType","addStrategy","activateStrategyOfType","tryAddSelectionStrategy","olFeaturesMap","olFeaturesToRemove","newOlFeature","olFeaturesToAddIds","FeatureFormComponent","feature$","onSubmit","formDataToFeature","submitForm","igoForm","propertyPrefix","entry","ViewChild","Overlay","removeOlFeature","addOlFeatures","addOlFeature","removeFeatures","LayerWatcher","unwatchLayer","watchLayer","layer$$","distinctUntilChanged","subscriptions","status_1","Waiting","MapController","getOlMap","olMap","setOlMap","teardownObservers","observerKeys","MapViewController","stateHistory","setupObservers","onMoveEnd","extent$$","extent$","setExtent","getOlProjection","olView","getProjection","getCenter","calculateExtent","getUnits","zoomIn","zoomTo","zoomOut","cancelAnimations","easing","oleasing.easeOut","MapViewAction","getRotation","resetRotation","rotation","hasPreviousState","states","stateIndex","hasNextState","previousState","setStateIndex","nextState","clearStateHistory","setInitialState","fromCenter","toCenter","distCenter","sqrt","fromExtent","fromSize","xSize","maxZoom","maxZoomOnExtent","fit","padding","setState","state$","Subject","IgoMap","init","controls","attribution","attributionOpt","olControlAttribution","scaleLine","scaleLineOpt","olControlScaleLine","interactions","altShiftDragRotate","doubleClickZoom","keyboard","mouseWheelZoom","shiftDragZoom","dragPan","pinchRotate","pinchZoom","olinteraction.defaults","setView","overlay","buffer","layerWatcher","currentView","viewOptions","unsubscribeGeolocate","olproj.fromLonLat","geolocate","alwaysTracking","changeBaseLayer","getBaseLayers","setMinZoom","minZoom","setMaxZoom","getLayerById","addLayers","offsetZIndex","offsetBaseLayerZIndex","addedLayers","offset","doAddLayer","setLayers","newLayers","layersToRemove","getLayerIndex","doRemoveLayer","removeAllLayers","raiseLayer","moveLayer","lowerLayer","reverseLayers","reverseLayers_1","reverseLayers_1_1","to","layerTo","zIndexTo","zIndexFrom","existingLayer","maxZIndex","max","sortLayersByZIndex","track","geolocation$$","geolocation","getTracking","startGeolocation","geolocation$","getAccuracy","getAccuracyGeometry","geolocationFeature","bufferFeature","positionFollower","options_","coordinates","getPosition","bufferGeom","olCircle","bufferStroke","bufferFill","bufferText","showBufferRadius","setZoom","stopGeolocation","setTracking","olGeolocation","trackingOptions","enableHighAccuracy","tracking","evt","onOfflineToggle","offline","offlineButtonToggle$","defaultOptions","olproj4.register","proj4","MapOfflineDirective","offlineButtonToggle","offlineButtonStatus","networkState","connection","messageService","info","offlineButtonState","changeLayer","message_1","title_1","messageObs","titleObs","message1","title1","pathOffline","setUrl","MessageService","PointerPositionDirective","listenToMapPointerMove","unlistenToMapPointerMove","pointerMoveListener","onPointerEvent","pointerPositionDelay","delay","dragging","mediaService","isTouchScreen","lastTimeoutRequest","clearTimeout","lonlat","coordinate","pointerPositionCoord","MediaService","PointerPositionByKeyDirective","subscribeToKeyDown","subscribeToKeyUp","unsubscribeToKeyDown","unsubscribeToKeyUp","pointerPositionByKeyDelay","keyDown$$","fromEvent","keyCode","pointerPositionByKeyCode","definedKeyIsDown$","keyUp$$","lonlat_1","pointerPositionByKeyCoord","ProjectionService","registerProjection","defs","def","ConfigService","getConfig","ZoomButtonComponent","getMinZoom","getMaxZoom","GeolocateButtonComponent","OfflineButtonComponent","onToggle","btnStyle","colorOff","change","baseLayersSwitcherSlideInOut","trigger","transition","BaseLayersSwitcherComponent","_useStaticIcon","layers$$","arrayLayers","_baseLayers","collapseOrExpand","baseLayers","useStaticIcon","expand","mapResolution","mapZoom","bl","blHidden","animations","showButton","media$","Media","Mobile","MiniBaseMapComponent","handleMoveEnd","_baseLayer","handleBaseLayerChanged","_disabled","_display","disabled","appRef","tick","basemap","baselayer","layerService","createLayer","LayerService","ApplicationRef","RotationButtonComponent","_showIfNoRotation","rotationStyle","radians","EsriStyleGenerator","_convertPointToPixel","point","_transformColor","_getResolutionForScale","units","mpu","_convertEsriTS","symbol","_transformAngle","angle","weight","family","textBaseline","verticalAlignment","textAlign","horizontalAlignment","offsetX","xoffset","offsetY","yoffset","_convertEsriPMS","contentType","imageData","_convertEsriSFS","outline","_convertOutline","lineDash","color$$1","_convertEsriSLS","ol3Rad","PI","_convertEsriSMS","points","radius2","_convertLabelingInfo","labelingInfo","mapUnits","ii","labelExpression","maxScale","minScale","_converters","_renderSimple","_renderClassBreaks","defaultSymbol","classes","classBreakInfos","classBreakInfo","min","classMinValue","minValue","classMaxValue","_renderUniqueValue","field1","infos","uniqueValueInfos","me","hash","generateStyle","layerInfo","drawingInfo","styleFunctions","drawingInfoStyle","_renderers","labelingInfoStyleFunctions","result","esriPMS","esriSFS","esriSLS","esriSMS","esriTS","uniqueValue","simple","classBreaks","DATE","TIME","DATETIME","YEAR","CALENDAR","SLIDER","baseOptions","getCapabilities","capabilities","parseWMSOptions","getWMTSOptions","parseWMTSOptions","getCartoOptions","account","mapId","jsonp","cartoOptions","parseCartoOptions","getArcgisOptions","arcgisOptions","catchError","err","forkJoin","parseArcgisOptions","getTileArcgisOptions","parseTileArcgisOptions","service","HttpParams","fromObject","request","_i","parsers","read","caught","findDataSourceInCapabilities","Capability","queryFormat","DataURL","Abstract","KeywordList","getTimeFilter","timeFilterable","Style","queryFormatMimeTypePriority","QueryFormatMimeType","mimeType","Request","GetFeatureInfo","Format","keyEnum","QueryFormat","queryFormatMimeTypePriority_1","queryFormatMimeTypePriority_1_1","removeUndefined","Title","MaxScaleDenominator","MinScaleDenominator","OnlineResource","Contents","el","Identifier","optionsFromCapabilities","ouputOptions","layer_definition","styleGenerator","olAttribution","copyrightText","timeInfo","setTime","toUTCString","range","TimeFilterType","TimeFilterStyle","layerArray","layer_1","isArray","Name","dimension","Dimension","minMaxDim","step","self","tslib_1.__decorate","Cacheable","maxCacheCount","WMSCapabilities","WMTSCapabilities","OptionsService","DataSourceService","createAsyncDataSource","context","createOSMDataSource","createFeatureDataSource","createWFSDataSource","wmsContext","removeDuplicateCaseInsensitive","createWMSDataSource","createWMTSDataSource","createXYZDataSource","createCartoDataSource","createArcGISRestDataSource","createWebSocketDataSource","createMVTDataSource","createTileArcGISRestDataSource","createClusterDataSource","datasources$","wfsDataSourceService","observables","optionsService","optionsFromApi","toDisplay","optionsMerged","projectionService","OptionsApiService","urlApi","Inject","createTileLayer","createVectorLayer","createImageLayer","createVectorTileLayer","createAsyncLayer","dataSourceService","styleService","serviceStyle_1","serviceStyle_2","baseStyle_1","clusterBaseStyle","layerOptionsOl","applyMapboxStyle","serviceStyle_3","mapboxStyle","getMapboxGlStyle","stylefunction","AuthInterceptor","Group","baselayers","composite","Catalog","catalogService","WMSCatalog","collectCatalogItems","loadCatalogWMSLayerItems","sType","TypeCatalog","WMTSCatalog","loadCatalogWMTSLayerItems","BaselayersCatalog","loadCatalogBaseLayerItems","CompositeCatalog","loadCatalogCompositeLayerItems","CatalogFactory","createInstanceCatalog","QueryService","queryLayer","getQueryUrl","extractData","urlGml","mergeMap","gmlRes","imposedGeom","mergeGML","parser","olformat.WMSGetFeatureInfo","pts","firstFeatureType","olmpts","olmline","olgeom.MultiLineString","ptsArray","olmpoly","olgeom.MultiPolygon","nbFeatures","bbox","getQueryParams","bboxExtent","featureGeometryCoordinates","featureGeometryType","olgeom.Point","appendLineString","olgeom.LineString","appendPolygon","olgeom.Polygon","convexHull","cross","lower","points_1","points_1_1","upper","imposedGeometry","queryDataSource","allowedFieldsAndAlias","getAllowedFieldsAndAlias","extractGML3Data","extractGeoJSONData","extractEsriJSONData","extractTextData","extractHtmlData","extractGML2Data","geomToAdd","createGeometryFromUrlClick","features_1","features_1_1","getQueryTitle","sourceTitle","order","searchParams","bboxRaw","xPosition","yPosition","y","crs","threshold","abs","clickx","clicky","clickx1","clicky1","wktPoly","olformat.WKT","warn","featureToResult","htmlTarget","bodyTagStart","bodyTagEnd","lastIndexOf","body","queryString","pairs","pair","decodeURIComponent","featureOL","featureGeometry","shape","SHAPE","the_geom","datasource","forceGML2","wmsDatasource","WMSGetFeatureInfoOptions","INFO_FORMAT","getMimeInfoFormat","QUERY_LAYERS","FEATURE_COUNT","getGetFeatureInfoUrl","cartoDatasource","sql","meters","queryPrecision","tileArcGISRestDatasource","olextent.boundingExtent","olextent.buffer","mime","getLabelMatch","queryEnabled","QueryDirective","cancelOngoingQueries","onMapEvent","queryService","queries$","queryFeatures","doQueryFeatures","queryLayers","waitForAllQueries","queries$$","zip","results","query$","clickedFeatures","forEachFeatureAtPixel","layerOL","newFeature","values_","nom","id_","_icon","OlRenderFeature","queryFeaturesHitTolerance","queryFeaturesCondition","queryableLayers","hasFeature","sub","SearchSource","getDefaultOptions","available","showInPointerSummary","showInSettings","searchUrl","settings","setParamFromSetting","setting","confValue_1","getHashtagsValid","settingsName","hashtags","searchSourceSetting","getSettingsValues","hashtagsValid","hashtag","hashtagKey","substring","types","search","QuerySearchSource","GoogleLinks","getGoogleMapsCoordLink","getGoogleStreetViewLink","getGoogleMapsNameLink","encodeURI","OsmLinks","getOpenStreetMapLink","getOpenStreetCamLink","CatalogService","loadCatalogs","contextConfig","catalogConfig","apiUrl","catalogsFromConfig","sources","observables$","baseLayersCatalog","catalogsFromApi$","catalogs","_response","loadCatalogItems","catalog","getCatalogBaseLayersOptions","layersOptions","CatalogItemType","getCatalogCapabilities","includeRecursiveItems","getWMTSItems","compositeCatalog","catalogsFromInstance","request1$","request2$","k","groupImpose","pushImposeGroup_1","outGroupImpose","address","flatLayer","flatDeepLayer","arr","obs","idx","request3$","output","recursiveGroupByLayerAddress","keyFn","outItem","indicesMatchTitle_1","bInd","nPosition","groupId","ind","ix","groupByGroupId","TypeCapabilities","prepareCatalogItemLayer","idParent","layersQueryFormat","configuredQueryFormat","retriveLayerInfoFormat","showLegend","queryParams","baseSourceOptions","setCrossOriginAnonymous","layerPrepare","tooltipType","prepareCatalogItemGroup","itemListIn","regexes","idGroup","idGroupItemNextLevel","groupItem","testLayerRegexes","layerItem","itemsPrepare","loopLevel","regFilters","findCatalogInfoFormat","idGroupItem","matrixSet","requestEncoding","regex","layerNameFromCatalog","currentLayerInfoFormat","baseInfoFormat","configuredInfoFormat","specific","CatalogBrowserComponent","currentItems","added","sortDirection","valueAccessor","catalogShowLegend","catalogAllowLegend","EntityStoreWatcher","cdRef","destroy","isGroup","isLayer","onLayerAddedChange","update","addLayerToMap","removeLayerFromMap","onGroupAddedChange","addGroupToMap","removeGroupFromMap","addLayersToMap","removeLayersFromMap","oLayers","oLayer","sortCatalogItemsByTitle","returnItem","titleA","titleB","ChangeDetectorRef","toggleCollapsedGroup","CatalogBrowserLayerComponent","isPreview$","addedLayerIsPreview","onMouseEvent","onToggleClick","askForLegend","layerLegendShown$","igoLayer$","addedChange","haveGroup","inRange$","CatalogBrowserGroupComponent","evaluateAdded","evaluateDisabled","added$","onToggleCollapsed","layerAddedChange","tryToggleGroup","onLayerPreview","preview$","all","toggleCollapsed","disabled$","onTitleClick","LayerLegendListBindingDirective","IgoLayerModule","MatInputModule","MatFormFieldModule","FormsModule","MatDividerModule","MatMenuModule","MatSlideToggleModule","MatSelectModule","MatListModule","MatSliderModule","MatBadgeModule","MatCheckboxModule","IgoListModule","IgoCollapsibleModule","IgoImageModule","IgoPanelModule","IgoCatalogBrowserModule","IgoMatBadgeIconModule","CatalogLibaryComponent","onCatalogSelect","focused","catalogSelectChange","CatalogLibaryItemComponent","IgoCatalogLibraryModule","IgoCatalogModule","IgoDataSourceModule","FilterableDataSourcePipe","arg","isTimeFilterable","isOgcFilterable","Pipe","TimeFilterService","filterByDate","date","newdateformStart","newdateformEnd","dates","reformatDateTime","filterByYear","year","years","getFullYear","month","getMonth","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","OGCFilterService","filterByOgc","filterString","setOgcWFSFiltersOptions","wfsDatasource","olProjection","interfaceOgcFilters","setOgcWMSFiltersOptions","filtered","Predefined","Polygon","Point","Address","Thematics","SpatialFilterService","getKeyByValue","object","loadFilterList","urlPath","urlFilterList","featureCollection","loadThematicsList","name_1","name_2","loadFilterItem","itemType","thematic","urlType","urlItem","SpatialFilterItemType","post","loc","loadItemById","featureType","featureCode","configService","AdmRegion","Arrond","CircFed","CircProv","DirReg","MRC","Mun","RegTour","bornes","hydro","routes","DownloadService","success","DSOptions","outputFormatDownload","baseurl","DownloadButtonComponent","openDownload","downloadService","IgoDownloadModule","FeatureDetailsComponent","_source","detectChanges","_feature","htmlSanitizer","sanitizer","bypassSecurityTrustResourceUrl","isObject","isUrl","filterFeatureProperties","DomSanitizer","IgoFeatureDetailsModule","IgoKeyValueModule","IgoFeatureFormModule","IgoFormModule","IgoFeatureModule","GeometryFormFieldComponent","geometryType$","drawGuide$","value$","formControl","value$$","valueChanges","FormFieldComponent","drawControlIsActive","freehandDrawIsActive","geometryTypeField","geometryTypes","drawGuideField","drawGuidePlaceholder","measure","Length","Area","Meters","Kilometers","Miles","Feet","MeasureLengthUnitAbbreviation","MeasureLengthUnit","SquareMeters","SquareKilometers","SquareMiles","SquareFeet","Hectares","Acres","MeasureAreaUnitAbbreviation","MeasureAreaUnit","metersToKilometers","metersToFeet","metersToMiles","squareMetersToSquareKilometers","squareMetersToSquareMiles","squareMetersToSquareFeet","squareMetersToHectares","squareMetersToAcres","metersToUnit","conversion","squareMetersToUnit","formatMeasure","parts","locale","toLocaleString","minimumFractionDigits","maximumFractionDigits","unitAbbr","computeBestLengthUnit","converted","possibleUnits","computeBestAreaUnit","createMeasureInteractionStyle","createMeasureLayerStyle","measureOlGeometryLength","getFlatCoordinates","olGetLength","measureOlGeometryArea","olGetArea","measureOlGeometry","area","lengths","flatCoordinates","coordinatesLength","olSegment","updateOlGeometryMidpoints","olMidpoints","getOlGeometryMidpoints","midpointsLength","midpointCoordinate","getCoordinateAt","olMidpoint","setCoordinates","expectedNumber","clearOlMidpointTooltip","olTooltip","removeOverlay","updateOlTooltipsAtMidpoints","createOlTooltipAtPoint","setPosition","getOlTooltipsAtMidpoints","updateOlGeometryCenter","olCenter","centerCoordinate","olGetCenter","updateOlTooltipAtCenter","getOlTooltipAtCenter","getTooltipsOfOlGeometry","olTooltips","olCenterTooltip","olPoint","OlOverlay","className","stopEvent","GeometrySliceError","GeometrySliceMultiPolygonError","GeometrySliceLineStringError","GeometrySliceTooManyIntersectionError","createDrawInteractionStyle","createDrawHoleInteractionStyle","sliceOlGeometry","olSlicer","sliceOlPolygon","sliceOlLineString","olLineString","olPolygon","getLinearRingCount","slicer","OlGeoJSON","outerCoordinates","getLinearRing","totalIntersectionCount","segmentCoordinates","segment","lineString","intersections","lineIntersect","intersectionCount","intersection","addLinearRingToOlPolygon","olLinearRing","appendLinearRing","getMousePositionFromOlGeometryEvent","olEvent","DrawControl","olOverlayLayer","clearOlInnerOverlaySource","removeOlInnerOverlayLayer","removeOlDrawInteraction","addOlInnerOverlayLayer","addOlDrawInteraction","olOverlaySource","createOlInnerOverlayLayer","OlVectorLayer","OlVectorSource","olDrawInteraction","freehand$","OlDraw","stopClick","drawStyle","maxPoints","freehand","freehandCondition","onDrawStartKey","onDrawStart","onDrawEndKey","onDrawEnd","start$","onChangesKey","olGeometryEvent","mousePosition","changes$","end$","removeLastPoint","ModifyControl","olLinearRingsLayer","removeOlModifyInteraction","removeOlTranslateInteraction","addOlTranslateInteraction","activateTranslateInteraction","addOlModifyInteraction","activateModifyInteraction","setOlGeometry","createOlLinearRingsLayer","addOlLinearRingsLayer","removeOlLinearRingsLayer","clearOlLinearRingsSource","olLinearRingsSource","olModifyInteraction","OlModify","deactivateModifyInteraction","olModifyInteractionIsActive","onModifyStartKey","onModifyStart","onModifyEndKey","onModifyEnd","onModifyKey","olTranslateInteraction","OlTranslate","deactivateTranslateInteraction","olTranslateInteractionIsActive","onTranslateStartKey","onTranslateStart","onTranslateEndKey","onTranslateEnd","onTranslateKey","olOuterGeometry","getOlGeometry","intersectsCoordinate","subscribeToDrawKeyDown","drawKeyDown$$","unsubscribeToDrawKeyDown","subscribeToDrawKeyUp","activateDrawInteraction","drawKeyUp$$","unsubscribeToDrawKeyUp","deactivateDrawInteraction","olDrawInteractionIsActive","removedOlInteractions","linearRingCoordinates","addLinearRingToOlGeometry","onDrawKey","_linearRingCoordinates","updateLinearRingOfOlGeometry","OlLinearRing","newCoordinates","getLinearRings","SliceControl","removeDrawLineControl","addDrawLineControl","drawLineControl","drawLineStart$$","olLine","onDrawLineStart","drawLineEnd$$","onDrawLineEnd","olSlicedGeometries","lineExtent","forEachFeatureInExtent","olParts","error$","MeasurerDialogComponent","onNoClick","dialogRef","MatDialogRef","MAT_DIALOG_DATA","measureAreaUnit","measureLengthUnit","MeasurerComponent","_activeMeasureType","setActiveMeasureType","activeDrawControl","initStore","createDrawLineControl","createDrawPolygonControl","createModifyControl","toggleDrawControl","onToggleTooltips","showTooltips","updateTooltipsOfOlSource","deactivateModifyControl","freezeStore","onMeasureTypeChange","measureType","activeMeasureType","onToggleDrawControl","deactivateDrawControl","showTooltipsOfOlSource","clearTooltipsOfOlSource","onToggleMeasureUnitsAuto","measureUnitsAuto","onLengthUnitChange","activeLengthUnit","table","activeOlGeometry","updateTooltipsOfOlGeometry","onAreaUnitChange","activeAreaUnit","onCalculateClick","selectedFeatures$","sum","perimeter","openDialog","onDeleteClick","deleteMany","onModifyClick","modifyControl","feature_1","_olFeature","activateModifyControl","clearTooltipsOfOlGeometry","dialog","many","onFeatureAddedKey","updateMeasureOfOlGeometry","onFeatureRemovedKey","selectedFeatures$$","deactivateStrategyOfType","olDrawSource","OlStyle","drawPolygonControl","MeasureType","activateDrawControl","drawControl","drawStart$$","drawEnd$$","drawChanges$$","onDrawChanges","clearMeasures","finalizeMeasureOfOlGeometry","addFeatureToStore","measure$","deactivate","modifyStart$$","modifyEnd$$","modifyChanges$$","onModifyChanges","setProperties","_measure","featureId","olMidpointsTooltips","length_1","updateOlTooltip","showTooltipsOfOlGeometry","shouldShowTooltip","addOverlay","forEachFeature","_unit","_type","getElement","innerHTML","computeTooltipInnerHTML","minSegmentLength","MatDialog","tableTemplate","selectMany","selectionCheckbox","columns","MeasureFormatPipe","out","GeometryFormFieldInputComponent","_geometryType","ready","deactivateControl","createDrawControl","toggleControl","_drawControlIsActive","_freehandDrawIsActive","_drawStyle","isStyleWithRadius","defaultDrawStyleRadius","_overlayStyle","_value","addGeoJSONToOverlay","onChange","olModify_1","features_","overlayStyle","addOlOverlayLayer","createMeasureTooltip","registerOnChange","fn","registerOnTouched","onTouched","writeValue","updateDrawStyleWithDrawGuide","activateControl","control","activeControl","olGeometryEnds$$","onOlGeometryEnds","olGeometryChanges$$","onOlGeometryChanges","removeMeasureTooltip","updateMeasureTooltip","circleToPoint","olGeoJSON","_radius","cos","lastIndex","lastLength","olLastMidpoint","innerHtml","olStyle","drawGuide","NgControl","ngControl","IgoGeometryFormFieldModule","ReactiveFormsModule","MatButtonToggleModule","IgoGeometryModule","entryComponents","TimeFilterButtonComponent","header","timeFilterCollapse","TimeFilterFormComponent","valueArray","startDate","endDate","isNaN","valueOf","getStepDefinition","timeInterval","getTimezoneOffset","startYear","initStartYear","endYear","initEndYear","isRange","startListYears","endListYears","listYears","checkFilterValue","yearChange","storeCurrentFilterValue","timeFromWms","newStartListYears","newEndListYears","handleDateChange","setupDateOutput","applyTypeChange","handleYearChange","handleListYearChange","handleListYearStartChange","dateToNumber","setSliderThumbLabel","thumbLabel","findThumbLabel","mySlider","_elementRef","childNodes","textContent","children","toggleFilterState","stopFilter","resetFilter","playFilter","interval","playIcon","that","newMinDateNumber","maxDateNumber","playYear","clearInterval","handleSliderDateChange","handleSliderTooltip","handleSliderYearChange","handleSliderValue","currentDate","getRoundedDate","toDateString","toTimeString","setSeconds","setHours","setMinutes","getDay","selectedHour","getHours","selectedMinute","getMinutes","getRangeMinDate","getRangeMaxDate","atMinute","coeff","moment.duration","asMilliseconds","DateAdapter","MatSlider","dateAdapter","resetIcon","setLocale","TimeFilterItemComponent","timeFilterService","filtersCollapsed","toggleFiltersCollapsed","TimeFilterListComponent","TimeFilterListBindingDirective","WktService","wktToFeature","wkt","wktProj","featureProj","olWKT","extentToWkt","epsgTO","extentProj","currentExtent","roundCoordinateArray","wktLine","wktMultiPoints","coordinateArray","roundArray","array","snrcToWkt","snrc","snrc250kIndex","snrc50kIndex","snrc1m","snrc250k","snrc50k","ar1m","part1m","part250k_1","part50k_1","partEW","partSN","index250kEW_1","index250kSN_1","index50kEW_1","index50kSN_1","increment250kEW","increment250kSN","increment50kEW","increment50kSN","unitPerTypeEW","unitPerTypeSN","ul","1","2","3","4","5","6","7","8","9","10","lr","ur","ll","OgcFilterFormComponent","currentFilter$","currentFilter","updateField","excludeFromOgcFilters","fields$","ogcFilterOperators$","refreshFilters","checked","removeOverlayByID","deleteFilter","changeNumericProperty","changeProperty","overlayId","baseOverlayName","changeOperator","changeCaseSensitive","changeGeometry","checkSNRC50k","checkSNRC250k","checkSNRC1m","wktService","allOgcFilterOperators","igoSpatialSelectors","OgcFilterableFormComponent","OgcFilterableItemComponent","hasPushButton","ogcFilterService","lastRunOgcFilter","hasActiveSpatialFilter","filtersAreEditable","addFilterToSequence","lastLevel","firstFieldName","includedFields","datasourceOptions","firstOperatorName","defaultLogicalParent","force","activeFilters","af","ogcLayer","rebuildFilter","isAdvancedOgcFilters","addFilterDisabled","changeOgcFiltersAdvancedOgcFilters","changeOgcFilterType","OgcFilterableListComponent","OgcFilterableListBindingDirective","OgcFilterButtonComponent","currentPushButtonGroup","gr","cntPushButtons_1","cb","button","ogcFilterCollapse","OgcFilterToggleButtonComponent","getPushButtonsGroups","applyFilters","getToolTip","tt","getButtonColor","background-color","bundleIsVertical","vertical","onChangeGroup","currentOgcPushButton","conditions","SpatialFilterTypeComponent","_store","selectedTypeIndex","spatialType","activeDrawType","eventType","onTypeChange","SpatialFilterType","onQueryTypeChange","eventQueryType","selectedQueryType","onZoneChange","zoneChange","onDrawTypeChange","queryType","FormControl","SpatialFilterListComponent","_queryType","setValue","formValueChanges$$","filterNormalized","displayFn","spatialFilterService","featureGeom","selectedZone","SpatialFilterItemComponent","reset","drawStyle$","radiusFormControl","PointStyle","PolyStyle","overlayStyle$","entities$","items_1","items_1_1","childrens","localeCompare","child","thematics","radiusChanges$$","detach","onItemTypeChange","selectedItemType","itemTypeChange","onMeasureUnitChange","measureUnit","isPredefined","isPolygon","isPoint","hasChild","_","node","treeControl","isExpanded","collapse","isAllSelected","numSelected","numNodes","selectedThematics","hasChildrenSelected","bool","masterToggle","selectedThematicsName","thematicChange","select","childrensToggle","deselect","onToggleChange","nodeSelected","onDrawControlChange","onfreehandControlChange","freehandControl","toggleSearchButton","drawZone","drawZoneEvent","radiusEvent","toggleSearch","clearButton","clearButtonEvent","clearSearch","clearSearchEvent","disableSearchButton","formValue","alert","export","NestedTreeControl","displayedColumns","MatTreeNestedDataSource","SelectionModel","displayedColumnsResults","IgoFilterModule","provide","MAT_DATE_LOCALE","useValue","MatAutocompleteModule","MatTabsModule","MatRadioModule","MatTableModule","MatTreeModule","MatOptionModule","MatDatepickerModule","MatNativeDateModule","MatDatetimepickerModule","MatNativeDatetimeModule","ExportButtonComponent","layerIsExportable","ExportError","ExportInvalidFileError","ExportNothingToExportError","handleFileExportError","handleNothingToExportError","handleFileExportSuccess","ExportFormat","strEnum","ExportService","exportOlFeatures","generateFeature","exportAsync","GPX","aggregateInComment","generateAggratedFeature","comment","observer","nothingToExport","ogreFormats","ogreUrl","noOgreFallbacks","exportToFile","exportWithOgre","featuresText","writeFeatures","fileName","downloadContent","form","display","appendChild","setAttribute","acceptCharset","enctype","geojsonField","outputNameField","outputName","ogreFormat","outputFormatField","submit","removeChild","GML","KML","Shapefile","CSVcomma","CSVsemicolon","gpxAggregateInComment","ImportError","ImportInvalidFileError","ImportUnreadableFileError","ImportNothingToImportError","ImportSizeError","ImportSRSError","addLayerAndFeaturesToMap","floor","olStyle.Stroke","olStyle.Fill","olStyle.Style","olStyle.Circle","addLayerAndFeaturesStyledToMap","styleListService","distance","getStyleList","styleByAttribute_1","clusterParam_1","clusterParam_2","baseStyle_2","handleFileImportSuccess","file","computeLayerTitleFromFile","messageTitle","handleNothingToImportError","handleFileImportError","sizeMb","Invalid file","handleInvalidFileImportError","File is too large","handleSizeFileImportError","Failed to read file","handleUnreadbleFileImportError","Invalid SRS definition","handleSRSImportError","getFileExtension","ImportService","import","importAsync","getFileImporter","extension","allowedMimeTypes","allowedZipMimeTypes","allowedExtensions","importFile","importFileWithOgre","clientSideFileSizeMax","importer","reader","FileReader","parseFeaturesFromFile","readAsText","formData","FormData","append","headers","HttpHeaders","errors","parseFeaturesFromGeoJSON","errMsg","msg","startWith","GeoJSON","olformat.KML","olformat.GML","olformat.GPX","writeFeatureObject","configFileSizeMb","StyleListService","resolve","styleList","baseStyleList","path","injector","Promise","_reject","throwError","styleListResponse","Injector","ImportExportComponent","exportableLayers$","fileSizeMb","exportOptions$$","exportOptions$","skipWhile","exportOptions","patchValue","emitEvent","computeFormats","formLayer$$","handlePreviousLayerSpecs","formats$","loading$","previousSpecs","previousLayerSpecs$","formats$$","formats","exportableLayers$$","exportOptionsChange","specs","importFiles","files","inputProj","espgCodeRegex","importService","onFileImportSuccess","onFileImportError","files_1","files_1_1","handleExportFormSubmit","filename","dSOptions","featureInMapExtent","flatMap","cluster","exportService","onFileExportError","onFileExportSuccess","buildForm","forceNaming","formBuilder","Validators","required","loadConfig","formatsType_1","onlyUrl","onlyVector","vectorAndUrl","validatedListFormat","validateListFormat","tabChanged","tab","selectedTabIndex","onImportExportChange","activeImportExport","FormBuilder","selectedIndex","DragAndDropDirective","DropGeoFileDirective","filesDropped$$","filesDropped","onFilesDropped","onDragOver","onDragLeave","onDrop","HostListener","filesInvalid","STYLELIST_OPTIONS","InjectionToken","provideStyleListOptions","styleListFactory","provideStyleListLoader","APP_INITIALIZER","useFactory","multi","deps","IgoStyleListModule","IgoImportExportModule","IgoSpinnerModule","IgoDrapDropModule","IgoMapModule","IgoConfirmDialogModule","MeasurerItemComponent","_auto","toggleAutoUnit","measureUnitChange","measure$$","computeBestMeasureUnit","IgoMeasurerModule","IgoEntityTableModule","IgoMeasureModule","IgoOverlayModule","html2canvas","_html2canvas","PrintService","print","paperFormat","orientation","doc","jsPDF","dimensions","internal","pageSize","margins","addTitle","showProjection","showScale","addProjScale","addComment","addMap","addLegend","saveDoc","getLayersLegendHtml","getLayersLegendImage","doZipFile","div","useCORS","then","canvas","generateCanvaFileToZip","saveCanvasImageAsFile","parentNode","catch","pageWidth","titleMarginLeft","titleWidth","setFont","setFontSize","heightPixels","textProjScale","imgData","toDataURL","addPage","imageSize","getImageSizeToFitPdf","addImage","addCanvas","rect","timeout","mapSize","widthPixels","once","mapStatus$$","mapStatus","renderMap","defineNbFileToProcess","nbFileToProcess","downloadMapImage","newCanvas","positionHCanvas","positionWProjScale","commentWidth","measureText","positionHProjScale","commentNbLine","positionHComment","fillStyle","fillRect","projText","scaleText","mapScale","nbCommentChar","CommentLengthToCut","commentCurrentLine","positionFirstCutChar","positionLastBlank","tiwContent","getWorldFileInformation","addFileToZip","saveAs","saveFileProcessing","renderSync","save","pageHeight","getHeight","canHeight","canWidth","heightRatio","widthRatio","maxRatio","currentResolution","blobFormat","msSaveBlob","msToBlob","toBlob","zipFile","JSZip","getZipFile","generateAsync","PrintComponent","_outputFormat","_paperFormat","_orientation","_imageFormat","_resolution","handleFormSubmit","isPrintService","printService","imageFormat","PrintOutputFormat","PrintPaperFormat","PrintOrientation","PrintResolution","PrintSaveImageFormat","PrintFormComponent","imageFormatField","Jpeg","onlySelf","Pdf","paperFormatField","Letter","orientationField","landscape","resolutionField","titleField","commentField","showProjectionField","showScaleField","showLegendField","doZipFileField","isValid","submitted","toggleImageSaveProp","outputFormats","paperFormats","orientations","imageFormats","IgoPrintModule","querySearchSourceFactory","provideQuerySearchSource","IgoQueryModule","SearchSourceService","getSources","getEnabledSources","enableSourcesByType","sourceCanSearch","sourceCanReverseSearch","reverseSearch","sourceCanReverseSearchAsSummary","SearchService","termIsValid","getEnabledOnly","searchSourceService","searchType","searchSources","asPointerSummary","reverseSourceFonction","reverseSearchSources","DirectionsSource","DirectionsSourceService","directionsSourceServiceFactory","provideDirectionsSourceService","DirectionsService","directionsOptions","directionsSourceService","routeSource","DirectionsFormService","getStopsCoordinates","stopsCoordinates","stops","stop","stopCoordinates","setStops","getStops","DirectionsFormComponent","changeRoute","showRouteGeometry","prevent","preventDefault","focusOnStop","browserLanguage","getLanguage","stopsForm","directionsType","directionsMode","stopOrderPriority","directionsFixedStartEnd","createStop","initStores","initOlInteraction","subscribeToFormChange","routesQueries$$","stream$","handleTermChanged","unsubscribeRoutesQueries","unlistenSingleClick","freezeStores","writeStopsToFormService","loadingStrategy","stopsStore","stopMarker","routeStore","selectedStopFeature","selectStop","olinteraction.Select","olcondition.pointerMove","translateStop","olinteraction.Translate","getLength","executeTranslation","selectedRoute","olcondition.click","selectCoordinates","addStop","pos","at","handleLocationProposals","addStopOverlay","reverseSearchProposal","overview","firstFeature","translatedPos","translationCoordinates","stopProposals","steps","alternatives","getRoutes","stopIndex","groupedLocations","roundedCoordinates","stopPoint","searchService","resultPos","changeDetectorRefs","directionsText","stopsCounts","raiseStop","moveStop","lowerStop","fromValue","removeStop","insert","directionsFormService","insertIndex","directionsPos","getStopOverlayID","deleteStoreFeatureByID","removeAt","resetForm","routesResults","nbStops","formatStep","formatInstruction","maneuver","modifier","bearing_after","exit","activeRoute","stepPosition","lastStep","directiveFr","directiveEn","directive","cssClass","translatedDirection","translateBearing","translatedModifier","translateModifier","frAggregatedDirection","enAggregatedDirection","coma","instruction","bearing","formatDistance","formatDuration","summary","showSegment","showRouteSegmentGeometry","vertexId","lastPoint","geojsonGeom","previousVertex","previousVertexRevision","vertexFeature","zoomRoute","routeFeature","routeExtent","geometryMapProjection","previousRoute","previousRouteRevision","coords","routeResponse","directionsService","focusKey","olobservable.unByKey","copyLinkToClipboard","Clipboard","copy","getUrl","copyDirectionsToClipboard","activeRouteDirective","wayPointList","wayPointsCnt","localCnt","directionsBody","searchProposals_1","search$$","currentStopIndex","setTerm","keyIsValid","invalidKeys","keyup","handleMapClick","clearStop","chooseProposal","proposal","geomCoord","getFirstCoordinate","getInteriorPoints","focus","indexPos","clickCoordinates","geolocateStop","geolocateCoordinates","stopColor","stopText","stopID","previousStop","previousStopRevision","stopFeature","stopOpacity","directionsKey","directionsCoordKey","directionsUrl","pathname","vertexStyle","stopStyle","routeStyle","DirectionsFormBindingDirective","storedStops","directionsParams","directionsCoordUrl_1","cnt_1","stopCoordinatesFromURL","IgoDirectionsModule","searchSourceServiceFactory","provideSearchSourceService","IChercheSearchResultFormatter","formatResult","IChercheSearchSource","title$","limit","ecmax","computeRequestParams","page","extractResults","getAllowedTypes","typesMatched","hashtagsLieuxToKeep","Set","computeOptionsParam","q","computeTerm","xMin","yMin","xMax","yMax","formatter","dataToResult","computeProperties","titleHtml","highlight","subtitleHtml","title2","subtitleHtml2","title3","dataType","nextPage","removeKeys","propertiesBlacklist","googleMaps","googleMapsNom","googleLinksProperties","GoogleMaps","pointOnFeature","municipalite","regAdmin","GoogleStreetView","some","h","authService","AuthService","authenticate$","IChercheReverseSearchSource","getSubtitle","subtitle","computeExtent","defaultIChercheSearchResultFormatterFactory","provideDefaultIChercheSearchResultFormatter","ichercheSearchSourceFactory","ichercheReverseSearchSourceFactory","CoordinatesSearchResultFormatter","CoordinatesReverseSearchSource","obj","roundedCoordString","coordLonLat","OpenStreetMap","defaultCoordinatesSearchResultFormatterFactory","provideDefaultCoordinatesSearchResultFormatter","CoordinatesReverseSearchSourceFactory","_projectionService","ILayerSearchResultFormatter","allowedKey","newKey","dataR","ILayerSearchSource","computeSearchRequestParams","computeLayerOptions","groupTitle","extractQueryParamsFromSourceUrl","metadataUrl","formatOpt","urls","urlOpt","ilayerSearchResultFormatterFactory","provideILayerSearchResultFormatter","ilayerSearchSourceFactory","SEARCH_TYPES","SearchSelectorComponent","searchType$","setSearchType","searchType$$","onSetSearchType","onSearchTypeChange","getSearchTypeTitle","searchTypeChange","searchTypes","IgoSearchSelectorModule","SearchSettingsComponent","handleKeyboardEvent","pointerSummaryEnabled","pointerSummaryStatus","hasPointerReverseSearchSource","hasReverseSearchSourcesForPointerSummary","getSearchSources","textSearchSources","computeSourcesCheckAllBehavior","settingsValueCheckedCheckbox","settingValue","searchSourceChange","computeSettingCheckAllBehavior","allEnabled","enabledSourcesCnt","disabledSourcesCnt","searchSourcesAllEnabled","checkUncheckAll","stopPropagation","checkUncheckAllSources","settingsValueCheckedRadioButton","onCheckSearchSource","getAvailableValues","getAvailableHashtagsValues","changePointerReverseSearch","fromTitleButton","lastKeyTime","now","IgoSearchSettingsModule","SearchBarComponent","empty$","stream$$","onSetTerm","onKeyup","onClearButtonClick","clearFeature","onSearchSettingsChange","doSearch","searchSettingsChange","slug","minLength","input","searchTermChange","placeholder","placeholder$","researches$$","research","researches","onResearchCompleted","newResults","searchSelector","searchSettings","SearchUrlParamDirective","searchKey","ref","IgoSearchBarModule","Grouped","Flat","SearchResultsComponent","_term","pageIterator","_results$","liftResults","settingsChange$","computeGroupTitle","onResultSelect","resultSelect","groupResults","sortByOrder","r1","r2","displayOrder","grouped","sourceResults","isMoreResults","displayMoreResults","moreResults","searchResultMode","SearchResultMode","mode","withZoomButton","resultFocus","resultUnfocus","resultMouseenter","resultMouseleave","SearchResultsItemComponent","getEntityTitleHtml","onZoomHandler","zoomEvent","SearchResultAddButtonComponent","tooltip$","layersSubcriptions","IgoSearchResultsModule","IgoStopPropagationModule","SearchPointerSummaryDirective","mouseout","subscribeToPointerStore","take","pointerPositionSummaryMarker","ngAfterContentChecked","unsubscribeToPointerStore","unsubscribeReverseSearch","store$$","pointerSearchStore","resultsUnderPointerPosition","entitiesToPointerOverlay","computeSummaryClosestFeature","closestResultByType","prevDistance","summarizedClosestType","processedSummarizedClosestType","typeIndex","addPointerOverlay","reverseSearch$$","igoSearchPointerSummaryEnabled","onSearchCoordinate","igoSearchPointerSummaryDelay","_results","onSearch","searchPointerSummaryFeatureId","pointerSummary","backgroundFill","backgroundStroke","IgoSearchModule","ToastComponent","_expanded","expanded","opened","zoomToFeatureExtent","swipe","SWIPE_ACTION","UP","DOWN","IgoToastModule","IgoFlexibleModule","OgcFilterComponent","onUpdateInputs","cancel","OgcFilterWidget","ogcFilterWidgetFactory","widgetService","provideOgcFilterWidget","WidgetService","IgoOgcFilterModule","WfsWorkspace","Workspace","WfsWorkspaceService","createWorkspace","entityStore","createFeatureStore","actionStore","ActionStore","createTableTemplate","selectionStrategy","WmsWorkspace","WmsWorkspaceService","WorkspaceSelectorDirective","onLayersChange","editableLayers","layerIsEditable","editableLayersIds","workspacesToAdd","getOrCreateWorkspace","workspace","workspacesToRemove","workspaceStore","insertMany","wfsWorkspaceService","wmsWorkspaceService","WorkspaceSelectorComponent","IgoWorkspaceSelectorModule","IgoGeoWorkspaceModule","IgoWidgetModule","IgoWktModule","IgoGeoModule","optionsApiFactory","CadastreSearchSource","endsWith","numero","lot","computeGeometry","NoLot","cadastreSearchSourceFactory","NominatimSearchSource","rxjs","i1","place_id","display_name","osm_type","class","boundingbox","computeTermTags","tag","computeTermSettings","nominatimSearchSourceFactory","StoredQueriesSearchSource","storedqueriesParams","storedQueriesOptions","outputformat","extractWFSData","patternGml3","olformat.WFS","WFS","geojson","wfsfeatures","splitterRegex","splitPrefix","remainingTerm","splittedTerm","storedquery_id","wfsversion","srsname","resultTitle","utils","defaultValue","multipleFieldsQuery","StoredQueriesReverseSearchSource","longLatParams","longField","latField","doc_type","storedqueriesSearchSourceFactory","storedqueriesReverseSearchSourceFactory","DirectionsFormat","SourceDirectionsType","Route","OsrmDirectionsSource","configurable","_name","getRouteParams","extractRoutesData","formatRoute","waypoints","geometries","stepsUI","leg","roadNetworkRoute","legs","sourceType","weight_name","osrmDirectionsSourcesFactory","ExportIonicService","directory_1","externalRootDirectory","fileOpener","fileName_1","Platform","FileOpener","File","ngInjectableDef","i0","defineInjectable","factory","inject","i1$1","i2","i3","i4$1","token","platform","PrintIonicService","setDate","docOutput","charCodeAt","getDate","provideOptionsApi","provideCadastreSearchSource","provideIChercheSearchSource","provideIChercheReverseSearchSource","provideCoordinatesReverseSearchSource","provideILayerSearchSource","provideNominatimSearchSource","provideStoredQueriesSearchSource","provideStoredQueriesReverseSearchSource","provideOsrmDirectionsSource","hideOlFeature","BasicNumericOperator","Basic","BasicAndSpatial","Spatial","All","Time","exportToCSV","rows","csvContent","row","entitiesToRowData","column","EntityTableColumnRenderer","clearOlGeometryMidpoints","featureToSearchResult"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { MetadataOptions } from './metadata.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MetadataService {\r\n  constructor() {}\r\n\r\n  open(metadata: MetadataOptions) {\r\n    if (metadata.extern) {\r\n      window.open(metadata.url, '_blank');\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport {\r\n  MetadataOptions,\r\n  MetadataLayerOptions\r\n} from '../shared/metadata.interface';\r\nimport { MetadataService } from '../shared/metadata.service';\r\n\r\n@Component({\r\n  selector: 'igo-metadata-button',\r\n  templateUrl: './metadata-button.component.html',\r\n  styleUrls: ['./metadata-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MetadataButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private metadataService: MetadataService) {}\r\n\r\n  openMetadata(metadata: MetadataOptions) {\r\n    this.metadataService.open(metadata);\r\n  }\r\n\r\n  get options(): MetadataLayerOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { MetadataButtonComponent } from './metadata-button/metadata-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [MetadataButtonComponent],\r\n  declarations: [MetadataButtonComponent]\r\n})\r\nexport class IgoMetadataModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMetadataModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export abstract class DataService {\r\n    abstract getData(): string;\r\n}\r\n","import { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { AnyDataSourceOptions } from '../datasource/shared/datasources/any-datasource.interface';\r\nimport { DataSourceOptions } from '../datasource/shared/datasources/datasource.interface';\r\nimport { WMSDataSourceOptions } from '../datasource/shared/datasources/wms-datasource.interface';\r\nimport { WMTSDataSourceOptions } from '../datasource/shared/datasources/wmts-datasource.interface';\r\n\r\n/**\r\n * Generate a id from it's datasource options.\r\n * @param options Data source options\r\n * @returns A id\r\n */\r\nexport function generateIdFromSourceOptions(options: DataSourceOptions): string {\r\n  const generators = {\r\n    wms: generateWMSIdFromSourceOptions,\r\n    wmts: generateWMTSIdFromSourceOptions,\r\n    xyz: generateXYZIdFromSourceOptions,\r\n    feature: generateFeatureIdFromSourceOptions,\r\n    osm: (_options: AnyDataSourceOptions) => 'OSM'\r\n  };\r\n  const generator = generators[options.type] || generateId;\r\n  return generator(options);\r\n}\r\n\r\n/**\r\n * Generate a id from WMS data source options\r\n * @param options WMS data source options\r\n * @returns A md5 hash of the the url and layers\r\n */\r\nexport function generateWMSIdFromSourceOptions(options: WMSDataSourceOptions) {\r\n  const layers = options.params.LAYERS;\r\n  const url = options.url.charAt(0) === '/' ? window.location.origin + options.url : options.url;\r\n  const chain = 'wms' + url + layers;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from WMTS data source options\r\n * @param options WMTS data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateWMTSIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const layer = options.layer;\r\n  const chain = 'wmts' + options.url + layer;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from XYZ data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateXYZIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const chain = 'xyz' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from feature data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateFeatureIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  if (! options.url) { return generateId(options); }\r\n  const chain = 'feature' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a unique id\r\n * @returns A uuid\r\n */\r\nexport function generateId(options: AnyDataSourceOptions) {\r\n  return uuid();\r\n}\r\n","import olSource from 'ol/source/Source';\r\n\r\nimport {\r\n  DataSourceOptions,\r\n  Legend\r\n} from './datasource.interface';\r\n\r\nimport { DataService } from './data.service';\r\nimport { generateIdFromSourceOptions } from '../../../utils/id-generator';\r\nimport { LegendOptions } from '../../../layer';\r\n\r\nexport abstract class DataSource {\r\n\r\n  public id: string;\r\n  public ol: olSource;\r\n  private legend: Legend[];\r\n\r\n  constructor(\r\n    public options: DataSourceOptions = {},\r\n    protected dataService?: DataService\r\n  ) {\r\n    this.options = options;\r\n    this.id = this.options.id ||Â this.generateId();\r\n    this.ol = this.createOlSource();\r\n  }\r\n\r\n  protected abstract createOlSource(): olSource;\r\n\r\n  protected generateId(): string {\r\n    return generateIdFromSourceOptions(this.options);\r\n  }\r\n\r\n  public getLegend(style?: string, scale?: number): Legend[] {\r\n    return this.legend ? this.legend : [];\r\n  }\r\n\r\n  public setLegend(options: LegendOptions): Legend[] {\r\n    if (options.url) {\r\n      this.legend = [{ url: options.url} ];\r\n    } else if (options.html) {\r\n      this.legend = [{ html: options.html} ];\r\n    } else {\r\n      this.legend = [];\r\n    }\r\n\r\n    return this.legend;\r\n  }\r\n\r\n  protected abstract onUnwatch();\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { FeatureDataSourceOptions } from './feature-datasource.interface';\r\n\r\nexport class FeatureDataSource extends DataSource {\r\n  public options: FeatureDataSourceOptions;\r\n  public ol: olSourceVector;\r\n  protected createOlSource(): olSourceVector {\r\n    const sourceOptions = {\r\n      format: this.getSourceFormatFromOptions(this.options)\r\n    };\r\n\r\n    return new olSourceVector(Object.assign(sourceOptions, this.options));\r\n  }\r\n\r\n  protected getSourceFormatFromOptions(options: FeatureDataSourceOptions) {\r\n    if (options.format) {\r\n      return options.format;\r\n    }\r\n    let olFormatCls;\r\n    const formatType = options.formatType;\r\n    if (!formatType) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    } else {\r\n      olFormatCls = olformat[formatType];\r\n      if (olFormatCls === undefined) {\r\n        throw new Error('Invalid vector source format ${formatType}.');\r\n      }\r\n    }\r\n\r\n    const formatOptions = options.formatOptions;\r\n    let format;\r\n    if (formatOptions) {\r\n      format = new olFormatCls(formatOptions);\r\n    } else {\r\n      format = new olFormatCls();\r\n    }\r\n\r\n    return format;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n}\r\n","import olSourceOSM from 'ol/source/OSM';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { OSMDataSourceOptions } from './osm-datasource.interface';\r\n\r\nexport class OSMDataSource extends DataSource {\r\n  public options: OSMDataSourceOptions;\r\n  public ol: olSourceOSM;\r\n\r\n  protected createOlSource(): olSourceOSM {\r\n    this.options.url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\r\n    return new olSourceOSM(this.options);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceXYZ from 'ol/source/XYZ';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { XYZDataSourceOptions } from './xyz-datasource.interface';\r\n\r\nexport class XYZDataSource extends DataSource {\r\n  public options: XYZDataSourceOptions;\r\n  public ol: olSourceXYZ;\r\n\r\n  protected createOlSource(): olSourceXYZ {\r\n    return new olSourceXYZ(this.options);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n}\r\n","import * as olfilter from 'ol/format/filter';\r\nimport olFormatWKT from 'ol/format/WKT';\r\nimport olFormatWFS from 'ol/format/WFS';\r\nimport olGeometry from 'ol/geom/Geometry';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { uuid, ObjectUtils } from '@igo2/utils';\r\n\r\nimport {\r\n  OgcFilter,\r\n  IgoOgcFilterObject,\r\n  WFSWriteGetFeatureOptions,\r\n  AnyBaseOgcFilterOptions,\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSourceOptions,\r\n  OgcFiltersOptions,\r\n  IgoPushButton,\r\n  PushButtonGroup,\r\n  OgcPushButtonBundle\r\n} from './ogc-filter.interface';\r\nimport { OgcFilterOperatorType } from './ogc-filter.enum';\r\nimport { SourceFieldsOptionsParams } from '../../datasource/shared/datasources/datasource.interface';\r\n\r\nexport class OgcFilterWriter {\r\n  private filterSequence: OgcInterfaceFilterOptions[] = [];\r\n  public operators = {\r\n    PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsLike: { spatial: false, fieldRestrict: ['string'] },\r\n    PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsGreaterThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsBetween: { spatial: false, fieldRestrict: ['number'] },\r\n    During: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNull: { spatial: false, fieldRestrict: [] },\r\n    Intersects: { spatial: true, fieldRestrict: [] },\r\n    Within: { spatial: true, fieldRestrict: [] },\r\n    Contains: { spatial: true, fieldRestrict: [] }\r\n  };\r\n\r\n  defineOgcFiltersDefaultOptions(\r\n    ogcFiltersOptions: OgcFiltersOptions,\r\n    fieldNameGeometry: string,\r\n    srcType?: string): OgcFiltersOptions  {\r\n    let ogcFiltersDefaultValue = true; // default values for wfs.\r\n    if (srcType && srcType === 'wms') {\r\n      ogcFiltersDefaultValue = false;\r\n    }\r\n\r\n    ogcFiltersOptions = ogcFiltersOptions || {};\r\n    ogcFiltersOptions.enabled = ogcFiltersOptions.enabled === undefined ? ogcFiltersDefaultValue : ogcFiltersOptions.enabled;\r\n    ogcFiltersOptions.editable = ogcFiltersOptions.editable === undefined ? ogcFiltersDefaultValue : ogcFiltersOptions.editable;\r\n    ogcFiltersOptions.geometryName = fieldNameGeometry;\r\n\r\n    ogcFiltersOptions.advancedOgcFilters = true;\r\n    if (ogcFiltersOptions.enabled && ogcFiltersOptions.pushButtons) {\r\n      ogcFiltersOptions.advancedOgcFilters = false;\r\n    }\r\n    return ogcFiltersOptions;\r\n  }\r\n\r\n  public buildFilter(\r\n    filters?: IgoOgcFilterObject,\r\n    extent?: [number, number, number, number],\r\n    proj?: olProjection,\r\n    fieldNameGeometry?: string\r\n  ): string {\r\n    let ourBboxFilter;\r\n    let enableBbox: boolean;\r\n    if (/intersects|contains|within/gi.test(JSON.stringify(filters))) {\r\n      enableBbox = false;\r\n    } else {\r\n      enableBbox = true;\r\n    }\r\n    if (filters) {\r\n      fieldNameGeometry =\r\n        (filters as any).geometryName !== undefined\r\n          ? (filters as any).geometryName\r\n          : fieldNameGeometry;\r\n    }\r\n    if (extent && filters) {\r\n      ourBboxFilter = olfilter.bbox(fieldNameGeometry, extent, proj.getCode());\r\n    }\r\n    let filterAssembly: OgcFilter;\r\n    if (filters) {\r\n      filters = this.checkIgoFiltersProperties(filters, fieldNameGeometry, proj);\r\n      if (extent && enableBbox) {\r\n        filterAssembly = olfilter.and(\r\n          ourBboxFilter,\r\n          this.bundleFilter(filters)\r\n        );\r\n      } else {\r\n        filterAssembly = this.bundleFilter(filters);\r\n      }\r\n    } else {\r\n      return 'bbox=' + extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    const wfsOptions: WFSWriteGetFeatureOptions = {\r\n      srsName: '',\r\n      featureNS: '',\r\n      featurePrefix: '',\r\n      featureTypes: ['featureTypes'],\r\n      filter: filterAssembly,\r\n      outputFormat: '',\r\n      geometryName: fieldNameGeometry\r\n    };\r\n\r\n    const query = new olFormatWFS().writeGetFeature(wfsOptions);\r\n    const str = new XMLSerializer().serializeToString(query);\r\n    const regexp1 = /typenames *=|typename *=\\\"featureTypes\\\" *>/gi;\r\n    const regexp2 = /<\\/Query><\\/GetFeature>/gi;\r\n\r\n    return 'filter=' + str.split(regexp1)[1].split(regexp2)[0];\r\n  }\r\n\r\n  private bundleFilter(filterObject: any) {\r\n    if (filterObject instanceof Array) {\r\n      const logicalArray = [];\r\n      filterObject.forEach(element => {\r\n        logicalArray.push(this.bundleFilter(element));\r\n      });\r\n      return logicalArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return this.createFilter({\r\n          operator: filterObject.logical,\r\n          logicalArray: this.bundleFilter(filterObject.filters)\r\n        });\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.createFilter(filterObject as AnyBaseOgcFilterOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createFilter(filterOptions): OgcFilter {\r\n    const operator = filterOptions.operator;\r\n    const logicalArray = filterOptions.logicalArray;\r\n\r\n    const wfsPropertyName = filterOptions.propertyName;\r\n    const wfsPattern = filterOptions.pattern;\r\n    const wfsMatchCase = filterOptions.matchCase\r\n      ? filterOptions.matchCase\r\n      : true;\r\n    const wfsWildCard = filterOptions.wildCard ? filterOptions.wildCard : '*';\r\n    const wfsSingleChar = filterOptions.singleChar\r\n      ? filterOptions.singleChar\r\n      : '.';\r\n    const wfsEscapeChar = filterOptions.escapeChar\r\n      ? filterOptions.escapeChar\r\n      : '!';\r\n\r\n    const wfsLowerBoundary = filterOptions.lowerBoundary;\r\n    const wfsUpperBoundary = filterOptions.upperBoundary;\r\n\r\n    const wfsGeometryName = filterOptions.geometryName;\r\n    const wfsExtent = filterOptions.extent;\r\n    const wfsWktGeometry = filterOptions.wkt_geometry;\r\n    const wfsSrsName = filterOptions.srsName\r\n      ? filterOptions.srsName\r\n      : 'EPSG:3857';\r\n\r\n    const wfsBegin = filterOptions.begin;\r\n    const wfsEnd = filterOptions.end;\r\n\r\n    const wfsExpression = filterOptions.expression;\r\n\r\n    let geometry: olGeometry;\r\n    if (wfsWktGeometry) {\r\n      const wkt = new olFormatWKT();\r\n      geometry = wkt.readGeometry(wfsWktGeometry, {\r\n        dataProjection: wfsSrsName,\r\n        featureProjection: wfsSrsName || 'EPSG:3857'\r\n      });\r\n    }\r\n\r\n    switch (operator) {\r\n      case 'BBOX':\r\n        return olfilter.bbox(wfsGeometryName, wfsExtent, wfsSrsName);\r\n      case 'PropertyIsBetween':\r\n        return olfilter.between(\r\n          wfsPropertyName,\r\n          wfsLowerBoundary,\r\n          wfsUpperBoundary\r\n        );\r\n      case 'Contains':\r\n        return olfilter.contains(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'During':\r\n        return olfilter.during(wfsPropertyName, wfsBegin, wfsEnd);\r\n      case 'PropertyIsEqualTo':\r\n        return olfilter.equalTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsGreaterThan':\r\n        return olfilter.greaterThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsGreaterThanOrEqualTo':\r\n        return olfilter.greaterThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'Intersects':\r\n        return olfilter.intersects(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'PropertyIsNull':\r\n        return olfilter.isNull(wfsPropertyName);\r\n      case 'PropertyIsLessThan':\r\n        return olfilter.lessThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLessThanOrEqualTo':\r\n        return olfilter.lessThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLike':\r\n        return olfilter.like(\r\n          wfsPropertyName,\r\n          wfsPattern.replace(/[()_]/gi, wfsSingleChar),\r\n          wfsWildCard,\r\n          wfsSingleChar,\r\n          wfsEscapeChar,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsNotEqualTo':\r\n        return olfilter.notEqualTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'Within':\r\n        return olfilter.within(wfsGeometryName, geometry, wfsSrsName);\r\n      // LOGICAL\r\n      case 'And':\r\n        return olfilter.and.apply(null, logicalArray);\r\n      case 'Or':\r\n        return olfilter.or.apply(null, logicalArray);\r\n      case 'Not':\r\n        return olfilter.not.apply(null, logicalArray);\r\n\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  public defineInterfaceFilterSequence(\r\n    filterObject: any,\r\n    geometryName,\r\n    logical = '',\r\n    level = -1\r\n  ): OgcInterfaceFilterOptions[] {\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            element,\r\n            geometryName,\r\n            logical,\r\n            level\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        level = level + 1;\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            filterObject.filters,\r\n            geometryName,\r\n            filterObject.logical,\r\n            level\r\n          )\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        this.filterSequence.push(\r\n          this.addInterfaceFilter(filterObject, geometryName, level, logical)\r\n        );\r\n      }\r\n    }\r\n    return this.filterSequence;\r\n  }\r\n\r\n  public computeAllowedOperators(\r\n    fields?: SourceFieldsOptionsParams[],\r\n    propertyName?: string,\r\n    defaultOperatorsType?: OgcFilterOperatorType ) {\r\n    let effectiveOperators: {} = {};\r\n    let allowedOperators;\r\n    if (fields && propertyName) {\r\n      const srcField = fields.find(field => field.name === propertyName);\r\n      allowedOperators = srcField && srcField.allowedOperatorsType ?\r\n        srcField.allowedOperatorsType : defaultOperatorsType;\r\n    }\r\n\r\n    allowedOperators = allowedOperators ? allowedOperators : 'basicandspatial';\r\n\r\n    switch (allowedOperators.toLowerCase()) {\r\n      case 'all':\r\n        effectiveOperators = this.operators;\r\n        break;\r\n      case 'spatial':\r\n        effectiveOperators = {\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n        break;\r\n      case 'basicandspatial':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n        break;\r\n      case 'basic':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] }\r\n        };\r\n        break;\r\n        case 'time':\r\n          effectiveOperators = {\r\n            During: { spatial: false, fieldRestrict: [] },\r\n          };\r\n          break;\r\n      case 'basicnumeric':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsGreaterThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n        };\r\n        break;\r\n      default:\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n    }\r\n\r\n    return effectiveOperators;\r\n  }\r\n\r\n  public addInterfaceFilter(\r\n    igoOgcFilterObject?,\r\n    geometryName?,\r\n    level = 0,\r\n    parentLogical = 'Or'\r\n  ): OgcInterfaceFilterOptions {\r\n    if (!igoOgcFilterObject) {\r\n      igoOgcFilterObject = { operator: 'PropertyIsEqualTo' };\r\n    }\r\n    const f = {\r\n      propertyName: '',\r\n      operator: '',\r\n      active: '',\r\n      filterid: uuid(),\r\n      begin: '',\r\n      end: '',\r\n      lowerBoundary: '',\r\n      upperBoundary: '',\r\n      expression: '',\r\n      pattern: '',\r\n      wildCard: '*',\r\n      singleChar: '.',\r\n      escapeChar: '!',\r\n      matchCase: true,\r\n      igoSpatialSelector: '',\r\n      geometryName: '',\r\n      geometry: '',\r\n      wkt_geometry: '',\r\n      extent: '',\r\n      srsName: '',\r\n      parentLogical: '',\r\n      level: 0\r\n    };\r\n\r\n    return Object.assign(\r\n      f,\r\n      {\r\n        parentLogical,\r\n        level,\r\n        geometryName\r\n      },\r\n      igoOgcFilterObject\r\n    );\r\n  }\r\n\r\n  public checkIgoFiltersProperties(\r\n    filterObject: any,\r\n    fieldNameGeometry,\r\n    proj: olProjection,\r\n    active = false\r\n  ) {\r\n    const filterArray = [];\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        filterArray.push(\r\n          this.checkIgoFiltersProperties(element, fieldNameGeometry, proj, active)\r\n        );\r\n      });\r\n      return filterArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return Object.assign(\r\n          {},\r\n          {\r\n            logical: filterObject.logical,\r\n            filters: this.checkIgoFiltersProperties(\r\n              filterObject.filters,\r\n              fieldNameGeometry,\r\n              proj,\r\n              active\r\n            )\r\n          }\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.addFilterProperties(\r\n          filterObject as OgcInterfaceFilterOptions,\r\n          fieldNameGeometry,\r\n          proj,\r\n          active\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private addFilterProperties(\r\n    igoOgcFilterObject: OgcInterfaceFilterOptions,\r\n    fieldNameGeometry,\r\n    proj: olProjection,\r\n    active = false\r\n  ) {\r\n    const filterid = igoOgcFilterObject.hasOwnProperty('filterid')\r\n      ? igoOgcFilterObject.filterid\r\n      : uuid();\r\n    const status = igoOgcFilterObject.hasOwnProperty('active')\r\n      ? igoOgcFilterObject.active\r\n      : active;\r\n\r\n    const srsName = igoOgcFilterObject.hasOwnProperty('srsName')\r\n      ? igoOgcFilterObject.srsName\r\n      : proj ? proj.getCode() : 'EPSG:3857';\r\n\r\n    return Object.assign(\r\n      {},\r\n      {\r\n        filterid,\r\n        active: status,\r\n        igoSpatialSelector: 'fixedExtent',\r\n        srsName\r\n      },\r\n      igoOgcFilterObject,\r\n      { geometryName: fieldNameGeometry }\r\n    );\r\n  }\r\n\r\n  public rebuiltIgoOgcFilterObjectFromSequence(\r\n    sequence: OgcInterfaceFilterOptions[]\r\n  ): IgoOgcFilterObject {\r\n    if (sequence instanceof Array) {\r\n      if (sequence.length >= 1) {\r\n        let lastParentLogical = sequence[0].parentLogical;\r\n        let nextElement: any;\r\n        let logicalArray = [];\r\n        let lastProcessedFilter;\r\n        sequence.forEach(uiFilter => {\r\n          const element = Object.assign({}, uiFilter);\r\n          const index = sequence.indexOf(uiFilter);\r\n          if (index >= 0 && index < sequence.length - 1) {\r\n            nextElement = sequence[index + 1];\r\n          } else {\r\n            nextElement = element;\r\n          }\r\n          delete element.active;\r\n          delete element.filterid;\r\n          delete element.parentLogical;\r\n          logicalArray.push(element);\r\n\r\n          if (sequence.length === 1) {\r\n            lastProcessedFilter = element;\r\n          } else if (lastParentLogical !== nextElement.parentLogical) {\r\n            if (logicalArray.length === 1) {\r\n              console.log(\r\n                'You must set at ' +\r\n                  'least two operator in a logical (' +\r\n                  lastParentLogical +\r\n                  ')'\r\n              );\r\n            } else {\r\n              lastProcessedFilter = Object.assign(\r\n                {},\r\n                { logical: lastParentLogical, filters: logicalArray }\r\n              );\r\n              logicalArray = [lastProcessedFilter];\r\n              lastParentLogical = nextElement.parentLogical;\r\n            }\r\n          }\r\n        });\r\n        return lastProcessedFilter;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private computeIgoPushButton(pushButtons: IgoPushButton): IgoPushButton {\r\n    if (pushButtons.groups.every(group => group.computedButtons !== undefined)) {\r\n      return pushButtons;\r\n    }\r\n    let pb: IgoPushButton;\r\n    if (pushButtons.groups && pushButtons.bundles) {\r\n      if (!pushButtons.bundles.every(bundle => bundle.id !== undefined)) {\r\n        throw new Error('You must set an id for each of your pushButtons bundles');\r\n      }\r\n      pb = ObjectUtils.copyDeep(pushButtons);\r\n      pb.groups.forEach(group => {\r\n        group.title = group.title ? group.title : group.name;\r\n        group.enabled = group.enabled ? group.enabled : false;\r\n        group.computedButtons = ObjectUtils.copyDeep(pb.bundles.filter(b => group.ids.includes(b.id)));\r\n      });\r\n    } else if (!pushButtons.groups && pushButtons.bundles) {\r\n      pb = ObjectUtils.copyDeep(pushButtons);\r\n      pb.groups = [{ title: 'group1', name: 'group1', computedButtons: ObjectUtils.copyDeep(pb.bundles) } as PushButtonGroup];\r\n    } else {\r\n      pb = {\r\n        bundles: pushButtons as OgcPushButtonBundle[],\r\n        groups: [\r\n          {\r\n            title: 'group1', name: 'group1',\r\n            computedButtons: ObjectUtils.copyDeep(pushButtons) as OgcPushButtonBundle[]\r\n          } as PushButtonGroup]\r\n      };\r\n    }\r\n    if (!pb.groups.find(pbGroup => pbGroup.enabled)) {\r\n      pb.groups[0].enabled = true;\r\n    }\r\n    return pb;\r\n  }\r\n\r\n  public handleOgcFiltersAppliedValue(\r\n    options: OgcFilterableDataSourceOptions,\r\n    fieldNameGeometry: string,\r\n    extent?: [number, number, number, number],\r\n    proj?: olProjection): string {\r\n    const ogcFilters = options.ogcFilters;\r\n    if (!ogcFilters) {\r\n      return;\r\n    }\r\n    let filterQueryStringPushButton = '';\r\n    let filterQueryStringAdvancedFilters = '';\r\n    if (ogcFilters.enabled && ogcFilters.pushButtons) {\r\n      ogcFilters.pushButtons = this.computeIgoPushButton(ogcFilters.pushButtons);\r\n      const pushButtonBundle = ogcFilters.pushButtons.groups.find(g => g.enabled).computedButtons;\r\n      const conditions = [];\r\n      pushButtonBundle.map(buttonBundle => {\r\n        const bundleCondition = [];\r\n        buttonBundle.buttons\r\n          .filter(ogcpb => ogcpb.enabled === true)\r\n          .forEach(enabledPb => bundleCondition.push(enabledPb.filters));\r\n        if (bundleCondition.length === 1) {\r\n          conditions.push(bundleCondition[0]);\r\n        } else if (bundleCondition.length > 1) {\r\n          conditions.push({ logical: buttonBundle.logical, filters: bundleCondition });\r\n        }\r\n      });\r\n      if (conditions.length >= 1) {\r\n        filterQueryStringPushButton = this.buildFilter(\r\n            conditions.length === 1 ? conditions[0] : { logical: 'And', filters: conditions },\r\n            extent,\r\n            proj,\r\n            ogcFilters.geometryName\r\n          );\r\n      }\r\n    }\r\n\r\n    if (ogcFilters.enabled && ogcFilters.filters) {\r\n      ogcFilters.geometryName = ogcFilters.geometryName || fieldNameGeometry;\r\n      const igoFilters = ogcFilters.filters;\r\n      filterQueryStringAdvancedFilters = this.buildFilter(igoFilters, extent, proj, ogcFilters.geometryName);\r\n    }\r\n\r\n    let filterQueryString = ogcFilters.advancedOgcFilters ? filterQueryStringAdvancedFilters : filterQueryStringPushButton;\r\n    if (options.type === 'wms') {\r\n      filterQueryString = this.formatProcessedOgcFilter(filterQueryString, (options as any).params.LAYERS);\r\n    }\r\n    if (options.type === 'wfs') {\r\n      filterQueryString = this.formatProcessedOgcFilter(filterQueryString, (options as any).params.featureTypes);\r\n    }\r\n\r\n    return filterQueryString;\r\n\r\n  }\r\n\r\n  public formatProcessedOgcFilter(\r\n    processedFilter: string,\r\n    layersOrTypenames: string): string {\r\n    let appliedFilter = '';\r\n    if (processedFilter.length === 0 && layersOrTypenames.indexOf(',') === -1) {\r\n      appliedFilter = processedFilter;\r\n    } else {\r\n      layersOrTypenames.split(',').forEach(layerOrTypenames => {\r\n        appliedFilter = `${appliedFilter}(${processedFilter.replace('filter=', '')})`;\r\n      });\r\n    }\r\n    appliedFilter = appliedFilter.replace(/\\(\\)/g, '');\r\n    const filterValue = appliedFilter.length > 0 ? appliedFilter.replace('filter=', '') : undefined;\r\n    return filterValue;\r\n  }\r\n}\r\n","import { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport * as OlFormat from 'ol/format';\r\nimport olFormatGML2 from 'ol/format/GML2';\r\nimport olFormatGML3 from 'ol/format/GML3';\r\nimport olFormatGML32 from 'ol/format/GML32';\r\nimport olFormatOSMXML from 'ol/format/OSMXML';\r\n\r\nexport const defaultEpsg = 'EPSG:3857';\r\nexport const defaultMaxFeatures = 5000;\r\nexport const defaultWfsVersion = '2.0.0';\r\nexport const defaultFieldNameGeometry = 'geometry';\r\nexport const gmlRegex = new RegExp(/(.*)?gml(.*)?/gi);\r\nexport const jsonRegex = new RegExp(/(.*)?json(.*)?/gi);\r\n\r\n/**\r\n * This method build/standardize WFS call query params based on the layer property.\r\n * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface\r\n * @param count  Number: Used to control the number of feature. Used to bypass whe wfs datasource options interface (maxFeatures)\r\n * @param epsg  String: Used to control the EPSG code (es: 'EPSG3857'). Used to bypass whe wfs datasource options interface (srsName)\r\n * @param properties  String: Used to control the queried fields  (WFS service).\r\n * @returns An array array of {name: '', value: ''} of predefined query params.\r\n */\r\nexport function formatWFSQueryString(\r\n  dataSourceOptions: WFSDataSourceOptions | WMSDataSourceOptions,\r\n  count?: number,\r\n  epsg?: string,\r\n  properties?: string\r\n): { name: string; value: string }[] {\r\n  const versionWfs200 = '2.0.0'; // not the same usage as defaultWfsVersion.\r\n  const url = dataSourceOptions.urlWfs;\r\n  const paramsWFS = dataSourceOptions.paramsWFS;\r\n  const effectiveCount = count || defaultMaxFeatures;\r\n  const epsgCode = epsg || defaultEpsg;\r\n  const outputFormat = paramsWFS.outputFormat\r\n    ? `outputFormat=${paramsWFS.outputFormat}`\r\n    : '';\r\n  const version = paramsWFS.version\r\n    ? `version=${paramsWFS.version}`\r\n    : `version=${defaultWfsVersion}`;\r\n  const paramTypename =\r\n    paramsWFS.version === versionWfs200 ? 'typenames' : 'typename';\r\n  const featureTypes = `${paramTypename}=${paramsWFS.featureTypes}`;\r\n  const paramMaxFeatures =\r\n    paramsWFS.version === versionWfs200 ? 'count' : 'maxFeatures';\r\n  const cnt = count\r\n    ? `${paramMaxFeatures}=${effectiveCount}`\r\n    : paramsWFS.maxFeatures\r\n    ? `${paramMaxFeatures}=${paramsWFS.maxFeatures}`\r\n    : `${paramMaxFeatures}=${effectiveCount}`;\r\n  const srs = epsg\r\n    ? `srsname=${epsgCode}`\r\n    : paramsWFS.srsName\r\n    ? 'srsname=' + paramsWFS.srsName\r\n    : `srsname=${epsgCode}`;\r\n\r\n  let propertyName = '';\r\n  let valueReference = '';\r\n  if (properties) {\r\n    propertyName = `propertyName=${properties}`;\r\n    valueReference = `valueReference=${properties}`;\r\n  }\r\n  const sourceFields = dataSourceOptions.sourceFields;\r\n  if (!propertyName && sourceFields && sourceFields.length > 0) {\r\n    const fieldsNames = [];\r\n    dataSourceOptions.sourceFields.forEach(sourcefield => {\r\n      fieldsNames.push(sourcefield.name);\r\n    });\r\n    propertyName = `propertyName=${fieldsNames.join(',')},${\r\n      paramsWFS.fieldNameGeometry\r\n    }`;\r\n  }\r\n\r\n  const getCapabilities = `${url}?service=WFS&request=GetCapabilities&${version}`;\r\n  let getFeature = `${url}?service=WFS&request=GetFeature&${version}&${featureTypes}&`;\r\n  getFeature += `${outputFormat}&${srs}&${cnt}&${propertyName}`;\r\n\r\n  let getpropertyvalue = `${url}?service=WFS&request=GetPropertyValue&version=${versionWfs200}&${featureTypes}&`;\r\n  getpropertyvalue += `&${cnt}&${valueReference}`;\r\n\r\n  return [\r\n    { name: 'outputformat', value: outputFormat },\r\n    { name: 'version', value: version },\r\n    { name: 'typename', value: featureTypes },\r\n    { name: 'count', value: cnt },\r\n    { name: 'srsname', value: srs },\r\n    { name: 'propertyname', value: propertyName },\r\n    { name: 'valuereference', value: valueReference },\r\n    { name: 'getcapabilities', value: getCapabilities.replace(/&&/g, '&') },\r\n    { name: 'getfeature', value: getFeature.replace(/&&/g, '&') },\r\n    { name: 'getpropertyvalue', value: getpropertyvalue.replace(/&&/g, '&') }\r\n  ];\r\n}\r\n\r\n/**\r\n * Validate/Modify layer's wfs options based on :\r\n * 1- an Openlayers's issue with GML provided from WFS. Refer to\r\n * https://github.com/openlayers/openlayers/pull/6400\r\n * 2- Set default values for optionals parameters.\r\n * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface\r\n * @returns An array array of {name: '', value: ''} of predefined query params.\r\n */\r\nexport function checkWfsParams(wfsDataSourceOptions, srcType?: string) {\r\n  if (srcType && srcType === 'wfs') {\r\n    // reassignation of params to paramsWFS and url to urlWFS to have a common interface with wms-wfs datasources\r\n    wfsDataSourceOptions.paramsWFS = wfsDataSourceOptions.params;\r\n  }\r\n\r\n  const paramsWFS = wfsDataSourceOptions.paramsWFS;\r\n  wfsDataSourceOptions.urlWfs =\r\n    wfsDataSourceOptions.urlWfs || wfsDataSourceOptions.url;\r\n\r\n  paramsWFS.version = paramsWFS.version || defaultWfsVersion;\r\n  paramsWFS.fieldNameGeometry =\r\n    paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;\r\n  paramsWFS.maxFeatures = paramsWFS.maxFeatures || defaultMaxFeatures;\r\n\r\n  let outputFormat;\r\n  if (paramsWFS.outputFormat) {\r\n    outputFormat = paramsWFS.outputFormat;\r\n  }\r\n\r\n  if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n    paramsWFS.version = '1.1.0';\r\n  }\r\n  return Object.assign({}, wfsDataSourceOptions);\r\n}\r\n\r\nexport function getFormatFromOptions(\r\n  options: WFSDataSourceOptions | WMSDataSourceOptions\r\n) {\r\n  const wfsOptions = options as WFSDataSourceOptions;\r\n\r\n  let olFormatCls = OlFormat.WFS;\r\n  const outputFormat = wfsOptions.paramsWFS.outputFormat\r\n    ? wfsOptions.paramsWFS.outputFormat\r\n    : undefined;\r\n\r\n  if (!outputFormat) {\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  }\r\n\r\n  if (OlFormat[outputFormat]) {\r\n    olFormatCls = OlFormat[outputFormat];\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  } else if (outputFormat.toLowerCase().match('gml2')) {\r\n    olFormatCls = OlFormat.WFS;\r\n    return new olFormatCls({ ...wfsOptions.formatOptions, ...Â { gmlFormat: olFormatGML2 }});\r\n  } else if (outputFormat.toLowerCase().match('gml32')) {\r\n    olFormatCls = OlFormat.WFS;\r\n    return new olFormatCls({ ...wfsOptions.formatOptions, ...Â { gmlFormat: olFormatGML32 }});\r\n  } else if (outputFormat.toLowerCase().match('gml3')) {\r\n    olFormatCls = OlFormat.WFS;\r\n    return new olFormatCls({ ...wfsOptions.formatOptions, ...Â { gmlFormat: olFormatGML3 }});\r\n  } else if (outputFormat.toLowerCase().match('topojson')) {\r\n    olFormatCls = OlFormat.TopoJSON;\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  } else if (outputFormat.toLowerCase().match('geojson')) {\r\n    olFormatCls = OlFormat.GeoJSON;\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  } else if (outputFormat.toLowerCase().match('esrijson')) {\r\n    olFormatCls = OlFormat.EsriJSON;\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  } else if (outputFormat.toLowerCase().match('json')) {\r\n    olFormatCls = OlFormat.GeoJSON;\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  } else if (outputFormat.toLowerCase().match('gpx')) {\r\n    olFormatCls = OlFormat.GPX;\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  } else if (outputFormat.toLowerCase().match('WKT')) {\r\n    olFormatCls = OlFormat.WKT;\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  } else if (outputFormat.toLowerCase().match('osmxml')) {\r\n    olFormatCls = olFormatOSMXML;\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  } else if (outputFormat.toLowerCase().match('kml')) {\r\n    olFormatCls = OlFormat.KML;\r\n    return new olFormatCls(wfsOptions.formatOptions);\r\n  }\r\n\r\n  return new olFormatCls();\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as OlLoadingStrategy from 'ol/loadingstrategy';\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions, OgcFiltersOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport {\r\n  formatWFSQueryString,\r\n  defaultFieldNameGeometry,\r\n  checkWfsParams,\r\n  getFormatFromOptions\r\n} from './wms-wfs.utils';\r\n\r\nexport class WFSDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n\r\n  constructor(\r\n    public options: WFSDataSourceOptions,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(checkWfsParams(options, 'wfs'));\r\n\r\n    const ogcFilters = (this.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    const fieldNameGeometry = this.options.paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    (this.options as OgcFilterableDataSourceOptions).ogcFilters =\r\n      ogcFilterWriter.defineOgcFiltersDefaultOptions(ogcFilters, fieldNameGeometry);\r\n    if (\r\n      (this.options as OgcFilterableDataSourceOptions).ogcFilters.enabled &&\r\n      (this.options as OgcFilterableDataSourceOptions).ogcFilters.editable\r\n    ) {\r\n      this.wfsService.getSourceFieldsFromWFS(this.options);\r\n    }\r\n  }\r\n\r\n  protected createOlSource(): olSourceVector {\r\n\r\n    return new olSourceVector({\r\n      format: getFormatFromOptions(this.options),\r\n      overlaps: false,\r\n      url: (extent, resolution, proj: olProjection) => {\r\n        this.options.paramsWFS.srsName = this.options.paramsWFS.srsName || proj.getCode();\r\n        return this.buildUrl(\r\n          extent,\r\n          proj,\r\n          (this.options as OgcFilterableDataSourceOptions).ogcFilters);\r\n      },\r\n      strategy: OlLoadingStrategy.bbox\r\n    });\r\n  }\r\n\r\n  private buildUrl(extent, proj: olProjection, ogcFilters: OgcFiltersOptions): string {\r\n    const paramsWFS = this.options.paramsWFS;\r\n    const queryStringValues = formatWFSQueryString(this.options, undefined, this.options.paramsWFS.srsName);\r\n    let igoFilters;\r\n    if (ogcFilters && ogcFilters.enabled) {\r\n      igoFilters = ogcFilters.filters;\r\n    }\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    const filterOrBox = ogcFilterWriter.buildFilter(igoFilters, extent, proj, ogcFilters.geometryName);\r\n    let filterOrPush = ogcFilterWriter.handleOgcFiltersAppliedValue(this.options, ogcFilters.geometryName);\r\n\r\n    let prefix = 'filter';\r\n    if (!filterOrPush) {\r\n      prefix = 'bbox';\r\n      filterOrPush = extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    paramsWFS.xmlFilter = ogcFilters.advancedOgcFilters ? filterOrBox : `${prefix}=${filterOrPush}`;\r\n    let baseUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    const patternFilter = /(filter|bbox)=.*/gi;\r\n    baseUrl = patternFilter.test(paramsWFS.xmlFilter) ? `${baseUrl}&${paramsWFS.xmlFilter}` : baseUrl;\r\n    this.options.download = Object.assign({}, this.options.download, { dynamicUrl: baseUrl });\r\n    return baseUrl.replace(/&&/g, '&');\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport olFeature from 'ol/Feature';\r\nimport * as olformat from 'ol/format';\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport { DataService } from './data.service';\r\nimport { formatWFSQueryString,\r\n          gmlRegex,\r\n          defaultEpsg,\r\n          defaultMaxFeatures,\r\n          getFormatFromOptions} from './wms-wfs.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WFSService extends DataService {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getData() {\r\n    console.log('This is defining a data service.');\r\n    return 'This is defining a data service.';\r\n  }\r\n\r\n  public getSourceFieldsFromWFS(dataSourceOptions: WFSDataSourceOptions | WMSDataSourceOptions) {\r\n    if (!dataSourceOptions.sourceFields || dataSourceOptions.sourceFields.length === 0 ) {\r\n      dataSourceOptions.sourceFields = [];\r\n      this.defineFieldAndValuefromWFS(dataSourceOptions).subscribe(getfeatureSourceField => {\r\n        dataSourceOptions.sourceFields = getfeatureSourceField;\r\n      });\r\n\r\n    } else {\r\n      this.defineFieldAndValuefromWFS(dataSourceOptions).subscribe(getfeatureSourceField => {\r\n        dataSourceOptions.sourceFields.forEach(sourcefield => {\r\n          if (sourcefield.alias === undefined) {\r\n            sourcefield.alias = sourcefield.name; // to allow only a list of sourcefield with names\r\n          }\r\n          if (sourcefield.values === undefined || sourcefield.values.length === 0) {\r\n            sourcefield.values = getfeatureSourceField.find(sf => sf.name === sourcefield.name).values;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private wfsGetFeature(\r\n    dataSourceOptions: WFSDataSourceOptions | WMSDataSourceOptions,\r\n    nb: number = defaultMaxFeatures,\r\n    epsgCode: string = defaultEpsg,\r\n    propertyName?: string\r\n  ): Observable<any> {\r\n    const queryStringValues = formatWFSQueryString(dataSourceOptions, nb, epsgCode, propertyName);\r\n    const baseUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    const outputFormat = dataSourceOptions.paramsWFS.outputFormat;\r\n    if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n      return this.http.get(baseUrl, { responseType: 'text' });\r\n    } else {\r\n      return this.http.get(baseUrl);\r\n    }\r\n  }\r\n\r\n  defineFieldAndValuefromWFS(\r\n    dataSourceOptions: WFSDataSourceOptions | WMSDataSourceOptions\r\n  ): Observable<any> {\r\n    return new Observable(d => {\r\n      const sourceFields = [];\r\n      let fieldList;\r\n      let fieldListWoGeom;\r\n      let fieldListWoGeomStr;\r\n      let olFormats;\r\n\r\n      olFormats = getFormatFromOptions(dataSourceOptions);\r\n\r\n      this.wfsGetFeature(dataSourceOptions, 1).subscribe(oneFeature => {\r\n        const features = olFormats.readFeatures(oneFeature);\r\n        fieldList = features[0].getKeys();\r\n        fieldListWoGeom = fieldList.filter(\r\n          field =>\r\n            field !== features[0].getGeometryName() &&\r\n            !field.match(/boundedby/gi)\r\n        );\r\n        fieldListWoGeomStr = fieldListWoGeom.join(',');\r\n        this.wfsGetFeature(\r\n          dataSourceOptions,\r\n          dataSourceOptions.paramsWFS.maxFeatures || defaultMaxFeatures,\r\n          dataSourceOptions.paramsWFS.srsName,\r\n          fieldListWoGeomStr\r\n        ).subscribe(manyFeatures => {\r\n          const mfeatures = olFormats.readFeatures(manyFeatures);\r\n          this.built_properties_value(mfeatures).forEach(element => {\r\n            sourceFields.push(element);\r\n          });\r\n          d.next(sourceFields);\r\n          d.complete();\r\n        });\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  private built_properties_value(features: olFeature[]): string[] {\r\n    const kv = Object.assign({}, features[0].getProperties());\r\n    delete kv[features[0].getGeometryName()];\r\n    delete kv.boundedBy;\r\n    const sourceFields = [];\r\n    for (const property in kv) {\r\n      if (kv.hasOwnProperty(property)) {\r\n        const fieldType =\r\n          typeof features[0].get(property) === 'object'\r\n            ? undefined\r\n            : typeof features[0].get(property);\r\n        sourceFields.push({\r\n          name: property,\r\n          alias: property,\r\n          type: fieldType,\r\n          values: [kv[property]]\r\n        });\r\n      }\r\n    }\r\n    features.every((element) => {\r\n      const featureProperties = element.getProperties();\r\n      for (const key in featureProperties) {\r\n        if (featureProperties.hasOwnProperty(key) && key in kv) {\r\n          sourceFields.filter(f => f.name === key).forEach(v => {\r\n            if (v.values.indexOf(featureProperties[key]) === -1) {\r\n              v.values.push(featureProperties[key]);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    return sourceFields;\r\n  }\r\n}\r\n","export enum QueryFormat {\r\n  GML2 = 'gml2',\r\n  GML3 = 'gml3',\r\n  JSON = 'json',\r\n  GEOJSON = 'geojson',\r\n  GEOJSON2 = 'geojson2',\r\n  ESRIJSON = 'esrijson',\r\n  TEXT = 'text',\r\n  HTML = 'html',\r\n  HTMLGML2 = 'htmlgml2'\r\n}\r\n\r\nexport enum QueryFormatMimeType {\r\n  GML2 = 'application/vnd.ogc.gml',\r\n  GML3 = 'application/vnd.ogc.gml/3.1.1',\r\n  JSON = 'application/json',\r\n  GEOJSON = 'application/geojson',\r\n  GEOJSON2 = 'geojson',\r\n  ESRIJSON = 'application/json',\r\n  TEXT = 'text/plain',\r\n  HTML = 'text/html',\r\n  HTMLGML2 = 'text/html'\r\n}\r\n\r\nexport enum QueryHtmlTarget {\r\n  IFRAME = 'iframe',\r\n  BLANK = '_blank'\r\n}\r\n","import olSourceImageWMS from 'ol/source/ImageWMS';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { Legend } from './datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\nimport {\r\n  formatWFSQueryString,\r\n  checkWfsParams,\r\n  defaultFieldNameGeometry\r\n} from './wms-wfs.utils';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nexport class WMSDataSource extends DataSource {\r\n  public ol: olSourceImageWMS;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get mapLabel(): string {\r\n    return (this.options as any).mapLabel;\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  constructor(\r\n    public options: WMSDataSourceOptions,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(options);\r\n    const sourceParams: any = options.params;\r\n\r\n    const dpi = sourceParams.DPI || 96;\r\n    sourceParams.DPI = dpi;\r\n    sourceParams.MAP_RESOLUTION = dpi;\r\n    sourceParams.FORMAT_OPTIONS = 'dpi:' + dpi;\r\n\r\n    if (options.refreshIntervalSec && options.refreshIntervalSec > 0) {\r\n      setInterval(() => {\r\n        this.refresh();\r\n      }, options.refreshIntervalSec * 1000); // Convert seconds to MS\r\n    }\r\n\r\n    let fieldNameGeometry = defaultFieldNameGeometry;\r\n\r\n    // ####   START if paramsWFS\r\n    if (options.paramsWFS) {\r\n      const wfsCheckup = checkWfsParams(options, 'wms');\r\n      ObjectUtils.mergeDeep(options.paramsWFS, wfsCheckup.paramsWFS);\r\n\r\n      fieldNameGeometry =\r\n        options.paramsWFS.fieldNameGeometry || fieldNameGeometry;\r\n\r\n      options.download = Object.assign({}, options.download, {\r\n        dynamicUrl: this.buildDynamicDownloadUrlFromParamsWFS(options)\r\n      });\r\n    } //  ####   END  if paramsWFS\r\n\r\n    if (!options.sourceFields || options.sourceFields.length === 0) {\r\n      options.sourceFields = [];\r\n    } else {\r\n      options.sourceFields.forEach(sourceField => {\r\n        sourceField.alias = sourceField.alias\r\n          ? sourceField.alias\r\n          : sourceField.name;\r\n        // to allow only a list of sourcefield with names\r\n      });\r\n    }\r\n    const initOgcFilters = (options as OgcFilterableDataSourceOptions)\r\n      .ogcFilters;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (!initOgcFilters) {\r\n      (options as OgcFilterableDataSourceOptions).ogcFilters = ogcFilterWriter.defineOgcFiltersDefaultOptions(\r\n        initOgcFilters,\r\n        fieldNameGeometry,\r\n        'wms'\r\n      );\r\n    } else {\r\n      initOgcFilters.advancedOgcFilters = initOgcFilters.pushButtons\r\n        ? false\r\n        : true;\r\n    }\r\n\r\n    if (\r\n      sourceParams.LAYERS.split(',').length > 1 &&\r\n      initOgcFilters &&\r\n      initOgcFilters.enabled\r\n    ) {\r\n      console.log('*******************************');\r\n      console.log(\r\n        'BE CAREFULL, YOUR WMS LAYERS (' +\r\n          sourceParams.LAYERS +\r\n          ') MUST SHARE THE SAME FIELDS TO ALLOW ogcFilters TO WORK !! '\r\n      );\r\n      console.log('*******************************');\r\n    }\r\n\r\n    if (options.paramsWFS && initOgcFilters && initOgcFilters.enabled && initOgcFilters.editable) {\r\n      this.wfsService.getSourceFieldsFromWFS(options);\r\n    }\r\n\r\n    const filterQueryString = ogcFilterWriter.handleOgcFiltersAppliedValue(\r\n      options,\r\n      fieldNameGeometry\r\n    );\r\n    sourceParams.FILTER = filterQueryString;\r\n  }\r\n\r\n  refresh() {\r\n    this.ol.updateParams({ igoRefresh: Math.random() });\r\n  }\r\n\r\n  private buildDynamicDownloadUrlFromParamsWFS(asWFSDataSourceOptions) {\r\n    const queryStringValues = formatWFSQueryString(asWFSDataSourceOptions);\r\n    const downloadUrl = queryStringValues.find(f => f.name === 'getfeature')\r\n      .value;\r\n    return downloadUrl;\r\n  }\r\n\r\n  protected createOlSource(): olSourceImageWMS {\r\n    return new olSourceImageWMS(this.options);\r\n  }\r\n\r\n  getLegend(style?: string, scale?: number): Legend[] {\r\n    let legend = super.getLegend();\r\n    if (legend.length > 0 && (style === undefined && !scale)) {\r\n      return legend;\r\n    }\r\n\r\n    const sourceParams = this.params;\r\n\r\n    let layers = [];\r\n    if (sourceParams.LAYERS !== undefined) {\r\n      layers = sourceParams.LAYERS.split(',');\r\n    }\r\n\r\n    const baseUrl = this.options.url.replace(/\\?$/, '');\r\n    const params = [\r\n      'REQUEST=GetLegendGraphic',\r\n      'SERVICE=WMS',\r\n      'FORMAT=image/png',\r\n      'SLD_VERSION=1.1.0',\r\n      `VERSION=${sourceParams.VERSION || '1.3.0'}`\r\n    ];\r\n    if (style !== undefined) {\r\n      params.push(`STYLE=${style}`);\r\n    }\r\n    if (scale !== undefined) {\r\n      params.push(`SCALE=${scale}`);\r\n    }\r\n\r\n    legend = layers.map((layer: string) => {\r\n      const separator = baseUrl.match(/\\?/) ? '&' : '?';\r\n      return {\r\n        url: `${baseUrl}${separator}${params.join('&')}&LAYER=${layer}`,\r\n        title: layers.length > 1 ? layer : undefined,\r\n        currentStyle: style === undefined ? undefined : style as string\r\n      };\r\n    });\r\n\r\n    return legend;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olTileGridWMTS from 'ol/tilegrid/WMTS';\r\nimport * as olproj from 'ol/proj';\r\nimport {\r\n  getTopLeft as extentGetTopLeft,\r\n  getWidth as extentGetWidth\r\n} from 'ol/extent.js';\r\n\r\nexport function createDefaultTileGrid(epsg?: string): olTileGridWMTS {\r\n  const projection = epsg ? olproj.get(epsg) : olproj.get('EPSG:3857');\r\n  const projectionExtent = projection.getExtent();\r\n  const size = extentGetWidth(projectionExtent) / 256;\r\n  const resolutions = new Array(20);\r\n  const matrixIds = new Array(20);\r\n  for (let z = 0; z < 20; ++z) {\r\n    resolutions[z] = size / Math.pow(2, z);\r\n    matrixIds[z] = z;\r\n  }\r\n\r\n  return new olTileGridWMTS({\r\n    origin: extentGetTopLeft(projectionExtent),\r\n    resolutions,\r\n    matrixIds\r\n  });\r\n}\r\n","import olSourceWMTS from 'ol/source/WMTS';\r\n\r\nimport { createDefaultTileGrid } from '../../utils/tilegrid';\r\nimport { DataSource } from './datasource';\r\nimport { WMTSDataSourceOptions } from './wmts-datasource.interface';\r\n\r\nexport class WMTSDataSource extends DataSource {\r\n  public options: WMTSDataSourceOptions;\r\n  public ol: olSourceWMTS;\r\n\r\n  constructor(options: WMTSDataSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  protected createOlSource(): olSourceWMTS {\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        tileGrid: createDefaultTileGrid(this.options.projection as string)\r\n      },\r\n      this.options\r\n    );\r\n\r\n    return new olSourceWMTS(sourceOptions);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n}\r\n","import olSourceCarto from 'ol/source/CartoDB';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { Legend } from './datasource.interface';\r\nimport { CartoDataSourceOptions } from './carto-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class CartoDataSource extends DataSource {\r\n  public ol: olSourceCarto;\r\n  public options: CartoDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get mapLabel(): string {\r\n    return (this.options as any).mapLabel;\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceCarto {\r\n    const crossOrigin = this.options.crossOrigin\r\n      ? this.options.crossOrigin\r\n      : 'anonymous';\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        crossOrigin\r\n      },\r\n      this.options\r\n    );\r\n    return new olSourceCarto(sourceOptions);\r\n  }\r\n\r\n  getLegend(): Legend[] {\r\n    const legend = super.getLegend();\r\n    if (legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    let htmlString = '<table>';\r\n    if (this.options.config.layers[0].legend != null) {\r\n      this.options.config.layers[0].legend.items.forEach(f => {\r\n        if (f.visible === true) {\r\n          htmlString +=\r\n            '<tr><td>' +\r\n            '<p><font size=\"5\" color=\"' +\r\n            f.value +\r\n            '\"> &#9679</font></p></td>' +\r\n            '<td>' +\r\n            f.name +\r\n            '</td></tr>';\r\n        }\r\n      });\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    } else {\r\n      // Try to build the legend from the cartocss options\r\n      const layerOptions = this.options.config.layers[0].options;\r\n      // All available cartocss style options\r\n      const types = [\r\n        'polygon-fill:',\r\n        'marker-fill:',\r\n        'shield-fill:',\r\n        'building-fill:',\r\n        'line-color:'\r\n      ];\r\n      for (const oneType of types) {\r\n        if (layerOptions.cartocss.includes(oneType)) {\r\n          const type = layerOptions.cartocss.split(oneType).pop();\r\n          const color = type.substr(0, type.indexOf(';'));\r\n          if (color.includes('ramp')) {\r\n            const colors = color.split(', (')[1].split(',');\r\n            const data = color.split(', (')[2].split(',');\r\n            for (let j = 0; j < colors.length; j++) {\r\n              colors[j] = colors[j].replace(/(\"|\\))/g, '');\r\n              data[j] = data[j].replace(/(\"|\\))/g, '');\r\n              if (data[j].replace(/\\s+/g, '') === '=') {\r\n                data[j] = 'Autres';\r\n              }\r\n              htmlString +=\r\n                '<tr><td>' +\r\n                '<p><font size=\"5\" color=\"' +\r\n                colors[j] +\r\n                '\"> &#9679</font></p></td>' +\r\n                '<td>' +\r\n                data[j] +\r\n                '</td></tr>';\r\n            }\r\n            break;\r\n          } else {\r\n            const title = layerOptions.layer_name\r\n              ? layerOptions.layer_name\r\n              : '';\r\n            htmlString +=\r\n              '<tr><td>' +\r\n              '<p><font size=\"5\" color=\"' +\r\n              color +\r\n              '\"> &#9679</font></p>' +\r\n              '</td><td>' +\r\n              title +\r\n              '</td></tr>';\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    }\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport * as olloadingstrategy from 'ol/loadingstrategy';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { Legend } from './datasource.interface';\r\nimport { ArcGISRestDataSourceOptions } from './arcgisrest-datasource.interface';\r\n\r\nexport class ArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n  public options: ArcGISRestDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    const esrijsonFormat = new olFormatEsriJSON();\r\n    return new olSourceVector({\r\n      attributions: this.options.params.attributions,\r\n      overlaps: false,\r\n      format: esrijsonFormat,\r\n      url: function(extent, resolution, proj) {\r\n        const baseUrl = this.options.url + '/' + this.options.layer + '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        if (this.options.params.timeFilter) {\r\n          const time = `time=${this.options.params.timeExtent}`;\r\n          params.push(time);\r\n        }\r\n        if (this.options.params.customParams) {\r\n          this.options.params.customParams.forEach(element => {\r\n            params.push(element);\r\n          });\r\n        }\r\n        return `${baseUrl}?${params.join('&')}`;\r\n      }.bind(this),\r\n      strategy: olloadingstrategy.bbox\r\n    });\r\n  }\r\n\r\n  getLegend(): Legend[] {\r\n    const legendInfo = this.options.params.legendInfo;\r\n    const legend = super.getLegend();\r\n    if (legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const modifiedUrl = this.options.url.replace(\r\n        'FeatureServer',\r\n        'MapServer'\r\n      );\r\n      const src = `${modifiedUrl}/${lyr.layerId}/images/${lyrLegend.url}`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceTileArcGISRest from 'ol/source/TileArcGISRest';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { Legend } from './datasource.interface';\r\nimport { TileArcGISRestDataSourceOptions } from './tilearcgisrest-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class TileArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceTileArcGISRest;\r\n  public options: TileArcGISRestDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get mapLabel(): string {\r\n    return (this.options as any).mapLabel;\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceTileArcGISRest {\r\n    return new olSourceTileArcGISRest(this.options);\r\n  }\r\n\r\n  getLegend(): Legend[] {\r\n    const legend = super.getLegend();\r\n    if (this.options.legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = this.options.legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const src = `${this.options.url}/${lyr.layerId}/images/${\r\n        lyrLegend.url\r\n      }`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { WebSocketDataSourceOptions } from './websocket-datasource.interface';\r\n\r\nexport class WebSocketDataSource extends FeatureDataSource {\r\n  public ws: WebSocket;\r\n  public options: WebSocketDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    this.createWebSocket();\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    return super.createOlSource();\r\n  }\r\n\r\n  private createWebSocket() {\r\n    this.ws = new WebSocket(this.options.url);\r\n    this.ws.onmessage = this.onMessage.bind(this);\r\n\r\n    if (this.options.onclose) {\r\n      this.ws.onclose = this.onClose.bind(this);\r\n    }\r\n\r\n    if (this.options.onerror) {\r\n      this.ws.onerror = this.onError.bind(this);\r\n    }\r\n\r\n    if (this.options.onopen) {\r\n      this.ws.onopen = this.onOpen.bind(this);\r\n    }\r\n  }\r\n\r\n  onMessage(event) {\r\n    const featureAdded = this.options.format.readFeature(event.data);\r\n\r\n    switch (this.options.onmessage) {\r\n      case 'update':\r\n        // ol don't add if same ID\r\n        const featureToRemove = this.ol.getFeatureById(featureAdded.getId());\r\n        if (featureToRemove) {\r\n          this.ol.removeFeature(featureToRemove);\r\n        }\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'delete':\r\n        this.ol.clear(true);\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'add':\r\n      default:\r\n        this.ol.addFeature(featureAdded);\r\n    }\r\n  }\r\n\r\n  onClose(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onError(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onOpen(event) {\r\n    // thrown message to user ?\r\n  }\r\n\r\n  public onUnwatch() {\r\n    this.ws.close();\r\n  }\r\n}\r\n","import { Md5 } from 'ts-md5';\r\nimport feature from 'ol/Feature';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\nimport olFormatMVT from 'ol/format/MVT';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { MVTDataSourceOptions } from './mvt-datasource.interface';\r\n\r\nexport class MVTDataSource extends DataSource {\r\n  public options: MVTDataSourceOptions;\r\n  public ol: olSourceVectorTile;\r\n\r\n  protected createOlSource(): olSourceVectorTile {\r\n    let mvtFormat;\r\n    if (this.options.featureClass === 'feature') {\r\n      mvtFormat = new olFormatMVT({featureClass: feature});\r\n    } else if (this.options.featureClass === undefined) {\r\n      mvtFormat = new olFormatMVT();\r\n    }\r\n    this.options.format = mvtFormat;\r\n    return new olSourceVectorTile(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    if (!this.options.url) {\r\n        return uuid();\r\n    }\r\n    const chain = 'mvt' + this.options.url;\r\n    return Md5.hashStr(chain) as string;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceCluster from 'ol/source/Cluster';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { ClusterDataSourceOptions } from './cluster-datasource.interface';\r\n\r\nexport class ClusterDataSource extends FeatureDataSource {\r\n  public options: ClusterDataSourceOptions;\r\n  public ol: olSourceCluster;\r\n\r\n  protected createOlSource(): olSourceCluster {\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    this.options.source = super.createOlSource();\r\n    return new olSourceCluster(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    return uuid();\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","export const FEATURE = 'Feature';\r\n\r\nexport enum FeatureMotion {\r\n  None,\r\n  Move,\r\n  Zoom,\r\n  Default\r\n}\r\n","export const LAYER = 'Layer';\r\n","import * as olproj from 'ol/proj';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { MAC } from 'ol/has';\r\n\r\nimport { MapViewState } from './map.interface';\r\nimport proj4 from 'proj4';\r\nimport { Projection } from './projection.interfaces';\r\n\r\n/**\r\n * This method extracts a coordinate tuple from a string.\r\n * @param str Any string\r\n * @param mapProjection string Map Projection\r\n * @param opts.forceNA boolean Force North America Zone\r\n * @returns object:\r\n *             lonLat: Coordinate,\r\n *             message: Message of error,\r\n *             radius: radius of the confience of coordinate,\r\n *             conf: confidence of the coordinate}\r\n */\r\nexport function stringToLonLat(\r\n  str: string,\r\n  mapProjection: string,\r\n  opts: { forceNA?: boolean } = {}\r\n): {\r\n  lonLat: [number, number] | undefined;\r\n  message: string;\r\n  radius: number | undefined;\r\n  conf: number | undefined;\r\n} {\r\n  let lonLat: [number, number];\r\n  let coordStr: string;\r\n  let negativeLon: string;\r\n  let degreesLon: string;\r\n  let minutesLon: string;\r\n  let secondsLon: string;\r\n  let directionLon: string;\r\n  let decimalLon: string;\r\n  let negativeLat: string;\r\n  let degreesLat: string;\r\n  let minutesLat: string;\r\n  let secondsLat: string;\r\n  let directionLat: string;\r\n  let decimalLat: string;\r\n  let zone: string;\r\n  let radius: string;\r\n  let conf: string;\r\n  let lon: any;\r\n  let lat: any;\r\n\r\n  const projectionPattern = '(\\\\s*;\\\\s*[\\\\d]{4,6})';\r\n  const toProjection = '4326';\r\n  let projectionStr: string;\r\n  const projectionRegex = new RegExp(projectionPattern, 'g');\r\n\r\n  const lonlatCoord = '([-+])?([\\\\d]{1,3})([,.](\\\\d+))?';\r\n  const lonLatPattern = `${lonlatCoord}[\\\\s,]+${lonlatCoord}`;\r\n  const lonLatRegex = new RegExp(`^${lonLatPattern}$`, 'g');\r\n\r\n  const dmsCoord =\r\n    '([0-9]{1,2})[:|Â°]?\\\\s*([0-9]{1,2})?[:|\\'|â²|â]?\\\\s*([0-9]{1,2}(?:.[0-9]+){0,1})?\\\\s*[\"|â³|â]?\\\\s*';\r\n  const dmsCoordPattern = `${dmsCoord}([N|S|E|W|O]),?\\\\s*${dmsCoord}([N|S|E|W|O])`;\r\n  const dmsRegex = new RegExp(`^${dmsCoordPattern}`, 'gi');\r\n\r\n  const patternUtm =\r\n    '(UTM)-?(\\\\d{1,2})[\\\\s,]*(\\\\d+[.,]?\\\\d+)[\\\\s,]+(\\\\d+[.,]?\\\\d+)';\r\n  const utmRegex = new RegExp(`^${patternUtm}`, 'gi');\r\n\r\n  const patternMtm =\r\n    '(MTM)-?(\\\\d{1,2})[\\\\s,]*(\\\\d+[.,]?\\\\d+)[\\\\s,]+(\\\\d+[.,]?\\\\d+)';\r\n  const mtmRegex = new RegExp(`^${patternMtm}`, 'gi');\r\n\r\n  const ddCoord = '([-+])?(\\\\d{1,3})[,.](\\\\d+)';\r\n  const patternDd = `${ddCoord}\\\\s*[,]?\\\\s*${ddCoord}`;\r\n  const ddRegex = new RegExp(`^${patternDd}`, 'g');\r\n\r\n  const dmdCoord =\r\n    '([-+])?(\\\\d{1,3})[\\\\s,.]{1}(\\\\d{1,2})[\\\\s,.]{1}(\\\\d{1,2})[.,]?(\\\\d{1,5})?';\r\n  const patternDmd = `${dmdCoord}\\\\s*[,.]?\\\\s*${dmdCoord}`;\r\n  const dmdRegex = new RegExp(`^${patternDmd}`, 'g');\r\n\r\n  // tslint:disable:max-line-length\r\n  const patternBELL =\r\n    'LAT\\\\s*[\\\\s:]*\\\\s*([-+])?(\\\\d{1,2})[\\\\s.,]?(\\\\d+)?[\\\\s.,]?\\\\s*(\\\\d{1,2}([.,]\\\\d+)?)?\\\\s*(N|S|E|W)?\\\\s*LONG\\\\s*[\\\\s:]*\\\\s*([-+])?(\\\\d{1,3})[\\\\s.,]?(\\\\d+)?[\\\\s.,]?\\\\s*(\\\\d{1,2}([.,]\\\\d+)?)?\\\\s*(N|S|E|W)?\\\\s*UNC\\\\s*[\\\\s:]?\\\\s*(\\\\d+)\\\\s*CONF\\\\s*[\\\\s:]?\\\\s*(\\\\d{1,3})';\r\n  const bellRegex = new RegExp(`^${patternBELL}?`, 'gi');\r\n\r\n  const mmCoord = '([-+]?\\\\d+)[,.]?(\\\\d+)?';\r\n  const mmPattern = `${mmCoord}[\\\\s,]+${mmCoord}`;\r\n  const mmRegex = new RegExp(`^${mmPattern}$`, 'g');\r\n\r\n  let isXYCoords = false;\r\n\r\n  str = str.toLocaleUpperCase().trim();\r\n\r\n  // Extract projection\r\n  if (projectionRegex.test(str)) {\r\n    [coordStr, projectionStr] = str.split(';').map(s => s.trim());\r\n  } else {\r\n    coordStr = str;\r\n  }\r\n  if (lonLatRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      negativeLon,\r\n      lon,\r\n      ,\r\n      decimalLon,\r\n      negativeLat,\r\n      lat,\r\n      ,\r\n      decimalLat\r\n    ] = coordStr.match(lonLatPattern);\r\n\r\n    lon = parseFloat((negativeLon ? negativeLon : '') + lon + '.' + decimalLon);\r\n    lat = parseFloat((negativeLat ? negativeLat : '') + lat + '.' + decimalLat);\r\n  } else if (dmsRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      directionLon,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      directionLat\r\n    ] = coordStr.match(dmsCoordPattern);\r\n\r\n    if (directionLon === 'S' || directionLon === 'N') {\r\n      degreesLon = [degreesLat, (degreesLat = degreesLon)][0];\r\n      minutesLon = [minutesLat, (minutesLat = minutesLon)][0];\r\n      secondsLon = [secondsLat, (secondsLat = secondsLon)][0];\r\n      directionLon = [directionLat, (directionLat = directionLon)][0];\r\n    }\r\n\r\n    lon = convertDMSToDD(\r\n      parseFloat(degreesLon),\r\n      parseFloat(minutesLon),\r\n      parseFloat(secondsLon),\r\n      directionLon\r\n    );\r\n    lat = convertDMSToDD(\r\n      parseFloat(degreesLat),\r\n      parseFloat(minutesLat),\r\n      parseFloat(secondsLat),\r\n      directionLat\r\n    );\r\n  } else if (utmRegex.test(coordStr)) {\r\n    isXYCoords = true;\r\n    [, , zone, lon, lat] = coordStr.match(patternUtm);\r\n    const epsgUtm = Number(zone) < 10 ? `EPSG:3260${zone}` : `EPSG:326${zone}`;\r\n    [lon, lat] = olproj.transform(\r\n      [parseFloat(lon), parseFloat(lat)],\r\n      epsgUtm,\r\n      'EPSG:4326'\r\n    );\r\n  } else if (mtmRegex.test(coordStr)) {\r\n    isXYCoords = true;\r\n    [, , zone, lon, lat] = coordStr.match(patternMtm);\r\n    const epsgMtm =\r\n      Number(zone) < 10 ? `EPSG:3218${zone}` : `EPSG:321${80 + Number(zone)}`;\r\n    [lon, lat] = olproj.transform(\r\n      [parseFloat(lon), parseFloat(lat)],\r\n      epsgMtm,\r\n      'EPSG:4326'\r\n    );\r\n  } else if (dmdRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      negativeLon,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      decimalLon,\r\n      negativeLat,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      decimalLat\r\n    ] = coordStr.match(patternDmd);\r\n\r\n    lon = convertDMSToDD(\r\n      parseFloat((negativeLon ? negativeLon : '') + degreesLon),\r\n      parseFloat(minutesLon),\r\n      parseFloat(secondsLon),\r\n      directionLon\r\n    );\r\n    lat = convertDMSToDD(\r\n      parseFloat((negativeLat ? negativeLat : '') + degreesLat),\r\n      parseFloat(minutesLat),\r\n      parseFloat(secondsLat),\r\n      directionLat\r\n    );\r\n  } else if (ddRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      negativeLon,\r\n      degreesLon,\r\n      decimalLon,\r\n      negativeLat,\r\n      degreesLat,\r\n      decimalLat\r\n    ] = coordStr.match(patternDd);\r\n\r\n    lon = convertDMSToDD(\r\n      parseFloat((negativeLon ? negativeLon : '') + degreesLon),\r\n      parseFloat(minutesLon),\r\n      parseFloat(secondsLon),\r\n      directionLon\r\n    );\r\n    lat = convertDMSToDD(\r\n      parseFloat((negativeLat ? negativeLat : '') + degreesLat),\r\n      parseFloat(minutesLat),\r\n      parseFloat(secondsLat),\r\n      directionLat\r\n    );\r\n  } else if (bellRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      negativeLat,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      ,\r\n      directionLat,\r\n      negativeLon,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      ,\r\n      directionLon,\r\n      radius,\r\n      conf\r\n    ] = coordStr.match(patternBELL);\r\n\r\n    // Set default value for North America\r\n    if (!directionLon) {\r\n      directionLon = 'W';\r\n    }\r\n\r\n    // Check if real minutes or decimals\r\n    if (minutesLon && minutesLon.length > 2) {\r\n      lon = parseFloat(\r\n        (negativeLon ? negativeLon : '') + degreesLon + '.' + minutesLon\r\n      );\r\n    } else {\r\n      lon = convertDMSToDD(\r\n        parseFloat(degreesLon),\r\n        parseFloat(minutesLon),\r\n        parseFloat(secondsLon),\r\n        directionLon\r\n      );\r\n    }\r\n\r\n    if (minutesLat && minutesLat.length > 2) {\r\n      lat = parseFloat(\r\n        (negativeLat ? negativeLat : '') + degreesLat + '.' + minutesLat\r\n      );\r\n    } else {\r\n      lat = convertDMSToDD(\r\n        parseFloat(degreesLat),\r\n        parseFloat(minutesLat),\r\n        parseFloat(secondsLat),\r\n        directionLat\r\n      );\r\n    }\r\n  } else if (mmRegex.test(coordStr)) {\r\n    isXYCoords = true;\r\n    [, lon, decimalLon, lat, decimalLat] = coordStr.match(mmPattern);\r\n\r\n    if (decimalLon) {\r\n      lon = parseFloat(lon + '.' + decimalLon);\r\n    }\r\n\r\n    if (decimalLat) {\r\n      lat = parseFloat(lat + '.' + decimalLat);\r\n    }\r\n  } else {\r\n    return {\r\n      lonLat: undefined,\r\n      message: '',\r\n      radius: undefined,\r\n      conf: undefined\r\n    };\r\n  }\r\n\r\n  if (opts.forceNA && !isXYCoords) {\r\n    // Set a negative coordinate for North America zone\r\n    if (lon > 0 && lat > 0) {\r\n      if (lon > lat) {\r\n        lon = -lon;\r\n      } else {\r\n        lat = -lat;\r\n      }\r\n    }\r\n\r\n    // Reverse coordinate to respect lonLat convention\r\n    if (lon > lat) {\r\n      lon = [lat, (lat = lon)][0];\r\n    }\r\n  }\r\n\r\n  lonLat = [Number(lon), Number(lat)] as [number, number];\r\n\r\n  // Reproject the coordinate if projection parameter have been set and coord is not 4326\r\n  if (\r\n    (projectionStr !== undefined && projectionStr !== toProjection) ||\r\n    (lonLat[0] > 180 || lonLat[0] < -180) ||\r\n    (lonLat[1] > 90 || lonLat[1] < -90)\r\n  ) {\r\n    const source = projectionStr ? 'EPSG:' + projectionStr : mapProjection;\r\n    const dest = 'EPSG:' + toProjection;\r\n\r\n    try {\r\n      lonLat = olproj.transform(lonLat, source, dest);\r\n    } catch (e) {\r\n      return {\r\n        lonLat: undefined,\r\n        message: 'Projection ' + source + ' not supported',\r\n        radius: undefined,\r\n        conf: undefined\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    lonLat,\r\n    message: '',\r\n    radius: radius ? parseInt(radius, 10) : undefined,\r\n    conf: conf ? parseInt(conf, 10) : undefined\r\n  };\r\n}\r\n\r\n/**\r\n * Convert degrees minutes seconds to dd\r\n * @param degrees Degrees\r\n * @param minutes Minutes\r\n * @param seconds Seconds\r\n * @param direction Direction\r\n */\r\nfunction convertDMSToDD(\r\n  degrees: number,\r\n  minutes: number,\r\n  seconds: number,\r\n  direction: string\r\n) {\r\n  minutes = minutes || 0;\r\n  seconds = seconds || 0;\r\n  let dd = degrees + minutes / 60 + seconds / 3600;\r\n\r\n  if (direction === 'S' || direction === 'W') {\r\n    dd = -dd;\r\n  } // Don't do anything for N or E\r\n  return dd;\r\n}\r\n\r\n/**\r\n * Return true of two view states are equal.\r\n * @param state1 View state\r\n * @param state2 View state\r\n * @returns True if the view states are equal\r\n */\r\nexport function viewStatesAreEqual(\r\n  state1: MapViewState,\r\n  state2: MapViewState\r\n): boolean {\r\n  if (state1 === undefined || state2 === undefined) {\r\n    return false;\r\n  }\r\n\r\n  const tolerance = 1 / 10000;\r\n  return (\r\n    state1.zoom === state2.zoom &&\r\n    Math.trunc(state1.center[0] / tolerance) ===\r\n      Math.trunc(state2.center[0] / tolerance) &&\r\n    Math.trunc(state1.center[1] / tolerance) ===\r\n      Math.trunc(state2.center[1] / tolerance)\r\n  );\r\n}\r\n\r\n/**\r\n * Format the scale to a human readable text\r\n * @param Scale of the map\r\n * @returns Human readable scale text\r\n */\r\nexport function formatScale(scale) {\r\n  scale = Math.round(scale);\r\n  if (scale < 10000) {\r\n    return scale + '';\r\n  }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  if (scale < 1000) {\r\n    return scale + 'K';\r\n  }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  return scale + 'M';\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param scale Scale denom\r\n * @param dpi DPI\r\n * @returns Resolution\r\n */\r\nexport function getResolutionFromScale(\r\n  scale: number,\r\n  dpi: number = 96\r\n): number {\r\n  const inchesPerMeter = 39.3701;\r\n  return scale / (inchesPerMeter * dpi);\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param Scale denom\r\n * @returns Resolution\r\n */\r\nexport function getScaleFromResolution(\r\n  resolution: number,\r\n  unit: string = 'm',\r\n  dpi: number = 96\r\n): number {\r\n  const inchesPerMeter = 39.3701;\r\n  return resolution * olproj.METERS_PER_UNIT[unit] * inchesPerMeter * dpi;\r\n}\r\n\r\n/**\r\n * Returns true if the CTRL key is pushed during an Ol MapBrowserPointerEvent\r\n * @param event OL MapBrowserPointerEvent\r\n * @returns Whether the CTRL key is pushed\r\n */\r\nexport function ctrlKeyDown(event: OlMapBrowserPointerEvent): boolean {\r\n  const originalEvent = event.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n}\r\n\r\nexport function roundCoordTo(coord: [number, number], decimal: number = 3) {\r\n  return [coord[0].toFixed(decimal), coord[1].toFixed(decimal)];\r\n}\r\n\r\n/**\r\n * Returns an array of converted coordinates.\r\n * Conversion is done for every configured projections\r\n * and for the current UTM zone and MTM zone.\r\n * @param lonLat [number, number] array of the coordinate to transform.\r\n * @param projections  Projection[] Array of destination projection.\r\n * @returns Returns an array of converted coordinates.\r\n */\r\nexport function lonLatConversion(\r\n  lonLat: [number, number],\r\n  projections: Projection[]\r\n): {\r\n  code: string;\r\n  alias: string;\r\n  coord: [number, number];\r\n  igo2CoordFormat: string;\r\n}[] {\r\n  const rawCoord3857 = olproj.transform(lonLat, 'EPSG:4326', 'EPSG:3857');\r\n  const convertedLonLat = [\r\n    {\r\n      code: 'EPSG:3857',\r\n      alias: 'Web mercator',\r\n      coord: rawCoord3857,\r\n      igo2CoordFormat: `${roundCoordTo(rawCoord3857).join(', ')} ; 3857`\r\n    }\r\n  ];\r\n\r\n  // detect the current utm zone.\r\n  const utmZone = utmZoneFromLonLat(lonLat);\r\n  const epsgUtm = utmZone < 10 ? `EPSG:3260${utmZone}` : `EPSG:326${utmZone}`;\r\n  const utmName = `UTM-${utmZone}`;\r\n  const rawCoordUtm = olproj.transform(lonLat, 'EPSG:4326', epsgUtm);\r\n  convertedLonLat.push({\r\n    code: epsgUtm,\r\n    alias: 'UTM',\r\n    coord: rawCoordUtm,\r\n    igo2CoordFormat: `${utmName} ${roundCoordTo(rawCoordUtm).join(', ')}`\r\n  });\r\n\r\n  // detect the current mtm zone.\r\n  const mtmZone = mtmZoneFromLonLat(lonLat);\r\n  if (mtmZone) {\r\n    const epsgMtm =\r\n      mtmZone < 10 ? `EPSG:3218${mtmZone}` : `EPSG:321${80 + mtmZone}`;\r\n    const mtmName = `MTM-${mtmZone}`;\r\n    const rawCoordMtm = olproj.transform(lonLat, 'EPSG:4326', epsgMtm);\r\n    convertedLonLat.push({\r\n      code: epsgMtm,\r\n      alias: 'MTM',\r\n      coord: rawCoordMtm,\r\n      igo2CoordFormat: `${mtmName} ${roundCoordTo(rawCoordMtm).join(', ')}`\r\n    });\r\n  }\r\n\r\n  projections.forEach(projection => {\r\n    const rawCoord = olproj.transform(lonLat, 'EPSG:4326', projection.code);\r\n    const numericEpsgCode = projection.code.split(':')[1];\r\n    convertedLonLat.push({\r\n      code: projection.code,\r\n      alias: projection.alias || projection.code,\r\n      coord: rawCoord,\r\n      igo2CoordFormat: `${roundCoordTo(rawCoord).join(\r\n        ', '\r\n      )} ; ${numericEpsgCode}`\r\n    });\r\n  });\r\n\r\n  return convertedLonLat;\r\n}\r\n\r\n/**\r\n * Detect the current utm zone of the lon/lat coordinate.\r\n * @param lonLat [number, number] array of the coordinate to detect the UTM zone.\r\n * @returns number The UTM zone.\r\n */\r\nexport function utmZoneFromLonLat(lonLat: [number, number]) {\r\n  return Math.ceil((lonLat[0] + 180) / 6);\r\n}\r\n\r\n/**\r\n * Detect the current mtm zone of the lon/lat coordinate.\r\n * @param lonLat [number, number] array of the coordinate to detect the MTM zone.\r\n * @returns number The MTM zone. Undefined if outside of the mtm application zone.\r\n */\r\nexport function mtmZoneFromLonLat(lonLat: [number, number]) {\r\n  const long = lonLat[0];\r\n  let mtmZone;\r\n  if (long < -51 && long > -54) {\r\n    mtmZone = 1;\r\n  }\r\n  if (long < -54 && long > -57) {\r\n    mtmZone = 2;\r\n  }\r\n  if (long < -57 && long > -60) {\r\n    mtmZone = 3;\r\n  }\r\n  if (long < -60 && long > -63) {\r\n    mtmZone = 4;\r\n  }\r\n  if (long < -63 && long > -66) {\r\n    mtmZone = 5;\r\n  }\r\n  if (long < -66 && long > -69) {\r\n    mtmZone = 6;\r\n  }\r\n  if (long < -69 && long > -72) {\r\n    mtmZone = 7;\r\n  }\r\n  if (long < -72 && long > -75) {\r\n    mtmZone = 8;\r\n  }\r\n  if (long < -75 && long > -78) {\r\n    mtmZone = 9;\r\n  }\r\n  if (long < -78 && long > -81) {\r\n    mtmZone = 10;\r\n  }\r\n  return mtmZone;\r\n}\r\n","import {\r\n  BehaviorSubject,\r\n  Observable,\r\n  Subject,\r\n  Subscription,\r\n  combineLatest\r\n} from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport olLayer from 'ol/layer/Layer';\r\n\r\nimport { AuthInterceptor } from '@igo2/auth';\r\nimport { SubjectStatus } from '@igo2/utils';\r\n\r\nimport { DataSource, Legend } from '../../../datasource';\r\nimport { IgoMap } from '../../../map/shared/map';\r\nimport { getResolutionFromScale } from '../../../map/shared/map.utils';\r\n\r\nimport { LayerOptions } from './layer.interface';\r\n\r\nexport abstract class Layer {\r\n  public collapsed: boolean;\r\n  public dataSource: DataSource;\r\n  public legend: Legend[];\r\n  public legendCollapsed: boolean = true;\r\n  public firstLoadComponent: boolean = true;\r\n  public map: IgoMap;\r\n  public ol: olLayer;\r\n  public status$: Subject<SubjectStatus>;\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  get id(): string {\r\n    return this.options.id || this.dataSource.id;\r\n  }\r\n\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  set title(title: string) {\r\n    this.options.title = title;\r\n  }\r\n\r\n  get zIndex(): number {\r\n    return this.ol.getZIndex();\r\n  }\r\n\r\n  set zIndex(zIndex: number) {\r\n    this.ol.setZIndex(zIndex);\r\n  }\r\n\r\n  get baseLayer(): boolean {\r\n    return this.options.baseLayer;\r\n  }\r\n\r\n  set baseLayer(baseLayer: boolean) {\r\n    this.options.baseLayer = baseLayer;\r\n  }\r\n\r\n  get opacity(): number {\r\n    return this.ol.get('opacity');\r\n  }\r\n\r\n  set opacity(opacity: number) {\r\n    this.ol.setOpacity(opacity);\r\n  }\r\n\r\n  set isInResolutionsRange(value: boolean) {\r\n    this.isInResolutionsRange$.next(value);\r\n  }\r\n  get isInResolutionsRange(): boolean {\r\n    return this.isInResolutionsRange$.value;\r\n  }\r\n  readonly isInResolutionsRange$: BehaviorSubject<\r\n    boolean\r\n  > = new BehaviorSubject(false);\r\n\r\n  set maxResolution(value: number) {\r\n    this.ol.setMaxResolution(value || Infinity);\r\n    this.updateInResolutionsRange();\r\n  }\r\n  get maxResolution(): number {\r\n    return this.ol.getMaxResolution();\r\n  }\r\n\r\n  set minResolution(value: number) {\r\n    this.ol.setMinResolution(value || 0);\r\n    this.updateInResolutionsRange();\r\n  }\r\n  get minResolution(): number {\r\n    return this.ol.getMinResolution();\r\n  }\r\n\r\n  set visible(value: boolean) {\r\n    this.ol.setVisible(value);\r\n    this.visible$.next(value);\r\n  }\r\n  get visible(): boolean {\r\n    return this.visible$.value;\r\n  }\r\n  readonly visible$: BehaviorSubject<boolean> = new BehaviorSubject(undefined);\r\n\r\n  get displayed(): boolean {\r\n    return this.visible && this.isInResolutionsRange;\r\n  }\r\n  readonly displayed$: Observable<boolean> = combineLatest([\r\n    this.isInResolutionsRange$,\r\n    this.visible$\r\n  ]).pipe(map((bunch: [boolean, boolean]) => bunch[0] && bunch[1]));\r\n\r\n  get showInLayerList(): boolean {\r\n    return this.options.showInLayerList !== false;\r\n  }\r\n\r\n  constructor(\r\n    public options: LayerOptions,\r\n    protected authInterceptor?: AuthInterceptor\r\n  ) {\r\n    this.dataSource = options.source;\r\n\r\n    this.ol = this.createOlLayer();\r\n    if (options.zIndex !== undefined) {\r\n      this.zIndex = options.zIndex;\r\n    }\r\n\r\n    if (options.baseLayer && options.visible === undefined) {\r\n      options.visible = false;\r\n    }\r\n\r\n    this.maxResolution = options.maxResolution || getResolutionFromScale(Number(options.maxScaleDenom));\r\n    this.minResolution = options.minResolution || getResolutionFromScale(Number(options.minScaleDenom));\r\n\r\n    this.visible = options.visible === undefined ? true : options.visible;\r\n    this.opacity = options.opacity === undefined ? 1 : options.opacity;\r\n\r\n    if (\r\n      options.legendOptions &&\r\n      (options.legendOptions.url || options.legendOptions.html)\r\n    ) {\r\n      this.legend = this.dataSource.setLegend(options.legendOptions);\r\n    }\r\n\r\n    this.legendCollapsed = options.legendOptions\r\n      ? options.legendOptions.collapsed\r\n        ? options.legendOptions.collapsed\r\n        : true\r\n      : true;\r\n\r\n    this.ol.set('_layer', this, true);\r\n  }\r\n\r\n  protected abstract createOlLayer(): olLayer;\r\n\r\n  setMap(igoMap: IgoMap | undefined) {\r\n    this.map = igoMap;\r\n\r\n    this.unobserveResolution();\r\n    if (igoMap !== undefined) {\r\n      this.observeResolution();\r\n    }\r\n  }\r\n\r\n  private observeResolution() {\r\n    this.resolution$$ = this.map.viewController.resolution$.subscribe(() =>\r\n      this.updateInResolutionsRange()\r\n    );\r\n  }\r\n\r\n  private unobserveResolution() {\r\n    if (this.resolution$$ !== undefined) {\r\n      this.resolution$$.unsubscribe();\r\n      this.resolution$$ = undefined;\r\n    }\r\n  }\r\n\r\n  private updateInResolutionsRange() {\r\n    if (this.map !== undefined) {\r\n      const resolution = this.map.viewController.getResolution();\r\n      const minResolution = this.minResolution;\r\n      const maxResolution = this.maxResolution === undefined ? Infinity : this.maxResolution;\r\n      this.isInResolutionsRange = resolution >= minResolution && resolution <= maxResolution;\r\n    } else {\r\n      this.isInResolutionsRange = false;\r\n    }\r\n  }\r\n}\r\n","import olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource } from '../../../datasource/shared/datasources/datasource';\r\nimport { AnyDataSourceOptions } from '../../../datasource/shared/datasources/any-datasource.interface';\r\n\r\nexport interface LayerOptions {\r\n  source?: DataSource;\r\n  sourceOptions?: AnyDataSourceOptions;\r\n  title?: string;\r\n  id?: string;\r\n  baseLayer?: boolean;\r\n  opacity?: number;\r\n  visible?: boolean;\r\n  extent?: [number, number, number, number];\r\n  zIndex?: number;\r\n  minResolution?: number;\r\n  maxResolution?: number;\r\n  minScaleDenom?: number;\r\n  maxScaleDenom?: number;\r\n  showInLayerList?: boolean;\r\n  removable?: boolean;\r\n  legendOptions?: LegendOptions;\r\n  ol?: olLayer;\r\n  tooltip?: TooltipContent;\r\n  _internal?: { [key: string]: string };\r\n  active?: boolean;\r\n  check?: boolean;\r\n}\r\n\r\nexport interface GroupLayers {\r\n  title: string;\r\n  layers?: LayerOptions;\r\n  collapsed?: boolean;\r\n}\r\n\r\nexport interface TooltipContent {\r\n  type?: TooltipType;\r\n  text?: string;\r\n}\r\nexport enum TooltipType {\r\n  TITLE = 'title',\r\n  ABSTRACT = 'abstract',\r\n  CUSTOM = 'custom'\r\n}\r\n\r\nexport interface LegendOptions {\r\n  collapsed?: boolean;\r\n  display?: boolean;\r\n  url?: string;\r\n  html?: string;\r\n  stylesAvailable?: ItemStyleOptions[];\r\n}\r\n\r\nexport interface ItemStyleOptions {\r\n  name: string;\r\n  title?: string;\r\n}\r\n\r\nexport interface OutputLayerLegend {\r\n  title: string;\r\n  url: string;\r\n  image: string;\r\n}\r\n","import olSourceImage from 'ol/source/Image';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { ImageLayer } from '../shared/layers/image-layer';\r\n\r\nexport class ImageWatcher extends Watcher {\r\n  protected id: string;\r\n  protected loaded = 0;\r\n  protected loading = 0;\r\n\r\n  private source: olSourceImage;\r\n\r\n  constructor(layer: ImageLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    if (!event.image.__watchers__) {\r\n      event.image.__watchers__ = [];\r\n    }\r\n    event.image.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.image.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.image.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.image.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import olSourceTile from 'ol/source/Tile';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { TileLayer } from '../shared/layers/tile-layer';\r\nimport { VectorTileLayer } from '../shared/layers/vectortile-layer';\r\n\r\nexport class TileWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private source: olSourceTile;\r\n\r\n  constructor(layer: TileLayer | VectorTileLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    // This is to avoid increasing\r\n    // the number of loaded tiles if a tile was loading\r\n    // before subscribing to this watcher\r\n    if (!event.tile.__watchers__) {\r\n      event.tile.__watchers__ = [];\r\n    }\r\n    event.tile.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.tile.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.tile.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.tile.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Layer } from '../shared/layers/layer';\r\nimport { OutputLayerLegend } from '../shared/layers/layer.interface';\r\n\r\n/**\r\n * Get all the layers legend\r\n * @return Array of legend\r\n */\r\nexport function getLayersLegends(layers: Layer[], scale?: number): OutputLayerLegend[] {\r\n  const legends = [];\r\n  const newCanvas = document.createElement('canvas');\r\n  const newContext = newCanvas.getContext('2d');\r\n  newContext.font = '20px Calibri';\r\n\r\n  let heightPos = 0;\r\n  for (const layer of layers) {\r\n    if (layer.visible === false) { continue; }\r\n\r\n    const legendUrls = layer.dataSource.getLegend(undefined, scale) || [];\r\n    for (const legendUrl of legendUrls) {\r\n      if (legendUrl.url === undefined) { continue; }\r\n\r\n      const title = layer.title;\r\n      // Create an image for the legend\r\n      const legendImage = new Image();\r\n      legendImage.crossOrigin = 'anonymous';\r\n      legendImage.src = legendUrl.url;\r\n      legendImage.onload = () => {\r\n        newContext.fillText(title, 0, heightPos);\r\n        newContext.drawImage(legendImage, 0, heightPos + 20);\r\n        heightPos += legendImage.height + 5;\r\n      };\r\n      // Add legend info to the list\r\n      legends.push({\r\n        title,\r\n        url: legendUrl.url,\r\n        image: legendImage\r\n      });\r\n    }\r\n  }\r\n\r\n  return legends;\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { VectorLayer } from '../shared/layers/vector-layer';\r\n\r\nexport class VectorWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private layer: VectorLayer;\r\n\r\n  constructor(layer: VectorLayer) {\r\n    super();\r\n    this.layer = layer;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.layer.onUnwatch();\r\n  }\r\n}\r\n","import olLayerImage from 'ol/layer/Image';\r\nimport olSourceImage from 'ol/source/Image';\r\n\r\nimport { AuthInterceptor } from '@igo2/auth';\r\n\r\nimport { ImageWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { WMSDataSource } from '../../../datasource/shared/datasources/wms-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { ImageLayerOptions } from './image-layer.interface';\r\n\r\nexport class ImageLayer extends Layer {\r\n  public dataSource: WMSDataSource;\r\n  public options: ImageLayerOptions;\r\n  public ol: olLayerImage;\r\n\r\n  private watcher: ImageWatcher;\r\n\r\n  constructor(\r\n    options: ImageLayerOptions,\r\n    public authInterceptor?: AuthInterceptor\r\n  ) {\r\n    super(options, authInterceptor);\r\n    this.watcher = new ImageWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerImage {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceImage\r\n    });\r\n\r\n    const image = new olLayerImage(olOptions);\r\n    if (this.authInterceptor) {\r\n      (image.getSource() as any).setImageLoadFunction((tile, src) => {\r\n        this.customLoader(tile, src);\r\n      });\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  private customLoader(tile, src) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', src);\r\n\r\n    const intercepted = this.authInterceptor.interceptXhr(xhr, src);\r\n    if (!intercepted) {\r\n      xhr.abort();\r\n      tile.getImage().src = src;\r\n      return;\r\n    }\r\n\r\n    xhr.responseType = 'arraybuffer';\r\n\r\n    xhr.onload = function() {\r\n      const arrayBufferView = new Uint8Array((this as any).response);\r\n      const blob = new Blob([arrayBufferView], { type: 'image/png' });\r\n      const urlCreator = window.URL;\r\n      const imageUrl = urlCreator.createObjectURL(blob);\r\n      tile.getImage().src = imageUrl;\r\n    };\r\n    xhr.send();\r\n  }\r\n}\r\n","import olLayerTile from 'ol/layer/Tile';\r\nimport olSourceTile from 'ol/source/Tile';\r\n\r\nimport { TileWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { OSMDataSource } from '../../../datasource/shared/datasources/osm-datasource';\r\nimport { WMTSDataSource } from '../../../datasource/shared/datasources/wmts-datasource';\r\nimport { XYZDataSource } from '../../../datasource/shared/datasources/xyz-datasource';\r\nimport { CartoDataSource } from '../../../datasource/shared/datasources/carto-datasource';\r\nimport { TileArcGISRestDataSource } from '../../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { TileLayerOptions } from './tile-layer.interface';\r\n\r\nexport class TileLayer extends Layer {\r\n  public dataSource:\r\n    | OSMDataSource\r\n    | WMTSDataSource\r\n    | XYZDataSource\r\n    | CartoDataSource\r\n    | TileArcGISRestDataSource;\r\n  public options: TileLayerOptions;\r\n  public ol: olLayerTile;\r\n\r\n  private watcher: TileWatcher;\r\n\r\n  constructor(options: TileLayerOptions) {\r\n    super(options);\r\n\r\n    this.watcher = new TileWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceTile\r\n    });\r\n\r\n    return new olLayerTile(olOptions);\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n}\r\n","import olLayerVector from 'ol/layer/Vector';\r\nimport olSourceVector from 'ol/source/Vector';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { asArray as ColorAsArray } from 'ol/color';\r\n\r\nimport { FeatureDataSource } from '../../../datasource/shared/datasources/feature-datasource';\r\nimport { WFSDataSource } from '../../../datasource/shared/datasources/wfs-datasource';\r\nimport { ArcGISRestDataSource } from '../../../datasource/shared/datasources/arcgisrest-datasource';\r\nimport { WebSocketDataSource } from '../../../datasource/shared/datasources/websocket-datasource';\r\nimport { ClusterDataSource } from '../../../datasource/shared/datasources/cluster-datasource';\r\n\r\nimport { VectorWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\nimport { Layer } from './layer';\r\nimport { VectorLayerOptions } from './vector-layer.interface';\r\n\r\nexport class VectorLayer extends Layer {\r\n  public dataSource:\r\n    | FeatureDataSource\r\n    | WFSDataSource\r\n    | ArcGISRestDataSource\r\n    | WebSocketDataSource\r\n    | ClusterDataSource;\r\n  public options: VectorLayerOptions;\r\n  public ol: olLayerVector;\r\n  private watcher: VectorWatcher;\r\n  private trackFeatureListenerId;\r\n\r\n  get browsable(): boolean {\r\n    return this.options.browsable !== false;\r\n  }\r\n\r\n  get exportable(): boolean {\r\n    return this.options.exportable !== false;\r\n  }\r\n\r\n  constructor(options: VectorLayerOptions) {\r\n    super(options);\r\n    this.watcher = new VectorWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVector {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVector\r\n    });\r\n\r\n    if (this.options.animation) {\r\n      this.dataSource.ol.on(\r\n        'addfeature',\r\n        function(e) {\r\n          this.flash(e.feature);\r\n        }.bind(this)\r\n      );\r\n    }\r\n\r\n    if (this.options.trackFeature) {\r\n      this.enableTrackFeature(this.options.trackFeature);\r\n    }\r\n\r\n    return new olLayerVector(olOptions);\r\n  }\r\n\r\n  protected flash(feature) {\r\n    const start = new Date().getTime();\r\n    const listenerKey = this.map.ol.on('postcompose', animate.bind(this));\r\n\r\n    function animate(event) {\r\n      const vectorContext = event.vectorContext;\r\n      const frameState = event.frameState;\r\n      const flashGeom = feature.getGeometry().clone();\r\n      const elapsed = frameState.time - start;\r\n      const elapsedRatio = elapsed / this.options.animation.duration;\r\n      const opacity = easeOut(1 - elapsedRatio);\r\n      const newColor = ColorAsArray(this.options.animation.color || 'red');\r\n      newColor[3] = opacity;\r\n      let style = this.ol\r\n        .getStyleFunction()\r\n        .call(this, feature)\r\n        .find(style2 => {\r\n          return style2.getImage();\r\n        });\r\n      if (!style) {\r\n        style = this.ol.getStyleFunction().call(this, feature)[0];\r\n      }\r\n      const styleClone = style.clone();\r\n\r\n      switch (feature.getGeometry().getType()) {\r\n        case 'Point':\r\n          const radius =\r\n            easeOut(elapsedRatio) * (styleClone.getImage().getRadius() * 3);\r\n          styleClone.getImage().setRadius(radius);\r\n          styleClone.getImage().setOpacity(opacity);\r\n          break;\r\n        case 'LineString':\r\n          // TODO\r\n          if (styleClone.getImage()) {\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setColor(newColor);\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) *\r\n                  (styleClone\r\n                    .getImage()\r\n                    .getStroke()\r\n                    .getWidth() *\r\n                    3)\r\n              );\r\n          }\r\n          if (styleClone.getStroke()) {\r\n            styleClone.getStroke().setColor(newColor);\r\n            styleClone\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) * (styleClone.getStroke().getWidth() * 3)\r\n              );\r\n          }\r\n          break;\r\n        case 'Polygon':\r\n          // TODO\r\n          if (styleClone.getImage()) {\r\n            styleClone\r\n              .getImage()\r\n              .getFill()\r\n              .setColor(newColor);\r\n          }\r\n          if (styleClone.getFill()) {\r\n            styleClone.getFill().setColor(newColor);\r\n          }\r\n          break;\r\n      }\r\n\r\n      styleClone.setText('');\r\n      vectorContext.setStyle(styleClone);\r\n      vectorContext.drawGeometry(flashGeom);\r\n\r\n      if (elapsed > this.options.animation.duration) {\r\n        unByKey(listenerKey);\r\n        // remove last geometry\r\n        // there is a little flash before feature disappear, better solution ?\r\n        this.map.ol.render();\r\n        return;\r\n      }\r\n      // tell OpenLayers to continue postcompose animation\r\n      this.map.ol.render();\r\n    }\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  public onUnwatch() {\r\n    this.dataSource.onUnwatch();\r\n    this.stopAnimation();\r\n  }\r\n\r\n  public stopAnimation() {\r\n    this.dataSource.ol.un(\r\n      'addfeature',\r\n      function(e) {\r\n        if (this.visible) {\r\n          this.flash(e.feature);\r\n        }\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  public enableTrackFeature(id: string | number) {\r\n    this.trackFeatureListenerId = this.dataSource.ol.on(\r\n      'addfeature',\r\n      this.trackFeature.bind(this, id)\r\n    );\r\n  }\r\n  public centerMapOnFeature(id: string | number) {\r\n    const feat = this.dataSource.ol.getFeatureById(id);\r\n    if (feat) {\r\n      this.map.ol.getView().setCenter(feat.getGeometry().getCoordinates());\r\n    }\r\n  }\r\n\r\n  public trackFeature(id, feat) {\r\n    if (feat.feature.getId() === id && this.visible) {\r\n      this.centerMapOnFeature(id);\r\n    }\r\n  }\r\n\r\n  public disableTrackFeature(id?: string | number) {\r\n    unByKey(this.trackFeatureListenerId);\r\n  }\r\n}\r\n","import olLayerVectorTile from 'ol/layer/VectorTile';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\n\r\nimport { MVTDataSource } from '../../../datasource/shared/datasources/mvt-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { VectorTileLayerOptions } from './vectortile-layer.interface';\r\nimport { TileWatcher } from '../../utils';\r\n\r\nexport class VectorTileLayer extends Layer {\r\n  public dataSource: MVTDataSource;\r\n  public options: VectorTileLayerOptions;\r\n  public ol: olLayerVectorTile;\r\n\r\n  private watcher: TileWatcher;\r\n\r\n  constructor(options: VectorTileLayerOptions) {\r\n    super(options);\r\n    this.watcher = new TileWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVectorTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVectorTile\r\n    });\r\n\r\n    return new olLayerVectorTile(olOptions);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { ActivityService } from '@igo2/core';\r\n\r\nimport { IgoMap, MapViewOptions } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-map-browser',\r\n  templateUrl: './map-browser.component.html',\r\n  styleUrls: ['./map-browser.component.scss']\r\n})\r\nexport class MapBrowserComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  private activityId: string;\r\n  private status$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get view(): MapViewOptions { return this._view; }\r\n  set view(value: MapViewOptions) {\r\n    this._view = value;\r\n    if (this.map !== undefined) {\r\n      this.map.updateView(value);\r\n    }\r\n  }\r\n  private _view: MapViewOptions;\r\n\r\n  public id = `igo-map-target-${new Date().getTime()}`;\r\n\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  ngOnInit() {\r\n    this.status$$ = this.map.status$.subscribe(status =>\r\n      this.handleStatusChange(status)\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.map.setTarget(this.id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.setTarget(undefined);\r\n    this.activityService.unregister(this.activityId);\r\n    this.status$$.unsubscribe();\r\n  }\r\n\r\n  private handleStatusChange(status: SubjectStatus) {\r\n    if (status === SubjectStatus.Working && this.activityId === undefined) {\r\n      this.activityId = this.activityService.register();\r\n    } else if (status === SubjectStatus.Done && this.activityId !== undefined) {\r\n      this.activityService.unregister(this.activityId);\r\n      this.activityId = undefined;\r\n    }\r\n  }\r\n}\r\n","export enum OverlayAction {\r\n    None,\r\n    Move,\r\n    Zoom,\r\n    ZoomIfOutMapExtent\r\n  }\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayAction } from './overlay.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OverlayService {\r\n  public features$ = new BehaviorSubject<[Feature[], OverlayAction]>([\r\n    [],\r\n    undefined\r\n  ]);\r\n\r\n  constructor() {}\r\n\r\n  setFeatures(features: Feature[], action: OverlayAction = OverlayAction.None) {\r\n    this.features$.next([features, action]);\r\n  }\r\n\r\n  clear() {\r\n    this.features$.next([[], OverlayAction.None]);\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayService } from '../shared/overlay.service';\r\nimport { OverlayAction } from '../shared/overlay.enum';\r\n\r\n@Directive({\r\n  selector: '[igoOverlay]'\r\n})\r\nexport class OverlayDirective implements OnInit, OnDestroy {\r\n  private features$$: Subscription;\r\n  private format = new olFormatGeoJSON();\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private overlayService: OverlayService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.features$$ = this.overlayService.features$.subscribe(res =>\r\n      this.handleFeatures(res[0], res[1])\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.features$$.unsubscribe();\r\n  }\r\n\r\n  private handleFeatures(features: Feature[], action: OverlayAction) {}\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer, StyleService } from '../../layer';\r\n\r\n/**\r\n * Create an overlay layer and it's source\r\n * @returns Overlay layer\r\n */\r\nexport function createOverlayLayer(): VectorLayer {\r\n  const overlayDataSource = new FeatureDataSource();\r\n  return new VectorLayer({\r\n    title: 'Overlay',\r\n    zIndex: 300,\r\n    source: overlayDataSource,\r\n    style: createOverlayLayerStyle()\r\n  });\r\n}\r\n\r\n/**\r\n * Create an overlay style with markers for points and a basic stroke/fill\r\n * combination for lines and polygons\r\n * @returns Style function\r\n */\r\nfunction createOverlayLayerStyle(): (olFeature: OlFeature) => olstyle.Style {\r\n  const defaultStyle = createOverlayDefaultStyle();\r\n  const markerStyle = createOverlayMarkerStyle();\r\n\r\n  let style;\r\n\r\n  return (olFeature: OlFeature) => {\r\n    if (olFeature.getId() === 'bufferFeature') {\r\n      style = createBufferStyle(olFeature.get('bufferStroke'), 2, olFeature.get('bufferFill'), olFeature.get('bufferText'));\r\n      return style;\r\n    } else {\r\n      const customStyle = olFeature.get('_style');\r\n      if (customStyle) {\r\n        const styleService = new StyleService();\r\n        return styleService.createStyle(customStyle);\r\n      }\r\n      const geometryType = olFeature.getGeometry().getType();\r\n      style = geometryType === 'Point' ? markerStyle : defaultStyle;\r\n      style.getText().setText(olFeature.get('_mapTitle'));\r\n      return style;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Create a basic style for lines and polygons\r\n * @returns Style\r\n */\r\nexport function createOverlayDefaultStyle(\r\n  {text, fillOpacity, strokeWidth = 2, strokeOpacity, color = [0, 161, 222, 0.3], strokeColor}:\r\n    {text?: string, fillOpacity?: number, strokeWidth?: number, strokeOpacity?: number, color?: number[], strokeColor?: number[]}  = {}\r\n  ): olstyle.Style {\r\n  const fillWithOpacity = color.slice(0);\r\n  const strokeWithOpacity = color.slice(0);\r\n  strokeWithOpacity[3] = 1;\r\n  if (fillOpacity) {\r\n    fillWithOpacity[3] = fillOpacity;\r\n  }\r\n  if (strokeOpacity) {\r\n    strokeWithOpacity[3] = strokeOpacity;\r\n  }\r\n  if (strokeColor) {\r\n    strokeWithOpacity[0] = strokeColor[0];\r\n    strokeWithOpacity[1] = strokeColor[1];\r\n    strokeWithOpacity[2] = strokeColor[2];\r\n  }\r\n\r\n  const stroke = new olstyle.Stroke({\r\n    width: strokeWidth,\r\n    color: strokeWithOpacity\r\n  });\r\n\r\n  const fill = new olstyle.Fill({\r\n    color: fillWithOpacity\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke,\r\n    fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke,\r\n      fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      text,\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a marker style for points\r\n * @returns Style\r\n */\r\nexport function createOverlayMarkerStyle(\r\n  {text, opacity = 1, color = 'blue', outlineColor}:\r\n    {text?: string, opacity?: number, color?: string, outlineColor?: string | number[]}  = {}\r\n  ): olstyle.Style {\r\n  let iconColor;\r\n  let svgIconColor;\r\n  let svgOutlineColor;\r\n  let svg;\r\n\r\n  const isIE = /msie\\s|trident\\/|edge\\//i.test(window.navigator.userAgent); // To fix IE11 svg bug (temporarly)\r\n\r\n  switch (color) {\r\n    case 'blue':\r\n      svgIconColor = '\"rgb(0,161,222)\"';\r\n      iconColor = color;\r\n      break;\r\n    case 'red':\r\n      svgIconColor = '\"rgb(246,65,57)\"';\r\n      iconColor = color;\r\n      break;\r\n    case 'yellow':\r\n      svgIconColor = '\"rgb(255,215,0)\"';\r\n      iconColor = color;\r\n      break;\r\n    case 'green':\r\n      svgIconColor = '\"rgb(0,128,0)\"';\r\n      iconColor = color;\r\n      break;\r\n    default:\r\n      svgIconColor = '\"rgb(0,161,222)\"';\r\n      iconColor = 'blue';\r\n      break;\r\n  }\r\n\r\n  if (outlineColor) {\r\n    if (outlineColor instanceof Array) {\r\n      svgOutlineColor = 'rgb(' + outlineColor[0] + ',' + outlineColor[1] + ',' + outlineColor[2] + ')';\r\n    }\r\n    switch (outlineColor) {\r\n      case 'blue':\r\n        svgOutlineColor = 'rgb(0,161,222)';\r\n        break;\r\n      case 'red':\r\n        svgOutlineColor = 'rgb(246,65,57)';\r\n        break;\r\n      case 'yellow':\r\n        svgOutlineColor = 'rgb(255,215,0)';\r\n        break;\r\n      case 'green':\r\n        svgOutlineColor = 'rgb(0,128,0)';\r\n        break;\r\n    }\r\n    svg = '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" height=\"36\" width=\"36\" viewBox=\"0 0 36 36\">' +\r\n          '<path fill=' + svgIconColor + ' stroke=\"' + svgOutlineColor + '\" stroke-width=\"2\" d=\"M 17.692635,32.565644 C 15.71852,30.330584 13.290925,27.058065 11.6766,24.455732 9.3398623,20.688851 7.8905694,17.205334 7.6297492,14.728733 7.5616025,14.081649 7.5739557,12.528552 7.6513363,12.014724 8.1013861,9.0262716 9.8047068,6.3655569 12.310675,4.7364878 c 1.113691,-0.7239832 2.508083,-1.2834131 3.776687,-1.5152052 0.242945,-0.044389 0.451656,-0.09393 0.463804,-0.1100911 0.01215,-0.016161 0.638282,-0.025502 1.391411,-0.02076 1.088235,0.00685 1.450932,0.024316 1.766871,0.085071 2.650763,0.5097353 4.947142,1.8701891 6.498786,3.8501033 0.628018,0.8013587 1.297046,2.0200608 1.640967,2.9891872 0.191065,0.538399 0.427644,1.447408 0.477391,1.834287 0.0164,0.127546 0.0434,0.231902 0.06,0.231902 0.0166,0 0.03122,0.626135 0.03249,1.391411 0.0013,0.765276 -0.011,1.391411 -0.02726,1.391411 -0.01626,0 -0.05449,0.154049 -0.08495,0.342331 -0.08815,0.544879 -0.387235,1.721449 -0.604837,2.379406 -1.209421,3.656888 -4.014463,8.349762 -7.849521,13.132357 -0.790496,0.985807 -1.795217,2.167992 -1.842543,2.167992 -0.01896,0 -0.161766,-0.144111 -0.317336,-0.320246 z m 1.066937,-15.36525 c 0.133519,-0.02121 0.248766,-0.05657 0.256105,-0.07859 0.0073,-0.02202 0.04918,-0.03066 0.09298,-0.0192 0.0438,0.01145 0.107628,-0.0072 0.141834,-0.04137 0.03421,-0.03421 0.08456,-0.05474 0.111888,-0.04563 0.02733,0.0091 0.07703,-0.01077 0.110429,-0.04417 0.03341,-0.03341 0.08416,-0.05293 0.112796,-0.04338 0.02863,0.0095 0.08974,-0.01867 0.135802,-0.06271 0.04606,-0.04403 0.111902,-0.08625 0.146319,-0.09381 0.204084,-0.04483 0.762371,-0.519108 1.079463,-0.917027 0.26749,-0.335672 0.570987,-0.878795 0.529019,-0.946701 -0.01496,-0.0242 -0.0067,-0.044 0.01835,-0.044 0.05645,0 0.196809,-0.467982 0.158801,-0.529481 -0.01521,-0.02461 -0.0043,-0.04475 0.02427,-0.04475 0.03157,0 0.04365,-0.04329 0.03082,-0.11043 -0.01161,-0.06074 -0.0066,-0.110429 0.01124,-0.110429 0.01779,0 0.03235,-0.258405 0.03235,-0.574233 0,-0.315829 -0.01545,-0.574234 -0.03434,-0.574234 -0.01889,0 -0.02437,-0.03811 -0.01219,-0.08469 0.04412,-0.168712 -0.336329,-1.152668 -0.481536,-1.245401 -0.02327,-0.01486 -0.04022,-0.03992 -0.03765,-0.05568 0.01222,-0.07498 -0.156557,-0.318365 -0.406379,-0.586027 -0.295921,-0.317054 -0.773059,-0.690104 -0.83427,-0.652274 -0.0206,0.01273 -0.03745,0.0024 -0.03745,-0.02289 0,-0.06107 -0.433076,-0.2789369 -0.487546,-0.245273 -0.02338,0.01445 -0.04251,0.0068 -0.04251,-0.01695 0,-0.056281 -0.393995,-0.1865457 -0.613804,-0.2029397 -0.0943,-0.00703 -0.188579,-0.023183 -0.209503,-0.035888 -0.02092,-0.012705 -0.276571,-0.023337 -0.568105,-0.023627 -0.534044,-5.301e-4 -1.12638,0.091025 -1.12638,0.1741017 0,0.023781 -0.01713,0.032648 -0.03808,0.019705 -0.05054,-0.031232 -0.403641,0.1088602 -0.403641,0.1601422 0,0.02204 -0.01988,0.02779 -0.04417,0.01278 -0.0243,-0.01501 -0.04417,-0.0051 -0.04417,0.02209 0,0.02716 -0.01988,0.0371 -0.04417,0.02209 -0.0243,-0.01501 -0.04417,-0.0051 -0.04417,0.02209 0,0.02716 -0.01915,0.03755 -0.04256,0.02308 -0.02341,-0.01447 -0.08138,0.01252 -0.128834,0.05997 -0.04745,0.04745 -0.0974,0.07515 -0.111001,0.06155 -0.0136,-0.0136 -0.03722,0.0078 -0.05248,0.0476 -0.01526,0.03978 -0.0411,0.06408 -0.0574,0.054 -0.03277,-0.02025 -0.462299,0.323995 -0.491977,0.394291 -0.01026,0.02429 -0.07454,0.0912 -0.142856,0.148686 -0.248033,0.208705 -0.730279,0.974169 -0.672565,1.067553 0.0145,0.02346 0.0059,0.04266 -0.01914,0.04266 -0.05907,0 -0.241471,0.599428 -0.208527,0.685278 0.01385,0.0361 0.0044,0.06564 -0.02098,0.06564 -0.02539,0 -0.04169,0.0646 -0.03622,0.143558 0.0055,0.07896 -0.0042,0.213129 -0.02144,0.29816 -0.04741,0.233576 0.0511,1.055502 0.167516,1.397721 0.126048,0.370516 0.310099,0.740163 0.426484,0.856548 0.04776,0.04776 0.07554,0.08684 0.06174,0.08684 -0.0138,0 0.01516,0.05653 0.06436,0.125632 0.131301,0.184396 0.499365,0.587266 0.518785,0.567846 0.0092,-0.0092 0.09821,0.06081 0.197812,0.155562 0.09961,0.09475 0.190589,0.162786 0.202187,0.151188 0.0116,-0.0116 0.05991,0.01774 0.107361,0.06519 0.04745,0.04745 0.105426,0.07444 0.128834,0.05997 0.02341,-0.01447 0.04256,-0.0057 0.04256,0.01958 0,0.06106 0.344664,0.23496 0.399061,0.201341 0.02346,-0.0145 0.04266,-0.0059 0.04266,0.01914 0,0.05907 0.599429,0.241471 0.685279,0.208527 0.0361,-0.01385 0.06564,-0.0065 0.06564,0.01645 0,0.05196 1.079115,0.04833 1.413314,-0.0048 z\"></path>'\r\n          + '</svg>';\r\n  }\r\n\r\n  if (!isIE) {\r\n    return new olstyle.Style({\r\n      image: new olstyle.Icon({\r\n        src: svg ? 'data:image/svg+xml;utf8,' + svg : './assets/igo2/geo/icons/place_' + iconColor + '_36px.svg',\r\n        opacity,\r\n        imgSize: [36, 36], // for ie\r\n        anchor: [0.5, 0.92]\r\n      }),\r\n      text: new olstyle.Text({\r\n        text,\r\n        font: '12px Calibri,sans-serif',\r\n        fill: new olstyle.Fill({ color: '#000' }),\r\n        stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n        overflow: true\r\n      })\r\n    });\r\n  } else {\r\n    return new olstyle.Style({\r\n      image: new olstyle.Icon({\r\n        src: './assets/igo2/geo/icons/place_' + iconColor + '_36px.svg',\r\n        opacity,\r\n        imgSize: [36, 36], // for ie\r\n        anchor: [0.5, 0.92]\r\n      }),\r\n      text: new olstyle.Text({\r\n        text,\r\n        font: '12px Calibri,sans-serif',\r\n        fill: new olstyle.Fill({ color: '#000' }),\r\n        stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n        overflow: true\r\n      })\r\n    });\r\n  }\r\n}\r\n\r\nfunction createBufferStyle(\r\n  strokeRGBA: [number, number, number, number] = [0, 161, 222, 1],\r\n  strokeWidth: number = 2,\r\n  fillRGBA: [number, number, number, number] = [0, 161, 222, 0.15],\r\n  bufferRadius?\r\n): olstyle.Style {\r\n  const stroke = new olstyle.Stroke({\r\n    width: strokeWidth,\r\n    color: strokeRGBA\r\n  });\r\n\r\n  const fill = new olstyle.Stroke({\r\n    color: fillRGBA\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke,\r\n    fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke,\r\n      fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      text: bufferRadius,\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\nimport { StyleByAttribute } from './vector-style.interface';\r\n\r\nimport { ClusterParam } from './clusterParam';\r\nimport { createOverlayMarkerStyle } from '../../overlay';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleService {\r\n  public style: olstyle.Style;\r\n\r\n  createStyle(options: { [key: string]: any }) {\r\n    if (!options) {\r\n      return createOverlayMarkerStyle();\r\n    }\r\n    if (typeof options === 'function' || options instanceof olstyle.Style) {\r\n      return options;\r\n    }\r\n    return this.parseStyle('style', options);\r\n  }\r\n\r\n  private parseStyle(key: string, value: any): olstyle {\r\n    const styleOptions = {};\r\n    const olCls = this.getOlCls(key);\r\n\r\n    if (olCls && value instanceof Object) {\r\n      Object.keys(value).forEach(_key => {\r\n        const olKey = this.getOlKey(_key);\r\n        styleOptions[olKey] = this.parseStyle(_key, value[_key]);\r\n      });\r\n      return new olCls(styleOptions);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  private getOlKey(key: any) {\r\n    let olKey;\r\n    switch (key.toLowerCase()) {\r\n      case 'circle':\r\n      case 'regularshape':\r\n      case 'icon':\r\n        olKey = 'image';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return olKey || key;\r\n  }\r\n\r\n  private getOlCls(key: any) {\r\n    let olCls = olstyle[key.charAt(0).toUpperCase() + key.slice(1)];\r\n    if (key === 'regularshape') {\r\n      olCls = olstyle.RegularShape;\r\n    }\r\n    if (key === 'backgroundFill') {\r\n      olCls = olstyle.Fill;\r\n    }\r\n    if (key === 'backgroundStroke') {\r\n      olCls = olstyle.Stroke;\r\n    }\r\n\r\n    return olCls;\r\n  }\r\n\r\n  createStyleByAttribute(feature, styleByAttribute: StyleByAttribute) {\r\n    let style;\r\n    const type = styleByAttribute.type;\r\n    const attribute = styleByAttribute.attribute;\r\n    const data = styleByAttribute.data;\r\n    const stroke = styleByAttribute.stroke;\r\n    const width = styleByAttribute.width;\r\n    const fill = styleByAttribute.fill;\r\n    const radius = styleByAttribute.radius;\r\n    const icon = styleByAttribute.icon;\r\n    const scale = styleByAttribute.scale;\r\n    const size = data.length;\r\n    const label = styleByAttribute.label.attribute || styleByAttribute.label;\r\n    const labelStyle =\r\n      this.parseStyle('text', styleByAttribute.label.style) ||\r\n      new olstyle.Text();\r\n    labelStyle.setText(this.getLabel(feature, label));\r\n    const baseStyle = styleByAttribute.baseStyle;\r\n    if (type === 'circle') {\r\n      for (let i = 0; i < size; i++) {\r\n        const val =\r\n          typeof feature.get(attribute) !== 'undefined'\r\n            ? feature.get(attribute)\r\n            : '';\r\n        if (val === data[i] || val.toString().match(data[i])) {\r\n          if (icon) {\r\n            style = [\r\n              new olstyle.Style({\r\n                image: new olstyle.Icon({\r\n                  src: icon[i],\r\n                  scale: scale ? scale[i] : 1\r\n                })\r\n              })\r\n            ];\r\n            return style;\r\n          }\r\n          style = [\r\n            new olstyle.Style({\r\n              image: new olstyle.Circle({\r\n                radius: radius ? radius[i] : 4,\r\n                stroke: new olstyle.Stroke({\r\n                  color: stroke ? stroke[i] : 'black',\r\n                  width: width ? width[i] : 1\r\n                }),\r\n                fill: new olstyle.Fill({\r\n                  color: fill ? fill[i] : 'black'\r\n                })\r\n              }),\r\n              text: labelStyle\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n      if (!feature.getStyle()) {\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: 4,\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: '#bbbbf2'\r\n              })\r\n            })\r\n          })\r\n        ];\r\n        return style;\r\n      }\r\n    } else if (type === 'regular') {\r\n      for (let i = 0; i < size; i++) {\r\n        const val =\r\n          typeof feature.get(attribute) !== 'undefined'\r\n            ? feature.get(attribute)\r\n            : '';\r\n        if (val === data[i] || val.toString().match(data[i])) {\r\n          style = [\r\n            new olstyle.Style({\r\n              stroke: new olstyle.Stroke({\r\n                color: stroke ? stroke[i] : 'black',\r\n                width: width ? width[i] : 1\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: fill ? fill[i] : 'rgba(255,255,255,0.4)'\r\n              }),\r\n              text: labelStyle\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n      if (feature instanceof OlFeature) {\r\n        if (!feature.getStyle()) {\r\n          if (baseStyle) {\r\n            style = this.createStyle(baseStyle);\r\n            return style;\r\n          }\r\n          style = [\r\n            new olstyle.Style({\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: '#bbbbf2'\r\n              })\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createClusterStyle(feature, clusterParam: ClusterParam = {}, layerStyle) {\r\n    let style: olstyle.Style;\r\n    const size = feature.get('features').length;\r\n    if (size !== 1) {\r\n      if (clusterParam.clusterRanges) {\r\n        for (const r of clusterParam.clusterRanges) {\r\n          if (\r\n            (!r.minRadius || r.minRadius <= size) &&\r\n            (!r.maxRadius || r.maxRadius >= size)\r\n          ) {\r\n            style = this.createStyle(r.style);\r\n\r\n            if (r.showRange) {\r\n              const text = new olstyle.Text({\r\n                text: size.toString(),\r\n                fill: new olstyle.Fill({\r\n                  color: '#fff'\r\n                })\r\n              });\r\n              style.setText(text);\r\n            }\r\n\r\n            if (r.dynamicRadius) {\r\n              let clusterRadius: number;\r\n              const radiusMin = style.image_.getRadius();\r\n              clusterRadius = 5 * Math.log(size);\r\n              if (clusterRadius < radiusMin) {\r\n                clusterRadius = radiusMin;\r\n              }\r\n              style.image_.setRadius(clusterRadius);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!style) {\r\n        let clusterRadius: number;\r\n        if (clusterParam.radiusCalc) {\r\n          clusterRadius = clusterParam.radiusCalc(size);\r\n        } else {\r\n          const radiusMin = 6;\r\n          clusterRadius = 5 * Math.log(size);\r\n          if (clusterRadius < radiusMin) {\r\n            clusterRadius = radiusMin;\r\n          }\r\n        }\r\n\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: clusterRadius,\r\n              opacity: 0.4,\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: 'rgba(24, 134, 45, 0.5)'\r\n              })\r\n            }),\r\n            text: new olstyle.Text({\r\n              text: size.toString(),\r\n              fill: new olstyle.Fill({\r\n                color: '#fff'\r\n              })\r\n            })\r\n          })\r\n        ];\r\n      }\r\n    } else {\r\n      style = this.createStyle(layerStyle);\r\n    }\r\n    return style;\r\n  }\r\n\r\n  getLabel(feature, labelMatch): string {\r\n    let label = labelMatch;\r\n    const labelToGet = Array.from(labelMatch.matchAll(/\\$\\{([^\\{\\}]+)\\}/g));\r\n\r\n    labelToGet.forEach(v => {\r\n      label = label.replace(v[0], feature.get(v[1]));\r\n    });\r\n\r\n    // Nothing done? check feature's attribute\r\n    if (labelToGet.length === 0 && label === labelMatch) {\r\n      label = feature.get(labelMatch) || labelMatch;\r\n    }\r\n\r\n    return label;\r\n  }\r\n}\r\n","import OlLayer from 'ol/layer/Layer';\r\n\r\nimport { AnyLayer } from '../../layer/shared/layers/any-layer';\r\nimport { QueryableDataSource } from './query.interfaces';\r\n\r\n/**\r\n * Whether a layer is queryable\r\n * @param layer Layer\r\n * @returns True if the layer s squeryable\r\n */\r\nexport function layerIsQueryable(layer: AnyLayer): boolean {\r\n  const dataSource = layer.dataSource as QueryableDataSource;\r\n  return dataSource.options.queryable === true;\r\n}\r\n\r\n/**\r\n * Whether an OL layer is queryable\r\n * @param layer Layer\r\n * @returns True if the ol layer is queryable\r\n */\r\nexport function olLayerIsQueryable(olLayer: OlLayer): boolean {\r\n  const layer = olLayer.get('_layer');\r\n  return layer === undefined ? false : layerIsQueryable(layer);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  Renderer2,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\nimport { layerIsQueryable } from '../../query/shared/query.utils';\r\nimport { Layer, TooltipType } from '../shared/layers';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\n\r\n@Component({\r\n  selector: 'igo-layer-item',\r\n  templateUrl: './layer-item.component.html',\r\n  styleUrls: ['./layer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerItemComponent implements OnInit, OnDestroy {\r\n\r\n  public focusedCls = 'igo-layer-item-focused';\r\n\r\n  @Input()\r\n  get activeLayer() {\r\n    return this._activeLayer;\r\n  }\r\n  set activeLayer(value) {\r\n    if (value && this.layer && value.id === this.layer.id && !this.selectionMode) {\r\n      this.layerTool$.next(true);\r\n      this.renderer.addClass(this.elRef.nativeElement, this.focusedCls);\r\n    } else {\r\n      this.renderer.removeClass(this.elRef.nativeElement, this.focusedCls);\r\n    }\r\n  }\r\n  private _activeLayer;\r\n\r\n  layerTool$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  inResolutionRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  queryBadgeHidden$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  tooltipText: string;\r\n\r\n  state: ConnectionState;\r\n\r\n  @Input()\r\n  get selectAll() {\r\n    return this._selectAll;\r\n  }\r\n  set selectAll(value: boolean) {\r\n    this._selectAll = value;\r\n    if (value === true) {\r\n      this.layerCheck = true;\r\n    }\r\n  }\r\n  private _selectAll = false;\r\n\r\n  @Input() layerCheck;\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  layers$: BehaviorSubject<Layer> = new BehaviorSubject<Layer>(undefined);\r\n\r\n  @Input()\r\n  get layer() {\r\n    return this._layer;\r\n  }\r\n  set layer(value) {\r\n    this._layer = value;\r\n    this.layers$.next(value);\r\n  }\r\n  private _layer;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendIfVisible: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() orderable: boolean = true;\r\n\r\n  @Input() lowerDisabled: boolean = false;\r\n\r\n  @Input() raiseDisabled: boolean = false;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  @Input() selectionMode;\r\n\r\n  get removable(): boolean {\r\n    return this.layer.options.removable !== false;\r\n  }\r\n\r\n  get opacity() {\r\n    return this.layer.opacity * 100;\r\n  }\r\n  set opacity(opacity: number) {\r\n    this.layer.opacity = opacity / 100;\r\n  }\r\n\r\n  @Output() action: EventEmitter<Layer> = new EventEmitter<Layer>(undefined);\r\n  @Output() checkbox = new EventEmitter<{\r\n    layer: Layer;\r\n    check: boolean;\r\n  }>();\r\n\r\n  constructor(\r\n    private networkService: NetworkService,\r\n    private renderer: Renderer2,\r\n    private elRef: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    if (\r\n      this.layer.visible &&\r\n      this.expandLegendIfVisible &&\r\n      this.layer.firstLoadComponent === true\r\n    ) {\r\n      this.layer.firstLoadComponent = false;\r\n      this.layer.legendCollapsed = false;\r\n    }\r\n    this.toggleLegend(this.layer.legendCollapsed);\r\n    this.updateQueryBadge();\r\n\r\n    const resolution$ = this.layer.map.viewController.resolution$;\r\n    this.resolution$$ = resolution$.subscribe(() => {\r\n      this.onResolutionChange();\r\n    });\r\n    this.tooltipText = this.computeTooltip();\r\n\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      this.state = state;\r\n      this.onResolutionChange();\r\n    });\r\n\r\n    this.layers$.subscribe(() => {\r\n      if (this.layer && this.layer.options.active) {\r\n        this.layerTool$.next(true);\r\n        this.renderer.addClass(this.elRef.nativeElement, this.focusedCls);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.resolution$$.unsubscribe();\r\n  }\r\n\r\n  toggleLegend(collapsed: boolean) {\r\n    this.layer.legendCollapsed = collapsed;\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleLegendOnClick() {\r\n    this.toggleLegend(this.showLegend$.value);\r\n  }\r\n\r\n  toggleVisibility() {\r\n    this.layer.visible = !this.layer.visible;\r\n    if (this.toggleLegendOnVisibilityChange) {\r\n      this.toggleLegend(!this.layer.visible);\r\n    }\r\n    this.updateQueryBadge();\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    const layerOptions = this.layer.options;\r\n    if (!layerOptions.tooltip) {\r\n      return this.layer.title;\r\n    }\r\n    const layerTooltip = layerOptions.tooltip;\r\n    const layerMetadata = (layerOptions as MetadataLayerOptions).metadata;\r\n    switch (layerOptions.tooltip.type) {\r\n      case TooltipType.TITLE:\r\n        return this.layer.title;\r\n      case TooltipType.ABSTRACT:\r\n        if (layerMetadata && layerMetadata.abstract) {\r\n          return layerMetadata.abstract;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      case TooltipType.CUSTOM:\r\n        if (layerTooltip && layerTooltip.text) {\r\n          return layerTooltip.text;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      default:\r\n        return this.layer.title;\r\n    }\r\n  }\r\n\r\n  private onResolutionChange() {\r\n    const inResolutionRange = this.layer.isInResolutionsRange;\r\n    if (\r\n      inResolutionRange === false &&\r\n      this.updateLegendOnResolutionChange === true\r\n    ) {\r\n      this.toggleLegend(true);\r\n    }\r\n    this.inResolutionRange$.next(inResolutionRange);\r\n  }\r\n\r\n  private updateQueryBadge() {\r\n    const hidden =\r\n      this.queryBadge === false ||\r\n      this.layer.visible === false ||\r\n      !layerIsQueryable(this.layer);\r\n    this.queryBadgeHidden$.next(hidden);\r\n  }\r\n\r\n  toggleLayerTool() {\r\n    this.layerTool$.next(!this.layerTool$.getValue());\r\n    if (this.layerTool$.getValue() === true) {\r\n      this.renderer.addClass(this.elRef.nativeElement, this.focusedCls);\r\n    } else {\r\n      this.renderer.removeClass(this.elRef.nativeElement, this.focusedCls);\r\n    }\r\n    this.action.emit(this.layer);\r\n  }\r\n\r\n  public check() {\r\n    this.layerCheck = !this.layerCheck;\r\n    this.checkbox.emit({layer: this.layer, check: this.layerCheck});\r\n  }\r\n}\r\n","import { Component, Input, OnInit, OnDestroy, ChangeDetectionStrategy, ViewChildren, ElementRef, QueryList } from '@angular/core';\r\n\r\nimport { Subscription, BehaviorSubject, of, Observable } from 'rxjs';\r\n\r\nimport { Legend } from '../../datasource/shared/datasources/datasource.interface';\r\nimport { Layer, ItemStyleOptions } from '../shared/layers';\r\nimport { CapabilitiesService } from '../../datasource/shared/capabilities.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { LanguageService } from '@igo2/core';\r\n\r\n@Component({\r\n  selector: 'igo-layer-legend',\r\n  templateUrl: './layer-legend.component.html',\r\n  styleUrls: ['./layer-legend.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerLegendComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  /**\r\n   * Observable of the legend items\r\n   */\r\n  legendItems$: BehaviorSubject<Legend[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Subscription to the map's resolution\r\n   */\r\n  private resolution$$: Subscription;\r\n\r\n  /**\r\n   * The available styles\r\n   */\r\n  public styles;\r\n\r\n  /**\r\n   * The style used to make the legend\r\n   */\r\n  public currentStyle;\r\n\r\n  /**\r\n   * The scale used to make the legend\r\n   */\r\n  private scale: number = undefined;\r\n\r\n  /**\r\n   * Get list of images display\r\n   */\r\n  @ViewChildren('renderedLegend') renderedLegends: QueryList<ElementRef>;\r\n\r\n  /**\r\n   * List of size of images displayed\r\n   */\r\n  public imagesHeight: { [srcKey: string]: number } = {};\r\n\r\n  /**\r\n   * Layer\r\n   */\r\n  @Input() layer: Layer;\r\n\r\n  constructor(\r\n    private capabilitiesService: CapabilitiesService,\r\n    private languageService: LanguageService) {}\r\n\r\n  /**\r\n   * On init, subscribe to the map's resolution and update the legend accordingly\r\n   */\r\n  ngOnInit() {\r\n    let lastlLegend = this.layer.legend;\r\n    this.styles = this.listStyles();\r\n    const sourceOptions = this.layer.options.source.options as any;\r\n    if (\r\n      sourceOptions &&\r\n      sourceOptions.params &&\r\n      sourceOptions.params.STYLES) {\r\n      // if a styles is provided into the layers wms params\r\n      this.currentStyle = this.styles.find(style => style.name === sourceOptions.params.STYLES).name;\r\n    } else if (!this.layer.legend) {\r\n      // if no legend is manually provided\r\n      if (this.styles && this.styles.length > 1) {\r\n        this.currentStyle = this.styles[0].name;\r\n      }\r\n    } else if (this.styles && this.styles.length > 1) {\r\n      this.currentStyle = lastlLegend[0].currentStyle;\r\n    }\r\n\r\n    lastlLegend = this.layer.dataSource.getLegend(this.currentStyle, this.scale);\r\n    if (this.updateLegendOnResolutionChange === true) {\r\n      const resolution$ = this.layer.map.viewController.resolution$;\r\n      this.resolution$$ = resolution$.subscribe((resolution: number) => this.onResolutionChange(resolution));\r\n    } else if (lastlLegend.length !== 0) {\r\n      this.legendItems$.next(lastlLegend);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On destroy, unsubscribe to the map,s resolution\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.resolution$$ !== undefined) {\r\n      this.resolution$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  toggleLegendItem(collapsed: boolean, item: Legend) {\r\n    item.collapsed = collapsed;\r\n  }\r\n\r\n  private transfertToggleLegendItem(newLegends: Legend[]): Legend[] {\r\n    const outLegends: Legend[] = newLegends;\r\n    const lastLegends = this.layer.legend;\r\n    for (let i = 0; i < lastLegends.length; i++) {\r\n      outLegends[i].collapsed = lastLegends[i].collapsed;\r\n   }\r\n    return outLegends;\r\n  }\r\n\r\n  computeItemTitle(layerLegend): Observable<string> {\r\n    const layerOptions = this.layer.dataSource.options as any;\r\n    if (layerOptions.type !== 'wms') {\r\n      return of(layerLegend.title);\r\n    }\r\n\r\n    const layers = layerOptions.params.LAYERS.split(',');\r\n    const localLayerOptions = JSON.parse(JSON.stringify(layerOptions)); // to avoid to alter the original options.\r\n    localLayerOptions.params.LAYERS = layers.find(layer => layer === layerLegend.title);\r\n    return this.capabilitiesService\r\n      .getWMSOptions(localLayerOptions)\r\n      .pipe(map(wmsDataSourceOptions => {\r\n        return wmsDataSourceOptions._layerOptionsFromSource.title;\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * On resolution change, compute the effective scale level and update the\r\n   * legend accordingly.\r\n   * @param resolution Map resolution\r\n   */\r\n  private onResolutionChange(resolution: number) {\r\n    this.scale = this.layer.map.viewController.getScale();\r\n    this.updateLegend();\r\n  }\r\n\r\n  /**\r\n   * Update the legend with scale level and style define\r\n   */\r\n  private updateLegend() {\r\n    let legendItems = this.layer.dataSource.getLegend(this.currentStyle, this.scale);\r\n    if (this.layer.legend && this.layer.legend.length > 1) { legendItems = this.transfertToggleLegendItem(legendItems); }\r\n    this.layer.legend = legendItems;\r\n\r\n    if (legendItems.length === 0 && this.legendItems$.value.length === 0) {\r\n      return;\r\n    }\r\n    this.legendItems$.next(legendItems);\r\n  }\r\n\r\n  private listStyles() {\r\n    const layerOptions = this.layer.options;\r\n    if (layerOptions && layerOptions.legendOptions) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.layer.legend.default');\r\n      const stylesAvailable =  [{ name: '', title } as ItemStyleOptions]\r\n        .concat(layerOptions.legendOptions.stylesAvailable.filter(sA => (\r\n          sA.name.normalize('NFD').replace(/[\\u0300-\\u036f]/gi, '') !== 'default' &&\r\n          sA.name.normalize('NFD').replace(/[\\u0300-\\u036f]/gi, '') !== 'defaut')));\r\n      stylesAvailable.map(s => s.title = s.title.charAt(0).toUpperCase() + s.title.slice(1).replace(/_/g, ' '));\r\n      return stylesAvailable;\r\n    }\r\n    return ;\r\n  }\r\n\r\n  onChangeStyle() {\r\n    this.updateLegend();\r\n    let STYLES = '';\r\n    this.layer.dataSource.ol.getParams().LAYERS.split(',').map(layer =>\r\n      STYLES += this.currentStyle + ','\r\n    );\r\n    STYLES = STYLES.slice(0, -1);\r\n    this.layer.dataSource.ol.updateParams({STYLES});\r\n  }\r\n\r\n  onLoadImage(id: string) {\r\n    let elemRef: HTMLImageElement;\r\n    if (this.renderedLegends.length === 1) {\r\n      elemRef = this.renderedLegends.first.nativeElement as HTMLImageElement;\r\n    } else {\r\n      elemRef = this.renderedLegends.find(renderedLegend => renderedLegend.nativeElement.id === id).nativeElement as HTMLImageElement;\r\n    }\r\n    this.imagesHeight[id] = elemRef.height;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\nimport { Layer, TooltipType } from '../shared/layers';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\n\r\n@Component({\r\n  selector: 'igo-layer-legend-item',\r\n  templateUrl: './layer-legend-item.component.html',\r\n  styleUrls: ['./layer-legend-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerLegendItemComponent implements OnInit, OnDestroy {\r\n\r\n  inResolutionRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  tooltipText: string;\r\n\r\n  state: ConnectionState;\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  constructor(private networkService: NetworkService) {}\r\n\r\n  ngOnInit() {\r\n    this.layer.legendCollapsed = true;\r\n\r\n    const resolution$ = this.layer.map.viewController.resolution$;\r\n    this.resolution$$ = resolution$.subscribe(() => {\r\n      this.onResolutionChange();\r\n    });\r\n    this.tooltipText = this.computeTooltip();\r\n\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      this.state = state;\r\n      this.onResolutionChange();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.resolution$$.unsubscribe();\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    const layerOptions = this.layer.options;\r\n    if (!layerOptions.tooltip) {\r\n      return this.layer.title;\r\n    }\r\n    const layerTooltip = layerOptions.tooltip;\r\n    const layerMetadata = (layerOptions as MetadataLayerOptions).metadata;\r\n    switch (layerOptions.tooltip.type) {\r\n      case TooltipType.TITLE:\r\n        return this.layer.title;\r\n      case TooltipType.ABSTRACT:\r\n        if (layerMetadata && layerMetadata.abstract) {\r\n          return layerMetadata.abstract;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      case TooltipType.CUSTOM:\r\n        if (layerTooltip && layerTooltip.text) {\r\n          return layerTooltip.text;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      default:\r\n        return this.layer.title;\r\n    }\r\n  }\r\n\r\n  private onResolutionChange() {\r\n    const inResolutionRange = this.layer.isInResolutionsRange;\r\n    this.inResolutionRange$.next(inResolutionRange);\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, OnInit, OnDestroy, EventEmitter, Output } from '@angular/core';\r\nimport { Layer } from '../shared';\r\nimport { BehaviorSubject, ReplaySubject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'igo-layer-legend-list',\r\n  templateUrl: './layer-legend-list.component.html',\r\n  styleUrls: ['./layer-legend-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerLegendListComponent implements OnInit, OnDestroy {\r\n  orderable = true;\r\n\r\n  hasVisibleOrInRangeLayers$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n  hasVisibleAndNotInRangeLayers$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n  layersInUi$: BehaviorSubject<Layer[]> = new BehaviorSubject([]);\r\n  layers$: BehaviorSubject<Layer[]> = new BehaviorSubject([]);\r\n  showAllLegend: boolean =  false;\r\n  public change$ = new ReplaySubject<void>(1);\r\n  private change$$: Subscription;\r\n  @Input()\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.next();\r\n  }\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  private _layers: Layer[];\r\n  @Input() excludeBaseLayers: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() allowShowAllLegends: boolean = false;\r\n\r\n  @Input() showAllLegendsValue: boolean = false;\r\n\r\n  @Output() allLegendsShown = new EventEmitter<boolean>(false);\r\n\r\n  constructor() { }\r\n  ngOnInit(): void {\r\n    this.change$$ = this.change$\r\n      .pipe(debounce(() => {\r\n        return this.layers.length === 0 ? EMPTY : timer(50);\r\n      }))\r\n      .subscribe(() => {\r\n        const layers = this.computeShownLayers(this.layers.slice(0));\r\n        this.layers$.next(layers);\r\n        this.hasVisibleOrInRangeLayers$.next(\r\n          this.layers.slice(0)\r\n            .filter(layer => layer.baseLayer !== true)\r\n            .filter(layer => layer.visible$.value && layer.isInResolutionsRange$.value).length > 0\r\n        );\r\n        this.hasVisibleAndNotInRangeLayers$.next(\r\n          this.layers.slice(0)\r\n            .filter(layer => layer.baseLayer !== true)\r\n            .filter(layer => layer.visible$.value && !layer.isInResolutionsRange$.value).length > 0\r\n        );\r\n\r\n        this.layersInUi$.next(\r\n          this.layers.slice(0).filter(layer => layer.showInLayerList !== false && (!this.excludeBaseLayers || !layer.baseLayer))\r\n        );\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change$$.unsubscribe();\r\n  }\r\n  private next() {\r\n    this.change$.next();\r\n  }\r\n  private computeShownLayers(layers: Layer[]) {\r\n    let shownLayers = layers.filter((layer: Layer) => layer.visible && layer.isInResolutionsRange);\r\n    if (this.showAllLegendsValue) {\r\n      shownLayers = layers;\r\n    }\r\n    return this.sortLayersByZindex(shownLayers);\r\n  }\r\n  private sortLayersByZindex(layers: Layer[]) {\r\n    return layers.sort((layer1, layer2) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  toggleShowAllLegends(toggle: boolean) {\r\n      this.showAllLegendsValue = toggle;\r\n      this.next();\r\n      this.allLegendsShown.emit(toggle);\r\n  }\r\n}\r\n","export enum LayerListControlsEnum {\r\n  always = 'always',\r\n  never = 'never',\r\n  default = 'default'\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef,\r\n  ContentChild,\r\n  OnInit,\r\n  OnDestroy,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { Layer } from '../shared';\r\nimport { LayerListControlsEnum } from './layer-list.enum';\r\nimport {\r\n  BehaviorSubject,\r\n  ReplaySubject,\r\n  Subscription,\r\n  EMPTY,\r\n  timer\r\n} from 'rxjs';\r\nimport { debounce } from 'rxjs/operators';\r\nimport {\r\n  MetadataOptions,\r\n  MetadataLayerOptions\r\n} from '../../metadata/shared/metadata.interface';\r\nimport { LayerListControlsOptions } from '../layer-list-tool/layer-list-tool.interface';\r\nimport { IgoMap } from '../../map/shared/map';\r\n\r\n// TODO: This class could use a clean up. Also, some methods could be moved ealsewhere\r\n@Component({\r\n  selector: 'igo-layer-list',\r\n  templateUrl: './layer-list.component.html',\r\n  styleUrls: ['./layer-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerListComponent implements OnInit, OnDestroy {\r\n  orderable = true;\r\n  thresholdToFilterAndSort = 5;\r\n\r\n  layers$: BehaviorSubject<Layer[]> = new BehaviorSubject([]);\r\n\r\n  change$ = new ReplaySubject<void>(1);\r\n\r\n  showToolbar$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  public layerTool: boolean;\r\n  activeLayer$: BehaviorSubject<Layer> = new BehaviorSubject(undefined);\r\n\r\n  layersChecked: Layer[] = [];\r\n  public selection;\r\n\r\n  private change$$: Subscription;\r\n\r\n  @ContentChild('igoLayerItemToolbar') templateLayerToolbar: TemplateRef<any>;\r\n\r\n  @Input() layersAreAllVisible: boolean = true;\r\n\r\n  @Input() ogcButton: boolean = true;\r\n\r\n  @Input() timeButton: boolean = true;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.next();\r\n  }\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  private _layers: Layer[];\r\n\r\n  set activeLayer(value: Layer) {\r\n    this._activeLayer = value;\r\n    this.activeLayer$.next(value);\r\n  }\r\n  get activeLayer(): Layer {\r\n    return this._activeLayer;\r\n  }\r\n  private _activeLayer: Layer;\r\n\r\n  @Input() floatLabel: FloatLabelType = 'auto';\r\n\r\n  @Input() layerFilterAndSortOptions: LayerListControlsOptions = {};\r\n\r\n  @Input() excludeBaseLayers: boolean = false;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendOfVisibleLayers: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  @Output() appliedFilterAndSort = new EventEmitter<LayerListControlsOptions>();\r\n\r\n  get keyword(): string {\r\n    return this._keyword;\r\n  }\r\n  set keyword(value: string) {\r\n    this._keyword = value;\r\n    this.next();\r\n  }\r\n  private _keyword = undefined;\r\n\r\n  get onlyVisible(): boolean {\r\n    return this._onlyVisible;\r\n  }\r\n  set onlyVisible(value: boolean) {\r\n    this._onlyVisible = value;\r\n    this.next();\r\n  }\r\n  private _onlyVisible = false;\r\n\r\n  get sortAlpha(): boolean {\r\n    return this._sortedAlpha;\r\n  }\r\n  set sortAlpha(value: boolean) {\r\n    this._sortedAlpha = value;\r\n    this.next();\r\n  }\r\n  private _sortedAlpha = false;\r\n\r\n  get opacity() {\r\n    return Math.round(this.activeLayer$.getValue().opacity * 100);\r\n  }\r\n  set opacity(opacity: number) {\r\n    this.activeLayer$.getValue().opacity = opacity / 100;\r\n  }\r\n\r\n  get badgeOpacity() {\r\n    if (this.opacity === 100) {\r\n      return;\r\n    }\r\n    return this.opacity;\r\n  }\r\n\r\n  get raiseDisabled(): boolean {\r\n    if (!this.orderable || this.activeLayer.baseLayer || this.getUpperLayer().id === this.activeLayer.id ||\r\n        this.isUpperBaselayer(this.activeLayer)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  get lowerDisabled(): boolean {\r\n    if (!this.orderable || this.activeLayer.baseLayer || this.getLowerLayer().id === this.activeLayer.id ||\r\n        this.isLowerBaselayer(this.activeLayer)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  get raiseDisabledSelection(): boolean {\r\n    if (this.layersChecked.length === 0 || !this.orderable || !this.raisableLayers(this.layersChecked) || this.selectAllCheck === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  get lowerDisabledSelection(): boolean {\r\n    if (this.layersChecked.length === 0 || !this.orderable || !this.lowerableLayers(this.layersChecked) || this.selectAllCheck === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  get checkOpacity() {\r\n    return this.layersCheckedOpacity() * 100;\r\n  }\r\n  set checkOpacity(opacity: number) {\r\n    for (const layer of this.layersChecked) {\r\n      layer.opacity = opacity / 100;\r\n    }\r\n  }\r\n\r\n  public toggleOpacity = false;\r\n\r\n  public selectAllCheck$ = new BehaviorSubject<boolean>(undefined);\r\n  selectAllCheck$$: Subscription;\r\n  public selectAllCheck;\r\n\r\n  constructor(\r\n    private elRef: ElementRef,\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.change$$ = this.change$\r\n      .pipe(\r\n        debounce(() => {\r\n          return this.layers.length === 0 ? EMPTY : timer(50);\r\n        })\r\n      )\r\n      .subscribe(() => {\r\n        this.showToolbar$.next(this.computeShowToolbar());\r\n        this.layers$.next(this.computeLayers(this.layers.slice(0)));\r\n        this.appliedFilterAndSort.emit({\r\n          keyword: this.keyword,\r\n          sortAlpha: this.sortAlpha,\r\n          onlyVisible: this.onlyVisible\r\n        });\r\n      });\r\n\r\n    this.selectAllCheck$$ = this.selectAllCheck$.subscribe((value) => {\r\n      this.selectAllCheck = value;\r\n    });\r\n\r\n    this.layers$.subscribe(() => {\r\n      if (this.layers) {\r\n        let checks = 0;\r\n        for (const layer of this.layers) {\r\n          if (layer.options.active) {\r\n            this.activeLayer = layer;\r\n            this.layerTool = true;\r\n          }\r\n          if (layer.options.check) {\r\n            checks += 1;\r\n          }\r\n        }\r\n        if (this.excludeBaseLayers) {\r\n          this.selectAllCheck = checks === this.layers.filter(lay => lay.baseLayer !== true && lay.showInLayerList).length ? true : false;\r\n        } else {\r\n          this.selectAllCheck = checks === this.layers.filter(lay => lay.showInLayerList).length ? true : false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change$$.unsubscribe();\r\n  }\r\n\r\n  clearKeyword() {\r\n    this.keyword = undefined;\r\n  }\r\n\r\n  getLowerLayer() {\r\n    return this.layers\r\n      .filter(l => !l.baseLayer)\r\n      .reduce(\r\n        (prev, current) => {\r\n          return prev.zIndex < current.zIndex ? prev : current;\r\n        },\r\n        { zIndex: undefined, id: undefined }\r\n      );\r\n  }\r\n\r\n  isLowerBaselayer(layer) {\r\n    const index = this.layers.findIndex(lay =>Â layer.id === lay.id);\r\n    if (this.layers && this.layers[index + 1] && this.layers[index + 1].baseLayer === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getUpperLayer() {\r\n    return this.layers\r\n      .filter(l => !l.baseLayer)\r\n      .reduce(\r\n        (prev, current) => {\r\n          return prev.zIndex > current.zIndex ? prev : current;\r\n        },\r\n        { zIndex: undefined, id: undefined }\r\n      );\r\n  }\r\n\r\n  isUpperBaselayer(layer) {\r\n    const index = this.layers.findIndex(lay =>Â layer.id === lay.id);\r\n    if (this.layers && this.layers[index - 1] && this.layers[index - 1].baseLayer === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /*\r\n   * For selection mode disabled attribute\r\n   */\r\n  raisableLayers(layers: Layer[]) {\r\n    let response = false;\r\n    let base = 0;\r\n    for (const layer of layers) {\r\n      const mapIndex = this.layers.findIndex(lay =>Â layer.id === lay.id);\r\n      const currentLayer = this.layers[mapIndex];\r\n      if (currentLayer.baseLayer) {\r\n        base += 1;\r\n      }\r\n\r\n      const previousLayer = this.layers[mapIndex - 1];\r\n      if (previousLayer && previousLayer.baseLayer !== true && !layers.find(lay => previousLayer.id === lay.id) &&\r\n            currentLayer.baseLayer !== true) {\r\n        response = true;\r\n      }\r\n    }\r\n\r\n    if ((this.layersChecked.length === 1 && this.layersChecked[0].baseLayer) || base === this.layersChecked.length) {\r\n      response = false;\r\n    }\r\n    return response;\r\n  }\r\n\r\n  /*\r\n   * When multiple layers is selected but some may be allow to move\r\n   */\r\n  raisableLayer(index: number) {\r\n    if (index < 1) {\r\n      return false;\r\n    }\r\n\r\n    if (this.layers[index - 1].options.check) {\r\n      return this.raisableLayer(index - 1);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  raiseLayers(layers: Layer[]) {\r\n    const layersToRaise = [];\r\n    for (const layer of layers) {\r\n      const index = this.layers.findIndex(lay => lay.id === layer.id);\r\n      if (this.raisableLayer(index)) {\r\n        layersToRaise.push(layer);\r\n      }\r\n    }\r\n    this.map.raiseLayers(layersToRaise);\r\n    setTimeout(() => {\r\n      const elements = this.computeElementRef();\r\n      if (!this.isScrolledIntoView(elements[0], elements[1].offsetParent)) {\r\n        elements[0].scrollTop = elements[1].offsetParent.offsetTop;\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /*\r\n   * For selection mode disabled attribute\r\n   */\r\n  lowerableLayers(layers: Layer[]) {\r\n    let response = false;\r\n    let base = 0;\r\n    for (const layer of layers) {\r\n      const mapIndex = this.layers.findIndex(lay =>Â layer.id === lay.id);\r\n      const currentLayer = this.layers[mapIndex];\r\n      if (currentLayer.baseLayer) {\r\n        base += 1;\r\n      }\r\n\r\n      const nextLayer = this.layers[mapIndex + 1];\r\n      if (nextLayer && nextLayer.baseLayer !== true && !layers.find(lay => nextLayer.id === lay.id)) {\r\n        response = true;\r\n      }\r\n    }\r\n\r\n    if ((this.layersChecked.length === 1 && this.layersChecked[0].baseLayer) || base === this.layersChecked.length) {\r\n      response = false;\r\n    }\r\n    return response;\r\n  }\r\n\r\n  /*\r\n   * When multiple layers is selected but some may be allow to move\r\n   */\r\n  lowerableLayer(index: number) {\r\n    if (index > this.layers.filter(lay => lay.baseLayer !== true).length - 2) {\r\n      return false;\r\n    }\r\n\r\n    if (this.layers[index + 1].options.check) {\r\n      return this.lowerableLayer(index + 1);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  lowerLayers(layers: Layer[]) {\r\n    const layersToLower = [];\r\n    for (const layer of layers) {\r\n      const index = this.layers.findIndex(lay => lay.id === layer.id);\r\n      if (this.lowerableLayer(index)) {\r\n        layersToLower.push(layer);\r\n      }\r\n    }\r\n    this.map.lowerLayers(layersToLower);\r\n    setTimeout(() => {\r\n      const elements = this.computeElementRef('lower');\r\n      if (!this.isScrolledIntoView(elements[0], elements[1].offsetParent)) {\r\n        elements[0].scrollTop = elements[1].offsetParent.offsetTop + elements[1].offsetParent.offsetHeight - elements[0].clientHeight;\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  private next() {\r\n    this.change$.next();\r\n  }\r\n\r\n  private computeLayers(layers: Layer[]): Layer[] {\r\n    let layersOut = this.filterLayers(layers);\r\n    if (this.sortAlpha) {\r\n      layersOut = this.sortLayersByTitle(layersOut);\r\n    } else {\r\n      layersOut = this.sortLayersByZindex(layersOut);\r\n    }\r\n    return layersOut;\r\n  }\r\n\r\n  onKeywordChange(term) {\r\n    this.keyword = term;\r\n  }\r\n\r\n  onAppliedFilterAndSortChange(appliedFilter: LayerListControlsOptions) {\r\n    this.keyword = appliedFilter.keyword;\r\n    this.onlyVisible = appliedFilter.onlyVisible;\r\n    this.sortAlpha = appliedFilter.sortAlpha;\r\n  }\r\n\r\n  private filterLayers(layers: Layer[]): Layer[] {\r\n    if (\r\n      this.layerFilterAndSortOptions.showToolbar === LayerListControlsEnum.never\r\n    ) {\r\n      return layers;\r\n    }\r\n    if (!this.keyword && !this.onlyVisible) {\r\n      return layers;\r\n    }\r\n\r\n    const keepLayerIds = layers.map((layer: Layer) => layer.id);\r\n\r\n    layers.forEach((layer: Layer) => {\r\n      const layerOptions = (layer.options as MetadataLayerOptions) || {};\r\n      const dataSourceOptions = layer.dataSource.options || {};\r\n      const metadata = layerOptions.metadata || ({} as MetadataOptions);\r\n      const keywords = metadata.keywordList || [];\r\n      const layerKeywords = keywords.map((kw: string) => {\r\n        return kw.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      });\r\n\r\n      if (this.keyword && layer.title) {\r\n        const localKeyword = this.keyword\r\n          .normalize('NFD')\r\n          .replace(/[\\u0300-\\u036f]/g, '');\r\n        const layerTitle = layer.title\r\n          .normalize('NFD')\r\n          .replace(/[\\u0300-\\u036f]/g, '');\r\n        const dataSourceType = dataSourceOptions.type || '';\r\n        const keywordRegex = new RegExp(localKeyword, 'gi');\r\n        const keywordInList =\r\n          layerKeywords.find((kw: string) => keywordRegex.test(kw)) !==\r\n          undefined;\r\n        if (\r\n          !keywordRegex.test(layerTitle) &&\r\n          !(this.keyword.toLowerCase() === dataSourceType.toLowerCase()) &&\r\n          !keywordInList\r\n        ) {\r\n          const index = keepLayerIds.indexOf(layer.id);\r\n          if (index > -1) {\r\n            keepLayerIds.splice(index, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.onlyVisible && layer.visible === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n    });\r\n\r\n    return layers.filter(\r\n      (layer: Layer) => keepLayerIds.indexOf(layer.id) !== -1\r\n    );\r\n  }\r\n\r\n  private sortLayersByZindex(layers: Layer[]) {\r\n    return layers.sort((layer1, layer2) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  private sortLayersByTitle(layers: Layer[]) {\r\n    return layers.sort((a, b) => {\r\n      if (this.normalize(a.title) < this.normalize(b.title)) {\r\n        return -1;\r\n      }\r\n      if (this.normalize(a.title) > this.normalize(b.title)) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  private normalize(str: string) {\r\n    return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase();\r\n  }\r\n\r\n  private computeShowToolbar(): boolean {\r\n    switch (this.layerFilterAndSortOptions.showToolbar) {\r\n      case LayerListControlsEnum.always:\r\n        return true;\r\n      case LayerListControlsEnum.never:\r\n        return false;\r\n      default:\r\n        if (\r\n          this.layers.length >= this.thresholdToFilterAndSort ||\r\n          this.keyword ||\r\n          this.onlyVisible\r\n        ) {\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  toggleLayerTool(layer) {\r\n    this.toggleOpacity = false;\r\n    if (this.layerTool && layer === this.activeLayer) {\r\n      this.layerTool = false;\r\n    } else {\r\n      this.layerTool = true;\r\n    }\r\n\r\n    for (const lay of this.layers) {\r\n      lay.options.active = false;\r\n    }\r\n    layer.options.active = true;\r\n    this.activeLayer = layer;\r\n    return;\r\n  }\r\n\r\n  removeLayers(layers?: Layer[]) {\r\n    if (layers && layers.length > 0) {\r\n      for (const layer of layers) {\r\n        layer.map.removeLayer(layer);\r\n      }\r\n      this.layersChecked = [];\r\n    } else if (!layers) {\r\n      this.activeLayer.map.removeLayer(this.activeLayer);\r\n      this.layerTool = false;\r\n    }\r\n    return;\r\n  }\r\n\r\n  layersCheck(event: {layer: Layer; check: boolean}) {\r\n    event.layer.options.check = event.check;\r\n    if (event.check === true) {\r\n      const eventMapIndex = this.layers.findIndex(layer =>Â event.layer.id === layer.id);\r\n      for (const layer of this.layersChecked) {\r\n        const mapIndex = this.layers.findIndex(lay =>Â layer.id === lay.id);\r\n        if (eventMapIndex < mapIndex) {\r\n          this.layersChecked.splice(this.layersChecked.findIndex(lay =>Â layer.id === lay.id), 0, event.layer);\r\n\r\n          if (this.excludeBaseLayers) {\r\n            if (this.layersChecked.length === this.layers.filter(lay => (lay.baseLayer !== true && lay.showInLayerList)).length) {\r\n              this.selectAllCheck = true;\r\n            } else {\r\n              this.selectAllCheck = false;\r\n            }\r\n          } else if (!this.excludeBaseLayers) {\r\n            if (this.layersChecked.length === this.layers.filter(lay => lay.showInLayerList).length) {\r\n              this.selectAllCheck = true;\r\n            } else {\r\n              this.selectAllCheck = false;\r\n            }\r\n          }\r\n          return;\r\n        }\r\n      }\r\n      this.layersChecked.push(event.layer);\r\n    } else {\r\n      const index = this.layersChecked.findIndex(layer => event.layer.id === layer.id);\r\n      this.layersChecked.splice(index, 1);\r\n    }\r\n\r\n    if (this.excludeBaseLayers) {\r\n      if (this.layersChecked.length === this.layers.filter(lay => (lay.baseLayer !== true && lay.showInLayerList)).length) {\r\n        this.selectAllCheck = true;\r\n      } else {\r\n        this.selectAllCheck = false;\r\n      }\r\n    } else if (!this.excludeBaseLayers) {\r\n      if (this.layersChecked.length === this.layers.filter(lay => lay.showInLayerList).length) {\r\n        this.selectAllCheck = true;\r\n      } else {\r\n        this.selectAllCheck = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleSelectionMode(value: boolean) {\r\n    this.selection = value;\r\n    this.activeLayer = undefined;\r\n    if (value === true) {\r\n      this.layerTool = false;\r\n      for (const layer of this.layers) {\r\n        if (layer.options.check) {\r\n          this.layersChecked.push(layer);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  layersCheckedOpacity(): any {\r\n    if (this.layersChecked.length > 1) {\r\n      return 1;\r\n    } else {\r\n      const opacity = [];\r\n      for (const layer of this.layersChecked) {\r\n        opacity.push(layer.opacity);\r\n      }\r\n      return opacity;\r\n    }\r\n  }\r\n\r\n  selectAll() {\r\n    if (!this.selectAllCheck) {\r\n      for (const layer of this.layers) {\r\n        if (this.excludeBaseLayers && layer.baseLayer !== true && layer.showInLayerList) {\r\n          layer.options.check = true;\r\n          this.layersChecked.push(layer);\r\n        } else if (!this.excludeBaseLayers && layer.showInLayerList) {\r\n          layer.options.check = true;\r\n          this.layersChecked.push(layer);\r\n        }\r\n      }\r\n      this.selectAllCheck$.next(true);\r\n    } else {\r\n      for (const layer of this.layers) {\r\n        layer.options.check = false;\r\n      }\r\n      this.layersChecked = [];\r\n      this.selectAllCheck$.next(false);\r\n    }\r\n  }\r\n\r\n  isScrolledIntoView(elemSource, elem) {\r\n    const docViewTop = elemSource.scrollTop;\r\n    const docViewBottom = docViewTop + elemSource.clientHeight;\r\n\r\n    const elemTop = elem.offsetTop;\r\n    const elemBottom = elemTop + elem.clientHeight;\r\n    return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));\r\n  }\r\n\r\n  computeElementRef(type?: string) {\r\n    const checkItems = this.elRef.nativeElement.getElementsByClassName('mat-checkbox-checked');\r\n    const checkItem = type === 'lower' ? this.elRef.nativeElement.getElementsByClassName('mat-checkbox-checked')[checkItems.length - 1] :\r\n      this.elRef.nativeElement.getElementsByClassName('mat-checkbox-checked')[0];\r\n    const igoList = this.elRef.nativeElement.getElementsByTagName('igo-list')[0];\r\n\r\n    return [igoList, checkItem];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IgoMap } from './map';\r\n\r\n/**\r\n * MapService\r\n *\r\n * This service tracks the IgoMap instance, if any.\r\n * Currently, only one map instance is supported\r\n * but support for multiple maps may be added in the future.\r\n * This will impact other services such as the OverlayService\r\n * because these maps won't be sharing overlayed features.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MapService {\r\n  private map: IgoMap;\r\n\r\n  constructor() {}\r\n\r\n  getMap(): IgoMap {\r\n    return this.map;\r\n  }\r\n\r\n  setMap(map: IgoMap) {\r\n    this.map = map;\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy, Optional } from '@angular/core';\r\nimport { Subscription, combineLatest } from 'rxjs';\r\n\r\nimport { RouteService } from '@igo2/core';\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { LayerListComponent } from './layer-list.component';\r\nimport { Layer } from '../shared/layers/layer';\r\nimport { map, debounceTime } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[igoLayerListBinding]'\r\n})\r\nexport class LayerListBindingDirective implements OnInit, OnDestroy {\r\n  private component: LayerListComponent;\r\n  private layersOrResolutionChange$$: Subscription;\r\n  layersVisibility$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: LayerListComponent,\r\n    private mapService: MapService,\r\n    @Optional() private route: RouteService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n    this.layersOrResolutionChange$$ = combineLatest([\r\n      this.mapService.getMap().layers$,\r\n      this.mapService.getMap().viewController.resolution$]\r\n    ).pipe(\r\n      debounceTime(10)\r\n    ).subscribe((bunch: [Layer[], number]) => {\r\n      const shownLayers = bunch[0].filter((layer: Layer) => {\r\n        return layer.showInLayerList === true;\r\n      });\r\n      this.component.layers = shownLayers;\r\n      this.setLayersVisibilityStatus(shownLayers, this.component.excludeBaseLayers);\r\n    });\r\n  }\r\n\r\n  private setLayersVisibilityStatus(layers: Layer[], excludeBaseLayers: boolean) {\r\n    if (this.layersVisibility$$ !== undefined) {\r\n      this.layersVisibility$$.unsubscribe();\r\n      this.layersVisibility$$ = undefined;\r\n    }\r\n    this.layersVisibility$$ = combineLatest(layers\r\n      .filter(layer => layer.baseLayer !== excludeBaseLayers )\r\n      .map((layer: Layer) => layer.visible$))\r\n      .pipe(map((visibles: boolean[]) => visibles.every(Boolean)))\r\n      .subscribe((allLayersAreVisible: boolean) =>\r\n        this.component.layersAreAllVisible = allLayersAreVisible);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layersOrResolutionChange$$.unsubscribe();\r\n    if (this.layersVisibility$$ !== undefined) {\r\n      this.layersVisibility$$.unsubscribe();\r\n      this.layersVisibility$$ = undefined;\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  EventEmitter,\r\n  Output,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport {\r\n  BehaviorSubject,\r\n  Subscription,\r\n} from 'rxjs';\r\nimport { LayerListControlsOptions } from './layer-list-tool.interface';\r\n\r\n@Component({\r\n  selector: 'igo-layer-list-tool',\r\n  templateUrl: './layer-list-tool.component.html',\r\n  styleUrls: ['./layer-list-tool.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerListToolComponent implements OnInit, OnDestroy {\r\n\r\n  public onlyVisible$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  public sortAlpha$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  public term$: BehaviorSubject<string> = new BehaviorSubject(undefined);\r\n  onlyVisible$$: Subscription;\r\n  sortAlpha$$: Subscription;\r\n  term$$: Subscription;\r\n\r\n  @Input() layersAreAllVisible: boolean = true;\r\n\r\n  @Input() floatLabel: FloatLabelType = 'auto';\r\n\r\n  @Input()\r\n  set onlyVisible(value: boolean) {\r\n    this.onlyVisible$.next(value);\r\n  }\r\n  get onlyVisible(): boolean {\r\n    return this.onlyVisible$.value;\r\n  }\r\n\r\n  @Input()\r\n  set sortAlpha(value: boolean) {\r\n    this.sortAlpha$.next(value);\r\n  }\r\n  get sortAlpha(): boolean {\r\n    return this.sortAlpha$.value;\r\n  }\r\n\r\n  @Input()\r\n  set term(value: string) {\r\n    this.term$.next(value);\r\n  }\r\n  get term(): string {\r\n    return this.term$.value;\r\n  }\r\n\r\n  public selectionMode = false;\r\n\r\n  @Output() appliedFilterAndSort = new EventEmitter<LayerListControlsOptions>();\r\n  @Output() selection = new EventEmitter<boolean>();\r\n\r\n  ngOnInit(): void {\r\n    this.term$$ = this.term$.subscribe(keyword => {\r\n      this.appliedFilterAndSort.emit({\r\n        keyword,\r\n        onlyVisible: this.onlyVisible,\r\n        sortAlpha: this.sortAlpha});\r\n    });\r\n\r\n    this.onlyVisible$$ = this.onlyVisible$.subscribe(onlyVisible => {\r\n      this.appliedFilterAndSort.emit({\r\n        keyword: this.term,\r\n        onlyVisible,\r\n        sortAlpha: this.sortAlpha});\r\n    });\r\n    this.sortAlpha$$ = this.sortAlpha$.subscribe(sortAlpha => {\r\n      this.appliedFilterAndSort.emit({\r\n        keyword: this.term,\r\n        onlyVisible: this.onlyVisible,\r\n        sortAlpha});\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.onlyVisible$$.unsubscribe();\r\n    this.sortAlpha$$.unsubscribe();\r\n    this.term$$.unsubscribe();\r\n  }\r\n\r\n  clearTerm() {\r\n    this.term = undefined;\r\n  }\r\n  toggleSortAlpha() {\r\n    this.sortAlpha = !this.sortAlpha;\r\n  }\r\n\r\n  toggleOnlyVisible() {\r\n    this.onlyVisible = !this.onlyVisible;\r\n  }\r\n\r\n  toggleSelectionMode() {\r\n    this.selectionMode = !this.selectionMode;\r\n    this.selection.emit(this.selectionMode);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerListToolService {\r\n  public keyword: string;\r\n  public sortAlpha = false;\r\n  public onlyVisible = false;\r\n  public onlyInRange = false;\r\n  public keywordInitialized = false;\r\n  public sortedAlphaInitialized = false;\r\n  public onlyVisibleInitialized = false;\r\n  public onlyInRangeInitialized = false;\r\n\r\n  constructor() {}\r\n\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\n\r\nimport { Layer, VectorLayer } from '../shared/layers';\r\nimport { VectorLayerOptions } from '../shared/layers/vector-layer.interface';\r\n\r\n@Component({\r\n  selector: 'igo-track-feature-button',\r\n  templateUrl: './track-feature-button.component.html',\r\n  styleUrls: ['./track-feature-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TrackFeatureButtonComponent implements OnInit {\r\n\r\n  @Input() layer: VectorLayer;\r\n\r\n  @Input() trackFeature = false;\r\n\r\n  get options(): VectorLayerOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.options;\r\n  }\r\n\r\n  public color: string = 'primary';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.color = this.trackFeature ? 'primary' : 'basic';\r\n  }\r\n\r\n  toggleTrackFeature() {\r\n    if (this.trackFeature) {\r\n      this.layer.disableTrackFeature(this.layer.options.trackFeature);\r\n      this.color = 'basic';\r\n    } else {\r\n      this.layer.enableTrackFeature(this.layer.options.trackFeature);\r\n      this.color = 'primary';\r\n    }\r\n    this.trackFeature = !this.trackFeature;\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\n\r\nimport { EntityStoreStrategy } from '@igo2/common';\r\n\r\nimport { FeatureMotion } from '../feature.enums';\r\nimport { Feature, FeatureStoreLoadingStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\n\r\n/**\r\n * This strategy loads a store's features into it's layer counterpart.\r\n * The store -> layer binding is a one-way binding. That means any entity\r\n * added to the store will be added to the layer but the opposite is false.\r\n *\r\n * Important: This strategy observes filtered entities, not raw entities. This\r\n * is not configurable yet.\r\n */\r\nexport class FeatureStoreLoadingStrategy extends EntityStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's features\r\n   */\r\n  private stores$$ = new Map<FeatureStore, Subscription>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.active === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.active === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for entities changes in a store.\r\n   * Important: Never observe a store's sorted entities. It makes no sense\r\n   * to display sorted entities (instead of unsorted) on a layer and it\r\n   * would potentially result in a lot of useless computation.\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    const subscription = store.view.all$()\r\n      .subscribe((features: Feature[]) => this.onFeaturesChange(features, store));\r\n    this.stores$$.set(store, subscription);\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in a store.\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const subscription = this.stores$$.get(store);\r\n    if (subscription !== undefined) {\r\n      subscription.unsubscribe();\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, Subscription]) => {\r\n      entries[1].unsubscribe();\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features into a layer or clear the layer if the array of features is empty.\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onFeaturesChange(features: Feature[], store: FeatureStore) {\r\n    if (features.length === 0) {\r\n      store.clearLayer();\r\n    } else {\r\n      store.setLayerFeatures(\r\n        features,\r\n        this.selectMotion(store),\r\n        this.options.viewScale,\r\n        this.options.areaRatio,\r\n        this.options.getFeatureId\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the best motion\r\n   * @param store A FeatureStore to apply the motion\r\n   * @returns The motion selected\r\n   */\r\n  private selectMotion(store: FeatureStore) {\r\n    if (this.options.motion !== undefined) { return this.options.motion; }\r\n\r\n    if (store.pristine === true) {\r\n      // If features have just been loaded into the store, move/zoom on them\r\n      return FeatureMotion.Default;\r\n    } else if (store.count > store.view.count) {\r\n      // If features have been filtered, move/zoom on the remaining ones\r\n      return FeatureMotion.Default;\r\n    } else {\r\n      // On insert, update or delete, do nothing\r\n      return FeatureMotion.None;\r\n    }\r\n  }\r\n}\r\n","import { unByKey } from 'ol/Observable';\r\nimport { OlEvent } from 'ol/events/Event';\r\n\r\nimport { EntityStoreStrategy } from '@igo2/common';\r\n\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreLoadingLayerStrategyOptions } from '../feature.interfaces';\r\n\r\n/**\r\n * This strategy loads a layer's features into it's store counterpart.\r\n * The layer -> store binding is a one-way binding. That means any OL feature\r\n * added to the layer will be added to the store but the opposite is false.\r\n *\r\n * Important: In it's current state, this strategy is to meant to be combined\r\n * with a standard Loading strategy and it would probably cause recursion issues.\r\n */\r\nexport class FeatureStoreLoadingLayerStrategy extends EntityStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's OL source changes\r\n   */\r\n  private stores$$ = new Map<FeatureStore, string>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingLayerStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.active === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.active === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for a store's  OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    this.onSourceChanges(store);\r\n    const olSource = store.layer.ol.getSource();\r\n    olSource.on('change', (event: OlEvent) => {\r\n      this.onSourceChanges(store);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop watching for a store's OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const key = this.stores$$.get(store);\r\n    if (key !== undefined) {\r\n      unByKey(key);\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for OL source changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, string]) => {\r\n      unByKey(entries[1]);\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features from an OL source into a  store or clear the store if the source is empty\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onSourceChanges(store: FeatureStore) {\r\n    const olFeatures = store.layer.ol.getSource().getFeatures();\r\n    if (olFeatures.length === 0) {\r\n      store.clear();\r\n    } else {\r\n      store.setStoreOlFeatures(olFeatures);\r\n    }\r\n  }\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  getEntityId,\r\n  EntityKey,\r\n  EntityStore\r\n} from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { FeatureMotion } from './feature.enums';\r\nimport { Feature, FeatureStoreOptions } from './feature.interfaces';\r\nimport { computeOlFeaturesDiff, featureFromOl, featureToOl, moveToOlFeatures } from './feature.utils';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * features and the map layer to display them on. Synchronization\r\n * between the store and the layer is handled by strategies.\r\n */\r\nexport class FeatureStore<T extends Feature = Feature> extends EntityStore<T> {\r\n\r\n  /**\r\n   * Vector layer to display the features on\r\n   */\r\n  layer: VectorLayer;\r\n\r\n  /**\r\n   * The map the layer is bound to\r\n   */\r\n  readonly map: IgoMap;\r\n\r\n  /**\r\n   * The layer's data source\r\n   */\r\n  get source(): FeatureDataSource {\r\n    return this.layer ? this.layer.dataSource as FeatureDataSource : undefined;\r\n  }\r\n\r\n  constructor(entities: T[], options: FeatureStoreOptions) {\r\n    super(entities, options);\r\n    this.map = options.map;\r\n  }\r\n\r\n  /**\r\n   * Bind this store to a vector layer\r\n   * @param layer Vector layer\r\n   * @returns Feature store\r\n   */\r\n  bindLayer(layer: VectorLayer): FeatureStore {\r\n    this.layer = layer;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible. Strategies\r\n   * make extensive use of that method.\r\n   * @param features Features\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  setLayerFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number,\r\n    getId?: (Feature) => EntityKey\r\n  ) {\r\n    getId = getId ? getId : getEntityId;\r\n    this.checkLayer();\r\n\r\n    const olFeatures = features\r\n      .map((feature: Feature) => featureToOl(feature, this.map.projection, getId));\r\n    this.setLayerOlFeatures(olFeatures, motion, viewScale, areaRatio);\r\n  }\r\n\r\n  /**\r\n   * Set the store's features from an array of OL features.\r\n   * @param olFeatures Ol features\r\n   */\r\n  setStoreOlFeatures(olFeatures: OlFeature[]) {\r\n    this.checkLayer();\r\n\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n      return featureFromOl(olFeature, this.layer.map.projection);\r\n    });\r\n    this.load(features as T[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the layer\r\n   */\r\n  clearLayer() {\r\n    this.checkLayer();\r\n    this.source.ol.clear();\r\n  }\r\n\r\n  /**\r\n   * Check wether a layer is bound or not and throw an error if not.\r\n   */\r\n  private checkLayer() {\r\n    if (this.layer === undefined) {\r\n      throw new Error('This FeatureStore is not bound to a layer.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible.\r\n   * @param features Openlayers feature objects\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  private setLayerOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number\r\n  ) {\r\n    const olSource = this.layer.ol.getSource();\r\n    const diff = computeOlFeaturesDiff(olSource.getFeatures(), olFeatures);\r\n    if (diff.remove.length > 0) {\r\n      this.removeOlFeaturesFromLayer(diff.remove);\r\n    }\r\n\r\n    if (diff.add.length > 0) {\r\n      this.addOlFeaturesToLayer(diff.add);\r\n    }\r\n\r\n    if (diff.add.length > 0) {\r\n      // If features are added, do a motion toward the newly added features\r\n      moveToOlFeatures(this.map, diff.add, motion, viewScale, areaRatio);\r\n    } else if (diff.remove.length > 0) {\r\n      // Else, do a motion toward all the features\r\n      moveToOlFeatures(this.map, olFeatures, motion, viewScale, areaRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add features to the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private addOlFeaturesToLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n    });\r\n    this.source.ol.addFeatures(olFeatures);\r\n  }\r\n\r\n  /**\r\n   * Remove features from the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private removeOlFeaturesFromLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      this.source.ol.removeFeature(olFeature);\r\n    });\r\n  }\r\n\r\n}\r\n","import OlFeature from 'ol/Feature';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { DragBoxEvent as OlDragBoxEvent } from 'ol/interaction/DragBox';\r\nimport { ListenerFunction } from 'ol/events';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subscription, combineLatest } from 'rxjs';\r\nimport { map, debounceTime, skip } from 'rxjs/operators';\r\n\r\nimport { EntityKey, EntityRecord, EntityStoreStrategy } from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../../datasource';\r\nimport { VectorLayer } from '../../../layer';\r\nimport { IgoMap, ctrlKeyDown } from '../../../map';\r\n\r\nimport { Feature, FeatureStoreSelectionStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureMotion } from '../feature.enums';\r\n\r\nclass OlDragSelectInteraction extends OlDragBoxInteraction {\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n}\r\n\r\n/**\r\n * This strategy synchronizes a store and a layer selected entities.\r\n * The store <-> layer binding is a two-way binding.\r\n *\r\n * In many cases, a single strategy bound to multiple stores\r\n * will yield better results that multiple strategies with each their\r\n * own store. In the latter scenario, a click on overlapping features\r\n * would trigger the strategy of each layer and they would cancel\r\n * each other as well as move the map view around needlessly.\r\n */\r\nexport class FeatureStoreSelectionStrategy extends EntityStoreStrategy {\r\n\r\n  /**\r\n   * Listener to the map click event that allows selecting a feature\r\n   * by clicking on the map\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  private olDragSelectInteraction: OlDragSelectInteraction;\r\n\r\n  private olDragSelectInteractionEndKey: string;\r\n\r\n  /**\r\n   * Subscription to all stores selected entities\r\n   */\r\n  private stores$$: Subscription;\r\n\r\n  /**\r\n   * The map the layers belong to\r\n   */\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  /**\r\n   * A feature store that'll contain the selected features. It has it's own\r\n   * layer, shared by all the stores this staretgy is bound to.\r\n   */\r\n  get overlayStore(): FeatureStore { return this._overlayStore; }\r\n  private _overlayStore: FeatureStore;\r\n\r\n  constructor(protected options: FeatureStoreSelectionStrategyOptions) {\r\n    super(options);\r\n    this._overlayStore = this.createOverlayStore();\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.active === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.active === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all entities, from all stores\r\n   */\r\n  unselectAll() {\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      store.state.updateAll({selected: false});\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.overlayStore.clear();\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer, setup the map click lsitener and\r\n   * start watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.addOverlayLayer();\r\n    this.listenToMapClick();\r\n    if (this.options.dragBox === true) {\r\n      this.addDragBoxInteraction();\r\n    }\r\n    this.watchAll();\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer, remove the map click lsitener and\r\n   * stop watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unlistenToMapClick();\r\n    this.removeDragBoxInteraction();\r\n    this.unwatchAll();\r\n    this.removeOverlayLayer();\r\n  }\r\n\r\n  /**\r\n   * Create a single observable of all the stores. With a single observable,\r\n   * features can be added all at once to the overlay layer and a single\r\n   * motion can be performed. Multiple observable would have\r\n   * a cancelling effect on each other.\r\n   */\r\n  private watchAll() {\r\n    this.unwatchAll();\r\n\r\n    const stores$ = this.stores.map((store: FeatureStore) => {\r\n      return store.stateView.manyBy$((record: EntityRecord<Feature>) => {\r\n        return record.state.selected === true;\r\n      }).pipe(\r\n        map((records: EntityRecord<Feature>[]) => records.map(record => record.entity))\r\n      );\r\n    });\r\n    this.stores$$ = combineLatest(stores$)\r\n      .pipe(\r\n        debounceTime(5),\r\n        skip(1), // Skip intial selection\r\n        map((features: Array<Feature[]>) => features.reduce((a, b) => a.concat(b)))\r\n      ).subscribe((features: Feature[]) => this.onSelectFromStore(features));\r\n  }\r\n\r\n  /**\r\n   * Stop watching for selection in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    if (this.stores$$ !== undefined) {\r\n      this.stores$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a 'singleclick' listener to the map that'll allow selecting\r\n   * features by clicking on the map. The selection will be performed\r\n   * only on the layers bound to this strategy.\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on('singleclick', (event: OlMapBrowserPointerEvent) => {\r\n      this.onMapClick(event);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the map click listener\r\n   */\r\n  private unlistenToMapClick() {\r\n    if (this.mapClickListener !== undefined) {\r\n      this.map.ol.un(\r\n        this.mapClickListener.type,\r\n        this.mapClickListener.listener\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On map click, select feature at pixel\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onMapClick(event: OlMapBrowserPointerEvent) {\r\n    const exclusive = !ctrlKeyDown(event);\r\n    const reverse = !exclusive;\r\n    const olFeatures = event.map.getFeaturesAtPixel(event.pixel, {\r\n      hitTolerance: this.options.hitTolerance || 0,\r\n      layerFilter: (olLayer) => {\r\n        const storeOlLayer = this.stores.find((store: FeatureStore) => {\r\n          return store.layer.ol === olLayer;\r\n        });\r\n        return storeOlLayer !== undefined;\r\n      }\r\n    });\r\n    this.onSelectFromMap(olFeatures, exclusive, reverse);\r\n  }\r\n\r\n  /**\r\n   * Add a drag box interaction and, on drag box end, select features\r\n   */\r\n  private addDragBoxInteraction() {\r\n    let olDragSelectInteraction;\r\n    const olInteractions = this.map.ol.getInteractions().getArray();\r\n\r\n    // There can only be one dragbox interaction, so find the current one, if any\r\n    // Don't keep a reference to the current dragbox because we don't want\r\n    // to remove it when this startegy is deactivated\r\n    for (const olInteraction of olInteractions) {\r\n      if (olInteraction instanceof OlDragSelectInteraction) {\r\n        olDragSelectInteraction = olInteraction;\r\n        break;\r\n      }\r\n    }\r\n    // If no drag box interaction is found, create a new one and add it to the map\r\n    if (olDragSelectInteraction === undefined) {\r\n      olDragSelectInteraction = new OlDragSelectInteraction({\r\n        condition: ctrlKeyDown\r\n      });\r\n      this.map.ol.addInteraction(olDragSelectInteraction);\r\n      this.olDragSelectInteraction = olDragSelectInteraction;\r\n    }\r\n\r\n    this.olDragSelectInteractionEndKey = olDragSelectInteraction.on(\r\n      'boxend',\r\n      (event: OlMapBrowserPointerEvent) => this.onDragBoxEnd(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove drag box interaction\r\n   */\r\n  private removeDragBoxInteraction() {\r\n    if (this.olDragSelectInteractionEndKey !== undefined) {\r\n      unByKey(this.olDragSelectInteractionEndKey);\r\n    }\r\n    if (this.olDragSelectInteraction !== undefined) {\r\n      this.map.ol.removeInteraction(this.olDragSelectInteraction);\r\n    }\r\n    this.olDragSelectInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * On dragbox end, select features in drag box\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onDragBoxEnd(event: OlDragBoxEvent) {\r\n    const exclusive = !ctrlKeyDown(event.mapBrowserEvent);\r\n    const extent = event.target.getGeometry().getExtent();\r\n    const olFeatures = this.stores.reduce((acc: OlFeature[], store: FeatureStore) => {\r\n      const olSource = store.layer.ol.getSource();\r\n      acc.push(...olSource.getFeaturesInExtent(extent));\r\n      return acc;\r\n    }, []);\r\n    this.onSelectFromMap(olFeatures, exclusive, false);\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the store, add\r\n   * them to this startegy's overlay layer (select on map)\r\n   * @param features Store features\r\n   */\r\n  private onSelectFromStore(features: Feature[]) {\r\n    const motion = this.options ? this.options.motion : undefined;\r\n    const olOverlayFeatures = this.overlayStore.layer.ol.getSource().getFeatures();\r\n    const overlayFeaturesKeys = olOverlayFeatures.map((olFeature: OlFeature) => olFeature.getId());\r\n    const featuresKeys = features.map(this.overlayStore.getKey);\r\n\r\n    let doMotion;\r\n    if (features.length === 0) {\r\n      doMotion = false;\r\n    } else {\r\n      doMotion = overlayFeaturesKeys.length !== featuresKeys.length ||\r\n        !overlayFeaturesKeys.every((key: EntityKey) => featuresKeys.indexOf(key) >= 0);\r\n    }\r\n\r\n    this.overlayStore.setLayerFeatures(\r\n      features,\r\n      doMotion ? motion : FeatureMotion.None,\r\n      this.options.viewScale,\r\n      this.options.areaRatio,\r\n      this.options.getFeatureId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the map, also select them\r\n   * in their store.\r\n   * @param olFeatures OL feature objects\r\n   */\r\n  private onSelectFromMap(olFeatures: OlFeature[], exclusive: boolean, reverse: boolean) {\r\n    const groupedFeatures = this.groupFeaturesByStore(olFeatures);\r\n\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      const features = groupedFeatures.get(store);\r\n      if (features === undefined && exclusive === true) {\r\n        this.unselectAllFeaturesFromStore(store);\r\n      } else if (features === undefined && exclusive === false) {\r\n        // Do nothing\r\n      } else {\r\n        this.selectFeaturesFromStore(store, features, exclusive, reverse);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select features in store\r\n   * @param store: Feature store\r\n   * @param features Features\r\n   */\r\n  private selectFeaturesFromStore(store: FeatureStore, features: Feature[], exclusive: boolean, reverse: boolean) {\r\n    if (reverse === true) {\r\n      store.state.reverseMany(features, ['selected']);\r\n    } else {\r\n      store.state.updateMany(features, {selected: true}, exclusive);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all features from store\r\n   * @param store: Feature store\r\n   */\r\n  private unselectAllFeaturesFromStore(store: FeatureStore) {\r\n    store.state.updateAll({selected: false});\r\n  }\r\n\r\n  /**\r\n   * This method returns a store -> features mapping from a list\r\n   * of OL selected features. OL features keep a reference to the store\r\n   * they are from.\r\n   * @param olFeatures: OL feature objects\r\n   * @returns Store -> features mapping\r\n   */\r\n  private groupFeaturesByStore(olFeatures: OlFeature[]): Map<FeatureStore, Feature[]> {\r\n    const groupedFeatures = new Map<FeatureStore, Feature[]>();\r\n    if (olFeatures === null || olFeatures === undefined) {\r\n      return groupedFeatures;\r\n    }\r\n\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      const store = olFeature.get('_featureStore');\r\n      if (store === undefined) { return; }\r\n\r\n      let features = groupedFeatures.get(store);\r\n      if (features === undefined) {\r\n        features = [];\r\n        groupedFeatures.set(store, features);\r\n      }\r\n\r\n      const feature = store.get(olFeature.getId());\r\n      if (feature !== undefined) {\r\n        features.push(feature);\r\n      }\r\n    });\r\n\r\n    return groupedFeatures;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay store\r\n   */\r\n  private createOverlayStore(): FeatureStore {\r\n    const overlayLayer = this.options.layer\r\n      ? this.options.layer\r\n      : this.createOverlayLayer();\r\n    return new FeatureStore([], {map: this.map}).bindLayer(overlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay layer\r\n   */\r\n  private createOverlayLayer(): VectorLayer {\r\n    return new VectorLayer({\r\n      zIndex: 300,\r\n      source: new FeatureDataSource(),\r\n      style: undefined,\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay store's layer to the map to display the selected\r\n   * features.\r\n   */\r\n  private addOverlayLayer() {\r\n    if (this.overlayStore.layer.map === undefined) {\r\n      this.map.addLayer(this.overlayStore.layer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer from the map\r\n   */\r\n  private removeOverlayLayer() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.map.removeLayer(this.overlayStore.layer);\r\n  }\r\n}\r\n","import * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlGeometryLayout from 'ol/geom/GeometryLayout';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlPoint from 'ol/geom/Point';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlRenderFeature from 'ol/render/Feature';\r\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport OlLayer from 'ol/layer/Layer';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport {\r\n  EntityKey,\r\n  getEntityId,\r\n  getEntityTitle,\r\n  getEntityRevision,\r\n  getEntityIcon,\r\n  getEntityProperty\r\n} from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { VectorLayer } from '../../layer';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { FEATURE, FeatureMotion } from './feature.enums';\r\nimport { Feature } from './feature.interfaces';\r\nimport { FeatureStore } from './store';\r\nimport {\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from './strategies';\r\n\r\n/**\r\n * Create an Openlayers feature object out of a feature definition.\r\n * The output object has a reference to the feature id.\r\n * @param feature Feature definition\r\n * @param projectionOut Feature object projection\r\n * @returns OpenLayers feature object\r\n */\r\nexport function featureToOl(\r\n  feature: Feature,\r\n  projectionOut: string,\r\n  getId?: (Feature) => EntityKey\r\n): OlFeature {\r\n  getId = getId ? getId : getEntityId;\r\n\r\n  const olFormat = new OlFormatGeoJSON();\r\n  const olFeature = olFormat.readFeature(feature, {\r\n    dataProjection: feature.projection,\r\n    featureProjection: projectionOut\r\n  });\r\n\r\n  olFeature.setId(getId(feature));\r\n\r\n  const title = getEntityTitle(feature);\r\n  if (title !== undefined) {\r\n    olFeature.set('_title', title, true);\r\n  }\r\n\r\n  if (feature.extent !== undefined) {\r\n    olFeature.set('_extent', feature.extent, true);\r\n  }\r\n\r\n  if (feature.projection !== undefined) {\r\n    olFeature.set('_projection', feature.projection, true);\r\n  }\r\n\r\n  const mapTitle = getEntityProperty(feature, 'meta.mapTitle');\r\n  if (mapTitle !== undefined) {\r\n    olFeature.set('_mapTitle', mapTitle, true);\r\n  }\r\n\r\n  olFeature.set('_entityRevision', getEntityRevision(feature), true);\r\n\r\n  const icon = getEntityIcon(feature);\r\n  if (icon !== undefined) {\r\n    olFeature.set('_icon', icon, true);\r\n  }\r\n\r\n  if (feature.meta && feature.meta.style) {\r\n    olFeature.set('_style', feature.meta.style, true);\r\n  }\r\n\r\n  if (feature.sourceId) {\r\n    olFeature.set('_sourceId', feature.sourceId, true);\r\n  }\r\n\r\n  return olFeature;\r\n}\r\n\r\nexport function renderFeatureFromOl(\r\n  olRenderFeature: OlRenderFeature,\r\n  projectionIn: string,\r\n  olLayer?: OlLayer,\r\n  projectionOut = 'EPSG:4326'\r\n  ): Feature {\r\n    let geom;\r\n    let title;\r\n    let exclude;\r\n    let excludeOffline;\r\n\r\n    if (olLayer) {\r\n      title = olLayer.get('title');\r\n      if (olLayer.get('sourceOptions')) {\r\n        exclude = olLayer.get('sourceOptions').excludeAttribute;\r\n        excludeOffline = olLayer.get('sourceOptions').excludeAttributeOffline;\r\n      }\r\n    } else {\r\n      title = olRenderFeature.get('_title');\r\n    }\r\n\r\n    const olFormat = new OlFormatGeoJSON();\r\n    const properties = olRenderFeature.getProperties();\r\n    const geometryType = olRenderFeature.getType();\r\n\r\n    if (geometryType === 'Polygon') {\r\n      const ends = olRenderFeature.ends_;\r\n      geom = new OlPolygon(olRenderFeature.flatCoordinates_, OlGeometryLayout.XY, ends);\r\n    } else if (geometryType === 'Point') {\r\n      geom = new OlPoint(olRenderFeature.flatCoordinates_, OlGeometryLayout.XY);\r\n    } else if (geometryType === 'LineString') {\r\n      geom = new OlLineString(olRenderFeature.flatCoordinates_, OlGeometryLayout.XY);\r\n    }\r\n\r\n    const geometry = olFormat.writeGeometryObject(geom, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn\r\n    });\r\n\r\n    const id = olRenderFeature.getId() ? olRenderFeature.getId() : uuid();\r\n    const mapTitle = olRenderFeature.get('_mapTitle');\r\n\r\n    return {\r\n      type: FEATURE,\r\n      projection: projectionOut,\r\n      extent: olRenderFeature.getExtent(),\r\n      meta: {\r\n        id,\r\n        title: title ? title : mapTitle ? mapTitle : id,\r\n        mapTitle,\r\n        excludeAttribute: exclude,\r\n        excludeAttributeOffline: excludeOffline\r\n      },\r\n      properties,\r\n      geometry,\r\n      ol: olRenderFeature\r\n    };\r\n  }\r\n/**\r\n * Create a feature object out of an OL feature\r\n * The output object has a reference to the feature id.\r\n * @param olFeature OL Feature\r\n * @param projectionIn OL feature projection\r\n * @param olLayer OL Layer\r\n * @param projectionOut Feature projection\r\n * @returns Feature\r\n */\r\nexport function featureFromOl(\r\n  olFeature: OlFeature,\r\n  projectionIn: string,\r\n  olLayer?: OlLayer,\r\n  projectionOut = 'EPSG:4326'\r\n): Feature {\r\n  let title;\r\n  let exclude;\r\n  let excludeOffline;\r\n  const olFormat = new OlFormatGeoJSON();\r\n\r\n  const keys = olFeature.getKeys().filter((key: string) => {\r\n    return !key.startsWith('_') && key !== 'geometry';\r\n  });\r\n  const properties = keys.reduce((acc: object, key: string) => {\r\n    acc[key] = olFeature.get(key);\r\n    return acc;\r\n  }, {});\r\n\r\n  const geometry = olFormat.writeGeometryObject(olFeature.getGeometry(), {\r\n    dataProjection: projectionOut,\r\n    featureProjection: projectionIn\r\n  });\r\n\r\n  if (olLayer) {\r\n    title = olLayer.get('title');\r\n    if (olLayer.get('sourceOptions')) {\r\n      exclude = olLayer.get('sourceOptions').excludeAttribute;\r\n      excludeOffline = olLayer.get('sourceOptions').excludeAttributeOffline;\r\n    }\r\n  } else {\r\n    title = olFeature.get('_title');\r\n  }\r\n  const mapTitle = olFeature.get('_mapTitle');\r\n  const id = olFeature.getId() ? olFeature.getId() : uuid();\r\n\r\n  return {\r\n    type: FEATURE,\r\n    projection: projectionOut,\r\n    extent: olFeature.get('_extent'),\r\n    meta: {\r\n      id,\r\n      title: title ? title : mapTitle ? mapTitle : id,\r\n      mapTitle,\r\n      revision: olFeature.getRevision(),\r\n      style: olFeature.get('_style'),\r\n      excludeAttribute: exclude,\r\n      excludeAttributeOffline: excludeOffline\r\n    },\r\n    properties,\r\n    geometry,\r\n    ol: olFeature\r\n  };\r\n}\r\n\r\n/**\r\n * Compute an OL feature extent in it's map projection\r\n * @param map Map\r\n * @param olFeature OL feature\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeatureExtent(\r\n  map: IgoMap,\r\n  olFeature: OlFeature\r\n): [number, number, number, number] {\r\n  let olExtent = olextent.createEmpty();\r\n\r\n  const olFeatureExtent = olFeature.get('_extent');\r\n  const olFeatureProjection = olFeature.get('_projection');\r\n  if (olFeatureExtent !== undefined && olFeatureProjection !== undefined) {\r\n    olExtent = olproj.transformExtent(\r\n      olFeatureExtent,\r\n      olFeatureProjection,\r\n      map.projection\r\n    );\r\n  } else {\r\n    const olGeometry = olFeature.getGeometry();\r\n    if (olGeometry !== null) {\r\n      olExtent = olGeometry.getExtent();\r\n    }\r\n  }\r\n\r\n  return olExtent;\r\n}\r\n\r\n/**\r\n * Compute a multiple OL features extent in their map projection\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeaturesExtent(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[]\r\n): [number, number, number, number] {\r\n  const extent = olextent.createEmpty();\r\n\r\n  olFeatures.forEach((olFeature: OlFeature) => {\r\n    const featureExtent = computeOlFeatureExtent(map, olFeature);\r\n    olextent.extend(extent, featureExtent);\r\n  });\r\n\r\n  return extent;\r\n}\r\n\r\n/**\r\n * Scale an extent.\r\n * @param extent Extent\r\n * @param Scaling factors for top, right, bottom and left directions, in that order\r\n * @returns Scaled extent\r\n */\r\nexport function scaleExtent(\r\n  extent: [number, number, number, number],\r\n  scale: [number, number, number, number]\r\n): [number, number, number, number] {\r\n  const [width, height] = olextent.getSize(extent);\r\n  return [\r\n    scale[3] ? extent[0] - width * scale[3] : extent[0],\r\n    scale[2] ? extent[1] - height * scale[2] : extent[1],\r\n    scale[1] ? extent[2] + width * scale[1] : extent[2],\r\n    scale[0] ? extent[3] + height * scale[0] : extent[3]\r\n  ];\r\n}\r\n\r\n/**\r\n * Return true if features are out of view.\r\n * If features are too close to the edge, they are considered out of view.\r\n * We define the edge as 5% of the extent size.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @returns Return true if features are out of view\r\n */\r\nexport function featuresAreOutOfView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number]\r\n) {\r\n  const mapExtent = map.viewController.getExtent();\r\n  const edgeRatio = 0.05;\r\n  const scale = [-1, -1, -1, -1].map(x => x * edgeRatio);\r\n  const viewExtent = scaleExtent(mapExtent, scale as [\r\n    number,\r\n    number,\r\n    number,\r\n    number\r\n  ]);\r\n\r\n  return !olextent.containsExtent(viewExtent, featuresExtent);\r\n}\r\n\r\n/**\r\n * Return true if features are too deep into the view. This results\r\n * in features being too small.\r\n * Features are considered too small if their extent occupies less than\r\n * 1% of the map extent.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @param areaRatio The features extent to view extent acceptable ratio\r\n * @returns Return true if features are too deep in the view\r\n */\r\nexport function featuresAreTooDeepInView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  // An area ratio of 0.004 means that the feature extent's width and height\r\n  // should be about 1/16 of the map extent's width and height\r\n  areaRatio = areaRatio ? areaRatio : 0.004;\r\n  const mapExtent = map.viewController.getExtent();\r\n  const mapExtentArea = olextent.getArea(mapExtent);\r\n  const featuresExtentArea = olextent.getArea(featuresExtent);\r\n\r\n  if (featuresExtentArea === 0 && map.viewController.getZoom() > 13) { // In case it's a point\r\n      return false;\r\n  }\r\n\r\n  return featuresExtentArea / mapExtentArea < areaRatio;\r\n}\r\n\r\n/**\r\n * Fit view to include the features extent.\r\n * By default, this method will let the features occupy about 50% of the viewport.\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @param motion To motion to the new map view\r\n * @param scale If this is defined, the original view will be scaled\r\n *  by that factor before any logic is applied.\r\n */\r\nexport function moveToOlFeatures(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[],\r\n  motion: FeatureMotion = FeatureMotion.Default,\r\n  scale?: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  const featuresExtent = computeOlFeaturesExtent(map, olFeatures);\r\n  let viewExtent = featuresExtent;\r\n  if (scale !== undefined) {\r\n    viewExtent = scaleExtent(viewExtent, scale);\r\n  }\r\n\r\n  if (motion === FeatureMotion.Zoom) {\r\n    map.viewController.zoomToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Move) {\r\n    map.viewController.moveToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Default) {\r\n    if (\r\n      featuresAreOutOfView(map, featuresExtent) ||\r\n      featuresAreTooDeepInView(map, featuresExtent, areaRatio)\r\n    ) {\r\n      map.viewController.zoomToExtent(viewExtent);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Hide an OL feature\r\n * @param olFeature OL feature\r\n */\r\nexport function hideOlFeature(olFeature: OlFeature) {\r\n  olFeature.setStyle(new olstyle.Style({}));\r\n}\r\n\r\n/**\r\n * Try to bind a layer to a store if none is bound already.\r\n * The layer will also be added to the store's map.\r\n * If no layer is given to that function, a basic one will be created.\r\n * @param store The store to bind the layer\r\n * @param layer An optional VectorLayer\r\n */\r\nexport function tryBindStoreLayer(store: FeatureStore, layer?: VectorLayer) {\r\n  if (store.layer !== undefined) {\r\n    if (store.layer.map === undefined) {\r\n      store.map.addLayer(store.layer);\r\n    }\r\n    return;\r\n  }\r\n\r\n  layer = layer\r\n    ? layer\r\n    : new VectorLayer({\r\n        source: new FeatureDataSource()\r\n      });\r\n  store.bindLayer(layer);\r\n  if (store.layer.map === undefined) {\r\n    store.map.addLayer(store.layer);\r\n  }\r\n}\r\n\r\n/**\r\n * Try to add a loading strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the loading strategy\r\n * @param strategy An optional loading strategy\r\n */\r\nexport function tryAddLoadingStrategy(\r\n  store: FeatureStore,\r\n  strategy?: FeatureStoreLoadingStrategy\r\n) {\r\n  if (store.getStrategyOfType(FeatureStoreLoadingStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    return;\r\n  }\r\n\r\n  strategy = strategy ? strategy : new FeatureStoreLoadingStrategy({});\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n\r\n/**\r\n * Try to add a selection strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the selection strategy\r\n * @param [strategy] An optional selection strategy\r\n */\r\nexport function tryAddSelectionStrategy(\r\n  store: FeatureStore,\r\n  strategy?: FeatureStoreSelectionStrategy\r\n) {\r\n  if (store.getStrategyOfType(FeatureStoreSelectionStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n    return;\r\n  }\r\n  strategy = strategy\r\n    ? strategy\r\n    : new FeatureStoreSelectionStrategy({\r\n        map: store.map\r\n      });\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n\r\n/**\r\n * Compute a diff between a source array of Ol features and a target array\r\n * @param source Source array of OL features\r\n * @param starget Target array of OL features\r\n * @returns Features to add and remove\r\n */\r\nexport function computeOlFeaturesDiff(\r\n  source: OlFeature[],\r\n  target: OlFeature[]\r\n): {\r\n  add: OlFeature[];\r\n  remove: OlFeature;\r\n} {\r\n  const olFeaturesMap = new Map();\r\n  target.forEach((olFeature: OlFeature) => {\r\n    olFeaturesMap.set(olFeature.getId(), olFeature);\r\n  });\r\n\r\n  const olFeaturesToRemove = [];\r\n  source.forEach((olFeature: OlFeature) => {\r\n    const newOlFeature = olFeaturesMap.get(olFeature.getId());\r\n    if (newOlFeature === undefined) {\r\n      olFeaturesToRemove.push(olFeature);\r\n    } else if (\r\n      newOlFeature.get('_entityRevision') !== olFeature.get('_entityRevision')\r\n    ) {\r\n      olFeaturesToRemove.push(olFeature);\r\n    } else {\r\n      olFeaturesMap.delete(newOlFeature.getId());\r\n    }\r\n  });\r\n\r\n  const olFeaturesToAddIds = Array.from(olFeaturesMap.keys());\r\n  const olFeaturesToAdd = target.filter((olFeature: OlFeature) => {\r\n    return olFeaturesToAddIds.indexOf(olFeature.getId()) >= 0;\r\n  });\r\n\r\n  return {\r\n    add: olFeaturesToAdd,\r\n    remove: olFeaturesToRemove\r\n  };\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ViewChild\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Form, FormComponent, getEntityRevision } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FEATURE } from '../shared/feature.enums';\r\nimport { Feature, FeatureMeta } from '../shared/feature.interfaces';\r\n\r\n/**\r\n * A configurable form, optionnally bound to a feature.\r\n * This component creates an entity form and, on submit,\r\n * returns a feature made out of the submitted data. It also\r\n * does things like managing the feature visibility while it's being updated\r\n * as well as disabling the selection of another feature.\r\n */\r\n@Component({\r\n  selector: 'igo-feature-form',\r\n  templateUrl: './feature-form.component.html',\r\n  styleUrls: ['./feature-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureFormComponent {\r\n\r\n  /**\r\n   * Form\r\n   */\r\n  @Input() form: Form;\r\n\r\n  /**\r\n   * Feature to update\r\n   */\r\n  @Input()\r\n  set feature(value: Feature | undefined) { this.feature$.next(value); }\r\n  get feature(): Feature | undefined { return this.feature$.value; }\r\n  readonly feature$: BehaviorSubject<Feature> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Event emitted when the form is submitted\r\n   */\r\n  @Output() submitForm = new EventEmitter<Feature>();\r\n\r\n  @ViewChild('igoForm') igoForm: FormComponent;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Transform the form data to a feature and emit an event\r\n   * @param event Form submit event\r\n   * @internal\r\n   */\r\n  onSubmit(data: { [key: string]: any }) {\r\n    const feature = this.formDataToFeature(data);\r\n    this.submitForm.emit(feature);\r\n  }\r\n\r\n  getData(): Feature {\r\n    return this.formDataToFeature(this.igoForm.getData());\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature\r\n   * @param data Form data\r\n   * @returns A feature\r\n   */\r\n  private formDataToFeature(data: { [key: string]: any }): Feature {\r\n    const properties = {};\r\n    const meta = {};\r\n    if (this.feature === undefined) {\r\n      (meta as any).id = uuid();\r\n    } else {\r\n      Object.assign(properties, this.feature.properties);\r\n      Object.assign(meta, this.feature.meta, {\r\n        revision: getEntityRevision(this.feature) + 1\r\n      });\r\n    }\r\n\r\n    const propertyPrefix = 'properties.';\r\n    Object.entries(data).forEach((entry: [string, any]) => {\r\n      const [key, value] = entry;\r\n      if (key.startsWith(propertyPrefix)) {\r\n        const property = key.substr(propertyPrefix.length);\r\n        properties[property] = value;\r\n      }\r\n    });\r\n\r\n    let geometry = data.geometry;\r\n    if (geometry === undefined && this.feature !== undefined) {\r\n      geometry = this.feature.geometry;\r\n    }\r\n\r\n    return {\r\n      meta: meta as FeatureMeta,\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: 'EPSG:4326',\r\n      properties\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './../../search/shared/sources/source';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  Feature,\r\n  FeatureMotion,\r\n  featureToOl,\r\n  moveToOlFeatures\r\n} from '../../feature';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { createOverlayLayer } from './overlay.utils';\r\n\r\n/**\r\n * This class is simply a shortcut for adding features to a map.\r\n * It does nothing more than a standard layer but it's shipped with\r\n * a defautl style based on the geometry type of the features it contains.\r\n * @todo Enhance that by using a FeatureStore and strategies.\r\n */\r\nexport class Overlay {\r\n  /**\r\n   * The map to add the layer to\r\n   */\r\n  private map: IgoMap;\r\n\r\n  /**\r\n   * Overlay layer\r\n   */\r\n  private layer: VectorLayer;\r\n\r\n  /**\r\n   * Overlay layer's data source\r\n   */\r\n  get dataSource(): FeatureDataSource {\r\n    return this.layer.dataSource as FeatureDataSource;\r\n  }\r\n\r\n  constructor(map?: IgoMap) {\r\n    this.layer = createOverlayLayer();\r\n    this.setMap(map);\r\n  }\r\n\r\n  /**\r\n   * Bind this to a map and add the overlay layer to that map\r\n   * @param map Map\r\n   */\r\n  setMap(map: IgoMap) {\r\n    if (map === undefined) {\r\n      if (this.map !== undefined) {\r\n        this.map.ol.removeLayer(this.layer.ol);\r\n      }\r\n    } else {\r\n      map.ol.addLayer(this.layer.ol);\r\n    }\r\n    this.map = map;\r\n  }\r\n\r\n  /**\r\n   * Set the overlay features and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   * @param sourceId Optional: Remove features of certain sourceId (ex: 'Map' for query features)\r\n   */\r\n  setFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    sourceId?: string\r\n  ) {\r\n    if (sourceId) {\r\n      for (const olFeature of this.dataSource.ol.getFeatures()) {\r\n        if (olFeature.get('_sourceId') === sourceId) {\r\n          this.removeOlFeature(olFeature);\r\n        }\r\n      }\r\n    } else {\r\n      this.clear();\r\n    }\r\n    this.addFeatures(features, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a feature to the  overlay and, optionally, move to it\r\n   * @param feature Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeature(feature: Feature, motion: FeatureMotion = FeatureMotion.Default) {\r\n    this.addFeatures([feature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add features to the  overlay and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    const olFeatures = [];\r\n    features.forEach((feature: Feature) => {\r\n      const olFeature = featureToOl(feature, this.map.projection);\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry === null) {\r\n        return;\r\n      }\r\n      olFeatures.push(olFeature);\r\n    });\r\n\r\n    this.addOlFeatures(olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a OpenLayers feature to the  overlay and, optionally, move to it\r\n   * @param olFeature OpenLayers Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeature(\r\n    olFeature: OlFeature,\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.addOlFeatures([olFeature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add OpenLayers features to the overlay and, optionally, move to them\r\n   * @param olFeatures OpenLayers Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.dataSource.ol.addFeatures(olFeatures);\r\n    moveToOlFeatures(this.map, olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Remove a feature from the overlay\r\n   * @param feature Feature\r\n   */\r\n  removeFeature(feature: Feature) {\r\n    this.removeFeatures([feature]);\r\n  }\r\n\r\n  /**\r\n   * Remove features from the overlay\r\n   * @param features Features\r\n   */\r\n  removeFeatures(features: Feature[]) {\r\n    features.forEach((feature: Feature) => {\r\n      if (feature.meta) {\r\n        if (this.dataSource.ol.getFeatureById(feature.meta.id)) {\r\n          this.removeOlFeature(this.dataSource.ol.getFeatureById(feature.meta.id));\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove an OpenLayers feature from the overlay\r\n   * @param olFeature OpenLayers Feature\r\n   */\r\n  removeOlFeature(olFeature: OlFeature) {\r\n    this.dataSource.ol.removeFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay\r\n   */\r\n  clear() {\r\n    this.dataSource.ol.clear();\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { Watcher, SubjectStatus } from '@igo2/utils';\r\nimport { Layer } from '../../layer/shared/layers';\r\n\r\nexport class LayerWatcher extends Watcher {\r\n  private loaded = 0;\r\n  private loading = 0;\r\n  private layers: Layer[] = [];\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  watch() {}\r\n\r\n  unwatch() {\r\n    this.layers.forEach(layer => this.unwatchLayer(layer), this);\r\n  }\r\n\r\n  watchLayer(layer: Layer) {\r\n    if (layer.status$ === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.layers.push(layer);\r\n\r\n    const layer$$ = layer.status$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe(status => {\r\n        if (status === SubjectStatus.Working) {\r\n          this.loading += 1;\r\n        } else if (status === SubjectStatus.Done) {\r\n          this.loaded += 1;\r\n        }\r\n\r\n        if (this.loaded >= this.loading) {\r\n          this.loading = this.loaded = 0;\r\n          this.status = SubjectStatus.Done;\r\n        } else if (this.loading > 0) {\r\n          this.status = SubjectStatus.Working;\r\n        }\r\n      });\r\n\r\n    this.subscriptions.push(layer$$);\r\n  }\r\n\r\n  unwatchLayer(layer: Layer) {\r\n    layer.status$.next(SubjectStatus.Done);\r\n    const index = this.layers.indexOf(layer);\r\n    if (index >= 0) {\r\n      const status = (layer as any).watcher.status;\r\n      if (\r\n        [SubjectStatus.Working, SubjectStatus.Waiting].indexOf(status) !== -1\r\n      ) {\r\n        this.loaded += 1;\r\n      }\r\n      this.subscriptions[index].unsubscribe();\r\n      this.subscriptions.splice(index, 1);\r\n      this.layers.splice(index, 1);\r\n      (layer as any).watcher.unwatch();\r\n    }\r\n  }\r\n}\r\n","export enum MapViewAction {\r\n  Move,\r\n  Zoom\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\n/**\r\n * Base map controller\r\n */\r\nexport class MapController {\r\n\r\n  /**\r\n   * OL Map\r\n   */\r\n  protected olMap: OlMap;\r\n\r\n  /**\r\n   * Array of observer keys\r\n   */\r\n  protected observerKeys: string[] = [];\r\n\r\n  /**\r\n   * Return the OL map this controller is bound to\r\n   * @returns OL Map\r\n   */\r\n  getOlMap(): OlMap {\r\n    return this.olMap;\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap !== undefined && this.getOlMap() !== undefined) {\r\n      throw new Error('This controller is already bound to a map.');\r\n    }\r\n\r\n    if (olMap === undefined) {\r\n      this.teardownObservers();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    this.observerKeys.forEach((key: string) => unByKey(key));\r\n    this.observerKeys = [];\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlMapEvent from 'ol/MapEvent';\r\n\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport * as oleasing from 'ol/easing';\r\nimport * as olproj from 'ol/proj';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlView from 'ol/View';\r\n\r\nimport { MapViewAction } from '../map.enums';\r\nimport { MapExtent, MapViewState } from '../map.interface';\r\nimport { getScaleFromResolution, viewStatesAreEqual } from '../map.utils';\r\nimport { MapController } from './controller';\r\n\r\nexport interface MapViewControllerOptions {\r\n  stateHistory: boolean;\r\n}\r\n\r\n/**\r\n * Controller to handle map view interactions\r\n */\r\nexport class MapViewController extends MapController {\r\n  /**\r\n   * Observable of the current resolution\r\n   */\r\n  resolution$ = new BehaviorSubject<number>(undefined);\r\n\r\n  /**\r\n   * Observable of the current state\r\n   */\r\n  state$ = new BehaviorSubject<MapViewState>(undefined);\r\n\r\n  /**\r\n   * View Padding\r\n   */\r\n  padding = [0, 0, 0, 0];\r\n\r\n  /**\r\n   * Max zoom after set extent\r\n   */\r\n  maxZoomOnExtent = 19;\r\n\r\n  /**\r\n   * Extent stream\r\n   */\r\n  private extent$ = new Subject<{ extent: MapExtent; action: MapViewAction }>();\r\n\r\n  /**\r\n   * Subscription to the movement stream\r\n   */\r\n  private extent$$: Subscription;\r\n\r\n  /**\r\n   * History of states\r\n   */\r\n  private states: MapViewState[] = [];\r\n\r\n  /**\r\n   * Current state index\r\n   */\r\n  private stateIndex: number = 0;\r\n\r\n  /**\r\n   * Whether the view controller should keep the view's state history\r\n   */\r\n  get stateHistory(): boolean {\r\n    return this.options ? this.options.stateHistory === true : false;\r\n  }\r\n\r\n  /**\r\n   * OL View\r\n   */\r\n  get olView(): OlView {\r\n    return this.olMap.getView();\r\n  }\r\n\r\n  constructor(private options?: MapViewControllerOptions) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    super.setOlMap(olMap);\r\n    this.setupObservers();\r\n  }\r\n\r\n  /**\r\n   * Observe move moveend and subscribe to the extent stream\r\n   */\r\n  setupObservers() {\r\n    if (this.stateHistory === true) {\r\n      this.observerKeys.push(\r\n        this.olMap.on('moveend', (event: OlMapEvent) => this.onMoveEnd(event))\r\n      );\r\n    }\r\n\r\n    this.extent$$ = this.extent$\r\n      .pipe(debounceTime(25))\r\n      .subscribe((value: { extent: MapExtent; action: MapViewAction }) => {\r\n        this.setExtent(value.extent, value.action);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    super.teardownObservers();\r\n    if (this.extent$$ !== undefined) {\r\n      this.extent$$.unsubscribe();\r\n      this.extent$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the view's OL projection\r\n   * @returns OL projection\r\n   */\r\n  getOlProjection(): OlProjection {\r\n    return this.olView.getProjection();\r\n  }\r\n\r\n  /**\r\n   * Get the current map view center\r\n   * @param projection Output projection\r\n   * @returns Center\r\n   */\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    let center = this.olView.getCenter();\r\n    if (projection && center) {\r\n      center = olproj.transform(center, this.getOlProjection(), projection);\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * Get the current view extent\r\n   * @param projection Output projection\r\n   * @returns Extent\r\n   */\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    let extent = this.olView.calculateExtent(this.olMap.getSize());\r\n    if (projection && extent) {\r\n      extent = olproj.transformExtent(\r\n        extent,\r\n        this.getOlProjection(),\r\n        projection\r\n      );\r\n    }\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * Get the current scale\r\n   * @param dpi Dot per inches\r\n   * @returns View scale\r\n   */\r\n  getScale(dpi = 96) {\r\n    return getScaleFromResolution(\r\n      this.getResolution(),\r\n      this.getOlProjection().getUnits(),\r\n      dpi\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current resolution\r\n   * @returns Projection denominator\r\n   */\r\n  getResolution(): number {\r\n    return this.olView.getResolution();\r\n  }\r\n\r\n  /**\r\n   * Get the current zoom level\r\n   * @returns Zoom level\r\n   */\r\n  getZoom(): number {\r\n    return Math.round(this.olView.getZoom());\r\n  }\r\n\r\n  /**\r\n   * Zoom in\r\n   */\r\n  zoomIn() {\r\n    this.zoomTo(this.olView.getZoom() + 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom out\r\n   */\r\n  zoomOut() {\r\n    this.zoomTo(this.olView.getZoom() - 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom to specific zoom level\r\n   * @param zoom Zoom level\r\n   */\r\n  zoomTo(zoom: number) {\r\n    this.olView.cancelAnimations();\r\n    this.olView.animate({\r\n      zoom,\r\n      duration: 250,\r\n      easing: oleasing.easeOut\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Move to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to move to\r\n   */\r\n  moveToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({ extent, action: MapViewAction.Move });\r\n  }\r\n\r\n  /**\r\n   * Zoom to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to zoom to\r\n   */\r\n  zoomToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({ extent, action: MapViewAction.Zoom });\r\n  }\r\n\r\n  /**\r\n   * Return the current view rotation\r\n   * @returns Rotation angle in degrees\r\n   */\r\n  getRotation(): number {\r\n    return this.olView.getRotation();\r\n  }\r\n\r\n  /**\r\n   * Reset the view rotation to 0\r\n   */\r\n  resetRotation() {\r\n    this.olView.animate({ rotation: 0 });\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a previous state\r\n   * @returns True if the view has a previous state\r\n   */\r\n  hasPreviousState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex > 0;\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a next state\r\n   * @returns True if the view has a next state\r\n   */\r\n  hasNextState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex < this.states.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Restore the previous view state\r\n   */\r\n  previousState() {\r\n    if (this.hasPreviousState()) {\r\n      this.setStateIndex(this.stateIndex - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore the next view state\r\n   */\r\n  nextState() {\r\n    if (this.hasNextState()) {\r\n      this.setStateIndex(this.stateIndex + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the state history\r\n   */\r\n  clearStateHistory() {\r\n    this.states = [];\r\n    this.stateIndex = 0;\r\n  }\r\n\r\n  /**\r\n   * Update the the view to it's intial state\r\n   */\r\n  setInitialState() {\r\n    if (this.states.length > 0) {\r\n      this.setStateIndex(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move to the extent retrieved from the stream\r\n   * @param extent Extent\r\n   * @param action Either zoom or move\r\n   * @param animation With or without animation to the target extent.\r\n   */\r\n  private setExtent(\r\n    extent: MapExtent,\r\n    action: MapViewAction,\r\n    animation: boolean = true\r\n  ) {\r\n    const olView = this.olView;\r\n    olView.cancelAnimations();\r\n    const duration = animation ? 500 : 0;\r\n    const zoom = olView.getZoom();\r\n\r\n    const fromCenter = olView.getCenter();\r\n    const toCenter = [\r\n      extent[0] + (extent[2] - extent[0]) / 2,\r\n      extent[1] + (extent[3] - extent[1]) / 2\r\n    ];\r\n    const distCenter = Math.sqrt(\r\n      Math.pow(fromCenter[0] - toCenter[0], 2) +\r\n        Math.pow(fromCenter[1] - toCenter[1], 2)\r\n    );\r\n    const fromExtent = olView.calculateExtent();\r\n    const fromSize = Math.sqrt(\r\n      Math.pow(fromExtent[2] - fromExtent[0], 2) +\r\n        Math.pow(fromExtent[3] - fromExtent[1], 2)\r\n    );\r\n    const toSize = Math.sqrt(\r\n      Math.pow(extent[2] - extent[0], 2) + Math.pow(extent[3] - extent[1], 2)\r\n    );\r\n    const moySize = (toSize + fromSize) / 2;\r\n    const xSize = distCenter / moySize;\r\n\r\n    const maxZoom =\r\n      action === MapViewAction.Move || zoom > this.maxZoomOnExtent\r\n        ? zoom\r\n        : this.maxZoomOnExtent;\r\n\r\n    olView.fit(extent, {\r\n      maxZoom,\r\n      padding: this.padding,\r\n      duration: xSize > 4 ? 0 : duration\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set the view state index\r\n   * @param index State index\r\n   */\r\n  private setStateIndex(index: number) {\r\n    this.stateIndex = index;\r\n    this.setState(this.states[index]);\r\n  }\r\n\r\n  /**\r\n   * Set the view state\r\n   * @param state View state\r\n   */\r\n  private setState(state: MapViewState) {\r\n    this.olView.animate({\r\n      resolution: state.resolution,\r\n      center: state.center,\r\n      duration: 0\r\n    });\r\n  }\r\n\r\n  /**\r\n   * On move end, get the view state and record it.\r\n   * @param event Map event\r\n   */\r\n  private onMoveEnd(event: OlMapEvent) {\r\n    const resolution = this.getResolution();\r\n    if (this.resolution$.value !== resolution) {\r\n      this.resolution$.next(resolution);\r\n    }\r\n\r\n    const state = {\r\n      resolution,\r\n      center: this.getCenter(),\r\n      zoom: this.getZoom()\r\n    };\r\n\r\n    if (this.stateHistory === true) {\r\n      const stateIndex = this.stateIndex;\r\n      const stateAtIndex =\r\n        this.states.length === 0 ? undefined : this.states[stateIndex];\r\n      if (!viewStatesAreEqual(state, stateAtIndex)) {\r\n        this.states = this.states.slice(0, stateIndex + 1).concat([state]);\r\n        this.stateIndex = this.states.length - 1;\r\n      }\r\n    }\r\n\r\n    this.state$.next(state);\r\n  }\r\n}\r\n","import olMap from 'ol/Map';\r\nimport olView from 'ol/View';\r\nimport olFeature from 'ol/Feature';\r\nimport olGeolocation from 'ol/Geolocation';\r\nimport olControlAttribution from 'ol/control/Attribution';\r\nimport olControlScaleLine from 'ol/control/ScaleLine';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport olCircle from 'ol/geom/Circle';\r\n\r\nimport proj4 from 'proj4';\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\n\r\nimport { Layer } from '../../layer/shared/layers';\r\nimport { Overlay } from '../../overlay/shared/overlay';\r\n\r\nimport { LayerWatcher } from '../utils/layer-watcher';\r\nimport {\r\n  MapViewOptions,\r\n  MapOptions,\r\n  MapAttributionOptions,\r\n  MapScaleLineOptions,\r\n  MapExtent\r\n} from './map.interface';\r\nimport { MapViewController } from './controllers/view';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { FeatureMotion } from '../../feature/shared/feature.enums';\r\n\r\n// TODO: This class is messy. Clearly define it's scope and the map browser's.\r\n// Move some stuff into controllers.\r\nexport class IgoMap {\r\n  public ol: olMap;\r\n  public offlineButtonToggle$ = new BehaviorSubject<boolean>(false);\r\n  public layers$ = new BehaviorSubject<Layer[]>([]);\r\n  public status$: Subject<SubjectStatus>;\r\n  public alwaysTracking: boolean;\r\n  public positionFollower: boolean = true;\r\n  public geolocation$ = new BehaviorSubject<olGeolocation>(undefined);\r\n  public geolocationFeature: olFeature;\r\n  public bufferGeom: olCircle;\r\n  public bufferFeature: olFeature;\r\n  public buffer: Overlay;\r\n  public overlay: Overlay;\r\n  public viewController: MapViewController;\r\n\r\n  public bufferDataSource: FeatureDataSource;\r\n\r\n  private layerWatcher: LayerWatcher;\r\n  private geolocation: olGeolocation;\r\n  private geolocation$$: Subscription;\r\n\r\n  private options: MapOptions;\r\n  private defaultOptions: Partial<MapOptions> = {\r\n    controls: { attribution: false }\r\n  };\r\n\r\n  get layers(): Layer[] {\r\n    return this.layers$.value;\r\n  }\r\n\r\n  get projection(): string {\r\n    return this.viewController.getOlProjection().getCode();\r\n  }\r\n\r\n  constructor(options?: MapOptions) {\r\n    this.options = Object.assign({}, this.defaultOptions, options);\r\n    this.layerWatcher = new LayerWatcher();\r\n    this.status$ = this.layerWatcher.status$;\r\n    olproj4.register(proj4);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    const controls = [];\r\n    if (this.options.controls) {\r\n      if (this.options.controls.attribution) {\r\n        const attributionOpt = (this.options.controls.attribution === true\r\n          ? {}\r\n          : this.options.controls.attribution) as MapAttributionOptions;\r\n        controls.push(new olControlAttribution(attributionOpt));\r\n      }\r\n      if (this.options.controls.scaleLine) {\r\n        const scaleLineOpt = (this.options.controls.scaleLine === true\r\n          ? {}\r\n          : this.options.controls.scaleLine) as MapScaleLineOptions;\r\n        controls.push(new olControlScaleLine(scaleLineOpt));\r\n      }\r\n    }\r\n    let interactions = {};\r\n    if (this.options.interactions === false) {\r\n      interactions = {\r\n        altShiftDragRotate: false,\r\n        doubleClickZoom: false,\r\n        keyboard: false,\r\n        mouseWheelZoom: false,\r\n        shiftDragZoom: false,\r\n        dragPan: false,\r\n        pinchRotate: false,\r\n        pinchZoom: false\r\n      };\r\n    }\r\n\r\n    this.ol = new olMap({\r\n      interactions: olinteraction.defaults(interactions),\r\n      controls\r\n    });\r\n\r\n    this.setView(this.options.view || {});\r\n    this.viewController = new MapViewController({\r\n      stateHistory: true\r\n    });\r\n    this.viewController.setOlMap(this.ol);\r\n    this.overlay = new Overlay(this);\r\n    this.buffer = new Overlay(this);\r\n  }\r\n\r\n  setTarget(id: string) {\r\n    this.ol.setTarget(id);\r\n    if (id !== undefined) {\r\n      this.layerWatcher.subscribe(() => {}, null);\r\n    } else {\r\n      this.layerWatcher.unsubscribe();\r\n    }\r\n  }\r\n\r\n  updateView(options: MapViewOptions) {\r\n    const currentView = this.ol.getView();\r\n    const viewOptions = Object.assign(\r\n      {\r\n        zoom: currentView.getZoom()\r\n      },\r\n      currentView.getProperties()\r\n    );\r\n\r\n    this.setView(Object.assign(viewOptions, options));\r\n    if (options.maxZoomOnExtent) {\r\n      this.viewController.maxZoomOnExtent = options.maxZoomOnExtent;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the map view\r\n   * @param options Map view options\r\n   */\r\n  setView(options: MapViewOptions) {\r\n    if (this.viewController !== undefined) {\r\n      this.viewController.clearStateHistory();\r\n    }\r\n\r\n    const view = new olView(options);\r\n    this.ol.setView(view);\r\n\r\n    this.unsubscribeGeolocate();\r\n    if (options) {\r\n      if (options.center) {\r\n        const projection = view.getProjection().getCode();\r\n        const center = olproj.fromLonLat(options.center, projection);\r\n        view.setCenter(center);\r\n      }\r\n\r\n      if (options.geolocate) {\r\n        this.geolocate(true);\r\n      }\r\n\r\n      if (options.alwaysTracking) {\r\n        this.alwaysTracking = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deprecated\r\n   * TODO: Move to ViewController and update every place it's used\r\n   */\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    return this.viewController.getCenter(projection);\r\n  }\r\n\r\n  /**\r\n   * Deprecated\r\n   * TODO: Move to ViewController and update every place it's used\r\n   */\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    return this.viewController.getExtent(projection);\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getZoom(): number {\r\n    return this.viewController.getZoom();\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (!baseLayer) {\r\n      return;\r\n    }\r\n\r\n    for (const bl of this.getBaseLayers()) {\r\n      bl.visible = false;\r\n    }\r\n\r\n    baseLayer.visible = true;\r\n\r\n    this.viewController.olView.setMinZoom(\r\n      baseLayer.dataSource.options.minZoom || (this.options.view || {}).minZoom\r\n    );\r\n    this.viewController.olView.setMaxZoom(\r\n      baseLayer.dataSource.options.maxZoom || (this.options.view || {}).maxZoom\r\n    );\r\n  }\r\n\r\n  getBaseLayers(): Layer[] {\r\n    return this.layers.filter((layer: Layer) => layer.baseLayer === true);\r\n  }\r\n\r\n  getLayerById(id: string): Layer {\r\n    return this.layers.find((layer: Layer) => layer.id && layer.id === id);\r\n  }\r\n\r\n  /**\r\n   * Add a single layer\r\n   * @param layer Layer to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayer(layer: Layer, push = true) {\r\n    this.addLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add many layers\r\n   * @param layers Layers to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayers(layers: Layer[], push = true) {\r\n    let offsetZIndex = 0;\r\n    let offsetBaseLayerZIndex = 0;\r\n    const addedLayers = layers\r\n      .map((layer: Layer) => {\r\n        const offset = layer.zIndex\r\n          ? 0\r\n          : layer.baseLayer\r\n          ? offsetBaseLayerZIndex++\r\n          : offsetZIndex++;\r\n        return this.doAddLayer(layer, offset);\r\n      })\r\n      .filter((layer: Layer | undefined) => layer !== undefined);\r\n    this.setLayers([].concat(this.layers, addedLayers));\r\n  }\r\n\r\n  /**\r\n   * Remove a single layer\r\n   * @param layer Layer to remove\r\n   */\r\n  removeLayer(layer: Layer) {\r\n    this.removeLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove many layers\r\n   * @param layers Layers to remove\r\n   */\r\n  removeLayers(layers: Layer[]) {\r\n    const newLayers = this.layers$.value.slice(0);\r\n    const layersToRemove = [];\r\n    layers.forEach((layer: Layer) => {\r\n      const index = this.getLayerIndex(layer);\r\n      if (index >= 0) {\r\n        layersToRemove.push(layer);\r\n        newLayers.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    layersToRemove.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.setLayers(newLayers);\r\n  }\r\n\r\n  /**\r\n   * Remove all layers\r\n   */\r\n  removeAllLayers() {\r\n    this.layers.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.layers$.next([]);\r\n  }\r\n\r\n  raiseLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index > 1) {\r\n      this.moveLayer(layer, index, index - 1);\r\n    }\r\n  }\r\n\r\n  raiseLayers(layers: Layer[]) {\r\n    for (const layer of layers) {\r\n      this.raiseLayer(layer);\r\n    }\r\n  }\r\n\r\n  lowerLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index < this.layers.length - 1) {\r\n      this.moveLayer(layer, index, index + 1);\r\n    }\r\n  }\r\n\r\n  lowerLayers(layers: Layer[]) {\r\n    const reverseLayers = layers.reverse();\r\n    for (const layer of reverseLayers) {\r\n      this.lowerLayer(layer);\r\n    }\r\n  }\r\n\r\n  moveLayer(layer: Layer, from: number, to: number) {\r\n    const layerTo = this.layers[to];\r\n    const zIndexTo = layerTo.zIndex;\r\n    const zIndexFrom = layer.zIndex;\r\n\r\n    if (layerTo.baseLayer || layer.baseLayer) {\r\n      return;\r\n    }\r\n\r\n    layer.zIndex = zIndexTo;\r\n    layerTo.zIndex = zIndexFrom;\r\n\r\n    this.layers[to] = layer;\r\n    this.layers[from] = layerTo;\r\n    this.layers$.next(this.layers.slice(0));\r\n  }\r\n\r\n  /**\r\n   * Add a layer to the OL map and start watching. If the layer is already\r\n   * added to this map, make it visible but don't add it one again.\r\n   * @param layer Layer\r\n   * @returns The layer added, if any\r\n   */\r\n  private doAddLayer(layer: Layer, offsetZIndex: number) {\r\n    if (layer.baseLayer && layer.visible) {\r\n      this.changeBaseLayer(layer);\r\n    }\r\n\r\n    const existingLayer = this.getLayerById(layer.id);\r\n    if (existingLayer !== undefined) {\r\n      existingLayer.visible = true;\r\n      return;\r\n    }\r\n\r\n    if (!layer.baseLayer && layer.zIndex) {\r\n      layer.zIndex += 10;\r\n    }\r\n\r\n    if (layer.zIndex === undefined || layer.zIndex === 0) {\r\n      const maxZIndex = Math.max(\r\n        layer.baseLayer ? 0 : 10,\r\n        ...this.layers\r\n          .filter(\r\n            l => l.baseLayer === layer.baseLayer && l.zIndex < 200 // zIndex > 200 = system layer\r\n          )\r\n          .map(l => l.zIndex)\r\n      );\r\n      layer.zIndex = maxZIndex + 1 + offsetZIndex;\r\n    }\r\n\r\n    if (layer.baseLayer && layer.zIndex > 9) {\r\n      layer.zIndex = 10; // baselayer must have zIndex < 10\r\n    }\r\n\r\n    layer.setMap(this);\r\n    this.layerWatcher.watchLayer(layer);\r\n    this.ol.addLayer(layer.ol);\r\n\r\n    return layer;\r\n  }\r\n\r\n  /**\r\n   * Remove a layer from the OL map and stop watching\r\n   * @param layer Layer\r\n   */\r\n  private doRemoveLayer(layer: Layer) {\r\n    this.layerWatcher.unwatchLayer(layer);\r\n    this.ol.removeLayer(layer.ol);\r\n    layer.setMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Update the layers observable\r\n   * @param layers Layers\r\n   */\r\n  private setLayers(layers: Layer[]) {\r\n    this.layers$.next(this.sortLayersByZIndex(layers).slice(0));\r\n  }\r\n\r\n  /**\r\n   * Sort layers by descending zIndex\r\n   * @param layers Array of layers\r\n   * @returns The original array, sorted by zIndex\r\n   */\r\n  private sortLayersByZIndex(layers: Layer[]) {\r\n    // Sort by descending zIndex\r\n    return layers.sort(\r\n      (layer1: Layer, layer2: Layer) => layer2.zIndex - layer1.zIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get layer index in the map's inenr array of layers\r\n   * @param layer Layer\r\n   * @returns The layer index\r\n   */\r\n  private getLayerIndex(layer: Layer) {\r\n    return this.layers.findIndex((_layer: Layer) => _layer === layer);\r\n  }\r\n\r\n  // TODO: Create a GeolocationController with everything below\r\n  geolocate(track = false) {\r\n    let first = true;\r\n    if (this.geolocation$$) {\r\n      track = this.geolocation.getTracking();\r\n      this.unsubscribeGeolocate();\r\n    }\r\n    this.startGeolocation();\r\n\r\n    this.geolocation$$ = this.geolocation$.subscribe(geolocation => {\r\n      if (!geolocation) {\r\n        return;\r\n      }\r\n      const accuracy = geolocation.getAccuracy();\r\n      if (accuracy < 10000) {\r\n        const geometry = geolocation.getAccuracyGeometry();\r\n        const extent = geometry.getExtent();\r\n        if (\r\n          this.geolocationFeature &&\r\n          this.overlay.dataSource.ol.getFeatureById(\r\n            this.geolocationFeature.getId()\r\n          )\r\n        ) {\r\n          this.overlay.dataSource.ol.removeFeature(this.geolocationFeature);\r\n        }\r\n\r\n        if (this.bufferFeature) {\r\n          this.buffer.dataSource.ol.removeFeature(this.bufferFeature);\r\n        }\r\n\r\n        this.geolocationFeature = new olFeature({ geometry });\r\n        this.geolocationFeature.setId('geolocationFeature');\r\n        if (!this.positionFollower && this.alwaysTracking) {\r\n          this.overlay.addOlFeature(this.geolocationFeature, FeatureMotion.None);\r\n        } else if (this.positionFollower && this.alwaysTracking) {\r\n          this.overlay.addOlFeature(this.geolocationFeature, FeatureMotion.Move);\r\n        } else {\r\n          this.overlay.addOlFeature(this.geolocationFeature);\r\n        }\r\n\r\n        if (this.ol.getView().options_.buffer) {\r\n          const bufferRadius = this.ol.getView().options_.buffer.bufferRadius;\r\n          const coordinates = geolocation.getPosition();\r\n          this.bufferGeom = new olCircle(coordinates, bufferRadius);\r\n          const bufferStroke = this.ol.getView().options_.buffer.bufferStroke;\r\n          const bufferFill = this.ol.getView().options_.buffer.bufferFill;\r\n\r\n          let bufferText;\r\n          if (this.ol.getView().options_.buffer.showBufferRadius) {\r\n            bufferText = bufferRadius.toString() + 'm';\r\n          } else {\r\n            bufferText = '';\r\n          }\r\n\r\n          this.bufferFeature = new olFeature(this.bufferGeom);\r\n          this.bufferFeature.setId('bufferFeature');\r\n          this.bufferFeature.set('bufferStroke', bufferStroke);\r\n          this.bufferFeature.set('bufferFill', bufferFill);\r\n          this.bufferFeature.set('bufferText', bufferText);\r\n          this.buffer.addOlFeature(this.bufferFeature, FeatureMotion.None);\r\n        }\r\n        if (first) {\r\n          this.viewController.zoomToExtent(extent);\r\n          this.positionFollower = !this.positionFollower;\r\n        }\r\n      } else if (first) {\r\n        const view = this.ol.getView();\r\n        const coordinates = geolocation.getPosition();\r\n        view.setCenter(coordinates);\r\n        view.setZoom(14);\r\n      }\r\n      if (track && !this.alwaysTracking) {\r\n        this.unsubscribeGeolocate();\r\n      }\r\n      first = false;\r\n    });\r\n  }\r\n\r\n  unsubscribeGeolocate() {\r\n    this.stopGeolocation();\r\n    if (this.geolocation$$) {\r\n      this.geolocation$$.unsubscribe();\r\n      this.geolocation$$ = undefined;\r\n    }\r\n  }\r\n\r\n  private startGeolocation() {\r\n    if (!this.geolocation) {\r\n      this.geolocation = new olGeolocation({\r\n        trackingOptions: {\r\n          enableHighAccuracy: true\r\n        },\r\n        projection: this.projection,\r\n        tracking: true\r\n      });\r\n\r\n      this.geolocation.on('change', evt => {\r\n        this.geolocation$.next(this.geolocation);\r\n      });\r\n    } else {\r\n      this.geolocation.setTracking(true);\r\n    }\r\n  }\r\n\r\n  private stopGeolocation() {\r\n    if (this.geolocation) {\r\n      this.geolocation.setTracking(false);\r\n    }\r\n  }\r\n\r\n  onOfflineToggle(offline: boolean) {\r\n    this.offlineButtonToggle$.next(offline);\r\n  }\r\n}\r\n","import { Directive, AfterViewInit } from '@angular/core';\r\nimport { NetworkService, ConnectionState, MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { IgoMap } from './map';\r\nimport { MapBrowserComponent } from '../map-browser/map-browser.component';\r\nimport { FeatureDataSourceOptions } from '../../datasource/shared/datasources/feature-datasource.interface';\r\nimport { XYZDataSourceOptions } from '../../datasource/shared/datasources/xyz-datasource.interface';\r\nimport { MVTDataSourceOptions } from '../../datasource/shared/datasources/mvt-datasource.interface';\r\nimport { ClusterDataSourceOptions } from '../../datasource/shared/datasources/cluster-datasource.interface';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { ClusterDataSource } from '../../datasource/shared/datasources/cluster-datasource';\r\nimport { MVTDataSource } from '../../datasource/shared/datasources/mvt-datasource';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { XYZDataSource } from '../../datasource/shared/datasources/xyz-datasource';\r\n\r\n@Directive({\r\n    selector: '[igoMapOffline]'\r\n  })\r\nexport class MapOfflineDirective implements AfterViewInit {\r\n\r\n  private component: MapBrowserComponent;\r\n  private offlineButtonStatus: boolean = false;\r\n  private networkState: ConnectionState = {\r\n    connection: true\r\n  };\r\n  private offlineButtonState: ConnectionState = {\r\n    connection: true\r\n  };\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    component: MapBrowserComponent,\r\n    private networkService: NetworkService,\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService\r\n    ) {\r\n      this.component = component;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      this.map.offlineButtonToggle$.subscribe((offlineButtonToggle: boolean) => {\r\n        this.offlineButtonStatus = offlineButtonToggle;\r\n        const translate = this.languageService.translate;\r\n        if (this.offlineButtonStatus && this.networkState.connection) {\r\n          const message = translate.instant('igo.geo.network.offline.message');\r\n          const title = translate.instant('igo.geo.network.offline.title');\r\n          this.messageService.info(message, title);\r\n          this.offlineButtonState.connection = false;\r\n          this.changeLayer();\r\n        } else if (!this.offlineButtonStatus && !this.networkState.connection) {\r\n          const message = translate.instant('igo.geo.network.offline.message');\r\n          const title = translate.instant('igo.geo.network.offline.title');\r\n          this.messageService.info(message, title);\r\n          this.offlineButtonState.connection = false;\r\n          this.changeLayer();\r\n        } else if (!this.offlineButtonStatus && this.networkState.connection) {\r\n          let message;\r\n          let title;\r\n          const messageObs = translate.get('igo.geo.network.online.message');\r\n          const titleObs = translate.get('igo.geo.network.online.title');\r\n          messageObs.subscribe((message1: string) => {\r\n            message = message1;\r\n          });\r\n          titleObs.subscribe((title1: string) => {\r\n            title = title1;\r\n          });\r\n          this.messageService.info(message, title);\r\n          this.offlineButtonState.connection = true;\r\n          this.changeLayer();\r\n        }\r\n      });\r\n\r\n      this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n        this.networkState = state;\r\n        if (!this.offlineButtonStatus) {\r\n          this.changeLayer();\r\n        }\r\n      });\r\n\r\n      this.map.layers$.subscribe((layers: Layer[]) => {\r\n        this.changeLayer();\r\n      });\r\n    }\r\n\r\n  private changeLayer() {\r\n    let sourceOptions;\r\n    const layerList = this.map.layers$.value;\r\n    layerList.forEach(layer => {\r\n      if (layer.options.source instanceof MVTDataSource) {\r\n        sourceOptions = (layer.options.sourceOptions as MVTDataSourceOptions);\r\n        layer.ol.getSource().clear();\r\n      } else if (layer.options.source instanceof XYZDataSource) {\r\n        sourceOptions = (layer.options.sourceOptions as XYZDataSourceOptions);\r\n      } else if (layer.options.source instanceof ClusterDataSource) {\r\n        sourceOptions = (layer.options.sourceOptions as ClusterDataSourceOptions);\r\n      } else if (layer.options.source instanceof FeatureDataSource) {\r\n        sourceOptions = (layer.options.sourceOptions as FeatureDataSourceOptions);\r\n      } else {\r\n        if (this.networkState.connection === false || this.offlineButtonState.connection === false) {\r\n          layer.ol.setMaxResolution(0);\r\n          return;\r\n        } else if (this.networkState.connection === true || this.offlineButtonState.connection === true) {\r\n          layer.ol.setMaxResolution(Infinity);\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (sourceOptions) {\r\n        if (sourceOptions.pathOffline && this.networkState.connection === false ||\r\n          sourceOptions.pathOffline && this.offlineButtonState.connection === false) {\r\n            if (sourceOptions.type === 'vector' || sourceOptions.type === 'cluster') {\r\n              return;\r\n            }\r\n            layer.ol.getSource().setUrl(sourceOptions.pathOffline);\r\n        } else if (sourceOptions.pathOffline && this.networkState.connection === false ||\r\n          sourceOptions.pathOffline && this.offlineButtonState.connection === true) {\r\n            if (sourceOptions.type === 'vector' || sourceOptions.type === 'cluster') {\r\n              return;\r\n            }\r\n            layer.ol.getSource().setUrl(sourceOptions.url);\r\n        } else {\r\n          if (this.networkState.connection === false || this.offlineButtonState.connection === false) {\r\n            layer.ol.setMaxResolution(0);\r\n          } else if (this.networkState.connection === true || this.offlineButtonState.connection === true) {\r\n            layer.ol.setMaxResolution(Infinity);\r\n          }\r\n        }\r\n      } else {\r\n        if (this.networkState.connection === false || this.offlineButtonState.connection === false) {\r\n          layer.ol.setMaxResolution(0);\r\n        } else if (this.networkState.connection === true || this.offlineButtonState.connection === true) {\r\n          layer.ol.setMaxResolution(Infinity);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  Self,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\n\r\nimport { transform } from 'ol/proj';\r\nimport { MediaService } from '@igo2/core';\r\n/**\r\n * This directive return the pointer coordinate (on click or pointermove)\r\n * in [longitude, latitude], delayed by in input (pointerMoveDelay)\r\n * to avoid too many emitted values.\r\n */\r\n@Directive({\r\n  selector: '[igoPointerPosition]'\r\n})\r\nexport class PointerPositionDirective implements OnInit, OnDestroy {\r\n\r\n  private lastTimeoutRequest;\r\n\r\n  /**\r\n   * Listener to the pointer move event\r\n   */\r\n  private pointerMoveListener: ListenerFunction;\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * Delay before emitting an event\r\n   */\r\n  @Input() pointerPositionDelay: number = 1000;\r\n\r\n  /**\r\n   * Event emitted when the pointer move, delayed by pointerMoveDelay\r\n   */\r\n  @Output() pointerPositionCoord = new EventEmitter<[number, number]>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  get mapProjection(): string {\r\n    return (this.component.map as IgoMap).projection;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private mediaService: MediaService\r\n  ) { }\r\n\r\n  /**\r\n   * Start listening to pointermove\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.listenToMapPointerMove();\r\n    this.listenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to pointermove\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.unlistenToMapPointerMove();\r\n    this.unlistenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * On map pointermove\r\n   */\r\n  private listenToMapPointerMove() {\r\n    this.pointerMoveListener = this.map.ol.on(\r\n      'pointermove',\r\n      (event: OlMapBrowserPointerEvent) => this.onPointerEvent(event, this.pointerPositionDelay)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * On map click\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onPointerEvent(event, 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map pointermove\r\n   */\r\n  private unlistenToMapPointerMove() {\r\n    this.map.ol.un(this.pointerMoveListener.type, this.pointerMoveListener.listener);\r\n    this.pointerMoveListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * emit delayed coordinate (longitude, latitude array) based on pointerMoveDelay or on click\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onPointerEvent(event: OlMapBrowserPointerEvent, delay: number) {\r\n    if (event.dragging || this.mediaService.isTouchScreen()) {return; }\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves\r\n      clearTimeout(this.lastTimeoutRequest);\r\n    }\r\n\r\n    const lonlat = transform(event.coordinate, this.mapProjection, 'EPSG:4326');\r\n    this.lastTimeoutRequest = setTimeout(() => {\r\n      this.pointerPositionCoord.emit(lonlat);\r\n    }, delay);\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  Self,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\n\r\nimport { transform } from 'ol/proj';\r\nimport { Subscription, BehaviorSubject, fromEvent } from 'rxjs';\r\nimport { MediaService } from '@igo2/core';\r\n/**\r\n * This directive return the pointer coordinate (on click or pointermove)\r\n * in [longitude, latitude], delayed by in input (pointerMoveDelay)\r\n * to avoid too many emitted values.\r\n * User needs to hold the key defined by pointerByKeyEventKeyCode to emit a coord.\r\n */\r\n@Directive({\r\n  selector: '[igoPointerPositionByKey]'\r\n})\r\nexport class PointerPositionByKeyDirective implements OnInit, OnDestroy {\r\n\r\n  private keyDown$$: Subscription;\r\n  private keyUp$$: Subscription;\r\n  private definedKeyIsDown$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private lastTimeoutRequest;\r\n\r\n  /**\r\n   * Listener to the pointer move event\r\n   */\r\n  private pointerMoveListener: ListenerFunction;\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * Delay before emitting an event\r\n   */\r\n  @Input() pointerPositionByKeyDelay: number = 1000;\r\n\r\n  /**\r\n   * The key pressed (must be hold) to trigger the output\r\n   */\r\n  @Input() pointerPositionByKeyCode: number = 17;\r\n\r\n  /**\r\n   * Event emitted when the pointer move, delayed by pointerMoveDelay\r\n   */\r\n  @Output() pointerPositionByKeyCoord = new EventEmitter<[number, number]>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  get mapProjection(): string {\r\n    return (this.component.map as IgoMap).projection;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private mediaService: MediaService\r\n  ) { }\r\n\r\n  /**\r\n   * Start listening to pointermove\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.listenToMapPointerMove();\r\n    this.listenToMapClick();\r\n    this.subscribeToKeyDown();\r\n    this.subscribeToKeyUp();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to pointermove\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.unlistenToMapPointerMove();\r\n    this.unlistenToMapClick();\r\n    this.unsubscribeToKeyDown();\r\n    this.unsubscribeToKeyUp();\r\n  }\r\n\r\n  /**\r\n   * On map pointermove\r\n   */\r\n  private listenToMapPointerMove() {\r\n    this.pointerMoveListener = this.map.ol.on(\r\n      'pointermove',\r\n      (event: OlMapBrowserPointerEvent) => this.onPointerEvent(event, this.pointerPositionByKeyDelay)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * On map click\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onPointerEvent(event, 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Subscribe to user defined key keyDown, hold down to activate the emit\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.unsubscribeToKeyDown();\r\n    this.keyDown$$ = fromEvent(document, 'keydown')\r\n    .subscribe((event: KeyboardEvent) => {\r\n      // On user defined key is down,\r\n      if (event.keyCode === this.pointerPositionByKeyCode) {\r\n        this.definedKeyIsDown$.next(true);\r\n        return;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Subscribe to user defined key keyUp, release to desactivate the emit\r\n   */\r\n  private subscribeToKeyUp() {\r\n    this.unsubscribeToKeyUp();\r\n    this.keyUp$$ = fromEvent(document, 'keyup')\r\n    .subscribe((event: KeyboardEvent) => {\r\n      // When user defined key is released,\r\n      if (event.keyCode === this.pointerPositionByKeyCode) {\r\n        this.definedKeyIsDown$.next(false);\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map pointermove\r\n   */\r\n  private unlistenToMapPointerMove() {\r\n    this.map.ol.un(this.pointerMoveListener.type, this.pointerMoveListener.listener);\r\n    this.pointerMoveListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n      this.keyDown$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key up\r\n   */\r\n  private unsubscribeToKeyUp() {\r\n    if (this.keyUp$$ !== undefined) {\r\n      this.keyUp$$.unsubscribe();\r\n      this.keyUp$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * emit delayed coordinate (longitude, latitude array) based on pointerMoveDelay or on click\r\n   * User must hold the defined key to allow the emit.\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onPointerEvent(event: OlMapBrowserPointerEvent, delay: number) {\r\n    if (event.dragging || this.mediaService.isTouchScreen()) {return; }\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves\r\n      clearTimeout(this.lastTimeoutRequest);\r\n    }\r\n\r\n    if (this.definedKeyIsDown$.value) {\r\n    const lonlat = transform(event.coordinate, this.mapProjection, 'EPSG:4326');\r\n    this.lastTimeoutRequest = setTimeout(() => {\r\n      this.pointerPositionByKeyCoord.emit(lonlat);\r\n    }, delay);\r\n  }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport proj4 from 'proj4';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Projection } from './projection.interfaces';\r\n\r\n/**\r\n * When injected, this service automatically registers and\r\n * projection defined in the application config. A custom projection\r\n * needs to be registered to be usable by OL.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectionService {\r\n\r\n  constructor(private config: ConfigService) {\r\n    const projections = this.config.getConfig('projections') || [];\r\n    projections.forEach((projection: Projection) => {\r\n      projection.alias = projection.alias ? projection.alias : projection.code;\r\n      this.registerProjection(projection);\r\n    });\r\n\r\n    // register all utm zones\r\n    for (let utmZone = 1; utmZone < 61; utmZone++) {\r\n      const code = utmZone < 10 ? `EPSG:3260${utmZone}` : `EPSG:326${utmZone}`;\r\n      const def = `+proj=utm +zone=${utmZone} +datum=WGS84 +units=m +no_defs`;\r\n      const proj: Projection = { code, def, extent : undefined};\r\n      this.registerProjection(proj);\r\n    }\r\n\r\n    // register all mtm zones\r\n    for (let mtmZone = 1; mtmZone < 11; mtmZone++) {\r\n      const code = mtmZone < 10 ? `EPSG:3218${mtmZone}` : `EPSG:321${80 + mtmZone}`;\r\n      let lon0;\r\n      if (Number(mtmZone) <= 2) {\r\n        lon0 = -50 - Number(mtmZone) * 3;\r\n      } else if (Number(mtmZone) >= 12) {\r\n        lon0 = -81 - (Number(mtmZone) - 12) * 3;\r\n      } else {\r\n        lon0 = -49.5 - Number(mtmZone) * 3;\r\n      }\r\n      const def = `+proj=tmerc +lat_0=0 +lon_0=${lon0} +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"`;\r\n      const proj: Projection = { code, def, extent : undefined};\r\n      this.registerProjection(proj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Define a proj4 projection and register it in OL\r\n   * @param projection Projection\r\n   */\r\n  registerProjection(projection: Projection) {\r\n    proj4.defs(projection.code, projection.def);\r\n    olproj4.register(proj4);\r\n    if (projection.extent) {\r\n      olproj.get(projection.code).setExtent(projection.extent);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-zoom-button',\r\n  templateUrl: './zoom-button.component.html',\r\n  styleUrls: ['./zoom-button.component.scss']\r\n})\r\nexport class ZoomButtonComponent {\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string;\r\n\r\n  get zoom(): number { return this.map.viewController.getZoom(); }\r\n\r\n  get minZoom(): number { return this.map.viewController.olView.getMinZoom() || 1; }\r\n\r\n  get maxZoom(): number { return this.map.viewController.olView.getMaxZoom(); }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-geolocate-button',\r\n  templateUrl: './geolocate-button.component.html',\r\n  styleUrls: ['./geolocate-button.component.scss']\r\n})\r\nexport class GeolocateButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, EventEmitter, Output, AfterViewInit } from '@angular/core';\r\nimport { IgoMap } from '../shared/map';\r\nimport { Observable, BehaviorSubject, Subscription, fromEvent } from 'rxjs';\r\nimport { debounceTime, startWith } from 'rxjs/operators';\r\nimport { ConfigService } from '@igo2/core';\r\n\r\n@Component({\r\n  selector: 'igo-offline-button',\r\n  templateUrl: './offline-button.component.html',\r\n  styleUrls: ['./offline-button.component.scss']\r\n})\r\n\r\nexport class OfflineButtonComponent {\r\n\r\n  btnStyle: string = 'baseStyle';\r\n  colorOff: string = 'rgb(255,255,255)';\r\n\r\n  @Output() change = new EventEmitter<boolean>();\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  @Input() public check: boolean = false;\r\n\r\n  get checked(): boolean {\r\n    return this.check;\r\n  }\r\n\r\n  public visible = false;\r\n\r\n  constructor(\r\n    private config: ConfigService\r\n    ) {\r\n    this.visible = this.config.getConfig('offlineButton') ? true : false;\r\n  }\r\n\r\n  onToggle() {\r\n    this.check = !this.check;\r\n    if (this.check) {\r\n      this.btnStyle = 'toggleStyle';\r\n    } else {\r\n      this.btnStyle = 'baseStyle';\r\n    }\r\n  }\r\n}\r\n","import {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationTriggerMetadata\r\n} from '@angular/animations';\r\n\r\nexport function baseLayersSwitcherSlideInOut(): AnimationTriggerMetadata {\r\n  return trigger('baseLayerSwitcherState', [\r\n    state(\r\n      'collapseIcon',\r\n      style({\r\n        height: '40px',\r\n        width: '40px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'collapseMap',\r\n      style({\r\n        height: '85px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'expand',\r\n      style({\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    transition('collapse => expand', animate('200ms')),\r\n    transition('expand => collapse', animate('200ms'))\r\n  ]);\r\n}\r\n","import { Component, Input, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MediaService, Media } from '@igo2/core';\r\nimport { Layer } from '../../layer';\r\nimport { IgoMap } from '../shared';\r\nimport { baseLayersSwitcherSlideInOut } from './baselayers-switcher.animation';\r\n\r\n@Component({\r\n  selector: 'igo-baselayers-switcher',\r\n  templateUrl: './baselayers-switcher.component.html',\r\n  styleUrls: ['./baselayers-switcher.component.scss'],\r\n  animations: [baseLayersSwitcherSlideInOut()]\r\n})\r\nexport class BaseLayersSwitcherComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get useStaticIcon(): boolean {\r\n    return this._useStaticIcon;\r\n  }\r\n  set useStaticIcon(value: boolean) {\r\n    this._useStaticIcon = value;\r\n  }\r\n  private _useStaticIcon: boolean;\r\n\r\n  public _baseLayers: Layer[] = [];\r\n  public expand = false;\r\n  public showButton = true;\r\n\r\n  private layers$$: Subscription;\r\n\r\n  constructor(private mediaService: MediaService) {\r\n    const media = this.mediaService.media$.value;\r\n    if (media === Media.Mobile && this.useStaticIcon === undefined) {\r\n      this.useStaticIcon = true;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(arrayLayers => {\r\n      this._baseLayers = arrayLayers.filter(l => l.baseLayer);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  collapseOrExpand() {\r\n    if (this.baseLayers.length > 1 || this.useStaticIcon) {\r\n      this.expand = !this.expand;\r\n    } else {\r\n      this.expand = false;\r\n    }\r\n  }\r\n\r\n  get baseLayers(): Layer[] {\r\n    const mapResolution = this.map.viewController.getResolution();\r\n    const mapZoom = this.map.viewController.getZoom();\r\n\r\n    const bl = this._baseLayers.filter(l => {\r\n      return (\r\n        (!l.options.maxResolution ||\r\n          mapResolution <= l.options.maxResolution) &&\r\n        (!l.options.minResolution || mapResolution >= l.options.minResolution) &&\r\n        (!l.options.source.options.maxZoom || mapZoom <= l.options.source.options.maxZoom) &&\r\n        (!l.options.source.options.minZoom || mapZoom >= l.options.source.options.minZoom)\r\n      );\r\n    });\r\n\r\n    const blHidden = bl.filter(l => !l.visible);\r\n    return blHidden.length + 1 === bl.length ? blHidden : bl;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  ApplicationRef\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-mini-basemap',\r\n  templateUrl: './mini-basemap.component.html',\r\n  styleUrls: ['./mini-basemap.component.scss']\r\n})\r\nexport class MiniBaseMapComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n    this.handleMoveEnd();\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get baseLayer(): Layer {\r\n    return this._baseLayer;\r\n  }\r\n  set baseLayer(value: Layer) {\r\n    this._baseLayer = value;\r\n    this.handleBaseLayerChanged(value);\r\n  }\r\n  private _baseLayer: Layer;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  @Input()\r\n  get display(): boolean {\r\n    return this._display;\r\n  }\r\n  set display(value: boolean) {\r\n    this._display = value;\r\n  }\r\n  private _display: boolean;\r\n\r\n  public basemap = new IgoMap({\r\n    controls: {},\r\n    interactions: false\r\n  });\r\n\r\n  @Input() title: string;\r\n\r\n  constructor(\r\n    private layerService: LayerService,\r\n    private appRef: ApplicationRef\r\n  ) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.map.ol.on('moveend', () => this.handleMoveEnd());\r\n    this.handleMoveEnd();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.ol.un('moveend', () => this.handleMoveEnd());\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.map.changeBaseLayer(baseLayer);\r\n    this.appRef.tick();\r\n  }\r\n\r\n  private handleMoveEnd() {\r\n    this.basemap.ol.setView(this.map.ol.getView());\r\n  }\r\n\r\n  private handleBaseLayerChanged(baselayer: Layer) {\r\n    this.basemap.removeAllLayers();\r\n\r\n    const options: any = Object.assign(\r\n      Object.create(baselayer.options),\r\n      baselayer.options,\r\n      {\r\n        visible: true,\r\n        baseLayer: false\r\n      }\r\n    );\r\n\r\n    const layer = this.layerService.createLayer(options);\r\n    this.basemap.addLayer(layer);\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-rotation-button',\r\n  templateUrl: './rotation-button.component.html',\r\n  styleUrls: ['./rotation-button.component.scss']\r\n})\r\nexport class RotationButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get showIfNoRotation(): boolean {\r\n    return this._showIfNoRotation;\r\n  }\r\n  set showIfNoRotation(value: boolean) {\r\n    this._showIfNoRotation = value;\r\n  }\r\n  private _showIfNoRotation: boolean;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  get rotated(): boolean {\r\n    return this.map.viewController.getRotation() !== 0;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  rotationStyle(radians): {} {\r\n    const rotation = 'rotate(' + radians + 'rad)';\r\n    return {\r\n      transform: rotation\r\n    };\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport * as olproj from 'ol/proj';\r\n\r\nexport class EsriStyleGenerator {\r\n  public _converters: any;\r\n  public _renderers: any;\r\n\r\n  constructor() {\r\n    this._converters = {};\r\n    this._converters.esriPMS = EsriStyleGenerator._convertEsriPMS;\r\n    this._converters.esriSFS = EsriStyleGenerator._convertEsriSFS;\r\n    this._converters.esriSLS = EsriStyleGenerator._convertEsriSLS;\r\n    this._converters.esriSMS = EsriStyleGenerator._convertEsriSMS;\r\n    this._converters.esriTS = EsriStyleGenerator._convertEsriTS;\r\n    this._renderers = {};\r\n    this._renderers.uniqueValue = this._renderUniqueValue;\r\n    this._renderers.simple = this._renderSimple;\r\n    this._renderers.classBreaks = this._renderClassBreaks;\r\n  }\r\n  static _convertPointToPixel(point) {\r\n    return point / 0.75;\r\n  }\r\n  static _transformColor(color): [number, number, number, number] {\r\n    // alpha channel is different, runs from 0-255 but in ol3 from 0-1\r\n    return [color[0], color[1], color[2], color[3] / 255];\r\n  }\r\n\r\n  static _getResolutionForScale(scale, units) {\r\n    const dpi = 96;\r\n    const mpu = olproj.METERS_PER_UNIT[units];\r\n    const inchesPerMeter = 39.3701;\r\n    return parseFloat(scale) / (mpu * inchesPerMeter * dpi);\r\n  }\r\n\r\n  /* convert an Esri Text Symbol */\r\n  static _convertEsriTS(symbol) {\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    const text = symbol.text !== undefined ? symbol.text : undefined;\r\n    return new olstyle.Style({\r\n      text: new olstyle.Text({\r\n        fill: new olstyle.Fill({\r\n          color: EsriStyleGenerator._transformColor(symbol.color)\r\n        }),\r\n        font:\r\n          symbol.font.style +\r\n          ' ' +\r\n          symbol.font.weight +\r\n          ' ' +\r\n          symbol.font.size +\r\n          ' px ' +\r\n          symbol.font.family,\r\n        textBaseline: symbol.verticalAlignment,\r\n        textAlign: symbol.horizontalAlignment,\r\n        offsetX: EsriStyleGenerator._convertPointToPixel(symbol.xoffset),\r\n        offsetY: EsriStyleGenerator._convertPointToPixel(symbol.yoffset),\r\n        rotation,\r\n        text\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Picture Marker Symbol */\r\n  static _convertEsriPMS(symbol) {\r\n    const src = 'data:' + symbol.contentType + ';base64, ' + symbol.imageData;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n\r\n    return new olstyle.Style({\r\n      image: new olstyle.Icon({\r\n        src,\r\n        rotation\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Simple Fill Symbol */\r\n  static _convertEsriSFS(symbol) {\r\n    // there is no support in openlayers currently for fill patterns, so style is not interpreted\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    return new olstyle.Style({\r\n      fill,\r\n      stroke\r\n    });\r\n  }\r\n  static _convertOutline(outline) {\r\n    let lineDash;\r\n    const color = EsriStyleGenerator._transformColor(outline.color);\r\n    if (outline.style === 'esriSLSDash') {\r\n      lineDash = [5];\r\n    } else if (outline.style === 'esriSLSDashDot') {\r\n      lineDash = [5, 5, 1, 2];\r\n    } else if (outline.style === 'esriSLSDashDotDot') {\r\n      lineDash = [5, 5, 1, 2, 1, 2];\r\n    } else if (outline.style === 'esriSLSDot') {\r\n      lineDash = [1, 2];\r\n    } else if (outline.style === 'esriSLSNull') {\r\n      // line not visible, make color fully transparent\r\n      color[3] = 0;\r\n    }\r\n    return new olstyle.Stroke({\r\n      color,\r\n      lineDash,\r\n      width: EsriStyleGenerator._convertPointToPixel(outline.width)\r\n    });\r\n  }\r\n  /* convert an Esri Simple Line Symbol */\r\n  static _convertEsriSLS(symbol) {\r\n    return new olstyle.Style({\r\n      stroke: EsriStyleGenerator._convertOutline(symbol)\r\n    });\r\n  }\r\n  static _transformAngle(angle) {\r\n    if (angle === 0 || angle === undefined) {\r\n      return undefined;\r\n    }\r\n    const normalRad = (angle * Math.PI) / 180;\r\n    const ol3Rad = -normalRad + Math.PI / 2;\r\n    if (ol3Rad < 0) {\r\n      return 2 * Math.PI + ol3Rad;\r\n    } else {\r\n      return ol3Rad;\r\n    }\r\n  }\r\n  /* convert an Esri Simple Marker Symbol */\r\n  static _convertEsriSMS(symbol) {\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    const radius = EsriStyleGenerator._convertPointToPixel(symbol.size) / 2;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    if (symbol.style === 'esriSMSCircle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.Circle({\r\n          radius,\r\n          fill,\r\n          stroke\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSCross') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSDiamond') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSSquare') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSX') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSTriangle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 3,\r\n          radius,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  _convertLabelingInfo(labelingInfo, mapUnits) {\r\n    const styles = [];\r\n    for (let i = 0, ii = labelingInfo.length; i < ii; ++i) {\r\n      const labelExpression = labelingInfo[i].labelExpression;\r\n      // only limited support for label expressions\r\n      const field = labelExpression.substr(\r\n        labelExpression.indexOf('[') + 1,\r\n        labelExpression.indexOf(']') - 1\r\n      );\r\n      const symbol = labelingInfo[i].symbol;\r\n      const maxScale = labelingInfo[i].maxScale;\r\n      const minScale = labelingInfo[i].minScale;\r\n      let minResolution = null;\r\n      if (maxScale !== 0) {\r\n        minResolution = EsriStyleGenerator._getResolutionForScale(\r\n          maxScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      let maxResolution = null;\r\n      if (minScale !== 0) {\r\n        maxResolution = EsriStyleGenerator._getResolutionForScale(\r\n          minScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      styles.push(\r\n        (() => {\r\n          return function(feature, resolution) {\r\n            let visible = true;\r\n            if (this.minResolution !== null && this.maxResolution !== null) {\r\n              visible =\r\n                resolution < this.maxResolution &&\r\n                resolution >= this.minResolution;\r\n            } else if (this.minResolution !== null) {\r\n              visible = resolution >= this.minResolution;\r\n            } else if (this.maxResolution !== null) {\r\n              visible = resolution < this.maxResolution;\r\n            }\r\n            if (visible) {\r\n              const value = feature.get(this.field);\r\n              this.style.getText().setText(value);\r\n              return [this.style];\r\n            }\r\n          };\r\n        })().bind({\r\n          minResolution,\r\n          maxResolution,\r\n          field,\r\n          style\r\n        })\r\n      );\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  _renderSimple(renderer) {\r\n    const style = this._converters[renderer.symbol.type].call(\r\n      this,\r\n      renderer.symbol\r\n    );\r\n    return (() => {\r\n      return () => {\r\n        return [style];\r\n      };\r\n    })();\r\n  }\r\n  _renderClassBreaks(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    const defaultStyle = this._converters[defaultSymbol.type].call(\r\n      this,\r\n      defaultSymbol\r\n    );\r\n    const field = renderer.field;\r\n    const classes = [];\r\n    for (let i = 0, ii = renderer.classBreakInfos.length; i < ii; ++i) {\r\n      const classBreakInfo = renderer.classBreakInfos[i];\r\n      let min;\r\n      if (\r\n        classBreakInfo.classMinValue === null ||\r\n        classBreakInfo.classMinValue === undefined\r\n      ) {\r\n        if (i === 0) {\r\n          min = renderer.minValue;\r\n        } else {\r\n          min = renderer.classBreakInfos[i - 1].classMaxValue;\r\n        }\r\n      } else {\r\n        min = classBreakInfo.classMinValue;\r\n      }\r\n      const max = classBreakInfo.classMaxValue;\r\n      const symbol = classBreakInfo.symbol;\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      classes.push({ min, max, style });\r\n    }\r\n    return (() => {\r\n      return (feature) => {\r\n        const value = feature.get(field);\r\n        for (let i = 0, ii = classes.length; i < ii; ++i) {\r\n          let condition;\r\n          if (i === 0) {\r\n            condition = value >= classes[i].min && value <= classes[i].max;\r\n          } else {\r\n            condition = value > classes[i].min && value <= classes[i].max;\r\n          }\r\n          if (condition) {\r\n            return [classes[i].style];\r\n          }\r\n        }\r\n        return [defaultStyle];\r\n      };\r\n    })();\r\n  }\r\n  _renderUniqueValue(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    let defaultStyle = [];\r\n    if (defaultSymbol) {\r\n      defaultStyle = [\r\n        this._converters[defaultSymbol.type].call(this, defaultSymbol)\r\n      ];\r\n    }\r\n    const field = renderer.field1;\r\n    const infos = renderer.uniqueValueInfos;\r\n    const me = this;\r\n    return (() => {\r\n      const hash = {};\r\n      for (let i = 0, ii = infos.length; i < ii; ++i) {\r\n        const info = infos[i];\r\n        const symbol = info.symbol;\r\n        hash[info.value] = [me._converters[symbol.type].call(me, symbol)];\r\n      }\r\n\r\n      return (feature) => {\r\n        const style = hash[feature.get(field)];\r\n        return style ? style : defaultStyle;\r\n      };\r\n    })();\r\n  }\r\n  generateStyle(layerInfo, mapUnits) {\r\n    const drawingInfo = layerInfo.drawingInfo;\r\n    let styleFunctions = [];\r\n    const drawingInfoStyle = this._renderers[drawingInfo.renderer.type].call(\r\n      this,\r\n      drawingInfo.renderer\r\n    );\r\n    if (drawingInfoStyle !== undefined) {\r\n      styleFunctions.push(drawingInfoStyle);\r\n    }\r\n    if (layerInfo.labelingInfo) {\r\n      const labelingInfoStyleFunctions = this._convertLabelingInfo(\r\n        layerInfo.labelingInfo,\r\n        mapUnits\r\n      );\r\n      styleFunctions = styleFunctions.concat(labelingInfoStyleFunctions);\r\n    }\r\n    if (styleFunctions.length === 1) {\r\n      return styleFunctions[0];\r\n    } else {\r\n      return (() => {\r\n        return (feature, resolution) => {\r\n          let styles = [];\r\n          for (let i = 0, ii = styleFunctions.length; i < ii; ++i) {\r\n            const result = styleFunctions[i].call(null, feature, resolution);\r\n            if (result) {\r\n              styles = styles.concat(result);\r\n            }\r\n          }\r\n          return styles;\r\n        };\r\n      })();\r\n    }\r\n  }\r\n}\r\n","export enum TimeFilterType {\r\n    DATE = 'date',\r\n    TIME = 'time',\r\n    DATETIME = 'datetime',\r\n    YEAR = 'year',\r\n}\r\n\r\nexport enum TimeFilterStyle {\r\n    CALENDAR = 'calendar',\r\n    SLIDER = 'slider',\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Cacheable } from 'ngx-cacheable';\r\n\r\nimport { WMSCapabilities, WMTSCapabilities } from 'ol/format';\r\nimport { optionsFromCapabilities } from 'ol/source/WMTS.js';\r\nimport olAttribution from 'ol/control/Attribution';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { getResolutionFromScale } from '../../map';\r\nimport { EsriStyleGenerator } from '../utils/esri-style-generator';\r\nimport {\r\n  QueryFormat,\r\n  QueryFormatMimeType\r\n} from '../../query/shared/query.enums';\r\n\r\nimport {\r\n  WMTSDataSourceOptions,\r\n  WMSDataSourceOptions,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSourceOptions\r\n} from './datasources';\r\nimport {\r\n  LegendOptions,\r\n  ItemStyleOptions\r\n} from '../../layer/shared/layers/layer.interface';\r\nimport {\r\n  TimeFilterType,\r\n  TimeFilterStyle\r\n} from '../../filter/shared/time-filter.enum';\r\n\r\nexport enum TypeCapabilities {\r\n  wms = 'wms',\r\n  wmts = 'wmts'\r\n}\r\n\r\nexport type TypeCapabilitiesStrings = keyof typeof TypeCapabilities;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CapabilitiesService {\r\n  private parsers = {\r\n    wms: new WMSCapabilities(),\r\n    wmts: new WMTSCapabilities()\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getWMSOptions(\r\n    baseOptions: WMSDataSourceOptions\r\n  ): Observable<WMSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = (baseOptions.params as any).VERSION;\r\n\r\n    return this.getCapabilities('wms', url, version).pipe(\r\n      map((capabilities: any) => {\r\n        return capabilities\r\n          ? this.parseWMSOptions(baseOptions, capabilities)\r\n          : undefined;\r\n      })\r\n    );\r\n  }\r\n\r\n  getWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = baseOptions.version;\r\n\r\n    const options = this.getCapabilities('wmts', url, version).pipe(\r\n      map((capabilities: any) => {\r\n        return capabilities\r\n          ? this.parseWMTSOptions(baseOptions, capabilities)\r\n          : undefined;\r\n      })\r\n    );\r\n\r\n    return options;\r\n  }\r\n\r\n  getCartoOptions(\r\n    baseOptions: CartoDataSourceOptions\r\n  ): Observable<CartoDataSourceOptions> {\r\n    const baseUrl =\r\n      'https://' +\r\n      baseOptions.account +\r\n      '.carto.com/api/v2/viz/' +\r\n      baseOptions.mapId +\r\n      '/viz.json';\r\n\r\n    return this.http\r\n      .jsonp(baseUrl, 'callback')\r\n      .pipe(\r\n        map((cartoOptions: any) =>\r\n          this.parseCartoOptions(baseOptions, cartoOptions)\r\n        )\r\n      );\r\n  }\r\n\r\n  getArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const modifiedUrl = baseOptions.url.replace('FeatureServer', 'MapServer');\r\n    const legendUrl = modifiedUrl + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legend = this.http.get(legendUrl).pipe(\r\n      map((res: any) => res),\r\n      catchError(err => {\r\n        console.log('No legend associated with this Feature Service');\r\n        return of(err);\r\n      })\r\n    );\r\n    return forkJoin([arcgisOptions, legend]).pipe(\r\n      map((res: any) => {\r\n        return this.parseArcgisOptions(baseOptions, res[0], res[1]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const legendUrl = baseOptions.url + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legendInfo = this.http.get(legendUrl);\r\n\r\n    return forkJoin([arcgisOptions, legendInfo]).pipe(\r\n      map((res: any) =>\r\n        this.parseTileArcgisOptions(baseOptions, res[0], res[1])\r\n      )\r\n    );\r\n  }\r\n\r\n  @Cacheable({\r\n    maxCacheCount: 20\r\n  })\r\n  getCapabilities(\r\n    service: TypeCapabilitiesStrings,\r\n    baseUrl: string,\r\n    version?: string\r\n  ): Observable<any> {\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        request: 'GetCapabilities',\r\n        service: service.toUpperCase(),\r\n        version: version || '1.3.0',\r\n        _i: 'true'\r\n      }\r\n    });\r\n\r\n    const request = this.http.get(baseUrl, {\r\n      params,\r\n      responseType: 'text'\r\n    });\r\n\r\n    return request.pipe(\r\n      map(res => {\r\n        try {\r\n          return this.parsers[service].read(res);\r\n        } catch (e) {\r\n          return undefined;\r\n        }\r\n      }),\r\n      catchError(e => {\r\n        e.error.caught = true;\r\n        throw e;\r\n      })\r\n    );\r\n  }\r\n\r\n  private parseWMSOptions(\r\n    baseOptions: WMSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMSDataSourceOptions {\r\n    const layers = (baseOptions.params as any).LAYERS;\r\n    const layer = this.findDataSourceInCapabilities(\r\n      capabilities.Capability.Layer,\r\n      layers\r\n    );\r\n\r\n    if (!layer) {\r\n      throw {\r\n        error: {\r\n          message: 'Layer not found'\r\n        }\r\n      };\r\n    }\r\n    const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n    const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n    const keywordList = layer.KeywordList ? layer.KeywordList : undefined;\r\n    let queryable = layer.queryable;\r\n    const timeFilter = this.getTimeFilter(layer);\r\n    const timeFilterable = timeFilter && Object.keys(timeFilter).length > 0;\r\n    const legendOptions = layer.Style ? this.getStyle(layer.Style) : undefined;\r\n\r\n    let queryFormat: QueryFormat;\r\n    const queryFormatMimeTypePriority = [\r\n      QueryFormatMimeType.GEOJSON,\r\n      QueryFormatMimeType.GEOJSON2,\r\n      QueryFormatMimeType.GML3,\r\n      QueryFormatMimeType.GML2,\r\n      QueryFormatMimeType.JSON,\r\n      QueryFormatMimeType.HTML\r\n    ];\r\n\r\n    for (const mimeType of queryFormatMimeTypePriority) {\r\n      if (\r\n        capabilities.Capability.Request.GetFeatureInfo.Format.indexOf(\r\n          mimeType\r\n        ) !== -1\r\n      ) {\r\n        const keyEnum = Object.keys(QueryFormatMimeType).find(\r\n          key => QueryFormatMimeType[key] === mimeType\r\n        );\r\n        queryFormat = QueryFormat[keyEnum];\r\n        break;\r\n      }\r\n    }\r\n    if (!queryFormat) {\r\n      queryable = false;\r\n    }\r\n\r\n    const options: WMSDataSourceOptions = ObjectUtils.removeUndefined({\r\n      _layerOptionsFromSource: {\r\n        title: layer.Title,\r\n        maxResolution: getResolutionFromScale(layer.MaxScaleDenominator),\r\n        minResolution: getResolutionFromScale(layer.MinScaleDenominator),\r\n        metadata: {\r\n          url: metadata ? metadata.OnlineResource : undefined,\r\n          extern: metadata ? true : undefined,\r\n          abstract,\r\n          keywordList\r\n        },\r\n        legendOptions\r\n      },\r\n      queryable,\r\n      queryFormat,\r\n      timeFilter: timeFilterable ? timeFilter : undefined,\r\n      timeFilterable: timeFilterable ? true : undefined\r\n    });\r\n\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMTSDataSourceOptions {\r\n\r\n    // Put Title source in _layerOptionsFromSource. (For source & catalog in _layerOptionsFromSource, if not already on config)\r\n    const layer = capabilities.Contents.Layer.find(el => el.Identifier === baseOptions.layer);\r\n\r\n    const options = optionsFromCapabilities(capabilities, baseOptions);\r\n\r\n    const ouputOptions = Object.assign(options, baseOptions);\r\n    const sourceOptions = ObjectUtils.removeUndefined({\r\n      _layerOptionsFromSource: {\r\n        title: layer.Title}});\r\n\r\n    return ObjectUtils.mergeDeep(sourceOptions, ouputOptions);\r\n  }\r\n\r\n  private parseCartoOptions(\r\n    baseOptions: CartoDataSourceOptions,\r\n    cartoOptions: any\r\n  ): CartoDataSourceOptions {\r\n    const layers = [];\r\n    const params = cartoOptions.layers[1].options.layer_definition;\r\n    params.layers.forEach(element => {\r\n      layers.push({\r\n        type: element.type.toLowerCase(),\r\n        options: element.options,\r\n        legend: element.legend\r\n      });\r\n    });\r\n    const options = ObjectUtils.removeUndefined({\r\n      config: {\r\n        version: params.version,\r\n        layers\r\n      }\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend?: any\r\n  ): ArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const styleGenerator = new EsriStyleGenerator();\r\n    const units = arcgisOptions.units === 'esriMeters' ? 'm' : 'degrees';\r\n    const style = styleGenerator.generateStyle(arcgisOptions, units);\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: TimeFilterType.DATETIME,\r\n        style: TimeFilterStyle.CALENDAR\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        legendInfo,\r\n        style,\r\n        timeFilter,\r\n        timeExtent,\r\n        attributions\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend: any\r\n  ): TileArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: TimeFilterType.DATETIME,\r\n        style: TimeFilterStyle.CALENDAR\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        layers: 'show:' + baseOptions.layer,\r\n        time: timeExtent\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params,\r\n      legendInfo,\r\n      timeFilter,\r\n      attributions\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private findDataSourceInCapabilities(layerArray, name): any {\r\n    if (Array.isArray(layerArray)) {\r\n      let layer;\r\n      layerArray.find(value => {\r\n        layer = this.findDataSourceInCapabilities(value, name);\r\n        return layer !== undefined;\r\n      }, this);\r\n\r\n      return layer;\r\n    } else if (layerArray.Layer) {\r\n      return this.findDataSourceInCapabilities(layerArray.Layer, name);\r\n    } else {\r\n      if (layerArray.Name && layerArray.Name === name) {\r\n        return layerArray;\r\n      }\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getTimeFilter(layer) {\r\n    let dimension;\r\n\r\n    if (layer.Dimension) {\r\n      const timeFilter: any = {};\r\n      dimension = layer.Dimension[0];\r\n\r\n      if (dimension.values) {\r\n        const minMaxDim = dimension.values.split('/');\r\n        timeFilter.min = minMaxDim[0] !== undefined ? minMaxDim[0] : undefined;\r\n        timeFilter.max = minMaxDim[1] !== undefined ? minMaxDim[1] : undefined;\r\n        timeFilter.step = minMaxDim[2] !== undefined ? minMaxDim[2] : undefined;\r\n      }\r\n\r\n      if (dimension.default) {\r\n        timeFilter.value = dimension.default;\r\n      }\r\n      return timeFilter;\r\n    }\r\n  }\r\n\r\n  getStyle(Style): LegendOptions {\r\n    const styleOptions: ItemStyleOptions[] = Style.map(style => {\r\n      return {\r\n        name: style.Name,\r\n        title: style.Title\r\n      };\r\n    })\r\n      // Handle repeat the style \"default\" in output  (MapServer or OpenLayer)\r\n      .filter(\r\n        (item, index, self) =>\r\n          self.findIndex((i: ItemStyleOptions) => i.name === item.name) ===\r\n          index\r\n      );\r\n\r\n    const legendOptions: LegendOptions = {\r\n      stylesAvailable: styleOptions\r\n    } as LegendOptions;\r\n\r\n    return legendOptions;\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { WMSDataSourceOptions } from '../datasources';\r\n\r\nexport abstract class OptionsService {\r\n  abstract getWMSOptions(\r\n    _baseOptions: WMSDataSourceOptions\r\n  ): Observable<WMSDataSourceOptions>;\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { forkJoin, of, Observable, BehaviorSubject } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { CapabilitiesService } from './capabilities.service';\r\nimport { OptionsService } from './options/options.service';\r\nimport { WFSService } from './datasources/wfs.service';\r\nimport {\r\n  DataSource,\r\n  OSMDataSource,\r\n  OSMDataSourceOptions,\r\n  FeatureDataSource,\r\n  FeatureDataSourceOptions,\r\n  XYZDataSource,\r\n  XYZDataSourceOptions,\r\n  WFSDataSource,\r\n  WFSDataSourceOptions,\r\n  WMTSDataSource,\r\n  WMTSDataSourceOptions,\r\n  WMSDataSource,\r\n  WMSDataSourceOptions,\r\n  CartoDataSource,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSource,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSource,\r\n  TileArcGISRestDataSourceOptions,\r\n  WebSocketDataSource,\r\n  AnyDataSourceOptions,\r\n  MVTDataSource,\r\n  MVTDataSourceOptions,\r\n  ClusterDataSource,\r\n  ClusterDataSourceOptions\r\n} from './datasources';\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { LanguageService, MessageService } from '@igo2/core';\r\nimport { ProjectionService } from '../../map/shared/projection.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSourceService {\r\n  public datasources$ = new BehaviorSubject<DataSource[]>([]);\r\n\r\n  constructor(\r\n    private capabilitiesService: CapabilitiesService,\r\n    @Optional() private optionsService: OptionsService,\r\n    private wfsDataSourceService: WFSService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private projectionService: ProjectionService\r\n  ) {}\r\n\r\n  createAsyncDataSource(context: AnyDataSourceOptions): Observable<DataSource> {\r\n    if (!context.type) {\r\n      console.error(context);\r\n      throw new Error('Datasource needs a type');\r\n    }\r\n    let dataSource;\r\n    switch (context.type.toLowerCase()) {\r\n      case 'osm':\r\n        dataSource = this.createOSMDataSource(context as OSMDataSourceOptions);\r\n        break;\r\n      case 'vector':\r\n        dataSource = this.createFeatureDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'wfs':\r\n        dataSource = this.createWFSDataSource(context as WFSDataSourceOptions);\r\n        break;\r\n      case 'wms':\r\n        const wmsContext = context as WMSDataSourceOptions;\r\n        ObjectUtils.removeDuplicateCaseInsensitive(wmsContext.params);\r\n        dataSource = this.createWMSDataSource(wmsContext);\r\n        break;\r\n      case 'wmts':\r\n        dataSource = this.createWMTSDataSource(\r\n          context as WMTSDataSourceOptions\r\n        );\r\n        break;\r\n      case 'xyz':\r\n        dataSource = this.createXYZDataSource(context as XYZDataSourceOptions);\r\n        break;\r\n      case 'carto':\r\n        dataSource = this.createCartoDataSource(\r\n          context as CartoDataSourceOptions\r\n        );\r\n        break;\r\n      case 'arcgisrest':\r\n        dataSource = this.createArcGISRestDataSource(\r\n          context as ArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'websocket':\r\n        dataSource = this.createWebSocketDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'mvt':\r\n        dataSource = this.createMVTDataSource(context as MVTDataSourceOptions);\r\n        break;\r\n      case 'tilearcgisrest':\r\n        dataSource = this.createTileArcGISRestDataSource(\r\n          context as TileArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'cluster':\r\n        dataSource = this.createClusterDataSource(\r\n          context as ClusterDataSourceOptions\r\n        );\r\n        break;\r\n      default:\r\n        console.error(context);\r\n        throw new Error('Invalid datasource type');\r\n    }\r\n\r\n    this.datasources$.next(this.datasources$.value.concat([dataSource]));\r\n\r\n    return dataSource;\r\n  }\r\n\r\n  private createOSMDataSource(\r\n    context: OSMDataSourceOptions\r\n  ): Observable<OSMDataSource> {\r\n    return new Observable(d => d.next(new OSMDataSource(context)));\r\n  }\r\n\r\n  private createFeatureDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<FeatureDataSource> {\r\n    return new Observable(d => d.next(new FeatureDataSource(context)));\r\n  }\r\n\r\n  private createWebSocketDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<WebSocketDataSource> {\r\n    return new Observable(d => d.next(new WebSocketDataSource(context)));\r\n  }\r\n\r\n  private createWFSDataSource(\r\n    context: WFSDataSourceOptions\r\n  ): Observable<WFSDataSource> {\r\n    return new Observable(d =>\r\n      d.next(new WFSDataSource(context, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMSDataSource(context: WMSDataSourceOptions): Observable<any> {\r\n    const observables = [];\r\n    if (context.optionsFromCapabilities) {\r\n      observables.push(\r\n        this.capabilitiesService.getWMSOptions(context).pipe(\r\n          catchError(e => {\r\n            const title = this.languageService.translate.instant(\r\n              'igo.geo.dataSource.unavailableTitle'\r\n            );\r\n            const message = this.languageService.translate.instant(\r\n              'igo.geo.dataSource.unavailable',\r\n              { value: context.params.LAYERS }\r\n            );\r\n\r\n            this.messageService.error(message, title);\r\n            throw e;\r\n          })\r\n        )\r\n      );\r\n    }\r\n\r\n    if (this.optionsService && context.optionsFromApi === true) {\r\n      observables.push(\r\n        this.optionsService.getWMSOptions(context).pipe(\r\n          catchError(e => {\r\n            e.error.toDisplay = true;\r\n            e.error.title = this.languageService.translate.instant(\r\n              'igo.geo.dataSource.unavailableTitle'\r\n            );\r\n            e.error.message = this.languageService.translate.instant(\r\n              'igo.geo.dataSource.optionsApiUnavailable'\r\n            );\r\n            return of({});\r\n          })\r\n        )\r\n      );\r\n    }\r\n\r\n    observables.push(of(context));\r\n\r\n    return forkJoin(observables).pipe(\r\n      map((options: WMSDataSourceOptions[]) => {\r\n        const optionsMerged = options.reduce((a, b) =>\r\n          ObjectUtils.mergeDeep(a, b)\r\n        );\r\n        return new WMSDataSource(optionsMerged, this.wfsDataSourceService);\r\n      }),\r\n      catchError(() => {\r\n        return of(undefined);\r\n      })\r\n    );\r\n  }\r\n\r\n  private createWMTSDataSource(\r\n    context: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService.getWMTSOptions(context).pipe(\r\n        map((options: WMTSDataSourceOptions) => {\r\n          return options ? new WMTSDataSource(options) : undefined;\r\n        }),\r\n        catchError(() => {\r\n          const title = this.languageService.translate.instant(\r\n            'igo.geo.dataSource.unavailableTitle'\r\n          );\r\n          const message = this.languageService.translate.instant(\r\n            'igo.geo.dataSource.unavailable',\r\n            { value: context.layer }\r\n          );\r\n\r\n          this.messageService.error(message, title);\r\n          return of(undefined);\r\n        })\r\n      );\r\n    }\r\n\r\n    return new Observable(d => d.next(new WMTSDataSource(context)));\r\n  }\r\n\r\n  private createXYZDataSource(\r\n    context: XYZDataSourceOptions\r\n  ): Observable<XYZDataSource> {\r\n    return new Observable(d => d.next(new XYZDataSource(context)));\r\n  }\r\n\r\n  private createCartoDataSource(\r\n    context: CartoDataSourceOptions\r\n  ): Observable<CartoDataSource> {\r\n    if (context.mapId) {\r\n      return this.capabilitiesService\r\n        .getCartoOptions(context)\r\n        .pipe(\r\n          map((options: CartoDataSourceOptions) => new CartoDataSource(options))\r\n        );\r\n    }\r\n    return new Observable(d => d.next(new CartoDataSource(context)));\r\n  }\r\n\r\n  private createArcGISRestDataSource(\r\n    context: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: ArcGISRestDataSourceOptions) =>\r\n            new ArcGISRestDataSource(options)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createTileArcGISRestDataSource(\r\n    context: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getTileArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: TileArcGISRestDataSourceOptions) =>\r\n            new TileArcGISRestDataSource(options)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createMVTDataSource(\r\n    context: MVTDataSourceOptions\r\n  ): Observable<MVTDataSource> {\r\n    return new Observable(d => d.next(new MVTDataSource(context)));\r\n  }\r\n\r\n  private createClusterDataSource(\r\n    context: ClusterDataSourceOptions\r\n  ): Observable<ClusterDataSource> {\r\n    return new Observable(d => d.next(new ClusterDataSource(context)));\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { WMSDataSourceOptions } from '../datasources';\r\nimport { OptionsService } from './options.service';\r\nimport { OptionsApiOptions } from './options-api.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OptionsApiService extends OptionsService {\r\n  private urlApi: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: OptionsApiOptions = {}\r\n  ) {\r\n    super();\r\n    this.urlApi = options.url || this.urlApi;\r\n  }\r\n\r\n  getWMSOptions(\r\n    baseOptions: WMSDataSourceOptions\r\n  ): Observable<WMSDataSourceOptions> {\r\n    if (!this.urlApi) {\r\n      return of({} as WMSDataSourceOptions);\r\n    }\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        type: baseOptions.type,\r\n        url: baseOptions.url,\r\n        layers: baseOptions.params.LAYERS\r\n      }\r\n    });\r\n\r\n    const request = this.http.get(this.urlApi, {\r\n      params\r\n    });\r\n\r\n    return request.pipe(\r\n      map(\r\n        (res: {\r\n          sourceOptions: WMSDataSourceOptions;\r\n          layerOptions: { [keys: string]: string };\r\n        }) => {\r\n          if (!res || !res.sourceOptions) {\r\n            return {} as WMSDataSourceOptions;\r\n          }\r\n          res.sourceOptions._layerOptionsFromSource = res.layerOptions;\r\n          return res.sourceOptions;\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport stylefunction from 'ol-mapbox-style/stylefunction';\r\nimport { AuthInterceptor } from '@igo2/auth';\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport {\r\n  OSMDataSource,\r\n  FeatureDataSource,\r\n  XYZDataSource,\r\n  WFSDataSource,\r\n  WMTSDataSource,\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  ArcGISRestDataSource,\r\n  TileArcGISRestDataSource,\r\n  WebSocketDataSource,\r\n  MVTDataSource,\r\n  ClusterDataSource\r\n} from '../../datasource';\r\n\r\nimport { DataSourceService } from '../../datasource/shared/datasource.service';\r\n\r\nimport {\r\n  Layer,\r\n  ImageLayer,\r\n  ImageLayerOptions,\r\n  TileLayer,\r\n  TileLayerOptions,\r\n  VectorLayer,\r\n  VectorLayerOptions,\r\n  AnyLayerOptions,\r\n  VectorTileLayer,\r\n  VectorTileLayerOptions\r\n} from './layers';\r\n\r\nimport { StyleService } from './style.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private styleService: StyleService,\r\n    private dataSourceService: DataSourceService,\r\n    @Optional() private authInterceptor: AuthInterceptor\r\n  ) {}\r\n\r\n  createLayer(layerOptions: AnyLayerOptions): Layer {\r\n    if (!layerOptions.source) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      layerOptions.source.options &&\r\n      layerOptions.source.options._layerOptionsFromSource\r\n    ) {\r\n      layerOptions = ObjectUtils.mergeDeep(\r\n        layerOptions.source.options._layerOptionsFromSource,\r\n        layerOptions || {}\r\n      );\r\n    }\r\n\r\n    let layer;\r\n    switch (layerOptions.source.constructor) {\r\n      case OSMDataSource:\r\n      case WMTSDataSource:\r\n      case XYZDataSource:\r\n      case CartoDataSource:\r\n      case TileArcGISRestDataSource:\r\n        layer = this.createTileLayer(layerOptions as TileLayerOptions);\r\n        break;\r\n      case FeatureDataSource:\r\n      case WFSDataSource:\r\n      case ArcGISRestDataSource:\r\n      case WebSocketDataSource:\r\n      case ClusterDataSource:\r\n        layer = this.createVectorLayer(layerOptions as VectorLayerOptions);\r\n        break;\r\n      case WMSDataSource:\r\n        layer = this.createImageLayer(layerOptions as ImageLayerOptions);\r\n        break;\r\n      case MVTDataSource:\r\n        layer = this.createVectorTileLayer(\r\n          layerOptions as VectorTileLayerOptions\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return layer;\r\n  }\r\n\r\n  createAsyncLayer(layerOptions: AnyLayerOptions): Observable<Layer> {\r\n    if (layerOptions.source) {\r\n      return new Observable(d => d.next(this.createLayer(layerOptions)));\r\n    }\r\n\r\n    return this.dataSourceService\r\n      .createAsyncDataSource(layerOptions.sourceOptions)\r\n      .pipe(\r\n        map(source => {\r\n          if (source === undefined) {\r\n            return undefined;\r\n          }\r\n          return this.createLayer(Object.assign(layerOptions, { source }));\r\n        })\r\n      );\r\n  }\r\n\r\n  private createImageLayer(layerOptions: ImageLayerOptions): ImageLayer {\r\n    return new ImageLayer(layerOptions, this.authInterceptor);\r\n  }\r\n\r\n  private createTileLayer(layerOptions: TileLayerOptions): TileLayer {\r\n    return new TileLayer(layerOptions);\r\n  }\r\n\r\n  private createVectorLayer(layerOptions: VectorLayerOptions): VectorLayer {\r\n    let style;\r\n    let olLayer;\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ArcGISRestDataSource) {\r\n      const source = layerOptions.source as ArcGISRestDataSource;\r\n      style = source.options.params.style;\r\n    } else if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createStyleByAttribute(\r\n          feature,\r\n          layerOptions.styleByAttribute\r\n        );\r\n      };\r\n      olLayer = new VectorLayer(layerOptions);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ClusterDataSource) {\r\n      const serviceStyle = this.styleService;\r\n      const baseStyle = layerOptions.clusterBaseStyle;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createClusterStyle(\r\n          feature,\r\n          layerOptions.clusterParam,\r\n          baseStyle\r\n        );\r\n      };\r\n      olLayer = new VectorLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n\r\n    if (!olLayer) {\r\n      olLayer = new VectorLayer(layerOptionsOl);\r\n    }\r\n\r\n    this.applyMapboxStyle(olLayer, layerOptionsOl);\r\n\r\n    return olLayer;\r\n  }\r\n\r\n  private createVectorTileLayer(\r\n    layerOptions: VectorTileLayerOptions\r\n  ): VectorTileLayer {\r\n    let style;\r\n    let olLayer;\r\n\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createStyleByAttribute(\r\n          feature,\r\n          layerOptions.styleByAttribute\r\n        );\r\n      };\r\n      olLayer = new VectorTileLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n\r\n    if (!olLayer) {\r\n      olLayer = new VectorTileLayer(layerOptionsOl);\r\n    }\r\n\r\n    this.applyMapboxStyle(olLayer, layerOptionsOl);\r\n    return olLayer;\r\n  }\r\n\r\n  private applyMapboxStyle(layer: Layer, layerOptions: VectorTileLayerOptions) {\r\n    if (layerOptions.mapboxStyle) {\r\n      this.getMapboxGlStyle(layerOptions.mapboxStyle.url).subscribe(res => {\r\n        stylefunction(layer.ol, res, layerOptions.mapboxStyle.source);\r\n      });\r\n    }\r\n  }\r\n\r\n  public getMapboxGlStyle(url: string) {\r\n    return this.http.get(url).pipe(\r\n      map((res: any) => res),\r\n      catchError(err => {\r\n        console.log('No style was found');\r\n        return of(err);\r\n      })\r\n    );\r\n  }\r\n}\r\n","export enum CatalogItemType {\r\n  Layer = 'layer',\r\n  Group = 'group'\r\n}\r\n\r\nexport enum TypeCatalog {\r\n  wms, wmts, baselayers, composite\r\n}\r\n\r\nexport type TypeCatalogStrings = keyof typeof TypeCatalog;\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { TooltipType } from '../../layer';\r\nimport { TimeFilterOptions } from '../../filter';\r\nimport { QueryFormat, QueryHtmlTarget  } from '../../query';\r\n\r\nimport { ICatalog, ICompositeCatalog , CatalogItem, CatalogItemGroup } from './catalog.interface';\r\nimport { CatalogService } from './catalog.service';\r\nimport { TypeCatalog, TypeCatalogStrings } from './catalog.enum';\r\n\r\nexport abstract class Catalog implements ICatalog {\r\n\r\n    // ICatalog -----------------------------\r\n    id: string;\r\n    title: string;\r\n    url: string;\r\n    items?: CatalogItem[];\r\n    type?: TypeCatalogStrings;\r\n    version?: string;\r\n    matrixSet?: string;\r\n    requestEncoding?: string;\r\n    regFilters?: string[];\r\n    groupImpose?: CatalogItemGroup;\r\n    timeFilter?: TimeFilterOptions;\r\n    queryFormat?: QueryFormat;\r\n    queryHtmlTarget?: QueryHtmlTarget;\r\n    queryParams?: { [key: string]: string; };\r\n    sourceOptions?: { [key: string]: any; };\r\n    count?: number;\r\n    tooltipType?: TooltipType.ABSTRACT | TooltipType.TITLE;\r\n    sortDirection?: 'asc' | 'desc';\r\n    setCrossOriginAnonymous?: boolean;\r\n    showLegend?: boolean;\r\n    // ICatalog -----------------------------\r\n\r\n    protected catalogService: CatalogService;\r\n\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        Object.assign(this, options);\r\n        this.catalogService = service;\r\n    }\r\n\r\n    public abstract collectCatalogItems(): Observable<CatalogItem[]>;\r\n}\r\n\r\nclass WMSCatalog extends Catalog {\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        super(options, service);\r\n        const sType: string = TypeCatalog[TypeCatalog.wms];\r\n        this.type =  TypeCatalog[sType];\r\n    }\r\n\r\n    public collectCatalogItems(): Observable<CatalogItem[]> {\r\n        return this.catalogService.loadCatalogWMSLayerItems(this);\r\n    }\r\n}\r\n\r\nclass WMTSCatalog extends Catalog {\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        super(options, service);\r\n        const sType: string = TypeCatalog[TypeCatalog.wmts];\r\n        this.type =  TypeCatalog[sType];\r\n    }\r\n\r\n    public collectCatalogItems(): Observable<CatalogItem[]> {\r\n        return this.catalogService.loadCatalogWMTSLayerItems(this);\r\n    }\r\n}\r\n\r\nclass BaselayersCatalog extends Catalog {\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        super(options, service);\r\n        const sType: string = TypeCatalog[TypeCatalog.baselayers];\r\n        this.type =  TypeCatalog[sType];\r\n    }\r\n\r\n    public collectCatalogItems(): Observable<CatalogItemGroup[]> {\r\n        return this.catalogService.loadCatalogBaseLayerItems(this);\r\n    }\r\n}\r\n\r\nexport class CompositeCatalog extends Catalog implements ICompositeCatalog {\r\n    composite: ICatalog[];\r\n\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        super(options, service);\r\n        const sType: string = TypeCatalog[TypeCatalog.composite];\r\n        this.type =  TypeCatalog[sType];\r\n        this.url = null;\r\n    }\r\n\r\n    public collectCatalogItems(): Observable<CatalogItem[]> {\r\n        return this.catalogService.loadCatalogCompositeLayerItems(this);\r\n    }\r\n}\r\n\r\nexport class CatalogFactory {\r\n\r\n    public static createInstanceCatalog(options: Catalog, service: CatalogService): Catalog {\r\n\r\n        let catalog: Catalog;\r\n        if (options.hasOwnProperty('composite')) {\r\n            catalog = new CompositeCatalog(options, service);\r\n        } else if (options.type === TypeCatalog[TypeCatalog.baselayers]) {\r\n            catalog = new BaselayersCatalog(options, service);\r\n        } else if (options.type === TypeCatalog[TypeCatalog.wmts]) {\r\n            catalog = new WMTSCatalog(options, service);\r\n        } else {\r\n            catalog = new WMSCatalog(options, service);\r\n        }\r\n\r\n        return catalog;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport * as olextent from 'ol/extent';\r\nimport olFormatGML2 from 'ol/format/GML2';\r\nimport olFormatGML3 from 'ol/format/GML3';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport olFeature from 'ol/Feature';\r\nimport * as olgeom from 'ol/geom';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport {\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  TileArcGISRestDataSource,\r\n  WMSDataSourceOptions\r\n} from '../../datasource';\r\n\r\nimport {\r\n  QueryFormat,\r\n  QueryFormatMimeType,\r\n  QueryHtmlTarget\r\n} from './query.enums';\r\nimport {\r\n  QueryOptions,\r\n  QueryableDataSource,\r\n  QueryableDataSourceOptions\r\n} from './query.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QueryService {\r\n  public queryEnabled = true;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  query(layers: Layer[], options: QueryOptions): Observable<Feature[]>[] {\r\n    return layers\r\n      .filter((layer: Layer) => layer.visible && layer.isInResolutionsRange)\r\n      .map((layer: Layer) => this.queryLayer(layer, options));\r\n  }\r\n\r\n  queryLayer(layer: Layer, options: QueryOptions): Observable<Feature[]> {\r\n    const url = this.getQueryUrl(layer.dataSource, options);\r\n    if (!url) {\r\n      return of([]);\r\n    }\r\n\r\n    if (\r\n      (layer.dataSource as QueryableDataSource).options.queryFormat ===\r\n      QueryFormat.HTMLGML2\r\n    ) {\r\n      const urlGml = this.getQueryUrl(layer.dataSource, options, true);\r\n      return this.http.get(urlGml, { responseType: 'text' }).pipe(\r\n        mergeMap(gmlRes => {\r\n          const imposedGeom = this.mergeGML(gmlRes, url);\r\n          return this.http\r\n            .get(url, { responseType: 'text' })\r\n            .pipe(\r\n              map(res =>\r\n                this.extractData(res, layer, options, url, imposedGeom)\r\n              )\r\n            );\r\n        })\r\n      );\r\n    }\r\n\r\n    const request = this.http.get(url, { responseType: 'text' });\r\n    return request.pipe(map(res => this.extractData(res, layer, options, url)));\r\n  }\r\n\r\n  private mergeGML(gmlRes, url) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(gmlRes);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      features = parser.readFeatures(gmlRes);\r\n    }\r\n    const olmline = new olgeom.MultiLineString([]);\r\n    let pts;\r\n    const ptsArray = [];\r\n    let olmpoly = new olgeom.MultiPolygon([]);\r\n    let firstFeatureType;\r\n    const nbFeatures = features.length;\r\n\r\n    // Check if geometry intersect bbox\r\n    // for geoserver getfeatureinfo response in data projection, not call projection\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const bbox = bboxRaw.split(',');\r\n    const bboxExtent = olextent.createEmpty();\r\n    olextent.extend(bboxExtent, bbox);\r\n    const outBboxExtent = false;\r\n    features.map(feature => {\r\n      /*  if (!feature.getGeometry().simplify(100).intersectsExtent(bboxExtent)) {\r\n        outBboxExtent = true;\r\n        // TODO: Check to project the geometry?\r\n      }*/\r\n      const featureGeometryCoordinates = feature.getGeometry().getCoordinates();\r\n      const featureGeometryType = feature.getGeometry().getType();\r\n\r\n      if (!firstFeatureType && !outBboxExtent) {\r\n        firstFeatureType = featureGeometryType;\r\n      }\r\n      if (!outBboxExtent) {\r\n        switch (featureGeometryType) {\r\n          case 'Point':\r\n            if (nbFeatures === 1) {\r\n              pts = new olgeom.Point(featureGeometryCoordinates, 'XY');\r\n            } else {\r\n              ptsArray.push(featureGeometryCoordinates);\r\n            }\r\n            break;\r\n          case 'LineString':\r\n            olmline.appendLineString(\r\n              new olgeom.LineString(featureGeometryCoordinates, 'XY')\r\n            );\r\n            break;\r\n          case 'Polygon':\r\n            olmpoly.appendPolygon(\r\n              new olgeom.Polygon(featureGeometryCoordinates, 'XY')\r\n            );\r\n            break;\r\n          case 'MultiPolygon':\r\n            olmpoly = new olgeom.MultiPolygon(featureGeometryCoordinates, 'XY');\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    });\r\n\r\n    let olmpts;\r\n    if (ptsArray.length === 0 && pts) {\r\n      olmpts = {\r\n        type: pts.getType(),\r\n        coordinates: pts.getCoordinates()\r\n      };\r\n    } else {\r\n      olmpts = {\r\n        type: 'Polygon',\r\n        coordinates: [this.convexHull(ptsArray)]\r\n      };\r\n    }\r\n\r\n    switch (firstFeatureType) {\r\n      case 'LineString':\r\n        return {\r\n          type: olmline.getType(),\r\n          coordinates: olmline.getCoordinates()\r\n        };\r\n      case 'Point':\r\n        return olmpts;\r\n      case 'Polygon':\r\n        return {\r\n          type: olmpoly.getType(),\r\n          coordinates: olmpoly.getCoordinates()\r\n        };\r\n      case 'MultiPolygon':\r\n        return {\r\n          type: olmpoly.getType(),\r\n          coordinates: olmpoly.getCoordinates()\r\n        };\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  cross(a, b, o) {\r\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);\r\n  }\r\n\r\n  /**\r\n   * @param points An array of [X, Y] coordinates\r\n   * This method is use instead of turf.js convexHull because Turf needs at least 3 point to make a hull.\r\n   * https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript\r\n   */\r\n  convexHull(points) {\r\n    points.sort((a, b) => {\r\n      return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];\r\n    });\r\n\r\n    const lower = [];\r\n    for (const point of points) {\r\n      while (\r\n        lower.length >= 2 &&\r\n        this.cross(lower[lower.length - 2], lower[lower.length - 1], point) <= 0\r\n      ) {\r\n        lower.pop();\r\n      }\r\n      lower.push(point);\r\n    }\r\n\r\n    const upper = [];\r\n    for (let i = points.length - 1; i >= 0; i--) {\r\n      while (\r\n        upper.length >= 2 &&\r\n        this.cross(\r\n          upper[upper.length - 2],\r\n          upper[upper.length - 1],\r\n          points[i]\r\n        ) <= 0\r\n      ) {\r\n        upper.pop();\r\n      }\r\n      upper.push(points[i]);\r\n    }\r\n\r\n    upper.pop();\r\n    lower.pop();\r\n    return lower.concat(upper);\r\n  }\r\n\r\n  private extractData(\r\n    res,\r\n    layer: Layer,\r\n    options: QueryOptions,\r\n    url: string,\r\n    imposedGeometry?\r\n  ): Feature[] {\r\n    const queryDataSource = layer.dataSource as QueryableDataSource;\r\n\r\n    const allowedFieldsAndAlias = this.getAllowedFieldsAndAlias(layer);\r\n    let features = [];\r\n    switch (queryDataSource.options.queryFormat) {\r\n      case QueryFormat.GML3:\r\n        features = this.extractGML3Data(\r\n          res,\r\n          layer.zIndex,\r\n          allowedFieldsAndAlias\r\n        );\r\n        break;\r\n      case QueryFormat.JSON:\r\n      case QueryFormat.GEOJSON:\r\n      case QueryFormat.GEOJSON2:\r\n        features = this.extractGeoJSONData(res);\r\n        break;\r\n      case QueryFormat.ESRIJSON:\r\n        features = this.extractEsriJSONData(res, layer.zIndex);\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        features = this.extractTextData(res);\r\n        break;\r\n      case QueryFormat.HTML:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url\r\n        );\r\n        break;\r\n      case QueryFormat.HTMLGML2:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url,\r\n          imposedGeometry\r\n        );\r\n        break;\r\n      case QueryFormat.GML2:\r\n      default:\r\n        features = this.extractGML2Data(res, layer, allowedFieldsAndAlias);\r\n        break;\r\n    }\r\n\r\n    if (features.length > 0 && features[0].geometry == null) {\r\n      const geomToAdd = this.createGeometryFromUrlClick(url);\r\n\r\n      for (const feature of features) {\r\n        feature.geometry = geomToAdd;\r\n      }\r\n    }\r\n\r\n    return features.map((feature: Feature, index: number) => {\r\n      const mapLabel = feature.properties[queryDataSource.mapLabel];\r\n\r\n      let exclude;\r\n      if (layer.options.sourceOptions.type === 'wms') {\r\n        const sourceOptions = layer.options\r\n          .sourceOptions as WMSDataSourceOptions;\r\n        exclude = sourceOptions ? sourceOptions.excludeAttribute : undefined;\r\n      }\r\n\r\n      let title = this.getQueryTitle(feature, layer);\r\n      if (!title && features.length > 1) {\r\n        title = `${layer.title} (${index + 1})`;\r\n      } else if (!title) {\r\n        title = layer.title;\r\n      }\r\n\r\n      const meta = Object.assign({}, feature.meta || {}, {\r\n        id: uuid(),\r\n        title,\r\n        mapTitle: mapLabel,\r\n        sourceTitle: layer.title,\r\n        order: 1000 - layer.zIndex,\r\n        excludeAttribute: exclude\r\n      });\r\n\r\n      return Object.assign(feature, {\r\n        meta,\r\n        projection:\r\n          queryDataSource.options.type === 'carto'\r\n            ? 'EPSG:4326'\r\n            : options.projection\r\n      });\r\n    });\r\n  }\r\n\r\n  private createGeometryFromUrlClick(url) {\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const width = parseInt(searchParams.width, 10);\r\n    const height = parseInt(searchParams.height, 10);\r\n    const xPosition = parseInt(searchParams.i || searchParams.x, 10);\r\n    const yPosition = parseInt(searchParams.j || searchParams.y, 10);\r\n    const projection = searchParams.crs || searchParams.srs || 'EPSG:3857';\r\n\r\n    const bbox = bboxRaw.split(',');\r\n    let threshold =\r\n      (Math.abs(parseFloat(bbox[0])) - Math.abs(parseFloat(bbox[2]))) * 0.05;\r\n\r\n    // for context in degree (EPSG:4326,4269...)\r\n    if (Math.abs(parseFloat(bbox[0])) < 180) {\r\n      threshold = 0.045;\r\n    }\r\n    const clickx =\r\n      parseFloat(bbox[0]) +\r\n      (Math.abs(parseFloat(bbox[0]) - parseFloat(bbox[2])) * xPosition) /\r\n        width -\r\n      threshold;\r\n    const clicky =\r\n      parseFloat(bbox[1]) +\r\n      (Math.abs(parseFloat(bbox[1]) - parseFloat(bbox[3])) * yPosition) /\r\n        height -\r\n      threshold;\r\n    const clickx1 = clickx + threshold * 2;\r\n    const clicky1 = clicky + threshold * 2;\r\n\r\n    const wktPoly =\r\n      'POLYGON((' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      '))';\r\n\r\n    const format = new olformat.WKT();\r\n    const tenPercentWidthGeom = format.readFeature(wktPoly);\r\n    const f = tenPercentWidthGeom.getGeometry() as any;\r\n\r\n    const newGeom = {\r\n      type: f.getType(),\r\n      coordinates: f.getCoordinates()\r\n    };\r\n\r\n    return newGeom;\r\n  }\r\n\r\n  private extractGML2Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(res);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      try {\r\n        features = parser.readFeatures(res);\r\n      } catch (e) {\r\n        console.warn(\r\n          'query.service: Multipolygons are badly managed in mapserver in GML2. Use another format.'\r\n        );\r\n      }\r\n    }\r\n\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGML3Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    const parser = new olFormatGML3();\r\n    let features = [];\r\n    try {\r\n      features = parser.readFeatures(res);\r\n    } catch (e) {\r\n      console.warn('query.service: GML3 is not well supported');\r\n    }\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGeoJSONData(res) {\r\n    let features = [];\r\n    try {\r\n      features = JSON.parse(res).features;\r\n    } catch (e) {\r\n      console.warn('query.service: Unable to parse geojson', '\\n', res);\r\n    }\r\n    return features;\r\n  }\r\n\r\n  private extractEsriJSONData(res, zIndex) {\r\n    const parser = new olFormatEsriJSON();\r\n    const features = parser.readFeatures(res);\r\n\r\n    return features.map(feature => this.featureToResult(feature, zIndex));\r\n  }\r\n\r\n  private extractTextData(res) {\r\n    // TODO\r\n    return [];\r\n  }\r\n\r\n  private extractHtmlData(\r\n    res,\r\n    htmlTarget: QueryHtmlTarget,\r\n    url,\r\n    imposedGeometry?\r\n  ) {\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const projection = searchParams.crs || searchParams.srs || 'EPSG:3857';\r\n    const geomToAdd = this.createGeometryFromUrlClick(url);\r\n\r\n    if (\r\n      htmlTarget !== QueryHtmlTarget.BLANK &&\r\n      htmlTarget !== QueryHtmlTarget.IFRAME\r\n    ) {\r\n      htmlTarget = QueryHtmlTarget.IFRAME;\r\n    }\r\n\r\n    const bodyTagStart = res.toLowerCase().indexOf('<body>');\r\n    const bodyTagEnd = res.toLowerCase().lastIndexOf('</body>') + 7;\r\n    // replace \\r \\n  and ' ' with '' to validate if the body is really empty.\r\n    const body = res.slice(bodyTagStart, bodyTagEnd).replace(/(\\r|\\n|\\s)/g, '');\r\n    if (body === '<body></body>' || res === '') {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      {\r\n        type: FEATURE,\r\n        projection,\r\n        properties: { target: htmlTarget, body: res, url },\r\n        geometry: imposedGeometry || geomToAdd\r\n      }\r\n    ];\r\n  }\r\n\r\n  private getQueryParams(url) {\r\n    const queryString = url.split('?');\r\n    if (!queryString[1]) {\r\n      return;\r\n    }\r\n    const pairs = queryString[1].split('&');\r\n\r\n    const result = {};\r\n    pairs.forEach(pair => {\r\n      pair = pair.split('=');\r\n      result[pair[0]] = decodeURIComponent(pair[1] || '');\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public featureToResult(\r\n    featureOL: olFeature,\r\n    zIndex: number,\r\n    allowedFieldsAndAlias?\r\n  ): Feature {\r\n    const featureGeometry = featureOL.getGeometry() as any;\r\n    const properties: any = Object.assign({}, featureOL.getProperties());\r\n    delete properties.geometry;\r\n    delete properties.boundedBy;\r\n    delete properties.shape;\r\n    delete properties.SHAPE;\r\n    delete properties.the_geom;\r\n\r\n    let geometry;\r\n    if (featureGeometry !== undefined) {\r\n      geometry = {\r\n        type: featureGeometry.getType(),\r\n        coordinates: featureGeometry.getCoordinates()\r\n      };\r\n    }\r\n\r\n    return {\r\n      type: FEATURE,\r\n      projection: undefined,\r\n      properties,\r\n      geometry,\r\n      meta: {\r\n        id: uuid(),\r\n        order: 1000 - zIndex,\r\n        alias: allowedFieldsAndAlias\r\n      }\r\n    };\r\n  }\r\n\r\n  private getQueryUrl(\r\n    datasource: QueryableDataSource,\r\n    options: QueryOptions,\r\n    forceGML2 = false\r\n  ): string {\r\n    let url;\r\n    switch (datasource.constructor) {\r\n      case WMSDataSource:\r\n        const wmsDatasource = datasource as WMSDataSource;\r\n\r\n        const WMSGetFeatureInfoOptions = {\r\n          INFO_FORMAT:\r\n            wmsDatasource.params.INFO_FORMAT ||\r\n            this.getMimeInfoFormat(datasource.options.queryFormat),\r\n          QUERY_LAYERS: wmsDatasource.params.LAYERS,\r\n          FEATURE_COUNT: wmsDatasource.params.FEATURE_COUNT || '5'\r\n        };\r\n\r\n        if (forceGML2) {\r\n          WMSGetFeatureInfoOptions.INFO_FORMAT = this.getMimeInfoFormat(\r\n            QueryFormat.GML2\r\n          );\r\n        }\r\n\r\n        url = wmsDatasource.ol.getGetFeatureInfoUrl(\r\n          options.coordinates,\r\n          options.resolution,\r\n          options.projection,\r\n          WMSGetFeatureInfoOptions\r\n        );\r\n        // const wmsVersion =\r\n        //   wmsDatasource.params.VERSION ||\r\n        //   wmsDatasource.params.version ||\r\n        //   '1.3.0';\r\n        // if (wmsVersion !== '1.3.0') {\r\n        //   url = url.replace('&I=', '&X=');\r\n        //   url = url.replace('&J=', '&Y=');\r\n        // }\r\n        break;\r\n      case CartoDataSource:\r\n        const cartoDatasource = datasource as CartoDataSource;\r\n        const baseUrl =\r\n          'https://' +\r\n          cartoDatasource.options.account +\r\n          '.carto.com/api/v2/sql?';\r\n        const format = 'format=GeoJSON';\r\n        const sql =\r\n          '&q=' + cartoDatasource.options.config.layers[0].options.sql;\r\n        const clause =\r\n          ' WHERE ST_Intersects(the_geom_webmercator,ST_BUFFER(ST_SetSRID(ST_POINT(';\r\n        const meters = cartoDatasource.options.queryPrecision\r\n          ? cartoDatasource.options.queryPrecision\r\n          : '1000';\r\n        const coordinates =\r\n          options.coordinates[0] +\r\n          ',' +\r\n          options.coordinates[1] +\r\n          '),3857),' +\r\n          meters +\r\n          '))';\r\n\r\n        url = `${baseUrl}${format}${sql}${clause}${coordinates}`;\r\n        break;\r\n      case TileArcGISRestDataSource:\r\n        const tileArcGISRestDatasource = datasource as TileArcGISRestDataSource;\r\n        let extent = olextent.boundingExtent([options.coordinates]);\r\n        if (tileArcGISRestDatasource.options.queryPrecision) {\r\n          extent = olextent.buffer(\r\n            extent,\r\n            tileArcGISRestDatasource.options.queryPrecision\r\n          );\r\n        }\r\n        const serviceUrl =\r\n          tileArcGISRestDatasource.options.url +\r\n          '/' +\r\n          tileArcGISRestDatasource.options.layer +\r\n          '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        url = `${serviceUrl}?${params.join('&')}`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  private getMimeInfoFormat(queryFormat: string) {\r\n    let mime = 'application/vnd.ogc.gml';\r\n    const keyEnum = Object.keys(QueryFormat).find(\r\n      key => QueryFormat[key] === queryFormat\r\n    );\r\n    if (keyEnum) {\r\n      mime = QueryFormatMimeType[keyEnum];\r\n    }\r\n\r\n    return mime;\r\n  }\r\n\r\n  getAllowedFieldsAndAlias(layer: any) {\r\n    let allowedFieldsAndAlias;\r\n    if (\r\n      layer.options &&\r\n      layer.options.source &&\r\n      layer.options.source.options &&\r\n      layer.options.source.options.sourceFields &&\r\n      layer.options.source.options.sourceFields.length >= 1\r\n    ) {\r\n      allowedFieldsAndAlias = {};\r\n      layer.options.source.options.sourceFields.forEach(sourceField => {\r\n        const alias = sourceField.alias ? sourceField.alias : sourceField.name;\r\n        allowedFieldsAndAlias[sourceField.name] = alias;\r\n      });\r\n    }\r\n    return allowedFieldsAndAlias;\r\n  }\r\n\r\n  getQueryTitle(feature: Feature, layer: Layer): string {\r\n    let title;\r\n    if (layer.options && layer.options.source && layer.options.source.options) {\r\n      const dataSourceOptions = layer.options.source\r\n        .options as QueryableDataSourceOptions;\r\n      if (dataSourceOptions.queryTitle) {\r\n        title = this.getLabelMatch(feature, dataSourceOptions.queryTitle);\r\n      }\r\n    }\r\n\r\n    return title;\r\n  }\r\n\r\n  getLabelMatch(feature: Feature, labelMatch): string {\r\n    let label = labelMatch;\r\n    const labelToGet = Array.from(labelMatch.matchAll(/\\$\\{([^\\{\\}]+)\\}/g));\r\n\r\n    labelToGet.forEach(v => {\r\n      label = label.replace(v[0], feature.properties[v[1]]);\r\n    });\r\n\r\n    // Nothing done? check feature's attribute\r\n    if (labelToGet.length === 0 && label === labelMatch) {\r\n      label = feature.properties[labelMatch] || labelMatch;\r\n    }\r\n\r\n    return label;\r\n  }\r\n}\r\n","import { getEntityTitle } from '@igo2/common';\r\nimport {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Self\r\n} from '@angular/core';\r\n\r\nimport { Subscription, Observable, of, zip } from 'rxjs';\r\n\r\nimport OlFeature from 'ol/Feature';\r\nimport OlRenderFeature from 'ol/render/Feature';\r\nimport OlLayer from 'ol/layer/Layer';\r\n\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { renderFeatureFromOl } from '../../feature/shared/feature.utils';\r\nimport { featureFromOl } from '../../feature/shared/feature.utils';\r\nimport { QueryService } from './query.service';\r\nimport { layerIsQueryable, olLayerIsQueryable } from './query.utils';\r\nimport { AnyLayer } from '../../layer/shared/layers/any-layer';\r\n\r\n/**\r\n * This directive makes a map queryable with a click of with a drag box.\r\n * By default, all layers are queryable but this can ben controlled at\r\n * the layer level.\r\n */\r\n@Directive({\r\n  selector: '[igoQuery]'\r\n})\r\nexport class QueryDirective implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * Subscriptions to ongoing queries\r\n   */\r\n  private queries$$: Subscription[] = [];\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * OL drag box interaction\r\n   */\r\n  private olDragBoxInteraction: OlDragBoxInteraction;\r\n\r\n  /**\r\n   * Ol drag box \"end\" event key\r\n   */\r\n  private olDragBoxInteractionEndKey: string;\r\n\r\n  /**\r\n   * Whter to query features or not\r\n   */\r\n  @Input() queryFeatures: boolean = false;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesHitTolerance: number = 0;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesCondition: (olLayer: OlLayer) => boolean;\r\n\r\n  /**\r\n   * Whether all query should complete before emitting an event\r\n   */\r\n  @Input() waitForAllQueries: boolean = true;\r\n\r\n  /**\r\n   * Event emitted when a query (or all queries) complete\r\n   */\r\n  @Output() query = new EventEmitter<{\r\n    features: Feature[] | Feature[][];\r\n    event: OlMapBrowserPointerEvent;\r\n  }>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return (this.component.map as any) as IgoMap;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private queryService: QueryService\r\n  ) {}\r\n\r\n  /**\r\n   * Start listening to click and drag box events\r\n   * @internal\r\n   */\r\n  ngAfterViewInit() {\r\n    this.listenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to click and drag box events and cancel ongoind requests\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.cancelOngoingQueries();\r\n    this.unlistenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * On map click, issue queries\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onMapEvent(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Issue queries from a map event and emit events with the results\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onMapEvent(event: OlMapBrowserPointerEvent) {\r\n    this.cancelOngoingQueries();\r\n    if (!this.queryService.queryEnabled) {\r\n      return;\r\n    }\r\n\r\n    const queries$ = [];\r\n    if (this.queryFeatures) {\r\n      queries$.push(this.doQueryFeatures(event));\r\n    }\r\n\r\n    const resolution = this.map.ol.getView().getResolution();\r\n    const queryLayers = this.map.layers.filter(layerIsQueryable);\r\n    queries$.push(\r\n      ...this.queryService.query(queryLayers, {\r\n        coordinates: event.coordinate,\r\n        projection: this.map.projection,\r\n        resolution\r\n      })\r\n    );\r\n\r\n    if (queries$.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.waitForAllQueries) {\r\n      this.queries$$.push(\r\n        zip(...queries$).subscribe((results: Feature[][]) => {\r\n          const features = [].concat(...results);\r\n          this.query.emit({ features, event });\r\n        })\r\n      );\r\n    } else {\r\n      this.queries$$ = queries$.map((query$: Observable<Feature[]>) => {\r\n        return query$.subscribe((features: Feature[]) => {\r\n          this.query.emit({ features, event });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query features already present on the map\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private doQueryFeatures(\r\n    event: OlMapBrowserPointerEvent\r\n  ): Observable<Feature[]> {\r\n    const clickedFeatures = [];\r\n\r\n    this.map.ol.forEachFeatureAtPixel(\r\n      event.pixel,\r\n      (featureOL: OlFeature, layerOL: OlLayer) => {\r\n        if (featureOL) {\r\n          if (featureOL.get('features')) {\r\n            for (const feature of featureOL.get('features')) {\r\n              const newFeature = featureFromOl(feature, this.map.projection);\r\n              newFeature.meta = {\r\n                title: feature.values_.nom,\r\n                id: feature.id_,\r\n                icon: feature.values_._icon,\r\n                sourceTitle: layerOL.values_.title\r\n              };\r\n              clickedFeatures.push(newFeature);\r\n            }\r\n          } else if (featureOL instanceof OlRenderFeature) {\r\n            const featureFromRender: OlFeature = featureOL;\r\n            const feature = renderFeatureFromOl(\r\n              featureOL,\r\n              this.map.projection,\r\n              layerOL\r\n            );\r\n            clickedFeatures.push(feature);\r\n          } else {\r\n            const feature = featureFromOl(\r\n              featureOL,\r\n              this.map.projection,\r\n              layerOL\r\n            );\r\n            clickedFeatures.push(feature);\r\n          }\r\n        }\r\n      },\r\n      {\r\n        hitTolerance: this.queryFeaturesHitTolerance || 0,\r\n        layerFilter: this.queryFeaturesCondition\r\n          ? this.queryFeaturesCondition\r\n          : olLayerIsQueryable\r\n      }\r\n    );\r\n\r\n    const queryableLayers = this.map.layers.filter(layerIsQueryable);\r\n    clickedFeatures.forEach((feature: Feature) => {\r\n      queryableLayers.forEach((layer: AnyLayer) => {\r\n        if (typeof layer.ol.getSource().hasFeature !== 'undefined') {\r\n          if (layer.ol.getSource().hasFeature(feature.ol)) {\r\n            feature.meta.alias = this.queryService.getAllowedFieldsAndAlias(layer);\r\n            feature.meta.title = feature.meta.title || this.queryService.getQueryTitle(feature, layer);\r\n            feature.meta.sourceTitle = layer.title;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    return of(clickedFeatures);\r\n  }\r\n\r\n  /**\r\n   * Cancel ongoing requests, if any\r\n   */\r\n  private cancelOngoingQueries() {\r\n    this.queries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.queries$$ = [];\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions,\r\n  SearchSourceSettings\r\n} from './source.interfaces';\r\n\r\n/**\r\n * Base search source class\r\n */\r\nexport class SearchSource {\r\n  /**\r\n   * Search source ID\r\n   * @internal\r\n   */\r\n  static id = '';\r\n\r\n  /**\r\n   * Search source type\r\n   * @internal\r\n   */\r\n  static type = '';\r\n\r\n  /**\r\n   * Search source options\r\n   * @internal\r\n   */\r\n  protected options: SearchSourceOptions;\r\n\r\n  /**\r\n   * Get search source's id\r\n   * @returns Search source's id\r\n   */\r\n  getId(): string {\r\n    throw new Error('You have to implement the method \"getId\".');\r\n  }\r\n  /**\r\n   * Get search source's type\r\n   * @returns Search source's type\r\n   */\r\n  getType(): string {\r\n    throw new Error('You have to implement the method \"getType\".');\r\n  }\r\n\r\n  /**\r\n   * Get search source's default options\r\n   * @returns Search source default options\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    throw new Error('You have to implement the method \"getDefaultOptions\".');\r\n  }\r\n\r\n  /**\r\n   * Search source's title\r\n   */\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is available\r\n   */\r\n  get available(): boolean {\r\n    return this.options.available !== false;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is enabled\r\n   */\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  get enabled(): boolean {\r\n    return this.available && this.options.enabled !== false;\r\n  }\r\n\r\n  get showInPointerSummary(): boolean {\r\n    const showInPointerSummary = this.options.showInPointerSummary;\r\n    return showInPointerSummary ? showInPointerSummary : false;\r\n  }\r\n\r\n  get showInSettings(): boolean {\r\n    const showInSettings = this.options.showInSettings;\r\n    return showInSettings === undefined ? true : showInSettings;\r\n  }\r\n\r\n  /**\r\n   * Search url\r\n   */\r\n  get searchUrl(): string {\r\n    return this.options.searchUrl;\r\n  }\r\n\r\n  /**\r\n   * Search query params\r\n   */\r\n  get params(): { [key: string]: string } {\r\n    return this.options.params === undefined ? {} : this.options.params;\r\n  }\r\n\r\n  /**\r\n   * Search settings\r\n   */\r\n  get settings(): SearchSourceSettings[] {\r\n    return this.options.settings === undefined ? [] : this.options.settings;\r\n  }\r\n\r\n  /**\r\n   * Set params from selected settings\r\n   */\r\n  setParamFromSetting(setting: SearchSourceSettings) {\r\n    switch (setting.type) {\r\n      case 'radiobutton':\r\n        setting.values.forEach(conf => {\r\n          if (conf.enabled) {\r\n            this.options.params = Object.assign(this.options.params || {}, {\r\n              [setting.name]: conf.value\r\n            });\r\n          }\r\n        });\r\n        break;\r\n      case 'checkbox':\r\n        let confValue = '';\r\n        setting.values\r\n          .filter(s => s.available !== false)\r\n          .forEach(conf => {\r\n            if (conf.enabled) {\r\n              confValue += conf.value + ',';\r\n            }\r\n          });\r\n        confValue = confValue.slice(0, -1);\r\n        this.options.params = Object.assign(this.options.params || {}, {\r\n          [setting.name]: confValue\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search results display order\r\n   */\r\n  get displayOrder(): number {\r\n    return this.options.order === undefined ? 99 : this.options.order;\r\n  }\r\n\r\n  constructor(options: SearchSourceOptions) {\r\n    this.options = options;\r\n    this.options = Object.assign({}, this.getDefaultOptions(), options);\r\n\r\n    // Set Default Params from Settings\r\n    this.settings.forEach(setting => {\r\n      this.setParamFromSetting(setting);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get hashtags valid\r\n   * @param hashtag hashtag from query\r\n   */\r\n  getHashtagsValid(term: string, settingsName: string): string[] {\r\n    const hashtags = term.match(/(#[^\\s]+)/g);\r\n    if (!hashtags) {\r\n      return undefined;\r\n    }\r\n\r\n    const searchSourceSetting = this.getSettingsValues(settingsName);\r\n    const hashtagsValid = [];\r\n    hashtags.forEach(hashtag => {\r\n      searchSourceSetting.values.forEach(conf => {\r\n        const hashtagKey = hashtag.substring(1);\r\n        if (typeof conf.value === 'string') {\r\n          const types = conf.value\r\n            .toLowerCase()\r\n            .normalize('NFD')\r\n            .replace(/[\\u0300-\\u036f]/g, '')\r\n            .split(',');\r\n          const index = types.indexOf(\r\n            hashtagKey\r\n              .toLowerCase()\r\n              .normalize('NFD')\r\n              .replace(/[\\u0300-\\u036f]/g, '')\r\n          );\r\n          if (index !== -1) {\r\n            hashtagsValid.push(types[index]);\r\n          }\r\n        }\r\n        if (conf.hashtags && conf.hashtags.indexOf(hashtagKey) !== -1) {\r\n          hashtagsValid.push(conf.value);\r\n        }\r\n      });\r\n    });\r\n\r\n    return hashtagsValid.filter((a, b) => hashtagsValid.indexOf(a) === b);\r\n  }\r\n\r\n  getSettingsValues(search: string): SearchSourceSettings {\r\n    return this.getDefaultOptions().settings.find(\r\n      (value: SearchSourceSettings) => {\r\n        return value.name === search;\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by text implement this class\r\n */\r\nexport interface TextSearch {\r\n  /**\r\n   * Search by text\r\n   * @param term Text\r\n   * @param options Optional: TextSearchOptions\r\n   * @returns Observable or search results\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by coordinates implement this class\r\n */\r\nexport interface ReverseSearch {\r\n  /**\r\n   * Search by text\r\n   * @param lonLat Coordinates\r\n   * @param options Optional: ReverseSearchOptions\r\n   * @returns Observable or search results\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\nimport { SearchSourceOptions } from '../../search/shared/sources/source.interfaces';\r\n/**\r\n * Map search source. For now it has no search capability. All it does\r\n * is act as a placeholder for the map query results' \"search source\".\r\n */\r\n@Injectable()\r\nexport class QuerySearchSource extends SearchSource {\r\n  static id = 'map';\r\n  static type = FEATURE;\r\n\r\n  constructor(@Inject('options') options: SearchSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return QuerySearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return QuerySearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Carte'\r\n    };\r\n  }\r\n}\r\n","export class GoogleLinks {\r\n  static getGoogleMapsCoordLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=' + lat + ',' + lon;\r\n  }\r\n\r\n  static getGoogleStreetViewLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon;\r\n  }\r\n\r\n  static getGoogleMapsNameLink(name) {\r\n    const encodedName = encodeURI(name);\r\n    return 'https://www.google.com/maps?q=' + encodedName;\r\n  }\r\n}\r\n","export class OsmLinks {\r\n  static getOpenStreetMapLink(lon, lat, zoom: number = 17) {\r\n    // return 'https://www.google.com/maps?q=' + lat + ',' + lon;\r\n    return  `https://www.openstreetmap.org/?mlat=${lat}&mlon=${lon}#map=${zoom}/${lat}/${lon}`;\r\n  }\r\n\r\n  static getOpenStreetCamLink(lon, lat, zoom: number = 17) {\r\n    return  `https://openstreetcam.org/map/@${lat},${lon},${zoom}z`;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { EMPTY, Observable, of, zip } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { uuid, ObjectUtils } from '@igo2/utils';\r\nimport { LanguageService, ConfigService } from '@igo2/core';\r\nimport {\r\n  CapabilitiesService,\r\n  TypeCapabilities,\r\n  WMSDataSourceOptions,\r\n  WMSDataSourceOptionsParams,\r\n  WMTSDataSourceOptions\r\n} from '../../datasource';\r\nimport { LayerOptions, ImageLayerOptions } from '../../layer';\r\nimport { getResolutionFromScale } from '../../map';\r\n\r\nimport {\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup\r\n} from './catalog.interface';\r\nimport { Catalog, CatalogFactory, CompositeCatalog } from './catalog.abstract';\r\nimport { CatalogItemType, TypeCatalog } from './catalog.enum';\r\nimport { QueryFormat } from '../../query';\r\nimport { generateIdFromSourceOptions } from '../../utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CatalogService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private config: ConfigService,\r\n    private languageService: LanguageService,\r\n    private capabilitiesService: CapabilitiesService\r\n  ) {}\r\n\r\n  loadCatalogs(): Observable<Catalog[]> {\r\n    const contextConfig = this.config.getConfig('context') || {};\r\n    const catalogConfig = this.config.getConfig('catalog') || {};\r\n    const apiUrl = catalogConfig.url || contextConfig.url;\r\n    const catalogsFromConfig = catalogConfig.sources || [];\r\n\r\n    const observables$ = [];\r\n\r\n    if (apiUrl) {\r\n      // Base layers catalog\r\n      if (catalogConfig.baseLayers) {\r\n        const translate = this.languageService.translate;\r\n        const title = translate.instant('igo.geo.catalog.baseLayers');\r\n        const baseLayersCatalog = [\r\n          {\r\n            id: 'catalog.baselayers',\r\n            title,\r\n            url: `${apiUrl}/baselayers`,\r\n            type: 'baselayers'\r\n          }\r\n        ];\r\n        observables$.push(of(baseLayersCatalog));\r\n      }\r\n\r\n      // Catalogs from API\r\n      const catalogsFromApi$ = this.http\r\n        .get<Catalog[]>(`${apiUrl}/catalogs`)\r\n        .pipe(\r\n          map(catalogs =>\r\n            catalogs.map((c: any) => Object.assign(c, c.options))\r\n          ),\r\n          catchError((_response: HttpErrorResponse) => EMPTY)\r\n        );\r\n      observables$.push(catalogsFromApi$);\r\n    }\r\n\r\n    // Catalogs from config\r\n    if (catalogsFromConfig.length > 0) {\r\n      observables$.push(\r\n        of(catalogsFromConfig).pipe(\r\n          map((catalogs: Catalog[]) =>\r\n            catalogs.map(c => {\r\n              if (!c.id) {\r\n                c.id = uuid();\r\n              }\r\n              return c;\r\n            })\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    return zip(...observables$).pipe(\r\n      map((catalogs: Catalog[][]) => [].concat.apply([], catalogs))\r\n    ) as Observable<Catalog[]>;\r\n  }\r\n\r\n  loadCatalogItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    let newCatalog: Catalog;\r\n    newCatalog = CatalogFactory.createInstanceCatalog(catalog, this);\r\n    return newCatalog.collectCatalogItems();\r\n  }\r\n\r\n  loadCatalogBaseLayerItems(catalog: Catalog): Observable<CatalogItemGroup[]> {\r\n    return this.getCatalogBaseLayersOptions(catalog).pipe(\r\n      map((layersOptions: LayerOptions[]) => {\r\n        const items = layersOptions.map((layerOptions: LayerOptions) => {\r\n          return {\r\n            id: generateIdFromSourceOptions(layerOptions.sourceOptions),\r\n            title: layerOptions.title,\r\n            type: CatalogItemType.Layer,\r\n            options: layerOptions\r\n          } as CatalogItemLayer;\r\n        });\r\n        return [\r\n          {\r\n            id: 'catalog.group.baselayers',\r\n            type: CatalogItemType.Group,\r\n            title: catalog.title,\r\n            items\r\n          }\r\n        ];\r\n      })\r\n    );\r\n  }\r\n\r\n  private getCatalogBaseLayersOptions(\r\n    catalog: Catalog\r\n  ): Observable<LayerOptions[]> {\r\n    return this.http.get<LayerOptions[]>(catalog.url);\r\n  }\r\n\r\n  loadCatalogWMSLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    return this.getCatalogCapabilities(catalog).pipe(\r\n      map((capabilities: any) => {\r\n        const items = [];\r\n        this.includeRecursiveItems(\r\n          catalog,\r\n          capabilities.Capability.Layer,\r\n          items\r\n        );\r\n        return items;\r\n      })\r\n    );\r\n  }\r\n\r\n  loadCatalogWMTSLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    return this.getCatalogCapabilities(catalog).pipe(\r\n      map((capabilities: any) => this.getWMTSItems(catalog, capabilities))\r\n    );\r\n  }\r\n\r\n  loadCatalogCompositeLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    const compositeCatalog = (catalog as CompositeCatalog).composite;\r\n\r\n    const catalogsFromInstance = [] as Catalog[];\r\n    compositeCatalog.map((component: Catalog) =>\r\n      catalogsFromInstance.push(\r\n        CatalogFactory.createInstanceCatalog(component, this)\r\n      )\r\n    );\r\n\r\n    // get CatalogItems for each original Catalog-----------------------------------------------------\r\n    const request1$ = [];\r\n    catalogsFromInstance.map((component: Catalog) =>\r\n      request1$.push(component.collectCatalogItems())\r\n    );\r\n\r\n    // integrate imposed group -----------------------------------------------------\r\n    let request2$ = [];\r\n\r\n    function flatDeepLayer(arr) {\r\n      return arr.reduce(\r\n        (acc, val) =>\r\n          acc.concat(\r\n            val.type === CatalogItemType.Group ? flatDeepLayer(val.items) : val\r\n          ),\r\n        []\r\n      );\r\n    }\r\n\r\n    if (\r\n      Object.keys(compositeCatalog).find(k => compositeCatalog[k].groupImpose)\r\n    ) {\r\n      const pushImposeGroup = (item, index) => {\r\n        const c = catalogsFromInstance[index];\r\n        const outGroupImpose = Object.assign({}, c.groupImpose);\r\n        outGroupImpose.address = c.id;\r\n        outGroupImpose.type = CatalogItemType.Group;\r\n        outGroupImpose.items = [];\r\n\r\n        const flatLayer = flatDeepLayer(item);\r\n        flatLayer.map(\r\n          v => (v.address = `${outGroupImpose.address}.${outGroupImpose.id}`)\r\n        );\r\n        outGroupImpose.items = flatLayer;\r\n\r\n        return outGroupImpose;\r\n      };\r\n\r\n      request2$ = request1$.map((obs, idx) =>\r\n        obs.pipe(\r\n          map(items =>\r\n            compositeCatalog[idx].groupImpose\r\n              ? pushImposeGroup(items, idx)\r\n              : items\r\n          )\r\n        )\r\n      );\r\n    } else {\r\n      request2$ = request1$;\r\n    }\r\n\r\n    // concat Group -----------------------------------------------------\r\n    const request3$ = zip(...request2$).pipe(\r\n      map(\r\n        (output: CatalogItem[]) => [].concat(...output) // [].concat.apply([], result1\r\n      )\r\n    );\r\n\r\n    // merge Group (first level only) -----------------------------------------------------\r\n    const groupByGroupId = (data, keyFn) =>\r\n      data.reduce((acc, group) => {\r\n        const groupId = keyFn(group);\r\n        const ind = acc.find(x => x.id === groupId);\r\n\r\n        if (!ind) {\r\n          acc[acc.length] = group;\r\n        } else {\r\n          const ix = acc.indexOf(ind);\r\n          if (acc[ix].address.split('|').indexOf(group.address) === -1) {\r\n            acc[ix].address = `${acc[ix].address}|${group.address}`;\r\n          }\r\n          acc[ix].items.push(...group.items);\r\n        }\r\n        return acc;\r\n      }, []);\r\n\r\n    // merge Layer for each Level (catalog, group(recursive))\r\n    const recursiveGroupByLayerAddress = (items, keyFn) =>\r\n      items.reduce((acc, item, idx, arr) => {\r\n        const layerTitle = keyFn(item);\r\n        const outItem = Object.assign({}, item);\r\n\r\n        if (item.type === CatalogItemType.Layer) {\r\n          // same title, same address => result: only one item is keep\r\n\r\n          // same title, address diff\r\n          const indicesMatchTitle = [];\r\n          const diffAddress = arr.filter((x, i) => {\r\n            let bInd = false;\r\n            if (x.title === layerTitle && x.type === CatalogItemType.Layer) {\r\n              if (i !== idx && x.address !== item.address) {\r\n                bInd = true;\r\n              }\r\n              indicesMatchTitle.push(i);\r\n            }\r\n            return bInd;\r\n          }); // $& i !== idx\r\n\r\n          if (diffAddress.length > 0) {\r\n            const nPosition = indicesMatchTitle.findIndex(x => x === idx) + 1;\r\n            outItem.title = `${item.title} (${nPosition})`; // source: ${item.address.split('.')[0]}\r\n          }\r\n\r\n          const exist = acc.find(\r\n            x => x.title === outItem.title && x.type === CatalogItemType.Layer\r\n          );\r\n          if (!exist) {\r\n            acc[acc.length] = outItem;\r\n          }\r\n        } else if (item.type === CatalogItemType.Group) {\r\n          outItem.items = recursiveGroupByLayerAddress(\r\n            item.items,\r\n            layer => layer.title\r\n          );\r\n          acc[acc.length] = outItem;\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n    const request4$ = request3$.pipe(\r\n      map(output => groupByGroupId(output, group => group.id)),\r\n      map(output => [].concat(...output)),\r\n      map(data => recursiveGroupByLayerAddress(data, layer => layer.title))\r\n    );\r\n\r\n    return request4$;\r\n  }\r\n\r\n  private getCatalogCapabilities(catalog: Catalog): Observable<any> {\r\n    const sType: string = TypeCatalog[catalog.type as string];\r\n    return this.capabilitiesService.getCapabilities(\r\n      TypeCapabilities[sType],\r\n      catalog.url,\r\n      catalog.version\r\n    );\r\n  }\r\n\r\n  private prepareCatalogItemLayer(layer, idParent, layersQueryFormat, catalog) {\r\n    const configuredQueryFormat = this.retriveLayerInfoFormat(\r\n      layer.Name,\r\n      layersQueryFormat\r\n    );\r\n\r\n    const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n    const legendOptions =\r\n      catalog.showLegend && layer.Style\r\n        ? this.capabilitiesService.getStyle(layer.Style)\r\n        : undefined;\r\n\r\n    const params = Object.assign({}, catalog.queryParams, {\r\n      LAYERS: layer.Name,\r\n      VERSION: catalog.version\r\n    } as WMSDataSourceOptionsParams);\r\n\r\n    const baseSourceOptions = {\r\n      type: 'wms',\r\n      url: catalog.url,\r\n      crossOrigin: catalog.setCrossOriginAnonymous ? 'anonymous' : undefined,\r\n      queryFormat: configuredQueryFormat,\r\n      queryHtmlTarget:\r\n        configuredQueryFormat === QueryFormat.HTML ||\r\n        configuredQueryFormat === QueryFormat.HTMLGML2\r\n          ? 'iframe'\r\n          : undefined,\r\n      optionsFromCapabilities: true\r\n    };\r\n\r\n    const sourceOptions = Object.assign(\r\n      {},\r\n      baseSourceOptions,\r\n      catalog.sourceOptions,\r\n      { params }\r\n    ) as WMSDataSourceOptions;\r\n\r\n    const layerPrepare = {\r\n      id: generateIdFromSourceOptions(sourceOptions),\r\n      type: CatalogItemType.Layer,\r\n      title: layer.Title,\r\n      address: idParent,\r\n      options: {\r\n        maxResolution: getResolutionFromScale(layer.MaxScaleDenominator),\r\n        minResolution: getResolutionFromScale(layer.MinScaleDenominator),\r\n        metadata: {\r\n          url: metadata ? metadata.OnlineResource : undefined,\r\n          extern: metadata ? true : undefined\r\n        },\r\n        legendOptions,\r\n        tooltip: { type: catalog.tooltipType },\r\n        sourceOptions\r\n      }\r\n    };\r\n\r\n    return ObjectUtils.removeUndefined(layerPrepare);\r\n  }\r\n\r\n  private prepareCatalogItemGroup(\r\n    itemListIn,\r\n    regexes,\r\n    idGroup,\r\n    layersQueryFormat,\r\n    catalog\r\n  ) {\r\n    const groupPrepare = {\r\n      id: idGroup,\r\n      type: CatalogItemType.Group,\r\n      title: itemListIn.Title,\r\n      address: catalog.id,\r\n      items: itemListIn.Layer.reduce((items: CatalogItem[], layer: any) => {\r\n        if (layer.Layer !== undefined) {\r\n          // recursive, check next level\r\n          const idGroupItemNextLevel =\r\n            idGroup + `.group.${layer.Name || layer.Layer[0].Name}`;\r\n          const groupItem: CatalogItemGroup = this.prepareCatalogItemGroup(\r\n            layer,\r\n            regexes,\r\n            idGroupItemNextLevel,\r\n            layersQueryFormat,\r\n            catalog\r\n          );\r\n\r\n          items.push(groupItem);\r\n        } else {\r\n          if (this.testLayerRegexes(layer.Name, regexes) === false) {\r\n            return items;\r\n          }\r\n\r\n          const layerItem: CatalogItemLayer<\r\n            ImageLayerOptions\r\n          > = this.prepareCatalogItemLayer(\r\n            layer,\r\n            idGroup,\r\n            layersQueryFormat,\r\n            catalog\r\n          );\r\n\r\n          items.push(layerItem);\r\n        }\r\n        return items;\r\n      }, [])\r\n    };\r\n    return groupPrepare;\r\n  }\r\n\r\n  private includeRecursiveItems(\r\n    catalog: Catalog,\r\n    itemListIn: any,\r\n    itemsPrepare: CatalogItem[],\r\n    loopLevel: number = 0\r\n  ) {\r\n    // Dig all levels until last level (layer object are not defined on last level)\r\n    const regexes = (catalog.regFilters || []).map(\r\n      (pattern: string) => new RegExp(pattern)\r\n    );\r\n    if (!itemListIn.Layer) {\r\n      return;\r\n    }\r\n\r\n    for (const item of itemListIn.Layer) {\r\n      if (item.Layer !== undefined) {\r\n        // recursive, check next level\r\n        this.includeRecursiveItems(catalog, item, itemsPrepare, loopLevel + 1);\r\n        continue;\r\n      }\r\n\r\n      const layersQueryFormat = this.findCatalogInfoFormat(catalog);\r\n\r\n      // group(with layers) and layer(without group) level 1\r\n      if (loopLevel !== 0) {\r\n        // TODO: Slice that into multiple methods\r\n        // Define object of group layer\r\n        const idGroupItem = `catalog.group.${itemListIn.Name || item.Name}`;\r\n        const groupItem = this.prepareCatalogItemGroup(\r\n          itemListIn,\r\n          regexes,\r\n          idGroupItem,\r\n          layersQueryFormat,\r\n          catalog\r\n        );\r\n\r\n        if (groupItem.items.length !== 0) {\r\n          itemsPrepare.push(groupItem);\r\n        }\r\n\r\n        // Break the group (don't add a group of layer for each of their layer!)\r\n        break;\r\n      } else {\r\n        // layer without group\r\n        if (this.testLayerRegexes(item.Name, regexes) !== false) {\r\n          const layerItem = this.prepareCatalogItemLayer(\r\n            item,\r\n            catalog.id,\r\n            layersQueryFormat,\r\n            catalog\r\n          );\r\n          itemsPrepare.push(layerItem);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getWMTSItems(\r\n    catalog: Catalog,\r\n    capabilities: { [key: string]: any }\r\n  ): CatalogItemLayer[] {\r\n    const layers = capabilities.Contents.Layer;\r\n    const regexes = (catalog.regFilters || []).map(\r\n      (pattern: string) => new RegExp(pattern)\r\n    );\r\n\r\n    return layers\r\n      .map((layer: any) => {\r\n        if (this.testLayerRegexes(layer.Identifier, regexes) === false) {\r\n          return undefined;\r\n        }\r\n        const params = Object.assign({}, catalog.queryParams, {\r\n          version: '1.0.0'\r\n        });\r\n        const baseSourceOptions = {\r\n          type: 'wmts',\r\n          url: catalog.url,\r\n          crossOrigin: catalog.setCrossOriginAnonymous\r\n            ? 'anonymous'\r\n            : undefined,\r\n          layer: layer.Identifier,\r\n          matrixSet: catalog.matrixSet,\r\n          optionsFromCapabilities: true,\r\n          requestEncoding: catalog.requestEncoding || 'KVP',\r\n          style: 'default'\r\n        } as WMTSDataSourceOptions;\r\n        const sourceOptions = Object.assign(\r\n          {},\r\n          baseSourceOptions,\r\n          catalog.sourceOptions,\r\n          { params }\r\n        ) as WMTSDataSourceOptions;\r\n\r\n        return ObjectUtils.removeUndefined({\r\n          id: generateIdFromSourceOptions(sourceOptions),\r\n          type: CatalogItemType.Layer,\r\n          title: layer.Title,\r\n          address: catalog.id,\r\n          options: {\r\n            sourceOptions\r\n          }\r\n        });\r\n      })\r\n      .filter((item: CatalogItemLayer | undefined) => item !== undefined);\r\n  }\r\n\r\n  private testLayerRegexes(layerName: string, regexes: RegExp[]): boolean {\r\n    if (regexes.length === 0) {\r\n      return true;\r\n    }\r\n    return regexes.find((regex: RegExp) => regex.test(layerName)) !== undefined;\r\n  }\r\n\r\n  private retriveLayerInfoFormat(\r\n    layerNameFromCatalog: string,\r\n    layersQueryFormat: { layer: string; queryFormat: QueryFormat }[]\r\n  ): QueryFormat {\r\n    const currentLayerInfoFormat = layersQueryFormat.find(\r\n      f => f.layer === layerNameFromCatalog\r\n    );\r\n    const baseInfoFormat = layersQueryFormat.find(f => f.layer === '*');\r\n    let queryFormat: QueryFormat;\r\n    if (currentLayerInfoFormat) {\r\n      queryFormat = currentLayerInfoFormat.queryFormat;\r\n    } else if (baseInfoFormat) {\r\n      queryFormat = baseInfoFormat.queryFormat;\r\n    }\r\n    return queryFormat;\r\n  }\r\n\r\n  private findCatalogInfoFormat(\r\n    catalog: Catalog\r\n  ): { layer: string; queryFormat: QueryFormat }[] {\r\n    const layersQueryFormat: { layer: string; queryFormat: QueryFormat }[] = [];\r\n    if (!catalog.queryFormat) {\r\n      return layersQueryFormat;\r\n    }\r\n    Object.keys(catalog.queryFormat).forEach(configuredInfoFormat => {\r\n      if (catalog.queryFormat[configuredInfoFormat] instanceof Array) {\r\n        catalog.queryFormat[configuredInfoFormat].forEach(layerName => {\r\n          if (\r\n            !layersQueryFormat.find(specific => specific.layer === layerName)\r\n          ) {\r\n            layersQueryFormat.push({\r\n              layer: layerName,\r\n              queryFormat: configuredInfoFormat as QueryFormat\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (\r\n          !layersQueryFormat.find(\r\n            specific =>\r\n              specific.layer === catalog.queryFormat[configuredInfoFormat]\r\n          )\r\n        ) {\r\n          layersQueryFormat.push({\r\n            layer: catalog.queryFormat[configuredInfoFormat],\r\n            queryFormat: configuredInfoFormat as QueryFormat\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return layersQueryFormat;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { zip, BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStore, EntityStoreWatcher } from '@igo2/common';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Component to browse a catalog's groups and layers and display them on a map.\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser',\r\n  templateUrl: './catalog-browser.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Catalog items store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<CatalogItem>;\r\n\r\n // private resolution$$: Subscription;\r\n\r\n  get resolution$(): BehaviorSubject<number> { return this.map.viewController.resolution$; }\r\n\r\n  @Input() catalogAllowLegend = false;\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Store holding the catalog's items\r\n   */\r\n  @Input() store: EntityStore<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Whether a group can be toggled when it's collapsed\r\n   */\r\n  @Input() toggleCollapsedGroup: boolean = true;\r\n\r\n  constructor(\r\n    private layerService: LayerService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    const currentItems = this.map.layers.map((layer: Layer) => {\r\n      return {\r\n        id: layer.options.source.id,\r\n        title: layer.title,\r\n        type: CatalogItemType.Layer\r\n      };\r\n    });\r\n    this.store.state.updateMany(currentItems, { added: true }, true);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n\r\n    const catalogShowLegend = this.catalog ? this.catalog.showLegend : false;\r\n    this.catalogAllowLegend = catalogShowLegend ? catalogShowLegend : this.catalogAllowLegend;\r\n\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Layer added event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const layer = event.layer;\r\n    this.store.state.update(layer, { added: event.added }, false);\r\n    event.added ? this.addLayerToMap(layer) : this.removeLayerFromMap(layer);\r\n  }\r\n\r\n  /**\r\n   * When a froup is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Group added event\r\n   */\r\n  onGroupAddedChange(event: { added: boolean; group: CatalogItemGroup }) {\r\n    const group = event.group;\r\n    this.store.state.update(group, { added: event.added }, false);\r\n    event.added ? this.addGroupToMap(group) : this.removeGroupFromMap(group);\r\n  }\r\n\r\n  /**\r\n   * Add layer to map\r\n   * @param layer Catalog layer\r\n   */\r\n  private addLayerToMap(layer: CatalogItemLayer) {\r\n    this.addLayersToMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove layer from map\r\n   * @param layer Catalog layer\r\n   */\r\n  private removeLayerFromMap(layer: CatalogItemLayer) {\r\n    this.removeLayersFromMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add multiple layers to map\r\n   * @param layers Catalog layers\r\n   */\r\n  private addLayersToMap(layers: CatalogItemLayer[]) {\r\n    const layers$ = layers.map((layer: CatalogItemLayer) => {\r\n      if (layer.options.sourceOptions.optionsFromApi === undefined) {\r\n        layer.options.sourceOptions.optionsFromApi = true;\r\n      }\r\n      return this.layerService.createAsyncLayer(layer.options);\r\n    });\r\n\r\n    zip(...layers$).subscribe((oLayers: Layer[]) => {\r\n      this.store.state.updateMany(layers, { added: true });\r\n      this.map.addLayers(oLayers);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove multiple layers from map\r\n   * @param layers Catalog layers\r\n   */\r\n  private removeLayersFromMap(layers: CatalogItemLayer[]) {\r\n    layers.forEach((layer: CatalogItemLayer) => {\r\n      this.store.state.update(layer, { added: false });\r\n      if (layer.options.baseLayer === true) {\r\n        const oLayer = this.map.getLayerById(layer.options.id);\r\n        if (oLayer !== undefined) {\r\n          this.map.removeLayer(oLayer);\r\n        }\r\n      } else {\r\n        const oLayer = this.map.getLayerById(layer.id);\r\n        if (oLayer !== undefined) {\r\n          this.map.removeLayer(oLayer);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sort the layers by title. asc or desc.\r\n   * @internal\r\n   */\r\n  private sortCatalogItemsByTitle(items: CatalogItem[], direction) {\r\n    const returnItem = items.sort((a, b) => {\r\n      const titleA = a.title.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      const titleB = b.title.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n\r\n      if (titleA < titleB) {\r\n        return -1;\r\n      }\r\n      if (titleA > titleB) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n    switch (direction) {\r\n      case 'asc':\r\n        return returnItem;\r\n      case 'desc':\r\n        return returnItem.reverse();\r\n      default:\r\n        return items;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add all the layers of a group to map\r\n   * @param group Catalog group\r\n   */\r\n  private addGroupToMap(group: CatalogItemGroup) {\r\n    let layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === false;\r\n    });\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      layers = this.sortCatalogItemsByTitle(layers, this.catalog.sortDirection);\r\n  }\r\n    this.addLayersToMap(layers.reverse() as CatalogItemLayer[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all the layers of a group from map\r\n   * @param group Catalog group\r\n   */\r\n  private removeGroupFromMap(group: CatalogItemGroup) {\r\n    const layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === true;\r\n    });\r\n    this.removeLayersFromMap(layers as CatalogItemLayer[]);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { CatalogItemLayer } from '../shared';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { first } from 'rxjs/operators';\r\nimport { Layer } from '../../layer/shared/layers';\r\n\r\n/**\r\n * Catalog browser layer item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-layer',\r\n  templateUrl: './catalog-browser-layer.component.html',\r\n  styleUrls: ['./catalog-browser-layer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserLayerComponent implements OnInit {\r\n  public inRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n  public isPreview$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private lastTimeoutRequest;\r\n\r\n  public layerLegendShown$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  public igoLayer$ = new BehaviorSubject<Layer>(undefined);\r\n\r\n  @Input() resolution: number;\r\n\r\n  @Input() catalogAllowLegend = false;\r\n\r\n  /**\r\n   * Catalog layer\r\n   */\r\n  @Input() layer: CatalogItemLayer;\r\n\r\n  /**\r\n   * Whether the layer is already added to the map\r\n   */\r\n  @Input() added = false;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  @Output() addedLayerIsPreview = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.layer);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.layer) || 'layers';\r\n  }\r\n\r\n  constructor(private layerService: LayerService ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isInResolutionsRange();\r\n    this.isPreview$.subscribe(value => this.addedLayerIsPreview.emit(value));\r\n  }\r\n\r\n  /**\r\n   * On mouse event, mouseenter /mouseleave\r\n   * @internal\r\n   */\r\n  onMouseEvent(event) {\r\n    this.onToggleClick(event);\r\n  }\r\n\r\n  askForLegend(event) {\r\n    this.layerLegendShown$.next(!this.layerLegendShown$.value);\r\n    this.layerService.createAsyncLayer(this.layer.options).pipe(first())\r\n    .subscribe(layer => this.igoLayer$.next(layer));\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick(event) {\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') {\r\n      clearTimeout(this.lastTimeoutRequest);\r\n    }\r\n\r\n    switch (event.type) {\r\n      case 'click':\r\n        if (!this.isPreview$.value) {\r\n          if (this.added) {\r\n            this.remove();\r\n          } else {\r\n            this.add();\r\n          }\r\n        }\r\n        this.isPreview$.next(false);\r\n        break;\r\n      case 'mouseenter':\r\n        if (!this.isPreview$.value && !this.added) {\r\n          this.lastTimeoutRequest = setTimeout(() => {\r\n            this.add();\r\n            this.isPreview$.next(true);\r\n          }, 500);\r\n        }\r\n        break;\r\n      case 'mouseleave':\r\n        if (this.isPreview$.value) {\r\n          this.remove();\r\n          this.isPreview$.next(false);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    if (!this.added) {\r\n      this.added = true;\r\n      this.addedChange.emit({ added: true, layer: this.layer });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = false\r\n   */\r\n  private remove() {\r\n    if (this.added) {\r\n      this.added = false;\r\n      this.addedChange.emit({ added: false, layer: this.layer });\r\n    }\r\n  }\r\n\r\n  haveGroup(): boolean {\r\n    return !(!this.layer.address || this.layer.address.split('.').length === 1);\r\n  }\r\n\r\n  isInResolutionsRange(): boolean {\r\n    const minResolution = this.layer.options.minResolution || 0;\r\n    const maxResolution = this.layer.options.maxResolution || Infinity;\r\n    this.inRange$.next(\r\n      this.resolution >= minResolution && this.resolution <= maxResolution\r\n    );\r\n    return this.inRange$.value;\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    if (this.added) {\r\n      return this.isPreview$.value\r\n        ? 'igo.geo.catalog.layer.addToMap'\r\n        : this.inRange$.value\r\n        ? 'igo.geo.catalog.layer.removeFromMap'\r\n        : 'igo.geo.catalog.layer.removeFromMapOutRange';\r\n    } else {\r\n      return this.inRange$.value\r\n        ? 'igo.geo.catalog.layer.addToMap'\r\n        : 'igo.geo.catalog.layer.addToMapOutRange';\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStateManager, EntityStore } from '@igo2/common';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemGroup,\r\n  CatalogItemLayer,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Catalog browser group item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-group',\r\n  templateUrl: './catalog-browser-group.component.html',\r\n  styleUrls: ['./catalog-browser-group.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserGroupComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Group's items store\r\n   * @internal\r\n   */\r\n  store = new EntityStore<CatalogItem, CatalogItemState>([]);\r\n\r\n  /**\r\n   * Whether all the layers of the group are added\r\n   * @internal\r\n   */\r\n  added$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  preview$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  /**\r\n   * Whether the toggle button is disabled\r\n   * @internal\r\n   */\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Catalog group\r\n   */\r\n  @Input() group: CatalogItemGroup;\r\n\r\n  /**\r\n   * Whether the group is collapsed\r\n   */\r\n  @Input() collapsed: boolean = true;\r\n\r\n  @Input() resolution: number;\r\n\r\n  @Input() catalogAllowLegend = false;\r\n\r\n  /**\r\n   * Whether the group can be toggled when it's collapsed\r\n   */\r\n  @Input() toggleCollapsed: boolean = true;\r\n\r\n  /**\r\n   * Parent catalog's items store state. Groups share a unique\r\n   * EntityState that tracks the group and it's layers state (whether they are added or not).\r\n   * Sharing a unique state would also allow us to expand this component to allow\r\n   * the selection of a layer while unselecting any layer already selected in another group.\r\n   * This could be useful to display some layer info before adding it, for example.\r\n   */\r\n  @Input() state: EntityStateManager<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of the group is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    group: CatalogItemGroup;\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of a layer is clicked\r\n   */\r\n  @Output() layerAddedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return this.group.title;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.load(this.group.items);\r\n    this.evaluateAdded();\r\n    this.evaluateDisabled(this.collapsed);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.store.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added$.value ? this.remove() : this.add();\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleCollapsed(collapsed: boolean) {\r\n    this.evaluateDisabled(collapsed);\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, evaluate if all the layers of the group\r\n   * are now added or removed. If so, consider that the group itself is added\r\n   * or removed.\r\n   * @internal\r\n   * @param event Layer added change event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    this.layerAddedChange.emit(event);\r\n    this.tryToggleGroup(event);\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    this.added$.next(true);\r\n    this.addedChange.emit({\r\n      added: true,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private remove() {\r\n    this.added$.next(false);\r\n    this.addedChange.emit({\r\n      added: false,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  onLayerPreview(event) {\r\n    this.preview$.next(event);\r\n  }\r\n\r\n  /**\r\n   * If all the layers of the group added or removed, add or remove the group itself.\r\n   * @param event The last layer added change event to occur\r\n   */\r\n  private tryToggleGroup(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const added = event.added;\r\n    const layer = event.layer;\r\n\r\n    const layersAdded = this.store.view\r\n      .all()\r\n      .filter((item: CatalogItem) => item.id !== layer.id)\r\n      .map((item: CatalogItem) => this.state.get(item).added || false);\r\n\r\n    if (layersAdded.every(value => value === added)) {\r\n      added ? this.add() : this.remove();\r\n    } else if (this.added$.value === true) {\r\n      this.added$.next(false);\r\n    }\r\n  }\r\n\r\n  private evaluateAdded() {\r\n    const added = this.store.all().every((item: CatalogItem) => {\r\n      return (this.state.get(item).added || false) === true;\r\n    });\r\n    this.added$.next(added);\r\n  }\r\n\r\n  private evaluateDisabled(collapsed: boolean) {\r\n    let disabled = false;\r\n    if (this.toggleCollapsed === false) {\r\n      disabled = collapsed;\r\n    }\r\n    this.disabled$.next(disabled);\r\n  }\r\n\r\n  onTitleClick() {\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy, Optional } from '@angular/core';\r\nimport { Subscription, combineLatest } from 'rxjs';\r\n\r\nimport { RouteService } from '@igo2/core';\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { Layer } from '../shared/layers/layer';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { LayerLegendListComponent } from './layer-legend-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoLayerLegendListBinding]'\r\n})\r\nexport class LayerLegendListBindingDirective implements OnInit, OnDestroy {\r\n  private component: LayerLegendListComponent;\r\n  private layersOrResolutionChange$$: Subscription;\r\n  layersVisibility$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: LayerLegendListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n    this.layersOrResolutionChange$$ = combineLatest([\r\n      this.mapService.getMap().layers$,\r\n      this.mapService.getMap().viewController.resolution$]\r\n    ).pipe(\r\n      debounceTime(10)\r\n    ).subscribe((bunch: [Layer[], number]) => {\r\n      const shownLayers = bunch[0].filter((layer: Layer) => {\r\n        return layer.showInLayerList === true;\r\n      });\r\n      this.component.layers = shownLayers;\r\n\r\n      this.layersVisibility$$ = combineLatest(shownLayers\r\n        .map((layer: Layer) => layer.visible$))\r\n        .subscribe((r) => {\r\n          this.component.change$.next();\r\n        }\r\n        );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layersOrResolutionChange$$.unsubscribe();\r\n    if (this.layersVisibility$$ !== undefined) {\r\n      this.layersVisibility$$.unsubscribe();\r\n      this.layersVisibility$$ = undefined;\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatSliderModule,\r\n  MatBadgeModule,\r\n  MatSelectModule,\r\n  MatSlideToggleModule,\r\n  MatDividerModule,\r\n  MatMenuModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoListModule,\r\n  IgoCollapsibleModule,\r\n  IgoImageModule,\r\n  IgoPanelModule\r\n} from '@igo2/common';\r\n\r\nimport { LayerService } from './shared/layer.service';\r\nimport { StyleService } from './shared/style.service';\r\nimport { LayerListToolService } from './layer-list-tool/layer-list-tool.service';\r\nimport { LayerItemComponent } from './layer-item/layer-item.component';\r\nimport { LayerLegendComponent } from './layer-legend/layer-legend.component';\r\nimport { LayerListComponent } from './layer-list/layer-list.component';\r\nimport { LayerListToolComponent } from './layer-list-tool/layer-list-tool.component';\r\nimport { LayerListBindingDirective } from './layer-list/layer-list-binding.directive';\r\nimport { LayerLegendListBindingDirective } from './layer-legend-list/layer-legend-list-binding.directive';\r\nimport { TrackFeatureButtonComponent } from './track-feature-button/track-feature-button.component';\r\nimport { LayerLegendListComponent } from './layer-legend-list/layer-legend-list.component';\r\nimport { LayerLegendItemComponent } from './layer-legend-item/layer-legend-item.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    MatDividerModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    MatListModule,\r\n    MatSliderModule,\r\n    MatBadgeModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoImageModule,\r\n    IgoPanelModule\r\n  ],\r\n  exports: [\r\n    LayerItemComponent,\r\n    LayerLegendItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListToolComponent,\r\n    LayerLegendListComponent,\r\n    LayerListBindingDirective,\r\n    LayerLegendListBindingDirective,\r\n    TrackFeatureButtonComponent\r\n  ],\r\n  declarations: [\r\n    LayerItemComponent,\r\n    LayerLegendItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListToolComponent,\r\n    LayerLegendListComponent,\r\n    LayerListBindingDirective,\r\n    LayerLegendListBindingDirective,\r\n    TrackFeatureButtonComponent\r\n  ]\r\n})\r\nexport class IgoLayerModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLayerModule,\r\n      providers: [LayerService, StyleService, LayerListToolService]\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatBadgeModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoMatBadgeIconModule,\r\n  IgoCollapsibleModule,\r\n  IgoListModule\r\n} from '@igo2/common';\r\n\r\nimport { IgoMetadataModule } from './../../metadata/metadata.module';\r\nimport { CatalogBrowserComponent } from './catalog-browser.component';\r\nimport { CatalogBrowserLayerComponent } from './catalog-browser-layer.component';\r\nimport { CatalogBrowserGroupComponent } from './catalog-browser-group.component';\r\nimport { IgoLayerModule } from '../../layer/layer.module';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatBadgeModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoMatBadgeIconModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoMetadataModule,\r\n    IgoLayerModule\r\n  ],\r\n  exports: [\r\n    CatalogBrowserComponent\r\n  ],\r\n  declarations: [\r\n    CatalogBrowserComponent,\r\n    CatalogBrowserGroupComponent,\r\n    CatalogBrowserLayerComponent\r\n  ]\r\n})\r\nexport class IgoCatalogBrowserModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { EntityStore } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\nimport { Catalog } from '../shared/catalog.abstract';\r\n\r\n/**\r\n * Component to browse a list of available catalogs\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library',\r\n  templateUrl: './catalog-library.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryComponent implements OnInit {\r\n\r\n  /**\r\n   * Store holding the catalogs\r\n   */\r\n  @Input() store: EntityStore<Catalog>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted a catalog is selected or unselected\r\n   */\r\n  @Output() catalogSelectChange = new EventEmitter<{\r\n    selected: boolean;\r\n    catalog: Catalog;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.state.clear();\r\n  }\r\n\r\n  /**\r\n   * When a catalog is selected, update it's state in the store\r\n   * and emit the catalog select change event\r\n   * @internal\r\n   */\r\n  onCatalogSelect(catalog: Catalog) {\r\n    this.store.state.update(catalog, {\r\n      selected: true,\r\n      focused: true\r\n    }, true);\r\n    this.catalogSelectChange.emit({selected: true, catalog});\r\n  }\r\n\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { getEntityTitle } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\nimport { Catalog } from '../shared/catalog.abstract';\r\n\r\n/**\r\n * Catalog library item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library-item',\r\n  templateUrl: './catalog-library-item.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryItemComponent {\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.catalog); }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule } from '@igo2/common';\r\n\r\nimport { CatalogLibaryComponent, } from './catalog-library.component';\r\nimport { CatalogLibaryItemComponent } from './catalog-library-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoListModule\r\n  ],\r\n  exports: [\r\n    CatalogLibaryComponent\r\n  ],\r\n  declarations: [\r\n    CatalogLibaryComponent,\r\n    CatalogLibaryItemComponent\r\n  ]\r\n})\r\nexport class IgoCatalogLibraryModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatBadgeModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule, IgoCollapsibleModule, IgoMatBadgeIconModule } from '@igo2/common';\r\n\r\nimport { IgoCatalogBrowserModule } from './catalog-browser/catalog-browser.module';\r\nimport { IgoCatalogLibraryModule } from './catalog-library/catalog-library.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatBadgeModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoMatBadgeIconModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule\r\n  ],\r\n  exports: [\r\n    IgoCatalogBrowserModule,\r\n    IgoCatalogLibraryModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoCatalogModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoDataSourceModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDataSourceModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DataSource } from '../../datasource/shared/datasources/datasource';\r\n\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\nimport { TimeFilterableDataSource } from './time-filter.interface';\r\n\r\n@Pipe({\r\n  name: 'filterableDataSource'\r\n})\r\nexport class FilterableDataSourcePipe implements PipeTransform {\r\n  transform(value: Layer[], arg: string): Layer[] {\r\n    let layers;\r\n\r\n    if (arg === 'time') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as TimeFilterableDataSource;\r\n        return (\r\n          this.isTimeFilterable(datasource) &&\r\n          datasource.options.timeFilter !== undefined &&\r\n          Object.keys(datasource.options.timeFilter).length\r\n        );\r\n      });\r\n    }\r\n    if (arg === 'ogc') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as OgcFilterableDataSource;\r\n        return this.isOgcFilterable(datasource);\r\n      });\r\n    }\r\n    return layers;\r\n  }\r\n\r\n  private isTimeFilterable(dataSource: TimeFilterableDataSource) {\r\n    if (dataSource.options.type !== 'wms') {\r\n      return false;\r\n    }\r\n    return dataSource.options.timeFilterable;\r\n  }\r\n\r\n  private isOgcFilterable(dataSource: OgcFilterableDataSource): boolean {\r\n    let isOgcFilterable = false;\r\n    if (\r\n      dataSource.options.ogcFilters &&\r\n      dataSource.options.ogcFilters.enabled &&\r\n      dataSource.options.ogcFilters.editable\r\n    ) {\r\n      isOgcFilterable = true;\r\n    }\r\n    if (\r\n      dataSource.options.ogcFilters &&\r\n      dataSource.options.ogcFilters.enabled &&\r\n      dataSource.options.ogcFilters.pushButtons) {\r\n        isOgcFilterable = true;\r\n    }\r\n    return isOgcFilterable;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { TileArcGISRestDataSource } from '../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\n@Injectable()\r\nexport class TimeFilterService {\r\n  constructor() {}\r\n\r\n  filterByDate(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    date: Date | [Date, Date]\r\n  ) {\r\n    let time;\r\n    let newdateform;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(date)) {\r\n      const dates = [];\r\n      if (date[0]) {\r\n        newdateformStart = this.reformatDateTime(date[0]);\r\n        dates.push(date[0]);\r\n      }\r\n      if (date[1]) {\r\n        newdateformEnd = this.reformatDateTime(date[1]);\r\n        dates.push(date[1]);\r\n      }\r\n      if (dates.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else if (date) {\r\n      newdateform = this.reformatDateTime(date);\r\n      time = newdateform;\r\n    }\r\n\r\n    const params = { TIME: time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  filterByYear(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    year: string | [string, string]\r\n  ) {\r\n    let time;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(year)) {\r\n      const years = [];\r\n      if (year[0]) {\r\n        newdateformStart = year[0];\r\n        years.push(year[0]);\r\n      }\r\n      if (year[1]) {\r\n        newdateformEnd = year[1];\r\n        years.push(year[1]);\r\n      }\r\n      if (years.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else {  // to reset filter.\r\n      time = year;\r\n    }\r\n\r\n    const params = { TIME: time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  private reformatDateTime(value) {\r\n    const year = value.getFullYear();\r\n    let month = value.getMonth() + 1;\r\n    let day = value.getUTCDate();\r\n    let hour = value.getUTCHours();\r\n    let minute = value.getUTCMinutes();\r\n\r\n    if (Number(month) < 10) {\r\n      month = '0' + month;\r\n    }\r\n\r\n    if (Number(day) < 10) {\r\n      day = '0' + day;\r\n    }\r\n\r\n    if (Number(hour) < 10) {\r\n      hour = '0' + hour;\r\n    }\r\n\r\n    if (Number(minute) < 10) {\r\n      minute = '0' + minute;\r\n    }\r\n\r\n    return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':00Z';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { OgcFilterWriter } from './ogc-filter';\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\n\r\n@Injectable()\r\nexport class OGCFilterService {\r\n  constructor() {}\r\n\r\n  public filterByOgc(wmsDatasource: WMSDataSource, filterString: string) {\r\n    const appliedFilter = new OgcFilterWriter().formatProcessedOgcFilter(filterString, wmsDatasource.options.params.LAYERS);\r\n    wmsDatasource.ol.updateParams({ FILTER: appliedFilter });\r\n  }\r\n\r\n  public setOgcWFSFiltersOptions(wfsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wfsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.paramsWFS.fieldNameGeometry,\r\n        new olProjection({ code: options.paramsWFS.srsName }),\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          options.ogcFilters.filters,\r\n          options.paramsWFS.fieldNameGeometry\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public setOgcWMSFiltersOptions(wmsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wmsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.fieldNameGeometry,\r\n        undefined,\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          // With some wms server, this param must be set to make spatials call.\r\n          options.ogcFilters.filters,\r\n          options.fieldNameGeometry\r\n        );\r\n      }\r\n      this.filterByOgc(\r\n        wmsDatasource as WMSDataSource,\r\n        ogcFilterWriter.buildFilter(options.ogcFilters.filters)\r\n      );\r\n      options.filtered = true;\r\n    } else {\r\n      options.ogcFilters.filters = undefined;\r\n      options.ogcFilters.interfaceOgcFilters = [];\r\n      options.filtered = false;\r\n    }\r\n  }\r\n}\r\n","export enum SpatialFilterQueryType {\r\n    AdmRegion = 'AdmRegion',\r\n    Mun = 'Mun',\r\n    Arrond = 'Arrond',\r\n    CircFed = 'CircFed',\r\n    CircProv = 'CircProv',\r\n    DirReg = 'DirReg',\r\n    MRC = 'MRC',\r\n    RegTour = 'RegTour'\r\n}\r\n\r\nexport enum SpatialFilterType {\r\n    Predefined = 'Predefined',\r\n    Polygon = 'Polygon',\r\n    Point = 'Point'\r\n}\r\n\r\nexport enum SpatialFilterItemType {\r\n    Address = 'Address',\r\n    Thematics = 'Thematics'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../../feature/shared';\r\nimport {\r\n  SpatialFilterQueryType,\r\n  SpatialFilterItemType\r\n} from './spatial-filter.enum';\r\nimport { SpatialFilterThematic } from './spatial-filter.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpatialFilterService {\r\n  public baseUrl: string = 'https://geoegl.msp.gouv.qc.ca/apis/terrapi/';\r\n\r\n  /*\r\n   * Type association with URL\r\n   */\r\n  public urlFilterList = {\r\n    AdmRegion: 'regadmin',\r\n    Arrond: 'arrondissements',\r\n    CircFed: 'circ-fed',\r\n    CircProv: 'circ-prov',\r\n    DirReg: 'dir-reg',\r\n    MRC: 'mrc',\r\n    Mun: 'municipalites',\r\n    RegTour: 'tourisme',\r\n    bornes: 'bornes-sumi',\r\n    hydro: 'hydro',\r\n    routes: 'routes'\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    private configService: ConfigService\r\n  ) {\r\n    this.baseUrl =\r\n      this.configService.getConfig('spatialFilter.url') || this.baseUrl;\r\n  }\r\n\r\n  getKeyByValue(object, value) {\r\n    return Object.keys(object).find(key => object[key] === value);\r\n  }\r\n\r\n  /*\r\n   * Loading data for spatial filter list component (NO GEOMETRY)\r\n   */\r\n  loadFilterList(type: SpatialFilterQueryType): Observable<Feature[]> {\r\n    const urlPath = type as string;\r\n    if (urlPath) {\r\n      return this.http\r\n        .get<{ features: Feature[] }>(\r\n          this.baseUrl + this.urlFilterList[urlPath]\r\n        )\r\n        .pipe(\r\n          map(featureCollection =>\r\n            featureCollection.features.map(f => {\r\n              f.meta = {\r\n                id: f.properties.code\r\n              };\r\n              return f;\r\n            })\r\n          )\r\n        );\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Loading item list (STRING)\r\n   */\r\n  loadThematicsList() {\r\n    const url = 'types';\r\n    const items: SpatialFilterThematic[] = [];\r\n    return this.http.get(this.baseUrl + url).pipe(\r\n      map((types: string[]) => {\r\n        types.forEach(type => {\r\n          if (type.startsWith('lieux')) {\r\n            const item: SpatialFilterThematic = {\r\n              name: undefined,\r\n              source: type\r\n            };\r\n            let substr = type.substring(6, type.length);\r\n            let name = substr;\r\n            if (substr.includes('.')) {\r\n              const index = substr.indexOf('.');\r\n              name = substr.substring(index + 1, substr.length);\r\n              substr = substr.substring(0, index);\r\n            }\r\n            try {\r\n              item.name = this.languageService.translate.instant(\r\n                'igo.geo.terrapi.' + name\r\n              );\r\n            } catch (e) {\r\n              item.name = name.substring(0, 1).toUpperCase() + name.substring(1, name.length - 1);\r\n            }\r\n\r\n            try {\r\n              item.group = this.languageService.translate.instant(\r\n                'igo.geo.spatialFilter.group.' + substr\r\n              );\r\n            } catch (e) {\r\n              item.group = substr.substring(0, 1).toUpperCase() + substr.substring(1, name.length - 1);\r\n            }\r\n\r\n            items.push(item);\r\n          } else {\r\n            if (this.getKeyByValue(this.urlFilterList, type)) {\r\n              const item: SpatialFilterThematic = {\r\n                name: undefined,\r\n                source: type\r\n              };\r\n              const name = this.getKeyByValue(this.urlFilterList, type);\r\n              try {\r\n                item.name = this.languageService.translate.instant(\r\n                  'igo.geo.terrapi.' + name\r\n                );\r\n              } catch (e) {\r\n                item.name = name.substring(0, 1).toUpperCase() + name.substring(1, name.length - 1);\r\n              }\r\n              item.source = type;\r\n\r\n              items.push(item);\r\n            }\r\n          }\r\n        });\r\n        return items;\r\n      })\r\n    );\r\n  }\r\n\r\n  /*\r\n   * Loading data for spatial filter item component (Address or Thematics) depends on predefined zone or draw zone (feature)\r\n   */\r\n  loadFilterItem(\r\n    feature,\r\n    itemType: SpatialFilterItemType,\r\n    type?: SpatialFilterQueryType,\r\n    thematic?: SpatialFilterThematic,\r\n    buffer?: number\r\n  ) {\r\n    if (type) {\r\n      // Predefined type\r\n      const urlType = type as string;\r\n      const url = this.baseUrl + this.urlFilterList[urlType];\r\n      let urlItem = '';\r\n      if (itemType === SpatialFilterItemType.Address) {\r\n        urlItem = 'adresses';\r\n        return this.http\r\n          .get<{ features: Feature[] }>(\r\n            url + '/' + feature.properties.code + '/' + urlItem,\r\n            {\r\n              params: {\r\n                geometry: 'true',\r\n                icon: 'true'\r\n              }\r\n            }\r\n          )\r\n          .pipe(\r\n            map(featureCollection =>\r\n              featureCollection.features.map(f => {\r\n                f.meta = {\r\n                  id: f.properties.code,\r\n                  title: this.languageService.translate.instant(\r\n                    'igo.geo.spatialFilter.Address'\r\n                  ),\r\n                  icon: (f as any).icon\r\n                };\r\n                return f;\r\n              })\r\n            )\r\n          );\r\n      } else {\r\n        // If thematics search\r\n        urlItem = thematic.source;\r\n        return this.http\r\n          .get<{ features: Feature[] }>(\r\n            url + '/' + feature.properties.code + '/' + urlItem,\r\n            {\r\n              params: {\r\n                geometry: 'true',\r\n                icon: 'true'\r\n              }\r\n            }\r\n          )\r\n          .pipe(\r\n            map(featureCollection =>\r\n              featureCollection.features.map(f => {\r\n                f.meta = {\r\n                  id: f.properties.code,\r\n                  title: thematic.name,\r\n                  icon: (f as any).icon\r\n                };\r\n                return f;\r\n              })\r\n            )\r\n          );\r\n      }\r\n    } else {\r\n      // Draw type\r\n      const url = this.baseUrl + 'locate';\r\n      if (itemType === SpatialFilterItemType.Address) {\r\n        const urlItem = '?type=adresses';\r\n        return this.http\r\n          .post<{ features: Feature[] }>(url + urlItem, {\r\n            geometry: 'true',\r\n            icon: 'true',\r\n            buffer,\r\n            loc: JSON.stringify(feature)\r\n          })\r\n          .pipe(\r\n            map(featureCollection =>\r\n              featureCollection.features.map(f => {\r\n                f.meta = {\r\n                  id: f.properties.code,\r\n                  title: this.languageService.translate.instant(\r\n                    'igo.geo.spatialFilter.Address'\r\n                  ),\r\n                  icon: (f as any).icon\r\n                };\r\n                return f;\r\n              })\r\n            )\r\n          );\r\n      } else {\r\n        // If thematics search\r\n        const urlItem = '?type=' + thematic.source;\r\n        return this.http\r\n          .post<{ features: Feature[] }>(url + urlItem, {\r\n            geometry: 'true',\r\n            icon: 'true',\r\n            buffer,\r\n            loc: JSON.stringify(feature)\r\n          })\r\n          .pipe(\r\n            map(featureCollection =>\r\n              featureCollection.features.map(f => {\r\n                f.meta = {\r\n                  id: f.properties.code,\r\n                  title: thematic.name,\r\n                  icon: (f as any).icon\r\n                };\r\n                return f;\r\n              })\r\n            )\r\n          );\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Get one territory by id (WITH GEOMETRY)\r\n   */\r\n  loadItemById(\r\n    feature: Feature,\r\n    type: SpatialFilterQueryType\r\n  ): Observable<Feature> {\r\n    const featureType = this.urlFilterList[type];\r\n    const featureCode = '/' + feature.properties.code;\r\n    if (featureType && featureCode) {\r\n      return this.http\r\n        .get<Feature>(this.baseUrl + featureType + featureCode, {\r\n          params: {\r\n            geometry: 'true'\r\n          }\r\n        })\r\n        .pipe(\r\n          map(f => {\r\n            f.meta = {\r\n              id: f.properties.code,\r\n              alias: f.properties.nom,\r\n              title: f.properties.nom\r\n            };\r\n            return f;\r\n          })\r\n        );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { OgcFilterWriter, OgcFilterableDataSourceOptions } from '../../filter/shared';\r\n\r\nimport { DataSourceOptions } from '../../datasource/shared/datasources/datasource.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DownloadService {\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  open(layer: Layer) {\r\n    const translate = this.languageService.translate;\r\n    const title = translate.instant('igo.geo.download.title');\r\n    this.messageService.success(\r\n      translate.instant('igo.geo.download.start'),\r\n      title\r\n    );\r\n\r\n    const DSOptions: DataSourceOptions = layer.dataSource.options;\r\n    if (Object.keys(DSOptions.download).length > 0) {\r\n      if (\r\n        DSOptions.download.dynamicUrl &&\r\n        DSOptions.download.url === undefined\r\n      ) {\r\n        let wfsOptions;\r\n        if (\r\n          (layer.dataSource.options as any).paramsWFS &&\r\n          Object.keys((layer.dataSource.options as any).paramsWFS).length > 0\r\n        ) {\r\n          wfsOptions = (layer.dataSource.options as any).paramsWFS;\r\n        } else {\r\n          wfsOptions = (layer.dataSource.options as any).params;\r\n        }\r\n\r\n        const outputFormatDownload =\r\n          wfsOptions.outputFormatDownload === undefined\r\n            ? 'outputformat=' + wfsOptions.outputFormat\r\n            : 'outputformat=' + wfsOptions.outputFormatDownload;\r\n\r\n        const baseurl = DSOptions.download.dynamicUrl\r\n          .replace(/&?outputformat=[^&]*/gi, '')\r\n          .replace(/&?filter=[^&]*/gi, '')\r\n          .replace(/&?bbox=[^&]*/gi, '');\r\n\r\n        const ogcFilters = (layer.dataSource.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n\r\n        let filterQueryString;\r\n        filterQueryString = new OgcFilterWriter()\r\n        .handleOgcFiltersAppliedValue(\r\n          layer.dataSource.options,\r\n          ogcFilters.geometryName,\r\n          layer.map.viewController.getExtent(),\r\n          new olProjection({ code: layer.map.projection }));\r\n        if (!filterQueryString) {\r\n          // Prevent getting all the features for empty filter\r\n            filterQueryString = new OgcFilterWriter().buildFilter(\r\n            undefined,\r\n            layer.map.viewController.getExtent(),\r\n            new olProjection({ code: layer.map.projection }),\r\n            ogcFilters.geometryName\r\n          );\r\n        } else {\r\n          filterQueryString = 'filter=' + encodeURIComponent(filterQueryString);\r\n        }\r\n        window.open(\r\n          `${baseurl}&${filterQueryString}&${outputFormatDownload}`,\r\n          '_blank'\r\n        );\r\n      } else if (DSOptions.download) {\r\n        window.open(DSOptions.download.url, '_blank');\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport { DownloadDataSourceOptions } from '../shared/download.interface';\r\nimport { DownloadService } from '../shared/download.service';\r\n\r\n@Component({\r\n  selector: 'igo-download-button',\r\n  templateUrl: './download-button.component.html',\r\n  styleUrls: ['./download-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DownloadButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private downloadService: DownloadService) {}\r\n\r\n  openDownload(layer: Layer) {\r\n    this.downloadService.open(layer);\r\n  }\r\n\r\n  get options(): DownloadDataSourceOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { DownloadButtonComponent } from './download-button/download-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [DownloadButtonComponent],\r\n  declarations: [DownloadButtonComponent]\r\n})\r\nexport class IgoDownloadModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDownloadModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { Feature } from '../shared';\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\nimport { IgoMap } from '../../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-feature-details',\r\n  templateUrl: './feature-details.component.html',\r\n  styleUrls: ['./feature-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class FeatureDetailsComponent {\r\n  private state: ConnectionState;\r\n\r\n  @Input()\r\n  get source(): SearchSource {\r\n    return this._source;\r\n  }\r\n  set source(value: SearchSource ) {\r\n    this._source = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  private _feature: Feature;\r\n  private _source: SearchSource;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.feature);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.feature) || 'link';\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private sanitizer: DomSanitizer,\r\n    private networkService: NetworkService\r\n  ) {\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      this.state = state;\r\n    });\r\n  }\r\n\r\n  htmlSanitizer(value): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n  }\r\n\r\n  isObject(value) {\r\n    return typeof value === 'object';\r\n  }\r\n\r\n  isUrl(value) {\r\n    if (typeof value === 'string') {\r\n      return (\r\n        value.slice(0, 8) === 'https://' || value.slice(0, 7) === 'http://'\r\n      );\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  filterFeatureProperties(feature) {\r\n    const allowedFieldsAndAlias = feature.meta ? feature.meta.alias : undefined;\r\n    const properties = {};\r\n    let offlineButtonState;\r\n\r\n    if (this.map) {\r\n      this.map.offlineButtonToggle$.subscribe(state => {\r\n        offlineButtonState = state;\r\n      });\r\n    }\r\n\r\n    if (allowedFieldsAndAlias) {\r\n      Object.keys(allowedFieldsAndAlias).forEach(field => {\r\n        properties[allowedFieldsAndAlias[field]] = feature.properties[field];\r\n      });\r\n      return properties;\r\n    } else if (offlineButtonState !== undefined) {\r\n      if (!offlineButtonState) {\r\n        if (this.state.connection && feature.meta && feature.meta.excludeAttribute) {\r\n          const excludeAttribute = feature.meta.excludeAttribute;\r\n          excludeAttribute.forEach(attribute => {\r\n            delete feature.properties[attribute];\r\n          });\r\n        } else if (!this.state.connection && feature.meta && feature.meta.excludeAttributeOffline) {\r\n          const excludeAttributeOffline = feature.meta.excludeAttributeOffline;\r\n          excludeAttributeOffline.forEach(attribute => {\r\n            delete feature.properties[attribute];\r\n          });\r\n        }\r\n      } else {\r\n        if (feature.meta && feature.meta.excludeAttributeOffline) {\r\n          const excludeAttributeOffline = feature.meta.excludeAttributeOffline;\r\n          excludeAttributeOffline.forEach(attribute => {\r\n            delete feature.properties[attribute];\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      if (this.state.connection && feature.meta && feature.meta.excludeAttribute) {\r\n        const excludeAttribute = feature.meta.excludeAttribute;\r\n        excludeAttribute.forEach(attribute => {\r\n          delete feature.properties[attribute];\r\n        });\r\n      } else if (!this.state.connection && feature.meta && feature.meta.excludeAttributeOffline) {\r\n        const excludeAttributeOffline = feature.meta.excludeAttributeOffline;\r\n        excludeAttributeOffline.forEach(attribute => {\r\n          delete feature.properties[attribute];\r\n        });\r\n      }\r\n    }\r\n\r\n    return feature.properties;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { FeatureDetailsComponent } from './feature-details.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [FeatureDetailsComponent],\r\n  declarations: [FeatureDetailsComponent]\r\n})\r\nexport class IgoFeatureDetailsModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFormModule } from '@igo2/common';\r\n\r\nimport { FeatureFormComponent } from './feature-form.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoFormModule\r\n  ],\r\n  exports: [\r\n    IgoFormModule,\r\n    FeatureFormComponent\r\n  ],\r\n  declarations: [\r\n    FeatureFormComponent\r\n  ]\r\n})\r\nexport class IgoFeatureFormModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFeatureDetailsModule } from './feature-details/feature-details.module';\r\nimport { IgoFeatureFormModule } from './feature-form/feature-form.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoFeatureDetailsModule,\r\n    IgoFeatureFormModule\r\n  ],\r\n  declarations: [],\r\n  providers: []\r\n})\r\nexport class IgoFeatureModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport { Style as OlStyle } from 'ol/style';\r\n\r\nimport { FormFieldComponent } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map.\r\n */\r\n@FormFieldComponent('geometry')\r\n@Component({\r\n  selector: 'igo-geometry-form-field',\r\n  templateUrl: './geometry-form-field.component.html',\r\n  styleUrls: ['./geometry-form-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldComponent implements OnInit, OnDestroy {\r\n\r\n  readonly value$: BehaviorSubject<GeoJSONGeometry> = new BehaviorSubject(undefined);\r\n\r\n  private value$$: Subscription;\r\n\r\n  public drawControlIsActive = true;\r\n  public freehandDrawIsActive = false;\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  set geometryType(value: OlGeometryType) { this.geometryType$.next(value); }\r\n  get geometryType(): OlGeometryType { return this.geometryType$.value; }\r\n  readonly geometryType$: BehaviorSubject<OlGeometryType> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Whether a geometry type toggle should be displayed\r\n   */\r\n  @Input() geometryTypeField: boolean = false;\r\n\r\n  /**\r\n   * Available geometry types\r\n   */\r\n  @Input() geometryTypes: string[] = ['Point', 'LineString', 'Polygon'];\r\n\r\n  /**\r\n   * Whether a draw guide field should be displayed\r\n   */\r\n  @Input() drawGuideField: boolean = false;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input()\r\n  set drawGuide(value: number) { this.drawGuide$.next(value); }\r\n  get drawGuide(): number { return this.drawGuide$.value; }\r\n  readonly drawGuide$: BehaviorSubject<number> = new BehaviorSubject(0);\r\n\r\n  /**\r\n   * Draw guide placeholder\r\n   */\r\n  @Input() drawGuidePlaceholder: string = '';\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * Style for the draw control (applies while the geometry is being drawn)\r\n   */\r\n  @Input() drawStyle: OlStyle;\r\n\r\n  /**\r\n   * Style for the overlay layer (applies once the geometry is added to the map)\r\n   * If not specified, drawStyle applies\r\n   */\r\n  @Input() overlayStyle: OlStyle;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Set up a value stream\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.value$.next(this.formControl.value ? this.formControl.value : undefined);\r\n    this.value$$ = this.formControl.valueChanges.subscribe((value: GeoJSONGeometry) => {\r\n      this.value$.next(value ? value : undefined);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the value stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.value$$.unsubscribe();\r\n  }\r\n}\r\n","\r\nexport const MEASURE_UNIT_AUTO = 'auto';\r\n\r\nexport enum MeasureType {\r\n  Length = 'length',\r\n  Area = 'area'\r\n}\r\n\r\nexport enum MeasureLengthUnit {\r\n  Meters = 'meters',\r\n  Kilometers = 'kilometers',\r\n  Miles = 'miles',\r\n  Feet = 'feet'\r\n}\r\n\r\nexport const MeasureLengthUnitAbbreviation = {\r\n  [MeasureLengthUnit.Meters]: 'm',\r\n  [MeasureLengthUnit.Kilometers]: 'km',\r\n  [MeasureLengthUnit.Miles]: 'mi',\r\n  [MeasureLengthUnit.Feet]: 'ft'\r\n};\r\n\r\nexport enum MeasureAreaUnit {\r\n  SquareMeters = 'squareMeters',\r\n  SquareKilometers = 'squareKilometers',\r\n  SquareMiles = 'squareMiles',\r\n  SquareFeet = 'squareFeet',\r\n  Hectares = 'hectares',\r\n  Acres = 'acres'\r\n}\r\n\r\nexport const MeasureAreaUnitAbbreviation = {\r\n  [MeasureAreaUnit.SquareMeters]: 'mÂ²',\r\n  [MeasureAreaUnit.SquareKilometers]: 'kmÂ²',\r\n  [MeasureAreaUnit.SquareMiles]: 'miÂ²',\r\n  [MeasureAreaUnit.SquareFeet]: 'ftÂ²',\r\n  [MeasureAreaUnit.Hectares]: 'ha',\r\n  [MeasureAreaUnit.Acres]: 'ac'\r\n};\r\n","import { LanguageService } from '@igo2/core';\r\nimport * as olstyle from 'ol/style';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlPoint from 'ol/geom/Point';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { getCenter as olGetCenter } from 'ol/extent';\r\nimport {\r\n  getLength as olGetLength,\r\n  getArea as olGetArea\r\n} from 'ol/sphere';\r\n\r\nimport { Measure } from './measure.interfaces';\r\nimport {\r\n  MeasureAreaUnit,\r\n  MeasureAreaUnitAbbreviation,\r\n  MeasureLengthUnit,\r\n  MeasureLengthUnitAbbreviation\r\n} from './measure.enum';\r\n\r\n/**\r\n * Convert value from meters to kilometers\r\n * @param value Value in meters\r\n * @returns Value in kilometers\r\n */\r\nexport function metersToKilometers(value: number): number {\r\n  return value * 0.001;\r\n}\r\n\r\n/**\r\n * Convert value from meters to feet\r\n * @param value Value in meters\r\n * @returns Value in feet\r\n */\r\nexport function metersToFeet(value: number): number {\r\n  return value * 3.2808;\r\n}\r\n\r\n/**\r\n * Convert value from meters to miles\r\n * @param value Value in meters\r\n * @returns Value in miles\r\n */\r\nexport function metersToMiles(value: number): number {\r\n  return value * 0.000621;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square kilometers\r\n * @param value Value in square meters\r\n * @returns Value in square kilometers\r\n */\r\nexport function squareMetersToSquareKilometers(value: number): number {\r\n  return value * 0.000001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square miles\r\n * @param value Value in square meters\r\n * @returns Value in square miles\r\n */\r\nexport function squareMetersToSquareMiles(value: number): number {\r\n  return value * 0.0000003861;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square feet\r\n * @param value Value in square meters\r\n * @returns Value in square feet\r\n */\r\nexport function squareMetersToSquareFeet(value: number): number {\r\n  return value * 10.764;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to hectares\r\n * @param value Value in square meters\r\n * @returns Value in hectares\r\n */\r\nexport function squareMetersToHectares(value: number): number {\r\n  return value * 0.0001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to acres\r\n * @param value Value in square meters\r\n * @returns Value in acres\r\n */\r\nexport function squareMetersToAcres(value: number): number {\r\n  return value * 0.00024711;\r\n}\r\n\r\n/**\r\n * Convert value from meters to the specified length unit\r\n * @param value Value in meters\r\n * @param unit Length unit\r\n * @returns Value in unit\r\n */\r\nexport function metersToUnit(value: number, unit: MeasureLengthUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureLengthUnit.Meters, (val: number) => val],\r\n    [MeasureLengthUnit.Kilometers, metersToKilometers],\r\n    [MeasureLengthUnit.Miles, metersToMiles],\r\n    [MeasureLengthUnit.Feet, metersToFeet],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to the specified area unit\r\n * @param value Value in meters\r\n * @param unit Area unit\r\n * @returns Value in unit\r\n */\r\nexport function squareMetersToUnit(value: number, unit: MeasureAreaUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureAreaUnit.SquareMeters, (val: number) => val],\r\n    [MeasureAreaUnit.SquareKilometers, squareMetersToSquareKilometers],\r\n    [MeasureAreaUnit.SquareMiles, squareMetersToSquareMiles],\r\n    [MeasureAreaUnit.SquareFeet, squareMetersToSquareFeet],\r\n    [MeasureAreaUnit.Hectares, squareMetersToHectares],\r\n    [MeasureAreaUnit.Acres, squareMetersToAcres],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * This method format a measure to a readable format\r\n * @param measure Measure\r\n * @param options Formatting options\r\n * @returns Formatted measure\r\n */\r\nexport function formatMeasure(\r\n  measure: number,\r\n  options?: {\r\n    decimal?: number;\r\n    unit?: MeasureAreaUnit | MeasureLengthUnit;\r\n    unitAbbr?: boolean;\r\n    locale?: string;\r\n  },\r\n  languageService?: LanguageService) {\r\n  let decimal = options.decimal;\r\n  if (decimal === undefined || decimal < 0) {\r\n    decimal = 1;\r\n  }\r\n\r\n  const parts = [];\r\n  if (options.locale !== undefined) {\r\n    parts.push(measure.toLocaleString(options.locale, {\r\n      minimumFractionDigits: decimal,\r\n      maximumFractionDigits: decimal\r\n    }));\r\n  } else {\r\n    parts.push(measure.toFixed(decimal).toString());\r\n  }\r\n\r\n  if (options.unit !== undefined && options.unitAbbr === true) {\r\n    if (languageService) {\r\n      parts.push(\r\n        MeasureLengthUnitAbbreviation[options.unit] ?\r\n          languageService.translate.instant('igo.geo.measure.' + MeasureLengthUnitAbbreviation[options.unit]) :\r\n          languageService.translate.instant('igo.geo.measure.' + MeasureAreaUnitAbbreviation[options.unit])\r\n      );\r\n    } else {\r\n      parts.push(\r\n        MeasureLengthUnitAbbreviation[options.unit] || MeasureAreaUnitAbbreviation[options.unit]\r\n      );\r\n    }\r\n  }\r\n\r\n  return parts.filter(p => p !== undefined).join(' ');\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestLengthUnit(value: number): MeasureLengthUnit {\r\n  let unit = MeasureLengthUnit.Meters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureLengthUnit.Kilometers];\r\n  while (converted > 1000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = metersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in square meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestAreaUnit(value: number): MeasureAreaUnit {\r\n  let unit = MeasureAreaUnit.SquareMeters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureAreaUnit.SquareKilometers];\r\n  while (converted > 1000000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = squareMetersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Create a default style for a measure interaction\r\n * @returns OL style\r\n */\r\nexport function createMeasureInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      lineDash: [10, 10],\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke: new olstyle.Stroke({\r\n        color: '#ffcc33',\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: 'rgba(255, 255, 255, 0.2)'\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for a measure layer\r\n * @returns OL style\r\n */\r\nexport function createMeasureLayerStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Compute the length in meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Length in meters\r\n */\r\nexport function measureOlGeometryLength(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetLength(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area in square meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Area in square meters\r\n */\r\nexport function measureOlGeometryArea(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint || olGeometry instanceof OlLineString) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetArea(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area (square meters), length (meters) and last length (meters)\r\n * of an OL geometry with a given projection.\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Computed measure\r\n */\r\nexport function measureOlGeometry(olGeometry: OlGeometry, projection: string): Measure {\r\n  const length = measureOlGeometryLength(olGeometry, projection);\r\n  const area = measureOlGeometryArea(olGeometry, projection);\r\n\r\n  const lengths = [];\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const coordinatesLength = coordinates.length;\r\n  for (let i = 0; i <= coordinatesLength - 4; i += 2) {\r\n    const olSegment = new OlLineString([\r\n      [coordinates[i], coordinates[i + 1]],\r\n      [coordinates[i + 2], coordinates[i + 3]]\r\n    ]);\r\n\r\n    lengths.push(measureOlGeometryLength(olSegment, projection));\r\n  }\r\n\r\n  return {\r\n    area,\r\n    length,\r\n    lengths\r\n  };\r\n}\r\n\r\n/**\r\n * Update an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nexport function updateOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n\r\n  // TODO: handle multi geometries\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const j = i * 2;\r\n    const olSegment = new OlLineString([\r\n      [coordinates[j], coordinates[j + 1]],\r\n      [coordinates[j + 2], coordinates[j + 3]]\r\n    ]);\r\n\r\n    const midpointCoordinate = olSegment.getCoordinateAt(0.5);\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      olMidpoint.setCoordinates(midpointCoordinate);\r\n    } else {\r\n      olMidpoints[i] = new OlPoint(midpointCoordinate);\r\n    }\r\n  }\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Clear an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n */\r\nexport function clearOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon) {\r\n  const olMidpoints = olGeometry.get('_midpoints') || [];\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      if (olMidpoint !== undefined) {\r\n        clearOlMidpointTooltip(olMidpoint);\r\n      }\r\n    }\r\n  }\r\n\r\n  olGeometry.set('_midpoints', undefined, true);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Return an array of  OL geometry midpoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nfunction getOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const expectedNumber = Math.max((olGeometry.flatCoordinates.length / 2) - 1, 0);\r\n\r\n  // TODO: This works but it's quite messy. If time permits,\r\n  // clean this. Maybe a Tooltip class could handle that\r\n  let olMidpoints = olGeometry.get('_midpoints');\r\n  if (olMidpoints === undefined) {\r\n    olMidpoints = new Array(expectedNumber);\r\n    olGeometry.set('_midpoints', olMidpoints, true);\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber === olMidpoints.length) {\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber > olMidpoints.length) {\r\n    olMidpoints.push(...new Array(expectedNumber - olMidpoints.length));\r\n    return olMidpoints;\r\n  }\r\n\r\n  for (let i = expectedNumber; i < olMidpoints.length; i++) {\r\n    const olMidpoint = olMidpoints[expectedNumber];\r\n    if (olMidpoint !== undefined) {\r\n      clearOlMidpointTooltip(olMidpoint);\r\n    }\r\n  }\r\n  olMidpoints.splice(expectedNumber);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Remove an OL midpoint's tooltip from the map\r\n * @param olMidpoint OL Point\r\n */\r\nfunction clearOlMidpointTooltip(olMidpoint: OlPoint) {\r\n  const olTooltip = olMidpoint.get('_tooltip');\r\n  if (olTooltip !== undefined) {\r\n    const olMap = olTooltip.getMap();\r\n    if (olMap !== undefined) {\r\n      olMap.removeOverlay(olTooltip);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add an OL overlay at each midpoint and return an array of those overlays\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function updateOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n  const olTooltips = olMidpoints.map((olMidpoint: OlPoint) => {\r\n    let olTooltip = olMidpoint.get('_tooltip');\r\n    if (olTooltip === undefined) {\r\n      olTooltip = createOlTooltipAtPoint(olMidpoint);\r\n    } else {\r\n      olTooltip.setPosition(olMidpoint.flatCoordinates);\r\n    }\r\n    return olTooltip;\r\n  });\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n  return olMidpoints.map((olMidpoint: OlPoint) => {\r\n    return olMidpoint ? olMidpoint.get('_tooltip') : undefined;\r\n  });\r\n}\r\n\r\n/**\r\n * Update an OL geometry center and return it\r\n * @param olGeometry OL Geometry\r\n * @returns OL point\r\n */\r\nexport function updateOlGeometryCenter(olGeometry: OlLineString | OlPolygon): OlPoint {\r\n  let olCenter = olGeometry.get('_center');\r\n  const centerCoordinate = olGetCenter(olGeometry.getExtent());\r\n  if (olCenter !== undefined) {\r\n    olCenter.setCoordinates(centerCoordinate);\r\n  } else {\r\n    olCenter = new OlPoint(centerCoordinate);\r\n    olGeometry.set('_center', olCenter);\r\n  }\r\n\r\n  return olCenter;\r\n}\r\n\r\n/**\r\n * Add an OL overlay at the center of a geometry and return that overlay\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlay\r\n */\r\nexport function updateOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = updateOlGeometryCenter(olGeometry);\r\n  let olTooltip = olCenter.get('_tooltip');\r\n  if (olTooltip === undefined) {\r\n    olTooltip = createOlTooltipAtPoint(olCenter);\r\n  } else {\r\n    olTooltip.setPosition(olCenter.flatCoordinates);\r\n  }\r\n  return olTooltip;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = olGeometry.get('_center');\r\n  return olCenter ? olCenter.get('_tooltip') : undefined;\r\n}\r\n\r\n/**\r\n * Get all the tooltips of an OL geometry\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olTooltips = [].concat(getOlTooltipsAtMidpoints(olGeometry) || []);\r\n  const olCenterTooltip = getOlTooltipAtCenter(olGeometry);\r\n  if (olCenterTooltip !== undefined) {\r\n    olTooltips.push(olCenterTooltip);\r\n  }\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Create an OL overlay at a point and bind the overlay to the point\r\n * @param olPoint OL Point\r\n * @returns OL overlay\r\n */\r\nexport function createOlTooltipAtPoint(olPoint: OlPoint): OlOverlay {\r\n  const olTooltip = new OlOverlay({\r\n    element: document.createElement('div'),\r\n    offset: [-30, -10],\r\n    className: [\r\n      'igo-map-tooltip',\r\n      'igo-map-tooltip-measure'\r\n    ].join(' '),\r\n    stopEvent: false\r\n  });\r\n  olTooltip.setPosition(olPoint.flatCoordinates);\r\n  olPoint.set('_tooltip', olTooltip);\r\n\r\n  return olTooltip;\r\n}\r\n","/* tslint:disable */\r\n// See this issue: https://github.com/Microsoft/TypeScript/issues/13965\r\n// And the solution: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n// for an explanation as to why the prototype is set manually\r\n/* tslint:enable */\r\n\r\nexport class GeometrySliceError extends Error {}\r\n\r\nexport class GeometrySliceMultiPolygonError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice a MultiPolygon.');\r\n    Object.setPrototypeOf(this, GeometrySliceMultiPolygonError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceLineStringError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice with a line that has more than 2 points.');\r\n    Object.setPrototypeOf(this, GeometrySliceLineStringError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceTooManyIntersectionError extends GeometrySliceError {\r\n  constructor() {\r\n    super('More than 2 intersections found between the target polygon and the slicing line.');\r\n    Object.setPrototypeOf(this, GeometrySliceTooManyIntersectionError.prototype);\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport { GeometryEvent as OlGeometryEvent } from 'ol/geom/Geometry';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport lineIntersect from '@turf/line-intersect';\r\nimport { lineString } from '@turf/helpers';\r\n\r\nimport {\r\n  GeometrySliceMultiPolygonError,\r\n  GeometrySliceLineStringError,\r\n  GeometrySliceTooManyIntersectionError\r\n } from './geometry.errors';\r\n\r\n/**\r\n * Create a default style for draw and modify interactions\r\n * @param color Style color (R, G, B)\r\n * @returns OL style\r\n */\r\nexport function createDrawInteractionStyle(color?: [number, number, number]): olstyle.Style {\r\n  color = color || [0, 153, 255];\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: color.concat([1]),\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: color.concat([0.2])\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 8,\r\n      stroke: new olstyle.Stroke({\r\n        color: color.concat([1])\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: color.concat([0.2])\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for drawing a hole\r\n * @returns OL style\r\n */\r\nexport function createDrawHoleInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color:  [0, 153, 255, 1],\r\n      width: 2\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Slice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function sliceOlGeometry(\r\n  olGeometry: OlLineString | OlPolygon,\r\n  olSlicer: OlLineString\r\n): Array<OlLineString | OlPolygon> {\r\n  if (olGeometry instanceof OlPolygon) {\r\n    return sliceOlPolygon(olGeometry, olSlicer);\r\n  } else if (olGeometry instanceof OlLineString) {\r\n    return sliceOlLineString(olGeometry, olSlicer);\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL LineString into one or more lines\r\n * @param olLineString OL line string\r\n * @param olSlicer Slicing line\r\n * @returns New OL line strings\r\n */\r\nexport function sliceOlLineString(olLineString: OlLineString, olSlicer: OlLineString): OlLineString[] {\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL Polygon into one or more polygons\r\n * @param olPolygon OL polygon\r\n * @param olSlicer Slicing line\r\n * @returns New OL polygons\r\n */\r\nexport function sliceOlPolygon(olPolygon: OlPolygon, olSlicer: OlLineString): OlPolygon[] {\r\n  if (olPolygon.getLinearRingCount() > 1) {\r\n    throw new GeometrySliceMultiPolygonError();\r\n  }\r\n\r\n  if (olSlicer.getCoordinates().length > 2) {\r\n    throw new GeometrySliceLineStringError();\r\n  }\r\n\r\n  const olGeoJSON = new OlGeoJSON();\r\n  const slicer = olGeoJSON.writeGeometryObject(olSlicer);\r\n  const outerCoordinates = olPolygon.getLinearRing(0).getCoordinates();\r\n\r\n  const parts = [[], []];\r\n  let totalIntersectionCount = 0;\r\n  for (let i = 0, ii = outerCoordinates.length - 1; i < ii; i++) {\r\n    const segmentCoordinates = [outerCoordinates[i], outerCoordinates[i + 1]];\r\n    const segment = lineString(segmentCoordinates);\r\n    const intersections = lineIntersect(segment, slicer).features;\r\n\r\n    const intersectionCount = intersections.length;\r\n    totalIntersectionCount += intersectionCount;\r\n    if (intersectionCount > 1 || totalIntersectionCount > 2) {\r\n      throw new GeometrySliceTooManyIntersectionError();\r\n    }\r\n\r\n    parts[0].push(segmentCoordinates[0]);\r\n    if (intersectionCount === 1) {\r\n      const intersection = intersections[0].geometry.coordinates;\r\n      parts[0].push(intersection);\r\n      parts[1].push(intersection);\r\n      parts.reverse();\r\n    }\r\n  }\r\n\r\n  if (totalIntersectionCount <= 1) {\r\n    return [];\r\n  }\r\n\r\n  parts[0].push(parts[0][0]);\r\n  parts[1].push(parts[1][0]);\r\n\r\n  return [new OlPolygon([parts[0]]), new OlPolygon([parts[1]])];\r\n}\r\n\r\n/**\r\n * Splice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function addLinearRingToOlPolygon(olPolygon: OlPolygon, olLinearRing: OlLinearRing ): OlPolygon {\r\n  // TODO: make some validation and support updating an existing linear ring\r\n  olPolygon.appendLinearRing(olLinearRing);\r\n}\r\n\r\nexport function getMousePositionFromOlGeometryEvent(\r\n  olEvent: OlGeometryEvent\r\n): [number, number] {\r\n  const olGeometry = olEvent.target;\r\n  if (olGeometry instanceof OlPolygon) {\r\n    return olGeometry.flatCoordinates.slice(-4, -2);\r\n  }\r\n  return olGeometry.flatCoordinates.slice(-2);\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subject, Subscription, fromEvent, BehaviorSubject } from 'rxjs';\r\n\r\nimport { getMousePositionFromOlGeometryEvent } from '../geometry.utils';\r\n\r\nexport interface DrawControlOptions {\r\n  geometryType: OlGeometryType;\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  maxPoints?: number;\r\n}\r\n\r\n/**\r\n * Control to draw geometries\r\n */\r\nexport class DrawControl {\r\n\r\n  /**\r\n   * Draw start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Draw end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olDrawInteraction: OlDraw;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onChangesKey: string;\r\n\r\n  private mousePosition: [number, number];\r\n\r\n  private keyDown$$: Subscription;\r\n\r\n  freehand$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Geometry type\r\n   * @internal\r\n   */\r\n  get geometryType(): OlGeometryType {\r\n    return this.options.geometryType;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: DrawControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  addOlDrawInteraction() {\r\n    let olDrawInteraction;\r\n    if (this.freehand$.getValue() === false) {\r\n      olDrawInteraction = new OlDraw({\r\n        type: this.geometryType,\r\n        source: this.getSource(),\r\n        stopClick: true,\r\n        style: this.options.drawStyle,\r\n        maxPoints: this.options.maxPoints,\r\n        freehand: false,\r\n        freehandCondition: () => false\r\n      });\r\n    } else {\r\n      if (this.geometryType === 'Point') {\r\n        olDrawInteraction = new OlDraw({\r\n          type: 'Circle',\r\n          source: this.getSource(),\r\n          maxPoints: this.options.maxPoints,\r\n          freehand: true\r\n        });\r\n      } else {\r\n        olDrawInteraction = new OlDraw({\r\n          type: this.geometryType,\r\n          source: this.getSource(),\r\n          maxPoints: this.options.maxPoints,\r\n          freehand: true\r\n        });\r\n      }\r\n    }\r\n\r\n    this.onDrawStartKey = olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(olDrawInteraction);\r\n    this.olDrawInteraction = olDrawInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * When drawing starts, clear the overlay and start watching from changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.clearOlInnerOverlaySource();\r\n    this.onChangesKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.mousePosition = getMousePositionFromOlGeometryEvent(olGeometryEvent);\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, update the geometry observable and start watching from changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    this.unsubscribeToKeyDown();\r\n    if (this.onChangesKey !== undefined) {\r\n      unByKey(this.onChangesKey);\r\n    }\r\n    this.end$.next(event.feature.getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.unsubscribeToKeyDown();\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      // On ESC key down, remove the last vertex\r\n      if (event.keyCode === 27) {\r\n        this.olDrawInteraction.removeLastPoint();\r\n        return;\r\n      }\r\n\r\n      // On space bar, pan to the current mouse position\r\n      if (event.keyCode === 32) {\r\n        this.olMap.getView().animate({\r\n          center: this.mousePosition,\r\n          duration: 0\r\n        });\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n      this.keyDown$$ = undefined;\r\n    }\r\n  }\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlModify from 'ol/interaction/Modify';\r\nimport OlTranslate from 'ol/interaction/Translate';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlInteraction from 'ol/interaction/Interaction';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserEvent as OlMapBrowserEvent } from 'ol/MapBrowserEvent';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { ModifyEvent as OlModifyEvent } from 'ol/interaction/Modify';\r\nimport { TranslateEvent as OlTranslateEvent } from 'ol/interaction/Translate';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subject, Subscription, fromEvent } from 'rxjs';\r\n\r\nimport {\r\n  addLinearRingToOlPolygon,\r\n  createDrawHoleInteractionStyle,\r\n  getMousePositionFromOlGeometryEvent\r\n} from '../geometry.utils';\r\n\r\nexport interface ModifyControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class ModifyControl {\r\n\r\n  /**\r\n   * Modify start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Modify end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  public olModifyInteraction: OlModify;\r\n  private onModifyStartKey: string;\r\n  private onModifyEndKey: string;\r\n  private onModifyKey: string;\r\n  private olModifyInteractionIsActive: boolean = false;\r\n  private olTranslateInteraction: OlTranslate;\r\n  private onTranslateStartKey: string;\r\n  private onTranslateEndKey: string;\r\n  private onTranslateKey: string;\r\n  private olTranslateInteractionIsActive: boolean = false;\r\n  private olDrawInteraction: OlTranslate;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onDrawKey: string;\r\n  private olDrawInteractionIsActive: boolean = false;\r\n\r\n  private mousePosition: [number, number];\r\n\r\n  private keyDown$$: Subscription;\r\n  private drawKeyUp$$: Subscription;\r\n  private drawKeyDown$$: Subscription;\r\n\r\n  private removedOlInteractions: OlInteraction[] = [];\r\n  private olLinearRingsLayer: OlVectorLayer;\r\n\r\n  // This is the geometry to test against when drawing holes\r\n  private olOuterGeometry: OlGeometry;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  /**\r\n   * OL linear rings source\r\n   * @internal\r\n   */\r\n  get olLinearRingsSource(): OlVectorSource {\r\n    return this.olLinearRingsLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: ModifyControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n    this.olLinearRingsLayer = this.createOlLinearRingsLayer();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlModifyInteraction();\r\n      this.removeOlTranslateInteraction();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n    this.addOlTranslateInteraction();\r\n    this.activateTranslateInteraction();\r\n    this.addOlModifyInteraction();\r\n    this.activateModifyInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay and start modifying it\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  private createOlLinearRingsLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      style: createDrawHoleInteractionStyle(),\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the linear rings layer\r\n   */\r\n  private addOlLinearRingsLayer() {\r\n    this.olMap.addLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings layer\r\n   */\r\n  private removeOlLinearRingsLayer() {\r\n    this.olMap.removeLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings source\r\n   */\r\n  private clearOlLinearRingsSource() {\r\n    this.olLinearRingsSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Add a modify interaction to the map an set up some listeners\r\n   */\r\n  private addOlModifyInteraction() {\r\n    const olModifyInteraction = new OlModify({\r\n      source: this.olOverlaySource,\r\n      style: this.options.drawStyle\r\n    });\r\n    this.olModifyInteraction = olModifyInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the modify interaction\r\n   */\r\n  private removeOlModifyInteraction() {\r\n    if (this.olModifyInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateModifyInteraction();\r\n    this.olModifyInteraction = undefined;\r\n  }\r\n\r\n  private activateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = true;\r\n    this.onModifyStartKey = this.olModifyInteraction\r\n      .on('modifystart', (event: OlModifyEvent) => this.onModifyStart(event));\r\n    this.onModifyEndKey = this.olModifyInteraction\r\n      .on('modifyend', (event: OlModifyEvent) => this.onModifyEnd(event));\r\n    this.olMap.addInteraction(this.olModifyInteraction);\r\n  }\r\n\r\n  private deactivateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = false;\r\n    unByKey(this.onModifyStartKey);\r\n    unByKey(this.onModifyEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olModifyInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When modifying starts, clear the overlay and start watching for changes\r\n   * @param event Modify start event\r\n   */\r\n  private onModifyStart(event: OlModifyEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onModifyKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.mousePosition = getMousePositionFromOlGeometryEvent(olGeometryEvent);\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When modifying ends, update the geometry observable and stop watching for changes\r\n   * @param event Modify end event\r\n   */\r\n  private onModifyEnd(event: OlModifyEvent) {\r\n    if (this.onModifyKey !== undefined) {\r\n      unByKey(this.onModifyKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n    this.unsubscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode === 32) {\r\n        // On space bar, pan to the current mouse position\r\n        this.olMap.getView().animate({\r\n          center: this.mousePosition,\r\n          duration: 0\r\n        });\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a translate interaction to the map an set up some listeners\r\n   */\r\n  private addOlTranslateInteraction() {\r\n    const olTranslateInteraction = new OlTranslate({\r\n      layers: [this.olOverlayLayer]\r\n    });\r\n    this.olTranslateInteraction = olTranslateInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the translate interaction\r\n   */\r\n  private removeOlTranslateInteraction() {\r\n    if (this.olTranslateInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateTranslateInteraction();\r\n    this.olTranslateInteraction = undefined;\r\n  }\r\n\r\n  private activateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = true;\r\n    this.onTranslateStartKey = this.olTranslateInteraction\r\n      .on('translatestart', (event: OlTranslateEvent) => this.onTranslateStart(event));\r\n    this.onTranslateEndKey = this.olTranslateInteraction\r\n      .on('translateend', (event: OlTranslateEvent) => this.onTranslateEnd(event));\r\n    this.olMap.addInteraction(this.olTranslateInteraction);\r\n  }\r\n\r\n  private deactivateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = false;\r\n    unByKey(this.onTranslateStartKey);\r\n    unByKey(this.onTranslateEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olTranslateInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When translation starts, clear the overlay and start watching for changes\r\n   * @param event Translate start event\r\n   */\r\n  private onTranslateStart(event: OlTranslateEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onTranslateKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Translate end event\r\n   */\r\n  private onTranslateEnd(event: OlTranslateEvent) {\r\n    if (this.onTranslateKey !== undefined) {\r\n      unByKey(this.onTranslateKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  private addOlDrawInteraction() {\r\n    const olDrawInteraction = new OlDraw({\r\n      type: 'Polygon',\r\n      source: this.olLinearRingsSource,\r\n      stopClick: true,\r\n      style: createDrawHoleInteractionStyle(),\r\n      condition: (event: OlMapBrowserEvent) => {\r\n        const olOuterGeometry = this.olOuterGeometry || this.getOlGeometry();\r\n        return olOuterGeometry.intersectsCoordinate(event.coordinate);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteraction = olDrawInteraction;\r\n    this.subscribeToDrawKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToDrawKeyDown() {\r\n    this.drawKeyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode !== 17) { return; }\r\n\r\n      this.unsubscribeToDrawKeyDown();\r\n\r\n      const olGeometry = this.getOlGeometry();\r\n      if (!olGeometry || !(olGeometry instanceof OlPolygon)) { return; }\r\n\r\n      this.subscribeToDrawKeyUp();\r\n\r\n      this.deactivateModifyInteraction();\r\n      this.deactivateTranslateInteraction();\r\n      this.activateDrawInteraction();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key up to deactivate the draw control\r\n   */\r\n  private subscribeToDrawKeyUp() {\r\n    this.drawKeyUp$$ = fromEvent(document, 'keyup')\r\n      .subscribe((event: KeyboardEvent) => {\r\n        if (event.keyCode !== 17) {\r\n          return;\r\n        }\r\n\r\n        this.unsubscribeToDrawKeyUp();\r\n        this.unsubscribeToKeyDown();\r\n        this.deactivateDrawInteraction();\r\n\r\n        this.activateModifyInteraction();\r\n        this.activateTranslateInteraction();\r\n        this.subscribeToDrawKeyDown();\r\n\r\n        this.end$.next(this.getOlGeometry());\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to draw key down\r\n   */\r\n  private unsubscribeToDrawKeyDown() {\r\n    if (this.drawKeyDown$$ !== undefined) {\r\n      this.drawKeyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key up\r\n   */\r\n  private unsubscribeToDrawKeyUp() {\r\n    if (this.drawKeyUp$$ !== undefined) {\r\n      this.drawKeyUp$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    this.unsubscribeToDrawKeyUp();\r\n    this.unsubscribeToDrawKeyDown();\r\n    this.deactivateDrawInteraction();\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * Activate the draw interaction\r\n   */\r\n  private activateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.clearOlLinearRingsSource();\r\n    this.addOlLinearRingsLayer();\r\n\r\n    this.olMap.getInteractions().forEach((olInteraction: OlInteraction) => {\r\n      if (olInteraction instanceof OlDragBoxInteraction) {\r\n        this.olMap.removeInteraction(olInteraction);\r\n        this.removedOlInteractions.push(olInteraction);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = true;\r\n    this.onDrawStartKey = this.olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = this.olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(this.olDrawInteraction);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the draw interaction\r\n   */\r\n  private deactivateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.removeOlLinearRingsLayer();\r\n\r\n    this.removedOlInteractions.forEach((olInteraction: OlInteraction) => {\r\n      this.olMap.addInteraction(olInteraction);\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = false;\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When draw start, add a new linerar ring to the geometry and start watching for changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    this.olOuterGeometry = this.getOlGeometry().clone();\r\n\r\n    const linearRingCoordinates = olGeometry.getLinearRing().getCoordinates();\r\n    this.addLinearRingToOlGeometry(linearRingCoordinates);\r\n    this.start$.next(this.getOlGeometry());\r\n\r\n    this.onDrawKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      const _linearRingCoordinates = olGeometryEvent.target.getLinearRing().getCoordinates();\r\n      this.updateLinearRingOfOlGeometry(_linearRingCoordinates);\r\n      this.changes$.next(this.getOlGeometry());\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    if (this.onDrawKey !== undefined) {\r\n      unByKey(this.onDrawKey);\r\n    }\r\n\r\n    this.olOuterGeometry = undefined;\r\n\r\n    const linearRingCoordinates = event.feature.getGeometry().getLinearRing().getCoordinates();\r\n    this.updateLinearRingOfOlGeometry(linearRingCoordinates);\r\n    this.clearOlLinearRingsSource();\r\n    this.end$.next(this.getOlGeometry());\r\n    this.unsubscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Add a linear ring to the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private addLinearRingToOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    const olLinearRing = new OlLinearRing(coordinates);\r\n    addLinearRingToOlPolygon(olGeometry, olLinearRing);\r\n  }\r\n\r\n  /**\r\n   * Update the last linear ring of the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private updateLinearRingOfOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    // Remove the last linear ring (the one we are updating)\r\n    const olLinearRings = olGeometry.getLinearRings().slice(0, -1);\r\n    const newCoordinates = olLinearRings.map((olLinearRing: OlLinearRing) => {\r\n      return olLinearRing.getCoordinates();\r\n    });\r\n    newCoordinates.push(coordinates);\r\n    olGeometry.setCoordinates(newCoordinates);\r\n  }\r\n\r\n  /**\r\n   * Get the geometry being modified\r\n   * @returns OL Geometry\r\n   */\r\n  private getOlGeometry(): OlGeometry {\r\n    const olFeatures = this.olOverlaySource.getFeatures();\r\n    return olFeatures.length > 0 ? olFeatures[0].getGeometry() : undefined;\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlLineString from 'ol/geom/LineString';\r\n\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\nimport { GeometrySliceError } from '../geometry.errors';\r\nimport { sliceOlGeometry } from '../geometry.utils';\r\nimport { DrawControl } from './draw';\r\n\r\nexport interface SliceControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class SliceControl {\r\n\r\n  /**\r\n   * Slice end observable\r\n   */\r\n  public end$: Subject<OlGeometry[]> = new Subject();\r\n\r\n  /**\r\n   * Slice error, if any\r\n   */\r\n  public error$: Subject<GeometrySliceError> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawLineStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawLineEnd$$: Subscription;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: SliceControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeDrawLineControl();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addDrawLineControl();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay for slicing\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control and add it to the map\r\n   */\r\n  private addDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      drawStyle: this.options.drawStyle,\r\n      maxPoints: 2\r\n    });\r\n    this.drawLineStart$$ = this.drawLineControl.start$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineStart(olLine));\r\n    this.drawLineEnd$$ = this.drawLineControl.end$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineEnd(olLine));\r\n    this.drawLineControl.setOlMap(this.olMap);\r\n  }\r\n\r\n  /**\r\n   * Remove draw line control\r\n   */\r\n  private removeDrawLineControl() {\r\n    if (this.drawLineControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.drawLineStart$$.unsubscribe();\r\n    this.drawLineEnd$$.unsubscribe();\r\n    this.drawLineControl.getSource().clear();\r\n    this.drawLineControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olLine Ol linestring or polygon\r\n   */\r\n  private onDrawLineStart(olLine: OlLineString) {\r\n    this.drawLineControl.getSource().clear();\r\n  }\r\n\r\n  /**\r\n   * Slice the first geometry encountered with the drawn line\r\n   * @param olLine Ol linestring\r\n   */\r\n  private onDrawLineEnd(olLine: OlLineString) {\r\n    const olSlicedGeometries = [];\r\n    const lineExtent = olLine.getExtent();\r\n\r\n    const olFeaturesToRemove = [];\r\n    try {\r\n      this.olOverlaySource.forEachFeatureInExtent(lineExtent, (olFeature: OlFeature) => {\r\n        const olGeometry = olFeature.getGeometry();\r\n        const olParts = sliceOlGeometry(olGeometry, olLine);\r\n        if (olParts.length > 0) {\r\n          olSlicedGeometries.push(...olParts);\r\n          olFeaturesToRemove.push(olFeature);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (e instanceof GeometrySliceError) {\r\n        this.error$.next(e);\r\n        return;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    this.drawLineControl.getSource().clear();\r\n\r\n    this.olOverlaySource.addFeatures(\r\n      olSlicedGeometries.map((olGeometry: OlGeometry) => new OlFeature(olGeometry))\r\n    );\r\n    olFeaturesToRemove.forEach((olFeature: OlFeature) => {\r\n      this.olOverlaySource.removeFeature(olFeature);\r\n    });\r\n\r\n    this.error$.next(undefined);\r\n    this.end$.next(olSlicedGeometries);\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nimport { MeasurerDialogData } from '../shared/measure.interfaces';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit} from '../shared/measure.enum';\r\n\r\n@Component({\r\n  selector: 'igo-measurer-dialog',\r\n  templateUrl: 'measurer-dialog.component.html',\r\n  styleUrls: ['./measurer-dialog.component.scss']\r\n})\r\nexport class MeasurerDialogComponent {\r\n\r\n  measureAreaUnit = MeasureAreaUnit;\r\n\r\n  measureLengthUnit = MeasureLengthUnit;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MeasurerDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: MeasurerDialogData\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\n\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlStyle from 'ol/style/Style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport { VectorSourceEvent as OlVectorSourceEvent } from 'ol/source/Vector';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { EntityRecord, EntityTableTemplate, EntityTableComponent } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport {\r\n  FEATURE,\r\n  FeatureStore,\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy,\r\n  tryBindStoreLayer,\r\n  tryAddLoadingStrategy,\r\n  tryAddSelectionStrategy\r\n} from '../../feature';\r\nimport { DrawControl, ModifyControl } from '../../geometry';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { Measure, MeasurerDialogData, FeatureWithMeasure } from '../shared/measure.interfaces';\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit,\r\n} from '../shared/measure.enum';\r\nimport {\r\n  measureOlGeometry,\r\n  createMeasureInteractionStyle,\r\n  createMeasureLayerStyle,\r\n  updateOlTooltipsAtMidpoints,\r\n  updateOlTooltipAtCenter,\r\n  getTooltipsOfOlGeometry,\r\n  squareMetersToUnit,\r\n  metersToUnit,\r\n  formatMeasure\r\n} from '../shared/measure.utils';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * Tool to measure lengths and areas\r\n */\r\n@Component({\r\n  selector: 'igo-measurer',\r\n  templateUrl: './measurer.component.html',\r\n  styleUrls: ['./measurer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Table template\r\n   * @internal\r\n   */\r\n  public tableTemplate: EntityTableTemplate = {\r\n    selection: true,\r\n    selectMany: true,\r\n    selectionCheckbox: true,\r\n    sort: true,\r\n    columns: [\r\n      {\r\n        name: 'length',\r\n        title: this.languageService.translate.instant('igo.geo.measure.lengthHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeLengthUnit;\r\n          const measure = metersToUnit(feature.properties.measure.length, unit);\r\n          return formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          });\r\n        }\r\n      },\r\n      {\r\n        name: 'area',\r\n        title: this.languageService.translate.instant('igo.geo.measure.areaHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeAreaUnit;\r\n          const measure = squareMetersToUnit(feature.properties.measure.area, unit);\r\n          return measure ? formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          }) : '';\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  /**\r\n   * Reference to the MeasureType enum\r\n   * @internal\r\n   */\r\n  public measureType = MeasureType;\r\n\r\n  /**\r\n   * Reference to the AreaMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureAreaUnit = MeasureAreaUnit;\r\n\r\n  /**\r\n   * Reference to the LengthMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureLengthUnit = MeasureLengthUnit;\r\n\r\n  /**\r\n   * Whether measure units should be automatically determined\r\n   * @internal\r\n   */\r\n  public measureUnitsAuto: boolean = false;\r\n\r\n  /**\r\n   * Observable of area\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<Measure> = new BehaviorSubject({});\r\n\r\n  /**\r\n   * Observable of selected features\r\n   * @internal\r\n   */\r\n  public selectedFeatures$: BehaviorSubject<FeatureWithMeasure[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * OL draw source\r\n   * @internal\r\n   */\r\n  public showTooltips: boolean = true;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Draw polygon control\r\n   */\r\n  private drawPolygonControl: DrawControl;\r\n\r\n  /**\r\n   * Modify control\r\n   */\r\n  private modifyControl: ModifyControl;\r\n\r\n  /**\r\n   * Active OL geometry\r\n   */\r\n  private activeOlGeometry: OlLineString | OlPolygon;\r\n\r\n  /**\r\n   * Active mlength unit\r\n   */\r\n  private activeLengthUnit: MeasureLengthUnit = MeasureLengthUnit.Meters;\r\n\r\n  /**\r\n   * Active area unit\r\n   */\r\n  private activeAreaUnit: MeasureAreaUnit = MeasureAreaUnit.SquareMeters;\r\n\r\n  /**\r\n   * Feature added listener key\r\n   */\r\n  private onFeatureAddedKey: string;\r\n\r\n  /**\r\n   * Feature removed listener key\r\n   */\r\n  private onFeatureRemovedKey: string;\r\n\r\n  /**\r\n   * Active draw control\r\n   * @internal\r\n   */\r\n  private activeDrawControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private drawChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify start\r\n   */\r\n  private modifyStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify end\r\n   */\r\n  private modifyEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private modifyChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to measures selection\r\n   */\r\n  private selectedFeatures$$: Subscription;\r\n\r\n  /**\r\n   * OL draw source\r\n   */\r\n  private olDrawSource = new OlVectorSource();\r\n\r\n  /**\r\n   * The map to measure on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The measures store\r\n   */\r\n  @Input() store: FeatureStore<FeatureWithMeasure>;\r\n\r\n  /**\r\n   * Measure type\r\n   * @internal\r\n   */\r\n  @Input()\r\n  set activeMeasureType(value: MeasureType) { this.setActiveMeasureType(value); }\r\n  get activeMeasureType(): MeasureType { return this._activeMeasureType; }\r\n  private _activeMeasureType: MeasureType = MeasureType.Length;\r\n\r\n  /**\r\n   * The minimum length a segment must have to display a tooltip.\r\n   * It also applies to area tooltips.\r\n   */\r\n  @Input() minSegmentLength: number = 10;\r\n\r\n  @ViewChild('table') table: EntityTableComponent;\r\n\r\n  /**\r\n   * Wheter one of the draw control is active\r\n   * @internal\r\n   */\r\n  get drawControlIsActive(): boolean {\r\n    return this.activeDrawControl !== undefined;\r\n  }\r\n\r\n  get projection(): OlProjection {\r\n    return this.map.ol.getView().getProjection();\r\n  }\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  /**\r\n   * Add draw controls and activate one\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.initStore();\r\n    this.createDrawLineControl();\r\n    this.createDrawPolygonControl();\r\n    this.createModifyControl();\r\n    this.toggleDrawControl();\r\n    this.onToggleTooltips(this.showTooltips);\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.setActiveMeasureType(undefined);\r\n    this.deactivateModifyControl();\r\n    this.freezeStore();\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onMeasureTypeChange(measureType: MeasureType) {\r\n    this.activeMeasureType = measureType;\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleDrawControl(toggle: boolean) {\r\n    if (toggle === true) {\r\n      this.toggleDrawControl();\r\n    } else {\r\n      this.deactivateDrawControl();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleTooltips(toggle: boolean) {\r\n    this.showTooltips = toggle;\r\n    if (toggle === true) {\r\n      this.showTooltipsOfOlSource(this.store.source.ol);\r\n    } else {\r\n      this.clearTooltipsOfOlSource(this.store.source.ol);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleMeasureUnitsAuto(toggle: boolean) {\r\n    this.measureUnitsAuto = toggle;\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onLengthUnitChange(unit: MeasureLengthUnit) {\r\n    this.activeLengthUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onAreaUnitChange(unit: MeasureAreaUnit) {\r\n    this.activeAreaUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  onCalculateClick() {\r\n    const features = this.selectedFeatures$.value;\r\n    const area = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      return sum + feature.properties.measure.area || 0;\r\n    }, 0);\r\n    const length = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'Polygon') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n    const perimeter = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'LineString') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n\r\n    this.openDialog({\r\n      area,\r\n      length,\r\n      perimeter\r\n    });\r\n  }\r\n\r\n  onDeleteClick() {\r\n    this.store.deleteMany(this.selectedFeatures$.value);\r\n  }\r\n\r\n  onModifyClick() {\r\n    if (this.selectedFeatures$.value.length !== 1) { return; }\r\n\r\n    if (this.modifyControl.active === true) {\r\n      this.deactivateModifyControl();\r\n      this.toggleDrawControl();\r\n    } else {\r\n      const feature = this.selectedFeatures$.value[0];\r\n      const olFeatures = this.store.layer.ol.getSource().getFeatures();\r\n      const olFeature = olFeatures.find((_olFeature: OlFeature) => {\r\n        return _olFeature.get('id') === feature.properties.id;\r\n      });\r\n\r\n      if (olFeature !== undefined) {\r\n        this.deactivateDrawControl();\r\n        this.activateModifyControl();\r\n\r\n        const olGeometry = olFeature.getGeometry();\r\n        this.clearTooltipsOfOlGeometry(olGeometry);\r\n        this.modifyControl.setOlGeometry(olGeometry);\r\n      }\r\n    }\r\n  }\r\n\r\n  private openDialog(data: MeasurerDialogData): void {\r\n    this.dialog.open(MeasurerDialogComponent, {data});\r\n  }\r\n\r\n  /**\r\n   * Initialize the measure store and set up some listeners\r\n   * @internal\r\n   */\r\n  private initStore() {\r\n    const store = this.store;\r\n\r\n    const layer = new VectorLayer({\r\n      title: 'Measures',\r\n      zIndex: 200,\r\n      source: new FeatureDataSource(),\r\n      style: createMeasureLayerStyle(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n    tryBindStoreLayer(store, layer);\r\n\r\n    tryAddLoadingStrategy(store);\r\n\r\n    tryAddSelectionStrategy(store, new FeatureStoreSelectionStrategy({\r\n      map: this.map,\r\n      many: true\r\n    }));\r\n\r\n    this.onFeatureAddedKey = store.source.ol.on('addfeature', (event: OlVectorSourceEvent) => {\r\n      const feature = event.feature;\r\n      const olGeometry = feature.getGeometry();\r\n      this.updateMeasureOfOlGeometry(olGeometry, feature.get('measure'));\r\n    });\r\n\r\n    this.onFeatureRemovedKey = store.source.ol.on('removefeature', (event: OlVectorSourceEvent) => {\r\n      const olGeometry = event.feature.getGeometry();\r\n      this.clearTooltipsOfOlGeometry(olGeometry);\r\n    });\r\n\r\n    this.selectedFeatures$$ = store.stateView.manyBy$((record: EntityRecord<FeatureWithMeasure>) => {\r\n      return record.state.selected === true;\r\n    }).pipe(\r\n      skip(1)  // Skip initial emission\r\n    )\r\n    .subscribe((records: EntityRecord<FeatureWithMeasure>[]) => {\r\n      if (this.modifyControl.active === true) {\r\n        this.deactivateModifyControl();\r\n      }\r\n      this.selectedFeatures$.next(records.map(record => record.entity));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Freeze any store, meaning the layer is removed, strategies are deactivated\r\n   * and some listener removed\r\n   * @internal\r\n   */\r\n  private freezeStore() {\r\n    const store = this.store;\r\n    this.selectedFeatures$$.unsubscribe();\r\n    unByKey(this.onFeatureAddedKey);\r\n    unByKey(this.onFeatureRemovedKey);\r\n    this.clearTooltipsOfOlSource(store.source.ol);\r\n    this.map.removeLayer(store.layer);\r\n    store.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    store.deactivateStrategyOfType(FeatureStoreSelectionStrategy);\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control\r\n   */\r\n  private createDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createDrawPolygonControl() {\r\n    this.drawPolygonControl = new DrawControl({\r\n      geometryType: 'Polygon',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate the right control\r\n   */\r\n  private toggleDrawControl() {\r\n    this.deactivateDrawControl();\r\n    // this.deactivateModifyControl();\r\n    if (this.activeMeasureType === MeasureType.Length) {\r\n      this.activateDrawControl(this.drawLineControl);\r\n    } else if (this.activeMeasureType === MeasureType.Area) {\r\n      this.activateDrawControl(this.drawPolygonControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param drawControl Draw control\r\n   */\r\n  private activateDrawControl(drawControl: DrawControl) {\r\n    this.activeDrawControl = drawControl;\r\n    this.drawStart$$ = drawControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawStart(olGeometry));\r\n    this.drawEnd$$ = drawControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawEnd(olGeometry));\r\n    this.drawChanges$$ = drawControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawChanges(olGeometry));\r\n\r\n    drawControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active draw control\r\n   */\r\n  private deactivateDrawControl() {\r\n    if (this.activeDrawControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n    if (this.drawStart$$ !== undefined ) { this.drawStart$$.unsubscribe(); }\r\n    if (this.drawEnd$$ !== undefined ) { this.drawEnd$$.unsubscribe(); }\r\n    if (this.drawChanges$$ !== undefined ) { this.drawChanges$$.unsubscribe(); }\r\n\r\n    this.clearTooltipsOfOlSource(this.olDrawSource);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.clearTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n    this.activeDrawControl.setOlMap(undefined);\r\n    this.activeDrawControl = undefined;\r\n    this.activeOlGeometry = undefined;\r\n  }\r\n\r\n  private setActiveMeasureType(measureType: MeasureType) {\r\n    this._activeMeasureType = measureType;\r\n    this.clearMeasures();\r\n    this.toggleDrawControl();\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = olGeometry;\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = undefined;\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n    this.addFeatureToStore(olGeometry);\r\n    this.clearTooltipsOfOlGeometry(olGeometry);\r\n    this.olDrawSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawChanges(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = measureOlGeometry(olGeometry, this.projection);\r\n    this.updateMeasureOfOlGeometry(olGeometry, Object.assign({}, measure, {\r\n      area: undefined  // We don't want to display an area tooltip while drawing.\r\n    }));\r\n    this.measure$.next(measure);\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param modifyControl Modify control\r\n   */\r\n  private activateModifyControl() {\r\n    const selection = this.store.getStrategyOfType(FeatureStoreSelectionStrategy) as FeatureStoreSelectionStrategy;\r\n    selection.deactivate();\r\n    selection.clear();\r\n\r\n    this.modifyStart$$ = this.modifyControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyStart(olGeometry));\r\n    this.modifyEnd$$ = this.modifyControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyEnd(olGeometry));\r\n    this.modifyChanges$$ = this.modifyControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyChanges(olGeometry));\r\n    this.modifyControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active modify control\r\n   */\r\n  private deactivateModifyControl() {\r\n    if (this.modifyStart$$ !== undefined ) { this.modifyStart$$.unsubscribe(); }\r\n    if (this.modifyEnd$$ !== undefined ) { this.modifyEnd$$.unsubscribe(); }\r\n    if (this.modifyChanges$$ !== undefined ) { this.modifyChanges$$.unsubscribe(); }\r\n\r\n    if (this.activeOlGeometry !== undefined) {\r\n      if (this.selectedFeatures$.value.length === 1) {\r\n        const feature = this.selectedFeatures$.value[0];\r\n        this.addFeatureToStore(this.activeOlGeometry, feature);\r\n      }\r\n      this.finalizeMeasureOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n\r\n    this.store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n\r\n    this.activeOlGeometry = undefined;\r\n    this.modifyControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawStart(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyChanges(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawChanges(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  private finalizeMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    let measure = measureOlGeometry(olGeometry, this.projection);\r\n    if (olGeometry instanceof OlPolygon) {\r\n      measure = Object.assign({}, measure, {\r\n        lengths: []  // We don't want to display an area tooltip while drawing.\r\n      });\r\n    }\r\n    this.updateMeasureOfOlGeometry(olGeometry, measure);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables\r\n   * @param olGeometry Ol linestring or polygon\r\n   * @param measure Measure\r\n   */\r\n  private updateMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon, measure: Measure) {\r\n    olGeometry.setProperties({_measure: measure}, true);\r\n    this.updateTooltipsOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the measures observables\r\n   */\r\n  private clearMeasures() {\r\n    this.measure$.next({});\r\n  }\r\n\r\n  /**\r\n   * Add a feature with measures to the store. The loading stragegy of the store\r\n   * will trigger and add the feature to the map.\r\n   * @internal\r\n   */\r\n  private addFeatureToStore(olGeometry: OlLineString | OlPolygon, feature?: FeatureWithMeasure) {\r\n    const featureId = feature ? feature.properties.id : uuid();\r\n    const projection = this.map.ol.getView().getProjection();\r\n    const geometry = new OlGeoJSON().writeGeometryObject(olGeometry, {\r\n      featureProjection: projection,\r\n      dataProjection: projection\r\n    });\r\n    this.store.update({\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: projection.getCode(),\r\n      properties: {\r\n        id: featureId,\r\n        measure: olGeometry.get('_measure')\r\n      },\r\n      meta: {\r\n        id: featureId\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update all the tooltips of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   * @param lengths Lengths of the OL geometry's segments\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = olGeometry.get('_measure');\r\n    const lengths = measure.lengths;\r\n    const area = measure.area;\r\n\r\n    const olMidpointsTooltips = updateOlTooltipsAtMidpoints(olGeometry);\r\n    if (lengths.length === olMidpointsTooltips.length) {\r\n      for (let i = 0; i < olMidpointsTooltips.length; i++) {\r\n        const length = lengths[i];\r\n        if (length !== undefined) {\r\n          this.updateOlTooltip(\r\n            olMidpointsTooltips[i],\r\n            metersToUnit(length, this.activeLengthUnit),\r\n            this.activeLengthUnit,\r\n            MeasureType.Length\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (area !== undefined) {\r\n      this.updateOlTooltip(\r\n        updateOlTooltipAtCenter(olGeometry),\r\n        squareMetersToUnit(area,  this.activeAreaUnit),\r\n        this.activeAreaUnit,\r\n        MeasureType.Area\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of a geoemtry\r\n   */\r\n  private showTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (this.shouldShowTooltip(olTooltip)) {\r\n        this.map.ol.addOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the tooltips of an OL geometrys\r\n   * @param olGeometry OL geometry with tooltips\r\n   */\r\n  private clearTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (olTooltip !== undefined && olTooltip.getMap() !== undefined) {\r\n        this.map.ol.removeOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private updateTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.updateTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private showTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.showTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the map tooltips\r\n   * @param olDrawSource OL vector source\r\n   */\r\n  private clearTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry !== undefined) {\r\n        this.clearTooltipsOfOlGeometry(olFeature.getGeometry());\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update an OL tooltip properties and inner HTML and add it to the map if possible\r\n   * @param olTooltip OL tooltip\r\n   * @param measure The measure valeu ti display\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateOlTooltip(\r\n    olTooltip: OlOverlay,\r\n    measure: number,\r\n    unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    type: MeasureType\r\n  ) {\r\n    olTooltip.setProperties({_measure: measure, _unit: unit, _type: type}, true);\r\n    olTooltip.getElement().innerHTML = this.computeTooltipInnerHTML(olTooltip);\r\n    if (this.shouldShowTooltip(olTooltip)) {\r\n      this.map.ol.addOverlay(olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute a tooltip's content\r\n   * @param olTooltip OL overlay\r\n   * @returns Inner HTML\r\n   */\r\n  private computeTooltipInnerHTML(olTooltip: OlOverlay): string {\r\n    const properties = olTooltip.getProperties() as any;\r\n    return formatMeasure(properties._measure, {\r\n      decimal: 1,\r\n      unit: properties._unit,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    }, this.languageService);\r\n  }\r\n\r\n  /**\r\n   * Whether a tooltip should be showned based on the length\r\n   * of the segment it is bound to.\r\n   * @param olTooltip OL overlay\r\n   * @returns True if the tooltip should be shown\r\n   */\r\n  private shouldShowTooltip(olTooltip: OlOverlay): boolean {\r\n    if (this.showTooltips === false) {\r\n      return false;\r\n    }\r\n\r\n    const properties = olTooltip.getProperties() as any;\r\n    const measure = properties._measure;\r\n    if (measure === undefined) {\r\n      return false;\r\n    }\r\n\r\n    if (properties._unit === MeasureType.Length) {\r\n      const minSegmentLength = metersToUnit(this.minSegmentLength, properties._unit) || 0;\r\n      return measure > Math.max(minSegmentLength, 0);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit } from '../shared/measure.enum';\r\nimport { metersToUnit, squareMetersToUnit, formatMeasure } from '../shared/measure.utils';\r\n\r\n/**\r\n * This pipe returns a measure converted from meters (or square meters)\r\n * to the specified unit. It also keeps a certain number of decimals.\r\n */\r\n@Pipe({\r\n  name: 'measureFormat'\r\n})\r\nexport class MeasureFormatPipe implements PipeTransform {\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  transform(\r\n    value: number, unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    unitAbbr: boolean = false,\r\n    decimal: number = 1\r\n  ): number {\r\n    let out;\r\n    if (Object.values(MeasureAreaUnit).indexOf(unit) >= 0) {\r\n      out = squareMetersToUnit(value, unit as MeasureAreaUnit);\r\n    } else if (Object.values(MeasureLengthUnit).indexOf(unit) >= 0) {\r\n      out = metersToUnit(value, unit as MeasureLengthUnit);\r\n    }\r\n\r\n    return out ? formatMeasure(out, {\r\n      decimal: 1,\r\n      unit,\r\n      unitAbbr,\r\n      locale: 'fr'\r\n    }) : out;\r\n  }\r\n}\r\n","import { OlModify } from 'ol/interaction/Modify';\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  Self,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output\r\n} from '@angular/core';\r\nimport { NgControl, ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport * as OlStyle from 'ol/style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport * as poly from 'ol/geom/Polygon';\r\nimport * as olproj from 'ol/proj';\r\nimport Point from 'ol/geom/Point';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport {\r\n  MeasureLengthUnit,\r\n  updateOlGeometryMidpoints,\r\n  formatMeasure,\r\n  measureOlGeometry\r\n} from '../../measure';\r\nimport { DrawControl, ModifyControl } from '../shared/controls';\r\nimport { createDrawInteractionStyle } from '../shared/geometry.utils';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map. A text input is also displayed in the\r\n * form with some instructions.\r\n * This is still WIP.\r\n */\r\n@Component({\r\n  selector: 'igo-geometry-form-field-input',\r\n  templateUrl: './geometry-form-field-input.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldInputComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olGeoJSON = new OlGeoJSON();\r\n  private ready = false;\r\n\r\n  private drawControl: DrawControl;\r\n  private modifyControl: ModifyControl;\r\n  private defaultDrawStyleRadius: number;\r\n  private olGeometryEnds$$: Subscription;\r\n  private olGeometryChanges$$: Subscription;\r\n  private olTooltip = OlOverlay;\r\n\r\n  /**\r\n   * Active control\r\n   * @internal\r\n   */\r\n  public activeControl: DrawControl | ModifyControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The geometry type\r\n   */\r\n  @Input()\r\n  set geometryType(value: OlGeometryType) {\r\n    this._geometryType = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateControl();\r\n    this.createDrawControl();\r\n    this.drawControl.freehand$.next(this.freehandDrawIsActive);\r\n    this.toggleControl();\r\n  }\r\n  get geometryType(): OlGeometryType { return this._geometryType; }\r\n  private _geometryType: OlGeometryType;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input() drawGuide: number = null;\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * Whether draw control should be active or not\r\n   */\r\n  @Input()\r\n  get drawControlIsActive(): boolean { return this._drawControlIsActive; }\r\n  set drawControlIsActive(value: boolean) {\r\n    this._drawControlIsActive = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n    this.deactivateControl();\r\n    if (!this._drawControlIsActive) {\r\n      return;\r\n    } else {\r\n      this.toggleControl();\r\n    }\r\n  }\r\n  private _drawControlIsActive: boolean = true;\r\n\r\n  /**\r\n   * Whether freehand draw control should be active or not\r\n   */\r\n  @Input()\r\n  get freehandDrawIsActive(): boolean { return this._freehandDrawIsActive; }\r\n  set freehandDrawIsActive(value: boolean) {\r\n    this._freehandDrawIsActive = value;\r\n    this.deactivateControl();\r\n\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n\r\n    this.drawControl.freehand$.next(this.freehandDrawIsActive);\r\n\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n\r\n    if (!this.drawControlIsActive) {\r\n      return;\r\n    }\r\n    this.toggleControl();\r\n  }\r\n  private _freehandDrawIsActive: boolean;\r\n\r\n  /**\r\n   * Style for the draw control (applies while the geometry is being drawn)\r\n   */\r\n  @Input()\r\n  set drawStyle(value: OlStyle) {\r\n    if (value === undefined) {\r\n      value = createDrawInteractionStyle();\r\n    }\r\n    this._drawStyle = value;\r\n    if (value && this.isStyleWithRadius(value)) {\r\n      this.defaultDrawStyleRadius = value.getImage().getRadius();\r\n    } else {\r\n      this.defaultDrawStyleRadius = null;\r\n    }\r\n    this.deactivateControl();\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n\r\n    this.drawControl.freehand$.next(this.freehandDrawIsActive);\r\n    this.toggleControl();\r\n  }\r\n  get drawStyle(): OlStyle { return this._drawStyle; }\r\n  private _drawStyle: OlStyle;\r\n\r\n  /**\r\n   * Style for the overlay layer (applies once the geometry is added to the map)\r\n   * If not specified, drawStyle applies\r\n   */\r\n  @Input()\r\n  set overlayStyle(value: OlStyle) { this._overlayStyle = value; }\r\n  get overlayStyle(): OlStyle { return this._overlayStyle; }\r\n  private _overlayStyle: OlStyle;\r\n\r\n  /**\r\n   * The geometry value (GeoJSON)\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  @Input()\r\n  set value(value: GeoJSONGeometry) {\r\n    this._value = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n\r\n    if (value) {\r\n      this.addGeoJSONToOverlay(value);\r\n    } else {\r\n      this.olOverlaySource.clear();\r\n    }\r\n    this.onChange(value);\r\n    this.toggleControl();\r\n    this.cdRef.detectChanges();\r\n  }\r\n  get value(): GeoJSONGeometry { return this._value; }\r\n  private _value: GeoJSONGeometry;\r\n\r\n  /**\r\n   * The vector source to add the geometry to\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  @Input()\r\n  set radius(value: any) {\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n    if (this.modifyControl.getSource()) {\r\n      this.modifyControl.getSource().refresh();\r\n    }\r\n    if (this.freehandDrawIsActive) {\r\n      let olModify;\r\n      setTimeout(() => {\r\n        olModify = this.modifyControl.olModifyInteraction;\r\n        if (olModify) {\r\n          if (olModify.features_) {\r\n            olModify.features_.clear();\r\n          }\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    @Optional() @Self() public ngControl: NgControl\r\n  ) {\r\n    if (this.ngControl !== undefined) {\r\n      // Setting the value accessor directly (instead of using\r\n      // the providers) to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an overlay layer, add the initial geometry to it (if any)\r\n   * and toggle the right interaction.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    if (this.drawStyle === undefined) {\r\n      this.drawStyle = createDrawInteractionStyle();\r\n    }\r\n\r\n    if (this.overlayStyle === undefined) {\r\n      this.overlayStyle = this.drawStyle;\r\n    }\r\n\r\n    this.addOlOverlayLayer();\r\n    this.createMeasureTooltip();\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n\r\n    if (this.value) {\r\n      this.addGeoJSONToOverlay(this.value);\r\n    }\r\n    this.toggleControl();\r\n\r\n    this.ready = true;\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    // This is mandatory when the form control is reused after\r\n    // this component has been destroyed. It seems like the control\r\n    // keeps a reference to this component even after it's destroyed\r\n    // and it attempts to set it's value\r\n    this.ready = false;\r\n\r\n    this.deactivateControl();\r\n    this.olOverlaySource.clear();\r\n    this.map.ol.removeLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnChange(fn: Function) {\r\n    this.onChange = fn;\r\n  }\r\n  private onChange: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n  private onTouched: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  writeValue(value: GeoJSONGeometry) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Add an overlay layer to the map\r\n   */\r\n  private addOlOverlayLayer(): OlVectorLayer {\r\n    this.olOverlayLayer = new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      zIndex: 500,\r\n      style: null\r\n    });\r\n    this.map.ol.addLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create a draw control and subscribe to it's geometry\r\n   */\r\n  private createDrawControl() {\r\n    this.drawControl = new DrawControl({\r\n      geometryType: this.geometryType || 'Point',\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: typeof this.drawStyle === 'function' ? this.drawStyle : (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a modify control and subscribe to it's geometry\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: typeof this.drawStyle === 'function' ? this.drawStyle : (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle the proper control (draw or modify)\r\n   */\r\n  private toggleControl() {\r\n    this.deactivateControl();\r\n\r\n    if (!this.drawControlIsActive) {\r\n      return;\r\n    }\r\n    if (!this.value && this.geometryType) {\r\n      this.activateControl(this.drawControl);\r\n    } else {\r\n      this.activateControl(this.modifyControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param control Control\r\n   */\r\n  private activateControl(control: DrawControl | ModifyControl) {\r\n    this.activeControl = control;\r\n    this.olGeometryEnds$$ = control.end$\r\n      .subscribe((olGeometry: OlGeometry) => this.onOlGeometryEnds(olGeometry));\r\n    if (this.measure === true && control === this.drawControl) {\r\n      this.olGeometryChanges$$ = control.changes$\r\n        .subscribe((olGeometry: OlGeometry) => this.onOlGeometryChanges(olGeometry));\r\n    }\r\n    control.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active control\r\n   */\r\n  private deactivateControl() {\r\n    this.removeMeasureTooltip();\r\n    if (this.activeControl !== undefined) {\r\n      this.activeControl.setOlMap(undefined);\r\n    }\r\n    if (this.olGeometryEnds$$ !== undefined) {\r\n      this.olGeometryEnds$$.unsubscribe();\r\n    }\r\n    if (this.olGeometryChanges$$ !== undefined) {\r\n      this.olGeometryChanges$$.unsubscribe();\r\n    }\r\n    this.activeControl = undefined;\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryEnds(olGeometry: OlGeometry | undefined) {\r\n    this.removeMeasureTooltip();\r\n    this.setOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryChanges(olGeometry: OlGeometry) {\r\n    if (olGeometry.getType() !== 'Point') {\r\n      this.updateMeasureTooltip(olGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, convert the output value to GeoJSON and keep it.\r\n   * Restore the double click interaction.\r\n   * @param olGeometry OL geometry\r\n   */\r\n  private setOlGeometry(olGeometry: OlGeometry | undefined) {\r\n    let value;\r\n    if (olGeometry === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (olGeometry.getType() === 'Circle') { // Because Circle doesn't exist as a GeoJSON object\r\n      olGeometry = this.circleToPoint(olGeometry);\r\n    }\r\n\r\n    value = this.olGeoJSON.writeGeometryObject(olGeometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: 'EPSG:4326'\r\n    });\r\n    if (olGeometry.get('radius')) {\r\n      value.radius = olGeometry.get('radius');\r\n      olGeometry._radius = value.radius;\r\n    }\r\n    this.writeValue(value);\r\n  }\r\n\r\n  private circleToPoint(olGeometry) {\r\n    const center = olGeometry.getCenter();\r\n    const coordinates = olproj.transform(center, this.map.projection, 'EPSG:4326');\r\n    const radius = Math.round(olGeometry.getRadius() * (Math.cos((Math.PI / 180) * coordinates[1])));\r\n\r\n    // Convert it to a point object\r\n    olGeometry = new Point(center);\r\n    olGeometry.set('radius', radius, true);\r\n    return olGeometry;\r\n  }\r\n\r\n  /**\r\n   * Add a GeoJSON geometry to the overlay\r\n   * @param geometry GeoJSON geometry\r\n   */\r\n  private addGeoJSONToOverlay(geometry: GeoJSONGeometry) {\r\n    const olGeometry = this.olGeoJSON.readGeometry(geometry, {\r\n      dataProjection: 'EPSG:4326',\r\n      featureProjection: this.map.projection\r\n    });\r\n    const olFeature = new OlFeature({\r\n      geometry: olGeometry\r\n    });\r\n    olFeature.setStyle(this.overlayStyle);\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create the measure tooltip\r\n   */\r\n  private createMeasureTooltip(): OlOverlay {\r\n    this.olTooltip = new OlOverlay({\r\n      element: document.createElement('div'),\r\n      offset: [-30, -10],\r\n      className: [\r\n        'igo-map-tooltip',\r\n        'igo-map-tooltip-measure'\r\n      ].join(' '),\r\n      stopEvent: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the measure tooltip of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   */\r\n  private updateMeasureTooltip(olGeometry: OlGeometry) {\r\n    const measure = measureOlGeometry(olGeometry, this.map.projection);\r\n    const lengths = measure.lengths;\r\n    const lastIndex = olGeometry.getType() === 'Polygon' ? lengths.length - 2 : lengths.length - 1;\r\n    const lastLength = lengths[lastIndex];\r\n\r\n    const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n    const olLastMidpoint = olMidpoints[lastIndex];\r\n    if (olMidpoints.length === 0 || olLastMidpoint === undefined) {\r\n      this.removeMeasureTooltip();\r\n      return;\r\n    }\r\n\r\n    this.olTooltip.setPosition(olLastMidpoint.flatCoordinates);\r\n\r\n    const innerHtml = formatMeasure(lastLength, {\r\n      decimal: 1,\r\n      unit: MeasureLengthUnit.Meters,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    });\r\n    this.olTooltip.getElement().innerHTML = innerHtml;\r\n    if (this.olTooltip.getMap() === undefined) {\r\n      this.map.ol.addOverlay(this.olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the measure tooltip from the map\r\n   */\r\n  private removeMeasureTooltip() {\r\n    if (this.olTooltip.getMap && this.olTooltip.getMap() !== undefined) {\r\n      this.map.ol.removeOverlay(this.olTooltip);\r\n      this.olTooltip.setMap(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjust the draw style with the specified draw guide distance, if possible\r\n   * @param olStyle Draw style to update\r\n   * @param resolution Resolution (to make the screen size of symbol fit the drawGuide value)\r\n   */\r\n  private updateDrawStyleWithDrawGuide(olStyle: OlStyle, resolution: number) {\r\n    if (this.isStyleWithRadius(olStyle)) {\r\n      const drawGuide = this.drawGuide;\r\n      let radius;\r\n      if (!drawGuide || drawGuide < 0) {\r\n        radius = this.defaultDrawStyleRadius;\r\n      } else {\r\n        radius = drawGuide > 0 ? drawGuide / resolution : drawGuide;\r\n      }\r\n      olStyle.getImage().setRadius(radius);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns wether a given Open Layers style has a radius property that can be set (used to set draw guide)\r\n   * @param olStyle The style on which to perform the check\r\n   */\r\n  private isStyleWithRadius(olStyle: OlStyle): boolean {\r\n    return typeof olStyle !== 'function' && olStyle.getImage && olStyle.getImage().setRadius;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { GeometryFormFieldComponent } from './geometry-form-field.component';\r\nimport { GeometryFormFieldInputComponent } from './geometry-form-field-input.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ],\r\n  declarations: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ]\r\n})\r\nexport class IgoGeometryFormFieldModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoGeometryFormFieldModule } from './geometry-form-field/geometry-form-field.module';\r\nimport { GeometryFormFieldComponent } from './geometry-form-field/geometry-form-field.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  exports: [\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  declarations: [],\r\n  providers: [],\r\n  entryComponents: [\r\n    GeometryFormFieldComponent\r\n  ]\r\n})\r\nexport class IgoGeometryModule {}\r\n","import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\nimport { TimeFilterableDataSourceOptions } from '../shared/time-filter.interface';\r\nimport { WMSDataSourceOptions } from '../../datasource/shared/datasources/wms-datasource.interface';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-button',\r\n  templateUrl: './time-filter-button.component.html',\r\n  styleUrls: ['./time-filter-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TimeFilterButtonComponent implements OnInit {\r\n\r\n  public options: TimeFilterableDataSourceOptions;\r\n\r\n  get badge() {\r\n    const filter = this.options.timeFilter as any;\r\n    if (filter && filter.enabled) {\r\n      return 1;\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n    if (value) {\r\n      this.options = this.layer.dataSource.options as WMSDataSourceOptions;\r\n    }\r\n  }\r\n  private _layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string = 'primary';\r\n\r\n  @Input() header: boolean = true;\r\n\r\n  public timeFilterCollapse = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.options = this.layer.dataSource.options as WMSDataSourceOptions;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatSlider, DateAdapter } from '@angular/material';\r\nimport * as moment from 'moment';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { TimeFilterOptions } from '../shared/time-filter.interface';\r\nimport { TimeFilterType, TimeFilterStyle } from '../shared/time-filter.enum';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-form',\r\n  templateUrl: './time-filter-form.component.html',\r\n  styleUrls: ['./time-filter-form.component.scss']\r\n})\r\nexport class TimeFilterFormComponent implements OnInit {\r\n  @Input() layer: Layer;\r\n\r\n  @Input() options: TimeFilterOptions;\r\n\r\n  public color = 'primary';\r\n  public date: Date;\r\n  public startDate: Date;\r\n  public endDate: Date;\r\n  public year: any;\r\n  public startYear: any;\r\n  public endYear: any;\r\n  public initStartYear: any;\r\n  public initEndYear: any;\r\n  public listYears: Array<string> = [];\r\n  public startListYears: Array<string> = [];\r\n  public endListYears: Array<string> = [];\r\n\r\n  @Input()\r\n  set currentValue(value: string) {\r\n    if (value) {\r\n      if (this.type !== TimeFilterType.YEAR) {\r\n        const valueArray = value.split('/');\r\n        if (valueArray.length > 0) {\r\n          const startDate = new Date(valueArray[0]);\r\n          const endDate = new Date(valueArray[1]);\r\n          if (!isNaN(startDate.valueOf())) {\r\n            this.startDate = startDate;\r\n          }\r\n          if (!isNaN(endDate.valueOf())) {\r\n            this.endDate = endDate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public interval: any;\r\n  public playIcon = 'play-circle';\r\n  public resetIcon = 'replay';\r\n\r\n  @Output() change: EventEmitter<Date | [Date, Date]> = new EventEmitter();\r\n  @Output()\r\n  yearChange: EventEmitter<string | [string, string]> = new EventEmitter();\r\n  @ViewChild(MatSlider) mySlider;\r\n\r\n  get type(): TimeFilterType {\r\n    return this.options.type === undefined\r\n      ? TimeFilterType.DATE\r\n      : this.options.type;\r\n  }\r\n\r\n  get isRange(): boolean {\r\n    return this.options.range === undefined ||\r\n      this.options.style === TimeFilterStyle.SLIDER\r\n      ? false\r\n      : this.options.range;\r\n  }\r\n\r\n  get style(): TimeFilterStyle {\r\n    return this.options.style === undefined\r\n      ? TimeFilterStyle.SLIDER\r\n      : this.options.style;\r\n  }\r\n\r\n  get step(): number {\r\n    let step = 10800000;\r\n    if (this.options.step === undefined) {\r\n      switch (this.type) {\r\n        case TimeFilterType.DATE:\r\n        case TimeFilterType.DATETIME:\r\n          step = 10800000;\r\n          break;\r\n        case TimeFilterType.TIME:\r\n          step = 3600000;\r\n          break;\r\n        case TimeFilterType.YEAR:\r\n          step = 31536000000;\r\n          break;\r\n        default:\r\n          step = 10800000;\r\n      }\r\n    } else {\r\n      step = this.getStepDefinition(this.options.step);\r\n    }\r\n\r\n    return step;\r\n  }\r\n\r\n  get timeInterval(): number {\r\n    return this.options.timeInterval === undefined\r\n      ? 2000\r\n      : this.options.timeInterval;\r\n  }\r\n\r\n  get min(): Date {\r\n    if (this.options.min) {\r\n      const min = new Date(this.options.min);\r\n      return new Date(min.getTime() + min.getTimezoneOffset() * 60000);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  get max(): Date {\r\n    if (this.options.max) {\r\n      const max = new Date(this.options.max);\r\n      return new Date(max.getTime() + max.getTimezoneOffset() * 60000);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  get is(): boolean {\r\n    return this.options.range === undefined ? false : this.options.range;\r\n  }\r\n\r\n  constructor(private dateAdapter: DateAdapter<Date>) {\r\n    this.dateAdapter.setLocale('fr');\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.startDate === undefined) {\r\n      this.startDate = new Date(this.min);\r\n    }\r\n    if (this.endDate === undefined) {\r\n      this.endDate = new Date(this.max);\r\n    }\r\n    if (this.startYear === undefined) {\r\n      this.startYear = new Date(this.startDate).getFullYear();\r\n      this.initStartYear = this.startYear;\r\n    }\r\n    if (this.endYear === undefined) {\r\n      this.endYear = new Date(this.endDate).getFullYear();\r\n      this.initEndYear = this.endYear;\r\n    }\r\n\r\n    if (!this.isRange) {\r\n      for (let i = this.startYear; i <= this.endYear + 1; i++) {\r\n        this.listYears.push(i);\r\n      }\r\n    } else {\r\n      for (let i = this.startYear; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      for (let i = this.startYear + 1; i <= this.endYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n    }\r\n    this.options.enabled =\r\n      this.options.enabled === undefined ? true : this.options.enabled;\r\n    this.checkFilterValue();\r\n    if (this.options.enabled) {\r\n      if (!this.isRange && this.style === 'slider' && this.type === 'year') {\r\n        this.yearChange.emit(this.year);\r\n      }\r\n    } else {\r\n      this.storeCurrentFilterValue();\r\n      this.yearChange.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    }\r\n  }\r\n\r\n  storeCurrentFilterValue() {\r\n    // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    if (\r\n      !this.isRange &&\r\n      this.style === TimeFilterStyle.SLIDER &&\r\n      this.type === TimeFilterType.YEAR\r\n    ) {\r\n      this.options.value = this.year.toString();\r\n    }\r\n  }\r\n\r\n  checkFilterValue() {\r\n    const timeFromWms = this.layer.dataSource.ol.getParams().TIME;\r\n    if (\r\n      !this.isRange &&\r\n      this.style === TimeFilterStyle.SLIDER &&\r\n      this.type === TimeFilterType.YEAR\r\n    ) {\r\n      if (timeFromWms) {\r\n        this.year = new Date(timeFromWms.toString()).getFullYear() + 1;\r\n      } else if (this.options.value) {\r\n        this.year = new Date(this.options.value.toString()).getFullYear() + 1;\r\n      } else {\r\n        this.year = new Date(this.min).getFullYear() + 1;\r\n      }\r\n    } else if (\r\n      this.isRange &&\r\n      this.style === TimeFilterStyle.CALENDAR &&\r\n      this.type === TimeFilterType.YEAR\r\n    ) {\r\n      if (timeFromWms) {\r\n        this.startYear = parseInt(timeFromWms.substr(0, 4), 10);\r\n        this.endYear = parseInt(timeFromWms.substr(5, 4), 10);\r\n        const newStartListYears: any[] = [];\r\n        const newEndListYears: any[] = [];\r\n        for (let i = this.initStartYear; i < this.endYear; i++) {\r\n          newStartListYears.push(i);\r\n        }\r\n        for (let i = this.startYear + 1; i <= this.initEndYear; i++) {\r\n          newEndListYears.push(i);\r\n        }\r\n        this.startListYears = newStartListYears;\r\n        this.endListYears = newEndListYears;\r\n      }\r\n    }\r\n    // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n  }\r\n\r\n  handleDateChange(event: any) {\r\n    this.setupDateOutput();\r\n    this.applyTypeChange();\r\n\r\n    // Only if is range, use 2 dates to make the range\r\n    if (this.isRange) {\r\n      this.change.emit([this.startDate, this.endDate]);\r\n    } else {\r\n      this.change.emit(this.startDate);\r\n    }\r\n  }\r\n\r\n  handleYearChange(event: any) {\r\n    if (this.isRange) {\r\n      this.endListYears = [];\r\n      for (let i = this.startYear + 1; i <= this.initEndYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n      this.startListYears = [];\r\n      for (let i = this.initStartYear + 1; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      this.yearChange.emit([this.startYear, this.endYear]);\r\n    } else {\r\n      this.yearChange.emit(this.year);\r\n    }\r\n  }\r\n\r\n  handleListYearChange(event: any) {\r\n    this.handleYearChange([this.startYear, this.endYear]);\r\n  }\r\n\r\n  handleListYearStartChange(event: any) {\r\n    this.change.emit([this.startDate, this.endDate]);\r\n  }\r\n\r\n  dateToNumber(date: Date): number {\r\n    let newDate;\r\n    if (date) {\r\n      newDate = new Date(date);\r\n    } else {\r\n      newDate = new Date(this.min);\r\n    }\r\n\r\n    return newDate.getTime();\r\n  }\r\n\r\n  setSliderThumbLabel(label: string) {\r\n    const thumbLabel = this.findThumbLabel(\r\n      this.mySlider._elementRef.nativeElement.childNodes\r\n    );\r\n    if (thumbLabel) {\r\n      thumbLabel.textContent = label;\r\n    }\r\n  }\r\n\r\n  findThumbLabel(test: any[]): any {\r\n    let thumbLabel;\r\n\r\n    test.forEach(value => {\r\n      if (value.className === 'mat-slider-thumb-label-text') {\r\n        thumbLabel = value;\r\n      }\r\n\r\n      if (value.children.length > 0 && !thumbLabel) {\r\n        thumbLabel = this.findThumbLabel(value.childNodes);\r\n      }\r\n    }, this);\r\n    return thumbLabel;\r\n  }\r\n\r\n  toggleFilterState() {\r\n    this.options.enabled = !this.options.enabled;\r\n\r\n    if (this.options.enabled) {\r\n      if (\r\n        !this.isRange &&\r\n        TimeFilterStyle.SLIDER &&\r\n        this.type === TimeFilterType.YEAR\r\n      ) {\r\n        this.yearChange.emit(this.year);\r\n      }\r\n    } else {\r\n      this.stopFilter();\r\n      this.storeCurrentFilterValue();\r\n      this.change.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    }\r\n  }\r\n\r\n  resetFilter(event: any) {\r\n    this.date = new Date(this.min);\r\n    this.year = this.date.getFullYear() + 1;\r\n    if (\r\n      !this.isRange &&\r\n      TimeFilterStyle.SLIDER &&\r\n      this.type === TimeFilterType.YEAR\r\n    ) {\r\n      this.yearChange.emit(this.year);\r\n    } else {\r\n      this.setupDateOutput();\r\n      this.change.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    }\r\n  }\r\n\r\n  playFilter(event: any) {\r\n    if (this.interval) {\r\n      this.stopFilter();\r\n    } else {\r\n      this.playIcon = 'pause-circle';\r\n      this.interval = setInterval(\r\n        that => {\r\n          let newMinDateNumber;\r\n          const maxDateNumber = new Date(that.max);\r\n\r\n          newMinDateNumber =\r\n            that.date === undefined ? that.min.getTime() : that.date.getTime();\r\n          newMinDateNumber += that.mySlider.step;\r\n          that.date = new Date(newMinDateNumber);\r\n\r\n          if (newMinDateNumber > maxDateNumber.getTime()) {\r\n            that.stopFilter();\r\n          }\r\n\r\n          that.handleDateChange({ value: that.date, date: that.date });\r\n        },\r\n        this.timeInterval,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  playYear(event: any) {\r\n    if (\r\n      this.year + this.mySlider.step >\r\n      this.max.getFullYear() + this.mySlider.step\r\n    ) {\r\n      this.stopFilter();\r\n      this.resetFilter(event);\r\n    }\r\n    if (this.interval) {\r\n      this.stopFilter();\r\n    } else {\r\n      this.playIcon = 'pause-circle';\r\n      this.interval = setInterval(\r\n        // tslint:disable-next-line:only-arrow-functions\r\n        function(that) {\r\n          that.year = that.year + that.mySlider.step;\r\n          if (that.year > that.max.getFullYear()) {\r\n            that.stopFilter();\r\n          }\r\n          that.yearChange.emit(that.year);\r\n        },\r\n        this.timeInterval,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  stopFilter() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n    this.interval = undefined;\r\n    this.playIcon = 'play-circle';\r\n  }\r\n\r\n  handleSliderDateChange(event: any) {\r\n    this.date = new Date(event.value);\r\n    this.setSliderThumbLabel(this.handleSliderTooltip());\r\n    this.handleDateChange(event);\r\n  }\r\n\r\n  handleSliderYearChange(event: any) {\r\n    this.year = event.value;\r\n    this.yearChange.emit(this.year);\r\n  }\r\n\r\n  handleSliderValue(): number {\r\n    if (this.options.current === true || !this.min) {\r\n      const currentDate = new Date();\r\n      this.date = this.getRoundedDate(currentDate);\r\n    }\r\n    if (this.type === TimeFilterType.YEAR) {\r\n      return this.year;\r\n    } else {\r\n      return this.date === undefined ? this.min.getTime() : this.date.getTime();\r\n    }\r\n  }\r\n\r\n  handleSliderTooltip() {\r\n    let label: string;\r\n\r\n    switch (this.type) {\r\n      case TimeFilterType.DATE:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toDateString()\r\n            : this.date.toDateString();\r\n        break;\r\n      case TimeFilterType.TIME:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toTimeString()\r\n            : this.date.toTimeString();\r\n        break;\r\n      // datetime\r\n      default:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toUTCString()\r\n            : this.date.toUTCString();\r\n        break;\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  setupDateOutput() {\r\n    if (this.style === TimeFilterStyle.SLIDER) {\r\n      this.startDate = new Date(this.date);\r\n      this.startDate.setSeconds(-(this.step / 1000));\r\n      this.endDate = new Date(this.startDate);\r\n      this.endDate.setSeconds(this.step / 1000);\r\n    } else if (!this.isRange && !!this.date) {\r\n      this.endDate = new Date(this.date);\r\n      this.startDate = new Date(this.date);\r\n    } else if (this.isRange && (!!this.date || !this.date)) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    } else if (!this.date) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    }\r\n  }\r\n\r\n  applyTypeChange() {\r\n    switch (this.type) {\r\n      case TimeFilterType.DATE:\r\n        if (this.startDate !== undefined || this.endDate !== undefined) {\r\n          this.startDate.setHours(0);\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setHours(23);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      case TimeFilterType.TIME:\r\n        if (this.style === TimeFilterStyle.CALENDAR) {\r\n          if (this.startDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.startDate.getHours();\r\n            const selectedMinute = this.startDate.getMinutes();\r\n            this.startDate = this.min;\r\n            this.startDate.setHours(selectedHour);\r\n            this.startDate.setMinutes(selectedMinute);\r\n          }\r\n\r\n          if (this.endDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.endDate.getHours();\r\n            const selectedMinute = this.endDate.getMinutes();\r\n            this.endDate = this.min;\r\n            this.endDate.setHours(selectedHour);\r\n            this.endDate.setMinutes(selectedMinute);\r\n          }\r\n        }\r\n\r\n        if (!this.isRange && this.step > 60 * 60 * 1000) {\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      // datetime\r\n      default:\r\n      // do nothing\r\n    }\r\n  }\r\n\r\n  getRangeMinDate(): Date {\r\n    return this.startDate === undefined ? this.min : this.startDate;\r\n  }\r\n\r\n  getRangeMaxDate(): Date {\r\n    return this.endDate === undefined ? this.max : this.endDate;\r\n  }\r\n\r\n  /**\r\n   * Round date at a certain time, 10 minutes by Default\r\n   * @param date - Date to Round\r\n   * @param atMinute - round to closest 'atMinute' minute, rounded 10 by default\r\n   * @return the rounded date\r\n   */\r\n  getRoundedDate(date, atMinute = 10) {\r\n    const coeff = 1000 * 60 * atMinute;\r\n    return new Date(Math.round(date.getTime() / coeff) * coeff);\r\n  }\r\n\r\n  /**\r\n   * Get the step (period) definition from the layer dimension tag\r\n   * @param step The step as ISO 8601 example: PT10M for 10 Minutes\r\n   * @return the duration in milliseconds\r\n   */\r\n  getStepDefinition(step) {\r\n    return moment.duration(step).asMilliseconds();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { TimeFilterableDataSource } from '../shared/time-filter.interface';\r\nimport { TimeFilterService } from '../shared/time-filter.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-item',\r\n  templateUrl: './time-filter-item.component.html',\r\n  styleUrls: ['./time-filter-item.component.scss']\r\n})\r\nexport class TimeFilterItemComponent {\r\n  public color = 'primary';\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  filtersCollapsed: boolean = false;\r\n\r\n  @Input() header: boolean = true;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  get datasource(): TimeFilterableDataSource {\r\n    return this.layer.dataSource as TimeFilterableDataSource;\r\n  }\r\n  constructor(private timeFilterService: TimeFilterService) {}\r\n\r\n  handleYearChange(year: string | [string, string]) {\r\n    this.timeFilterService.filterByYear(this.datasource, year);\r\n  }\r\n\r\n  handleDateChange(date: Date | [Date, Date]) {\r\n    this.timeFilterService.filterByDate(this.datasource, date);\r\n  }\r\n\r\n  private toggleLegend(collapsed: boolean) {\r\n    this.layer.legendCollapsed = collapsed;\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleLegendOnClick() {\r\n    if (!this.filtersCollapsed) {\r\n      this.toggleLegend(this.showLegend$.value);\r\n    }\r\n  }\r\n\r\n  public setVisible() {\r\n    this.layer.visible = true;\r\n  }\r\n\r\n  toggleFiltersCollapsed() {\r\n    this.filtersCollapsed = !this.filtersCollapsed;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-list',\r\n  templateUrl: './time-filter-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TimeFilterListComponent {\r\n  @Input()\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  private _layers: Layer[] = [];\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { TimeFilterListComponent } from './time-filter-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoTimeFilterListBinding]'\r\n})\r\nexport class TimeFilterListBindingDirective implements OnInit, OnDestroy {\r\n  private component: TimeFilterListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: TimeFilterListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olproj from 'ol/proj';\r\nimport olWKT from 'ol/format/WKT';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WktService {\r\n  constructor() {}\r\n\r\n  public wktToFeature(wkt, wktProj, featureProj) {\r\n    return new olWKT().readFeature(wkt, {\r\n      dataProjection: wktProj,\r\n      featureProjection: featureProj\r\n    });\r\n  }\r\n  public extentToWkt(epsgTO, extent, extentProj) {\r\n    let currentExtent = olproj.transformExtent(extent, extentProj, epsgTO);\r\n    currentExtent = this.roundCoordinateArray(currentExtent, epsgTO, 0);\r\n    const wktPoly = `POLYGON((\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]}))`;\r\n    const wktLine = `LINESTRING(\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]})`;\r\n    const wktMultiPoints = `MULTIPOINT(\r\n        ${extent[0]} ${extent[1]},\r\n        ${extent[0]} ${extent[3]},\r\n        ${extent[2]} ${extent[3]},\r\n        ${extent[2]} ${extent[1]})`;\r\n    return {\r\n      wktPoly,\r\n      wktLine,\r\n      wktMultiPoints\r\n    };\r\n  }\r\n\r\n  private roundCoordinateArray(coordinateArray, projection, decimal = 0) {\r\n    const lproj = olproj.get(projection);\r\n    const units = lproj.getUnits();\r\n    const olUnits = ['ft', 'm', 'us-ft'];\r\n    if (olUnits.indexOf(units) !== -1) {\r\n      coordinateArray = this.roundArray(coordinateArray, decimal);\r\n    }\r\n    return coordinateArray;\r\n  }\r\n\r\n  private roundArray(array, decimal = 0) {\r\n    let x = 0;\r\n    while (x < array.length) {\r\n      array[x] = array[x].toFixed(decimal);\r\n      x++;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  public snrcToWkt(snrc, epsgTO) {\r\n    snrc = snrc.toLowerCase();\r\n    let wktPoly;\r\n    const ew = {\r\n      1: { from: -56, to: -64 },\r\n      2: { from: -64, to: -72 },\r\n      3: { from: -72, to: -80 },\r\n      4: { from: -80, to: -88 },\r\n      5: { from: -88, to: -96 },\r\n      6: { from: -96, to: -104 },\r\n      7: { from: -104, to: -112 },\r\n      8: { from: -112, to: -120 },\r\n      9: { from: -120, to: -128 },\r\n      10: { from: -128, to: -136 }\r\n    };\r\n    const sn = {\r\n      1: { from: 44, to: 48 },\r\n      2: { from: 48, to: 52 },\r\n      3: { from: 52, to: 56 },\r\n      4: { from: 56, to: 60 },\r\n      5: { from: 60, to: 64 },\r\n      6: { from: 64, to: 68 },\r\n      7: { from: 68, to: 72 },\r\n      8: { from: 72, to: 76 },\r\n      9: { from: 76, to: -128 }\r\n    };\r\n    const snrc250kIndex = [\r\n      ['m', 'n', 'o', 'p'],\r\n      ['l', 'k', 'j', 'i'],\r\n      ['e', 'f', 'g', 'h'],\r\n      ['d', 'c', 'b', 'a']\r\n    ];\r\n\r\n    const snrc50kIndex = [\r\n      ['13', '14', '15', '16'],\r\n      ['12', '11', '10', '09'],\r\n      ['05', '06', '07', '08'],\r\n      ['04', '03', '02', '01']\r\n    ];\r\n    const checkSNRC50k = /\\d{2,3}[a-p][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n\r\n    let snrc1m = false;\r\n    let snrc250k = false;\r\n    let snrc50k = false;\r\n\r\n    if (checkSNRC50k.test(snrc)) {\r\n      snrc50k = true;\r\n    } else {\r\n      if (checkSNRC250k.test(snrc)) {\r\n        snrc250k = true;\r\n      } else {\r\n        if (checkSNRC1m.test(snrc)) {\r\n          snrc1m = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (snrc1m) {\r\n      snrc += 'a01';\r\n    } else if (snrc250k) {\r\n      snrc += '01';\r\n    }\r\n    if (/\\d{2,3}[a-p][0,1][0-9]/gi.test(snrc)) {\r\n      const regex1m = /(?=[a-p])/gi;\r\n      const ar1m = snrc.split(regex1m);\r\n      const part1m = ar1m[0];\r\n      const part250k = ar1m[1][0];\r\n      const part50k = ar1m[1].split(part250k)[1];\r\n      let separator = 1;\r\n      if (part1m.length === 3) {\r\n        separator = 2;\r\n      }\r\n      const partEW = part1m.substring(0, separator);\r\n      const partSN = part1m.substring(separator);\r\n      const unit1mEW = 8;\r\n      const unit1mSN = 4;\r\n      const unit250kEW = 2;\r\n      const unit250kSN = 1;\r\n      const unit50kEW = 0.5;\r\n      const unit50kSN = 0.25;\r\n      let index250kEW = 0;\r\n      let index250kSN = 0;\r\n      let index50kEW = 0;\r\n      let index50kSN = 0;\r\n      snrc250kIndex.forEach(element => {\r\n        if (element.indexOf(part250k) !== -1) {\r\n          index250kSN = snrc250kIndex.indexOf(element);\r\n          index250kEW = element.indexOf(part250k);\r\n        }\r\n      });\r\n      snrc50kIndex.forEach(element => {\r\n        if (element.indexOf(part50k) !== -1) {\r\n          index50kSN = snrc50kIndex.indexOf(element);\r\n          index50kEW = element.indexOf(part50k);\r\n        }\r\n      });\r\n\r\n      let increment250kEW = 0;\r\n      let increment250kSN = 0;\r\n      let increment50kEW = 0;\r\n      let increment50kSN = 0;\r\n      let unitPerTypeEW = unit1mEW;\r\n      let unitPerTypeSN = unit1mSN;\r\n      if (snrc250k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = 0;\r\n        increment50kSN = 0;\r\n        unitPerTypeEW = unit250kEW;\r\n        unitPerTypeSN = unit250kSN;\r\n      } else if (snrc50k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = index50kEW * unit50kEW;\r\n        increment50kSN = index50kSN * unit50kSN;\r\n        unitPerTypeEW = unit50kEW;\r\n        unitPerTypeSN = unit50kSN;\r\n      }\r\n\r\n      const coord: {ul?: any, lr?: any, ur?: any, ll?: any} = {\r\n        ul: [\r\n          ew[partEW].to + increment250kEW + increment50kEW,\r\n          sn[partSN].to - increment250kSN - increment50kSN\r\n        ]\r\n      };\r\n\r\n      coord.lr = [\r\n        coord.ul[0] + unitPerTypeEW,\r\n        coord.ul[1] - unitPerTypeSN\r\n      ];\r\n      coord.ur = [coord.ul[0], coord.ul[1] - unitPerTypeSN];\r\n      coord.ll = [coord.ul[0] + unitPerTypeEW, coord.ul[1]];\r\n\r\n      coord.ul = olproj.transform(\r\n        [coord.ul[0], coord.ul[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.lr = olproj.transform(\r\n        [coord.lr[0], coord.lr[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ur = olproj.transform(\r\n        [coord.ur[0], coord.ur[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ll = olproj.transform(\r\n        [coord.ll[0], coord.ll[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n\r\n      // Rounded coordinate to shorten url in get\r\n      coord.ul = this.roundCoordinateArray(coord.ul, epsgTO, 0);\r\n      coord.lr = this.roundCoordinateArray(coord.lr, epsgTO, 0);\r\n      coord.ur = this.roundCoordinateArray(coord.ur, epsgTO, 0);\r\n      coord.ll = this.roundCoordinateArray(coord.ll, epsgTO, 0);\r\n\r\n      wktPoly =\r\n        'POLYGON((' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        '))';\r\n      const wktLine =\r\n        'LINESTRING(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n\r\n      const wktMultiPoints =\r\n        'MULTIPOINT(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n      return {\r\n        wktPoly,\r\n        wktLine,\r\n        wktMultiPoints\r\n      };\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { WktService } from '../../wkt/shared/wkt.service';\r\nimport { IgoMap } from '../../map';\r\nimport { FloatLabelType } from '@angular/material';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { SourceFieldsOptionsParams } from '../../datasource/shared/datasources/datasource.interface';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-form',\r\n  templateUrl: './ogc-filter-form.component.html',\r\n  styleUrls: ['./ogc-filter-form.component.scss']\r\n})\r\nexport class OgcFilterFormComponent implements OnInit {\r\n  public allOgcFilterOperators;\r\n  public ogcFilterOperators$ = new BehaviorSubject<{ [key: string]: any }>(undefined);\r\n  public igoSpatialSelectors;\r\n  public value = '';\r\n  public inputOperator;\r\n  // public fields: any[];\r\n  public fields$ = new BehaviorSubject<SourceFieldsOptionsParams[]>([]);\r\n  public values: any[];\r\n  public color = 'primary';\r\n  public snrc = '';\r\n  public disabled;\r\n  public baseOverlayName = 'ogcFilterOverlay_';\r\n  public currentFilter$ = new BehaviorSubject<any>(undefined);\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  set currentFilter(currentFilter: any) {\r\n    this.currentFilter$.next(currentFilter);\r\n  }\r\n  get currentFilter(): any {\r\n    return this.currentFilter$.value;\r\n  }\r\n\r\n  @Input() floatLabel: FloatLabelType = 'never';\r\n\r\n  get activeFilters() {\r\n    return this.datasource.options.ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private wktService: WktService\r\n  ) {\r\n    // TODO: Filter permitted operator based on wfscapabilities\r\n    // Need to work on regex on XML capabilities because\r\n    // comaparison operator's name varies between WFS servers...\r\n    // Ex: IsNull vs PropertyIsNull vs IsNil ...\r\n    this.allOgcFilterOperators = new OgcFilterWriter().operators;\r\n    this.ogcFilterOperators$.next(this.allOgcFilterOperators);\r\n    this.igoSpatialSelectors = [\r\n      {\r\n        type: 'fixedExtent'\r\n      },\r\n      {\r\n        type: 'snrc'\r\n      }\r\n    ];\r\n    // TODO: selectFeature & drawFeature\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.updateField();\r\n  }\r\n\r\n  updateField() {\r\n    if (!this.datasource.options.sourceFields) {\r\n      return;\r\n    }\r\n    const fields = this.datasource.options.sourceFields\r\n      .filter(sf => (sf.excludeFromOgcFilters === undefined || !sf.excludeFromOgcFilters));\r\n    fields.filter(f => f.name === this.currentFilter.propertyName)\r\n      .forEach(element => {\r\n        this.values = element.values !== undefined ? element.values.sort() : [];\r\n      });\r\n\r\n    this.fields$.next(fields);\r\n    const allowedOperators = new OgcFilterWriter().computeAllowedOperators(\r\n      fields,\r\n      this.currentFilter.propertyName,\r\n      this.datasource.options.ogcFilters.allowedOperatorsType);\r\n    this.ogcFilterOperators$.next(allowedOperators);\r\n    if (Object.keys(allowedOperators).indexOf(this.currentFilter$.value.operator) === -1) {\r\n      this.currentFilter$.value.operator = Object.keys(allowedOperators)[0];\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  toggleFilterState(event, filter: OgcInterfaceFilterOptions, property) {\r\n    this.updateField();\r\n    if (event.checked) {\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = true;\r\n        });\r\n    } else {\r\n      this.removeOverlayByID(filter.filterid);\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = false;\r\n        });\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  deleteFilter(filter: OgcInterfaceFilterOptions) {\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    ogcFilters.interfaceOgcFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.filterid !== filter.filterid\r\n    );\r\n    this.removeOverlayByID(filter.filterid);\r\n\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeNumericProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.changeProperty(filter, property, parseFloat(value));\r\n    this.refreshFilters();\r\n  }\r\n\r\n  private removeOverlayByID(id) {\r\n    const overlayId = this.baseOverlayName + id;\r\n    if (this.map.overlay.dataSource.ol.getFeatureById(overlayId)) {\r\n      this.map.overlay.dataSource.ol.removeFeature(\r\n        this.map.overlay.dataSource.ol.getFeatureById(overlayId)\r\n      );\r\n    }\r\n  }\r\n\r\n  changeOperator(filter) {\r\n    if (this.ogcFilterOperators$.value[filter.operator].spatial === false) {\r\n      this.removeOverlayByID(filter.filterid);\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  // Issue with mapserver 7.2 and Postgis layers. Fixed in 7.4\r\n  // Due to this issue, the checkbox is hide.\r\n  changeCaseSensitive(matchCase) {\r\n    this.currentFilter.matchCase = matchCase.checked;\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        element[property] = value;\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeGeometry(filter, value?) {\r\n    const checkSNRC50k = /\\d{2,3}[a-l][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n    const mapProjection = this.map.projection;\r\n    this.removeOverlayByID(filter.filterid);\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        let wktPoly;\r\n        if (filter.igoSpatialSelector === 'snrc') {\r\n          if (value === '' && this.snrc !== '') {\r\n            wktPoly = this.wktService.snrcToWkt(this.snrc, this.map.projection).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          } else if (\r\n            value !== '' &&\r\n            (checkSNRC1m.test(value) ||\r\n              checkSNRC250k.test(value) ||\r\n              checkSNRC50k.test(value))\r\n          ) {\r\n            wktPoly = this.wktService.snrcToWkt(value, this.map.projection).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          }\r\n        } else if (filter.igoSpatialSelector === 'fixedExtent') {\r\n          wktPoly = this.wktService.extentToWkt(\r\n            mapProjection,\r\n            this.map.viewController.getExtent(),\r\n            mapProjection\r\n          ).wktPoly;\r\n          element.wkt_geometry = wktPoly;\r\n        }\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { OgcFilterableDataSource } from '../shared/ogc-filter.interface';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-form',\r\n  templateUrl: './ogc-filterable-form.component.html'\r\n})\r\nexport class OgcFilterableFormComponent {\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters;\r\n  }\r\n\r\n  get advancedOgcFilters(): boolean {\r\n    if (this.datasource.options.ogcFilters) {\r\n      return this.datasource.options.ogcFilters.advancedOgcFilters;\r\n    }\r\n    return;\r\n  }\r\n\r\n  public color = 'primary';\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DownloadService } from '../../download/shared/download.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { WFSDataSourceOptionsParams } from '../../datasource/shared/datasources/wfs-datasource.interface';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions,\r\n  OgcInterfaceFilterOptions\r\n} from '../shared/ogc-filter.interface';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterWriter } from '../shared/ogc-filter';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-item',\r\n  templateUrl: './ogc-filterable-item.component.html',\r\n  styleUrls: ['./ogc-filterable-item.component.scss']\r\n})\r\nexport class OgcFilterableItemComponent implements OnInit {\r\n  public color = 'primary';\r\n  private lastRunOgcFilter;\r\n  private defaultLogicalParent = 'And';\r\n  public hasActiveSpatialFilter = false;\r\n  public filtersAreEditable = true;\r\n  public filtersCollapsed = true;\r\n  public hasPushButton: boolean = false;\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private ogcFilterWriter;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() header: boolean = true;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters.bind(this);\r\n  }\r\n\r\n  get datasource(): OgcFilterableDataSource {\r\n    return this.layer.dataSource as OgcFilterableDataSource;\r\n  }\r\n\r\n  get downloadable() {\r\n    return (this.datasource.options as any).download;\r\n  }\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService,\r\n    private downloadService: DownloadService\r\n  ) {\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n  }\r\n\r\n  ngOnInit() {\r\n    const ogcFilters = this.datasource.options.ogcFilters;\r\n    if (ogcFilters.pushButtons && ogcFilters.pushButtons.bundles.length > 0) {\r\n      if (ogcFilters.advancedOgcFilters === undefined) {\r\n        ogcFilters.advancedOgcFilters = false;\r\n      }\r\n      this.hasPushButton = true;\r\n    }\r\n\r\n    switch (this.datasource.options.type) {\r\n      case 'wms':\r\n        this.ogcFilterService.setOgcWMSFiltersOptions(this.datasource);\r\n        break;\r\n      case 'wfs':\r\n        this.ogcFilterService.setOgcWFSFiltersOptions(this.datasource);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (ogcFilters) {\r\n      if (ogcFilters.interfaceOgcFilters) {\r\n        this.lastRunOgcFilter = JSON.parse(\r\n          JSON.stringify(ogcFilters.interfaceOgcFilters)\r\n        );\r\n        if (\r\n          ogcFilters.interfaceOgcFilters.filter(f => f.wkt_geometry).length >= 1\r\n        ) {\r\n          this.hasActiveSpatialFilter = true;\r\n        }\r\n      }\r\n\r\n      this.filtersAreEditable = ogcFilters.editable\r\n        ? ogcFilters.editable\r\n        : false;\r\n    }\r\n  }\r\n\r\n  addFilterToSequence() {\r\n    this.filtersCollapsed = false;\r\n    const interfaceOgcFilters: OgcInterfaceFilterOptions[] = this.datasource\r\n      .options.ogcFilters.interfaceOgcFilters;\r\n    const arr = interfaceOgcFilters || [];\r\n    const lastLevel = arr.length === 0 ? 0 : arr[arr.length - 1].level;\r\n    let firstFieldName = '';\r\n    const includedFields = this.datasource.options.sourceFields.filter(f => !f.excludeFromOgcFilters);\r\n    if (includedFields.length > 0) {\r\n      firstFieldName =\r\n        includedFields[0].name === undefined ? '' : includedFields[0].name;\r\n    }\r\n    let fieldNameGeometry;\r\n    const datasourceOptions = this.datasource\r\n      .options as WFSDataSourceOptionsParams;\r\n    if (datasourceOptions.fieldNameGeometry) {\r\n      fieldNameGeometry = datasourceOptions.fieldNameGeometry;\r\n    } else if (\r\n      (this.datasource.options as any).paramsWFS &&\r\n      (this.datasource.options as any).paramsWFS.fieldNameGeometry\r\n    ) {\r\n      fieldNameGeometry = (this.datasource.options as any).paramsWFS\r\n        .fieldNameGeometry;\r\n    }\r\n    const status = arr.length === 0 ? true : false;\r\n    const allowedOperators = this.ogcFilterWriter.computeAllowedOperators(\r\n      this.datasource.options.sourceFields,\r\n      firstFieldName,\r\n      this.datasource.options.ogcFilters.allowedOperatorsType);\r\n    const firstOperatorName = Object.keys(allowedOperators)[0];\r\n\r\n    arr.push(\r\n      this.ogcFilterWriter.addInterfaceFilter(\r\n        {\r\n          propertyName: firstFieldName,\r\n          operator: firstOperatorName,\r\n          active: status,\r\n          igoSpatialSelector: 'fixedExtent',\r\n          srsName: this.map.projection,\r\n        } as OgcInterfaceFilterOptions,\r\n        fieldNameGeometry,\r\n        lastLevel,\r\n        this.defaultLogicalParent\r\n      )\r\n    );\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters = arr;\r\n  }\r\n\r\n  openDownload() {\r\n    this.downloadService.open(this.layer);\r\n  }\r\n\r\n  refreshFilters(force?: boolean) {\r\n    if (force === true) {\r\n      this.lastRunOgcFilter = undefined;\r\n    }\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    const activeFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n    if (activeFilters.length === 0) {\r\n      ogcFilters.filters = undefined;\r\n      ogcFilters.filtered = false;\r\n    }\r\n    if (activeFilters.length > 1) {\r\n      activeFilters[0].parentLogical = activeFilters[1].parentLogical;\r\n    }\r\n    if (\r\n      activeFilters.filter(\r\n        af => ['Contains', 'Intersects', 'Within'].indexOf(af.operator) !== -1\r\n      ).length === 0\r\n    ) {\r\n      this.hasActiveSpatialFilter = false;\r\n    } else {\r\n      this.hasActiveSpatialFilter = true;\r\n    }\r\n\r\n    if (\r\n      !(JSON.stringify(this.lastRunOgcFilter) === JSON.stringify(activeFilters))\r\n    ) {\r\n      if (this.layer.dataSource.options.type === 'wfs') {\r\n        const ogcDataSource: any = this.layer.dataSource;\r\n        const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n        ogcLayer.filters = this.ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(\r\n          activeFilters\r\n        );\r\n        this.layer.dataSource.ol.clear();\r\n      } else if (\r\n        this.layer.dataSource.options.type === 'wms' &&\r\n        ogcFilters.enabled\r\n      ) {\r\n        let rebuildFilter = '';\r\n        if (activeFilters.length >= 1) {\r\n          const ogcDataSource: any = this.layer.dataSource;\r\n          const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n          ogcLayer.filters = this.ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(\r\n            activeFilters\r\n          );\r\n          rebuildFilter = this.ogcFilterWriter.buildFilter(\r\n            ogcLayer.filters,\r\n            undefined,\r\n            undefined,\r\n            (this.layer.dataSource.options as any).fieldNameGeometry\r\n          );\r\n        }\r\n        this.ogcFilterService.filterByOgc(\r\n          this.datasource as WMSDataSource,\r\n          rebuildFilter\r\n        );\r\n        this.datasource.options.ogcFilters.filtered =\r\n          activeFilters.length === 0 ? false : true;\r\n      }\r\n\r\n      this.lastRunOgcFilter = JSON.parse(JSON.stringify(activeFilters));\r\n    } else {\r\n      // identical filter. Nothing triggered\r\n    }\r\n  }\r\n\r\n  public setVisible() {\r\n    this.layer.visible = true;\r\n  }\r\n\r\n  public isAdvancedOgcFilters(): boolean {\r\n    return this.datasource.options.ogcFilters.advancedOgcFilters;\r\n  }\r\n\r\n  public addFilterDisabled(): boolean {\r\n    return (\r\n      !this.datasource.options.sourceFields ||\r\n      this.datasource.options.sourceFields.length === 0\r\n    );\r\n  }\r\n\r\n  private changeOgcFiltersAdvancedOgcFilters(value: boolean) {\r\n    this.datasource.options.ogcFilters.advancedOgcFilters = value;\r\n  }\r\n\r\n  changeOgcFilterType(isAdvancedOgcFilters) {\r\n    this.changeOgcFiltersAdvancedOgcFilters(isAdvancedOgcFilters.checked);\r\n    if (isAdvancedOgcFilters.checked) {\r\n      this.refreshFilters(true);\r\n    }\r\n  }\r\n\r\n  private toggleLegend(collapsed: boolean) {\r\n    this.layer.legendCollapsed = collapsed;\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleLegendOnClick() {\r\n    if (!this.filtersCollapsed) {\r\n      this.toggleLegend(this.showLegend$.value);\r\n    }\r\n  }\r\n\r\n  toggleFiltersCollapsed() {\r\n    this.filtersCollapsed = !this.filtersCollapsed;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-list',\r\n  templateUrl: './ogc-filterable-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterableListComponent {\r\n\r\n  @Input() layers: Layer[];\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  constructor() {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoOgcFilterableListBinding]'\r\n})\r\nexport class OgcFilterableListBindingDirective implements OnInit, OnDestroy {\r\n  private component: OgcFilterableListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: OgcFilterableListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterableDataSourceOptions, IgoPushButton, OgcFiltersOptions } from '../shared/ogc-filter.interface';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-button',\r\n  templateUrl: './ogc-filter-button.component.html',\r\n  styleUrls: ['./ogc-filter-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterButtonComponent implements OnInit {\r\n\r\n  public options: OgcFilterableDataSourceOptions;\r\n\r\n  get badge() {\r\n    const filter = this.options.ogcFilters as any;\r\n    if (filter && !filter.advancedOgcFilters) {\r\n      if (filter.pushButtons) {\r\n        const pushButtons = filter.pushButtons as IgoPushButton;\r\n        const currentPushButtonGroup = pushButtons.groups.find(gr => gr.enabled);\r\n        let cntPushButtons = 0;\r\n        if (currentPushButtonGroup) {\r\n          currentPushButtonGroup.computedButtons.map(cb => cntPushButtons += cb.buttons.filter(button => button.enabled).length);\r\n        }\r\n        return cntPushButtons > 0 ? cntPushButtons : undefined;\r\n      } else {\r\n        return;\r\n      }\r\n    } else if (filter && filter.filters && !filter.filters.filters) {\r\n      return 1;\r\n    } else if (filter && filter.filters && filter.filters.filters) {\r\n      return filter.filters.filters.length;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n    if (value) {\r\n      this.options = this.layer.dataSource.options as OgcFilterableDataSourceOptions;\r\n    }\r\n  }\r\n  private _layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string = 'primary';\r\n\r\n  @Input() header: boolean;\r\n\r\n  public ogcFilterCollapse = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.options = this.layer.dataSource.options as OgcFilterableDataSourceOptions;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  IgoOgcFilterObject,\r\n  OgcPushButton,\r\n  OgcPushButtonBundle,\r\n  PushButtonGroup\r\n\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { IgoMap } from '../../map';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-toggle-button',\r\n  templateUrl: './ogc-filter-toggle-button.component.html',\r\n  styleUrls: ['./ogc-filter-toggle-button.component.scss']\r\n})\r\nexport class OgcFilterToggleButtonComponent implements OnInit {\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  private ogcFilterWriter: OgcFilterWriter;\r\n  public color = 'primary';\r\n  public currentPushButtonGroup;\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService\r\n  ) {\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n  }\r\n\r\n  getPushButtonsGroups(): PushButtonGroup[] {\r\n    return this.datasource.options.ogcFilters.pushButtons.groups;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.datasource.options.ogcFilters &&\r\n      this.datasource.options.ogcFilters.pushButtons) {\r\n      this.currentPushButtonGroup =\r\n        this.datasource.options.ogcFilters.pushButtons.groups.find(g => g.enabled) ||\r\n        this.datasource.options.ogcFilters.pushButtons.groups[0];\r\n    }\r\n    this.applyFilters();\r\n  }\r\n\r\n  getToolTip(pb: OgcPushButton): string  {\r\n    let tt;\r\n    if (pb.tooltip) {\r\n      if (Array.isArray(pb.tooltip)) {\r\n        tt = pb.tooltip.join('\\n');\r\n      } else {\r\n        tt = pb.tooltip;\r\n      }\r\n    }\r\n    return tt || '';\r\n  }\r\n\r\n  getButtonColor(pb: OgcPushButton): {} {\r\n\r\n    let styles;\r\n    if (pb.color) {\r\n      styles = {\r\n        'background-color': pb.enabled ? `rgba(${pb.color})` : `rgba(255,255,255,0)`,\r\n\r\n      };\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  bundleIsVertical(bundle: OgcPushButtonBundle): boolean {\r\n    return bundle.vertical ? bundle.vertical : false;\r\n  }\r\n\r\n  onChangeGroup() {\r\n\r\n    this.getPushButtonsGroups().map(g => g.enabled = false);\r\n    this.getPushButtonsGroups().find(g => g === this.currentPushButtonGroup).enabled = true;\r\n    this.applyFilters();\r\n  }\r\n\r\n  applyFilters(currentOgcPushButton?: OgcPushButton) {\r\n    if (currentOgcPushButton) {\r\n      currentOgcPushButton.enabled = !currentOgcPushButton.enabled;\r\n    }\r\n    let filterQueryString = '';\r\n    const conditions = [];\r\n    this.currentPushButtonGroup.computedButtons.map(buttonBundle => {\r\n      const bundleCondition = [];\r\n      buttonBundle.buttons\r\n      .filter(ogcpb => ogcpb.enabled === true)\r\n      .forEach(enabledPb => bundleCondition.push(enabledPb.filters));\r\n      if (bundleCondition.length >= 1 ) {\r\n        if (bundleCondition.length === 1) {\r\n          conditions.push(bundleCondition[0]);\r\n        } else {\r\n          conditions.push({logical: buttonBundle.logical, filters: bundleCondition});\r\n        }\r\n      }\r\n    });\r\n    if (conditions.length >= 1) {\r\n      filterQueryString = this.ogcFilterWriter\r\n        .buildFilter(conditions.length === 1 ?\r\n          conditions[0] : {logical: 'And', filters: conditions } as IgoOgcFilterObject);\r\n    }\r\n    if (this.datasource.options.type === 'wms') {\r\n      this.ogcFilterService.filterByOgc(this.datasource as WMSDataSource, filterQueryString );\r\n    }\r\n    if (this.datasource.options.type === 'wfs') {\r\n      // TODO: Check how to prevent wfs to refresh when filter icon is pushed...\r\n      this.datasource.ol.clear();\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { SpatialFilterQueryType, SpatialFilterType } from '../../shared/spatial-filter.enum';\r\nimport { FormControl } from '@angular/forms';\r\nimport { EntityStore } from '@igo2/common';\r\nimport { Feature } from '../../../feature';\r\n\r\n/**\r\n * Spatial Filter Type\r\n */\r\n@Component({\r\n  selector: 'igo-spatial-filter-type',\r\n  templateUrl: './spatial-filter-type.component.html',\r\n  styleUrls: ['./spatial-filter-type.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SpatialFilterTypeComponent implements OnInit {\r\n\r\n  @Input()\r\n  get store(): EntityStore<Feature> {\r\n    return this._store;\r\n  }\r\n  set store(store: EntityStore<Feature>) {\r\n    this._store = store;\r\n  }\r\n  private _store: EntityStore<Feature>;\r\n\r\n  public queryType: string[] = ['Arrond', 'CircFed', 'CircProv', 'DirReg', 'Mun', 'MRC', 'AdmRegion', 'RegTour'];\r\n  public selectedTypeIndex = new FormControl(0);\r\n\r\n  /**\r\n   * Reference to the SpatialFIlterType enum\r\n   * @internal\r\n   */\r\n  public spatialType = SpatialFilterType;\r\n\r\n  public activeDrawType: SpatialFilterType = this.spatialType.Polygon;\r\n\r\n  @Input() selectedQueryType: SpatialFilterQueryType;\r\n\r\n  @Input() zone: Feature;\r\n\r\n  public type: SpatialFilterType;\r\n\r\n  @Output() eventType = new EventEmitter<SpatialFilterType>();\r\n\r\n  @Output() eventQueryType = new EventEmitter<SpatialFilterQueryType>();\r\n\r\n  @Output() zoneChange = new EventEmitter<Feature>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    if (this.selectedTypeIndex.value === 0) {\r\n      this.type = this.spatialType.Predefined;\r\n    }\r\n    if (this.selectedTypeIndex.value === 1) {\r\n      this.type = this.activeDrawType;\r\n    }\r\n    this.eventType.emit(this.type);\r\n  }\r\n\r\n  onTypeChange(event) {\r\n    if (this.selectedTypeIndex.value === 0) {\r\n      this.type = SpatialFilterType.Predefined;\r\n    }\r\n    if (this.selectedTypeIndex.value === 1) {\r\n      this.type = this.activeDrawType;\r\n    }\r\n    this.eventType.emit(this.type);\r\n  }\r\n\r\n  onQueryTypeChange(event) {\r\n    this.eventQueryType.emit(this.selectedQueryType);\r\n  }\r\n\r\n  onZoneChange(feature) {\r\n    this.zoneChange.emit(feature);\r\n  }\r\n\r\n  onDrawTypeChange(spatialType: SpatialFilterType) {\r\n    this.activeDrawType = spatialType;\r\n    this.eventType.emit(this.activeDrawType);\r\n  }\r\n}\r\n","import { EntityStore } from '@igo2/common';\r\nimport { SpatialFilterService } from './../../shared/spatial-filter.service';\r\nimport { SpatialFilterQueryType } from './../../shared/spatial-filter.enum';\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Feature } from '../../../feature';\r\n\r\n@Component({\r\n  selector: 'igo-spatial-filter-list',\r\n  templateUrl: './spatial-filter-list.component.html',\r\n  styleUrls: ['./spatial-filter-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SpatialFilterListComponent implements OnInit, OnDestroy {\r\n\r\n  @Input()\r\n  get store(): EntityStore<Feature> {\r\n    return this._store;\r\n  }\r\n  set store(store: EntityStore<Feature>) {\r\n    this._store = store;\r\n  }\r\n  private _store: EntityStore<Feature>;\r\n\r\n  @Input()\r\n  get queryType(): SpatialFilterQueryType {\r\n    return this._queryType;\r\n  }\r\n  set queryType(queryType: SpatialFilterQueryType) {\r\n    this.formControl.setValue('');\r\n    this._queryType = queryType;\r\n  }\r\n  private _queryType: SpatialFilterQueryType;\r\n\r\n  @Input() selectedZone: Feature;\r\n\r\n  public formControl = new FormControl();\r\n\r\n  @Output() zoneChange = new EventEmitter<Feature>();\r\n\r\n  formValueChanges$$: Subscription;\r\n\r\n  ngOnInit() {\r\n    this.formValueChanges$$ = this.formControl.valueChanges.subscribe((value) => {\r\n      if (value.length) {\r\n        this.store.view.filter((feature) => {\r\n          const filterNormalized = value.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n          const featureNameNormalized = feature.properties.nom.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n          return featureNameNormalized.includes(filterNormalized);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.formValueChanges$$.unsubscribe();\r\n  }\r\n\r\n  displayFn(feature?: Feature): string | undefined {\r\n    return feature ? feature.properties.nom : undefined;\r\n  }\r\n\r\n  constructor(private spatialFilterService: SpatialFilterService) {}\r\n\r\n  onZoneChange(feature) {\r\n    if (feature && this.queryType) {\r\n      this.spatialFilterService.loadItemById(feature, this.queryType)\r\n      .subscribe((featureGeom: Feature) => {\r\n        this.selectedZone = featureGeom;\r\n        this.zoneChange.emit(featureGeom);\r\n      });\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { SpatialFilterQueryType, SpatialFilterType } from '../../shared/spatial-filter.enum';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { IgoMap } from '../../../map';\r\nimport { SpatialFilterItemType } from './../../shared/spatial-filter.enum';\r\nimport { Feature } from './../../../feature/shared/feature.interfaces';\r\nimport { FormControl } from '@angular/forms';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport { GeoJSONGeometry } from '../../../geometry/shared/geometry.interfaces';\r\nimport { Style as OlStyle } from 'ol/style';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olproj from 'ol/proj';\r\nimport { olFeature } from 'ol/Feature';\r\nimport { MatTreeNestedDataSource } from '@angular/material';\r\nimport { SpatialFilterService } from '../../shared/spatial-filter.service';\r\nimport { MeasureLengthUnit } from '../../../measure';\r\nimport { EntityStore } from '@igo2/common';\r\nimport { Layer } from '../../../layer/shared';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { SpatialFilterThematic } from './../../shared/spatial-filter.interface';\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\n/**\r\n * Spatial-Filter-Item (search parameters)\r\n */\r\n@Component({\r\n  selector: 'igo-spatial-filter-item',\r\n  templateUrl: './spatial-filter-item.component.html',\r\n  styleUrls: ['./spatial-filter-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SpatialFilterItemComponent implements OnDestroy, OnInit {\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get type(): SpatialFilterType {\r\n    return this._type;\r\n  }\r\n  set type(type: SpatialFilterType) {\r\n    this._type = type;\r\n    const index = this.geometryTypes.findIndex(geom => geom === this.type);\r\n    this.geometryType = this.geometryTypes[index];\r\n    this.formControl.reset();\r\n    this.radius = undefined;\r\n    this.drawGuide$.next(null);\r\n    this.drawStyle$.next(undefined);\r\n\r\n    // Necessary to keep reference to the geometry form field input\r\n    if (this.type === SpatialFilterType.Predefined) {\r\n      const geojson: GeoJSONGeometry = {\r\n        type: 'Point',\r\n        coordinates: ''\r\n      };\r\n      this.formControl.setValue(geojson);\r\n    }\r\n\r\n    // Necessary to apply the right style when geometry type is Point\r\n    if (this.type === SpatialFilterType.Point) {\r\n      this.radius = 1000; // Base radius\r\n      this.radiusFormControl.setValue(this.radius);\r\n      this.PointStyle = (feature: olFeature, resolution: number) => {\r\n        const coordinates = olproj.transform(feature.getGeometry().getCoordinates(), this.map.projection, 'EPSG:4326');\r\n        return new olstyle.Style ({\r\n          image: new olstyle.Circle ({\r\n            radius: this.radius / (Math.cos((Math.PI / 180) * coordinates[1])) / resolution, // Latitude correction\r\n            stroke: new olstyle.Stroke({\r\n              width: 2,\r\n              color: 'rgba(0, 153, 255)'\r\n            }),\r\n            fill: new olstyle.Fill({\r\n              color: 'rgba(0, 153, 255, 0.2)'\r\n            })\r\n          })\r\n        });\r\n      };\r\n      this.overlayStyle = this.PointStyle;\r\n      this.drawStyle$.next(this.overlayStyle);\r\n    } else {\r\n      // If geometry types is Polygon\r\n      this.radius = undefined;\r\n      this.PolyStyle = (feature, resolution) => {\r\n        return new olstyle.Style ({\r\n          stroke: new olstyle.Stroke({\r\n            width: 2,\r\n            color: 'rgba(0, 153, 255)'\r\n          }),\r\n          fill: new olstyle.Fill({\r\n            color: 'rgba(0, 153, 255, 0.2)'\r\n          })\r\n        });\r\n      };\r\n      this.overlayStyle = this.PolyStyle;\r\n    }\r\n    this.overlayStyle$.next(this.overlayStyle);\r\n  }\r\n  private _type: SpatialFilterType;\r\n\r\n  @Input() queryType: SpatialFilterQueryType;\r\n\r\n  @Input() zone: Feature;\r\n\r\n  @Input() loading;\r\n\r\n  @Input()\r\n  get store(): EntityStore<Feature> {\r\n    return this._store;\r\n  }\r\n  set store(store: EntityStore<Feature>) {\r\n    this._store = store;\r\n    this._store.entities$.subscribe(() => { this.cdRef.detectChanges(); });\r\n  }\r\n  private _store: EntityStore<Feature>;\r\n\r\n  /**\r\n   * Available measure units for the measure type given\r\n   * @internal\r\n   */\r\n  get measureUnits(): string[] {\r\n    return [MeasureLengthUnit.Meters];\r\n  }\r\n\r\n  @Input() layers: Layer[] = [];\r\n\r\n  @Output() toggleSearch = new EventEmitter();\r\n\r\n  @Output() itemTypeChange = new EventEmitter<SpatialFilterItemType>();\r\n\r\n  @Output() thematicChange = new EventEmitter<SpatialFilterThematic[]>();\r\n\r\n  @Output() drawZoneEvent = new EventEmitter<Feature>();\r\n\r\n  @Output() radiusEvent = new EventEmitter<number>();\r\n  @Output() freehandControl = new EventEmitter<boolean>();\r\n\r\n  @Output() clearButtonEvent = new EventEmitter<Layer[]>();\r\n\r\n  @Output() clearSearchEvent = new EventEmitter();\r\n\r\n  @Output() export = new EventEmitter();\r\n\r\n  public itemType: SpatialFilterItemType[] = [SpatialFilterItemType.Address, SpatialFilterItemType.Thematics];\r\n  public selectedItemType: SpatialFilterItemType = SpatialFilterItemType.Address;\r\n  public selectedSourceAddress;\r\n\r\n  treeControl = new NestedTreeControl<SpatialFilterThematic>(node => node.children);\r\n\r\n  // For thematics and results tables\r\n  public displayedColumns: string[] = ['name', 'select'];\r\n  public childrens: SpatialFilterThematic[] = [];\r\n  public groups: string[] = [];\r\n  public thematics: SpatialFilterThematic[] = [];\r\n  public dataSource = new MatTreeNestedDataSource<SpatialFilterThematic>();\r\n  public selectedThematics = new SelectionModel<SpatialFilterThematic>(true, []);\r\n  public displayedColumnsResults: string[] = ['typeResults', 'nameResults'];\r\n\r\n  // For geometry form field input\r\n  value$: BehaviorSubject<GeoJSONGeometry> = new BehaviorSubject(undefined);\r\n  drawGuide$: BehaviorSubject<number> = new BehaviorSubject(null);\r\n  overlayStyle$: BehaviorSubject<OlStyle> = new BehaviorSubject(undefined);\r\n  drawStyle$: BehaviorSubject<OlStyle> = new BehaviorSubject(undefined);\r\n\r\n  private value$$: Subscription;\r\n  private radiusChanges$$: Subscription;\r\n\r\n  public formControl = new FormControl();\r\n  public geometryType: OlGeometryType;\r\n  public geometryTypeField = false;\r\n  public geometryTypes: string[] = ['Point', 'Polygon'];\r\n  public drawGuideField = false;\r\n  public drawGuide: number = null;\r\n  public drawGuidePlaceholder = '';\r\n  public measure = false;\r\n  public drawControlIsActive = true;\r\n  public freehandDrawIsActive = false;\r\n  public drawStyle: OlStyle;\r\n  public drawZone: Feature;\r\n  public overlayStyle: OlStyle;\r\n  public PointStyle: OlStyle;\r\n  public PolyStyle: OlStyle;\r\n\r\n  public radius: number;\r\n  public radiusFormControl = new FormControl();\r\n\r\n  public measureUnit: MeasureLengthUnit = MeasureLengthUnit.Meters;\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private spatialFilterService: SpatialFilterService,\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService) {}\r\n\r\n  ngOnInit() {\r\n    this.spatialFilterService.loadThematicsList()\r\n    .subscribe((items: SpatialFilterThematic[]) => {\r\n      for (const item of items) {\r\n        this.childrens.push(item);\r\n        this.childrens.sort((a, b) => {\r\n          return a.name.localeCompare(b.name);\r\n        });\r\n      }\r\n      this.childrens.forEach(child => {\r\n        if (child.group && (this.groups.indexOf(child.group) === -1)) {\r\n          this.groups.push(child.group);\r\n          const thematic: SpatialFilterThematic = {\r\n            name: child.group,\r\n            children: []\r\n          };\r\n          this.thematics.push(thematic);\r\n        }\r\n        if (!child.group) {\r\n          const thematic: SpatialFilterThematic = {\r\n            name: child.name,\r\n            children: [],\r\n            source: child.source\r\n          };\r\n          this.thematics.push(thematic);\r\n        }\r\n        this.thematics.sort((a, b) => {\r\n          return a.name.localeCompare(b.name);\r\n        });\r\n      });\r\n      this.thematics.forEach(thematic => {\r\n        for (const child of this.childrens) {\r\n          if (child.group === thematic.name) {\r\n            thematic.children.push(child);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    this.dataSource.data = this.thematics;\r\n\r\n    this.drawGuide$.next(null);\r\n    this.value$.next(this.formControl.value ? this.formControl.value : undefined);\r\n    this.value$$ = this.formControl.valueChanges.subscribe((value: GeoJSONGeometry) => {\r\n      this.value$.next(value ? value : undefined);\r\n    });\r\n\r\n    this.value$.subscribe(() => {\r\n      this.getRadius();\r\n      this.cdRef.detectChanges();\r\n    });\r\n\r\n    this.radiusChanges$$ = this.radiusFormControl.valueChanges.subscribe(() => {\r\n      this.getRadius();\r\n      this.cdRef.detectChanges();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the value stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.value$$.unsubscribe();\r\n    this.cdRef.detach();\r\n  }\r\n\r\n  onItemTypeChange(event) {\r\n    this.selectedItemType = event.value;\r\n    this.itemTypeChange.emit(this.selectedItemType);\r\n  }\r\n\r\n  /**\r\n   * Set the measure unit\r\n   * @internal\r\n   */\r\n  onMeasureUnitChange(unit: MeasureLengthUnit) {\r\n    this.measureUnit = unit;\r\n  }\r\n\r\n  isPredefined() {\r\n    return this.type === SpatialFilterType.Predefined;\r\n  }\r\n\r\n  isPolygon() {\r\n    return this.type === SpatialFilterType.Polygon;\r\n  }\r\n\r\n  isPoint() {\r\n    return this.type === SpatialFilterType.Point;\r\n  }\r\n\r\n  hasChild(_: number, node: SpatialFilterThematic) {\r\n    if (node.children) {\r\n      return node.children.length;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onToggleClick(node: SpatialFilterThematic) {\r\n    this.treeControl.isExpanded(node) ? this.treeControl.collapse(node) : this.treeControl.expand(node);\r\n  }\r\n\r\n  isAllSelected(node?: SpatialFilterThematic) {\r\n    let numSelected;\r\n    let numNodes = 0;\r\n    if (!node) {\r\n      numSelected = this.selectedThematics.selected.length;\r\n      this.thematics.forEach(thematic => {\r\n        if (this.groups.indexOf(thematic.name) === -1) {\r\n          numNodes++;\r\n        }\r\n      });\r\n      this.childrens.forEach(children => {\r\n        if (!this.thematics.find(thematic => thematic.source === children.source)) {\r\n          numNodes++;\r\n        }\r\n      });\r\n    } else {\r\n      numSelected = node.children.length;\r\n      node.children.forEach(children => {\r\n        if (this.selectedThematics.selected.find(thematic => thematic === children)) {\r\n          numNodes++;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (numNodes >= 1) {\r\n      return numSelected === numNodes;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  hasChildrenSelected(node: SpatialFilterThematic) {\r\n    let bool = false;\r\n    node.children.forEach(child => {\r\n      if (this.selectedThematics.selected.find(thematic => thematic.source === child.source)) {\r\n        bool = true;\r\n      }\r\n    });\r\n    return bool;\r\n  }\r\n\r\n  /**\r\n   * Apply header checkbox\r\n   */\r\n  masterToggle() {\r\n    this.isAllSelected() ?\r\n      this.selectedThematics.clear() :\r\n      this.selectAll();\r\n\r\n    const selectedThematicsName: SpatialFilterThematic[] = [];\r\n    for (const thematic of this.selectedThematics.selected) {\r\n      selectedThematicsName.push(thematic);\r\n    }\r\n\r\n    if (this.isAllSelected()) {\r\n      this.thematics.forEach(thematic => {\r\n        if (this.hasChild(0, thematic)) {\r\n          this.treeControl.expand(thematic);\r\n        }\r\n      });\r\n    } else {\r\n      this.thematics.forEach(thematic => {\r\n        if (this.hasChild(0, thematic)) {\r\n          this.treeControl.collapse(thematic);\r\n        }\r\n      });\r\n    }\r\n    this.thematicChange.emit(selectedThematicsName);\r\n  }\r\n\r\n  selectAll(node?: SpatialFilterThematic) {\r\n    if (!node) {\r\n      this.thematics.forEach(thematic => {\r\n        if (this.groups.indexOf(thematic.name) === -1) {\r\n          this.selectedThematics.select(thematic);\r\n        }\r\n      });\r\n      this.childrens.forEach(children => {\r\n        if (!this.selectedThematics.selected.find(thematic => thematic.source === children.source)) {\r\n          this.selectedThematics.select(children);\r\n        }\r\n      });\r\n    } else {\r\n      if (this.hasChild(0, node)) {\r\n        node.children.forEach(children => this.selectedThematics.select(children));\r\n      }\r\n    }\r\n  }\r\n\r\n  childrensToggle(node: SpatialFilterThematic) {\r\n    this.isAllSelected(node) ?\r\n    node.children.forEach(child => this.selectedThematics.deselect(child)) :\r\n    this.selectAll(node);\r\n\r\n    const selectedThematicsName: SpatialFilterThematic[] = [];\r\n    for (const thematic of this.selectedThematics.selected) {\r\n      selectedThematicsName.push(thematic);\r\n    }\r\n    this.treeControl.expand(node);\r\n    this.thematicChange.emit(selectedThematicsName);\r\n  }\r\n\r\n  /**\r\n   * Apply changes to the thematics selected tree and emit event\r\n   */\r\n  onToggleChange(nodeSelected: SpatialFilterThematic) {\r\n    let selected = false;\r\n    if (this.selectedThematics.selected.find(thematic => thematic.source === nodeSelected.source) !== undefined) {\r\n      selected = true;\r\n    }\r\n\r\n    this.childrens.forEach(children => {\r\n      if (children === nodeSelected && selected === false) {\r\n        this.selectedThematics.select(children);\r\n      }\r\n      if (children === nodeSelected && selected === true) {\r\n        this.selectedThematics.deselect(children);\r\n      }\r\n    });\r\n    this.thematics.forEach(thematic => {\r\n      if (thematic === nodeSelected && selected === false) {\r\n        this.selectedThematics.select(thematic);\r\n      }\r\n      if (thematic === nodeSelected && selected === true) {\r\n        this.selectedThematics.deselect(thematic);\r\n      }\r\n    });\r\n\r\n    const selectedThematicsName: SpatialFilterThematic[] = [];\r\n    for (const thematic of this.selectedThematics.selected) {\r\n      selectedThematicsName.push(thematic);\r\n    }\r\n    this.thematicChange.emit(selectedThematicsName);\r\n  }\r\n\r\n  onDrawControlChange() {\r\n    this.drawControlIsActive = !this.drawControlIsActive;\r\n  }\r\n\r\n  onfreehandControlChange() {\r\n    this.freehandDrawIsActive = !this.freehandDrawIsActive;\r\n    this.freehandControl.emit(this.freehandDrawIsActive);\r\n  }\r\n\r\n  /**\r\n   * Launch search button\r\n   */\r\n  toggleSearchButton() {\r\n    if (this.isPolygon() || this.isPoint()) {\r\n      this.drawZone = this.formControl.value as Feature;\r\n      this.drawZone.meta = {\r\n        id: undefined,\r\n        title: 'Zone'\r\n      };\r\n      this.drawZone.properties = {\r\n        nom: 'Zone'\r\n      };\r\n      this.drawZoneEvent.emit(this.drawZone);\r\n    }\r\n    this.radiusEvent.emit(this.radius);\r\n    this.toggleSearch.emit();\r\n  }\r\n\r\n  /**\r\n   * Launch clear button (clear store and map layers)\r\n   */\r\n  clearButton() {\r\n    this.loading = true;\r\n    this.map.removeLayers(this.layers);\r\n    this.loading = false;\r\n    if (this.store) {\r\n      this.store.clear();\r\n    }\r\n    this.clearButtonEvent.emit([]);\r\n  }\r\n\r\n  /**\r\n   * Launch clear search (clear field if type is predefined)\r\n   */\r\n  clearSearch() {\r\n    this.selectedThematics.clear();\r\n    this.thematicChange.emit([]);\r\n    this.clearSearchEvent.emit();\r\n  }\r\n\r\n  /**\r\n   * Verify conditions of incomplete fields or busy service\r\n   */\r\n  disableSearchButton(): boolean {\r\n    if (this.type === SpatialFilterType.Predefined) {\r\n      if (this.selectedItemType === SpatialFilterItemType.Address) {\r\n        if (this.queryType !== undefined && this.zone !== undefined) {\r\n          return this.loading;\r\n        }\r\n      }\r\n      if (this.selectedItemType === SpatialFilterItemType.Thematics) {\r\n        if (this.queryType !== undefined && this.zone !== undefined && this.selectedThematics.selected.length > 0) {\r\n          return this.loading;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === SpatialFilterType.Polygon || this.type === SpatialFilterType.Point) {\r\n      if (this.selectedItemType === SpatialFilterItemType.Address && this.formControl.value !== null) {\r\n        return this.loading;\r\n      }\r\n      if (this.selectedItemType === SpatialFilterItemType.Thematics) {\r\n        if (this.selectedThematics.selected.length > 0 && this.formControl.value !== null) {\r\n          return this.loading;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Manage radius value at user change\r\n   */\r\n  getRadius() {\r\n    let formValue;\r\n    this.formControl.value !== null ? formValue = this.formControl.value.radius : formValue = undefined;\r\n    if (this.type === SpatialFilterType.Point) {\r\n      if (!this.freehandDrawIsActive) {\r\n        if (this.radiusFormControl.value >= 10000 || this.radiusFormControl.value < 0) {\r\n          this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.radiusAlert'),\r\n            this.languageService.translate.instant('igo.geo.spatialFilter.warning'));\r\n          this.radius = 1000;\r\n          this.radiusFormControl.setValue(this.radius);\r\n          this.drawGuide$.next(this.radius);\r\n          return;\r\n        }\r\n      } else {\r\n        if (this.radiusFormControl.value >= 10000 || this.radiusFormControl.value < 0) {\r\n          this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.radiusAlert'),\r\n            this.languageService.translate.instant('igo.geo.spatialFilter.warning'));\r\n          this.radius = 1000;\r\n          this.radiusFormControl.setValue(this.radius);\r\n          this.drawGuide$.next(this.radius);\r\n          return;\r\n        }\r\n        if (formValue >= 10000) {\r\n          this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.radiusAlert'),\r\n            this.languageService.translate.instant('igo.geo.spatialFilter.warning'));\r\n          this.formControl.reset();\r\n          return;\r\n        }\r\n        if (formValue) {\r\n          if (formValue !== this.radiusFormControl.value) {\r\n            this.radiusFormControl.setValue(formValue);\r\n          }\r\n          this.formControl.value.radius = undefined;\r\n        }\r\n      }\r\n      this.radius = this.radiusFormControl.value;\r\n      this.drawGuide$.next(this.radius);\r\n      this.overlayStyle$.next(this.PointStyle);\r\n      this.drawStyle$.next(this.PointStyle);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatFormFieldModule,\r\n  MatTableModule,\r\n  MatTreeModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MAT_DATE_LOCALE,\r\n  MatCheckboxModule,\r\n  MatTabsModule,\r\n  MatRadioModule,\r\n  MatMenuModule,\r\n  MatBadgeModule\r\n} from '@angular/material';\r\n\r\nimport {\r\n  MatDatetimepickerModule,\r\n  MatNativeDatetimeModule\r\n} from '@mat-datetimepicker/core';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule,\r\n  IgoKeyValueModule\r\n} from '@igo2/common';\r\nimport { IgoGeometryModule } from './../geometry/geometry.module';\r\n\r\nimport { FilterableDataSourcePipe } from './shared/filterable-datasource.pipe';\r\nimport { IgoLayerModule } from '../layer/layer.module';\r\nimport { TimeFilterButtonComponent } from './time-filter-button/time-filter-button.component';\r\nimport { TimeFilterFormComponent } from './time-filter-form/time-filter-form.component';\r\nimport { TimeFilterItemComponent } from './time-filter-item/time-filter-item.component';\r\nimport { TimeFilterListBindingDirective } from './time-filter-list/time-filter-list-binding.directive';\r\nimport { TimeFilterListComponent } from './time-filter-list/time-filter-list.component';\r\nimport { TimeFilterService } from './shared/time-filter.service';\r\n\r\nimport { OgcFilterFormComponent } from './ogc-filter-form/ogc-filter-form.component';\r\nimport { OgcFilterableFormComponent } from './ogc-filterable-form/ogc-filterable-form.component';\r\nimport { OgcFilterableItemComponent } from './ogc-filterable-item/ogc-filterable-item.component';\r\nimport { OgcFilterableListBindingDirective } from './ogc-filterable-list/ogc-filterable-list-binding.directive';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list/ogc-filterable-list.component';\r\nimport { OgcFilterButtonComponent } from './ogc-filter-button/ogc-filter-button.component';\r\nimport { OGCFilterService } from './shared/ogc-filter.service';\r\nimport { OgcFilterToggleButtonComponent } from './ogc-filter-toggle-button/ogc-filter-toggle-button.component';\r\n\r\nimport { SpatialFilterTypeComponent } from './spatial-filter/spatial-filter-type/spatial-filter-type.component';\r\nimport { SpatialFilterListComponent } from './spatial-filter/spatial-filter-list/spatial-filter-list.component';\r\nimport { SpatialFilterItemComponent } from './spatial-filter/spatial-filter-item/spatial-filter-item.component';\r\nimport { SpatialFilterService } from './shared/spatial-filter.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatRadioModule,\r\n    MatMenuModule,\r\n    MatTableModule,\r\n    MatTreeModule,\r\n    MatButtonToggleModule,\r\n    MatCheckboxModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatDatetimepickerModule,\r\n    MatNativeDatetimeModule,\r\n    IgoLanguageModule,\r\n    IgoLayerModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoKeyValueModule,\r\n    IgoGeometryModule,\r\n    MatBadgeModule\r\n  ],\r\n  exports: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterButtonComponent,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterToggleButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective,\r\n    SpatialFilterTypeComponent,\r\n    SpatialFilterListComponent,\r\n    SpatialFilterItemComponent\r\n  ],\r\n  declarations: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterButtonComponent,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterToggleButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective,\r\n    SpatialFilterTypeComponent,\r\n    SpatialFilterListComponent,\r\n    SpatialFilterItemComponent\r\n  ],\r\n  providers: [TimeFilterService, OGCFilterService, SpatialFilterService]\r\n})\r\nexport class IgoFilterModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoFilterModule,\r\n      providers: [\r\n        {\r\n          provide: MAT_DATE_LOCALE,\r\n          useValue: 'fr-FR'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport { LayerOptions, VectorLayer } from '../../layer';\r\n\r\n@Component({\r\n  selector: 'igo-export-button',\r\n  templateUrl: './export-button.component.html',\r\n  styleUrls: ['./export-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ExportButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor() {}\r\n\r\n  get options(): LayerOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n\r\n  layerIsExportable(): boolean {\r\n    if ((this.layer instanceof VectorLayer && this.layer.exportable === true) ||\r\n      (this.layer.dataSource.options.download && this.layer.dataSource.options.download.url)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","export class ExportError extends Error {}\r\n\r\nexport class ExportInvalidFileError extends ExportError {\r\n  constructor() {\r\n    super('Invalid file');\r\n    Object.setPrototypeOf(this, ExportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ExportNothingToExportError extends ExportError {\r\n  constructor() {\r\n    super('Nothing to export');\r\n    Object.setPrototypeOf(this, ExportNothingToExportError.prototype);\r\n  }\r\n}\r\n","import {\r\n  getEntityProperty,\r\n  EntityTableColumn,\r\n  EntityTableColumnRenderer\r\n} from '@igo2/common';\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\nimport { downloadContent } from '@igo2/utils';\r\n\r\nimport { ExportNothingToExportError } from './export.errors';\r\n\r\nexport function handleFileExportError(\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  if (error instanceof ExportNothingToExportError) {\r\n    handleNothingToExportError(messageService, languageService);\r\n    return;\r\n  }\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.failed.title');\r\n  const message = translate.instant('igo.geo.export.failed.text');\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleFileExportSuccess(\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.success.title');\r\n  const message = translate.instant('igo.geo.export.success.text');\r\n  messageService.success(message, title);\r\n}\r\n\r\nexport function handleNothingToExportError(\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.nothing.title');\r\n  const message = translate.instant('igo.geo.export.nothing.text');\r\n  messageService.error(message, title);\r\n}\r\n\r\n/**\r\n * Export array to CSV\r\n *\r\n * @param rows Array of arrays to export as CSV\r\n * @param separator Cell separator\r\n */\r\nexport function exportToCSV(rows: any[][], fileName: string, separator: string = ';') {\r\n  const lines = rows.map((row: any[][], index: number) => row.join(separator));\r\n  const csvContent = lines.join('\\n');\r\n  downloadContent(csvContent, 'text/csv;charset=utf-8', fileName);\r\n}\r\n\r\n/**\r\n * Return an array of values from an array of entities.\r\n *\r\n * @param entities Array of entities\r\n * @param scolumns Columns definition of the output data\r\n */\r\nexport function entitiesToRowData(entities: object[], columns: EntityTableColumn[]) {\r\n  return entities.map((entity: object) => {\r\n    return columns.map((column: EntityTableColumn) => {\r\n      let valueAccessor;\r\n      if (column.renderer === undefined || column.renderer === EntityTableColumnRenderer.Default) {\r\n        valueAccessor = column.valueAccessor;\r\n      }\r\n      valueAccessor = valueAccessor ? valueAccessor : getEntityProperty;\r\n      return valueAccessor(entity, column.name);\r\n    });\r\n  });\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const ExportFormat = strEnum(['GeoJSON', 'GML', 'GPX', 'KML', 'Shapefile', 'CSVcomma', 'CSVsemicolon', 'URL']);\r\nexport type ExportFormat = keyof typeof ExportFormat;\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { downloadContent } from '@igo2/utils';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { ExportFormat } from './export.type';\r\nimport {\r\n  ExportInvalidFileError,\r\n  ExportNothingToExportError\r\n} from './export.errors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportService {\r\n  static ogreFormats = {\r\n    GML: 'gml',\r\n    GPX: 'gpx',\r\n    KML: 'kml',\r\n    Shapefile: 'ESRI Shapefile',\r\n    CSVcomma: 'CSVcomma',\r\n    CSVsemicolon: 'CSVsemicolon'\r\n  };\r\n\r\n  static noOgreFallbacks = ['GML', 'GPX', 'KML'];\r\n\r\n  private ogreUrl: string;\r\n  private aggregateInComment: boolean = true;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n    const gpxAggregateInComment = this.config.getConfig(\r\n      'importExport.gpxAggregateInComment'\r\n    );\r\n    if (gpxAggregateInComment !== undefined) {\r\n      this.aggregateInComment = gpxAggregateInComment;\r\n    }\r\n  }\r\n\r\n  export(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn = 'EPSG:4326',\r\n    projectionOut = 'EPSG:4326'\r\n  ): Observable<void> {\r\n    const exportOlFeatures = this.generateFeature(olFeatures, format);\r\n\r\n    return this.exportAsync(\r\n      exportOlFeatures,\r\n      format,\r\n      title,\r\n      projectionIn,\r\n      projectionOut\r\n    );\r\n  }\r\n\r\n  private generateFeature(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat\r\n  ): OlFeature[] {\r\n    if (format === ExportFormat.GPX && this.aggregateInComment) {\r\n      return this.generateAggratedFeature(olFeatures);\r\n    }\r\n\r\n    return olFeatures.map((olFeature: OlFeature) => {\r\n      const keys = olFeature\r\n        .getKeys()\r\n        .filter((key: string) => !key.startsWith('_'));\r\n      const properties = keys.reduce(\r\n        (acc: object, key: string) => {\r\n          acc[key] = olFeature.get(key);\r\n          return acc;\r\n        },\r\n        { geometry: olFeature.getGeometry() }\r\n      );\r\n      return new OlFeature(properties);\r\n    });\r\n  }\r\n\r\n  private generateAggratedFeature(olFeatures: OlFeature[]): OlFeature[] {\r\n    return olFeatures.map((olFeature: OlFeature) => {\r\n      const keys = olFeature\r\n        .getKeys()\r\n        .filter((key: string) => !key.startsWith('_'));\r\n      let comment: string = '';\r\n      const properties: any[] = keys.reduce(\r\n        (acc: object, key: string) => {\r\n          if (key !== undefined && key !== 'geometry') {\r\n            comment += key + ':' + olFeature.get(key) + '   \\r\\n';\r\n          }\r\n          acc[key] = olFeature.get(key);\r\n          return acc;\r\n        },\r\n        { geometry: olFeature.getGeometry() }\r\n      );\r\n      const newFeature = new OlFeature(properties);\r\n      newFeature.set('name', olFeature.getId());\r\n      newFeature.set('cmt', comment);\r\n\r\n      return newFeature;\r\n    });\r\n  }\r\n\r\n  private exportAsync(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Observable<void> {\r\n    const doExport = (observer: Observer<void>) => {\r\n      const nothingToExport = this.nothingToExport(olFeatures, format);\r\n      if (nothingToExport === true) {\r\n        observer.error(new ExportNothingToExportError());\r\n        return;\r\n      }\r\n\r\n      const ogreFormats = Object.keys(ExportService.ogreFormats);\r\n      if (ogreFormats.indexOf(format) >= 0) {\r\n        if (this.ogreUrl === undefined) {\r\n          if (ExportService.noOgreFallbacks.indexOf(format) >= 0) {\r\n            this.exportToFile(\r\n              olFeatures,\r\n              observer,\r\n              format,\r\n              title,\r\n              projectionIn,\r\n              projectionOut\r\n            );\r\n          } else {\r\n            observer.error(new ExportInvalidFileError());\r\n          }\r\n          return;\r\n        }\r\n        this.exportWithOgre(\r\n          olFeatures,\r\n          observer,\r\n          format,\r\n          title,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n      } else {\r\n        this.exportToFile(\r\n          olFeatures,\r\n          observer,\r\n          format,\r\n          title,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n      }\r\n    };\r\n\r\n    return new Observable(doExport);\r\n  }\r\n\r\n  protected exportToFile(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const olFormat = new olformat[format]();\r\n    const featuresText = olFormat.writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const fileName = `${title}.${format.toLowerCase()}`;\r\n\r\n    downloadContent(featuresText, 'text/plain;charset=utf-8', fileName);\r\n    observer.complete();\r\n  }\r\n\r\n  private exportWithOgre(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: string,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const featuresText: string = new olformat.GeoJSON().writeFeatures(\r\n      olFeatures,\r\n      {\r\n        dataProjection: projectionOut,\r\n        featureProjection: projectionIn,\r\n        featureType: 'feature',\r\n        featureNS: 'http://example.com/feature'\r\n      }\r\n    );\r\n\r\n    const url = `${this.ogreUrl}/convertJson`;\r\n    const form = document.createElement('form');\r\n    form.style.display = 'none';\r\n    document.body.appendChild(form);\r\n    form.setAttribute('method', 'post');\r\n    form.setAttribute('target', '_blank');\r\n    form.setAttribute('action', url);\r\n\r\n    form.acceptCharset = 'UTF-8';\r\n    form.enctype = 'application/x-www-form-urlencoded; charset=utf-8;';\r\n\r\n    if (format === 'CSVsemicolon') {\r\n      const options = document.createElement('input');\r\n      options.setAttribute('type', 'hidden');\r\n      options.setAttribute('name', 'lco');\r\n      options.setAttribute('value', 'SEPARATOR=SEMICOLON');\r\n      form.appendChild(options);\r\n    }\r\n\r\n    const geojsonField = document.createElement('input');\r\n    geojsonField.setAttribute('type', 'hidden');\r\n    geojsonField.setAttribute('name', 'json');\r\n    geojsonField.setAttribute('value', featuresText);\r\n    form.appendChild(geojsonField);\r\n\r\n    const outputNameField = document.createElement('input');\r\n    let outputName =\r\n      format === 'Shapefile'\r\n        ? `${title}.zip`\r\n        : `${title}.${format.toLowerCase()}`;\r\n    if (format === 'CSVcomma' || format === 'CSVsemicolon') {\r\n      outputName = `${title}.csv`;\r\n    }\r\n    outputName = outputName.replace(' ', '_');\r\n    outputName = outputName.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n    outputNameField.setAttribute('type', 'hidden');\r\n    outputNameField.setAttribute('name', 'outputName');\r\n    outputNameField.setAttribute('value', outputName);\r\n    form.appendChild(outputNameField);\r\n\r\n    let ogreFormat = ExportService.ogreFormats[format];\r\n    if (format === 'CSVcomma' || format === 'CSVsemicolon') {\r\n      ogreFormat = 'CSV';\r\n    }\r\n    const outputFormatField = document.createElement('input');\r\n    outputFormatField.setAttribute('type', 'hidden');\r\n    outputFormatField.setAttribute('name', 'format');\r\n    outputFormatField.setAttribute('value', ogreFormat);\r\n    form.appendChild(outputFormatField);\r\n\r\n    form.submit();\r\n    document.body.removeChild(form);\r\n\r\n    observer.complete();\r\n  }\r\n\r\n  private nothingToExport(olFeatures: OlFeature[], format: string): boolean {\r\n    if (olFeatures.length === 0) {\r\n      return true;\r\n    }\r\n    if (format === 'GPX') {\r\n      const pointOrLine = olFeatures.find(olFeature => {\r\n        return (\r\n          ['Point', 'LineString', 'MultiLineString'].indexOf(olFeature.getGeometry().getType()) >=\r\n          0\r\n        );\r\n      });\r\n      return pointOrLine === undefined;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","export class ImportError extends Error {}\r\n\r\nexport class ImportInvalidFileError extends ImportError {\r\n  constructor() {\r\n    super('Invalid file');\r\n    Object.setPrototypeOf(this, ImportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportUnreadableFileError extends ImportError {\r\n  constructor() {\r\n      super('Failed to read file');\r\n      Object.setPrototypeOf(this, ImportUnreadableFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportNothingToImportError extends ImportError {\r\n  constructor() {\r\n      super('Nothing to import');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportSizeError extends ImportError {\r\n  constructor() {\r\n      super('File is too large');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportSRSError extends ImportError {\r\n  constructor() {\r\n      super('Invalid SRS definition');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n","import * as olStyle from 'ol/style';\r\n\r\nimport { MessageService, LanguageService, ConfigService } from '@igo2/core';\r\n\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { FeatureDataSourceOptions } from '../../datasource/shared/datasources/feature-datasource.interface';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { featureToOl, moveToOlFeatures } from '../../feature/shared/feature.utils';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { QueryableDataSourceOptions } from '../../query/shared/query.interfaces';\r\nimport { StyleService } from '../../layer/shared/style.service';\r\nimport { StyleByAttribute } from '../../layer/shared/vector-style.interface';\r\nimport { StyleListService } from '../style-list/style-list.service';\r\nimport { ClusterParam } from '../../layer/shared/clusterParam';\r\nimport { ClusterDataSource } from '../../datasource/shared/datasources/cluster-datasource';\r\nimport { ClusterDataSourceOptions } from '../../datasource/shared/datasources/cluster-datasource.interface';\r\n\r\nexport function addLayerAndFeaturesToMap(features: Feature[], map: IgoMap, layerTitle: string): VectorLayer {\r\n  const olFeatures = features.map((feature: Feature) => featureToOl(feature, map.projection));\r\n\r\n  const r = Math.floor(Math.random() * 255);\r\n  const g = Math.floor(Math.random() * 255);\r\n  const b = Math.floor(Math.random() * 255);\r\n  const stroke = new olStyle.Stroke({\r\n    color: [r, g, b, 1],\r\n    width: 2\r\n  });\r\n\r\n  const fill = new olStyle.Fill({\r\n    color: [r, g, b, 0.4]\r\n  });\r\n  const sourceOptions: FeatureDataSourceOptions & QueryableDataSourceOptions = {\r\n    type: 'vector',\r\n    queryable: true\r\n  };\r\n  const source = new FeatureDataSource(sourceOptions);\r\n  source.ol.addFeatures(olFeatures);\r\n  const layer = new VectorLayer({\r\n    title: layerTitle,\r\n    source,\r\n    style: new olStyle.Style({\r\n      stroke,\r\n      fill,\r\n      image: new olStyle.Circle({\r\n        radius: 5,\r\n        stroke,\r\n        fill\r\n      })\r\n    })\r\n  });\r\n  map.addLayer(layer);\r\n  moveToOlFeatures(map, olFeatures);\r\n\r\n  return layer;\r\n}\r\n\r\nexport function addLayerAndFeaturesStyledToMap(features: Feature[], map: IgoMap, layerTitle: string,\r\n                                               styleListService: StyleListService, styleService: StyleService): VectorLayer {\r\n  const olFeatures = features.map((feature: Feature) => featureToOl(feature, map.projection));\r\n  let style;\r\n  let distance: number;\r\n\r\n  if (styleListService.getStyleList(layerTitle.toString() + '.styleByAttribute')) {\r\n    const styleByAttribute: StyleByAttribute = styleListService.getStyleList(layerTitle.toString() + '.styleByAttribute');\r\n\r\n    style = feature => {\r\n      return styleService.createStyleByAttribute(\r\n        feature,\r\n        styleByAttribute\r\n      );\r\n    };\r\n\r\n  } else if (styleListService.getStyleList(layerTitle.toString() + '.clusterStyle')) {\r\n    const clusterParam: ClusterParam = styleListService.getStyleList(layerTitle.toString() + '.clusterParam');\r\n    distance = styleListService.getStyleList(layerTitle.toString() + '.distance');\r\n\r\n    const baseStyle = styleService.createStyle(styleListService.getStyleList(layerTitle.toString() + '.clusterStyle'));\r\n\r\n    style = feature => {\r\n      return styleService.createClusterStyle(\r\n        feature,\r\n        clusterParam,\r\n        baseStyle\r\n      );\r\n    };\r\n\r\n  } else if (styleListService.getStyleList(layerTitle.toString() + '.style')) {\r\n\r\n    style = styleService.createStyle(styleListService.getStyleList(layerTitle.toString() + '.style'));\r\n\r\n  } else if (styleListService.getStyleList('default.clusterStyle') && features[0].geometry.type === 'Point') {\r\n      const clusterParam: ClusterParam = styleListService.getStyleList('default.clusterParam');\r\n      distance = styleListService.getStyleList('default.distance');\r\n\r\n      const baseStyle = styleService.createStyle(styleListService.getStyleList('default.clusterStyle'));\r\n\r\n      style = feature => {\r\n        return styleService.createClusterStyle(\r\n          feature,\r\n          clusterParam,\r\n          baseStyle\r\n        );\r\n      };\r\n  } else {\r\n    style = styleService.createStyle(styleListService.getStyleList('default.style'));\r\n  }\r\n\r\n  let source;\r\n  if (styleListService.getStyleList(layerTitle.toString() + '.clusterStyle')) {\r\n    const sourceOptions: ClusterDataSourceOptions & QueryableDataSourceOptions = {\r\n      distance,\r\n      type: 'cluster',\r\n      queryable: true\r\n    };\r\n    source = new ClusterDataSource(sourceOptions);\r\n    source.ol.source.addFeatures(olFeatures);\r\n  } else if (styleListService.getStyleList(layerTitle.toString())) {\r\n    const sourceOptions: FeatureDataSourceOptions & QueryableDataSourceOptions = {\r\n      type: 'vector',\r\n      queryable: true\r\n    };\r\n    source = new FeatureDataSource(sourceOptions);\r\n    source.ol.addFeatures(olFeatures);\r\n  } else if (styleListService.getStyleList('default.clusterStyle') && features[0].geometry.type === 'Point') {\r\n    const sourceOptions: ClusterDataSourceOptions & QueryableDataSourceOptions = {\r\n      distance,\r\n      type: 'cluster',\r\n      queryable: true\r\n    };\r\n    source = new ClusterDataSource(sourceOptions);\r\n    source.ol.source.addFeatures(olFeatures);\r\n  } else {\r\n    const sourceOptions: FeatureDataSourceOptions & QueryableDataSourceOptions = {\r\n      type: 'vector',\r\n      queryable: true\r\n    };\r\n    source = new FeatureDataSource(sourceOptions);\r\n    source.ol.addFeatures(olFeatures);\r\n  }\r\n\r\n  const layer = new VectorLayer({\r\n    title: layerTitle,\r\n    source,\r\n    style\r\n  });\r\n  map.addLayer(layer);\r\n  moveToOlFeatures(map, olFeatures);\r\n\r\n  return layer;\r\n}\r\n\r\nexport function handleFileImportSuccess(\r\n  file: File,\r\n  features: Feature[],\r\n  map: IgoMap,\r\n  messageService: MessageService,\r\n  languageService: LanguageService,\r\n  styleListService?: StyleListService,\r\n  styleService?: StyleService\r\n) {\r\n  if (features.length === 0) {\r\n    handleNothingToImportError(file, messageService, languageService);\r\n    return;\r\n  }\r\n\r\n  const layerTitle = computeLayerTitleFromFile(file);\r\n\r\n  if (!styleListService) {\r\n    addLayerAndFeaturesToMap(features, map, layerTitle);\r\n  } else {\r\n    addLayerAndFeaturesStyledToMap(features, map, layerTitle, styleListService, styleService);\r\n  }\r\n\r\n  const translate = languageService.translate;\r\n  const messageTitle = translate.instant('igo.geo.dropGeoFile.success.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.success.text', {\r\n      value: layerTitle\r\n  });\r\n  messageService.success(message, messageTitle);\r\n}\r\n\r\nexport function handleFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService,\r\n  sizeMb?: number\r\n) {\r\n  sizeMb = sizeMb ? sizeMb : 30;\r\n  const errMapping = {\r\n    'Invalid file': handleInvalidFileImportError,\r\n    'File is too large': handleSizeFileImportError,\r\n    'Failed to read file': handleUnreadbleFileImportError,\r\n    'Invalid SRS definition': handleSRSImportError\r\n  };\r\n  errMapping[error.message](file, error, messageService, languageService, sizeMb);\r\n}\r\n\r\nexport function handleInvalidFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.invalid.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.invalid.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleUnreadbleFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.unreadable.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.unreadable.text', {\r\n      value: file.name\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleSizeFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService,\r\n  sizeMb: number\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.tooLarge.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.tooLarge.text', {\r\n      value: file.name,\r\n      size: sizeMb\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToImportError(\r\n  file: File,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.empty.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.empty.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleSRSImportError(\r\n  file: File,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.invalidSRS.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.invalidSRS.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function getFileExtension(file: File): string {\r\n  return file.name.split('.').pop().toLowerCase();\r\n}\r\n\r\nexport function computeLayerTitleFromFile(file: File): string {\r\n  return file.name.substr(0, file.name.lastIndexOf('.'));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport {\r\n  ImportInvalidFileError,\r\n  ImportUnreadableFileError,\r\n  ImportSizeError,\r\n  ImportSRSError\r\n} from './import.errors';\r\nimport { computeLayerTitleFromFile, getFileExtension } from './import.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImportService {\r\n  static allowedMimeTypes = [\r\n    'application/gml+xml',\r\n    'application/vnd.google-earth.kml+xml',\r\n    'application/gpx+xml',\r\n    'application/json'\r\n  ];\r\n\r\n  static allowedZipMimeTypes = [\r\n    'application/zip',\r\n    'application/x-zip-compressed',\r\n    'application/x-zip'\r\n  ];\r\n\r\n  static allowedExtensions = ['geojson', 'kml', 'gpx', 'json', 'gml'];\r\n\r\n  private ogreUrl: string;\r\n  private clientSideFileSizeMax: number;\r\n\r\n  constructor(private http: HttpClient, private config: ConfigService) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n    const configFileSizeMb = this.config.getConfig('importExport.clientSideFileSizeMaxMb');\r\n    this.clientSideFileSizeMax = (configFileSizeMb ? configFileSizeMb : 30) *  Math.pow(1024, 2);\r\n  }\r\n\r\n  import(\r\n    file: File,\r\n    projectionIn = 'EPSG:4326',\r\n    projectionOut = 'EPSG:4326'\r\n  ): Observable<Feature[]> {\r\n    return this.importAsync(file, projectionIn, projectionOut);\r\n  }\r\n\r\n  private getFileImporter(\r\n    file: File\r\n  ): (\r\n    file: File,\r\n    observer: Observer<Feature[]>,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) => void {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n    const allowedMimeTypes = [\r\n      ...ImportService.allowedMimeTypes,\r\n      ...ImportService.allowedZipMimeTypes\r\n    ];\r\n    const allowedExtensions = ImportService.allowedExtensions;\r\n\r\n    if (\r\n      allowedMimeTypes.indexOf(mimeType) < 0 &&\r\n      allowedExtensions.indexOf(extension) < 0\r\n    ) {\r\n      return undefined;\r\n    } else if (\r\n      mimeType === 'application/json' ||\r\n      ['json', 'geojson', 'kml', 'gpx'].indexOf(extension) >= 0\r\n    ) {\r\n      return this.importFile;\r\n    } else if (this.ogreUrl !== undefined) {\r\n      return this.importFileWithOgre;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private importAsync(\r\n    file: File,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Observable<Feature[]> {\r\n    const doImport = (observer: Observer<Feature[]>) => {\r\n      if (file.size >= this.clientSideFileSizeMax) {\r\n        observer.error(new ImportSizeError());\r\n        return;\r\n      }\r\n      const importer = this.getFileImporter(file);\r\n      if (importer === undefined) {\r\n        observer.error(new ImportInvalidFileError());\r\n        return;\r\n      }\r\n\r\n      importer.call(this, file, observer, projectionIn, projectionOut);\r\n    };\r\n\r\n    return new Observable(doImport);\r\n  }\r\n\r\n  private importFile(\r\n    file: File,\r\n    observer: Observer<Feature[]>,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event: any) => {\r\n      try {\r\n        const features = this.parseFeaturesFromFile(\r\n          file,\r\n          event.target.result,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n        observer.next(features);\r\n      } catch (e) {\r\n        observer.error(new ImportUnreadableFileError());\r\n      }\r\n\r\n      observer.complete();\r\n    };\r\n\r\n    reader.onerror = evt => {\r\n      observer.error(new ImportUnreadableFileError());\r\n    };\r\n\r\n    reader.readAsText(file, 'UTF-8');\r\n  }\r\n\r\n  private importFileWithOgre(\r\n    file: File,\r\n    observer: Observer<Feature[]>,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const url = `${this.ogreUrl}/convert`;\r\n    const formData = new FormData();\r\n    formData.append('upload', file);\r\n    formData.append('sourceSrs', projectionIn);\r\n    formData.append('targetSrs', projectionOut);\r\n    formData.append('formatOutput', 'GEOJSON');\r\n    formData.append('skipFailures', '');\r\n\r\n    this.http.post(url, formData, { headers: new HttpHeaders() }).subscribe(\r\n      (response: { errors?: string[] } | object | null) => {\r\n        if (response === null) {\r\n          observer.error(new ImportUnreadableFileError());\r\n          return;\r\n        }\r\n\r\n        const errors = (response as any).errors || [];\r\n        if (errors.length > 0) {\r\n          observer.error(new ImportUnreadableFileError());\r\n        } else {\r\n          const features = this.parseFeaturesFromGeoJSON(\r\n            file,\r\n            response,\r\n            projectionOut\r\n          );\r\n          observer.next(features);\r\n          observer.complete();\r\n        }\r\n      },\r\n      (error: any) => {\r\n        error.error.caught = true;\r\n        const errMsg = error.error.msg || '';\r\n        if (errMsg === 'No valid files found') {\r\n          observer.error(new ImportInvalidFileError());\r\n        } else if (\r\n          errMsg.startWith('ERROR 1: Failed to process SRS definition')\r\n        ) {\r\n          observer.error(new ImportSRSError());\r\n        } else {\r\n          observer.error(new ImportUnreadableFileError());\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  private parseFeaturesFromFile(\r\n    file: File,\r\n    data: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Feature[] {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n\r\n    const GeoJSON = new olformat.GeoJSON();\r\n\r\n    let format;\r\n    if (mimeType === 'application/vnd.google-earth.kml+xml') {\r\n      format = new olformat.KML();\r\n    } else if (mimeType === 'application/gml+xml') {\r\n      format = new olformat.GML();\r\n    } else if (mimeType === 'application/gpx+xml') {\r\n      format = new olformat.GPX();\r\n    } else {\r\n      switch (extension) {\r\n        case 'kml':\r\n          format = new olformat.KML();\r\n          break;\r\n        case 'gpx':\r\n          format = new olformat.GPX();\r\n          break;\r\n        case 'gml':\r\n          format = new olformat.GML();\r\n          break;\r\n        default:\r\n          format = GeoJSON;\r\n          break;\r\n      }\r\n    }\r\n\r\n    const olFeatures = format.readFeatures(data, {\r\n      dataProjection: projectionIn,\r\n      featureProjection: projectionOut\r\n    });\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(GeoJSON.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n\r\n  private parseFeaturesFromGeoJSON(\r\n    file: File,\r\n    data: object,\r\n    projectionOut: string\r\n  ): Feature[] {\r\n    const olFormat = new olformat.GeoJSON();\r\n    const olFeatures = olFormat.readFeatures(data);\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(olFormat.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { StyleListOptions } from './style-list.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleListService {\r\n  private styleList: object = {};\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  /**\r\n   * Use to get the data found in styleList file\r\n   */\r\n  public getStyleList(key: string): any {\r\n    return ObjectUtils.resolve(this.styleList, key);\r\n  }\r\n\r\n  /**\r\n   * This method loads \"[path]\" to get all styleList's variables\r\n   */\r\n  public load(options: StyleListOptions) {\r\n    const baseStyleList = options.default || {};\r\n    if (!options.path) {\r\n      this.styleList = baseStyleList;\r\n      return true;\r\n    }\r\n\r\n    const http = this.injector.get(HttpClient);\r\n\r\n    return new Promise((resolve, _reject) => {\r\n      http\r\n        .get(options.path)\r\n        .pipe(\r\n          catchError((error: any): any => {\r\n            console.log(`StyleList file ${options.path} could not be read`);\r\n            resolve(true);\r\n            return throwError(error.error || 'Server error');\r\n          })\r\n        )\r\n        .subscribe(styleListResponse => {\r\n          this.styleList = ObjectUtils.mergeDeep(baseStyleList, styleListResponse);\r\n          resolve(true);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService, ConfigService } from '@igo2/core';\r\nimport { strEnum } from '@igo2/utils';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { ClusterDataSource } from '../../datasource/shared/datasources/cluster-datasource';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { AnyLayer } from '../../layer/shared/layers/any-layer';\r\nimport { DataSourceOptions } from '../../datasource/shared/datasources/datasource.interface';\r\n\r\nimport {\r\n  handleFileExportError,\r\n  handleFileExportSuccess\r\n} from '../shared/export.utils';\r\nimport { ExportOptions } from '../shared/export.interface';\r\nimport { ExportFormat } from '../shared/export.type';\r\nimport { ExportService } from '../shared/export.service';\r\nimport { ImportService } from '../shared/import.service';\r\nimport {\r\n  handleFileImportSuccess,\r\n  handleFileImportError\r\n} from '../shared/import.utils';\r\nimport { StyleService } from '../../layer/shared/style.service';\r\nimport { StyleListService } from '../style-list/style-list.service';\r\nimport { MatTabChangeEvent } from '@angular/material';\r\nimport { skipWhile } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'igo-import-export',\r\n  templateUrl: './import-export.component.html',\r\n  styleUrls: ['./import-export.component.scss']\r\n})\r\nexport class ImportExportComponent implements OnDestroy, OnInit {\r\n  public form: FormGroup;\r\n  public formats$ = new BehaviorSubject(undefined);\r\n  public exportableLayers$: BehaviorSubject<AnyLayer[]> = new BehaviorSubject(\r\n    []\r\n  );\r\n  public inputProj: string = 'EPSG:4326';\r\n  public loading$ = new BehaviorSubject(false);\r\n  public forceNaming = false;\r\n\r\n  private layers$$: Subscription;\r\n  private exportableLayers$$: Subscription;\r\n  private formats$$: Subscription;\r\n  private formLayer$$: Subscription;\r\n  private exportOptions$$: Subscription;\r\n\r\n  private espgCodeRegex = new RegExp('^\\\\d{4,6}');\r\n  private clientSideFileSizeMax: number;\r\n  public activeImportExport: string = 'import';\r\n  public fileSizeMb: number;\r\n\r\n  private previousLayerSpecs$: BehaviorSubject<\r\n    {\r\n      id: string;\r\n      visible: boolean;\r\n      opacity: number;\r\n      queryable: boolean;\r\n    }[]\r\n  > = new BehaviorSubject(undefined);\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() selectedIndex: number = 0;\r\n\r\n  @Output() selectedTabIndex = new EventEmitter<number>();\r\n\r\n  @Input() exportOptions$: BehaviorSubject<ExportOptions> = new BehaviorSubject(\r\n    undefined\r\n  );\r\n\r\n  @Output() exportOptionsChange = new EventEmitter<ExportOptions>();\r\n\r\n  constructor(\r\n    private importService: ImportService,\r\n    private exportService: ExportService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private styleListService: StyleListService,\r\n    private styleService: StyleService,\r\n    private formBuilder: FormBuilder,\r\n    private config: ConfigService\r\n  ) {\r\n    this.loadConfig();\r\n    this.buildForm();\r\n    console.log(this);\r\n    console.log(this.form);\r\n    console.log(this.form);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$.subscribe((layers) => {\r\n      this.exportableLayers$.next(\r\n        layers.filter((layer: Layer) => {\r\n          return (\r\n            (layer instanceof VectorLayer && layer.exportable === true) ||\r\n            (layer.dataSource.options.download &&\r\n              layer.dataSource.options.download.url)\r\n          );\r\n        }) as AnyLayer[]\r\n      );\r\n    });\r\n    const configFileSizeMb = this.config.getConfig(\r\n      'importExport.clientSideFileSizeMaxMb'\r\n    );\r\n    this.clientSideFileSizeMax =\r\n      (configFileSizeMb ? configFileSizeMb : 30) * Math.pow(1024, 2);\r\n    this.fileSizeMb = this.clientSideFileSizeMax / Math.pow(1024, 2);\r\n\r\n    this.exportOptions$$ = this.exportOptions$\r\n      .pipe(skipWhile((exportOptions) => !exportOptions))\r\n      .subscribe((exportOptions) => {\r\n        this.form.patchValue(exportOptions, { emitEvent: true });\r\n        if (exportOptions.layer) {\r\n          this.computeFormats(\r\n            exportOptions.layer.map((l) => this.map.getLayerById(l))\r\n          );\r\n        }\r\n      });\r\n\r\n    this.formLayer$$ = this.form\r\n      .get('layer')\r\n      .valueChanges.subscribe((layerId) => {\r\n        this.handlePreviousLayerSpecs();\r\n        const layers = layerId.map((l) => this.map.getLayerById(l));\r\n        this.computeFormats(layers);\r\n\r\n        if (\r\n          Object.keys(this.formats$.value).indexOf(this.form.value.format) ===\r\n          -1\r\n        ) {\r\n          this.form.patchValue({ format: undefined });\r\n        }\r\n\r\n        this.loading$.next(true);\r\n        const previousSpecs: {\r\n          id: string;\r\n          visible: boolean;\r\n          opacity: number;\r\n          queryable: boolean;\r\n        }[] = [];\r\n        layers.forEach((layer) => {\r\n          if (\r\n            layer instanceof VectorLayer &&\r\n            layer.dataSource.ol.getFeatures().length === 0\r\n          ) {\r\n            previousSpecs.push({\r\n              id: layer.id,\r\n              visible: layer.visible,\r\n              opacity: layer.opacity,\r\n              queryable: (layer as any).queryable\r\n            });\r\n            layer.opacity = 0;\r\n            layer.visible = true;\r\n          }\r\n        });\r\n\r\n        this.previousLayerSpecs$.next(previousSpecs);\r\n        setTimeout(() => {\r\n          this.loading$.next(false);\r\n        }, 500);\r\n      });\r\n\r\n    this.formats$$ = this.formats$\r\n      .pipe(skipWhile((formats) => !formats))\r\n      .subscribe((formats) => {\r\n        if (Object.keys(formats).length === 1) {\r\n          this.form.patchValue({ format: formats[Object.keys(formats)[0]] });\r\n        }\r\n      });\r\n\r\n    this.exportableLayers$$ = this.exportableLayers$\r\n      .pipe(skipWhile((layers) => !layers))\r\n      .subscribe((layers) => {\r\n        if (layers.length === 1) {\r\n          this.form.patchValue({ layer: layers[0].id });\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n    this.exportableLayers$$.unsubscribe();\r\n    this.formats$$.unsubscribe();\r\n    this.formLayer$$.unsubscribe();\r\n    if (this.exportOptions$$) {\r\n      this.exportOptions$$.unsubscribe();\r\n    }\r\n    this.exportOptionsChange.emit(this.form.value);\r\n    this.handlePreviousLayerSpecs();\r\n  }\r\n\r\n  private handlePreviousLayerSpecs() {\r\n    const previousSpecs = this.previousLayerSpecs$.value;\r\n    if (previousSpecs && previousSpecs.length) {\r\n      previousSpecs.forEach((specs) => {\r\n        const previousLayer = this.map.getLayerById(specs.id);\r\n        previousLayer.visible = specs.visible;\r\n        previousLayer.opacity = specs.opacity;\r\n        (previousLayer as any).queryable = specs.queryable;\r\n      });\r\n    }\r\n    this.previousLayerSpecs$.next(undefined);\r\n  }\r\n\r\n  importFiles(files: File[]) {\r\n    let inputProj = this.inputProj;\r\n    if (this.espgCodeRegex.test(inputProj)) {\r\n      inputProj = `EPSG:${inputProj}`;\r\n    }\r\n\r\n    this.loading$.next(true);\r\n    for (const file of files) {\r\n      this.importService.import(file, inputProj).subscribe(\r\n        (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n        (error: Error) => this.onFileImportError(file, error),\r\n        () => {\r\n          this.loading$.next(false);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleExportFormSubmit(data: ExportOptions) {\r\n    this.loading$.next(true);\r\n    data.layer.forEach((layer) => {\r\n      const lay = this.map.getLayerById(layer);\r\n      let filename = lay.title;\r\n      if (data.name !== undefined) {\r\n        filename = data.name;\r\n      }\r\n      const dSOptions: DataSourceOptions = lay.dataSource.options;\r\n      if (\r\n        data.format === ExportFormat.URL &&\r\n        dSOptions.download &&\r\n        dSOptions.download.url\r\n      ) {\r\n        setTimeout(() => {\r\n          // better look an feel\r\n          window.open(dSOptions.download.url, '_blank');\r\n          this.loading$.next(false);\r\n        }, 500);\r\n        return;\r\n      }\r\n\r\n      let olFeatures;\r\n      if (data.featureInMapExtent) {\r\n        olFeatures = lay.dataSource.ol.getFeaturesInExtent(\r\n          lay.map.viewController.getExtent()\r\n        );\r\n      } else {\r\n        olFeatures = lay.dataSource.ol.getFeatures();\r\n      }\r\n      if (lay.dataSource instanceof ClusterDataSource) {\r\n        olFeatures = olFeatures.flatMap((cluster: any) =>\r\n          cluster.get('features')\r\n        );\r\n      }\r\n\r\n      this.exportService\r\n        .export(olFeatures, data.format, filename, this.map.projection)\r\n        .subscribe(\r\n          () => {},\r\n          (error: Error) => this.onFileExportError(error),\r\n          () => {\r\n            this.onFileExportSuccess();\r\n            this.loading$.next(false);\r\n          }\r\n        );\r\n    });\r\n  }\r\n\r\n  private buildForm() {\r\n    if (this.forceNaming) {\r\n      this.form = this.formBuilder.group({\r\n        format: ['', [Validators.required]],\r\n        layer: ['', [Validators.required]],\r\n        featureInMapExtent: [false, [Validators.required]],\r\n        name: ['', [Validators.required]]\r\n      });\r\n    } else {\r\n      this.form = this.formBuilder.group({\r\n        format: ['', [Validators.required]],\r\n        layer: ['', [Validators.required]],\r\n        featureInMapExtent: [false, [Validators.required]]\r\n      });\r\n    }\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    if (!this.config.getConfig('importWithStyle')) {\r\n      handleFileImportSuccess(\r\n        file,\r\n        features,\r\n        this.map,\r\n        this.messageService,\r\n        this.languageService\r\n      );\r\n    } else {\r\n      handleFileImportSuccess(\r\n        file,\r\n        features,\r\n        this.map,\r\n        this.messageService,\r\n        this.languageService,\r\n        this.styleListService,\r\n        this.styleService\r\n      );\r\n    }\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    this.loading$.next(false);\r\n    handleFileImportError(\r\n      file,\r\n      error,\r\n      this.messageService,\r\n      this.languageService,\r\n      this.fileSizeMb\r\n    );\r\n  }\r\n\r\n  private onFileExportError(error: Error) {\r\n    this.loading$.next(false);\r\n    handleFileExportError(error, this.messageService, this.languageService);\r\n  }\r\n\r\n  private loadConfig() {\r\n    if (this.config.getConfig('importExport.forceNaming') !== undefined) {\r\n      this.forceNaming = this.config.getConfig('importExport.forceNaming');\r\n    }\r\n    this.computeFormats();\r\n  }\r\n\r\n  private computeFormats(layers?: AnyLayer[]) {\r\n    if (layers && layers.length) {\r\n      const formatsType = {\r\n        onlyUrl: false,\r\n        onlyVector: false,\r\n        vectorAndUrl: false\r\n      };\r\n      layers.forEach((layer) => {\r\n        if (!layer) {\r\n          return;\r\n        }\r\n        if (\r\n          !(layer instanceof VectorLayer) &&\r\n          layer.dataSource.options.download &&\r\n          layer.dataSource.options.download.url\r\n        ) {\r\n          formatsType.onlyUrl = true;\r\n        } else if (\r\n          layer.dataSource.options.download &&\r\n          layer.dataSource.options.download.url\r\n        ) {\r\n          formatsType.vectorAndUrl = true;\r\n        } else if (layer instanceof VectorLayer) {\r\n          formatsType.onlyVector = true;\r\n        }\r\n      });\r\n\r\n      if (formatsType.onlyUrl === true && formatsType.onlyVector === false) {\r\n        this.formats$.next(strEnum(['URL']));\r\n      } else if (\r\n        formatsType.onlyVector === true &&\r\n        formatsType.onlyUrl === false\r\n      ) {\r\n        this.computeFormats(); // reset\r\n        if (ExportFormat.URL in this.formats$.value) {\r\n          const keys = Object.keys(this.formats$.value).filter(\r\n            (key) => key !== 'URL'\r\n          );\r\n          this.formats$.next(strEnum(keys));\r\n        }\r\n      } else if (\r\n        formatsType.vectorAndUrl === true &&\r\n        formatsType.onlyUrl === false &&\r\n        formatsType.onlyVector === false\r\n      ) {\r\n        this.computeFormats(); // reset\r\n        if (!(ExportFormat.URL in this.formats$.value)) {\r\n          const keys = Object.keys(this.formats$.value);\r\n          keys.push('URL');\r\n          this.formats$.next(strEnum(keys));\r\n        }\r\n      } else {\r\n        this.formats$.next([]);\r\n        this.messageService.alert(\r\n          this.languageService.translate.instant(\r\n            'igo.geo.export.noFormat.text'\r\n          ),\r\n          this.languageService.translate.instant(\r\n            'igo.geo.export.noFormat.title'\r\n          )\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.config.getConfig('importExport.formats') !== undefined) {\r\n      const validatedListFormat = this.validateListFormat(\r\n        this.config.getConfig('importExport.formats')\r\n      );\r\n      this.formats$.next(strEnum(validatedListFormat));\r\n    } else {\r\n      this.formats$.next(ExportFormat);\r\n    }\r\n  }\r\n\r\n  private validateListFormat(formats: string[]): string[] {\r\n    return formats\r\n      .filter((format) => {\r\n        if (\r\n          format.toUpperCase() === ExportFormat.CSVcomma.toUpperCase() ||\r\n          format.toUpperCase() === ExportFormat.CSVsemicolon.toUpperCase() ||\r\n          format.toUpperCase() === ExportFormat.GML.toUpperCase() ||\r\n          format.toUpperCase() === ExportFormat.GPX.toUpperCase() ||\r\n          format.toUpperCase() === ExportFormat.GeoJSON.toUpperCase() ||\r\n          format.toUpperCase() === ExportFormat.KML.toUpperCase() ||\r\n          format.toUpperCase() === ExportFormat.Shapefile.toUpperCase() ||\r\n          format.toUpperCase() === ExportFormat.URL.toUpperCase()\r\n        ) {\r\n          return format;\r\n        }\r\n      })\r\n      .map((format) => {\r\n        if (format.toUpperCase() === ExportFormat.CSVcomma.toUpperCase()) {\r\n          format = ExportFormat.CSVcomma;\r\n          return format;\r\n        }\r\n        if (format.toUpperCase() === ExportFormat.CSVsemicolon.toUpperCase()) {\r\n          format = ExportFormat.CSVsemicolon;\r\n          return format;\r\n        }\r\n        if (format.toUpperCase() === ExportFormat.GML.toUpperCase()) {\r\n          format = ExportFormat.GML;\r\n          return format;\r\n        }\r\n        if (format.toUpperCase() === ExportFormat.GPX.toUpperCase()) {\r\n          format = ExportFormat.GPX;\r\n          return format;\r\n        }\r\n        if (format.toUpperCase() === ExportFormat.GeoJSON.toUpperCase()) {\r\n          format = ExportFormat.GeoJSON;\r\n          return format;\r\n        }\r\n        if (format.toUpperCase() === ExportFormat.KML.toUpperCase()) {\r\n          format = ExportFormat.KML;\r\n          return format;\r\n        }\r\n        if (format.toUpperCase() === ExportFormat.Shapefile.toUpperCase()) {\r\n          format = ExportFormat.Shapefile;\r\n          return format;\r\n        }\r\n\r\n        if (format.toUpperCase() === ExportFormat.URL.toUpperCase()) {\r\n          format = ExportFormat.URL;\r\n          return format;\r\n        }\r\n      });\r\n  }\r\n\r\n  public tabChanged(tab: MatTabChangeEvent) {\r\n    this.selectedTabIndex.emit(tab.index);\r\n  }\r\n\r\n  private onFileExportSuccess() {\r\n    handleFileExportSuccess(this.messageService, this.languageService);\r\n  }\r\n\r\n  onImportExportChange(event) {\r\n    this.activeImportExport = event.value;\r\n  }\r\n}\r\n","import { Directive, HostListener, EventEmitter, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService, ConfigService } from '@igo2/core';\r\nimport { DragAndDropDirective } from '@igo2/common';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { ImportService } from './import.service';\r\nimport { handleFileImportSuccess, handleFileImportError } from '../shared/import.utils';\r\nimport { StyleService } from '../../layer/shared/style.service';\r\nimport { StyleListService } from '../style-list/style-list.service';\r\n\r\n@Directive({\r\n  selector: '[igoDropGeoFile]'\r\n})\r\nexport class DropGeoFileDirective extends DragAndDropDirective implements OnInit, OnDestroy {\r\n\r\n  protected filesDropped: EventEmitter<File[]> = new EventEmitter();\r\n  protected filesInvalid: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  private filesDropped$$: Subscription;\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    private component: MapBrowserComponent,\r\n    private importService: ImportService,\r\n    private languageService: LanguageService,\r\n    private styleListService: StyleListService,\r\n    private styleService: StyleService,\r\n    private config: ConfigService,\r\n    private messageService: MessageService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filesDropped$$ = this.filesDropped.subscribe((files: File[]) => {\r\n      this.onFilesDropped(files);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.filesDropped$$.unsubscribe();\r\n  }\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(evt) {\r\n    super.onDragOver(evt);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(evt) {\r\n    super.onDragLeave(evt);\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(evt) {\r\n    super.onDrop(evt);\r\n  }\r\n\r\n  private onFilesDropped(files: File[]) {\r\n    for (const file of files) {\r\n      this.importService\r\n        .import(file)\r\n        .subscribe(\r\n          (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n          (error: Error) => this.onFileImportError(file, error)\r\n        );\r\n    }\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    if (!this.config.getConfig('importWithStyle')) {\r\n      handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);\r\n    } else {\r\n      handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService,\r\n                               this.styleListService, this.styleService);\r\n    }\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    handleFileImportError(file, error, this.messageService, this.languageService, this.config.getConfig('importExport.clientSideFileSizeMaxMb'));\r\n  }\r\n}\r\n","import { APP_INITIALIZER, InjectionToken } from '@angular/core';\r\n\r\nimport { StyleListService } from './style-list.service';\r\nimport { StyleListOptions } from './style-list.interface';\r\n\r\nexport let STYLELIST_OPTIONS = new InjectionToken<StyleListOptions>('styleListOptions');\r\n\r\nexport function provideStyleListOptions(options: StyleListOptions) {\r\n  return {\r\n    provide: STYLELIST_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\nexport function styleListFactory(\r\n  styleListService: StyleListService,\r\n  options: StyleListOptions\r\n) {\r\n  return () => styleListService.load(options);\r\n}\r\n\r\nexport function provideStyleListLoader() {\r\n  return {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: styleListFactory,\r\n    multi: true,\r\n    deps: [StyleListService, STYLELIST_OPTIONS]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { provideStyleListOptions, provideStyleListLoader } from './style-list.provider';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoStyleListModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoStyleListModule,\r\n      providers: [provideStyleListOptions({}), provideStyleListLoader()]\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatButtonModule,\r\n  MatTabsModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSlideToggleModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatButtonToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule, IgoDrapDropModule, IgoSpinnerModule } from '@igo2/common';\r\n\r\nimport { ExportButtonComponent } from './export-button/export-button.component';\r\nimport { ImportExportComponent } from './import-export/import-export.component';\r\nimport { DropGeoFileDirective } from './shared/drop-geo-file.directive';\r\nimport { IgoStyleListModule } from './style-list/style-list.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoSpinnerModule,\r\n    IgoKeyValueModule,\r\n    IgoDrapDropModule,\r\n    IgoStyleListModule.forRoot()\r\n  ],\r\n  exports: [ImportExportComponent, DropGeoFileDirective, IgoStyleListModule, ExportButtonComponent],\r\n  declarations: [ImportExportComponent, DropGeoFileDirective, ExportButtonComponent]\r\n})\r\nexport class IgoImportExportModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoImportExportModule\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoConfirmDialogModule } from '@igo2/common';\r\n\r\nimport { MapBrowserComponent } from './map-browser/map-browser.component';\r\nimport { ZoomButtonComponent } from './zoom-button/zoom-button.component';\r\nimport { GeolocateButtonComponent } from './geolocate-button/geolocate-button.component';\r\nimport { RotationButtonComponent } from './rotation-button/rotation-button.component';\r\nimport { BaseLayersSwitcherComponent } from './baselayers-switcher/baselayers-switcher.component';\r\nimport { MiniBaseMapComponent } from './baselayers-switcher/mini-basemap.component';\r\nimport { MapOfflineDirective } from './shared/mapOffline.directive';\r\nimport { OfflineButtonComponent } from './offline-button/offline-button.component';\r\nimport { PointerPositionDirective } from './shared/map-pointer-position.directive';\r\nimport { PointerPositionByKeyDirective } from './shared/map-pointer-position-by-key.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoLanguageModule,\r\n    IgoConfirmDialogModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule\r\n  ],\r\n  exports: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapOfflineDirective,\r\n    OfflineButtonComponent,\r\n    PointerPositionDirective,\r\n    PointerPositionByKeyDirective\r\n  ],\r\n  declarations: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapOfflineDirective,\r\n    OfflineButtonComponent,\r\n    PointerPositionDirective,\r\n    PointerPositionByKeyDirective\r\n  ]\r\n})\r\nexport class IgoMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit\r\n} from '../shared/measure.enum';\r\nimport { computeBestAreaUnit, computeBestLengthUnit } from '../shared/measure.utils';\r\n\r\n/**\r\n * Measurer item\r\n */\r\n@Component({\r\n  selector: 'igo-measurer-item',\r\n  templateUrl: './measurer-item.component.html',\r\n  styleUrls: ['./measurer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerItemComponent implements OnDestroy {\r\n\r\n  /**\r\n   * Measure observable\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<number> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the measure observable when the auto mode is on\r\n   * @internal\r\n   */\r\n  public measure$$: Subscription;\r\n\r\n  /**\r\n   * Measure type\r\n   */\r\n  @Input() measureType: MeasureType;\r\n\r\n  /**\r\n   * Measure unit\r\n   */\r\n  @Input() measureUnit: MeasureAreaUnit | MeasureLengthUnit;\r\n\r\n  /**\r\n   * Measure\r\n   */\r\n  @Input()\r\n  set measure(value: number) {\r\n    this.measure$.next(value);\r\n  }\r\n  get measure(): number { return this.measure$.value; }\r\n\r\n  /**\r\n   * Whther measure units should be automatically determined\r\n   */\r\n  @Input()\r\n  set auto(value: boolean) { this.toggleAutoUnit(value); }\r\n  get auto(): boolean { return this._auto; }\r\n  private _auto: boolean = false;\r\n\r\n  /**\r\n   * Placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Event emitted when the measure unit changes\r\n   */\r\n  @Output() measureUnitChange = new EventEmitter<MeasureAreaUnit | MeasureLengthUnit>();\r\n\r\n  /**\r\n   * Available measure units for the measure type given\r\n   * @internal\r\n   */\r\n  get measureUnits(): string[] {\r\n    if (this.measureType === MeasureType.Area) {\r\n      return Object.values(MeasureAreaUnit);\r\n    }\r\n    return Object.values(MeasureLengthUnit);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Toggle the auto unit off\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.toggleAutoUnit(false);\r\n  }\r\n\r\n  /**\r\n   * Set the measure unit\r\n   * @internal\r\n   */\r\n  onMeasureUnitChange(unit: MeasureAreaUnit | MeasureLengthUnit) {\r\n    this.measureUnit = unit;\r\n    this.measureUnitChange.emit(unit);\r\n  }\r\n\r\n  private toggleAutoUnit(toggle: boolean) {\r\n    if (this.measure$$ !== undefined) {\r\n      this.measure$$.unsubscribe();\r\n    }\r\n    if (toggle === true) {\r\n      this.measure$$ = this.measure$.subscribe((measure: number) => {\r\n        this.computeBestMeasureUnit(measure);\r\n      });\r\n    }\r\n    this._auto = toggle;\r\n  }\r\n\r\n  private computeBestMeasureUnit(measure: number) {\r\n    let measureUnit = this.measureUnit;\r\n    if (this.measureType === MeasureType.Area) {\r\n      measureUnit = computeBestAreaUnit(measure);\r\n    } else if (this.measureType === MeasureType.Length) {\r\n      measureUnit = computeBestLengthUnit(measure);\r\n    }\r\n    if (measureUnit !== this.measureUnit) {\r\n      this.onMeasureUnitChange(measureUnit);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSelectModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoEntityTableModule } from '@igo2/common';\r\n\r\nimport { MeasureFormatPipe } from './measure-format.pipe';\r\nimport { MeasurerItemComponent } from './measurer-item.component';\r\nimport { MeasurerComponent } from './measurer.component';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoEntityTableModule\r\n  ],\r\n  declarations: [\r\n    MeasureFormatPipe,\r\n    MeasurerItemComponent,\r\n    MeasurerComponent,\r\n    MeasurerDialogComponent\r\n  ],\r\n  exports: [\r\n    MeasureFormatPipe,\r\n    MeasurerComponent\r\n  ],\r\n  entryComponents: [\r\n    MeasurerDialogComponent\r\n  ]\r\n})\r\nexport class IgoMeasurerModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { IgoMeasurerModule } from './measurer/measurer.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoMeasurerModule\r\n  ]\r\n})\r\nexport class IgoMeasureModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { OverlayDirective } from './shared/overlay.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [OverlayDirective],\r\n  declarations: [OverlayDirective]\r\n})\r\nexport class IgoOverlayModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoOverlayModule\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { saveAs } from 'file-saver';\r\nimport * as jsPDF from 'jspdf';\r\nimport * as _html2canvas from 'html2canvas';\r\nimport * as JSZip from 'jszip';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { MessageService, ActivityService, LanguageService } from '@igo2/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { formatScale } from '../../map/shared/map.utils';\r\nimport { OutputLayerLegend } from '../../layer/shared/layers/layer.interface';\r\nimport { getLayersLegends } from '../../layer/utils/outputLegend';\r\n\r\nimport { PrintOptions } from './print.interface';\r\n\r\nconst html2canvas = _html2canvas;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrintService {\r\n  zipFile: JSZip;\r\n  nbFileToProcess: number;\r\n  activityId: string;\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private activityService: ActivityService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  print(map: IgoMap, options: PrintOptions): Subject<any> {\r\n    const status$ = new Subject();\r\n\r\n    const paperFormat: string = options.paperFormat;\r\n    const resolution = +options.resolution; // Default is 96\r\n    const orientation = options.orientation;\r\n\r\n    this.activityId = this.activityService.register();\r\n    const doc = new jsPDF({\r\n      orientation,\r\n      format: paperFormat.toLowerCase()\r\n    });\r\n\r\n    const dimensions = [\r\n      doc.internal.pageSize.width,\r\n      doc.internal.pageSize.height\r\n    ];\r\n\r\n    const margins = [20, 10, 20, 10];\r\n    const width = dimensions[0] - margins[3] - margins[1];\r\n    const height = dimensions[1] - margins[0] - margins[2];\r\n    const size = [width, height];\r\n\r\n    if (options.title !== undefined) {\r\n      this.addTitle(doc, options.title, dimensions[0]);\r\n    }\r\n\r\n    if (options.showProjection === true || options.showScale === true) {\r\n      this.addProjScale(\r\n        doc,\r\n        map,\r\n        resolution,\r\n        options.showProjection,\r\n        options.showScale\r\n      );\r\n    }\r\n    if (options.comment !== '') {\r\n      this.addComment(doc, options.comment);\r\n    }\r\n\r\n    this.addMap(doc, map, resolution, size, margins).subscribe(\r\n      (status: SubjectStatus) => {\r\n        if (status === SubjectStatus.Done) {\r\n          if (options.showLegend === true) {\r\n            this.addLegend(doc, map, margins, resolution);\r\n          } else {\r\n            this.saveDoc(doc);\r\n          }\r\n        }\r\n\r\n        if (status === SubjectStatus.Done || status === SubjectStatus.Error) {\r\n          this.activityService.unregister(this.activityId);\r\n          status$.next(SubjectStatus.Done);\r\n        }\r\n      }\r\n    );\r\n\r\n    return status$;\r\n  }\r\n\r\n  /**\r\n   * Get html code for all layers legend\r\n   * @param  map IgoMap\r\n   * @param  width The width that the legend need to be\r\n   * @return Html code for the legend\r\n   */\r\n  getLayersLegendHtml(map: IgoMap, width: number, resolution: number): string {\r\n    let html = '';\r\n    const legends = getLayersLegends(\r\n      map.layers,\r\n      map.viewController.getScale(resolution)\r\n    );\r\n    if (legends.length === 0) {\r\n      return html;\r\n    }\r\n\r\n    // Define important style to be sure that all container is convert\r\n    // to image not just visible part\r\n    html += '<style media=\"screen\" type=\"text/css\">';\r\n    html += '.html2canvas-container { width: ' + width;\r\n    html += 'mm !important; height: 2000px !important; }';\r\n    html += '</style>';\r\n    html += '<font size=\"2\" face=\"Courier New\" >';\r\n    html += '<div style=\"display:inline-block;max-width:' + width + 'mm\">';\r\n    // For each legend, define an html table cell\r\n    legends.forEach((legend: OutputLayerLegend) => {\r\n      html +=\r\n        '<table border=1 style=\"display:inline-block;vertical-align:top\">';\r\n      html += '<tr><th width=\"170px\">' + legend.title + '</th>';\r\n      html += '<td><img class=\"printImageLegend\" src=\"' + legend.url + '\">';\r\n      html += '</td></tr></table>';\r\n    });\r\n    html += '</div>';\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Get all the legend in a single image\r\n   * * @param  format - Image format. default value to \"png\"\r\n   * @return The image of the legend\r\n   */\r\n  getLayersLegendImage(\r\n    map,\r\n    format: string = 'png',\r\n    doZipFile: boolean,\r\n    resolution: number\r\n  ) {\r\n    const status$ = new Subject();\r\n    // Get html code for the legend\r\n    const width = 200; // milimeters unit, originally define for document pdf\r\n    let html = this.getLayersLegendHtml(map, width, resolution);\r\n    const that = this;\r\n    format = format.toLowerCase();\r\n\r\n    // If no legend show No LEGEND in an image\r\n    if (html.length === 0) {\r\n      html = '<font size=\"12\" face=\"Courier New\" >';\r\n      html += '<div align=\"center\"><b>NO LEGEND</b></div>';\r\n    }\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n    // Define event to execute after all images are loaded to create the canvas\r\n    setTimeout(() => {\r\n      html2canvas(div, { useCORS: true })\r\n        .then(canvas => {\r\n          let status = SubjectStatus.Done;\r\n          try {\r\n            if (!doZipFile) {\r\n              // Save the canvas as file\r\n              that.saveCanvasImageAsFile(canvas, 'legendImage', format);\r\n            } else {\r\n              // Add the canvas to zip\r\n              that.generateCanvaFileToZip(canvas, 'legendImage' + '.' + format);\r\n            }\r\n            div.parentNode.removeChild(div); // remove temp div (IE)\r\n          } catch (err) {\r\n            status = SubjectStatus.Error;\r\n          }\r\n          status$.next(status);\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n        });\r\n    }, 500);\r\n  }\r\n\r\n  private addTitle(doc: jsPDF, title: string, pageWidth: number) {\r\n    const pdfResolution = 96;\r\n    const titleSize = 32;\r\n    const titleWidth = ((titleSize * 25.4) / pdfResolution) * title.length;\r\n\r\n    let titleMarginLeft;\r\n    if (titleWidth > pageWidth) {\r\n      titleMarginLeft = 0;\r\n    } else {\r\n      titleMarginLeft = (pageWidth - titleWidth) / 2;\r\n    }\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(32);\r\n    doc.text(title, titleMarginLeft, 15);\r\n  }\r\n\r\n  /**\r\n   * Add comment to the document\r\n   * * @param  doc - pdf document\r\n   * * @param  comment - Comment to add in the document\r\n   * * @param  size - Size of the document\r\n   */\r\n  private addComment(doc: jsPDF, comment: string) {\r\n    const commentSize = 16;\r\n    const commentMarginLeft = 20;\r\n    const marginBottom = 5;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(commentSize);\r\n    doc.text(comment, commentMarginLeft, heightPixels);\r\n  }\r\n  /**\r\n   * Add projection and/or scale to the document\r\n   * @param  doc - pdf document\r\n   * @param  map - Map of the app\r\n   * @param  dpi - DPI resolution of the document\r\n   * @param  projection - Bool to indicate if projection need to be added\r\n   * @param  scale - Bool to indicate if scale need to be added\r\n   */\r\n  private addProjScale(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    dpi: number,\r\n    projection: boolean,\r\n    scale: boolean\r\n  ) {\r\n    const translate = this.languageService.translate;\r\n    const projScaleSize = 16;\r\n    const projScaleMarginLeft = 20;\r\n    const marginBottom = 15;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    let textProjScale: string = '';\r\n    if (projection === true) {\r\n      const projText = translate.instant('igo.geo.printForm.projection');\r\n      textProjScale += projText + ': ' + map.projection;\r\n    }\r\n    if (scale === true) {\r\n      if (projection === true) {\r\n        textProjScale += '   ';\r\n      }\r\n      const scaleText = translate.instant('igo.geo.printForm.scale');\r\n      const mapScale = map.viewController.getScale(dpi);\r\n      textProjScale += scaleText + ': ~ 1 / ' + formatScale(mapScale);\r\n    }\r\n    doc.setFont('courier');\r\n    doc.setFontSize(projScaleSize);\r\n    doc.text(textProjScale, projScaleMarginLeft, heightPixels);\r\n  }\r\n\r\n  /**\r\n   * Add the legend to the document\r\n   * @param  doc - Pdf document where legend will be added\r\n   * @param  map - Map of the app\r\n   * @param  margins - Page margins\r\n   */\r\n  private addLegend(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    margins: Array<number>,\r\n    resolution: number\r\n  ) {\r\n    const that = this;\r\n    // Get html code for the legend\r\n    const width = doc.internal.pageSize.width;\r\n    const html = this.getLayersLegendHtml(map, width, resolution);\r\n    // If no legend, save the map directly\r\n    if (html === '') {\r\n      this.saveDoc(doc);\r\n      return true;\r\n    }\r\n\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n    html2canvas(div, { useCORS: true })\r\n      .then(canvas => {\r\n        let imgData;\r\n        const position = 10;\r\n\r\n        imgData = canvas.toDataURL('image/png');\r\n        doc.addPage();\r\n        const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n        doc.addImage(imgData, 'PNG', 10, position, imageSize[0], imageSize[1]);\r\n        that.saveDoc(doc);\r\n        div.parentNode.removeChild(div); // remove temp div (IE style)\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n  }\r\n\r\n  private addCanvas(\r\n    doc: jsPDF,\r\n    canvas: HTMLCanvasElement,\r\n    margins: Array<number>\r\n  ) {\r\n    let image;\r\n\r\n    image = canvas.toDataURL('image/jpeg');\r\n\r\n    if (image !== undefined) {\r\n      const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n      doc.addImage(\r\n        image,\r\n        'JPEG',\r\n        margins[3],\r\n        margins[0],\r\n        imageSize[0],\r\n        imageSize[1]\r\n      );\r\n      doc.rect(margins[3], margins[0], imageSize[0], imageSize[1]);\r\n    }\r\n  }\r\n\r\n  // TODO fix printing with image resolution\r\n  private addMap(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    resolution: number,\r\n    size: Array<number>,\r\n    margins: Array<number>\r\n  ) {\r\n    const status$ = new Subject();\r\n\r\n    const mapSize = map.ol.getSize();\r\n    const extent = map.ol.getView().calculateExtent(mapSize);\r\n\r\n    const widthPixels = Math.round((size[0] * resolution) / 25.4);\r\n    const heightPixels = Math.round((size[1] * resolution) / 25.4);\r\n\r\n    let timeout;\r\n\r\n    map.ol.once('postcompose', (event: any) => {\r\n      const canvas = event.context.canvas;\r\n      const mapStatus$$ = map.status$.subscribe((mapStatus: SubjectStatus) => {\r\n        clearTimeout(timeout);\r\n\r\n        if (mapStatus !== SubjectStatus.Done) {\r\n          return;\r\n        }\r\n\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      });\r\n\r\n      // If no loading as started after 200ms, then probably no loading\r\n      // is required.\r\n      timeout = window.setTimeout(() => {\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      }, 200);\r\n    });\r\n\r\n    this.renderMap(map, [widthPixels, heightPixels], extent);\r\n\r\n    return status$;\r\n  }\r\n\r\n  defineNbFileToProcess(nbFileToProcess) {\r\n    this.nbFileToProcess = nbFileToProcess;\r\n  }\r\n\r\n  /**\r\n   * Download an image of the map with addition of informations\r\n   * @param  map - Map of the app\r\n   * @param  format - Image format. default value to \"png\"\r\n   * @param  projection - Indicate if projection need to be add. Default to false\r\n   * @param  scale - Indicate if scale need to be add. Default to false\r\n   * @param  legend - Indicate if the legend of layers need to be download. Default to false\r\n   * @param  title - Title to add for the map - Default to blank\r\n   * @param  comment - Comment to add for the map - Default to blank\r\n   * @param  doZipFile - Indicate if we do a zip with the file\r\n   * @return Image file of the map with extension format given as parameter\r\n   */\r\n  downloadMapImage(\r\n    map: IgoMap,\r\n    resolution: number,\r\n    format = 'png',\r\n    projection = false,\r\n    scale = false,\r\n    legend = false,\r\n    title = '',\r\n    comment = '',\r\n    doZipFile = true\r\n  ) {\r\n    const status$ = new Subject();\r\n    // const resolution = map.ol.getView().getResolution();\r\n    this.activityId = this.activityService.register();\r\n    const translate = this.languageService.translate;\r\n    map.ol.once('postcompose', (event: any) => {\r\n      format = format.toLowerCase();\r\n      const context = event.context;\r\n      const newCanvas = document.createElement('canvas');\r\n      const newContext = newCanvas.getContext('2d');\r\n      // Postion in height to set the canvas in new canvas\r\n      let positionHCanvas = 0;\r\n      // Position in width to set the Proj/Scale in new canvas\r\n      let positionWProjScale = 10;\r\n      // Get height/width of map canvas\r\n      const width = context.canvas.width;\r\n      let height = context.canvas.height;\r\n      // Set Font to calculate comment width\r\n      newContext.font = '20px Calibri';\r\n      const commentWidth = newContext.measureText(comment).width;\r\n      // Add height for title if defined\r\n      height = title !== '' ? height + 30 : height;\r\n      // Add height for projection or scale (same line) if defined\r\n      height = projection !== false || scale !== false ? height + 30 : height;\r\n      const positionHProjScale = height - 10;\r\n      // Define number of line depending of the comment length\r\n      const commentNbLine = Math.ceil(commentWidth / width);\r\n      // Add height for multiline comment if defined\r\n      height = comment !== '' ? height + commentNbLine * 30 : height;\r\n      let positionHComment = height - commentNbLine * 20 + 5;\r\n      // Set the new canvas with the new calculated size\r\n      newCanvas.width = width;\r\n      newCanvas.height = height;\r\n      // Patch Jpeg default black background to white\r\n      if (format === 'jpeg') {\r\n        newContext.fillStyle = '#ffffff';\r\n        newContext.fillRect(0, 0, width, height);\r\n        newContext.fillStyle = '#000000';\r\n      }\r\n      // If a title need to be added to canvas\r\n      if (title !== '') {\r\n        // Set font for title\r\n        newContext.font = '26px Calibri';\r\n        positionHCanvas = 30;\r\n        newContext.textAlign = 'center';\r\n        newContext.fillText(title, width / 2, 20);\r\n      }\r\n      // Set font for next section\r\n      newContext.font = '20px Calibri';\r\n      // If projection need to be added to canvas\r\n      if (projection !== false) {\r\n        const projText = translate.instant('igo.geo.printForm.projection');\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          projText + ': ' + map.projection,\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n        positionWProjScale += 200; // Width position change for scale position\r\n      }\r\n      // If scale need to be added to canvas\r\n      if (scale !== false) {\r\n        const scaleText = translate.instant('igo.geo.printForm.scale');\r\n        const mapScale = map.viewController.getScale(resolution);\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          scaleText + ': ~ 1 / ' + formatScale(mapScale),\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n      }\r\n      // If a comment need to be added to canvas\r\n      if (comment !== '') {\r\n        newContext.textAlign = 'center';\r\n        // If only one line, no need to multiline the comment\r\n        if (commentNbLine === 1) {\r\n          newContext.fillText(comment, width / 2, positionHComment);\r\n        } else {\r\n          // Separate the setenses to be approx. the same length\r\n          const nbCommentChar = comment.length;\r\n          const CommentLengthToCut = Math.floor(nbCommentChar / commentNbLine);\r\n          let commentCurrentLine = '';\r\n          let positionFirstCutChar = 0;\r\n          let positionLastBlank;\r\n          // Loop for the number of line calculated\r\n          for (let i = 0; i < commentNbLine; i++) {\r\n            // For all line except last\r\n            if (commentNbLine - 1 > i) {\r\n              // Get comment current line to find the right place tu cut comment\r\n              commentCurrentLine = comment.substr(\r\n                positionFirstCutChar,\r\n                CommentLengthToCut\r\n              );\r\n              // Cut the setence at blank\r\n              positionLastBlank = commentCurrentLine.lastIndexOf(' ');\r\n              newContext.fillText(\r\n                commentCurrentLine.substr(0, positionLastBlank),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n              positionFirstCutChar += positionLastBlank;\r\n              // Go to next line for insertion\r\n              positionHComment += 20;\r\n            } else {\r\n              // Don't cut last part\r\n              newContext.fillText(\r\n                comment.substr(positionFirstCutChar),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // Add map to new canvas\r\n      newContext.drawImage(context.canvas, 0, positionHCanvas);\r\n\r\n      let status = SubjectStatus.Done;\r\n      try {\r\n        // Save the canvas as file\r\n        if (!doZipFile) {\r\n          this.saveCanvasImageAsFile(newCanvas, 'map', format);\r\n        } else if (format.toLowerCase() === 'tiff') {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(\r\n            newCanvas,\r\n            'map' + map.projection.replace(':', '_') + '.' + format\r\n          );\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(newCanvas, 'map' + '.' + format);\r\n        }\r\n      } catch (err) {\r\n        status = SubjectStatus.Error;\r\n      }\r\n\r\n      status$.next(status);\r\n\r\n      if (format.toLowerCase() === 'tiff') {\r\n        const tiwContent = this.getWorldFileInformation(map);\r\n        const blob = new Blob([tiwContent], {\r\n          type: 'text/plain;charset=utf-8'\r\n        });\r\n        if (!doZipFile) {\r\n          // saveAs automaticly replace ':' for '_'\r\n          saveAs(blob, 'map' + map.projection + '.tfw');\r\n          this.saveFileProcessing();\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.addFileToZip(\r\n            'map' + map.projection.replace(':', '_') + '.tfw',\r\n            blob\r\n          );\r\n        }\r\n      }\r\n    });\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  private renderMap(map, size, extent) {\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  /**\r\n   * Save document\r\n   * @param  doc - Document to save\r\n   */\r\n  protected saveDoc(doc: jsPDF) {\r\n    doc.save('map.pdf');\r\n  }\r\n\r\n  /**\r\n   * Calculate the best Image size to fit in pdf\r\n   * @param doc - Pdf Document\r\n   * @param canvas - Canvas of image\r\n   * @param margins - Page margins\r\n   */\r\n  private getImageSizeToFitPdf(doc, canvas, margins) {\r\n    // Define variable to calculate best size to fit in one page\r\n    const pageHeight =\r\n      doc.internal.pageSize.getHeight() - (margins[0] + margins[2]);\r\n    const pageWidth =\r\n      doc.internal.pageSize.getWidth() - (margins[1] + margins[3]);\r\n    const canHeight = canvas.height;\r\n    const canWidth = canvas.width;\r\n    const heightRatio = canHeight / pageHeight;\r\n    const widthRatio = canWidth / pageWidth;\r\n    const maxRatio = heightRatio > widthRatio ? heightRatio : widthRatio;\r\n    const imgHeigh = maxRatio > 1 ? canHeight / maxRatio : canHeight;\r\n    const imgWidth = maxRatio > 1 ? canWidth / maxRatio : canWidth;\r\n\r\n    return [imgWidth, imgHeigh];\r\n  }\r\n\r\n  /**\r\n   * Get a world file information for tiff\r\n   * @param  map - Map of the app\r\n   */\r\n  private getWorldFileInformation(map) {\r\n    const currentResolution = map.viewController.getResolution();\r\n    const currentExtent = map.viewController.getExtent(); // Return [minx, miny, maxx, maxy]\r\n    return [\r\n      currentResolution,\r\n      0,\r\n      0,\r\n      -currentResolution,\r\n      currentExtent[0] + currentResolution / 0.5,\r\n      currentExtent[3] - currentResolution / 0.5\r\n    ].join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Save canvas image as file\r\n   * @param canvas - Canvas to save\r\n   * @param name - Name of the file\r\n   * @param format - file format\r\n   */\r\n  private saveCanvasImageAsFile(canvas, name, format) {\r\n    const blobFormat = 'image/' + format;\r\n    const that = this;\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      // If navigator is Internet Explorer\r\n      if (navigator.msSaveBlob) {\r\n        navigator.msSaveBlob(canvas.msToBlob(), name + '.' + format);\r\n        this.saveFileProcessing();\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          // download image\r\n          saveAs(blob, name + '.' + format);\r\n          that.saveFileProcessing();\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to a zip\r\n   * @param canvas - File to add to the zip\r\n   * @param  name -Name of the fileoverview\r\n   */\r\n  private generateCanvaFileToZip(canvas, name) {\r\n    const blobFormat = 'image/' + 'jpeg';\r\n    const that = this;\r\n    if (\r\n      !this.hasOwnProperty('zipFile') ||\r\n      typeof this.zipFile === 'undefined'\r\n    ) {\r\n      this.zipFile = new JSZip();\r\n    }\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      if (navigator.msSaveBlob) {\r\n        this.addFileToZip(name, canvas.msToBlob());\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          that.addFileToZip(name, blob);\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to zip, if all file are zipped, download\r\n   * @param name - Name of the files\r\n   * @param blob - Contain of file\r\n   */\r\n  private addFileToZip(name, blob) {\r\n    // add file to zip\r\n    this.zipFile.file(name, blob);\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Download zip file\r\n      this.getZipFile();\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  private saveFileProcessing() {\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the zipped file\r\n   * @return Retun a zip file\r\n   */\r\n  private getZipFile() {\r\n    const that = this;\r\n    this.zipFile.generateAsync({ type: 'blob' }).then(blob => {\r\n      // 1) generate the zip file\r\n      saveAs(blob, 'map.zip');\r\n      delete that.zipFile;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\nimport { PrintService } from '../shared/print.service';\r\n\r\n@Component({\r\n  selector: 'igo-print',\r\n  templateUrl: './print.component.html'\r\n})\r\nexport class PrintComponent {\r\n  public disabled = false;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this._outputFormat;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this._outputFormat = value;\r\n  }\r\n  private _outputFormat: PrintOutputFormat;\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this._paperFormat;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this._paperFormat = value;\r\n  }\r\n  private _paperFormat: PrintPaperFormat;\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this._orientation;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this._orientation = value;\r\n  }\r\n  private _orientation: PrintOrientation;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this._imageFormat;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this._imageFormat = value;\r\n  }\r\n  private _imageFormat: PrintSaveImageFormat;\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this._resolution;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this._resolution = value;\r\n  }\r\n  private _resolution: PrintResolution;\r\n\r\n  constructor(private printService: PrintService) {}\r\n\r\n  handleFormSubmit(data: PrintOptions) {\r\n    this.disabled = true;\r\n\r\n    if (data.isPrintService === true) {\r\n      this.printService\r\n        .print(this.map, data)\r\n        .subscribe();\r\n    } else {\r\n      let nbFileToProcess = 1;\r\n\r\n      if (data.showLegend) {\r\n        nbFileToProcess++;\r\n      }\r\n      if (data.imageFormat.toLowerCase() === 'tiff') {\r\n        nbFileToProcess++;\r\n      }\r\n\r\n      this.printService.defineNbFileToProcess(nbFileToProcess);\r\n\r\n      const resolution = +data.resolution;\r\n      this.printService.downloadMapImage(\r\n        this.map,\r\n        resolution,\r\n        data.imageFormat,\r\n        data.showProjection,\r\n        data.showScale,\r\n        data.showLegend,\r\n        data.title,\r\n        data.comment,\r\n        data.doZipFile\r\n      );\r\n      if (data.showLegend) {\r\n        this.printService.getLayersLegendImage(\r\n          this.map,\r\n          data.imageFormat,\r\n          data.doZipFile,\r\n          +resolution\r\n        );\r\n      }\r\n    }\r\n    this.disabled = false;\r\n  }\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const PrintOutputFormat = strEnum(['Pdf', 'Image']);\r\n\r\nexport type PrintOutputFormat = keyof typeof PrintOutputFormat;\r\n\r\nexport const PrintPaperFormat = strEnum([\r\n  'A0',\r\n  'A1',\r\n  'A2',\r\n  'A3',\r\n  'A4',\r\n  'A5',\r\n  'Letter',\r\n  'Legal'\r\n]);\r\nexport type PrintPaperFormat = keyof typeof PrintPaperFormat;\r\n\r\nexport const PrintOrientation = strEnum(['landscape', 'portrait']);\r\nexport type PrintOrientation = keyof typeof PrintOrientation;\r\n\r\nexport const PrintResolution = strEnum(['72', '96', '150', '300']);\r\nexport type PrintResolution = keyof typeof PrintResolution;\r\n\r\nexport const PrintSaveImageFormat = strEnum([\r\n  'Bmp',\r\n  'Gif',\r\n  'Jpeg',\r\n  'Png',\r\n  'Tiff'\r\n]);\r\nexport type PrintSaveImageFormat = keyof typeof PrintSaveImageFormat;\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators\r\n} from '@angular/forms';\r\n\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\n@Component({\r\n  selector: 'igo-print-form',\r\n  templateUrl: './print-form.component.html',\r\n  styleUrls: ['./print-form.component.scss']\r\n})\r\nexport class PrintFormComponent implements OnInit {\r\n  public form: FormGroup;\r\n  public submitted: boolean;\r\n\r\n  public outputFormats = PrintOutputFormat;\r\n  public paperFormats = PrintPaperFormat;\r\n  public orientations = PrintOrientation;\r\n  public resolutions = PrintResolution;\r\n  public imageFormats = PrintSaveImageFormat;\r\n  public isPrintService = true;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this.imageFormatField.value;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this.imageFormatField.setValue(value || PrintSaveImageFormat.Jpeg, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this.outputFormatField.value;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this.outputFormatField.setValue(value || PrintOutputFormat.Pdf, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this.paperFormatField.value;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this.paperFormatField.setValue(value || PrintPaperFormat.Letter, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this.orientationField.value;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this.orientationField.setValue(value || PrintOrientation.landscape, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this.resolutionField.value;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this.resolutionField.setValue(value || PrintResolution['96'], {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get title(): string {\r\n    return this.titleField.value;\r\n  }\r\n  set title(value: string) {\r\n    this.titleField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get comment(): string {\r\n    return this.commentField.value;\r\n  }\r\n  set comment(value: string) {\r\n    this.commentField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showProjection(): boolean {\r\n    return this.showProjectionField.value;\r\n  }\r\n  set showProjection(value: boolean) {\r\n    this.showProjectionField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showScale(): boolean {\r\n    return this.showScaleField.value;\r\n  }\r\n  set showScale(value: boolean) {\r\n    this.showScaleField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showLegend(): boolean {\r\n    return this.showLegendField.value;\r\n  }\r\n  set showLegend(value: boolean) {\r\n    this.showLegendField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get doZipFile(): boolean {\r\n    return this.doZipFileField.value;\r\n  }\r\n  set doZipFile(value: boolean) {\r\n    this.doZipFileField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  get outputFormatField() {\r\n    return (this.form.controls as any).outputFormat as FormControl;\r\n  }\r\n\r\n  get paperFormatField() {\r\n    return (this.form.controls as any).paperFormat as FormControl;\r\n  }\r\n\r\n  get imageFormatField() {\r\n    return (this.form.controls as any).imageFormat as FormControl;\r\n  }\r\n\r\n  get orientationField() {\r\n    return (this.form.controls as any).orientation as FormControl;\r\n  }\r\n\r\n  get resolutionField() {\r\n    return (this.form.controls as any).resolution as FormControl;\r\n  }\r\n\r\n  get commentField() {\r\n    return (this.form.controls as any).comment as FormControl;\r\n  }\r\n\r\n  get showProjectionField() {\r\n    return (this.form.controls as any).showProjection as FormControl;\r\n  }\r\n\r\n  get showScaleField() {\r\n    return (this.form.controls as any).showScale as FormControl;\r\n  }\r\n\r\n  get showLegendField() {\r\n    return (this.form.controls as any).showLegend as FormControl;\r\n  }\r\n\r\n  get doZipFileField() {\r\n    return (this.form.controls as any).doZipFile as FormControl;\r\n  }\r\n\r\n  get titleField() {\r\n    return (this.form.controls as any).title as FormControl;\r\n  }\r\n\r\n  @Output() submit: EventEmitter<PrintOptions> = new EventEmitter();\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n    this.form = this.formBuilder.group({\r\n      title: ['', []],\r\n      comment: ['', []],\r\n      outputFormat: ['', [Validators.required]],\r\n      paperFormat: ['', [Validators.required]],\r\n      imageFormat: [ '', [Validators.required]],\r\n      resolution: ['', [Validators.required]],\r\n      orientation: ['', [Validators.required]],\r\n      showProjection: false,\r\n      showScale: false,\r\n      showLegend: false,\r\n      doZipFile: [{hidden: this.isPrintService }]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doZipFileField.setValue(false);\r\n  }\r\n\r\n  handleFormSubmit(data: PrintOptions, isValid: boolean) {\r\n    this.submitted = true;\r\n    data.isPrintService = this.isPrintService;\r\n    if (isValid) {\r\n      this.submit.emit(data);\r\n    }\r\n  }\r\n\r\n  toggleImageSaveProp() {\r\n    if (this.outputFormatField.value === 'Image') {\r\n      this.isPrintService = false;\r\n    } else {\r\n      this.isPrintService = true;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { PrintComponent } from './print/print.component';\r\nimport { PrintFormComponent } from './print-form/print-form.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [PrintComponent, PrintFormComponent],\r\n  declarations: [PrintComponent, PrintFormComponent]\r\n})\r\nexport class IgoPrintModule {}\r\n","import { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\n\r\nimport { QuerySearchSource } from './query-search-source';\r\n\r\n/**\r\n * Map search source factory\r\n * @ignore\r\n */\r\nexport function querySearchSourceFactory(config: ConfigService) {\r\n  return new QuerySearchSource(\r\n    config.getConfig(`searchSources.${QuerySearchSource.id}`) || {}\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the map search source\r\n */\r\nexport function provideQuerySearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: querySearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { QueryDirective } from './shared/query.directive';\r\nimport { QueryService } from './shared/query.service';\r\nimport { provideQuerySearchSource } from './shared/query-search-source.providers';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [QueryDirective],\r\n  declarations: [QueryDirective],\r\n  providers: [QueryService]\r\n})\r\nexport class IgoQueryModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoQueryModule,\r\n      providers: [provideQuerySearchSource()]\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceSettings } from './sources/source.interfaces';\r\n\r\n/**\r\n * Service where all available search sources are registered.\r\n */\r\nexport class SearchSourceService {\r\n\r\n  constructor(private sources: SearchSource[]) {}\r\n\r\n  /**\r\n   * Return available search sources\r\n   * @returns Search sources\r\n   */\r\n  getSources(): SearchSource[] {\r\n    return this.sources;\r\n  }\r\n\r\n  /**\r\n   * Return enabled search sources\r\n   * @returns Search sources\r\n   */\r\n  getEnabledSources(): SearchSource[] {\r\n    return this.getSources().filter(\r\n      (source: SearchSource) => source.enabled === true\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Enable search sources of given type\r\n   * @param type Search type\r\n   * @todo It would be better to track the enabled search sources\r\n   *  without updating their 'enabled' property.\r\n   */\r\n  enableSourcesByType(type: string) {\r\n    this.getSources().forEach((source: SearchSource) => {\r\n      if ((source.constructor as typeof SearchSource).type === type) {\r\n        source.enabled = true;\r\n      } else {\r\n        source.enabled = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set Param from the selected settings\r\n   * @param source search-source\r\n   * @param setting settings\r\n   */\r\n  setParamFromSetting(source: SearchSource, setting: SearchSourceSettings) {\r\n    source.setParamFromSetting(setting);\r\n  }\r\n}\r\n","import { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { SearchSource } from './sources/source';\r\nimport { SearchResult } from './search.interfaces';\r\n\r\n/**\r\n * Function that checks whether a search source implements TextSearch\r\n * @param source Search source\r\n * @returns True if the search source implements TextSearch\r\n */\r\nexport function sourceCanSearch(source: SearchSource): boolean {\r\n  return (source as any).search !== undefined;\r\n}\r\n\r\n/**\r\n * Function that checks whether a search source implements ReverseSearch\r\n * @param source Search source\r\n * @returns True if the search source implements ReverseSearch\r\n */\r\nexport function sourceCanReverseSearch(source: SearchSource): boolean {\r\n  return (source as any).reverseSearch !== undefined;\r\n}\r\n\r\n/**\r\n * Function that checks whether a search source implements ReverseSearch AND is shown in the pointer summary\r\n * @param source Search source\r\n * @returns True if the search source implements ReverseSearch AND is shown in the pointer summary\r\n */\r\nexport function sourceCanReverseSearchAsSummary(source: SearchSource): boolean {\r\n  return (source as any).reverseSearch !== undefined && source.showInPointerSummary === true;\r\n}\r\n\r\n/**\r\n * Return a search result out of an Feature. This is used to adapt\r\n * the IGO query module to the new Feature/SearchResult interfaces\r\n * @param feature feature\r\n * @param source Search source\r\n * @returns SearchResult\r\n */\r\nexport function featureToSearchResult(\r\n  feature: Feature,\r\n  source: SearchSource\r\n): SearchResult<Feature> {\r\n  feature.sourceId = source.getId();\r\n  return {\r\n    source,\r\n    data: feature,\r\n    meta: {\r\n      dataType: FEATURE,\r\n      id: feature.meta.id as string,\r\n      title: feature.meta.title,\r\n      icon: feature.meta.icon || 'map-marker'\r\n    }\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { stringToLonLat } from '../../map';\r\nimport { MapService } from '../../map/shared/map.service';\r\n\r\nimport { SearchSource, TextSearch, ReverseSearch } from './sources/source';\r\nimport {\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './sources/source.interfaces';\r\nimport { SearchSourceService } from './search-source.service';\r\nimport { Research } from './search.interfaces';\r\nimport {\r\n  sourceCanSearch,\r\n  sourceCanReverseSearch,\r\n  sourceCanReverseSearchAsSummary\r\n} from './search.utils';\r\n\r\n/**\r\n * This service perform researches in all the search sources enabled.\r\n * It returns Research objects who's 'request' property needs to be\r\n * subscribed to in order to trigger the research. This services has\r\n * keeps internal state of the researches it performed\r\n * and the results they yielded.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchService {\r\n  constructor(\r\n    private searchSourceService: SearchSourceService,\r\n    private mapService: MapService\r\n  ) {}\r\n\r\n  /**\r\n   * Perform a research by text\r\n   * @param term Any text\r\n   * @returns Researches\r\n   */\r\n  search(term: string, options: TextSearchOptions = {}): Research[] {\r\n    if (!this.termIsValid(term)) {\r\n      return [];\r\n    }\r\n\r\n    const response = stringToLonLat(term, this.mapService.getMap().projection, {\r\n      forceNA: options.forceNA\r\n    });\r\n    if (response.lonLat) {\r\n      return this.reverseSearch(response.lonLat, { distance: response.radius });\r\n    } else if (response.message) {\r\n      console.log(response.message);\r\n    }\r\n\r\n    options.extent = this.mapService\r\n      .getMap()\r\n      .viewController.getExtent('EPSG:4326');\r\n\r\n    let sources;\r\n\r\n    if (options.getEnabledOnly || options.getEnabledOnly === undefined) {\r\n      sources = this.searchSourceService.getEnabledSources();\r\n    } else {\r\n      sources = this.searchSourceService.getSources();\r\n    }\r\n\r\n    if (options.sourceId) {\r\n      sources = sources.filter(source => source.getId() === options.sourceId);\r\n    } else if (options.searchType) {\r\n      sources = sources.filter(\r\n        source => source.getType() === options.searchType\r\n      );\r\n    }\r\n\r\n    sources = sources.filter(sourceCanSearch);\r\n    return this.searchSources(sources, term, options);\r\n  }\r\n\r\n  /**\r\n   * Perform a research by lon/lat\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Researches\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions,\r\n    asPointerSummary: boolean = false\r\n  ) {\r\n    const reverseSourceFonction = asPointerSummary\r\n      ? sourceCanReverseSearchAsSummary\r\n      : sourceCanReverseSearch;\r\n    const sources = this.searchSourceService\r\n      .getEnabledSources()\r\n      .filter(reverseSourceFonction);\r\n    return this.reverseSearchSources(sources, lonLat, options || {});\r\n  }\r\n\r\n  /**\r\n   * Create a text research out of all given search sources\r\n   * @param sources Search sources that implement TextSearch\r\n   * @param term Search term\r\n   * @returns Observable of Researches\r\n   */\r\n  private searchSources(\r\n    sources: SearchSource[],\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: ((source as any) as TextSearch).search(term, options),\r\n        reverse: false,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a reverse research out of all given search sources\r\n   * @param sources Search sources that implement ReverseSearch\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Observable of Researches\r\n   */\r\n  private reverseSearchSources(\r\n    sources: SearchSource[],\r\n    lonLat: [number, number],\r\n    options: ReverseSearchOptions\r\n  ): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: ((source as any) as ReverseSearch).reverseSearch(\r\n          lonLat,\r\n          options\r\n        ),\r\n        reverse: true,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate that a search term is valid\r\n   * @param term Search term\r\n   * @returns True if the search term is valid\r\n   */\r\n  private termIsValid(term: string): boolean {\r\n    return typeof term === 'string' && term !== '';\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Directions, DirectionsOptions } from '../shared/directions.interface';\r\n\r\nexport abstract class DirectionsSource {\r\n  abstract enabled: boolean;\r\n  abstract getName(): string;\r\n  abstract route(coordinates: [number, number][], directionsOptions: DirectionsOptions): Observable<Directions[]>;\r\n}\r\n","import { DirectionsSource } from '../directions-sources/directions-source';\r\n\r\nexport class DirectionsSourceService {\r\n  constructor(public sources: DirectionsSource[]) {}\r\n}\r\n\r\nexport function directionsSourceServiceFactory(sources: DirectionsSource[]) {\r\n  return new DirectionsSourceService(sources);\r\n}\r\n\r\nexport function provideDirectionsSourceService() {\r\n  return {\r\n    provide: DirectionsSourceService,\r\n    useFactory: directionsSourceServiceFactory,\r\n    deps: [DirectionsSource]\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Directions, DirectionsOptions } from '../shared/directions.interface';\r\nimport { DirectionsSource } from '../directions-sources/directions-source';\r\nimport { DirectionsSourceService } from './directions-source.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DirectionsService {\r\n  constructor(private directionsSourceService: DirectionsSourceService) {}\r\n\r\n  route(coordinates: [number, number][], directionsOptions: DirectionsOptions = {}): Observable<Directions[]>[] {\r\n    if (coordinates.length === 0) {\r\n      return;\r\n    }\r\n    return this.directionsSourceService.sources\r\n      .filter((source: DirectionsSource) => source.enabled)\r\n      .map((source: DirectionsSource) => this.routeSource(source, coordinates, directionsOptions));\r\n  }\r\n\r\n  routeSource(\r\n    source: DirectionsSource,\r\n    coordinates: [number, number][],\r\n    directionsOptions: DirectionsOptions = {}\r\n  ): Observable<Directions[]> {\r\n    const request = source.route(coordinates, directionsOptions );\r\n    return request;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Stop } from '../shared/directions.interface';\r\n\r\n@Injectable()\r\nexport class DirectionsFormService {\r\n  private stops: Stop[];\r\n\r\n  constructor() {}\r\n\r\n  getStopsCoordinates(): [number, number][] {\r\n    const stopsCoordinates = [];\r\n    if (this.stops) {\r\n      this.stops.forEach(stop => {\r\n        stopsCoordinates.push(stop.stopCoordinates);\r\n      });\r\n    }\r\n    return stopsCoordinates;\r\n  }\r\n\r\n  setStops(stops: Stop[]) {\r\n    this.stops = stops;\r\n  }\r\n\r\n  getStops() {\r\n    return this.stops;\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map, take, skipWhile } from 'rxjs/operators';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport * as olgeom from 'ol/geom';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olcondition from 'ol/events/condition';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport * as olobservable from 'ol/Observable';\r\n\r\nimport { Clipboard } from '@igo2/utils';\r\nimport {\r\n  Message,\r\n  LanguageService,\r\n  MessageService,\r\n  RouteService\r\n} from '@igo2/core';\r\nimport { getEntityTitle } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { SearchService } from '../../search/shared/search.service';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { FeatureMotion, FEATURE } from '../../feature/shared/feature.enums';\r\nimport { moveToOlFeatures, tryBindStoreLayer, tryAddLoadingStrategy } from '../../feature/shared/feature.utils';\r\n\r\nimport { Directions, DirectionsOptions } from '../shared/directions.interface';\r\nimport { DirectionsService } from '../shared/directions.service';\r\nimport { DirectionsFormService } from './directions-form.service';\r\n\r\nimport { QueryService } from '../../query/shared/query.service';\r\nimport { FeatureStore } from '../../feature/shared/store';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { FeatureStoreLoadingStrategy } from '../../feature/shared/strategies/loading';\r\nimport { roundCoordTo } from '../../map/shared/map.utils';\r\n\r\n@Component({\r\n  selector: 'igo-directions-form',\r\n  templateUrl: './directions-form.component.html',\r\n  styleUrls: ['./directions-form.component.scss']\r\n})\r\nexport class DirectionsFormComponent implements OnInit, OnDestroy {\r\n  private readonly invalidKeys = ['Control', 'Shift', 'Alt'];\r\n\r\n  public stopsForm: FormGroup;\r\n  public projection = 'EPSG:4326';\r\n  public currentStopIndex: number;\r\n  private routesQueries$$: Subscription[] = [];\r\n  private search$$: Subscription;\r\n\r\n  private stream$ = new Subject<string>();\r\n\r\n  public routesResults: Directions[] | Message[];\r\n  public activeRoute: Directions;\r\n  private lastTimeoutRequest;\r\n\r\n  private focusOnStop = false;\r\n  private focusKey = [];\r\n  public initialStopsCoords;\r\n  private browserLanguage;\r\n\r\n  @Input() term: string;\r\n\r\n  @Input() debounce: number = 200;\r\n\r\n  @Input() length: number = 2;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The stops store\r\n   */\r\n  @Input() stopsStore: FeatureStore;\r\n\r\n  /**\r\n   * The route and vertex store\r\n   */\r\n  @Input() routeStore: FeatureStore;\r\n\r\n  @Output() submit: EventEmitter<any> = new EventEmitter();\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private directionsService: DirectionsService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private searchService: SearchService,\r\n    private queryService: QueryService,\r\n    private directionsFormService: DirectionsFormService,\r\n    private changeDetectorRefs: ChangeDetectorRef,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  changeRoute() {\r\n    this.showRouteGeometry();\r\n  }\r\n\r\n  prevent(event) {\r\n    event.preventDefault();\r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n    this.queryService.queryEnabled = false;\r\n    this.focusOnStop = false;\r\n    this.browserLanguage = this.languageService.getLanguage();\r\n    this.stopsForm = this.formBuilder.group({\r\n      directionsType: 'car',\r\n      directionsMode: 'driving', // loop\r\n      stopOrderPriority: true,\r\n      directionsFixedStartEnd: false,\r\n      stops: this.formBuilder.array([\r\n        this.createStop('start'),\r\n        this.createStop('end')\r\n      ])\r\n    });\r\n\r\n    setTimeout(() => {\r\n      this.initStores();\r\n      this.initOlInteraction();\r\n    }, 1);\r\n\r\n    this.subscribeToFormChange();\r\n    this.routesQueries$$.push(\r\n      this.stream$\r\n        .pipe(\r\n          debounceTime(this.debounce),\r\n          distinctUntilChanged()\r\n        )\r\n        .subscribe((term: string) => this.handleTermChanged(term))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribeRoutesQueries();\r\n    this.unlistenSingleClick();\r\n    this.queryService.queryEnabled = true;\r\n    this.freezeStores();\r\n    this.writeStopsToFormService();\r\n\r\n  }\r\n\r\n  private initStores() {\r\n\r\n    const loadingStrategy = new FeatureStoreLoadingStrategy({motion: FeatureMotion.None});\r\n\r\n    // STOP STORE\r\n    const stopsStore = this.stopsStore;\r\n    const stopsLayer = new VectorLayer({\r\n      title: 'Directions - stops',\r\n      zIndex: 911,\r\n      source: new FeatureDataSource(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false,\r\n      style: stopMarker\r\n    });\r\n    tryBindStoreLayer(stopsStore, stopsLayer);\r\n    tryAddLoadingStrategy(stopsStore, loadingStrategy);\r\n\r\n    // ROUTE AND VERTEX STORE\r\n    const routeStore = this.routeStore;\r\n    const routeLayer = new VectorLayer({\r\n      title: 'Directions - route and vertex',\r\n      zIndex: 910,\r\n      source: new FeatureDataSource(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false,\r\n      style: stopMarker\r\n    });\r\n    tryBindStoreLayer(routeStore, routeLayer);\r\n    tryAddLoadingStrategy(routeStore, loadingStrategy);\r\n\r\n  }\r\n\r\n  private initOlInteraction() {\r\n    let selectedStopFeature;\r\n    const selectStop = new olinteraction.Select({\r\n      layers: [this.stopsStore.layer.ol],\r\n      condition: olcondition.pointerMove,\r\n      hitTolerance: 7,\r\n      filter: (feature) => {\r\n        return feature.get('type') === 'stop';\r\n      }\r\n    });\r\n\r\n    selectStop.on('select', evt => {\r\n      selectedStopFeature = evt.target.getFeatures()[0];\r\n    });\r\n\r\n    const translateStop = new olinteraction.Translate({\r\n      layers: [this.stopsStore.layer.ol],\r\n      features: selectedStopFeature\r\n      // TODO In Openlayers >= 6.x, filter is now allowed.\r\n    });\r\n\r\n    translateStop.on('translating', evt => {\r\n      const features = evt.features;\r\n      if (features.getLength() === 0) { return; }\r\n      this.executeTranslation(features, false, 50, true);\r\n    });\r\n\r\n    translateStop.on('translateend', evt => {\r\n      const features = evt.features;\r\n      if (features.getLength() === 0) { return; }\r\n      this.executeTranslation(features, true, 0, false);\r\n    });\r\n\r\n    const selectedRoute = new olinteraction.Select({\r\n      layers: [this.routeStore.layer.ol],\r\n      condition: olcondition.click,\r\n      hitTolerance: 7,\r\n      filter: (feature) => {\r\n        return feature.getId() === 'route';\r\n      }\r\n    });\r\n    selectedRoute.on('select', evt => {\r\n      if (this.focusOnStop === false) {\r\n        const selectCoordinates = olproj.transform(\r\n          (evt as any).mapBrowserEvent.coordinate,\r\n          this.map.projection,\r\n          this.projection\r\n        );\r\n        this.addStop();\r\n        const pos = this.stops.length - 2;\r\n        this.stops.at(pos).patchValue({ stopCoordinates: selectCoordinates });\r\n        this.handleLocationProposals(selectCoordinates, pos);\r\n        this.addStopOverlay(selectCoordinates, pos);\r\n        selectedRoute.getFeatures().clear();\r\n      }\r\n      selectedRoute.getFeatures().clear();\r\n    });\r\n\r\n    this.map.ol.addInteraction(selectStop);\r\n    this.map.ol.addInteraction(translateStop);\r\n    this.map.ol.addInteraction(selectedRoute);\r\n\r\n  }\r\n\r\n  private subscribeToFormChange() {\r\n    this.routesQueries$$.push(\r\n      this.stopsForm.valueChanges\r\n        .pipe(debounceTime(this.debounce))\r\n        .subscribe(val => {\r\n          this.writeStopsToFormService();\r\n        })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Freeze any store, meaning the layer is removed, strategies are deactivated\r\n   * and some listener removed\r\n   * @internal\r\n   */\r\n  private freezeStores() {\r\n    const stopsStore = this.stopsStore;\r\n    const routeStore = this.routeStore;\r\n\r\n    this.map.removeLayer(stopsStore.layer);\r\n    this.map.removeLayer(routeStore.layer);\r\n    stopsStore.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    routeStore.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n\r\n  }\r\n\r\n  private executeTranslation(\r\n    features,\r\n    reverseSearchProposal = false,\r\n    delay: number = 0,\r\n    overview: boolean = false) {\r\n    this.routeStore.clear();\r\n    const firstFeature = features.getArray()[0];\r\n    const translatedID = firstFeature.getId();\r\n    const translatedPos = translatedID.split('_');\r\n    let p;\r\n    switch (translatedPos[1]) {\r\n      case 'start':\r\n        p = 0;\r\n        break;\r\n      case 'end':\r\n        p = this.stops.length - 1;\r\n        break;\r\n      default:\r\n        p = Number(translatedPos[1]);\r\n        break;\r\n    }\r\n    const translationCoordinates = olproj.transform(\r\n      firstFeature.getGeometry().getCoordinates(),\r\n      this.map.projection,\r\n      this.projection\r\n    );\r\n    this.stops\r\n      .at(p)\r\n      .patchValue({ stopCoordinates: translationCoordinates, stopProposals: [] });\r\n    if (reverseSearchProposal) {\r\n      this.handleLocationProposals(translationCoordinates, p);\r\n    }\r\n\r\n    const directionsOptions = {\r\n      steps: true,\r\n      overview: false,\r\n      alternatives: true\r\n    } as DirectionsOptions;\r\n\r\n    if (overview) {\r\n      directionsOptions.overview = true;\r\n      directionsOptions.steps = false;\r\n      directionsOptions.alternatives = false;\r\n    }\r\n\r\n    if (delay > 0) {\r\n      if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves\r\n        clearTimeout(this.lastTimeoutRequest);\r\n      }\r\n      this.lastTimeoutRequest = setTimeout(() => {\r\n        this.getRoutes(undefined, directionsOptions);\r\n      }, delay);\r\n\r\n    } else {\r\n      clearTimeout(this.lastTimeoutRequest);\r\n      this.getRoutes(undefined, directionsOptions);\r\n    }\r\n\r\n  }\r\n\r\n  handleLocationProposals(coordinates: [number, number], stopIndex: number) {\r\n    const groupedLocations = [];\r\n    const roundedCoordinates = [coordinates[0].toFixed(5), coordinates[1].toFixed(5)];\r\n    this.stops.at(stopIndex).patchValue({ stopPoint: roundedCoordinates.join(',') });\r\n    this.searchService\r\n      .reverseSearch(coordinates, { zoom: this.map.viewController.getZoom() })\r\n      .map(res =>\r\n        this.routesQueries$$.push(\r\n          res.request.pipe(map(f => f)).subscribe(results => {\r\n            results.forEach(result => {\r\n              if (\r\n                groupedLocations.filter(f => f.source === result.source)\r\n                  .length === 0\r\n              ) {\r\n                groupedLocations.push({\r\n                  source: result.source,\r\n                  results: results.map(r => r.data)\r\n                });\r\n              }\r\n            });\r\n            this.stops\r\n              .at(stopIndex)\r\n              .patchValue({ stopProposals: groupedLocations });\r\n            // TODO: Prefer another source?\r\n            if (results[0]) {\r\n              if (results[0].source.getId() === 'icherchereverse') {\r\n                // prefer address type.\r\n                let resultPos = 0;\r\n                for (let i = 0; i < results.length; i++) {\r\n                  const feature: any = results[i].data;\r\n                  if (feature.properties.type === 'adresses') {\r\n                    resultPos = i;\r\n                    break;\r\n                  }\r\n                }\r\n                this.stops.at(stopIndex).patchValue({\r\n                  stopPoint: getEntityTitle(results[resultPos])\r\n                });\r\n                if (results[resultPos].data.geometry.type === 'Point') {\r\n                  this.stops.at(stopIndex).patchValue({\r\n                    stopCoordinates:\r\n                      results[resultPos].data.geometry.coordinates\r\n                  });\r\n                } else {\r\n                  // Not moving the translated point Only to suggest value into the UI.\r\n                }\r\n              } else if (results[0].source.getId() === 'coordinatesreverse') {\r\n                this.stops.at(stopIndex).patchValue({\r\n                  stopPoint: [\r\n                    results[0].data.geometry.coordinates[0].toFixed(5),\r\n                    results[0].data.geometry.coordinates[1].toFixed(5)\r\n                  ].join(',')\r\n                });\r\n                if (results[0].data.geometry.type === 'Point') {\r\n                  this.stops.at(stopIndex).patchValue({\r\n                    stopCoordinates:\r\n                      results[0].data.geometry.coordinates\r\n                  });\r\n                } else {\r\n                  // Not moving the translated point Only to suggest value into the UI.\r\n                }\r\n              }\r\n            } else {\r\n              this.stops.at(stopIndex).patchValue({ stopPoint: roundedCoordinates.join(','), stopProposals: [] });\r\n            }\r\n            this.changeDetectorRefs.detectChanges();\r\n          })\r\n        )\r\n      );\r\n  }\r\n\r\n  directionsText(index: number, stopsCounts = this.stops.length): string {\r\n    if (index === 0) {\r\n      return 'start';\r\n    } else if (index === stopsCounts - 1 || stopsCounts === 1) {\r\n      return 'end';\r\n    } else {\r\n      return 'intermediate';\r\n    }\r\n  }\r\n\r\n  raiseStop(index: number) {\r\n    if (index > 0) {\r\n      this.moveStop(index, -1);\r\n    }\r\n  }\r\n\r\n  lowerStop(index: number) {\r\n    if (index < this.stops.length - 1) {\r\n      this.moveStop(index, 1);\r\n    }\r\n  }\r\n\r\n  private moveStop(index, diff) {\r\n    const fromValue = this.stops.at(index);\r\n    this.removeStop(index);\r\n    this.stops.insert(index + diff, fromValue);\r\n    this.stops.at(index).patchValue({ directionsText: this.directionsText(index) });\r\n    this.stops\r\n      .at(index + diff)\r\n      .patchValue({ directionsText: this.directionsText(index + diff) });\r\n    if (this.stops.at(index).value.stopCoordinates) {\r\n      this.addStopOverlay(this.stops.at(index).value.stopCoordinates, index);\r\n    }\r\n    if (this.stops.at(index + diff).value.stopCoordinates) {\r\n      this.addStopOverlay(\r\n        this.stops.at(index + diff).value.stopCoordinates,\r\n        index + diff\r\n      );\r\n    }\r\n  }\r\n\r\n  get stops(): FormArray {\r\n    return this.stopsForm.get('stops') as FormArray;\r\n  }\r\n\r\n  public writeStopsToFormService() {\r\n    const stops = [];\r\n    this.stops.value.forEach(stop => {\r\n      if (stop.stopCoordinates instanceof Array) {\r\n        stops.push(stop);\r\n      }\r\n    });\r\n    this.directionsFormService.setStops(stops);\r\n  }\r\n\r\n  addStop(): void {\r\n    const insertIndex = this.stops.length - 1;\r\n    this.stops.insert(insertIndex, this.createStop());\r\n  }\r\n\r\n  createStop(directionsPos = 'intermediate'): FormGroup {\r\n    return this.formBuilder.group({\r\n      stopPoint: [''],\r\n      stopProposals: [[]],\r\n      directionsText: directionsPos,\r\n      stopCoordinates: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  removeStop(index: number): void {\r\n    const id = this.getStopOverlayID(index);\r\n    this.deleteStoreFeatureByID(this.stopsStore, id);\r\n    this.stops.removeAt(index);\r\n    let cnt = 0;\r\n    this.stops.value.forEach(stop => {\r\n      this.stops.at(cnt).patchValue({ directionsText: this.directionsText(cnt) });\r\n      this.addStopOverlay(this.stops.at(cnt).value.stopCoordinates, cnt);\r\n      cnt++;\r\n    });\r\n  }\r\n\r\n  resetForm() {\r\n    this.routesResults = undefined;\r\n    const nbStops = this.stops.length;\r\n    for (let i = 0; i < nbStops; i++) {\r\n      this.stops.removeAt(0);\r\n    }\r\n    this.stops.insert(0, this.createStop('start'));\r\n    this.stops.insert(1, this.createStop('end'));\r\n\r\n    this.stopsStore.clear();\r\n    this.routeStore.clear();\r\n  }\r\n\r\n  formatStep(step, cnt) {\r\n    return this.formatInstruction(\r\n      step.maneuver.type,\r\n      step.maneuver.modifier,\r\n      step.name,\r\n      step.maneuver.bearing_after,\r\n      cnt,\r\n      step.maneuver.exit,\r\n      cnt === this.activeRoute.steps.length - 1\r\n    );\r\n  }\r\n\r\n  formatInstruction(\r\n    type,\r\n    modifier,\r\n    route,\r\n    direction,\r\n    stepPosition,\r\n    exit,\r\n    lastStep = false\r\n  ) {\r\n    let directiveFr;\r\n    let directiveEn;\r\n    let image = 'forward';\r\n    let cssClass = 'rotate-270';\r\n    const translatedDirection = this.translateBearing(direction);\r\n    const translatedModifier = this.translateModifier(modifier);\r\n    const enPrefix = modifier === 'straight' ? '' : 'on the ';\r\n    const frPrefix = modifier === 'straight' ? '' : 'Ã  ';\r\n\r\n    let frAggregatedDirection = frPrefix + translatedModifier;\r\n    let enAggregatedDirection = enPrefix + translatedModifier;\r\n\r\n    if (modifier && modifier.search('slight') >= 0) {\r\n      enAggregatedDirection = translatedModifier;\r\n    }\r\n\r\n    if (modifier === 'uturn') {\r\n      image = 'forward';\r\n      cssClass = 'rotate-90';\r\n    } else if (modifier === 'sharp right') {\r\n      image = 'subdirectory-arrow-right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'right') {\r\n      image = 'subdirectory-arrow-right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'slight right') {\r\n      image = 'forward';\r\n      cssClass = 'rotate-290';\r\n    } else if (modifier === 'straight') {\r\n      image = 'forward';\r\n    } else if (modifier === 'slight left') {\r\n      image = 'forward';\r\n      cssClass = 'rotate-250';\r\n    } else if (modifier === 'left') {\r\n      image = 'subdirectory-arrow-left';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'sharp left') {\r\n      image = 'subdirectory-arrow-left';\r\n      cssClass = 'icon-flipped';\r\n    }\r\n\r\n    if (type === 'turn') {\r\n      if (modifier === 'straight') {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      } else if (modifier === 'uturn') {\r\n        directiveFr = 'Faire demi-tour sur ' + route;\r\n        directiveEn = 'Make u-turn on ' + route;\r\n      } else {\r\n        directiveFr = 'Tourner ' + frAggregatedDirection + ' sur ' + route;\r\n        directiveEn = 'Turn ' + translatedModifier + ' onto ' + route;\r\n      }\r\n    } else if (type === 'new name') {\r\n      directiveFr =\r\n        'Continuer en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'compass';\r\n      cssClass = '';\r\n    } else if (type === 'depart') {\r\n      directiveFr =\r\n        'Aller en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'compass';\r\n      cssClass = '';\r\n    } else if (type === 'arrive') {\r\n      if (lastStep) {\r\n        let coma = ', ';\r\n        if (!translatedModifier) {\r\n          frAggregatedDirection = '';\r\n          enAggregatedDirection = '';\r\n          coma = '';\r\n        }\r\n        directiveFr = 'Vous Ãªtes arrivÃ©' + coma + frAggregatedDirection;\r\n        directiveEn =\r\n          'You have reached your destination' + coma + enAggregatedDirection;\r\n      } else {\r\n        directiveFr = 'Vous atteignez le point intermÃ©diare sur ' + route;\r\n        directiveEn = 'You have reached the intermediate stop onto ' + route;\r\n        image = 'map-marker';\r\n        cssClass = '';\r\n      }\r\n    } else if (type === 'merge') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'on ramp') {\r\n      directiveFr = \"Prendre l'entrÃ©e d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take the ramp ' + enAggregatedDirection;\r\n    } else if (type === 'off ramp') {\r\n      directiveFr = \"Prendre la sortie d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take exit ' + enAggregatedDirection;\r\n    } else if (type === 'fork') {\r\n      if (modifier.search('left') >= 0) {\r\n        directiveFr = 'Garder la gauche sur ' + route;\r\n        directiveEn = 'Merge left onto ' + route;\r\n      } else if (modifier.search('right') >= 0) {\r\n        directiveFr = 'Garder la droite sur ' + route;\r\n        directiveEn = 'Merge right onto ' + route;\r\n      } else {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      }\r\n    } else if (type === 'end of road') {\r\n      directiveFr =\r\n        'Ã la fin de la route, tourner ' + translatedModifier + ' sur ' + route;\r\n      directiveEn =\r\n        'At the end of the road, turn ' + translatedModifier + ' onto ' + route;\r\n    } else if (type === 'use lane') {\r\n      directiveFr = 'Prendre la voie de ... ';\r\n      directiveEn = 'Take the lane ...';\r\n    } else if (type === 'continue' && modifier !== 'uturn') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'roundabout') {\r\n      directiveFr = 'Au rond-point, prendre la ' + exit;\r\n      directiveFr += exit === 1 ? 're' : 'e';\r\n      directiveFr += ' sortie vers ' + route;\r\n      directiveEn = 'At the roundabout, take the ' + exit;\r\n      directiveEn += exit === 1 ? 'st' : 'rd';\r\n      directiveEn += ' exit towards ' + route;\r\n      image = 'chart-donut';\r\n      cssClass = '';\r\n    } else if (type === 'rotary') {\r\n      directiveFr = 'Rond-point rotary....';\r\n      directiveEn = 'Roundabout rotary....';\r\n      image = 'chart-donut';\r\n      cssClass = '';\r\n    } else if (type === 'roundabout turn') {\r\n      directiveFr = 'Rond-point, prendre la ...';\r\n      directiveEn = 'Roundabout, take the ...';\r\n      image = 'chart-donut';\r\n      cssClass = '';\r\n    } else if (type === 'exit roundabout') {\r\n      directiveFr = 'Poursuivre vers ' + route;\r\n      directiveEn = 'Continue to ' + route;\r\n      image = 'forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'notification') {\r\n      directiveFr = 'notification ....';\r\n      directiveEn = 'notification ....';\r\n    } else if (modifier === 'uturn') {\r\n      directiveFr =\r\n        'Faire demi-tour et continuer en direction ' +\r\n        translatedDirection +\r\n        ' sur ' +\r\n        route;\r\n      directiveEn =\r\n        'Make u-turn and head ' + translatedDirection + ' on ' + route;\r\n    } else {\r\n      directiveFr = '???';\r\n      directiveEn = '???';\r\n    }\r\n\r\n    if (lastStep) {\r\n      image = 'flag-variant';\r\n      cssClass = '';\r\n    }\r\n    if (stepPosition === 0) {\r\n      image = 'compass';\r\n      cssClass = '';\r\n    }\r\n\r\n    let directive;\r\n    if (this.browserLanguage === 'fr') {\r\n      directive = directiveFr;\r\n    } else if (this.browserLanguage === 'en') {\r\n      directive = directiveEn;\r\n    }\r\n\r\n    return { instruction: directive, image, cssClass };\r\n  }\r\n\r\n  translateModifier(modifier) {\r\n    if (modifier === 'uturn') {\r\n      return this.languageService.translate.instant('igo.geo.directions.uturn');\r\n    } else if (modifier === 'sharp right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.directions.sharp right'\r\n      );\r\n    } else if (modifier === 'right') {\r\n      return this.languageService.translate.instant('igo.geo.directions.right');\r\n    } else if (modifier === 'slight right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.directions.slight right'\r\n      );\r\n    } else if (modifier === 'sharp left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.directions.sharp left'\r\n      );\r\n    } else if (modifier === 'left') {\r\n      return this.languageService.translate.instant('igo.geo.directions.left');\r\n    } else if (modifier === 'slight left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.directions.slight left'\r\n      );\r\n    } else if (modifier === 'straight') {\r\n      return this.languageService.translate.instant('igo.geo.directions.straight');\r\n    } else {\r\n      return modifier;\r\n    }\r\n  }\r\n\r\n  translateBearing(bearing) {\r\n    if (bearing >= 337 || bearing < 23) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.n');\r\n    } else if (bearing < 67) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.ne'\r\n      );\r\n    } else if (bearing < 113) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.e');\r\n    } else if (bearing < 157) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.se'\r\n      );\r\n    } else if (bearing < 203) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.s');\r\n    } else if (bearing < 247) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.sw'\r\n      );\r\n    } else if (bearing < 293) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.w');\r\n    } else if (bearing < 337) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.nw'\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  formatDistance(distance) {\r\n    if (distance === 0) {\r\n      return;\r\n    }\r\n    if (distance >= 100000) {\r\n      return Math.round(distance / 1000) + ' km';\r\n    }\r\n    if (distance >= 10000) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    if (distance >= 100) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    return distance + ' m';\r\n  }\r\n\r\n  formatDuration(duration: number, summary = false) {\r\n    if (duration >= 3600) {\r\n      const hour = Math.floor(duration / 3600);\r\n      const minute = Math.round((duration / 3600 - hour) * 60);\r\n      if (minute === 60) {\r\n        return hour + 1 + ' h';\r\n      }\r\n      return hour + ' h ' + minute + ' min';\r\n    }\r\n\r\n    if (duration >= 60) {\r\n      return Math.round(duration / 60) + ' min';\r\n    }\r\n    return duration + ' s';\r\n  }\r\n\r\n  showSegment(step, zoomToExtent = false) {\r\n    this.showRouteSegmentGeometry(step.geometry.coordinates, zoomToExtent);\r\n  }\r\n\r\n  showRouteSegmentGeometry(coordinates, zoomToExtent = false) {\r\n    const vertexId = 'vertex';\r\n    const geometry4326 = new olgeom.LineString(coordinates);\r\n    const geometryMapProjection = geometry4326.transform('EPSG:4326', this.map.projection);\r\n    const routeSegmentCoordinates = (geometryMapProjection as any).getCoordinates();\r\n    const lastPoint = routeSegmentCoordinates[0];\r\n\r\n    const geometry = new olgeom.Point(lastPoint);\r\n    const feature = new olFeature({ geometry });\r\n\r\n    const geojsonGeom = new OlGeoJSON().writeGeometryObject(geometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: this.map.projection\r\n    });\r\n\r\n    const previousVertex = this.routeStore.get(vertexId);\r\n    const previousVertexRevision = previousVertex ? previousVertex.meta.revision : 0;\r\n\r\n    const vertexFeature: Feature = {\r\n      type: FEATURE,\r\n      geometry: geojsonGeom,\r\n      projection: this.map.projection,\r\n      properties: {\r\n        id: vertexId,\r\n        type: 'vertex'\r\n      },\r\n      meta: {\r\n        id: vertexId,\r\n        revision: previousVertexRevision + 1\r\n      },\r\n      ol: feature\r\n    };\r\n    this.routeStore.update(vertexFeature);\r\n    if (zoomToExtent) {\r\n      this.map.viewController.zoomToExtent(feature.getGeometry().getExtent());\r\n    }\r\n  }\r\n\r\n  zoomRoute(extent?) {\r\n\r\n    if (extent) {\r\n      this.map.viewController.zoomToExtent(extent);\r\n    } else {\r\n      const routeFeature = this.routeStore.layer.ol.getSource().getFeatures().find(f => f.getId() === 'route');\r\n      if (routeFeature) {\r\n        const routeExtent = routeFeature.getGeometry().getExtent();\r\n        this.map.viewController.zoomToExtent(routeExtent);\r\n      }\r\n    }\r\n  }\r\n\r\n  private showRouteGeometry(moveToExtent = false) {\r\n    const geom = this.activeRoute.geometry.coordinates;\r\n    const geometry4326 = new olgeom.LineString(geom);\r\n    const geometryMapProjection = geometry4326.transform('EPSG:4326', this.map.projection);\r\n    if (moveToExtent) {\r\n      this.zoomRoute(geometryMapProjection.getExtent());\r\n    }\r\n\r\n    const geojsonGeom = new OlGeoJSON().writeGeometryObject(geometryMapProjection, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: this.map.projection\r\n    });\r\n\r\n    const previousRoute = this.routeStore.get('route');\r\n    const previousRouteRevision = previousRoute ? previousRoute.meta.revision : 0;\r\n\r\n    const routeFeature: Feature = {\r\n      type: FEATURE,\r\n      geometry: geojsonGeom,\r\n      projection: this.map.projection,\r\n      properties: {\r\n        id: 'route',\r\n        type: 'route'\r\n      },\r\n      meta: {\r\n        id: 'route',\r\n        revision: previousRouteRevision + 1\r\n      },\r\n      ol: new olFeature({ geometry: geometryMapProjection })\r\n    };\r\n    this.routeStore.update(routeFeature);\r\n\r\n  }\r\n\r\n  getRoutes(moveToExtent: boolean = false, directionsOptions: DirectionsOptions = {}) {\r\n    this.deleteStoreFeatureByID(this.routeStore, 'vertex');\r\n    this.writeStopsToFormService();\r\n    const coords = this.directionsFormService.getStopsCoordinates();\r\n    if (coords.length < 2) {\r\n      return;\r\n    }\r\n    const routeResponse = this.directionsService.route(coords, directionsOptions);\r\n    if (routeResponse) {\r\n      routeResponse.map(res =>\r\n        this.routesQueries$$.push(\r\n          res.subscribe(route => {\r\n            this.routesResults = route;\r\n            this.activeRoute = this.routesResults[0] as Directions;\r\n            this.showRouteGeometry(moveToExtent);\r\n            this.changeDetectorRefs.detectChanges();\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  private unlistenSingleClick() {\r\n    if (this.focusKey.length !== 0) {\r\n      this.focusKey.forEach(key => {\r\n        olobservable.unByKey(key);\r\n      });\r\n    }\r\n  }\r\n\r\n  private unsubscribeRoutesQueries() {\r\n    this.routesQueries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.routesQueries$$ = [];\r\n  }\r\n\r\n  copyLinkToClipboard() {\r\n    const successful = Clipboard.copy(this.getUrl());\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.directionsForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.directionsForm.dialog.copyMsgLink');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  copyDirectionsToClipboard() {\r\n    const indent = '\\t';\r\n    let activeRouteDirective =\r\n      this.languageService.translate.instant(\r\n        'igo.geo.directionsForm.instructions'\r\n      ) + ':\\n';\r\n    let wayPointList = '';\r\n    const summary =\r\n      this.languageService.translate.instant('igo.geo.directionsForm.summary') +\r\n      ': \\n' +\r\n      indent +\r\n      this.activeRoute.title +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDistance(this.activeRoute.distance) +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDuration(this.activeRoute.duration) +\r\n      '\\n\\n' +\r\n      this.languageService.translate.instant('igo.geo.directionsForm.stopsList') +\r\n      ':\\n';\r\n\r\n    const url =\r\n      this.languageService.translate.instant('igo.geo.directionsForm.link') +\r\n      ':\\n' +\r\n      indent +\r\n      this.getUrl();\r\n\r\n    let wayPointsCnt = 1;\r\n    this.stops.value.forEach(stop => {\r\n      let coord = '';\r\n      let stopPoint = '';\r\n      if (stop.stopPoint !== stop.stopCoordinates) {\r\n        stopPoint = stop.stopPoint;\r\n        coord =\r\n          ' (' +\r\n          [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(',') +\r\n          ')';\r\n      } else {\r\n        stopPoint = [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(\r\n          ','\r\n        );\r\n      }\r\n\r\n      wayPointList =\r\n        wayPointList +\r\n        indent +\r\n        wayPointsCnt.toLocaleString() +\r\n        '. ' +\r\n        stopPoint +\r\n        coord +\r\n        '\\n';\r\n      wayPointsCnt++;\r\n    });\r\n\r\n    // Directions\r\n    let localCnt = 0;\r\n    this.activeRoute.steps.forEach(step => {\r\n      const instruction = this.formatStep(step, localCnt).instruction;\r\n      const distance =\r\n        this.formatDistance(step.distance) === undefined\r\n          ? ''\r\n          : ' (' + this.formatDistance(step.distance) + ')';\r\n      activeRouteDirective =\r\n        activeRouteDirective +\r\n        indent +\r\n        (localCnt + 1).toLocaleString() +\r\n        '. ' +\r\n        instruction +\r\n        distance +\r\n        '\\n';\r\n      localCnt++;\r\n    });\r\n\r\n    const directionsBody =\r\n      summary + wayPointList + '\\n' + url + '\\n\\n' + activeRouteDirective;\r\n\r\n    const successful = Clipboard.copy(directionsBody);\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.directionsForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.directionsForm.dialog.copyMsg');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  private handleTermChanged(term: string) {\r\n    if (term !== undefined || term.length !== 0) {\r\n      const searchProposals = [];\r\n      if (this.search$$) {\r\n        this.search$$.unsubscribe();\r\n      }\r\n      const researches = this.searchService.search(term, {searchType: 'Feature'});\r\n      researches.map(res =>\r\n        this.search$$ =\r\n        res.request.subscribe(results => {\r\n          results\r\n            .filter(r => r.data.geometry)\r\n            .forEach(element => {\r\n              if (\r\n                searchProposals.filter(r => r.source === element.source)\r\n                  .length === 0\r\n              ) {\r\n                searchProposals.push({\r\n                  source: element.source,\r\n                  meta: element.meta,\r\n                  results: results.map(r => r.data)\r\n                });\r\n              }\r\n            });\r\n          this.stops\r\n            .at(this.currentStopIndex)\r\n            .patchValue({ stopProposals: searchProposals });\r\n          this.changeDetectorRefs.detectChanges();\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  setTerm(term: string) {\r\n    this.term = term;\r\n    if (\r\n      this.keyIsValid(term) &&\r\n      (term.length >= this.length || term.length === 0)\r\n    ) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  private keyIsValid(key: string) {\r\n    return this.invalidKeys.find(value => value === key) === undefined;\r\n  }\r\n\r\n  keyup(i, event: KeyboardEvent) {\r\n    const term = (event.target as HTMLInputElement).value;\r\n    this.setTerm(term);\r\n    this.map.ol.un('singleclick', evt => {\r\n      this.handleMapClick(evt, i);\r\n    });\r\n  }\r\n\r\n  clearStop(stopIndex) {\r\n    // this.deleteDirectionsOverlaybyID(this.getStopOverlayID(stopIndex));\r\n    const id = this.getStopOverlayID(stopIndex);\r\n    this.deleteStoreFeatureByID(this.stopsStore, id);\r\n    this.routeStore.clear();\r\n    const stopsCounts = this.stops.length;\r\n    this.stops.removeAt(stopIndex);\r\n    this.stops.insert(stopIndex, this.createStop(this.directionsText(stopIndex, stopsCounts)));\r\n    this.routesResults = undefined;\r\n    this.getRoutes();\r\n  }\r\n\r\n  chooseProposal(proposal, i) {\r\n    if (proposal !== undefined) {\r\n      let geomCoord;\r\n      const geom = (proposal as any).geometry;\r\n      if (geom.type === 'Point') {\r\n        geomCoord = geom.coordinates;\r\n      } else if (geom.type.search('Line') >= 0) {\r\n        const line = (new OlGeoJSON()).readFeatures(geom);\r\n        geomCoord = line[0].getGeometry().getFirstCoordinate();\r\n        geomCoord = [geomCoord[0], geomCoord[1]];\r\n      } else if (geom.type.search('Polygon') >= 0) {\r\n        const poly = (new OlGeoJSON()).readFeatures(geom);\r\n        geomCoord = poly[0].getGeometry().getInteriorPoints().getFirstCoordinate();\r\n        geomCoord = [geomCoord[0], geomCoord[1]];\r\n      }\r\n\r\n      if (geomCoord !== undefined) {\r\n        this.stops.at(i).patchValue({ stopCoordinates: geomCoord });\r\n        this.addStopOverlay(geomCoord, i);\r\n      /*  const proposalExtent = this.directionsStopsOverlayDataSource.ol\r\n          .getFeatureById(this.getStopOverlayID(i))\r\n          .getGeometry()\r\n          .getExtent();*/\r\n\r\n       /* if (!olextent.intersects(proposalExtent, this.map.viewController.getExtent())) {\r\n          this.map.viewController.moveToExtent(proposalExtent);\r\n        }*/\r\n      }\r\n    }\r\n  }\r\n\r\n  focus(i) {\r\n    this.unlistenSingleClick();\r\n    this.currentStopIndex = i;\r\n    this.focusOnStop = true;\r\n    this.focusKey.push(\r\n      this.map.ol.once('singleclick', evt => {\r\n        this.handleMapClick(evt, i);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleMapClick(event: olcondition, indexPos?) {\r\n    if (this.currentStopIndex === undefined) {\r\n      this.addStop();\r\n      indexPos = this.stops.length - 2;\r\n      this.stops.at(indexPos).value.stopProposals = [];\r\n    } else {\r\n      indexPos = this.currentStopIndex;\r\n    }\r\n    const clickCoordinates = olproj.transform(\r\n      event.coordinate,\r\n      this.map.projection,\r\n      this.projection\r\n    );\r\n    this.stops.at(indexPos).patchValue({ stopProposals: [], stopCoordinates: clickCoordinates });\r\n\r\n    this.handleLocationProposals(clickCoordinates, indexPos);\r\n    this.addStopOverlay(clickCoordinates, indexPos);\r\n    setTimeout(() => {\r\n      this.focusOnStop = false; // prevent to trigger map click and Select on routes at same time.\r\n    }, 500);\r\n  }\r\n\r\n  geolocateStop(index: number) {\r\n    moveToOlFeatures(this.map, [this.map.geolocationFeature], FeatureMotion.Move);\r\n    const geolocateCoordinates = this.map.viewController.getCenter(this.projection);\r\n    this.stops.at(index).patchValue({ stopCoordinates: geolocateCoordinates });\r\n    this.addStopOverlay(geolocateCoordinates, index);\r\n    this.handleLocationProposals(geolocateCoordinates, index);\r\n  }\r\n\r\n  public addStopOverlay(coordinates: [number, number], index: number) {\r\n    const directionsText = this.directionsText(index);\r\n    let stopColor;\r\n    let stopText;\r\n    if (directionsText === 'start') {\r\n      stopColor = 'green';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.directionsForm.start'\r\n      );\r\n    } else if (directionsText === 'end') {\r\n      stopColor = 'red';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.directionsForm.end'\r\n      );\r\n    } else {\r\n      stopColor = 'yellow';\r\n      stopText =\r\n        this.languageService.translate.instant(\r\n          'igo.geo.directionsForm.intermediate'\r\n        ) +\r\n        ' #' +\r\n        index;\r\n    }\r\n\r\n    const geometry = new olgeom.Point(\r\n      olproj.transform(coordinates, this.projection, this.map.projection)\r\n    );\r\n\r\n    const stopID = this.getStopOverlayID(index);\r\n    const geojsonGeom = new OlGeoJSON().writeGeometryObject(geometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: this.map.projection\r\n    });\r\n\r\n    const previousStop = this.stopsStore.get(stopID);\r\n    const previousStopRevision = previousStop ? previousStop.meta.revision : 0;\r\n\r\n    const stopFeature: Feature = {\r\n      type: FEATURE,\r\n      geometry: geojsonGeom,\r\n      projection: this.map.projection,\r\n      properties: {\r\n        id: stopID,\r\n        type: 'stop',\r\n        stopText,\r\n        stopColor,\r\n        stopOpacity: 1\r\n      },\r\n      meta: {\r\n        id: stopID,\r\n        revision: previousStopRevision + 1\r\n      },\r\n      ol: new olFeature({ geometry })\r\n    };\r\n\r\n    this.stopsStore.update(stopFeature);\r\n    this.getRoutes();\r\n\r\n  }\r\n\r\n  public getStopOverlayID(index: number): string {\r\n    let txt;\r\n    if (index === 0) {\r\n      txt = 'start';\r\n    } else if (index === this.stops.length - 1) {\r\n      txt = 'end';\r\n    } else {\r\n      txt = index;\r\n    }\r\n    return 'directionsStop_' + txt;\r\n  }\r\n\r\n  private deleteStoreFeatureByID(store, id) {\r\n    const entity = store.get(id);\r\n    if (entity) {\r\n      store.delete(entity);\r\n    }\r\n  }\r\n\r\n  private getUrl() {\r\n    if (!this.route) {\r\n      return;\r\n    }\r\n\r\n    const directionsKey = this.route.options.directionsCoordKey;\r\n    const stopsCoordinates = [];\r\n    if (\r\n      this.directionsFormService &&\r\n      this.directionsFormService.getStopsCoordinates() &&\r\n      this.directionsFormService.getStopsCoordinates().length !== 0\r\n    ) {\r\n      this.directionsFormService.getStopsCoordinates().forEach(coord => {\r\n        stopsCoordinates.push(roundCoordTo(coord, 6));\r\n      });\r\n    }\r\n    let directionsUrl = '';\r\n    if (stopsCoordinates.length >= 2) {\r\n      directionsUrl = `${directionsKey}=${stopsCoordinates.join(';')}`;\r\n    }\r\n\r\n    return `${location.origin}${\r\n      location.pathname\r\n    }?tool=directions&${directionsUrl}`;\r\n  }\r\n}\r\n\r\n/**\r\n * Create a style for the directions stops and routes\r\n * @param feature OlFeature\r\n * @returns OL style function\r\n */\r\nexport function stopMarker(feature: olFeature, resolution: number): olstyle.Style {\r\n\r\n  const vertexStyle = [\r\n    new olstyle.Style({\r\n      geometry: feature.getGeometry(),\r\n      image: new olstyle.Circle({\r\n        radius: 7,\r\n        stroke: new olstyle.Stroke({ color: '#FF0000', width: 3 })\r\n      })\r\n    })\r\n  ];\r\n\r\n  const stopStyle = new olstyle.Style({\r\n    image: new olstyle.Icon({\r\n      src: './assets/igo2/geo/icons/place_' + feature.get('stopColor') + '_36px.svg',\r\n      opacity : feature.get('stopOpacity'),\r\n      imgSize: [36, 36], // for ie\r\n      anchor: [0.5, 0.92]\r\n    }),\r\n\r\n    text: new olstyle.Text({\r\n      text: feature.get('stopText'),\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n\r\n  const routeStyle = [\r\n    new olstyle.Style({\r\n      stroke: new olstyle.Stroke({ color: '#6a7982', width: 10, opacity: 0.75 })\r\n    }),\r\n    new olstyle.Style({\r\n      stroke: new olstyle.Stroke({ color: '#4fa9dd', width: 6, opacity: 0.75 })\r\n    })\r\n  ];\r\n\r\n  if (feature.get('type') === 'stop') {\r\n    return stopStyle;\r\n  }\r\n  if (feature.get('type') === 'vertex') {\r\n    return vertexStyle;\r\n  }\r\n  if (feature.get('type') === 'route') {\r\n    return routeStyle;\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  AfterViewInit,\r\n  Optional\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { DirectionsFormComponent } from './directions-form.component';\r\nimport { DirectionsFormService } from './directions-form.service';\r\n\r\n@Directive({\r\n  selector: '[igoDirectionsFormBinding]'\r\n})\r\nexport class DirectionsFormBindingDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    @Self() private component: DirectionsFormComponent,\r\n    private directionsFormService: DirectionsFormService,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    const storedStops = this.directionsFormService.getStops();\r\n    if (\r\n      !storedStops && this.route &&\r\n      this.route.options.directionsCoordKey\r\n    ) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const directionsParams =\r\n          params[this.route.options.directionsCoordKey as string];\r\n        const stopsCoordinatesFromURL = [];\r\n        if (directionsParams) {\r\n          const directionsCoordUrl = directionsParams.split(';');\r\n          if (directionsCoordUrl.length >= 2) {\r\n            let cnt = 0;\r\n            directionsCoordUrl.forEach(coord => {\r\n              if (cnt !== 0 && cnt !== directionsCoordUrl.length - 1) {\r\n                this.component.stops.insert(cnt, this.component.createStop());\r\n              }\r\n\r\n              const stopCoordinatesFromURL = JSON.parse('[' + coord + ']');\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopCoordinates: stopCoordinatesFromURL });\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopPoint: stopCoordinatesFromURL });\r\n              this.component.handleLocationProposals(\r\n                stopCoordinatesFromURL,\r\n                cnt\r\n              );\r\n\r\n              stopsCoordinatesFromURL.push(stopCoordinatesFromURL);\r\n              this.component.addStopOverlay(stopCoordinatesFromURL, cnt);\r\n              cnt++;\r\n            });\r\n            this.component.getRoutes(true);\r\n          }\r\n        }\r\n      });\r\n    } else if (storedStops) {\r\n      for (let i = 0; i < storedStops.length; i++) {\r\n        if (i !== 0 && i !== storedStops.length - 1) {\r\n          this.component.stops.insert(i, this.component.createStop());\r\n        }\r\n        if (storedStops[i].stopCoordinates instanceof Array) {\r\n          this.component.addStopOverlay(storedStops[i].stopCoordinates, i);\r\n          this.component.stops.at(i).patchValue(storedStops[i] );\r\n        }\r\n      }\r\n      this.component.getRoutes();\r\n    }\r\n    this.component.writeStopsToFormService();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatListModule,\r\n  MatDividerModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatTooltipModule,\r\n  MatAutocompleteModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { DirectionsFormComponent } from './directions-form/directions-form.component';\r\nimport { DirectionsFormBindingDirective } from './directions-form/directions-form-binding.directive';\r\nimport { DirectionsFormService } from './directions-form/directions-form.service';\r\nimport { provideDirectionsSourceService } from './shared/directions-source.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatListModule,\r\n    MatDividerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [DirectionsFormComponent, DirectionsFormBindingDirective],\r\n  declarations: [DirectionsFormComponent, DirectionsFormBindingDirective],\r\n  providers: [DirectionsFormService, provideDirectionsSourceService()]\r\n})\r\nexport class IgoDirectionsModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDirectionsModule\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceService } from './search-source.service';\r\n\r\n/**\r\n * Search source factory\r\n * @ignore\r\n */\r\nexport function searchSourceServiceFactory(sources: SearchSource[]) {\r\n  return new SearchSourceService(sources);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the SearchSource service\r\n */\r\nexport function provideSearchSourceService() {\r\n  return {\r\n    provide: SearchSourceService,\r\n    useFactory: searchSourceServiceFactory,\r\n    deps: [SearchSource]\r\n  };\r\n}\r\n","import { Injectable, Inject, Injector } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '@igo2/auth';\r\nimport { LanguageService } from '@igo2/core';\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport pointOnFeature from '@turf/point-on-feature';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\nimport { GoogleLinks } from './../../../utils/googleLinks';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  IChercheData,\r\n  IChercheResponse,\r\n  IChercheReverseData,\r\n  IChercheReverseResponse\r\n} from './icherche.interfaces';\r\n\r\n@Injectable()\r\nexport class IChercheSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * ICherche search source\r\n */\r\n@Injectable()\r\nexport class IChercheSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'icherche';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  private hashtagsLieuxToKeep = [];\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: SearchSourceOptions,\r\n    @Inject(IChercheSearchResultFormatter)\r\n    private formatter: IChercheSearchResultFormatter,\r\n    injector: Injector\r\n  ) {\r\n    super(options);\r\n\r\n    this.languageService.translate\r\n      .get(this.options.title)\r\n      .subscribe(title => this.title$.next(title));\r\n\r\n    const authService = injector.get(AuthService);\r\n    if (this.settings.length) {\r\n      if (!authService) {\r\n        this.getAllowedTypes();\r\n      } else {\r\n        authService.authenticate$.subscribe(() => {\r\n          this.getAllowedTypes();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return IChercheSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    const limit =\r\n      this.options.params && this.options.params.limit\r\n        ? Number(this.options.params.limit)\r\n        : undefined;\r\n    const ecmax =\r\n      this.options.params && this.options.params.ecmax\r\n        ? Number(this.options.params.ecmax)\r\n        : undefined;\r\n    const types =\r\n      this.options.params && this.options.params.type\r\n        ? this.options.params.type\r\n            .replace(/\\s/g, '')\r\n            .toLowerCase()\r\n            .split(',')\r\n        : [\r\n            'adresses',\r\n            'codes-postaux',\r\n            'routes',\r\n            'municipalites',\r\n            'mrc',\r\n            'regadmin',\r\n            'lieux'\r\n          ];\r\n    return {\r\n      title: 'igo.geo.search.icherche.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/icherche',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.icherche.type.address',\r\n              value: 'adresses',\r\n              enabled: types.indexOf('adresses') !== -1,\r\n              hashtags: ['adresse']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.oldAddress',\r\n              value: 'anciennes-adresses',\r\n              enabled: types.indexOf('anciennes-adresses') !== -1,\r\n              hashtags: ['anciennes-adresses']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.postalCode',\r\n              value: 'codes-postaux',\r\n              enabled: types.indexOf('codes-postaux') !== -1,\r\n              hashtags: ['code-postal']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.road',\r\n              value: 'routes',\r\n              enabled: types.indexOf('routes') !== -1,\r\n              hashtags: ['route']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.city',\r\n              value: 'municipalites',\r\n              enabled: types.indexOf('municipalites') !== -1,\r\n              hashtags: ['municipalitÃ©', 'mun']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.oldCity',\r\n              value: 'anciennes-municipalites',\r\n              enabled: types.indexOf('anciennes-municipalites') !== -1,\r\n              hashtags: ['anciennes-municipalites']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.mrc',\r\n              value: 'mrc',\r\n              enabled: types.indexOf('mrc') !== -1,\r\n              hashtags: ['mrc']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.regadmin',\r\n              value: 'regadmin',\r\n              enabled: types.indexOf('regadmin') !== -1,\r\n              hashtags: ['rÃ©gion-administrative', 'regadmin']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.entreprise',\r\n              value: 'entreprises',\r\n              enabled: types.indexOf('entreprises') !== -1,\r\n              available: false,\r\n              hashtags: ['entreprise']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.place',\r\n              value: 'lieux',\r\n              enabled: types.indexOf('lieux') !== -1,\r\n              hashtags: ['lieu']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.sumi',\r\n              value: 'bornes-sumi',\r\n              enabled: types.indexOf('bornes-sumi') !== -1,\r\n              hashtags: ['borne', 'bornes', 'sumi']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.km',\r\n              value: 'bornes-km',\r\n              enabled: false,\r\n              hashtags: ['borne', 'bornes', 'repÃ¨re', 'km']\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '1',\r\n              value: 1,\r\n              enabled: limit === 1\r\n            },\r\n            {\r\n              title: '5',\r\n              value: 5,\r\n              enabled: limit === 5 || !limit\r\n            },\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: limit === 10\r\n            },\r\n            {\r\n              title: '25',\r\n              value: 25,\r\n              enabled: limit === 25\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: limit === 50\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'ecmax',\r\n          name: 'ecmax',\r\n          values: [\r\n            {\r\n              title: '10 %',\r\n              value: 10,\r\n              enabled: ecmax === 10\r\n            },\r\n            {\r\n              title: '30 %',\r\n              value: 30,\r\n              enabled: ecmax === 30 || !ecmax\r\n            },\r\n            {\r\n              title: '50 %',\r\n              value: 50,\r\n              enabled: ecmax === 50\r\n            },\r\n            {\r\n              title: '75 %',\r\n              value: 75,\r\n              enabled: ecmax === 75\r\n            },\r\n            {\r\n              title: '100 %',\r\n              value: 100,\r\n              enabled: ecmax === 100\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'restrictExtent',\r\n          name: 'loc',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.icherche.restrictExtent.map',\r\n              value: 'true',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.restrictExtent.quebec',\r\n              value: 'false',\r\n              enabled: true\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(term, options || {});\r\n    if (!params.get('type').length) {\r\n      return of([]);\r\n    }\r\n    this.options.params.page = params.get('page') || '1';\r\n\r\n    return this.http.get(`${this.searchUrl}/geocode`, { params }).pipe(\r\n      map((response: IChercheResponse) => this.extractResults(response)),\r\n      catchError(err => {\r\n        err.error.toDisplay = true;\r\n        err.error.title = this.languageService.translate.instant(\r\n          this.getDefaultOptions().title\r\n        );\r\n        throw err;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getAllowedTypes() {\r\n    return this.http\r\n      .get(`${this.searchUrl}/types`)\r\n      .subscribe((types: string[]) => {\r\n        const typeSetting = this.settings.find(s => s.name === 'type');\r\n        typeSetting.values.forEach(v => {\r\n          const regex = new RegExp(`^${v.value}(\\\\.|$)`);\r\n          const typesMatched = types.filter(value => regex.test(value));\r\n          v.available = typesMatched.length > 0;\r\n          if (v.value === 'lieux') {\r\n            this.hashtagsLieuxToKeep = [\r\n              ...(new Set(\r\n                typesMatched\r\n                  .map(t => t.split('.'))\r\n                  .reduce((a, b) => a.concat(b))\r\n                  .filter(t => t !== 'lieux')\r\n              ) as any)\r\n            ];\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  private computeRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    const queryParams: any = Object.assign(\r\n      {\r\n        geometry: true,\r\n        bbox: true,\r\n        icon: true,\r\n        type:\r\n          'adresses,codes-postaux,municipalites,mrc,regadmin,lieux,entreprises,bornes-sumi'\r\n      },\r\n      this.params,\r\n      this.computeOptionsParam(term, options || {}).params,\r\n      {\r\n        q: this.computeTerm(term),\r\n        page: options.page\r\n      }\r\n    );\r\n\r\n    if (queryParams.loc === 'true') {\r\n      const [xMin, yMin, xMax, yMax] = options.extent;\r\n      queryParams.loc = `${xMin},${yMin};${xMax},${yMin};${xMax},${yMax};${xMin},${yMax};${xMin},${yMin}`;\r\n    } else if (queryParams.loc === 'false') {\r\n      delete queryParams.loc;\r\n    }\r\n\r\n    if (queryParams.q.indexOf('#') !== -1) {\r\n      queryParams.type = 'lieux';\r\n    }\r\n\r\n    return new HttpParams({ fromObject: ObjectUtils.removeUndefined(queryParams) });\r\n  }\r\n\r\n  private extractResults(response: IChercheResponse): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheData) => {\r\n      return this.formatter.formatResult(this.dataToResult(data, response));\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: IChercheData, response?: IChercheResponse): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, properties.code].join('.');\r\n\r\n    const titleHtml = data.highlight.title || data.properties.nom;\r\n    const subtitleHtml = data.highlight.title2\r\n      ? ' <small> ' + data.highlight.title2 + '</small>'\r\n      : '';\r\n    const subtitleHtml2 = data.highlight.title3\r\n      ? '<br><small> ' + data.highlight.title3 + '</small>'\r\n      : '';\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        titleHtml: titleHtml + subtitleHtml + subtitleHtml2,\r\n        icon: data.icon || 'map-marker',\r\n        nextPage: response.features.length % +this.options.params.limit === 0 && +this.options.params.page < 10\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheSearchSource.propertiesBlacklist\r\n    );\r\n\r\n    if (data.geometry === undefined) {\r\n      return Object.assign({ type: data.index }, properties);\r\n    }\r\n\r\n    const googleLinksProperties: {\r\n      GoogleMaps: string;\r\n      GoogleStreetView?: string;\r\n    } = {\r\n      GoogleMaps: ''\r\n    };\r\n\r\n    let googleMaps;\r\n    if (data.geometry.type === 'Point') {\r\n      googleMaps = GoogleLinks.getGoogleMapsCoordLink(\r\n        data.geometry.coordinates[0],\r\n        data.geometry.coordinates[1]\r\n      );\r\n    } else {\r\n      const point = pointOnFeature(data.geometry);\r\n      googleMaps = GoogleLinks.getGoogleMapsCoordLink(point.geometry.coordinates[0], point.geometry.coordinates[1]);\r\n    }\r\n\r\n    let googleMapsNom;\r\n    if (data.index === 'routes') {\r\n      googleMapsNom = GoogleLinks.getGoogleMapsNameLink(data.properties.nom + ', ' + data.properties.municipalite);\r\n    } else if (data.index === 'municipalites') {\r\n      googleMapsNom = GoogleLinks.getGoogleMapsNameLink(data.properties.nom + ', ' + data.properties.regAdmin);\r\n    } else {\r\n      googleMapsNom = GoogleLinks.getGoogleMapsNameLink(data.properties.nom || data.highlight.title);\r\n    }\r\n\r\n    googleLinksProperties.GoogleMaps = '<a href=' + googleMaps + ' target=\"_blank\">' +\r\n      this.languageService.translate.instant('igo.geo.searchByCoord') + '</a> <br /> <a href=' + googleMapsNom +\r\n        ' target=\"_blank\">' + this.languageService.translate.instant('igo.geo.searchByName') + '</a>';\r\n\r\n    if (data.geometry.type === 'Point') {\r\n      googleLinksProperties.GoogleStreetView = GoogleLinks.getGoogleStreetViewLink(\r\n        data.geometry.coordinates[0],\r\n        data.geometry.coordinates[1]\r\n      );\r\n    }\r\n\r\n    return Object.assign(\r\n      { type: data.index },\r\n      properties,\r\n      googleLinksProperties\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove hashtag from query\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTerm(term: string): string {\r\n    // Keep hashtags for \"lieux\"\r\n    const hashtags = term.match(/(#[^\\s]+)/g) || [];\r\n    let keep = false;\r\n    keep = hashtags.some(hashtag => {\r\n      const hashtagKey = hashtag.substring(1);\r\n      return this.hashtagsLieuxToKeep.some(\r\n        h =>\r\n          h\r\n            .toLowerCase()\r\n            .normalize('NFD')\r\n            .replace(/[\\u0300-\\u036f]/g, '') ===\r\n          hashtagKey\r\n            .toLowerCase()\r\n            .normalize('NFD')\r\n            .replace(/[\\u0300-\\u036f]/g, '')\r\n      );\r\n    });\r\n\r\n    if (!keep) {\r\n      term = term.replace(/(#[^\\s]*)/g, '');\r\n    }\r\n\r\n    return term.replace(/[^\\wÃ-Ã¿ !\\-\\(\\),'#]+/g, '');\r\n  }\r\n\r\n  /**\r\n   * Add hashtag to param if valid\r\n   * @param term Query with hashtag\r\n   * @param options TextSearchOptions\r\n   */\r\n  private computeOptionsParam(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): TextSearchOptions {\r\n    const hashtags = super.getHashtagsValid(term, 'type');\r\n    if (hashtags) {\r\n      options.params = Object.assign(options.params || {}, {\r\n        type: hashtags.join(',')\r\n      });\r\n    }\r\n\r\n    return options;\r\n  }\r\n}\r\n\r\n/**\r\n * IChercheReverse search source\r\n */\r\n@Injectable()\r\nexport class IChercheReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'icherchereverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: SearchSourceOptions,\r\n    injector: Injector\r\n  ) {\r\n    super(options);\r\n\r\n    this.languageService.translate\r\n      .get(this.options.title)\r\n      .subscribe(title => this.title$.next(title));\r\n\r\n    const authService = injector.get(AuthService);\r\n    if (this.settings.length) {\r\n      if (!authService) {\r\n        this.getAllowedTypes();\r\n      } else {\r\n        authService.authenticate$.subscribe(() => {\r\n          this.getAllowedTypes();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheReverseSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return IChercheReverseSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    const types =\r\n      this.options.params && this.options.params.type\r\n        ? this.options.params.type\r\n            .replace(/\\s/g, '')\r\n            .toLowerCase()\r\n            .split(',')\r\n        : ['adresses', 'municipalites', 'mrc', 'regadmin'];\r\n\r\n    return {\r\n      title: 'igo.geo.search.ichercheReverse.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/terrapi',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.icherche.type.address',\r\n              value: 'adresses',\r\n              enabled: types.indexOf('adresses') !== -1\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.road',\r\n              value: 'routes',\r\n              enabled: types.indexOf('routes') !== -1,\r\n              available: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.district',\r\n              value: 'arrondissements',\r\n              enabled: types.indexOf('arrondissements') !== -1\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.city',\r\n              value: 'municipalites',\r\n              enabled: types.indexOf('municipalites') !== -1\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.mrc',\r\n              value: 'mrc',\r\n              enabled: types.indexOf('mrc') !== -1\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.regadmin',\r\n              value: 'regadmin',\r\n              enabled: types.indexOf('regadmin') !== -1\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'radius',\r\n          name: 'buffer',\r\n          values: [\r\n            {\r\n              title: '100 m',\r\n              value: 100,\r\n              enabled: !this.options.distance || this.options.distance === 100\r\n            },\r\n            {\r\n              title: '500 m',\r\n              value: 500,\r\n              enabled: this.options.distance === 500\r\n            },\r\n            {\r\n              title: '1 km',\r\n              value: 1000,\r\n              enabled: this.options.distance === 1000\r\n            },\r\n            {\r\n              title: '2 km',\r\n              value: 2000,\r\n              enabled: this.options.distance === 2000\r\n            },\r\n            {\r\n              title: '5 km',\r\n              value: 5000,\r\n              enabled: this.options.distance === 5000\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n    if (!params.get('type').length) {\r\n      return of([]);\r\n    }\r\n    return this.http.get(`${this.searchUrl}/locate`, { params }).pipe(\r\n      map((response: IChercheReverseResponse) => {\r\n        return this.extractResults(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  private getAllowedTypes() {\r\n    return this.http\r\n      .get(`${this.searchUrl}/types`)\r\n      .subscribe((types: string[]) => {\r\n        const typeSetting = this.settings.find(s => s.name === 'type');\r\n        typeSetting.values.forEach(v => {\r\n          v.available = types.indexOf(v.value as string) > -1;\r\n        });\r\n      });\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    if (options.distance || this.options.distance) {\r\n      options.params = Object.assign(options.params || {}, {\r\n        buffer: options.distance || this.options.distance\r\n      });\r\n    }\r\n\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          loc: lonLat.join(','),\r\n          sort: 'distance',\r\n          geometry: true,\r\n          icon: true\r\n        },\r\n        options.params || {},\r\n        this.params\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: IChercheReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private getSubtitle(data: IChercheReverseData) {\r\n    if (!this.settings.length) {\r\n      return '';\r\n    }\r\n    let subtitle = '';\r\n    switch (data.properties.type) {\r\n      case 'arrondissements':\r\n        subtitle = data.properties.municipalite + ' (Arrondissement)';\r\n        break;\r\n      default:\r\n        const typeSetting = this.settings.find(s => s.name === 'type');\r\n        const type = typeSetting.values.find(\r\n          t => t.value === data.properties.type\r\n        );\r\n        if (type) {\r\n          subtitle = this.languageService.translate.instant(type.title);\r\n        }\r\n    }\r\n    return subtitle;\r\n  }\r\n\r\n  private dataToResult(data: IChercheReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), properties.type, properties.code].join('.');\r\n\r\n    const titleHtml = data.properties.nom;\r\n    const subtitleHtml = ' <small> ' + this.getSubtitle(data) + '</small>';\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        titleHtml: titleHtml + subtitleHtml,\r\n        icon: data.icon || 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheReverseData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n\r\n  private computeExtent(\r\n    data: IChercheReverseData\r\n  ): [number, number, number, number] | undefined {\r\n    return data.bbox\r\n      ? [data.bbox[0], data.bbox[2], data.bbox[1], data.bbox[3]]\r\n      : undefined;\r\n  }\r\n}\r\n","import { Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  IChercheSearchSource,\r\n  IChercheSearchResultFormatter,\r\n  IChercheReverseSearchSource\r\n} from './icherche';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultIChercheSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new IChercheSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultIChercheSearchResultFormatter() {\r\n  return {\r\n    provide: IChercheSearchResultFormatter,\r\n    useFactory: defaultIChercheSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * ICherche search source factory\r\n * @ignore\r\n */\r\nexport function ichercheSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService,\r\n  formatter: IChercheSearchResultFormatter,\r\n  injector: Injector\r\n) {\r\n  return new IChercheSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${IChercheSearchSource.id}`),\r\n    formatter,\r\n    injector\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search source\r\n */\r\nexport function provideIChercheSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheSearchSourceFactory,\r\n    multi: true,\r\n    deps: [\r\n      HttpClient,\r\n      LanguageService,\r\n      ConfigService,\r\n      IChercheSearchResultFormatter,\r\n      Injector\r\n    ]\r\n  };\r\n}\r\n\r\n/**\r\n * IChercheReverse search source factory\r\n * @ignore\r\n */\r\nexport function ichercheReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService,\r\n  injector: Injector\r\n) {\r\n  return new IChercheReverseSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${IChercheReverseSearchSource.id}`),\r\n    injector\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideIChercheReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, LanguageService, ConfigService, Injector]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { Observable, BehaviorSubject, of } from 'rxjs';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, ReverseSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { GoogleLinks } from '../../../utils/googleLinks';\r\nimport { Projection } from '../../../map/shared/projection.interfaces';\r\nimport { lonLatConversion, roundCoordTo } from '../../../map/shared/map.utils';\r\nimport { OsmLinks } from '../../../utils';\r\n\r\n@Injectable()\r\nexport class CoordinatesSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n/**\r\n * CoordinatesReverse search source\r\n */\r\n@Injectable()\r\nexport class CoordinatesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'coordinatesreverse';\r\n  static type = FEATURE;\r\n\r\n  private projections;\r\n\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    @Inject('options') options: SearchSourceOptions,\r\n    private languageService: LanguageService,\r\n    @Inject('projections') projections: Projection[],\r\n  ) {\r\n    super(options);\r\n    this.projections = projections;\r\n    this.languageService.translate\r\n      .get(this.options.title)\r\n      .subscribe(title => this.title$.next(title));\r\n  }\r\n\r\n  getId(): string {\r\n    return CoordinatesReverseSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return CoordinatesReverseSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'igo.geo.search.coordinates.name',\r\n      order: 1,\r\n      showInSettings: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    return of([this.dataToResult(lonLat)]);\r\n  }\r\n\r\n  private dataToResult(data: [number, number]): SearchResult<Feature> {\r\n    const convertedCoord = lonLatConversion(data, this.projections);\r\n    const coords = convertedCoord.reduce((obj, item) => (\r\n      obj[item.alias] = item.igo2CoordFormat, obj), {});\r\n\r\n    const roundedCoordString = roundCoordTo(data, 6).join(', ');\r\n\r\n    const coordKey =  this.languageService.translate.instant('igo.geo.search.coordinates.coord');\r\n    const coordLonLat = {};\r\n    coordLonLat[coordKey] = roundedCoordString;\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [data[0], data[1]]\r\n        },\r\n        extent: undefined,\r\n        properties: Object.assign({},\r\n          coordLonLat,\r\n          coords,\r\n          {\r\n            GoogleMaps: GoogleLinks.getGoogleMapsCoordLink(data[0], data[1]),\r\n            GoogleStreetView: GoogleLinks.getGoogleStreetViewLink(\r\n              data[0],\r\n              data[1]\r\n            ),\r\n            OpenStreetMap: OsmLinks.getOpenStreetMapLink(data[0], data[1], 14)\r\n          }),\r\n        meta: {\r\n          id: data[0].toString() + ',' + data[1].toString(),\r\n          title: roundedCoordString\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id: data[0].toString() + ',' + data[1].toString(),\r\n        title: roundedCoordString,\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  CoordinatesReverseSearchSource,\r\n  CoordinatesSearchResultFormatter\r\n} from './coordinates';\r\nimport { Projection } from '../../../map/shared/projection.interfaces';\r\nimport { ProjectionService } from '../../../map/shared/projection.service';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultCoordinatesSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new CoordinatesSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultCoordinatesSearchResultFormatter() {\r\n  return {\r\n    provide: CoordinatesSearchResultFormatter,\r\n    useFactory: defaultCoordinatesSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * CoordinatesReverse search source factory\r\n * @ignore\r\n */\r\nexport function CoordinatesReverseSearchSourceFactory(\r\n  config: ConfigService,\r\n  languageService: LanguageService,\r\n  _projectionService: ProjectionService\r\n) {\r\n  return new CoordinatesReverseSearchSource(\r\n    config.getConfig(`searchSources.${CoordinatesReverseSearchSource.id}`),\r\n    languageService,\r\n    (config.getConfig('projections') as Projection[]) || []\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideCoordinatesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: CoordinatesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService, LanguageService, ProjectionService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, BehaviorSubject, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { getResolutionFromScale } from '../../../map/shared/map.utils';\r\nimport { LAYER } from '../../../layer';\r\nimport { QueryableDataSourceOptions, QueryFormat } from '../../../query';\r\nimport { QueryHtmlTarget } from './../../../query/shared/query.enums';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { TextSearchOptions } from './source.interfaces';\r\nimport {\r\n  ILayerSearchSourceOptions,\r\n  ILayerData,\r\n  ILayerItemResponse,\r\n  ILayerServiceResponse,\r\n  ILayerDataSource\r\n} from './ilayer.interfaces';\r\n\r\n@Injectable()\r\nexport class ILayerSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(data: ILayerData): ILayerData {\r\n    const allowedKey = [\r\n      'title',\r\n      'abstract',\r\n      'groupTitle',\r\n      'metadataUrl',\r\n      'downloadUrl',\r\n      'urlInfo',\r\n      'name'\r\n    ];\r\n\r\n    const property = Object.entries(data.properties)\r\n      .filter(([key]) => allowedKey.indexOf(key) !== -1)\r\n      .reduce((out: { [key: string]: any }, entries: [string, any]) => {\r\n        const [key, value] = entries;\r\n        let newKey;\r\n        try {\r\n          newKey = this.languageService.translate.instant(\r\n            'igo.geo.search.ilayer.properties.' + key\r\n          );\r\n        } catch (e) {\r\n          newKey = key;\r\n        }\r\n        out[newKey] = value ? value : '';\r\n        return out;\r\n      }, {});\r\n\r\n    const dataR = Object.assign({}, data);\r\n    dataR.properties = property as ILayerDataSource;\r\n\r\n    return dataR;\r\n  }\r\n}\r\n\r\n/**\r\n * ILayer search source\r\n */\r\n@Injectable()\r\nexport class ILayerSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'ilayer';\r\n  static type = LAYER;\r\n\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: ILayerSearchSourceOptions,\r\n    @Inject(ILayerSearchResultFormatter)\r\n    private formatter: ILayerSearchResultFormatter\r\n  ) {\r\n    super(options);\r\n    this.languageService.translate\r\n      .get(this.options.title)\r\n      .subscribe(title => this.title$.next(title));\r\n  }\r\n\r\n  getId(): string {\r\n    return ILayerSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return ILayerSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): ILayerSearchSourceOptions {\r\n    const limit =\r\n      this.options.params && this.options.params.limit\r\n        ? Number(this.options.params.limit)\r\n        : undefined;\r\n    return {\r\n      title: 'igo.geo.search.ilayer.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/layers/search',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.ilayer.type.layer',\r\n              value: 'layer',\r\n              enabled: true,\r\n              hashtags: ['layer', 'layers', 'couche', 'couches']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.ilayer.type.groupLayer',\r\n              value: 'group',\r\n              enabled: false,\r\n              hashtags: ['gr-layer', 'gr-layers', 'gr-couche', 'gr-couches']\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '1',\r\n              value: 1,\r\n              enabled: limit === 1\r\n            },\r\n            {\r\n              title: '5',\r\n              value: 5,\r\n              enabled: limit === 5 || !limit\r\n            },\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: limit === 10\r\n            },\r\n            {\r\n              title: '25',\r\n              value: 25,\r\n              enabled: limit === 25\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: limit === 50\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a layer by name or keyword\r\n   * @param term Layer name or keyword\r\n   * @returns Observable of <SearchResult<LayerOptions>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<ILayerItemResponse>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    if (!params.get('q') || !params.get('type')) {\r\n      return of([]);\r\n    }\r\n    this.options.params.page = params.get('page') || '1';\r\n\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(\r\n        map((response: ILayerServiceResponse) => this.extractResults(response))\r\n      );\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: ObjectUtils.removeUndefined(\r\n        Object.assign(\r\n          {\r\n            q: this.computeTerm(term)\r\n          },\r\n          this.params,\r\n          this.computeOptionsParam(term, options || {}).params,\r\n          {\r\n            page: options.page\r\n          }\r\n        )\r\n      )\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove hashtag from query\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTerm(term: string): string {\r\n    return term.replace(/(#[^\\s]*)/g, '').replace(/[^\\wÃ-Ã¿ !\\-\\(\\),'#]+/g, '');\r\n  }\r\n\r\n  /**\r\n   * Add hashtag to param if valid\r\n   * @param term Query with hashtag\r\n   * @param options TextSearchOptions\r\n   */\r\n  private computeOptionsParam(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): TextSearchOptions {\r\n    const hashtags = super.getHashtagsValid(term, 'type');\r\n    if (hashtags) {\r\n      options.params = Object.assign(options.params || {}, {\r\n        type: hashtags.join(',')\r\n      });\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  private extractResults(\r\n    response: ILayerServiceResponse\r\n  ): SearchResult<ILayerItemResponse>[] {\r\n    return response.items.map((data: ILayerData) =>\r\n      this.dataToResult(data, response)\r\n    );\r\n  }\r\n\r\n  private dataToResult(\r\n    data: ILayerData,\r\n    response?: ILayerServiceResponse\r\n  ): SearchResult<ILayerItemResponse> {\r\n    const layerOptions = this.computeLayerOptions(data);\r\n\r\n    const titleHtml = data.highlight.title || data.properties.title;\r\n    const groupTitle = data.highlight.groupTitle || data.properties.groupTitle;\r\n    const subtitleHtml = groupTitle\r\n      ? ' <small style=\"color: #6f6969\"> ' + groupTitle + '</small>'\r\n      : '';\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: LAYER,\r\n        id: [this.getId(), data.properties.id].join('.'),\r\n        title: data.properties.title,\r\n        titleHtml: titleHtml + subtitleHtml,\r\n        icon: data.properties.type === 'Layer' ? 'layers' : 'map',\r\n        nextPage:\r\n          response.items.length % +this.options.params.limit === 0 &&\r\n          +this.options.params.page < 10\r\n      },\r\n      data: layerOptions\r\n    };\r\n  }\r\n\r\n  private computeLayerOptions(data: ILayerData): ILayerItemResponse {\r\n    const url = data.properties.url;\r\n    const queryParams: QueryableDataSourceOptions = this.extractQueryParamsFromSourceUrl(\r\n      url\r\n    );\r\n    return ObjectUtils.removeUndefined({\r\n      sourceOptions: {\r\n        id: data.properties.id,\r\n        type: data.properties.format,\r\n        url,\r\n        queryFormat: queryParams.queryFormat,\r\n        queryHtmlTarget: queryParams.queryHtmlTarget,\r\n        params: {\r\n          LAYERS: data.properties.name\r\n        },\r\n        optionsFromCapabilities: true,\r\n        crossOrigin: 'anonymous'\r\n      },\r\n      title: data.properties.title,\r\n      maxResolution: getResolutionFromScale(\r\n        Number(data.properties.maxScaleDenom)\r\n      ),\r\n      minResolution: getResolutionFromScale(\r\n        Number(data.properties.minScaleDenom)\r\n      ),\r\n      metadata: {\r\n        url: data.properties.metadataUrl,\r\n        extern: true\r\n      },\r\n      properties: this.formatter.formatResult(data).properties\r\n    });\r\n  }\r\n\r\n  private extractQueryParamsFromSourceUrl(\r\n    url: string\r\n  ): { queryFormat: QueryFormat; queryHtmlTarget: QueryHtmlTarget } {\r\n    let queryFormat;\r\n    let queryHtmlTarget;\r\n    const formatOpt = (this.options as ILayerSearchSourceOptions).queryFormat;\r\n    if (formatOpt) {\r\n      for (const key of Object.keys(formatOpt)) {\r\n        const value = formatOpt[key];\r\n        if (value === '*') {\r\n          queryFormat = QueryFormat[key.toUpperCase()];\r\n          break;\r\n        }\r\n\r\n        const urls = ((value as any) as { urls: string[] }).urls;\r\n        if (Array.isArray(urls)) {\r\n          urls.forEach(urlOpt => {\r\n            if (url.indexOf(urlOpt) !== -1) {\r\n              queryFormat = QueryFormat[key.toUpperCase()];\r\n            }\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (\r\n        queryFormat === QueryFormat.HTML ||\r\n        queryFormat === QueryFormat.HTMLGML2\r\n      ) {\r\n        queryHtmlTarget = 'iframe';\r\n      }\r\n    }\r\n\r\n    return {\r\n      queryFormat,\r\n      queryHtmlTarget\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { ILayerSearchSource, ILayerSearchResultFormatter } from './ilayer';\r\n\r\n/**\r\n * ILayer search result formatter factory\r\n * @ignore\r\n */\r\nexport function ilayerSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new ILayerSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ILayer search result formatter\r\n */\r\nexport function provideILayerSearchResultFormatter() {\r\n  return {\r\n    provide: ILayerSearchResultFormatter,\r\n    useFactory: ilayerSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * ILayer search source factory\r\n * @ignore\r\n */\r\nexport function ilayerSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService,\r\n  formatter: ILayerSearchResultFormatter\r\n) {\r\n  return new ILayerSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${ILayerSearchSource.id}`),\r\n    formatter\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ILayer search source\r\n */\r\nexport function provideILayerSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ilayerSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, LanguageService, ConfigService, ILayerSearchResultFormatter]\r\n  };\r\n}\r\n","import { FEATURE } from '../../feature';\r\nimport { LAYER } from '../../layer';\r\n\r\nexport const SEARCH_TYPES = [FEATURE, LAYER];\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-selector',\r\n  templateUrl: './search-selector.component.html',\r\n  styleUrls: ['./search-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchSelectorComponent implements OnInit, OnDestroy {\r\n\r\n  readonly searchType$: BehaviorSubject<string> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the search type\r\n   */\r\n  private searchType$$: Subscription;\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * The search type enabled\r\n   */\r\n  @Input()\r\n  set searchType(value: string) { this.setSearchType(value); }\r\n  get searchType(): string { return this.searchType$.value; }\r\n\r\n  /**\r\n   * Event emitted when the enabled search type changes\r\n   */\r\n  @Output() searchTypeChange = new EventEmitter<string>();\r\n\r\n  constructor(private searchSourceService: SearchSourceService) {}\r\n\r\n  ngOnInit() {\r\n    this.searchType$$ = this.searchType$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe((searchType: string) => this.onSetSearchType(searchType));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.searchType$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Enable the selected search type\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.setSearchType(searchType);\r\n  }\r\n\r\n  /**\r\n   * Get a search type's title. The title\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  getSearchTypeTitle(searchType: string) {\r\n    return `igo.geo.search.${searchType.toLowerCase()}.title`;\r\n  }\r\n\r\n  /**\r\n   * Emit an event and enable the search sources of the given type.\r\n   * @param searchType Search type\r\n   */\r\n  private setSearchType(searchType: string | undefined) {\r\n    this.searchType$.next(searchType);\r\n  }\r\n\r\n  private onSetSearchType(searchType: string) {\r\n    if (searchType === undefined || searchType === null) {\r\n      return;\r\n    }\r\n\r\n    this.searchSourceService.enableSourcesByType(searchType);\r\n    this.searchTypeChange.emit(searchType);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatTabsModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { SearchSelectorComponent } from './search-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatTabsModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSelectorComponent],\r\n  declarations: [SearchSelectorComponent]\r\n})\r\nexport class IgoSearchSelectorModule {}\r\n","import { MatCheckboxChange, MatRadioChange } from '@angular/material';\r\n\r\nimport {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  HostListener,\r\n  Input\r\n} from '@angular/core';\r\n\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\nimport { SearchSource } from '../shared/sources/source';\r\nimport {\r\n  SearchSourceSettings,\r\n  SettingOptions\r\n} from '../shared/sources/source.interfaces';\r\nimport { sourceCanReverseSearchAsSummary, sourceCanSearch, sourceCanReverseSearch } from '../shared/search.utils';\r\nimport { MediaService } from '@igo2/core';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-settings',\r\n  templateUrl: './search-settings.component.html',\r\n  styleUrls: ['./search-settings.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchSettingsComponent implements OnInit {\r\n\r\n  public hasPointerReverseSearchSource: boolean = false;\r\n  public searchSourcesAllEnabled: boolean = false;\r\n\r\n  public buffer = [];\r\n  public lastKeyTime = Date.now();\r\n\r\n  get isTouchScreen(): boolean {\r\n    return this.mediaService.isTouchScreen();\r\n  }\r\n\r\n  @Input() pointerSummaryEnabled: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the enabled search source changes\r\n   */\r\n  @Output() searchSourceChange = new EventEmitter<SearchSource>();\r\n\r\n  /**\r\n   * Event emitted when the pointer summary is activated\r\n   */\r\n  @Output() pointerSummaryStatus = new EventEmitter<boolean>();\r\n\r\n  @HostListener('document:keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n\r\n    if (event.keyCode === 113) {\r\n      this.pointerSummaryEnabled = !this.pointerSummaryEnabled;\r\n      this.pointerSummaryStatus.emit(this.pointerSummaryEnabled);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private searchSourceService: SearchSourceService,\r\n    private mediaService: MediaService\r\n    ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.hasPointerReverseSearchSource = this.hasReverseSearchSourcesForPointerSummary();\r\n  }\r\n\r\n  /**\r\n   * Get all search sources\r\n   * @internal\r\n   */\r\n  getSearchSources(): SearchSource[] {\r\n    const textSearchSources = this.searchSourceService\r\n      .getSources()\r\n      .filter(sourceCanSearch)\r\n      .filter(s => s.available && s.getId() !== 'map' && s.showInSettings);\r\n\r\n    const reverseSearchSources = this.searchSourceService\r\n      .getSources()\r\n      .filter(sourceCanReverseSearch)\r\n      .filter(s => s.available && s.getId() !== 'map' && s.showInSettings);\r\n    const sources = textSearchSources.concat(reverseSearchSources);\r\n    this.computeSourcesCheckAllBehavior(sources);\r\n    return sources;\r\n  }\r\n\r\n  /**\r\n   * Get all search sources usable for pointer summary\r\n   * @internal\r\n   */\r\n  hasReverseSearchSourcesForPointerSummary(): boolean {\r\n    if (this.searchSourceService.getEnabledSources().filter(sourceCanReverseSearchAsSummary).length) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggered when a setting is checked (checkbox style)\r\n   * @internal\r\n   */\r\n  settingsValueCheckedCheckbox(\r\n    event: MatCheckboxChange,\r\n    source: SearchSource,\r\n    setting: SearchSourceSettings,\r\n    settingValue: SettingOptions\r\n  ) {\r\n    settingValue.enabled = event.checked;\r\n    source.setParamFromSetting(setting);\r\n    this.searchSourceChange.emit(source);\r\n  }\r\n\r\n  /**\r\n   * Defining the action to do for check/uncheck checkboxes (settings)\r\n   * return true if all checkbox must be checked\r\n   * return false if all checkbox must be unchecked\r\n   * @internal\r\n   */\r\n  computeSettingCheckAllBehavior(setting: SearchSourceSettings) {\r\n    if (setting.allEnabled === undefined) {\r\n      if (setting.values.find(settingValue => settingValue.enabled)) {\r\n        setting.allEnabled = false;\r\n      } else {\r\n        setting.allEnabled = true;\r\n      }\r\n    } else {\r\n      setting.allEnabled = !setting.allEnabled;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Defining the action to do for check/uncheck checkboxes (sources)\r\n   * return true if all checkbox must be checked\r\n   * return false if all checkbox must be unchecked\r\n   * @internal\r\n   */\r\n  computeSourcesCheckAllBehavior(sources: SearchSource[]) {\r\n    const enabledSourcesCnt = sources.filter(source => source.enabled).length;\r\n    const disabledSourcesCnt = sources.filter(source => !source.enabled).length;\r\n    this.searchSourcesAllEnabled =  enabledSourcesCnt >= disabledSourcesCnt ? false : true;\r\n  }\r\n\r\n  /**\r\n   * Triggered when the check all / uncheck all type is clicked,\r\n   * @internal\r\n   */\r\n  checkUncheckAll(event, source: SearchSource, setting: SearchSourceSettings) {\r\n    event.stopPropagation();\r\n    this.computeSettingCheckAllBehavior(setting);\r\n    setting.values.forEach(settingValue => {\r\n      settingValue.enabled = setting.allEnabled;\r\n    });\r\n    source.setParamFromSetting(setting);\r\n    this.searchSourceChange.emit(source);\r\n  }\r\n\r\n  /**\r\n   * Triggered when the check all / uncheck all type is clicked,\r\n   * @internal\r\n   */\r\n  checkUncheckAllSources(event) {\r\n    event.stopPropagation();\r\n    this.getSearchSources().map(source => {\r\n      source.enabled = this.searchSourcesAllEnabled;\r\n      this.searchSourceChange.emit(source);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Triggered when a setting is checked (radiobutton style)\r\n   * @internal\r\n   */\r\n  settingsValueCheckedRadioButton(\r\n    event: MatRadioChange,\r\n    source: SearchSource,\r\n    setting: SearchSourceSettings,\r\n    settingValue: SettingOptions\r\n  ) {\r\n    setting.values.forEach(conf => {\r\n      if (conf.value !== settingValue.value) {\r\n        conf.enabled = !event.source.checked;\r\n      } else {\r\n        conf.enabled = event.source.checked;\r\n      }\r\n    });\r\n    source.setParamFromSetting(setting);\r\n    this.searchSourceChange.emit(source);\r\n  }\r\n\r\n  onCheckSearchSource(event: MatCheckboxChange, source: SearchSource) {\r\n    source.enabled = event.checked;\r\n    this.searchSourceChange.emit(source);\r\n  }\r\n\r\n  getAvailableValues(setting: SearchSourceSettings) {\r\n    return setting.values.filter(s => s.available !== false);\r\n  }\r\n\r\n  getAvailableHashtagsValues(setting: SettingOptions) {\r\n    if (setting.hashtags) {\r\n      const output: string[] = [];\r\n      for (let value of setting.hashtags) {\r\n        value = '#' + value;\r\n        output.push(value);\r\n      }\r\n      return output;\r\n    }\r\n    return;\r\n  }\r\n\r\n  stopPropagation(event) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  changePointerReverseSearch(event, fromTitleButton?: boolean) {\r\n    if (fromTitleButton) {\r\n      event.stopPropagation();\r\n      this.pointerSummaryEnabled = !this.pointerSummaryEnabled;\r\n    } else {\r\n      this.pointerSummaryEnabled = event.checked;\r\n    }\r\n\r\n    this.pointerSummaryStatus.emit(this.pointerSummaryEnabled);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SearchSettingsComponent } from './search-settings.component';\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatCheckboxModule,\r\n  MatDividerModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  declarations: [SearchSettingsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatCheckboxModule,\r\n    MatDividerModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSettingsComponent]\r\n})\r\nexport class IgoSearchSettingsModule { }\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { BehaviorSubject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { EntityStore } from '@igo2/common';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchResult, Research } from '../shared/search.interfaces';\r\nimport { SearchService } from '../shared/search.service';\r\n\r\n/**\r\n * Searchbar that triggers a research in all search sources enabled.\r\n * If the store input is defined, the search results will be loaded\r\n * into that store. An event is always emitted when a research is completed.\r\n */\r\n@Component({\r\n  selector: 'igo-search-bar',\r\n  templateUrl: './search-bar.component.html',\r\n  styleUrls: ['./search-bar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchBarComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Invalid keys\r\n   */\r\n  static invalidKeys = [\r\n    'Control',\r\n    'Shift',\r\n    'Alt',\r\n    'ArrowDown',\r\n    'ArrowUp',\r\n    'ArrowRight',\r\n    'ArrowLeft'\r\n  ];\r\n\r\n  readonly placeholder$: BehaviorSubject<string> = new BehaviorSubject(\r\n    'igo.geo.search.placeholder'\r\n  );\r\n\r\n  readonly empty$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  /**\r\n   * Subscription to the ssearch bar term\r\n   */\r\n  private term$$: Subscription;\r\n\r\n  /**\r\n   * Search term stream\r\n   */\r\n  private stream$: BehaviorSubject<string> = new BehaviorSubject('');\r\n\r\n  /**\r\n   * Subscription to the search term stream\r\n   */\r\n  private stream$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to the search type\r\n   */\r\n  private searchType$$: Subscription;\r\n\r\n  private researches$$: Subscription[];\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input()\r\n  set searchType(value: string) {\r\n    this.setSearchType(value);\r\n  }\r\n  get searchType(): string {\r\n    return this.searchType$.value;\r\n  }\r\n  readonly searchType$: BehaviorSubject<string> = new BehaviorSubject(\r\n    undefined\r\n  );\r\n\r\n  /**\r\n   * Event emitted when the pointer summary is activated by the searchbar setting\r\n   */\r\n  @Output() pointerSummaryStatus = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input()\r\n  set term(value: string) {\r\n    this.setTerm(value);\r\n  }\r\n  get term(): string {\r\n    return this.term$.value;\r\n  }\r\n  readonly term$: BehaviorSubject<string> = new BehaviorSubject('');\r\n\r\n  /**\r\n   * Whether this component is disabled\r\n   */\r\n  @Input()\r\n  set disabled(value: boolean) {\r\n    this.disabled$.next(value);\r\n  }\r\n  get disabled(): boolean {\r\n    return this.disabled$.value;\r\n  }\r\n  readonly disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  @Input() pointerSummaryEnabled: boolean = false;\r\n  /**\r\n   * Whether a float label should be displayed\r\n   */\r\n  @Input() floatLabel: FloatLabelType = 'never';\r\n\r\n  /**\r\n   * Icons color (search and clear)\r\n   */\r\n  @Input() color = 'primary';\r\n\r\n  /**\r\n   * Debounce time between each keystroke\r\n   */\r\n  @Input() debounce = 200;\r\n\r\n  /**\r\n   * Minimum term length required to trigger a research\r\n   */\r\n  @Input() minLength = 2;\r\n\r\n  /**\r\n   * Search icon\r\n   */\r\n  @Input() searchIcon: string;\r\n\r\n  /**\r\n   * Search Selector\r\n   */\r\n  @Input() searchSelector = false;\r\n\r\n  /**\r\n   * Search Settings\r\n   */\r\n  @Input() searchSettings = false;\r\n\r\n  /**\r\n   * Force coordinates in north america\r\n   */\r\n  @Input() forceNA = false;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * Event emitted when the search term changes\r\n   */\r\n  @Output() searchTermChange = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Event emitted when a research is completed\r\n   */\r\n  @Output() search = new EventEmitter<{\r\n    research: Research;\r\n    results: SearchResult[];\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the search type changes\r\n   */\r\n  @Output() searchTypeChange = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Event emitted when the search type changes\r\n   */\r\n  @Output() clearFeature = new EventEmitter();\r\n\r\n  /**\r\n   * Event emitted when the search settings changes\r\n   */\r\n  @Output() searchSettingsChange = new EventEmitter();\r\n\r\n  /**\r\n   * Input element\r\n   * @internal\r\n   */\r\n  @ViewChild('input') input: ElementRef;\r\n\r\n  /**\r\n   * Whether the search bar is empty\r\n   * @internal\r\n   */\r\n  get empty(): boolean {\r\n    return this.term.length === 0;\r\n  }\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private searchService: SearchService\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.term$$ = this.term$.subscribe((term: string) => {\r\n      this.empty$.next(term === undefined || term.length === 0);\r\n    });\r\n\r\n    this.stream$$ = this.stream$\r\n      .pipe(\r\n        debounce((term: string) => (term === '' ? EMPTY : timer(this.debounce)))\r\n      )\r\n      .subscribe((term: string) => this.onSetTerm(term));\r\n\r\n    this.searchType$$ = this.searchType$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe((searchType: string) => this.onSetSearchType(searchType));\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the search term stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.term$$.unsubscribe();\r\n    this.stream$$.unsubscribe();\r\n    this.searchType$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * When a user types, validates the key and send it into the\r\n   * stream if it's valid\r\n   * @param event Keyboard event\r\n   * @internal\r\n   */\r\n  onKeyup(event: KeyboardEvent) {\r\n    const key = event.key;\r\n    if (!this.keyIsValid(key)) {\r\n      return;\r\n    }\r\n    const term = (event.target as HTMLInputElement).value;\r\n    this.setTerm(term);\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   * @internal\r\n   */\r\n  onClearButtonClick() {\r\n    this.clear();\r\n    this.clearFeature.emit();\r\n  }\r\n\r\n  /**\r\n   * Update search type\r\n   * @param searchType Enabled search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.setSearchType(searchType);\r\n  }\r\n\r\n  /**\r\n   * Update the placeholder with the enabled search type. The placeholder\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Enabled search type\r\n   * @internal\r\n   */\r\n  setSearchType(searchType: string) {\r\n    this.searchType$.next(searchType);\r\n  }\r\n\r\n  onSearchSettingsChange() {\r\n    this.doSearch(this.term);\r\n    this.searchSettingsChange.emit();\r\n  }\r\n\r\n  /**\r\n   * Send the term into the stream only if this component is not disabled\r\n   * @param term Search term\r\n   */\r\n  setTerm(term: string) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    term = term || '';\r\n\r\n    if (term !== this.term) {\r\n      this.term$.next(term);\r\n    }\r\n\r\n    const slug = term.replace(/(#[^\\s]*)/g, '').trim();\r\n    if (slug.length >= this.minLength || slug.length === 0) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   */\r\n  private clear() {\r\n    this.term$.next('');\r\n    this.stream$.next('');\r\n    this.input.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Validate if a given key stroke is a valid input\r\n   */\r\n  private keyIsValid(key: string) {\r\n    return SearchBarComponent.invalidKeys.indexOf(key) === -1;\r\n  }\r\n\r\n  /**\r\n   * When the search term changes, emit an event and trigger a\r\n   * research in every enabled search sources.\r\n   * @param term Search term\r\n   */\r\n  private onSetTerm(term: string | undefined) {\r\n    this.searchTermChange.emit(term);\r\n    this.doSearch(term);\r\n  }\r\n\r\n  private onSetSearchType(searchType: string) {\r\n    if (searchType === undefined || searchType === null) {\r\n      return;\r\n    }\r\n\r\n    this.searchTypeChange.emit(searchType);\r\n\r\n    const placeholder = `igo.geo.search.${searchType.toLowerCase()}.placeholder`;\r\n    this.placeholder$.next(placeholder);\r\n\r\n    this.setTerm(this.term);\r\n  }\r\n\r\n  /**\r\n   * Execute the search\r\n   * @param term Search term\r\n   */\r\n  private doSearch(term: string | undefined) {\r\n    if (this.researches$$) {\r\n      this.researches$$.map(research => research.unsubscribe());\r\n      this.researches$$ = undefined;\r\n    }\r\n\r\n    const slug = term ? term.replace(/(#[^\\s]*)/g, '').trim() : '';\r\n    if (slug === '') {\r\n      if (this.store !== undefined) {\r\n        this.store.clear();\r\n      }\r\n      return;\r\n    }\r\n\r\n    const researches = this.searchService.search(term, {\r\n      forceNA: this.forceNA\r\n    });\r\n    this.researches$$ = researches.map(research => {\r\n      return research.request.subscribe((results: SearchResult[]) => {\r\n        this.onResearchCompleted(research, results);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When a research  is completed, emit an event and update\r\n   * the store's items.\r\n   * @param research Research\r\n   * @param results Research results\r\n   */\r\n  private onResearchCompleted(research: Research, results: SearchResult[]) {\r\n    this.search.emit({ research, results });\r\n\r\n    if (this.store !== undefined) {\r\n      const newResults = this.store\r\n        .all()\r\n        .filter(result => result.source !== research.source)\r\n        .concat(results);\r\n      this.store.load(newResults);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  OnInit,\r\n  Optional,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { SearchBarComponent } from './search-bar.component';\r\n\r\n@Directive({\r\n  selector: '[igoSearchUrlParam]'\r\n})\r\nexport class SearchUrlParamDirective implements OnInit {\r\n  constructor(\r\n    @Self() private component: SearchBarComponent,\r\n    private ref: ChangeDetectorRef,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.route && this.route.options.searchKey) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const searchParams = params[this.route.options.searchKey as string];\r\n        if (searchParams) {\r\n          this.component.setTerm(searchParams);\r\n          this.ref.detectChanges();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoSearchSelectorModule } from '../search-selector/search-selector.module';\r\nimport { IgoSearchSettingsModule } from '../search-settings/search-settings.module';\r\nimport { SearchBarComponent } from './search-bar.component';\r\nimport { SearchUrlParamDirective } from './search-url-param.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  exports: [\r\n    SearchBarComponent,\r\n  ],\r\n  declarations: [\r\n    SearchBarComponent,\r\n    SearchUrlParamDirective\r\n  ]\r\n})\r\nexport class IgoSearchBarModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ContentChild,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  TemplateRef,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { Observable, EMPTY, timer, BehaviorSubject } from 'rxjs';\r\nimport { debounce, map } from 'rxjs/operators';\r\n\r\nimport { EntityStore, EntityStoreWatcher } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { TextSearchOptions } from '../shared/sources/source.interfaces';\r\nimport { SearchService } from '../shared/search.service';\r\nimport { SearchResult, Research } from '../shared/search.interfaces';\r\nimport { SearchSource } from '../shared/sources/source';\r\n\r\nexport enum SearchResultMode {\r\n  Grouped = 'grouped',\r\n  Flat = 'flat'\r\n}\r\n\r\n/**\r\n * List of search results with focus and selection capabilities.\r\n * This component is dumb and only emits events.\r\n */\r\n@Component({\r\n  selector: 'igo-search-results',\r\n  templateUrl: './search-results.component.html',\r\n  styleUrls: ['./search-results.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Reference to the SearchResultMode enum\r\n   * @internal\r\n   */\r\n  public searchResultMode = SearchResultMode;\r\n\r\n  /**\r\n   * Search results store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<SearchResult>;\r\n\r\n  public pageIterator: {sourceId: string}[] = [];\r\n\r\n  public collapsed: {sourceId: string}[] = [];\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * to show hide results icons\r\n   */\r\n  @Input() showIcons: boolean;\r\n\r\n  /**\r\n   * Search results display mode\r\n   */\r\n  @Input() mode: SearchResultMode = SearchResultMode.Grouped;\r\n\r\n  /**\r\n   * Whether there should be a zoom button\r\n   */\r\n  @Input() withZoomButton = false;\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input()\r\n  get term(): string {\r\n    return this._term;\r\n  }\r\n  set term(value: string) {\r\n    this._term = value;\r\n    this.pageIterator = [];\r\n  }\r\n  public _term: string;\r\n\r\n  @Input() settingsChange$ = new BehaviorSubject<boolean>(undefined);\r\n\r\n  /**\r\n   * Event emitted when a result is focused\r\n   */\r\n  @Output() resultFocus = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a result is unfocused\r\n   */\r\n  @Output() resultUnfocus = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a result is selected\r\n   */\r\n  @Output() resultSelect = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a research is completed after displaying more results is clicked\r\n   */\r\n  @Output() moreResults = new EventEmitter<{\r\n    research: Research;\r\n    results: SearchResult[];\r\n  }>();\r\n\r\n  /**\r\n   * Events emitted when a result is focus or unfocus by mouse event\r\n   */\r\n  @Output() resultMouseenter = new EventEmitter<SearchResult>();\r\n  @Output() resultMouseleave = new EventEmitter<SearchResult>();\r\n\r\n  @ContentChild('igoSearchItemToolbar') templateSearchToolbar: TemplateRef<any>;\r\n\r\n  get results$(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    if (this._results$ === undefined) {\r\n      this._results$ = this.liftResults();\r\n    }\r\n    return this._results$;\r\n  }\r\n  private _results$: Observable<\r\n    {source: SearchSource; results: SearchResult[]}[]\r\n  >;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef,\r\n              private searchService: SearchService) {}\r\n\r\n  /**\r\n   * Bind the search results store to the watcher\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n\r\n    this.settingsChange$.subscribe(() => {\r\n      this.pageIterator = [];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unbind the search results store from the watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * Compute a group title\r\n   * @param group Search results group\r\n   * @returns Group title\r\n   * @internal\r\n   */\r\n  computeGroupTitle(group: {source: SearchSource; results: SearchResult[]}): string {\r\n    const parts = [group.source.title];\r\n    const count = group.results.length;\r\n    if (count > 1) {\r\n      parts.push(`(${count})`);\r\n    }\r\n    return parts.join(' ');\r\n  }\r\n\r\n  /**\r\n   * When a result is selected, update it's state in the store and emit\r\n   * an event. A selected result is also considered focused\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultSelect(result: SearchResult) {\r\n    if (this.store.state.get(result)) {\r\n      if (this.store.state.get(result).selected === true) {\r\n        return;\r\n      }\r\n    }\r\n    this.store.state.update(result, {focused: true, selected: true}, true);\r\n    this.resultSelect.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Return an observable of the search results, grouped by search source\r\n   * @returns Observable of grouped search results\r\n   * @internal\r\n   */\r\n  private liftResults(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    return this.store.view.all$().pipe(\r\n      debounce((results: SearchResult[]) => {\r\n        return results.length === 0 ? EMPTY : timer(200);\r\n      }),\r\n      map((results: SearchResult[]) => {\r\n        return this.groupResults(results.sort(this.sortByOrder));\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sort the results by display order.\r\n   * @param r1 First result\r\n   * @param r2 Second result\r\n   */\r\n  private sortByOrder(r1: SearchResult, r2: SearchResult) {\r\n    return r1.source.displayOrder - r2.source.displayOrder;\r\n  }\r\n\r\n  /**\r\n   * Group results by search source\r\n   * @param results Search results from all sources\r\n   * @returns Search results grouped by source\r\n   */\r\n  private groupResults(results: SearchResult[]): {source: SearchSource; results: SearchResult[]}[] {\r\n    const grouped = new Map<SearchSource, SearchResult[]>();\r\n    results.forEach((result: SearchResult) => {\r\n      const source = result.source;\r\n      let sourceResults = grouped.get(source);\r\n      if (sourceResults === undefined) {\r\n        sourceResults = [];\r\n        grouped.set(source, sourceResults);\r\n      }\r\n      sourceResults.push(result);\r\n    });\r\n\r\n    return Array.from(grouped.keys()).map((source: SearchSource) => {\r\n      if (this.pageIterator[source.getId()] === undefined) {\r\n        this.pageIterator[source.getId()] = 1;\r\n      }\r\n      return {source, results: grouped.get(source)};\r\n    });\r\n  }\r\n\r\n  isMoreResults(group: {source: SearchSource; results: SearchResult[]}) {\r\n    return group.results && group.results[group.results.length - 1].meta.nextPage === true;\r\n  }\r\n\r\n  displayMoreResults(group: {source: SearchSource; results: SearchResult[]}) {\r\n    const options: TextSearchOptions = {\r\n      sourceId: group.source.getId(),\r\n      page: ++this.pageIterator[group.source.getId()]\r\n    };\r\n\r\n    const researches = this.searchService.search(this.term, options);\r\n    researches.map(research => {\r\n      research.request.subscribe((results: SearchResult[]) => {\r\n        const newResults = group.results.concat(results);\r\n        if (!results.length) {\r\n          newResults[newResults.length - 1].meta.nextPage = false;\r\n        }\r\n        this.moreResults.emit({research, results: newResults});\r\n      });\r\n    });\r\n    return;\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\n\r\nimport {\r\n  getEntityTitle,\r\n  getEntityTitleHtml,\r\n  getEntityIcon\r\n} from '@igo2/common';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\nimport { FeatureMotion, moveToOlFeatures } from '../../feature';\r\nimport { IgoMap } from '../../map';\r\n\r\n/**\r\n * Search results list item\r\n */\r\n@Component({\r\n  selector: 'igo-search-results-item',\r\n  templateUrl: './search-results-item.component.html',\r\n  styleUrls: ['./search-results-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsItemComponent {\r\n  /**\r\n   * Search result item\r\n   */\r\n  @Input() result: SearchResult;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Search result title\r\n   * @internal\r\n   */\r\n\r\n  /**\r\n   * to show hide results icons\r\n   */\r\n  @Input() showIcons: boolean;\r\n\r\n  /**\r\n   * Whether there should be a zoom button\r\n   */\r\n  @Input() withZoomButton = false;\r\n\r\n  @Output() zoomEvent = new EventEmitter<boolean>();\r\n\r\n  private format = new olFormatGeoJSON();\r\n\r\n  get title(): string {\r\n    return getEntityTitle(this.result);\r\n  }\r\n\r\n  /**\r\n   * Search result HTML title\r\n   * @internal\r\n   */\r\n  get titleHtml(): string {\r\n    return getEntityTitleHtml(this.result);\r\n  }\r\n\r\n  /**\r\n   * Search result tooltip\r\n   * @internal\r\n   */\r\n  get tooltipHtml(): string {\r\n    return this.titleHtml\r\n      .replace(/<small?[^>]+(>|$)/g, '\\n')\r\n      .replace(/<\\/?[^>]+(>|$)/g, '');\r\n  }\r\n\r\n  /**\r\n   * Search result icon\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.result);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  onZoomHandler() {\r\n    const olFeature = this.format.readFeature(this.result.data, {\r\n      dataProjection: this.result.data.projection,\r\n      featureProjection: this.map.projection\r\n    });\r\n    moveToOlFeatures(this.map, [olFeature], FeatureMotion.Default);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { LayerOptions } from '../../layer/shared/layers/layer.interface';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { LAYER } from '../../layer/shared/layer.enums';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'igo-search-add-button',\r\n  templateUrl: './search-results-add-button.component.html',\r\n  styleUrls: ['./search-results-add-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultAddButtonComponent implements OnInit, OnDestroy {\r\n  public tooltip$: BehaviorSubject<string> = new BehaviorSubject(\r\n    'igo.geo.catalog.layer.addToMap'\r\n  );\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  public inRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  public isPreview$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private layersSubcriptions = [];\r\n\r\n  private lastTimeoutRequest;\r\n\r\n  @Input() layer: SearchResult;\r\n\r\n  /**\r\n   * Whether the layer is already added to the map\r\n   */\r\n  @Input() added: boolean;\r\n\r\n  /**\r\n   * The map to add the search result layer to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private layerService: LayerService) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.layer.meta.dataType === 'Layer') {\r\n      this.added =\r\n        this.map.layers.findIndex(\r\n          lay => lay.id === this.layer.data.sourceOptions.id\r\n        ) !== -1;\r\n    }\r\n    this.resolution$$ = this.map.viewController.resolution$.subscribe(value => {\r\n      this.isInResolutionsRange(value);\r\n      this.tooltip$.next(this.computeTooltip());\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.resolution$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * On mouse event, mouseenter /mouseleave\r\n   * @internal\r\n   */\r\n  onMouseEvent(event) {\r\n    this.onToggleClick(event);\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick(event) {\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') {\r\n      clearTimeout(this.lastTimeoutRequest);\r\n    }\r\n\r\n    switch (event.type) {\r\n      case 'click':\r\n        if (!this.isPreview$.value) {\r\n          if (this.added) {\r\n            this.remove();\r\n          } else {\r\n            this.add();\r\n          }\r\n        }\r\n        this.isPreview$.next(false);\r\n        break;\r\n      case 'mouseenter':\r\n        if (!this.isPreview$.value && !this.added) {\r\n          this.lastTimeoutRequest = setTimeout(() => {\r\n            this.add();\r\n            this.isPreview$.next(true);\r\n          }, 500);\r\n        }\r\n        break;\r\n      case 'mouseleave':\r\n        if (this.isPreview$.value) {\r\n          this.remove();\r\n          this.isPreview$.next(false);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private add() {\r\n    if (!this.added) {\r\n      this.added = true;\r\n      this.addLayerToMap();\r\n    }\r\n  }\r\n\r\n  private remove() {\r\n    if (this.added) {\r\n      this.added = false;\r\n      this.removeLayerFromMap();\r\n      this.layersSubcriptions.map(s => s.unsubscribe());\r\n      this.layersSubcriptions = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private addLayerToMap() {\r\n    if (this.map === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (this.layer.meta.dataType !== LAYER) {\r\n      return undefined;\r\n    }\r\n\r\n    const layerOptions = (this.layer as SearchResult<LayerOptions>).data;\r\n    if (layerOptions.sourceOptions.optionsFromApi === undefined) {\r\n      layerOptions.sourceOptions.optionsFromApi = true;\r\n    }\r\n    this.layersSubcriptions.push(\r\n      this.layerService\r\n        .createAsyncLayer(layerOptions)\r\n        .subscribe(layer => this.map.addLayer(layer))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = false\r\n   */\r\n  private removeLayerFromMap() {\r\n    if (this.map === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (this.layer.meta.dataType !== LAYER) {\r\n      return undefined;\r\n    }\r\n\r\n    const oLayer = this.map.getLayerById(this.layer.data.sourceOptions.id);\r\n    this.map.removeLayer(oLayer);\r\n  }\r\n\r\n  isInResolutionsRange(resolution: number) {\r\n    const minResolution = this.layer.data.minResolution || 0;\r\n    const maxResolution = this.layer.data.maxResolution || Infinity;\r\n    this.inRange$.next(\r\n      resolution >= minResolution && resolution <= maxResolution\r\n    );\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    if (this.added) {\r\n      return this.inRange$.value\r\n        ? 'igo.geo.catalog.layer.removeFromMap'\r\n        : 'igo.geo.catalog.layer.removeFromMapOutRange';\r\n    } else {\r\n      return this.inRange$.value\r\n        ? 'igo.geo.catalog.layer.addToMap'\r\n        : 'igo.geo.catalog.layer.addToMapOutRange';\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatButtonModule,\r\n  MatBadgeModule\r\n} from '@angular/material';\r\n\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule,\r\n  IgoMatBadgeIconModule,\r\n  IgoStopPropagationModule\r\n} from '@igo2/common';\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoMetadataModule } from './../../metadata/metadata.module';\r\nimport { SearchResultsComponent } from './search-results.component';\r\nimport { SearchResultsItemComponent } from './search-results-item.component';\r\nimport { SearchResultAddButtonComponent } from './search-results-add-button.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatBadgeModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatButtonModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoStopPropagationModule,\r\n    IgoLanguageModule,\r\n    IgoMatBadgeIconModule,\r\n    IgoMetadataModule,\r\n  ],\r\n  exports: [\r\n    SearchResultsComponent,\r\n    SearchResultAddButtonComponent\r\n  ],\r\n  declarations: [\r\n    SearchResultsComponent,\r\n    SearchResultsItemComponent,\r\n    SearchResultAddButtonComponent\r\n  ]\r\n})\r\nexport class IgoSearchResultsModule {}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  OnDestroy,\r\n  Self,\r\n  OnInit,\r\n  HostListener,\r\n  AfterContentChecked\r\n} from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { SearchService } from './search.service';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport { transform } from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olgeom from 'ol/geom';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\n\r\nimport { SearchResult, Research } from './search.interfaces';\r\nimport { EntityStore } from '@igo2/common';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { take } from 'rxjs/operators';\r\nimport { tryBindStoreLayer } from '../../feature/shared/feature.utils';\r\nimport { FeatureStore } from '../../feature/shared/store';\r\nimport { FeatureMotion, FEATURE } from '../../feature/shared/feature.enums';\r\nimport { SearchSourceService } from './search-source.service';\r\nimport { sourceCanReverseSearchAsSummary } from './search.utils';\r\nimport { MediaService } from '@igo2/core';\r\n\r\n/**\r\n * This directive makes the mouse coordinate trigger a reverse search on available search sources.\r\n * The search results are placed into a label, on a cross icon, representing the mouse coordinate.\r\n * By default, no search sources. Config in config file must be defined.\r\n * the layer level.\r\n */\r\n@Directive({\r\n  selector: '[igoSearchPointerSummary]'\r\n})\r\nexport class SearchPointerSummaryDirective implements OnInit, OnDestroy, AfterContentChecked {\r\n\r\n  public store: FeatureStore<Feature>;\r\n  private lonLat: [number, number];\r\n  private pointerSearchStore: EntityStore<SearchResult> = new EntityStore<SearchResult>([]);\r\n  private lastTimeoutRequest;\r\n  private store$$: Subscription;\r\n  private layers$$: Subscription;\r\n  private reverseSearch$$: Subscription[] = [];\r\n  private hasPointerReverseSearchSource: boolean =  false;\r\n\r\n  /**\r\n   * Listener to the pointer move event\r\n   */\r\n  private pointerMoveListener: ListenerFunction;\r\n\r\n  private searchPointerSummaryFeatureId: string = 'searchPointerSummaryFeatureId';\r\n  /**\r\n   * The delay where the mouse must be motionless before trigger the reverse search\r\n   */\r\n  @Input() igoSearchPointerSummaryDelay: number = 1000;\r\n\r\n  /**\r\n   * If the user has enabled or not the directive\r\n   */\r\n  @Input() igoSearchPointerSummaryEnabled: boolean = false;\r\n\r\n  @HostListener('mouseout')\r\n  mouseout() {\r\n    clearTimeout(this.lastTimeoutRequest);\r\n    this.clearLayer();\r\n  }\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  get mapProjection(): string {\r\n    return (this.component.map as IgoMap).projection;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private searchService: SearchService,\r\n    private searchSourceService: SearchSourceService,\r\n    private mediaService: MediaService\r\n  ) { }\r\n\r\n  /**\r\n   * Start listening to pointermove and reverse search results.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.listenToMapPointerMove();\r\n    this.subscribeToPointerStore();\r\n\r\n    this.map.status$.pipe(take(1)).subscribe(() => {\r\n      this.store = new FeatureStore<Feature>([], {map: this.map});\r\n      this.initStore();\r\n    });\r\n\r\n    // To handle context change without using the contextService.\r\n    this.layers$$ = this.map.layers$.subscribe((layers) => {\r\n      if (this.store && !layers.find(l => l.id === 'searchPointerSummaryId')) {\r\n        this.initStore();\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Initialize the pointer position store\r\n   * @internal\r\n   */\r\n  private initStore() {\r\n    const store = this.store;\r\n\r\n    const layer = new VectorLayer({\r\n      id : 'searchPointerSummaryId',\r\n      title: 'searchPointerSummary',\r\n      zIndex: 900,\r\n      source: new FeatureDataSource(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false,\r\n      style: pointerPositionSummaryMarker\r\n    });\r\n    tryBindStoreLayer(store, layer);\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n      if (!this.searchSourceService.getEnabledSources().filter(sourceCanReverseSearchAsSummary).length) {\r\n        this.hasPointerReverseSearchSource = false;\r\n      } else {\r\n        this.hasPointerReverseSearchSource = true;\r\n      }\r\n    }\r\n\r\n  /**\r\n   * Stop listening to pointermove and reverse search results.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.unlistenToMapPointerMove();\r\n    this.unsubscribeToPointerStore();\r\n    this.unsubscribeReverseSearch();\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to pointermove result store\r\n   * @internal\r\n   */\r\n  subscribeToPointerStore() {\r\n    this.store$$ = this.pointerSearchStore.entities$.subscribe(resultsUnderPointerPosition => {\r\n      this.entitiesToPointerOverlay(resultsUnderPointerPosition);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build an object based on the closest feature by type (base on type and distance properties )\r\n   * @param results SearchResult[]\r\n   * @returns OL style function\r\n   */\r\n  private computeSummaryClosestFeature(results: SearchResult[]): {} {\r\n    const closestResultByType = {};\r\n\r\n    results.map(result => {\r\n      if (result.data.properties.type && result.data.properties.distance >= 0) {\r\n        if (closestResultByType.hasOwnProperty(result.data.properties.type)) {\r\n          const prevDistance = closestResultByType[result.data.properties.type].distance;\r\n          if (result.data.properties.distance < prevDistance) {\r\n            closestResultByType[result.data.properties.type] = { distance: result.data.properties.distance, title: result.meta.title };\r\n          }\r\n        } else {\r\n          closestResultByType[result.data.properties.type] = { distance: result.data.properties.distance, title: result.meta.title };\r\n        }\r\n      }\r\n    });\r\n\r\n    return closestResultByType;\r\n  }\r\n\r\n  /**\r\n   * convert store entities to a pointer position overlay with label summary on.\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private entitiesToPointerOverlay(resultsUnderPointerPosition: SearchResult[]) {\r\n    const closestResultByType = this.computeSummaryClosestFeature(resultsUnderPointerPosition);\r\n    const summarizedClosestType = Object.keys(closestResultByType);\r\n    const processedSummarizedClosestType = [];\r\n    const summary = [];\r\n    resultsUnderPointerPosition.map(result => {\r\n      const typeIndex = summarizedClosestType.indexOf(result.data.properties.type);\r\n      if (typeIndex !== -1) {\r\n        summary.push(closestResultByType[result.data.properties.type].title);\r\n        summarizedClosestType.splice(typeIndex, 1);\r\n        processedSummarizedClosestType.push(result.data.properties.type);\r\n      } else {\r\n        if (processedSummarizedClosestType.indexOf(result.data.properties.type) === -1) {\r\n          summary.push(result.meta.title);\r\n        }\r\n      }\r\n    });\r\n    if (summary.length) {\r\n      this.addPointerOverlay(summary.join('\\n'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On map pointermove\r\n   */\r\n  private listenToMapPointerMove() {\r\n    this.pointerMoveListener = this.map.ol.on(\r\n      'pointermove',\r\n      (event: OlMapBrowserPointerEvent) => this.onMapEvent(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to pointer store.\r\n   * @internal\r\n   */\r\n  unsubscribeToPointerStore() {\r\n    this.store$$.unsubscribe();\r\n  }\r\n  /**\r\n   * Unsubscribe to reverse seatch store.\r\n   * @internal\r\n   */\r\n  unsubscribeReverseSearch() {\r\n    this.reverseSearch$$.map(s => s.unsubscribe());\r\n    this.reverseSearch$$ = [];\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map pointermove\r\n   * @internal\r\n   */\r\n  private unlistenToMapPointerMove() {\r\n    this.map.ol.un(this.pointerMoveListener.type, this.pointerMoveListener.listener);\r\n    this.pointerMoveListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Trigger reverse search when the mouse is motionless during the defined delay (pointerMoveDelay).\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onMapEvent(event: OlMapBrowserPointerEvent) {\r\n    if (\r\n      event.dragging || !this.igoSearchPointerSummaryEnabled ||\r\n      !this.hasPointerReverseSearchSource || this.mediaService.isTouchScreen()) {\r\n      this.clearLayer();\r\n      return;\r\n    }\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves\r\n      clearTimeout(this.lastTimeoutRequest);\r\n      this.clearLayer();\r\n      this.unsubscribeReverseSearch();\r\n    }\r\n\r\n    this.lonLat = transform(event.coordinate, this.mapProjection, 'EPSG:4326');\r\n\r\n    this.lastTimeoutRequest = setTimeout(() => {\r\n      this.onSearchCoordinate();\r\n    }, this.igoSearchPointerSummaryDelay);\r\n  }\r\n\r\n  private onSearchCoordinate() {\r\n    this.pointerSearchStore.clear();\r\n    const results = this.searchService.reverseSearch(this.lonLat, { params: { geometry: 'false', icon: 'false' } }, true);\r\n\r\n    for (const i in results) {\r\n      if (results.length > 0) {\r\n        this.reverseSearch$$.push(\r\n          results[i].request.subscribe((_results: SearchResult<Feature>[]) => {\r\n            this.onSearch({ research: results[i], results: _results });\r\n          }));\r\n      }\r\n    }\r\n  }\r\n\r\n  private onSearch(event: { research: Research; results: SearchResult[] }) {\r\n    const results = event.results;\r\n    const newResults = this.pointerSearchStore.all()\r\n      .filter((result: SearchResult) => result.source !== event.research.source)\r\n      .concat(results);\r\n    this.pointerSearchStore.load(newResults);\r\n  }\r\n\r\n  /**\r\n   * Add a feature to the pointer store\r\n   * @param text string\r\n   */\r\n  private addPointerOverlay(text: string) {\r\n    this.clearLayer();\r\n\r\n    const geometry = new olgeom.Point(\r\n      transform(this.lonLat, 'EPSG:4326', this.mapProjection)\r\n    );\r\n    const feature = new olFeature({ geometry });\r\n    const geojsonGeom = new OlGeoJSON().writeGeometryObject(geometry, {\r\n      featureProjection: this.mapProjection,\r\n      dataProjection: this.mapProjection\r\n    });\r\n\r\n    const f: Feature = {\r\n      type: FEATURE,\r\n      geometry: geojsonGeom,\r\n      projection: this.mapProjection,\r\n      properties: {\r\n        id: this.searchPointerSummaryFeatureId,\r\n        pointerSummary: text\r\n      },\r\n      meta: {\r\n        id: this.searchPointerSummaryFeatureId\r\n      },\r\n      ol: feature\r\n    };\r\n    this.store.setLayerFeatures([f], FeatureMotion.None);\r\n  }\r\n\r\n/**\r\n * Clear the pointer store features\r\n */\r\nprivate clearLayer() {\r\n  if (this.store) {\r\n    this.store.clearLayer();\r\n  }\r\n}\r\n\r\n}\r\n\r\n/**\r\n * Create a default style for the pointer position and it's label summary.\r\n * @param feature OlFeature\r\n * @returns OL style function\r\n */\r\nexport function pointerPositionSummaryMarker(feature: olFeature, resolution: number): olstyle.Style {\r\n  return new olstyle.Style({\r\n    image: new olstyle.Icon({\r\n      src: './assets/igo2/geo/icons/cross_black_18px.svg',\r\n      imgSize: [18, 18], // for ie\r\n    }),\r\n\r\n    text: new olstyle.Text({\r\n      text: feature.get('pointerSummary'),\r\n      textAlign: 'left',\r\n      textBaseline: 'bottom',\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      backgroundFill: new olstyle.Fill({ color: 'rgba(255, 255, 255, 0.5)' }),\r\n      backgroundStroke: new olstyle.Stroke({ color: 'rgba(200, 200, 200, 0.75)', width: 2 }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true,\r\n      offsetX: 10,\r\n      offsetY: -10,\r\n      padding: [2.5, 2.5, 2.5, 2.5]\r\n    })\r\n  });\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { provideSearchSourceService } from './shared/search-source-service.providers';\r\nimport { provideDefaultIChercheSearchResultFormatter } from './shared/sources/icherche.providers';\r\nimport { provideDefaultCoordinatesSearchResultFormatter } from './shared/sources/coordinates.providers';\r\nimport { provideILayerSearchResultFormatter } from './shared/sources/ilayer.providers';\r\n\r\nimport { IgoSearchBarModule } from './search-bar/search-bar.module';\r\nimport { IgoSearchSelectorModule } from './search-selector/search-selector.module';\r\nimport { IgoSearchResultsModule } from './search-results/search-results.module';\r\nimport { IgoSearchSettingsModule } from './search-settings/search-settings.module';\r\nimport { SearchPointerSummaryDirective } from './shared/search-pointer-summary.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  exports: [\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule,\r\n    IgoSearchSettingsModule,\r\n    SearchPointerSummaryDirective\r\n  ],\r\n  declarations: [SearchPointerSummaryDirective]\r\n})\r\nexport class IgoSearchModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoSearchModule,\r\n      providers: [\r\n        provideSearchSourceService(),\r\n        provideDefaultIChercheSearchResultFormatter(),\r\n        provideDefaultCoordinatesSearchResultFormatter(),\r\n        provideILayerSearchResultFormatter()\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { FlexibleState, getEntityTitle } from '@igo2/common';\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport { Feature } from '../feature/shared/feature.interfaces';\r\nimport { FeatureMotion } from '../feature/shared/feature.enums';\r\nimport { moveToOlFeatures } from '../feature/shared/feature.utils';\r\nimport { IgoMap } from '../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-toast',\r\n  templateUrl: './toast.component.html',\r\n  styleUrls: ['./toast.component.scss']\r\n})\r\nexport class ToastComponent {\r\n  static SWIPE_ACTION = {\r\n    UP: 'swipeup',\r\n    DOWN: 'swipedown'\r\n  };\r\n  private format = new olFormatGeoJSON();\r\n\r\n  @Input()\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n  set expanded(value: boolean) {\r\n    this.state = value ? 'expanded' : 'collapsed';\r\n    this._expanded = value;\r\n  }\r\n  private _expanded: boolean;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n  }\r\n  private _feature: Feature;\r\n\r\n  @Output() opened = new EventEmitter<boolean>();\r\n\r\n  public state: FlexibleState;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.feature); }\r\n\r\n  constructor() {}\r\n\r\n  toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.opened.emit(this.expanded);\r\n  }\r\n\r\n  zoomToFeatureExtent() {\r\n    if (this.feature.geometry) {\r\n      const olFeature = this.format.readFeature(this.feature, {\r\n        dataProjection: this.feature.projection,\r\n        featureProjection: this.map.projection\r\n      });\r\n      moveToOlFeatures(this.map, [olFeature], FeatureMotion.Zoom);\r\n    }\r\n  }\r\n\r\n  swipe(action: string) {\r\n    if (action === ToastComponent.SWIPE_ACTION.UP) {\r\n      if (!this.expanded) {\r\n        this.toggle();\r\n      }\r\n    } else if (action === ToastComponent.SWIPE_ACTION.DOWN) {\r\n      if (this.expanded) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule, MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoPanelModule, IgoFlexibleModule } from '@igo2/common';\r\n\r\nimport { IgoFeatureModule } from '../feature/feature.module';\r\nimport { ToastComponent } from './toast.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    IgoPanelModule,\r\n    IgoFlexibleModule,\r\n    IgoFeatureModule\r\n  ],\r\n  exports: [ToastComponent],\r\n  declarations: [ToastComponent]\r\n})\r\nexport class IgoToastModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoToastModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { OnUpdateInputs, WidgetComponent } from '@igo2/common';\r\n\r\nimport { Layer } from '../../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter',\r\n  templateUrl: './ogc-filter.component.html',\r\n  styleUrls: ['./ogc-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterComponent implements OnUpdateInputs, WidgetComponent {\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted on complete\r\n   */\r\n  @Output() complete = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted on cancel\r\n   */\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Implemented as part of OnUpdateInputs\r\n   */\r\n  onUpdateInputs() {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * On close, emit the cancel event\r\n   */\r\n  onClose() {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nimport { Widget, WidgetService } from '@igo2/common';\r\n\r\nimport { OgcFilterComponent } from './ogc-filter/ogc-filter.component';\r\n\r\nexport const OgcFilterWidget = new InjectionToken<Widget>('OgcFilterWidget');\r\n\r\nexport function ogcFilterWidgetFactory(widgetService: WidgetService): Widget {\r\n  return widgetService.create(OgcFilterComponent);\r\n}\r\n\r\nexport function provideOgcFilterWidget() {\r\n  return {\r\n    provide: OgcFilterWidget,\r\n    useFactory: ogcFilterWidgetFactory,\r\n    deps: [WidgetService]\r\n  };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoFilterModule } from '../../../filter/filter.module';\r\nimport { OgcFilterComponent } from './ogc-filter.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule,\r\n    IgoFilterModule\r\n  ],\r\n  exports: [OgcFilterComponent],\r\n  declarations: [OgcFilterComponent],\r\n  entryComponents: [OgcFilterComponent]\r\n})\r\nexport class IgoOgcFilterModule {}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WfsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: VectorLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WfsWorkspace extends Workspace {\r\n\r\n  get layer(): VectorLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WfsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  ActionStore,\r\n  EntityTableTemplate\r\n} from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { SourceFieldsOptionsParams } from '../../datasource';\r\n\r\nimport { WfsWorkspace } from './wfs-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WfsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: VectorLayer, map: IgoMap): WfsWorkspace {\r\n    return new WfsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      entityStore: this.createFeatureStore(layer, map),\r\n      actionStore: new ActionStore([]),\r\n      meta: {\r\n        tableTemplate: this.createTableTemplate(layer)\r\n      }\r\n    });\r\n  }\r\n\r\n  private createFeatureStore(layer: VectorLayer, map: IgoMap): FeatureStore {\r\n    const store = new FeatureStore([], {map});\r\n    store.bindLayer(layer);\r\n\r\n    const loadingStrategy = new FeatureStoreLoadingLayerStrategy({});\r\n    const selectionStrategy = new FeatureStoreSelectionStrategy({\r\n      map,\r\n      hitTolerance: 5\r\n    });\r\n    store.addStrategy(loadingStrategy, true);\r\n    store.addStrategy(selectionStrategy, true);\r\n\r\n    return store;\r\n  }\r\n\r\n  private createTableTemplate(layer: VectorLayer): EntityTableTemplate {\r\n    const fields = layer.dataSource.options.sourceFields || [];\r\n    const columns = fields.map((field: SourceFieldsOptionsParams) => {\r\n      return {\r\n        name: `properties.${field.name}`,\r\n        title: field.alias ? field.alias : field.name\r\n      };\r\n    });\r\n\r\n    return {\r\n      selection: true,\r\n      sort: true,\r\n      columns\r\n    };\r\n  }\r\n\r\n}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WmsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: ImageLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WmsWorkspace extends Workspace {\r\n\r\n  get layer(): ImageLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WmsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ActionStore } from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { WmsWorkspace } from './wms-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WmsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: ImageLayer, map: IgoMap): WmsWorkspace {\r\n    return new WmsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      actionStore: new ActionStore([])\r\n    });\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { Workspace, WorkspaceStore, WorkspaceSelectorComponent } from '@igo2/common';\r\n\r\nimport { Layer, ImageLayer, VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { WFSDataSource, WMSDataSource } from '../../datasource';\r\nimport { OgcFilterableDataSourceOptions } from '../../filter';\r\n\r\nimport { WfsWorkspaceService } from '../shared/wfs-workspace.service';\r\nimport { WmsWorkspaceService } from '../shared/wms-workspace.service';\r\n\r\n@Directive({\r\n  selector: '[igoWorkspaceSelector]'\r\n})\r\nexport class WorkspaceSelectorDirective implements OnInit, OnDestroy {\r\n\r\n  private layers$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  get workspaceStore(): WorkspaceStore {\r\n    return this.component.store;\r\n  }\r\n\r\n  constructor(\r\n    private component: WorkspaceSelectorComponent,\r\n    private wfsWorkspaceService: WfsWorkspaceService,\r\n    private wmsWorkspaceService: WmsWorkspaceService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$\r\n      .pipe(debounceTime(50))\r\n      .subscribe((layers: Layer[]) =>\r\n        this.onLayersChange(layers)\r\n      );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  private onLayersChange(layers: Layer[]) {\r\n    const editableLayers = layers.filter((layer: Layer) =>\r\n      this.layerIsEditable(layer)\r\n    );\r\n    const editableLayersIds = editableLayers.map((layer: Layer) => layer.id);\r\n\r\n    const workspacesToAdd = editableLayers\r\n      .map((layer: VectorLayer) => this.getOrCreateWorkspace(layer))\r\n      .filter((workspace: Workspace | undefined) => workspace !== undefined);\r\n\r\n    const workspacesToRemove = this.workspaceStore.all()\r\n      .filter((workspace: Workspace) => {\r\n        return editableLayersIds.indexOf(workspace.id) < 0;\r\n      });\r\n\r\n    if (workspacesToRemove.length > 0) {\r\n      workspacesToRemove.forEach((workspace: Workspace) => {\r\n        workspace.deactivate();\r\n      });\r\n      this.workspaceStore.state.updateMany(workspacesToRemove, {active: false, selected: false});\r\n      this.workspaceStore.deleteMany(workspacesToRemove);\r\n    }\r\n\r\n    if (workspacesToAdd.length > 0) {\r\n      this.workspaceStore.insertMany(workspacesToAdd);\r\n    }\r\n  }\r\n\r\n  private getOrCreateWorkspace(layer: VectorLayer | ImageLayer): Workspace | undefined {\r\n    const workspace = this.workspaceStore.get(layer.id);\r\n    if (workspace !== undefined) {\r\n      return;\r\n    }\r\n    if (layer.dataSource instanceof WFSDataSource) {\r\n      return this.wfsWorkspaceService.createWorkspace(layer as VectorLayer, this.map);\r\n    } else if (layer.dataSource instanceof WMSDataSource) {\r\n      return this.wmsWorkspaceService.createWorkspace(layer as ImageLayer, this.map);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  private layerIsEditable(layer: Layer): boolean {\r\n    const dataSource = layer.dataSource;\r\n    if (dataSource instanceof WFSDataSource) {\r\n      return true;\r\n    }\r\n\r\n    if (dataSource instanceof WMSDataSource) {\r\n      const dataSourceOptions = (dataSource.options ||\r\n        {}) as OgcFilterableDataSourceOptions;\r\n      return (\r\n        dataSourceOptions.ogcFilters && dataSourceOptions.ogcFilters.enabled\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { WorkspaceSelectorDirective } from './workspace-selector.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n   WorkspaceSelectorDirective\r\n  ],\r\n  declarations: [\r\n    WorkspaceSelectorDirective\r\n  ]\r\n})\r\nexport class IgoWorkspaceSelectorModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IgoWidgetModule } from '@igo2/common';\r\n\r\nimport { provideOgcFilterWidget } from './widgets/widgets';\r\n\r\nimport { IgoOgcFilterModule } from './widgets/ogc-filter/ogc-filter.module';\r\nimport { IgoWorkspaceSelectorModule } from './workspace-selector/workspace-selector.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetModule,\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  exports: [\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    provideOgcFilterWidget()\r\n  ]\r\n})\r\nexport class IgoGeoWorkspaceModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoWktModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoWktModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { IgoCatalogModule } from './catalog/catalog.module';\r\nimport { IgoDataSourceModule } from './datasource/datasource.module';\r\nimport { IgoDownloadModule } from './download/download.module';\r\nimport { IgoFeatureModule } from './feature/feature.module';\r\nimport { IgoFilterModule } from './filter/filter.module';\r\nimport { IgoGeometryModule } from './geometry/geometry.module';\r\nimport { IgoImportExportModule } from './import-export/import-export.module';\r\nimport { IgoLayerModule } from './layer/layer.module';\r\nimport { IgoMapModule } from './map/map.module';\r\nimport { IgoMeasureModule } from './measure/measure.module';\r\nimport { IgoMetadataModule } from './metadata/metadata.module';\r\nimport { IgoOverlayModule } from './overlay/overlay.module';\r\nimport { IgoPrintModule } from './print/print.module';\r\nimport { IgoQueryModule } from './query/query.module';\r\nimport { IgoDirectionsModule } from './directions/directions.module';\r\nimport { IgoSearchModule } from './search/search.module';\r\nimport { IgoToastModule } from './toast/toast.module';\r\nimport { IgoGeoWorkspaceModule } from './workspace/workspace.module';\r\nimport { IgoWktModule } from './wkt/wkt.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoCatalogModule,\r\n    IgoDataSourceModule,\r\n    IgoDownloadModule,\r\n    IgoFeatureModule,\r\n    IgoFilterModule,\r\n    IgoGeometryModule,\r\n    IgoImportExportModule,\r\n    IgoLayerModule,\r\n    IgoMapModule,\r\n    IgoMeasureModule,\r\n    IgoMetadataModule,\r\n    IgoOverlayModule,\r\n    IgoPrintModule,\r\n    IgoQueryModule,\r\n    IgoDirectionsModule,\r\n    IgoSearchModule,\r\n    IgoToastModule,\r\n    IgoGeoWorkspaceModule,\r\n    IgoWktModule\r\n  ]\r\n})\r\nexport class IgoGeoModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoGeoModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { OptionsService } from './options.service';\r\nimport { OptionsApiService } from './options-api.service';\r\n\r\nexport function optionsApiFactory(\r\n  http: HttpClient,\r\n  configService: ConfigService\r\n) {\r\n  return new OptionsApiService(\r\n    http,\r\n    configService.getConfig('optionsApi'),\r\n  );\r\n}\r\n\r\nexport function provideOptionsApi() {\r\n  return {\r\n    provide: OptionsService,\r\n    useFactory: optionsApiFactory,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport olWKT from 'ol/format/WKT';\r\n\r\nimport { FEATURE, Feature, FeatureGeometry } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\n\r\n/**\r\n * Cadastre search source\r\n */\r\n@Injectable()\r\nexport class CadastreSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'cadastre';\r\n  static type = FEATURE;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return CadastreSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return CadastreSearchSource.type;\r\n  }\r\n\r\n  /*\r\n   * Source : https://wiki.openstreetmap.org/wiki/Key:amenity\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Cadastre (QuÃ©bec)',\r\n      searchUrl: 'https://carto.cptaq.gouv.qc.ca/php/find_lot_v1.php?'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a place by name\r\n   * @param term Place name\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    term = term.endsWith(',') ? term.slice(0, -1) : term;\r\n    term = term.startsWith(',') ? term.substr(1) : term;\r\n    term = term.replace(/ /g, '');\r\n\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    if (!params.get('numero') || !params.get('numero').match(/^[0-9,]+$/g)) {\r\n      return of([]);\r\n    }\r\n    return this.http\r\n      .get(this.searchUrl, { params, responseType: 'text' })\r\n      .pipe(map((response: string) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          numero: term,\r\n          epsg: '4326'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: string): SearchResult<Feature>[] {\r\n    return response\r\n      .split('<br />')\r\n      .filter((lot: string) => lot.length > 0)\r\n      .map((lot: string) => this.dataToResult(lot));\r\n  }\r\n\r\n  private dataToResult(data: string): SearchResult<Feature> {\r\n    const lot = data.split(';');\r\n    const numero = lot[0];\r\n    const wkt = lot[7];\r\n    const geometry = this.computeGeometry(wkt);\r\n    const properties = { NoLot: numero };\r\n    const id = [this.getId(), 'cadastre', numero].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: numero,\r\n        icon: 'map-marker'\r\n      },\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: numero\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeGeometry(wkt: string): FeatureGeometry {\r\n    const feature = new olWKT().readFeature(wkt, {\r\n      dataProjection: 'EPSG:4326',\r\n      featureProjection: 'EPSG:4326'\r\n    });\r\n    return {\r\n      type: feature.getGeometry().getType(),\r\n      coordinates: feature.getGeometry().getCoordinates()\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { CadastreSearchSource } from './cadastre';\r\n\r\n/**\r\n * Cadastre search source factory\r\n * @ignore\r\n */\r\nexport function cadastreSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new CadastreSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${CadastreSearchSource.id}`),\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the Cadastre search source\r\n */\r\nexport function provideCadastreSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: cadastreSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FEATURE, Feature, FeatureGeometry } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\nimport { NominatimData } from './nominatim.interfaces';\r\n\r\n/**\r\n * Nominatim search source\r\n */\r\n@Injectable()\r\nexport class NominatimSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'nominatim';\r\n  static type = FEATURE;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return NominatimSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return NominatimSearchSource.type;\r\n  }\r\n\r\n  /*\r\n   * Source : https://wiki.openstreetmap.org/wiki/Key:amenity\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Nominatim (OSM)',\r\n      searchUrl: 'https://nominatim.openstreetmap.org/search',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'amenity',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.nominatim.type.food',\r\n              value:\r\n                'bar,bbq,biergaten,cafe,drinking_water,fast_food,food_court,ice_cream,pub,restaurant',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.nominatim.type.health',\r\n              value:\r\n                'baby_hatch,clinic,dentist,doctors,hospital,nursing_home,pharmacy,social_facility,veterinary',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.nominatim.type.entertainment',\r\n              value:\r\n                'arts_centre,brothel,casino,cinema,community_center_fountain,gambling,nightclub,planetarium \\\r\n                          ,public_bookcase,social_centre,stripclub,studio,swingerclub,theatre,internet_cafe',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.nominatim.type.finance',\r\n              value: 'atm,bank,bureau_de_change',\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: true\r\n            },\r\n            {\r\n              title: '20',\r\n              value: 20,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'restrictExtent',\r\n          name: 'countrycodes',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.nominatim.country.canada',\r\n              value: 'CA',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'igo.geo.search.nominatim.country.all',\r\n              value: null,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'multiple object',\r\n          name: 'dedupe',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.searchSources.settings.true',\r\n              value: 0,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.searchSources.settings.false',\r\n              value: 1,\r\n              enabled: true\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a place by name\r\n   * @param term Place name\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    if (!params.get('q')) {\r\n      return of([]);\r\n    }\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response: NominatimData[]) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          q: this.computeTerm(term),\r\n          format: 'json'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: NominatimData[]): SearchResult<Feature>[] {\r\n    return response.map((data: NominatimData) => this.dataToResult(data));\r\n  }\r\n\r\n  private dataToResult(data: NominatimData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const geometry = this.computeGeometry(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), 'place', data.place_id].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.display_name,\r\n        icon: 'map-marker'\r\n      },\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.display_name\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: NominatimData): { [key: string]: any } {\r\n    return {\r\n      display_name: data.display_name,\r\n      place_id: data.place_id,\r\n      osm_type: data.osm_type,\r\n      class: data.class,\r\n      type: data.type\r\n    };\r\n  }\r\n\r\n  private computeGeometry(data: NominatimData): FeatureGeometry {\r\n    return {\r\n      type: 'Point',\r\n      coordinates: [parseFloat(data.lon), parseFloat(data.lat)]\r\n    };\r\n  }\r\n\r\n  private computeExtent(data: NominatimData): [number, number, number, number] {\r\n    return [\r\n      parseFloat(data.boundingbox[2]),\r\n      parseFloat(data.boundingbox[0]),\r\n      parseFloat(data.boundingbox[3]),\r\n      parseFloat(data.boundingbox[1])\r\n    ];\r\n  }\r\n\r\n  private computeTerm(term: string): string {\r\n    return this.computeTermTags(term);\r\n  }\r\n\r\n  /**\r\n   * Add hashtag from query in Nominatim's format (+[])\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTermTags(term: string): string {\r\n    const hashtags = super.getHashtagsValid(term, 'amenity');\r\n    if (!hashtags) {\r\n      return this.computeTermSettings(term);\r\n    }\r\n\r\n    if (!hashtags.length) {\r\n      return null;\r\n    }\r\n\r\n    term = term.replace(/(#[^\\s]*)/g, '');\r\n    hashtags.forEach(tag => {\r\n      term += '+[' + tag + ']';\r\n    });\r\n\r\n    return term;\r\n  }\r\n\r\n  /**\r\n   * Add hashtag from settings in Nominatim's format (+[])\r\n   * @param term Query\r\n   */\r\n  private computeTermSettings(term: string): string {\r\n    this.options.settings.forEach(settings => {\r\n      if (settings.name === 'amenity') {\r\n        settings.values.forEach(conf => {\r\n          if (conf.enabled && typeof conf.value === 'string') {\r\n            const splitted = conf.value.split(',');\r\n            splitted.forEach(value => {\r\n              term += '+[' + value + ']';\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return term;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { NominatimSearchSource } from './nominatim';\r\n\r\n/**\r\n * Nominatim search source factory\r\n * @ignore\r\n */\r\nexport function nominatimSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new NominatimSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${NominatimSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the Nominatim search source\r\n */\r\nexport function provideNominatimSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: nominatimSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  StoredQueriesData,\r\n  StoredQueriesResponse,\r\n  StoredQueriesReverseData,\r\n  StoredQueriesReverseResponse,\r\n  StoredQueriesSearchSourceOptions,\r\n  StoredQueriesFields,\r\n  StoredQueriesReverseSearchSourceOptions\r\n} from './storedqueries.interfaces';\r\n\r\nimport * as olformat from 'ol/format';\r\n\r\n/**\r\n * StoredQueries search source\r\n */\r\n@Injectable()\r\nexport class StoredQueriesSearchSource extends SearchSource\r\n  implements TextSearch {\r\n  static id = 'storedqueries';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [\r\n    'boundedBy',\r\n    'id',\r\n    'coord_x',\r\n    'coord_y'\r\n  ];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesSearchSourceOptions;\r\n    if (this.storedQueriesOptions && !this.storedQueriesOptions.available) {\r\n      return;\r\n    }\r\n\r\n    const defaultStoredqueryId = 'rtss';\r\n    const defaultFieldSplitter: StoredQueriesFields[] = [\r\n      { name: 'rtss', defaultValue: '-99' },\r\n      { name: 'chainage', defaultValue: '0', splitPrefix: '\\\\+' }\r\n    ];\r\n    const defaultOutputformat = 'text/xml; subtype=gml/3.1.1';\r\n    const defaultSrsname = 'EPSG:4326';\r\n    const defaultResultTitle = 'title';\r\n\r\n    if (!this.storedQueriesOptions) {\r\n      console.log(\r\n        ' No configuration for this search source (storedqueries). You will use the default values'\r\n      );\r\n      this.storedQueriesOptions = {\r\n        storedquery_id: defaultStoredqueryId,\r\n        fields: defaultFieldSplitter,\r\n        outputformat: defaultOutputformat,\r\n        srsname: defaultSrsname,\r\n        resultTitle: defaultResultTitle\r\n      };\r\n      this.resultTitle = defaultResultTitle;\r\n      console.log('Default values', this.storedQueriesOptions);\r\n    }\r\n\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err =\r\n        'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.fields) {\r\n      throw new Error(\r\n        'Stored Queries :You have to set \"fields\" into options. ex: fields: {\"name\": \"rtss\", \"defaultValue\": \"-99\"}'\r\n      );\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat =\r\n      this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname =\r\n      this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n\r\n    const storedQueryId = this.storedQueriesOptions.storedquery_id.toLowerCase();\r\n    if (\r\n      storedQueryId.includes('getfeaturebyid') &&\r\n      this.storedQueriesOptions.outputformat\r\n        .toLowerCase()\r\n        .includes('getfeaturebyid')\r\n    ) {\r\n      let err =\r\n        'You must set a geojson format for your stored query. This is due to an openlayers issue)';\r\n      err += ' (wfs 1.1.0 & gml 3.1.1 limitation)';\r\n      throw new Error(err);\r\n    }\r\n\r\n    if (!(this.storedQueriesOptions.fields instanceof Array)) {\r\n      this.storedQueriesOptions.fields = [this.storedQueriesOptions.fields];\r\n    }\r\n\r\n    this.multipleFieldsQuery =\r\n      this.storedQueriesOptions.fields.length > 1 ? true : false;\r\n\r\n    this.storedQueriesOptions.fields.forEach((field, index) => {\r\n      if (this.multipleFieldsQuery && !field.splitPrefix && index !== 0) {\r\n        throw new Error(\r\n          'Stored Queries :You must set a field spliter into your field definition (optional for the first one!)'\r\n        );\r\n      }\r\n      if (!field.defaultValue) {\r\n        throw new Error(\r\n          'Stored Queries :You must set a field default value into your field definition'\r\n        );\r\n      }\r\n    });\r\n\r\n    this.storedQueriesOptions.resultTitle =\r\n      this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return StoredQueriesSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/ws/swtq'\r\n    };\r\n  }\r\n\r\n  // URL CALL EXAMPLES:\r\n  //  GetFeatureById (mandatory storedquery for wfs server) (outputformat must be in geojson)\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://geoegl.msp.gouv.qc.ca/apis/ws/swtq?service=wfs&version=2.0.0&request=GetFeature&storedquery_id=urn:ogc:def:query:OGC-WFS::GetFeatureById&srsname=epsg:4326&outputformat=geojson&ID=a_num_route.132\r\n  //  Custom StoredQuery\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://geoegl.msp.gouv.qc.ca/apis/ws/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=rtss&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&rtss=0013801110000c&chainage=12\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const storedqueriesParams = this.termSplitter(\r\n      term,\r\n      this.storedQueriesOptions.fields\r\n    );\r\n    const params = this.computeRequestParams(\r\n      options || {},\r\n      storedqueriesParams\r\n    );\r\n\r\n    if (\r\n      new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)\r\n    ) {\r\n      return this.http\r\n        .get(this.searchUrl, { params, responseType: 'text' })\r\n        .pipe(\r\n          map(response => {\r\n            return this.extractResults(this.extractWFSData(response));\r\n          })\r\n        );\r\n    } else {\r\n      return this.http.get(this.searchUrl, { params }).pipe(\r\n        map(response => {\r\n          return this.extractResults(this.extractWFSData(response));\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private termSplitter(term: string, fields: StoredQueriesFields[]): {} {\r\n    const splittedTerm = {};\r\n    let remainingTerm = term;\r\n    let cnt = 0;\r\n\r\n    // Used to build the default values\r\n    fields.forEach(field => {\r\n      splittedTerm[field.name] = field.defaultValue;\r\n      const splitterRegex = new RegExp(field.splitPrefix + '(.+)', 'i');\r\n      if (splitterRegex.test(remainingTerm)) {\r\n        cnt = field.splitPrefix ? (cnt += 1) : cnt;\r\n        remainingTerm = remainingTerm.split(splitterRegex)[1];\r\n      }\r\n    });\r\n    if (cnt === 0) {\r\n      splittedTerm[fields[0].name] = term;\r\n      return splittedTerm;\r\n    }\r\n    remainingTerm = term;\r\n    const localFields = [...fields].reverse();\r\n    localFields.forEach(field => {\r\n      const splitterRegex = new RegExp(field.splitPrefix || '' + '(.+)', 'i');\r\n      if (remainingTerm || remainingTerm !== '') {\r\n        const values = remainingTerm.split(splitterRegex);\r\n        remainingTerm = values[0];\r\n        if (values[1]) {\r\n          splittedTerm[field.name] = values[1].trim();\r\n        }\r\n      }\r\n    });\r\n    return splittedTerm;\r\n  }\r\n\r\n  private computeRequestParams(\r\n    options: TextSearchOptions,\r\n    queryParams\r\n  ): HttpParams {\r\n    const wfsversion = this.storedQueriesOptions.storedquery_id\r\n      .toLowerCase()\r\n      .includes('getfeaturebyid')\r\n      ? '2.0.0'\r\n      : '1.1.0';\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'wfs',\r\n          version: wfsversion,\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat\r\n        },\r\n        queryParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: StoredQueriesResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle]\r\n      ? this.storedQueriesOptions.resultTitle\r\n      : this.resultTitle;\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        // extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.title,\r\n        titleHtml: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: StoredQueriesData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source\r\n */\r\n\r\n// EXAMPLE CALLS\r\n// tslint:disable-next-line:max-line-length\r\n// https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=lim_adm&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&long=-71.292469&lat=46.748107\r\n//\r\n\r\n@Injectable()\r\nexport class StoredQueriesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'storedqueriesreverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesReverseSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesReverseSearchSourceOptions;\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err =\r\n        'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.longField) {\r\n      throw new Error(\r\n        'Stored Queries :You have to set \"longField\" to map the longitude coordinate to the query params.'\r\n      );\r\n    }\r\n    if (!this.storedQueriesOptions.latField) {\r\n      throw new Error(\r\n        'Stored Queries :You have to set \"latField\" to map the latitude coordinate to the query params.'\r\n      );\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat =\r\n      this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname =\r\n      this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n    this.storedQueriesOptions.resultTitle =\r\n      this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesReverseSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return StoredQueriesReverseSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries (reverse)',\r\n      searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n\r\n    if (\r\n      new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)\r\n    ) {\r\n      return this.http\r\n        .get(this.searchUrl, { params, responseType: 'text' })\r\n        .pipe(\r\n          map(response => {\r\n            return this.extractResults(this.extractWFSData(response));\r\n          })\r\n        );\r\n    } else {\r\n      return this.http.get(this.searchUrl, { params }).pipe(\r\n        map(response => {\r\n          return this.extractResults(this.extractWFSData(response));\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    const longLatParams = {};\r\n    longLatParams[this.storedQueriesOptions.longField] = lonLat[0];\r\n    longLatParams[this.storedQueriesOptions.latField] = lonLat[1];\r\n\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'WFS',\r\n          version: '1.1.0',\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat\r\n        },\r\n        longLatParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: StoredQueriesReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle]\r\n      ? this.storedQueriesOptions.resultTitle\r\n      : this.resultTitle;\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(\r\n    data: StoredQueriesReverseData\r\n  ): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return Object.assign(properties, { type: data.properties.doc_type });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  StoredQueriesSearchSource,\r\n  StoredQueriesReverseSearchSource\r\n} from './storedqueries';\r\n\r\n/**\r\n * StoredQueries search source factory\r\n * @ignore\r\n */\r\nexport function storedqueriesSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueries search source\r\n */\r\nexport function provideStoredQueriesSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source factory\r\n * @ignore\r\n */\r\n\r\nexport function storedqueriesReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesReverseSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueriesReverse search source\r\n */\r\nexport function provideStoredQueriesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","export enum DirectionsFormat {\r\n  GeoJSON,\r\n  JSON\r\n}\r\nexport enum SourceDirectionsType {\r\n  Route = 'Route',\r\n  Trip = 'Trip'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { ConfigService, Message } from '@igo2/core';\r\n\r\nimport { Directions, DirectionsOptions } from '../shared/directions.interface';\r\nimport { DirectionsFormat, SourceDirectionsType } from '../shared/directions.enum';\r\n\r\nimport { DirectionsSource } from './directions-source';\r\nimport { DirectionsSourceOptions } from './directions-source.interface';\r\n\r\n@Injectable()\r\nexport class OsrmDirectionsSource extends DirectionsSource {\r\n  get enabled(): boolean {\r\n    return this.options.enabled !== false;\r\n  }\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  static _name = 'OSRM QuÃ©bec';\r\n  private directionsUrl =\r\n    'https://geoegl.msp.gouv.qc.ca/services/itineraire/route/v1/driving/';\r\n  private options: DirectionsSourceOptions;\r\n\r\n  constructor(private http: HttpClient, private config: ConfigService) {\r\n    super();\r\n    this.options = this.config.getConfig('directionsSources.osrm') || {};\r\n    this.directionsUrl = this.options.url || this.directionsUrl;\r\n  }\r\n\r\n  getName(): string {\r\n    return OsrmDirectionsSource._name;\r\n  }\r\n\r\n  route(coordinates: [number, number][], directionsOptions: DirectionsOptions = {}): Observable<Directions[]> {\r\n    const directionsParams = this.getRouteParams(directionsOptions);\r\n    return this.http\r\n      .get<JSON[]>(this.directionsUrl + coordinates.join(';'), {\r\n        params: directionsParams\r\n      })\r\n      .pipe(map(res => this.extractRoutesData(res)));\r\n  }\r\n\r\n  private extractRoutesData(response): Directions[] {\r\n    const routeResponse = [];\r\n    response.routes.forEach(route => {\r\n      routeResponse.push(this.formatRoute(route, response.waypoints));\r\n    });\r\n    return routeResponse;\r\n  }\r\n\r\n  private getRouteParams(directionsOptions: DirectionsOptions = {}): HttpParams {\r\n\r\n    directionsOptions.alternatives = directionsOptions.alternatives !== undefined ? directionsOptions.alternatives : true;\r\n    directionsOptions.steps = directionsOptions.steps !== undefined  ? directionsOptions.steps : true;\r\n    directionsOptions.geometries = directionsOptions.geometries !== undefined  ? directionsOptions.geometries : 'geojson';\r\n    directionsOptions.overview = directionsOptions.overview !== undefined  ? directionsOptions.overview : false;\r\n\r\n    return new HttpParams({\r\n      fromObject: {\r\n        alternatives: directionsOptions.alternatives ? 'true' : 'false',\r\n        overview: directionsOptions.overview ? 'simplified' : 'full',\r\n        steps: directionsOptions.steps ? 'true' : 'false',\r\n        geometries: directionsOptions.geometries ? directionsOptions.geometries : 'geojson',\r\n      }\r\n    });\r\n  }\r\n\r\n  private formatRoute(roadNetworkRoute: any, waypoints: any): Directions {\r\n    const stepsUI = [];\r\n    roadNetworkRoute.legs.forEach(leg => {\r\n      leg.steps.forEach(step => {\r\n        stepsUI.push(step);\r\n      });\r\n    });\r\n    return {\r\n      id: uuid(),\r\n      title: roadNetworkRoute.legs[0].summary,\r\n      source: OsrmDirectionsSource._name,\r\n      sourceType: SourceDirectionsType.Route,\r\n      order: 1,\r\n      format: DirectionsFormat.GeoJSON,\r\n      icon: 'directions',\r\n      projection: 'EPSG:4326',\r\n      waypoints,\r\n      distance: roadNetworkRoute.distance,\r\n      duration: roadNetworkRoute.duration,\r\n      geometry: roadNetworkRoute.geometry,\r\n      legs: roadNetworkRoute.legs,\r\n      steps: stepsUI,\r\n      weight: roadNetworkRoute.weight,\r\n      weight_name: roadNetworkRoute.weight_name\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { DirectionsSource } from './directions-source';\r\nimport { OsrmDirectionsSource } from './osrm-directions-source';\r\n\r\nexport function osrmDirectionsSourcesFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new OsrmDirectionsSource(http, config);\r\n}\r\n\r\nexport function provideOsrmDirectionsSource() {\r\n  return {\r\n    provide: DirectionsSource,\r\n    useFactory: osrmDirectionsSourcesFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { ExportFormat } from './export.type';\r\n\r\nimport { Platform } from '@ionic/angular';\r\nimport { File } from '@ionic-native/file/ngx';\r\nimport { FileOpener } from '@ionic-native/file-opener/ngx';\r\nimport { ExportService } from './export.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportIonicService extends ExportService {\r\n\r\n  constructor(\r\n      config: ConfigService,\r\n      private platform: Platform,\r\n      private fileOpener: FileOpener,\r\n      private file: File\r\n    ) {\r\n      super(config);\r\n    }\r\n\r\n    protected exportToFile(\r\n      olFeatures: OlFeature[],\r\n      observer: Observer<void>,\r\n      format: ExportFormat,\r\n      title: string,\r\n      projectionIn: string,\r\n      projectionOut: string\r\n    ) {\r\n      if (this.platform.is('cordova')) {\r\n        const olFormat = new olformat[format]();\r\n        const featuresText = olFormat.writeFeatures(olFeatures, {\r\n          dataProjection: projectionOut,\r\n          featureProjection: projectionIn,\r\n          featureType: 'feature',\r\n          featureNS: 'http://example.com/feature'\r\n        });\r\n\r\n        const fileName = `${title}.${format.toLowerCase()}`;\r\n        const directory = this.file.externalRootDirectory + 'Download';\r\n        this.file.writeFile(directory, fileName, featuresText, { replace: true }).then((success) =>\r\n        this.fileOpener.open(directory + '/' + fileName, 'text/plain'));\r\n        observer.complete();\r\n      } else {\r\n        super.exportToFile(\r\n          olFeatures,\r\n          observer,\r\n          format,\r\n          title,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n      }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as jsPDF from 'jspdf';\r\nimport { Platform } from '@ionic/angular';\r\nimport { File } from '@ionic-native/file/ngx';\r\nimport { FileOpener } from '@ionic-native/file-opener/ngx';\r\n\r\nimport { MessageService, ActivityService, LanguageService } from '@igo2/core';\r\nimport { PrintService } from './print.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrintIonicService extends PrintService {\r\n  date: Date;\r\n  day: string;\r\n  month: any;\r\n  hour: string;\r\n  minute: string;\r\n  year: string;\r\n\r\n  constructor(\r\n    messageService: MessageService,\r\n    activityService: ActivityService,\r\n    languageService: LanguageService,\r\n    private platform: Platform,\r\n    private fileOpener: FileOpener,\r\n    private file: File\r\n  ) {\r\n    super(messageService, activityService, languageService);\r\n  }\r\n\r\n  protected saveDoc(doc: jsPDF) {\r\n    if (this.platform.is('cordova')) {\r\n      const docOutput = doc.output();\r\n      const buffer = new ArrayBuffer(docOutput.length);\r\n      const array = new Uint8Array(buffer);\r\n      this.setDate();\r\n      for (let i = 0; i < docOutput.length; i++) {\r\n          array[i] = docOutput.charCodeAt(i);\r\n      }\r\n      const fileName = 'map' + this.year + '-' + this.month + '-' + this.day + '-' + this.hour + '-' + this.minute + '.pdf';\r\n      const directory = this.file.externalRootDirectory + 'Download';\r\n      this.file.writeFile(directory, fileName, buffer, { replace: true }).then((success) =>\r\n        this.fileOpener.open(directory + '/' + fileName, 'application/pdf'));\r\n    } else {\r\n        super.saveDoc(doc);\r\n    }\r\n  }\r\n  private setDate() {\r\n      this.date = new Date();\r\n      this.day = this.date.getDate().toString();\r\n      this.month = this.date.getMonth() + 1;\r\n      if (this.month < 10) {\r\n        this.month = '0' + this.month.toString();\r\n      } else {\r\n          this.month = this.month.toString();\r\n      }\r\n      this.year = this.date.getFullYear().toString();\r\n      this.hour = this.date.getHours().toString();\r\n      this.minute = this.date.getMinutes().toString();\r\n  }\r\n}\r\n","export enum OgcFilterOperatorType {\r\n    BasicNumericOperator = 'BasicNumericOperator',\r\n    Basic = 'Basic',\r\n    BasicAndSpatial = 'BasicAndSpatial',\r\n    Spatial = 'Spatial',\r\n    All = 'All',\r\n    Time = 'time'\r\n}\r\n","export enum LayerListToolControlsEnum {\r\n  always = 'always',\r\n  never = 'never',\r\n  default = 'default'\r\n}\r\n"]}