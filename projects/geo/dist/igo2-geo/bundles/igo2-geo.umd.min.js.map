{"version":3,"sources":["ng://@igo2/geo/lib/metadata/shared/metadata.service.ts","ng://@igo2/geo/lib/metadata/metadata-button/metadata-button.component.ts","ng://@igo2/geo/lib/metadata/metadata.module.ts","node_modules/tslib/tslib.es6.js","ng://@igo2/geo/lib/datasource/shared/datasources/data.service.ts","ng://@igo2/geo/lib/utils/id-generator.ts","ng://@igo2/geo/lib/datasource/shared/datasources/datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/feature-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/osm-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/xyz-datasource.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-wfs.utils.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs.service.ts","ng://@igo2/geo/lib/query/shared/query.enums.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-datasource.ts","ng://@igo2/geo/lib/datasource/utils/tilegrid.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wmts-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/carto-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/arcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/tilearcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/websocket-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/mvt-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/cluster-datasource.ts","ng://@igo2/geo/lib/feature/shared/feature.enums.ts","ng://@igo2/geo/lib/layer/shared/layer.enums.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.interface.ts","ng://@igo2/geo/lib/layer/utils/image-watcher.ts","ng://@igo2/geo/lib/layer/utils/tile-watcher.ts","ng://@igo2/geo/lib/layer/utils/outputLegend.ts","ng://@igo2/geo/lib/layer/utils/vector-watcher.ts","ng://@igo2/geo/lib/layer/shared/layers/image-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/tile-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vector-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vectortile-layer.ts","ng://@igo2/geo/lib/map/map-browser/map-browser.component.ts","ng://@igo2/geo/lib/overlay/shared/overlay.enum.ts","ng://@igo2/geo/lib/overlay/shared/overlay.service.ts","ng://@igo2/geo/lib/overlay/shared/overlay.directive.ts","ng://@igo2/geo/lib/overlay/shared/overlay.utils.ts","ng://@igo2/geo/lib/layer/shared/style.service.ts","ng://@igo2/geo/lib/query/shared/query.utils.ts","ng://@igo2/geo/lib/layer/layer-item/layer-item.component.ts","ng://@igo2/geo/lib/layer/layer-legend/layer-legend.component.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.enum.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.component.ts","ng://@igo2/geo/lib/map/shared/map.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list-binding.directive.ts","ng://@igo2/geo/lib/layer/track-feature-button/track-feature-button.component.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading-layer.ts","ng://@igo2/geo/lib/feature/shared/store.ts","ng://@igo2/geo/lib/feature/shared/strategies/selection.ts","ng://@igo2/geo/lib/feature/shared/feature.utils.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.component.ts","ng://@igo2/geo/lib/overlay/shared/overlay.ts","ng://@igo2/geo/lib/map/utils/layer-watcher.ts","ng://@igo2/geo/lib/map/shared/map.enums.ts","ng://@igo2/geo/lib/map/shared/map.utils.ts","ng://@igo2/geo/lib/map/shared/controllers/controller.ts","ng://@igo2/geo/lib/map/shared/controllers/view.ts","ng://@igo2/geo/lib/map/shared/map.ts","ng://@igo2/geo/lib/map/shared/mapOffline.directive.ts","ng://@igo2/geo/lib/map/shared/map-pointer-position.directive.ts","ng://@igo2/geo/lib/map/shared/map-pointer-position-by-key.directive.ts","ng://@igo2/geo/lib/map/shared/projection.service.ts","ng://@igo2/geo/lib/map/zoom-button/zoom-button.component.ts","ng://@igo2/geo/lib/map/geolocate-button/geolocate-button.component.ts","ng://@igo2/geo/lib/map/offline-button/offline-button.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.animation.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/mini-basemap.component.ts","ng://@igo2/geo/lib/map/rotation-button/rotation-button.component.ts","ng://@igo2/geo/lib/datasource/utils/esri-style-generator.ts","ng://@igo2/geo/lib/filter/shared/time-filter.enum.ts","ng://@igo2/geo/lib/datasource/shared/capabilities.service.ts","ng://@igo2/geo/lib/datasource/shared/datasource.service.ts","ng://@igo2/geo/lib/layer/shared/layer.service.ts","ng://@igo2/geo/lib/catalog/shared/catalog.enum.ts","ng://@igo2/geo/lib/catalog/shared/catalog.abstract.ts","ng://@igo2/geo/lib/query/shared/query.service.ts","ng://@igo2/geo/lib/query/shared/query.directive.ts","ng://@igo2/geo/lib/search/shared/sources/source.ts","ng://@igo2/geo/lib/query/shared/query-search-source.ts","ng://@igo2/geo/lib/utils/googleLinks.ts","ng://@igo2/geo/lib/utils/osmLinks.ts","ng://@igo2/geo/lib/catalog/shared/catalog.service.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-layer.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-group.component.ts","ng://@igo2/geo/lib/layer/layer.module.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.module.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library-item.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.module.ts","ng://@igo2/geo/lib/catalog/catalog.module.ts","ng://@igo2/geo/lib/datasource/datasource.module.ts","ng://@igo2/geo/lib/filter/shared/filterable-datasource.pipe.ts","ng://@igo2/geo/lib/filter/shared/time-filter.service.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.enum.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.service.ts","ng://@igo2/geo/lib/filter/shared/spatial-filter.enum.ts","ng://@igo2/geo/lib/filter/shared/spatial-filter.service.ts","ng://@igo2/geo/lib/download/shared/download.service.ts","ng://@igo2/geo/lib/download/download-button/download-button.component.ts","ng://@igo2/geo/lib/download/download.module.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.component.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.module.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.module.ts","ng://@igo2/geo/lib/feature/feature.module.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.component.ts","ng://@igo2/geo/lib/measure/shared/measure.enum.ts","ng://@igo2/geo/lib/measure/shared/measure.utils.ts","ng://@igo2/geo/lib/geometry/shared/geometry.errors.ts","ng://@igo2/geo/lib/geometry/shared/geometry.utils.ts","ng://@igo2/geo/lib/geometry/shared/controls/draw.ts","ng://@igo2/geo/lib/geometry/shared/controls/modify.ts","ng://@igo2/geo/lib/geometry/shared/controls/slice.ts","ng://@igo2/geo/lib/measure/measurer/measurer-dialog.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.component.ts","ng://@igo2/geo/lib/measure/measurer/measure-format.pipe.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field-input.component.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.module.ts","ng://@igo2/geo/lib/geometry/geometry.module.ts","ng://@igo2/geo/lib/filter/time-filter-button/time-filter-button.component.ts","ng://@igo2/geo/lib/filter/time-filter-form/time-filter-form.component.ts","ng://@igo2/geo/lib/filter/time-filter-item/time-filter-item.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list-binding.directive.ts","ng://@igo2/geo/lib/wkt/shared/wkt.service.ts","ng://@igo2/geo/lib/filter/ogc-filter-form/ogc-filter-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-form/ogc-filterable-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-item/ogc-filterable-item.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list-binding.directive.ts","ng://@igo2/geo/lib/filter/ogc-filter-button/ogc-filter-button.component.ts","ng://@igo2/geo/lib/filter/ogc-filter-toggle-button/ogc-filter-toggle-button.component.ts","ng://@igo2/geo/lib/filter/spatial-filter/spatial-filter-type/spatial-filter-type.component.ts","ng://@igo2/geo/lib/filter/spatial-filter/spatial-filter-list/spatial-filter-list.component.ts","ng://@igo2/geo/lib/filter/spatial-filter/spatial-filter-item/spatial-filter-item.component.ts","ng://@igo2/geo/lib/filter/filter.module.ts","ng://@igo2/geo/lib/import-export/shared/export.errors.ts","ng://@igo2/geo/lib/import-export/shared/export.utils.ts","ng://@igo2/geo/lib/import-export/shared/export.type.ts","ng://@igo2/geo/lib/import-export/shared/export.service.ts","ng://@igo2/geo/lib/import-export/shared/import.errors.ts","ng://@igo2/geo/lib/import-export/shared/import.utils.ts","ng://@igo2/geo/lib/import-export/shared/import.service.ts","ng://@igo2/geo/lib/import-export/style-list/style-list.service.ts","ng://@igo2/geo/lib/import-export/import-export/import-export.component.ts","ng://@igo2/geo/lib/import-export/shared/drop-geo-file.directive.ts","ng://@igo2/geo/lib/import-export/style-list/style-list.provider.ts","ng://@igo2/geo/lib/import-export/style-list/style-list.module.ts","ng://@igo2/geo/lib/import-export/import-export.module.ts","ng://@igo2/geo/lib/map/map.module.ts","ng://@igo2/geo/lib/measure/measurer/measurer-item.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.module.ts","ng://@igo2/geo/lib/measure/measure.module.ts","ng://@igo2/geo/lib/overlay/overlay.module.ts","ng://@igo2/geo/lib/print/shared/print.service.ts","ng://@igo2/geo/lib/print/print/print.component.ts","ng://@igo2/geo/lib/print/shared/print.type.ts","ng://@igo2/geo/lib/print/print-form/print-form.component.ts","ng://@igo2/geo/lib/print/print.module.ts","ng://@igo2/geo/lib/query/shared/query-search-source.providers.ts","ng://@igo2/geo/lib/query/query.module.ts","ng://@igo2/geo/lib/search/shared/search-source.service.ts","ng://@igo2/geo/lib/search/shared/search.utils.ts","ng://@igo2/geo/lib/search/shared/search.service.ts","ng://@igo2/geo/lib/directions/directions-sources/directions-source.ts","ng://@igo2/geo/lib/directions/shared/directions-source.service.ts","ng://@igo2/geo/lib/directions/shared/directions.service.ts","ng://@igo2/geo/lib/directions/directions-form/directions-form.service.ts","ng://@igo2/geo/lib/directions/directions-form/directions-form.component.ts","ng://@igo2/geo/lib/directions/directions-form/directions-form-binding.directive.ts","ng://@igo2/geo/lib/directions/directions.module.ts","ng://@igo2/geo/lib/search/shared/search-source-service.providers.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.providers.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.providers.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.providers.ts","ng://@igo2/geo/lib/search/shared/search.enums.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.component.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.module.ts","ng://@igo2/geo/lib/search/search-settings/search-settings.component.ts","ng://@igo2/geo/lib/search/search-settings/search-settings.module.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.component.ts","ng://@igo2/geo/lib/search/search-bar/search-url-param.directive.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.module.ts","ng://@igo2/geo/lib/search/search-results/search-results.component.ts","ng://@igo2/geo/lib/search/search-results/search-results-item.component.ts","ng://@igo2/geo/lib/search/search-results/search-results-add-button.component.ts","ng://@igo2/geo/lib/search/search-results/search-results.module.ts","ng://@igo2/geo/lib/search/shared/search-pointer-summary.directive.ts","ng://@igo2/geo/lib/search/search.module.ts","ng://@igo2/geo/lib/toast/toast.component.ts","ng://@igo2/geo/lib/toast/toast.module.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.component.ts","ng://@igo2/geo/lib/workspace/widgets/widgets.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.module.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.service.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.service.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.directive.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.module.ts","ng://@igo2/geo/lib/workspace/workspace.module.ts","ng://@igo2/geo/lib/wkt/wkt.module.ts","ng://@igo2/geo/lib/geo.module.ts","ng://@igo2/geo/lib/search/shared/sources/cadastre.ts","ng://@igo2/geo/lib/search/shared/sources/cadastre.providers.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.providers.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.providers.ts","ng://@igo2/geo/lib/directions/shared/directions.enum.ts","ng://@igo2/geo/lib/directions/directions-sources/osrm-directions-source.ts","ng://@igo2/geo/lib/directions/directions-sources/directions-source.provider.ts"],"names":["MetadataService","prototype","open","metadata","extern","window","url","Injectable","args","providedIn","MetadataButtonComponent","Object","defineProperty","this","_layer","value","_color","openMetadata","metadataService","layer","options","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","IgoMetadataModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","MatIconModule","MatButtonModule","MatTooltipModule","IgoLanguageModule","exports","declarations","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadataKey","metadataValue","__values","o","m","Symbol","iterator","next","done","__read","e","ar","push","error","__spread","concat","DataService","generateIdFromSourceOptions","wms","generateWMSIdFromSourceOptions","wmts","generateWMTSIdFromSourceOptions","xyz","generateXYZIdFromSourceOptions","feature","generateFeatureIdFromSourceOptions","osm","_options","type","generateId","layers","params","LAYERS","chain","charAt","location","origin","Md5","hashStr","uuid","DataSource","getLegend","style","scale","legend","setLegend","html","dataService","id","ol","createOlSource","tslib_1.__extends","FeatureDataSource","sourceOptions","format","getSourceFormatFromOptions","olSourceVector","olFormatCls","formatType","olformat","undefined","Error","olformat.GeoJSON","formatOptions","onUnwatch","queryTitle","OSMDataSource","olSourceOSM","XYZDataSource","olSourceXYZ","OgcFilterWriter","defineOgcFiltersDefaultOptions","ogcFiltersOptions","fieldNameGeometry","srcType","ogcFiltersDefaultValue","enabled","editable","geometryName","advancedOgcFilters","pushButtons","buildFilter","filters","extent","proj","ourBboxFilter","enableBbox","test","JSON","stringify","olfilter.bbox","getCode","join","checkIgoFiltersProperties","wfsOptions","srsName","featureNS","featurePrefix","featureTypes","filter","olfilter.and","bundleFilter","outputFormat","query","olFormatWFS","writeGetFeature","XMLSerializer","serializeToString","split","filterObject","_this","logicalArray_1","forEach","element","createFilter","operator","logical","logicalArray","filterOptions","geometry","wfsPropertyName","propertyName","wfsPattern","pattern","wfsMatchCase","matchCase","wfsWildCard","wildCard","wfsSingleChar","singleChar","wfsEscapeChar","escapeChar","wfsLowerBoundary","lowerBoundary","wfsUpperBoundary","upperBoundary","wfsGeometryName","wfsExtent","wfsWktGeometry","wkt_geometry","wfsSrsName","wfsBegin","begin","wfsEnd","end","wfsExpression","expression","olFormatWKT","readGeometry","dataProjection","featureProjection","olfilter.between","olfilter.contains","olfilter.during","olfilter.equalTo","olfilter.greaterThan","olfilter.greaterThanOrEqualTo","olfilter.intersects","olfilter.isNull","olfilter.lessThan","olfilter.lessThanOrEqualTo","olfilter.like","replace","olfilter.notEqualTo","olfilter.within","olfilter.or","olfilter.not","defineInterfaceFilterSequence","level","filterSequence","addInterfaceFilter","igoOgcFilterObject","parentLogical","f","active","filterid","igoSpatialSelector","filterArray","addFilterProperties","status","rebuiltIgoOgcFilterObjectFromSequence","sequence","nextElement_1","lastProcessedFilter_1","lastParentLogical_1","logicalArray_2","uiFilter","index","indexOf","console","log","computeIgoPushButton","groups","every","group","computedButtons","pb","bundles","bundle","ObjectUtils","copyDeep","title","name","ids","includes","find","pbGroup","handleOgcFiltersAppliedValue","ogcFilters","filterQueryStringPushButton","filterQueryStringAdvancedFilters","pushButtonBundle","g","conditions_1","map","buttonBundle","bundleCondition","buttons","ogcpb","enabledPb","igoFilters","filterQueryString","formatProcessedOgcFilter","processedFilter","layersOrTypenames","appliedFilter","layerOrTypenames","operators","PropertyIsEqualTo","spatial","fieldRestrict","PropertyIsNotEqualTo","PropertyIsLike","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsBetween","During","PropertyIsNull","Intersects","Within","Contains","defaultEpsg","defaultMaxFeatures","defaultWfsVersion","defaultFieldNameGeometry","gmlRegex","RegExp","jsonRegex","formatWFSQueryString","dataSourceOptions","count","epsg","properties","versionWfs200","urlWfs","paramsWFS","effectiveCount","epsgCode","version","paramMaxFeatures","cnt","maxFeatures","srs","valueReference","sourceFields","fieldsNames_1","sourcefield","getFeature","getpropertyvalue","checkWfsParams","wfsDataSourceOptions","getFormatFromOptions","OlFormat.WFS","OlFormat","toLowerCase","match","gmlFormat","olFormatGML2","olFormatGML32","olFormatGML3","OlFormat.TopoJSON","OlFormat.GeoJSON","OlFormat.EsriJSON","OlFormat.GPX","OlFormat.WKT","olFormatOSMXML","OlFormat.KML","WFSDataSource","overlaps","resolution","buildUrl","strategy","OlLoadingStrategy.bbox","queryStringValues","ogcFilterWriter","filterOrBox","filterOrPush","prefix","xmlFilter","baseUrl","download","dynamicUrl","wfsService","_super","getSourceFieldsFromWFS","WFSService","getData","defineFieldAndValuefromWFS","subscribe","getfeatureSourceField","alias","values","sf","wfsGetFeature","nb","http","get","responseType","Observable","fieldList","fieldListWoGeom","fieldListWoGeomStr","olFormats","oneFeature","features","readFeatures","getKeys","field","getGeometryName","manyFeatures","mfeatures","built_properties_value","complete","kv","getProperties","boundedBy","property","fieldType","featureProperties","v","HttpClient","GML2","GML3","GEOJSON","ESRIJSON","TEXT","HTML","HTMLGML2","IFRAME","BLANK","WMSDataSource","mapLabel","queryHtmlTarget","QueryHtmlTarget","refresh","updateParams","igoRefresh","Math","random","buildDynamicDownloadUrlFromParamsWFS","asWFSDataSourceOptions","olSourceImageWMS","sourceParams","VERSION","separator","currentStyle","dpi","DPI","MAP_RESOLUTION","FORMAT_OPTIONS","refreshIntervalSec","setInterval","wfsCheckup","mergeDeep","sourceField","initOgcFilters","FILTER","createDefaultTileGrid","projectionExtent","olproj.get","getExtent","size","extentGetWidth","resolutions","matrixIds","z","pow","olTileGridWMTS","extentGetTopLeft","WMTSDataSource","tileGrid","olSourceWMTS","CartoDataSource","crossOrigin","olSourceCarto","htmlString","config","items","visible","layerOptions","types_1","tslib_1.__values","types_1_1","oneType","cartocss","pop","color","substr","colors","data","j","layer_name","ArcGISRestDataSource","esrijsonFormat","olFormatEsriJSON","attributions","encodeURIComponent","timeFilter","time","timeExtent","customParams","bind","olloadingstrategy.bbox","legendInfo","parseInt","lyr","layerName","_b","_c","lyrLegend","layerId","label","TileArcGISRestDataSource","olSourceTileArcGISRest","WebSocketDataSource","createWebSocket","ws","WebSocket","onmessage","onMessage","onclose","onClose","onerror","onError","onopen","onOpen","event","featureAdded","readFeature","featureToRemove","getFeatureById","getId","removeFeature","addFeature","clear","close","MVTDataSource","mvtFormat","featureClass","olFormatMVT","olSourceVectorTile","ClusterDataSource","source","olSourceCluster","FEATURE","None","Move","Zoom","Default","LAYER","Layer","dataSource","getZIndex","zIndex","setZIndex","baseLayer","opacity","setOpacity","isInResolutionsRange$","getMaxResolution","setMaxResolution","updateInResolutionsRange","getMinResolution","setMinResolution","visible$","setVisible","isInResolutionsRange","showInLayerList","setMap","igoMap","unobserveResolution","observeResolution","resolution$$","viewController","resolution$","unsubscribe","getResolution","minResolution","maxResolution","Infinity","authInterceptor","legendCollapsed","firstLoadComponent","BehaviorSubject","displayed$","combineLatest","pipe","bunch","createOlLayer","legendOptions","collapsed","set","TITLE","ABSTRACT","CUSTOM","Watcher","ImageWatcher","watch","on","handleLoadStart","handleLoadEnd","unwatch","un","image","__watchers__","loading","SubjectStatus","Working","watcherIndex","splice","loaded","Done","TileWatcher","tile","getLayersLegends","legends","newContext","document","createElement","getContext","font","heightPos","layers_1","layers_1_1","legendUrls","legendUrl","legendImage","Image","src","onload","fillText","drawImage","height","legendUrls_1","legendUrls_1_1","VectorWatcher","ImageLayer","olOptions","olLayerImage","getSource","setImageLoadFunction","customLoader","watcher","xhr","XMLHttpRequest","interceptXhr","abort","getImage","arrayBufferView","Uint8Array","response","blob","Blob","imageUrl","URL","createObjectURL","send","status$","TileLayer","olLayerTile","VectorLayer","browsable","exportable","animation","flash","trackFeature","enableTrackFeature","olLayerVector","start","Date","getTime","listenerKey","animate","vectorContext","frameState","flashGeom","getGeometry","clone","elapsed","elapsedRatio","duration","easeOut","newColor","ColorAsArray","getStyleFunction","style2","styleClone","getType","radius","getRadius","setRadius","getStroke","setColor","setWidth","getWidth","getFill","setText","setStyle","drawGeometry","unByKey","render","stopAnimation","trackFeatureListenerId","centerMapOnFeature","feat","getView","setCenter","getCoordinates","disableTrackFeature","VectorTileLayer","olLayerVectorTile","MapBrowserComponent","_view","updateView","ngOnInit","status$$","handleStatusChange","ngAfterViewInit","setTarget","ngOnDestroy","activityService","unregister","activityId","register","ActivityService","ZoomIfOutMapExtent","OverlayService","setFeatures","action","OverlayAction","features$","OverlayDirective","component","features$$","overlayService","res","handleFeatures","Directive","Self","olFormatGeoJSON","createOverlayLayer","overlayDataSource","createOverlayLayerStyle","defaultStyle","createOverlayDefaultStyle","markerStyle","createOverlayMarkerStyle","olFeature","createBufferStyle","strokeRGBA","strokeWidth","fillRGBA","bufferRadius","stroke","olstyle.Stroke","width","fill","olstyle.Style","olstyle.Circle","text","olstyle.Text","olstyle.Fill","overflow","customStyle","StyleService","createStyle","geometryType","getText","_a","fillOpacity","strokeOpacity","_d","fillWithOpacity","slice","strokeWithOpacity","iconColor","olstyle.Icon","imgSize","anchor","parseStyle","styleOptions","olCls","getOlCls","keys","_key","olKey","getOlKey","olstyle","toUpperCase","olstyle.RegularShape","createStyleByAttribute","styleByAttribute","attribute","icon","labelStyle","getLabel","baseStyle","val","toString","getStyle","OlFeature","createClusterStyle","clusterParam","layerStyle","clusterRanges","minRadius","maxRadius","clusterRadius","radiusCalc","labelMatch","labelToGet","from","matchAll","layerIsQueryable","queryable","olLayerIsQueryable","olLayer","LayerItemComponent","removable","expandLegendIfVisible","toggleLegend","updateQueryBadge","onResolutionChange","tooltipText","computeTooltip","networkService","currentState","state","showLegend$","toggleLegendOnClick","toggleVisibility","toggleLegendOnVisibilityChange","tooltip","layerTooltip","layerMetadata","TooltipType","abstract","inResolutionRange","updateLegendOnResolutionChange","inResolutionRange$","hidden","queryBadge","queryBadgeHidden$","NetworkService","orderable","lowerDisabled","raiseDisabled","LayerLegendComponent","lastlLegend","styles","listStyles","STYLES","legendItems$","toggleLegendItem","item","transfertToggleLegendItem","newLegends","outLegends","lastLegends","computeItemTitle","layerLegend","of","localLayerOptions","parse","capabilitiesService","getWMSOptions","wmsDataSourceOptions","_layerOptionsFromCapabilities","getScale","updateLegend","legendItems","stylesAvailable","languageService","translate","instant","sA","normalize","onChangeStyle","onLoadImage","elemRef","renderedLegends","first","renderedLegend","nativeElement","imagesHeight","CapabilitiesService","LanguageService","ViewChildren","always","never","default","LayerListService","sortedAlpha","onlyVisible","onlyInRange","keywordInitialized","sortedAlphaInitialized","onlyVisibleInitialized","onlyInRangeInitialized","LayerListComponent","_layers","layerListService","keyword","change$$","change$","debounce","EMPTY","timer","showToolbar$","computeShowToolbar","layers$","computeLayers","initLayerFilterAndSortOptions","toggleOnlyVisible","toggleOnlyInRange","toggleSort","sortAlpha","clearKeyword","getLowerLayer","l","reduce","prev","current","getUpperLayer","layersOut","filterLayers","sortLayersByTitle","sortLayersByZindex","layerFilterAndSortOptions","showToolbar","LayerListControlsEnum","keepLayerIds","layerKeywords","keywordList","kw","localKeyword","layerTitle","dataSourceType","keywordRegex_1","keywordInList","sort","layer1","layer2","a","thresholdToFilterAndSort","toolbarThreshold","layersAreAllVisible","layersAreAllInRange","ContentChild","ReplaySubject","floatLabel","excludeBaseLayers","expandLegendOfVisibleLayers","MapService","getMap","LayerListBindingDirective","layersOrResolutionChange$$","mapService","debounceTime","shownLayers","setLayersVisibilityRangeStatus","initRoutes","layersVisibility$$","layersRange$$","visibles","Boolean","allLayersAreVisible","inrange","route","llcKKey","llcAKey","llcVKey","queryParams","keywordFromUrl","sortedAplhaFromUrl","onlyVisibleFromUrl","onlyInRangeFromUrl","RouteService","Optional","TrackFeatureButtonComponent","toggleTrackFeature","EntityStoreStrategy","FeatureStoreLoadingStrategy","bindStore","store","watchStore","unbindStore","unwatchStore","doActivate","stores","doDeactivate","unwatchAll","stores$$","has","subscription","view","all$","onFeaturesChange","delete","entries","clearLayer","setLayerFeatures","selectMotion","viewScale","areaRatio","getFeatureId","motion","pristine","FeatureMotion","Map","FeatureStoreLoadingLayerStrategy","onSourceChanges","olFeatures","getFeatures","setStoreOlFeatures","EntityStore","FeatureStore","bindLayer","getEntityId","checkLayer","featureToOl","projection","setLayerOlFeatures","featureFromOl","load","diff","computeOlFeaturesDiff","remove","removeOlFeaturesFromLayer","add","addOlFeaturesToLayer","moveToOlFeatures","addFeatures","entities","OlDragSelectInteraction","OlDragBoxInteraction","FeatureStoreSelectionStrategy","_overlayStore","activate","unselectAll","updateAll","selected","overlayStore","addOverlayLayer","listenToMapClick","dragBox","addDragBoxInteraction","watchAll","unlistenToMapClick","removeDragBoxInteraction","removeOverlayLayer","stores$","stateView","manyBy$","record","records","entity","skip","onSelectFromStore","mapClickListener","onMapClick","listener","exclusive","ctrlKeyDown","reverse","getFeaturesAtPixel","pixel","hitTolerance","layerFilter","onSelectFromMap","olDragSelectInteraction","olInteractions","getInteractions","getArray","olInteractions_1","olInteractions_1_1","olInteraction","condition","addInteraction","olDragSelectInteractionEndKey","onDragBoxEnd","removeInteraction","mapBrowserEvent","acc","olSource","getFeaturesInExtent","doMotion","overlayFeaturesKeys","featuresKeys","getKey","groupedFeatures","groupFeaturesByStore","unselectAllFeaturesFromStore","selectFeaturesFromStore","reverseMany","updateMany","createOverlayStore","overlayLayer","addLayer","removeLayer","projectionOut","OlFormatGeoJSON","setId","getEntityTitle","mapTitle","getEntityProperty","getEntityRevision","getEntityIcon","meta","renderFeatureFromOl","olRenderFeature","projectionIn","geom","exclude","excludeOffline","excludeAttribute","excludeAttributeOffline","olFormat","ends","ends_","OlPolygon","flatCoordinates_","OlGeometryLayout","XY","OlPoint","OlLineString","writeGeometryObject","startsWith","revision","getRevision","computeOlFeatureExtent","olExtent","olextent.createEmpty","olFeatureExtent","olFeatureProjection","olproj.transformExtent","olGeometry","computeOlFeaturesExtent","featureExtent","olextent.extend","scaleExtent","olextent","getSize","featuresAreOutOfView","featuresExtent","mapExtent","viewExtent","x","olextent.containsExtent","featuresAreTooDeepInView","mapExtentArea","olextent.getArea","featuresExtentArea","getZoom","zoomToExtent","moveToExtent","tryBindStoreLayer","tryAddLoadingStrategy","getStrategyOfType","addStrategy","activateStrategyOfType","tryAddSelectionStrategy","olFeaturesMap","olFeaturesToRemove","newOlFeature","olFeaturesToAddIds","FeatureFormComponent","feature$","onSubmit","formDataToFeature","submitForm","emit","igoForm","propertyPrefix","entry","Output","ViewChild","EventEmitter","Overlay","addOlFeatures","addOlFeature","LayerWatcher","unwatchLayer","watchLayer","layer$$","distinctUntilChanged","subscriptions","status_1","Waiting","stringToLonLat","str","mapProjection","opts","lonLat","coordStr","negativeLon","degreesLon","minutesLon","secondsLon","directionLon","decimalLon","negativeLat","degreesLat","minutesLat","secondsLat","directionLat","decimalLat","zone","conf","lon","lat","projectionStr","projectionRegex","lonlatCoord","lonLatPattern","lonLatRegex","dmsCoord","dmsCoordPattern","dmsRegex","patternUtm","utmRegex","patternMtm","mtmRegex","ddCoord","patternDd","ddRegex","dmdCoord","patternDmd","dmdRegex","patternBELL","bellRegex","mmCoord","mmPattern","mmRegex","isXYCoords","toLocaleUpperCase","trim","parseFloat","convertDMSToDD","epsgUtm","Number","_e","olproj","transform","_f","epsgMtm","_g","_h","_j","_k","message","_l","forceNA","olproj.transform","degrees","minutes","seconds","direction","dd","viewStatesAreEqual","state1","state2","zoom","trunc","center","formatScale","round","getResolutionFromScale","getScaleFromResolution","unit","olproj.METERS_PER_UNIT","originalEvent","altKey","MAC","metaKey","ctrlKey","shiftKey","roundCoordTo","coord","decimal","toFixed","lonLatConversion","projections","rawCoord3857","convertedLonLat","code","igo2CoordFormat","utmZone","utmZoneFromLonLat","utmName","rawCoordUtm","mtmZone","mtmZoneFromLonLat","mtmName","rawCoordMtm","rawCoord","numericEpsgCode","ceil","long","MapController","getOlMap","olMap","setOlMap","teardownObservers","observerKeys","MapViewController","stateHistory","setupObservers","onMoveEnd","extent$$","extent$","setExtent","getOlProjection","olView","getProjection","getCenter","calculateExtent","getUnits","zoomIn","zoomTo","zoomOut","cancelAnimations","easing","oleasing.easeOut","MapViewAction","getRotation","resetRotation","rotation","hasPreviousState","states","stateIndex","hasNextState","previousState","setStateIndex","nextState","clearStateHistory","setInitialState","fromCenter","toCenter","distCenter","sqrt","fromExtent","fromSize","xSize","maxZoom","maxZoomOnExtent","fit","padding","setState","state$","Subject","IgoMap","init","controls","attribution","attributionOpt","olControlAttribution","scaleLine","scaleLineOpt","olControlScaleLine","interactions","altShiftDragRotate","doubleClickZoom","keyboard","mouseWheelZoom","shiftDragZoom","dragPan","pinchRotate","pinchZoom","olinteraction.defaults","setView","overlay","buffer","layerWatcher","currentView","viewOptions","unsubscribeGeolocate","olproj.fromLonLat","geolocate","changeBaseLayer","getBaseLayers","setMinZoom","minZoom","setMaxZoom","getLayerById","getLayerByAlias","addLayers","incrementArray","addedLayers","doAddLayer","setLayers","removeLayers","newLayers","layersToRemove","getLayerIndex","doRemoveLayer","removeAllLayers","raiseLayer","moveLayer","lowerLayer","to","layerTo","zIndexTo","zIndexFrom","existingLayer","offset","sortLayersByZIndex","findIndex","track","geolocation$$","geolocation","getTracking","startGeolocation","geolocation$","getAccuracy","getAccuracyGeometry","geolocationFeature","bufferFeature","options_","coordinates","getPosition","bufferGeom","olCircle","bufferStroke","bufferFill","bufferText","showBufferRadius","setZoom","stopGeolocation","setTracking","olGeolocation","trackingOptions","enableHighAccuracy","tracking","evt","onOfflineToggle","offline","offlineButtonToggle$","offlineButtonState","defaultOptions","olproj4.register","proj4","MapOfflineDirective","offlineButtonToggle","offlineButtonStatus","networkState","connection","messageService","info","changeLayer","message_1","title_1","messageObs","titleObs","message1","title1","pathOffline","setUrl","MessageService","PointerPositionDirective","listenToMapPointerMove","unlistenToMapPointerMove","pointerMoveListener","onPointerEvent","pointerPositionDelay","delay","dragging","mediaService","isTouchScreen","lastTimeoutRequest","clearTimeout","lonlat","coordinate","setTimeout","pointerPositionCoord","MediaService","PointerPositionByKeyDirective","subscribeToKeyDown","subscribeToKeyUp","unsubscribeToKeyDown","unsubscribeToKeyUp","pointerPositionByKeyDelay","keyDown$$","fromEvent","keyCode","pointerPositionByKeyCode","definedKeyIsDown$","keyUp$$","lonlat_1","pointerPositionByKeyCoord","ProjectionService","registerProjection","defs","def","ConfigService","getConfig","ZoomButtonComponent","getMinZoom","getMaxZoom","GeolocateButtonComponent","_map","OfflineButtonComponent","check","onToggle","btnStyle","colorOff","change","baseLayersSwitcherSlideInOut","trigger","transition","BaseLayersSwitcherComponent","_useStaticIcon","layers$$","arrayLayers","_baseLayers","collapseOrExpand","baseLayers","useStaticIcon","expand","mapResolution","mapZoom","bl","blHidden","animations","showButton","media$","Media","Mobile","MiniBaseMapComponent","handleMoveEnd","_baseLayer","handleBaseLayerChanged","_disabled","_display","disabled","appRef","tick","basemap","baselayer","layerService","createLayer","LayerService","ApplicationRef","RotationButtonComponent","_showIfNoRotation","rotationStyle","radians","EsriStyleGenerator","_convertPointToPixel","point","_transformColor","_getResolutionForScale","units","mpu","_convertEsriTS","symbol","_transformAngle","angle","weight","family","textBaseline","verticalAlignment","textAlign","horizontalAlignment","offsetX","xoffset","offsetY","yoffset","_convertEsriPMS","contentType","imageData","_convertEsriSFS","outline","_convertOutline","lineDash","color$$1","_convertEsriSLS","ol3Rad","PI","_convertEsriSMS","points","radius2","_convertLabelingInfo","labelingInfo","mapUnits","ii","labelExpression","maxScale","minScale","_converters","_renderSimple","renderer","_renderClassBreaks","defaultSymbol","classes","classBreakInfos","classBreakInfo","min","classMinValue","minValue","classMaxValue","max","_renderUniqueValue","field1","infos","uniqueValueInfos","me","hash","generateStyle","layerInfo","drawingInfo","styleFunctions","drawingInfoStyle","_renderers","labelingInfoStyleFunctions","result","esriPMS","esriSFS","esriSLS","esriSMS","esriTS","uniqueValue","simple","classBreaks","DATE","TIME","DATETIME","YEAR","CALENDAR","SLIDER","baseOptions","getCapabilities","capabilities","parseWMSOptions","getWMTSOptions","parseWMTSOptions","getCartoOptions","account","mapId","jsonp","cartoOptions","parseCartoOptions","getArcgisOptions","arcgisOptions","catchError","err","forkJoin","parseArcgisOptions","getTileArcgisOptions","parseTileArcgisOptions","service","HttpParams","fromObject","request","_i","parsers","read","findDataSourceInCapabilities","Capability","DataURL","Abstract","KeywordList","getTimeFilter","timeFilterable","Style","removeUndefined","Title","MaxScaleDenominator","MinScaleDenominator","OnlineResource","optionsFromCapabilities","layer_definition","styleGenerator","olAttribution","copyrightText","timeInfo","setTime","toUTCString","range","TimeFilterType","TimeFilterStyle","layerArray","layer_1","isArray","Name","dimension","Dimension","minMaxDim","step","self","tslib_1.__decorate","Cacheable","maxCacheCount","capabilitiesStore","WMSCapabilities","WMTSCapabilities","DataSourceService","createAsyncDataSource","context","createOSMDataSource","createFeatureDataSource","createWFSDataSource","wmsContext","removeDuplicateCaseInsensitive","createWMSDataSource","createWMTSDataSource","createXYZDataSource","createCartoDataSource","createArcGISRestDataSource","createWebSocketDataSource","createMVTDataSource","createTileArcGISRestDataSource","createClusterDataSource","datasources$","wfsDataSourceService","createTileLayer","createVectorLayer","createImageLayer","createVectorTileLayer","createAsyncLayer","dataSourceService","styleService","serviceStyle_1","serviceStyle_2","baseStyle_1","layerOptionsOl","applyMapboxStyle","serviceStyle_3","mapboxStyle","getMapboxGlStyle","stylefunction","AuthInterceptor","Group","baselayers","composite","Catalog","catalogService","WMSCatalog","collectCatalogItems","loadCatalogWMSLayerItems","sType","TypeCatalog","WMTSCatalog","loadCatalogWMTSLayerItems","BaselayersCatalog","loadCatalogBaseLayerItems","CompositeCatalog","loadCatalogCompositeLayerItems","CatalogFactory","createInstanceCatalog","QueryService","queryLayer","getQueryUrl","queryFormat","QueryFormat","extractData","urlGml","mergeMap","gmlRes","imposedGeom","mergeGML","parser","olformat.WMSGetFeatureInfo","pts","firstFeatureType","olmpts","olmline","olgeom.MultiLineString","ptsArray","olmpoly","olgeom.MultiPolygon","nbFeatures","bbox","getQueryParams","bboxExtent","featureGeometryCoordinates","featureGeometryType","olgeom.Point","appendLineString","olgeom.LineString","appendPolygon","olgeom.Polygon","convexHull","cross","lower","points_1","points_1_1","upper","imposedGeometry","queryDataSource","allowedFieldsAndAlias","getAllowedFieldsAndAlias","extractGML3Data","extractGeoJSONData","extractEsriJSONData","extractTextData","extractHtmlData","extractGML2Data","getQueryTitle","sourceTitle","order","warn","featureToResult","htmlTarget","searchParams","bboxRaw","xPosition","yPosition","y","crs","threshold","abs","clickx","clicky","clickx1","clicky1","wktPoly","olformat.WKT","bodyTagStart","bodyTagEnd","lastIndexOf","body","queryString","pairs","pair","decodeURIComponent","featureOL","featureGeometry","shape","SHAPE","the_geom","datasource","forceGML2","wmsDatasource","WMSGetFeatureInfoOptions","INFO_FORMAT","getMimeInfoFormat","QUERY_LAYERS","FEATURE_COUNT","getGetFeatureInfoUrl","cartoDatasource","sql","meters","queryPrecision","tileArcGISRestDatasource","olextent.boundingExtent","olextent.buffer","mime","getLabelMatch","queryEnabled","QueryDirective","cancelOngoingQueries","onMapEvent","queryService","queries$","queryFeatures","doQueryFeatures","queryLayers","waitForAllQueries","queries$$","zip","results","query$","clickedFeatures","forEachFeatureAtPixel","layerOL","newFeature","values_","nom","id_","_icon","OlRenderFeature","queryFeaturesHitTolerance","queryFeaturesCondition","queryableLayers","hasFeature","_id","sub","SearchSource","getDefaultOptions","available","showInPointerSummary","showInSettings","searchUrl","settings","setParamFromSetting","setting","confValue_1","getHashtagsValid","term","settingsName","hashtags","searchSourceSetting","getSettingsValues","hashtagsValid","hashtag","hashtagKey","substring","types","search","QuerySearchSource","Inject","GoogleLinks","getGoogleMapsLink","getGoogleStreetViewLink","OsmLinks","getOpenStreetMapLink","getOpenStreetCamLink","CatalogService","loadCatalogs","contextConfig","catalogConfig","apiUrl","catalogsFromConfig","sources","observables$","baseLayersCatalog","catalogsFromApi$","catalogs","loadCatalogItems","catalog","getCatalogBaseLayersOptions","layersOptions","CatalogItemType","getCatalogCapabilities","includeRecursiveItems","getWMTSItems","compositeCatalog","catalogsFromInstance","request1$","request2$","k","groupImpose","pushImposeGroup_1","outGroupImpose","address","flatLayer","flatDeepLayer","arr","obs","idx","request3$","output","recursiveGroupByLayerAddress","keyFn","outItem","indicesMatchTitle_1","bInd","nPosition","groupId","ind","ix","groupByGroupId","TypeCapabilities","prepareCatalogItemLayer","idParent","layersQueryFormat","catalogQueryParams","catalogSourceOptions","catalogTooltipType","configuredQueryFormat","retriveLayerInfoFormat","baseSourceOptions","setCrossOriginAnonymous","prepareCatalogItemGroup","itemListIn","regexes","idGroup","idGroupItemNextLevel","groupItem","testLayerRegexes","layerItem","itemsPrepare","loopLevel","regFilters","retrieveTooltipType","findCatalogInfoFormat","idGroupItem","Contents","Identifier","matrixSet","requestEncoding","regex","layerNameFromCatalog","currentLayerInfoFormat","baseInfoFormat","tooltipType","configuredInfoFormat","specific","CatalogBrowserComponent","currentItems","added","sortDirection","valueAccessor","catalogAllowLegend","showLegend","EntityStoreWatcher","cdRef","destroy","isGroup","isLayer","onLayerAddedChange","update","addLayerToMap","removeLayerFromMap","onGroupAddedChange","addGroupToMap","removeGroupFromMap","addLayersToMap","removeLayersFromMap","oLayers","oLayer","sortCatalogItemsByTitle","returnItem","titleA","titleB","ChangeDetectorRef","toggleCollapsedGroup","CatalogBrowserLayerComponent","isPreview$","addedLayerIsPreview","onMouseEvent","onToggleClick","askForLegend","layerLegendShown$","igoLayer$","addedChange","haveGroup","inRange$","CatalogBrowserGroupComponent","evaluateAdded","evaluateDisabled","added$","onToggleCollapsed","layerAddedChange","tryToggleGroup","onLayerPreview","preview$","all","toggleCollapsed","disabled$","onTitleClick","IgoLayerModule","MatInputModule","MatFormFieldModule","FormsModule","MatSelectModule","MatListModule","MatSliderModule","MatBadgeModule","IgoListModule","IgoCollapsibleModule","IgoImageModule","IgoCatalogBrowserModule","IgoMatBadgeIconModule","CatalogLibaryComponent","onCatalogSelect","focused","catalogSelectChange","CatalogLibaryItemComponent","IgoCatalogLibraryModule","IgoCatalogModule","IgoDataSourceModule","FilterableDataSourcePipe","arg","isTimeFilterable","isOgcFilterable","Pipe","TimeFilterService","filterByDate","date","newdateformStart","newdateformEnd","dates","reformatDateTime","filterByYear","year","years","getFullYear","month","getMonth","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","BasicNumericOperator","Basic","BasicAndSpatial","Spatial","All","OGCFilterService","filterByOgc","filterString","setOgcWFSFiltersOptions","wfsDatasource","olProjection","interfaceOgcFilters","setOgcWMSFiltersOptions","filtered","Predefined","Polygon","Point","Address","Thematics","SpatialFilterService","getKeyByValue","object","loadFilterList","urlPath","urlFilterList","featureCollection","loadThematicsList","name_1","name_2","loadFilterItem","itemType","thematic","urlType","urlItem","SpatialFilterItemType","post","loc","loadItemById","featureType","featureCode","configService","AdmRegion","Arrond","CircFed","CircProv","DirReg","MRC","Mun","RegTour","bornes","hydro","routes","DownloadService","success","DSOptions","outputFormatDownload","baseurl","DownloadButtonComponent","openDownload","downloadService","IgoDownloadModule","FeatureDetailsComponent","_source","detectChanges","_feature","htmlSanitizer","sanitizer","bypassSecurityTrustResourceUrl","isObject","isUrl","filterFeatureProperties","DomSanitizer","IgoFeatureDetailsModule","IgoKeyValueModule","IgoFeatureFormModule","IgoFormModule","IgoFeatureModule","GeometryFormFieldComponent","geometryType$","drawGuide$","value$","formControl","value$$","valueChanges","FormFieldComponent","drawControlIsActive","freehandDrawIsActive","geometryTypeField","geometryTypes","drawGuideField","drawGuidePlaceholder","measure","Length","Area","Meters","Kilometers","Miles","Feet","MeasureLengthUnitAbbreviation","MeasureLengthUnit","SquareMeters","SquareKilometers","SquareMiles","SquareFeet","Hectares","Acres","MeasureAreaUnitAbbreviation","MeasureAreaUnit","metersToKilometers","metersToFeet","metersToMiles","squareMetersToSquareKilometers","squareMetersToSquareMiles","squareMetersToSquareFeet","squareMetersToHectares","squareMetersToAcres","metersToUnit","conversion","squareMetersToUnit","formatMeasure","parts","locale","toLocaleString","minimumFractionDigits","maximumFractionDigits","unitAbbr","computeBestLengthUnit","converted","possibleUnits","computeBestAreaUnit","createMeasureInteractionStyle","createMeasureLayerStyle","measureOlGeometryLength","getFlatCoordinates","olGetLength","measureOlGeometryArea","olGetArea","measureOlGeometry","area","lengths","flatCoordinates","coordinatesLength","olSegment","updateOlGeometryMidpoints","olMidpoints","getOlGeometryMidpoints","midpointsLength","midpointCoordinate","getCoordinateAt","olMidpoint","setCoordinates","expectedNumber","clearOlMidpointTooltip","olTooltip","removeOverlay","updateOlTooltipsAtMidpoints","createOlTooltipAtPoint","setPosition","getOlTooltipsAtMidpoints","updateOlGeometryCenter","olCenter","centerCoordinate","olGetCenter","updateOlTooltipAtCenter","getOlTooltipAtCenter","getTooltipsOfOlGeometry","olTooltips","olCenterTooltip","olPoint","OlOverlay","className","stopEvent","GeometrySliceError","GeometrySliceMultiPolygonError","GeometrySliceLineStringError","GeometrySliceTooManyIntersectionError","createDrawInteractionStyle","createDrawHoleInteractionStyle","sliceOlGeometry","olSlicer","sliceOlPolygon","sliceOlLineString","olLineString","olPolygon","getLinearRingCount","slicer","OlGeoJSON","outerCoordinates","getLinearRing","totalIntersectionCount","segmentCoordinates","segment","lineString","intersections","lineIntersect","intersectionCount","intersection","addLinearRingToOlPolygon","olLinearRing","appendLinearRing","getMousePositionFromOlGeometryEvent","olEvent","DrawControl","olOverlayLayer","clearOlInnerOverlaySource","removeOlInnerOverlayLayer","removeOlDrawInteraction","addOlInnerOverlayLayer","addOlDrawInteraction","olOverlaySource","createOlInnerOverlayLayer","OlVectorLayer","OlVectorSource","olDrawInteraction","freehand$","getValue","OlDraw","stopClick","drawStyle","maxPoints","freehand","freehandCondition","onDrawStartKey","onDrawStart","onDrawEndKey","onDrawEnd","start$","onChangesKey","olGeometryEvent","mousePosition","changes$","end$","removeLastPoint","ModifyControl","olLinearRingsLayer","removeOlModifyInteraction","removeOlTranslateInteraction","addOlTranslateInteraction","activateTranslateInteraction","addOlModifyInteraction","activateModifyInteraction","setOlGeometry","createOlLinearRingsLayer","addOlLinearRingsLayer","removeOlLinearRingsLayer","clearOlLinearRingsSource","olLinearRingsSource","olModifyInteraction","OlModify","deactivateModifyInteraction","olModifyInteractionIsActive","onModifyStartKey","onModifyStart","onModifyEndKey","onModifyEnd","onModifyKey","olTranslateInteraction","OlTranslate","deactivateTranslateInteraction","olTranslateInteractionIsActive","onTranslateStartKey","onTranslateStart","onTranslateEndKey","onTranslateEnd","onTranslateKey","olOuterGeometry","getOlGeometry","intersectsCoordinate","subscribeToDrawKeyDown","drawKeyDown$$","unsubscribeToDrawKeyDown","subscribeToDrawKeyUp","activateDrawInteraction","drawKeyUp$$","unsubscribeToDrawKeyUp","deactivateDrawInteraction","olDrawInteractionIsActive","removedOlInteractions","linearRingCoordinates","addLinearRingToOlGeometry","onDrawKey","_linearRingCoordinates","updateLinearRingOfOlGeometry","OlLinearRing","newCoordinates","getLinearRings","SliceControl","removeDrawLineControl","addDrawLineControl","drawLineControl","drawLineStart$$","olLine","onDrawLineStart","drawLineEnd$$","onDrawLineEnd","olSlicedGeometries","lineExtent","forEachFeatureInExtent","olParts","error$","MeasurerDialogComponent","onNoClick","dialogRef","MatDialogRef","MAT_DIALOG_DATA","measureAreaUnit","measureLengthUnit","MeasurerComponent","_activeMeasureType","setActiveMeasureType","activeDrawControl","initStore","createDrawLineControl","createDrawPolygonControl","createModifyControl","toggleDrawControl","onToggleTooltips","showTooltips","updateTooltipsOfOlSource","deactivateModifyControl","freezeStore","onMeasureTypeChange","measureType","activeMeasureType","onToggleDrawControl","toggle","deactivateDrawControl","showTooltipsOfOlSource","clearTooltipsOfOlSource","onToggleMeasureUnitsAuto","measureUnitsAuto","onLengthUnitChange","activeLengthUnit","table","activeOlGeometry","updateTooltipsOfOlGeometry","onAreaUnitChange","activeAreaUnit","onCalculateClick","selectedFeatures$","sum","perimeter","openDialog","onDeleteClick","deleteMany","onModifyClick","modifyControl","feature_1","_olFeature","activateModifyControl","clearTooltipsOfOlGeometry","dialog","many","onFeatureAddedKey","updateMeasureOfOlGeometry","onFeatureRemovedKey","selectedFeatures$$","deactivateStrategyOfType","olDrawSource","OlStyle","drawPolygonControl","MeasureType","activateDrawControl","drawControl","drawStart$$","drawEnd$$","drawChanges$$","onDrawChanges","clearMeasures","finalizeMeasureOfOlGeometry","addFeatureToStore","measure$","selection","deactivate","modifyStart$$","modifyEnd$$","modifyChanges$$","onModifyChanges","setProperties","_measure","featureId","olMidpointsTooltips","length_1","updateOlTooltip","showTooltipsOfOlGeometry","shouldShowTooltip","addOverlay","forEachFeature","_unit","_type","getElement","innerHTML","computeTooltipInnerHTML","minSegmentLength","MatDialog","tableTemplate","selectMany","selectionCheckbox","columns","MeasureFormatPipe","out","GeometryFormFieldInputComponent","_geometryType","ready","deactivateControl","createDrawControl","toggleControl","_drawControlIsActive","_freehandDrawIsActive","_drawStyle","isStyleWithRadius","defaultDrawStyleRadius","_overlayStyle","_value","addGeoJSONToOverlay","onChange","olModify_1","features_","overlayStyle","addOlOverlayLayer","createMeasureTooltip","registerOnChange","fn","registerOnTouched","onTouched","writeValue","updateDrawStyleWithDrawGuide","activateControl","control","activeControl","olGeometryEnds$$","onOlGeometryEnds","olGeometryChanges$$","onOlGeometryChanges","removeMeasureTooltip","updateMeasureTooltip","circleToPoint","olGeoJSON","_radius","cos","lastIndex","lastLength","olLastMidpoint","innerHtml","olStyle","drawGuide","NgControl","ngControl","IgoGeometryFormFieldModule","ReactiveFormsModule","MatButtonToggleModule","IgoGeometryModule","entryComponents","TimeFilterButtonComponent","toggleTimeFilter","timeFilterCollapse","header","TimeFilterFormComponent","valueArray","startDate","endDate","isNaN","valueOf","getStepDefinition","timeInterval","utcmin","getTimezoneOffset","utcmax","startYear","initStartYear","endYear","initEndYear","isRange","startListYears","endListYears","listYears","checkFilterValue","yearChange","storeCurrentFilterValue","timeFromWms","getParams","handleDateChange","setupDateOutput","applyTypeChange","handleYearChange","handleListYearChange","handleListYearStartChange","dateToNumber","setSliderThumbLabel","thumbLabel","findThumbLabel","mySlider","_elementRef","childNodes","textContent","children","toggleFilterState","stopFilter","resetFilter","playFilter","interval","playIcon","that","newMinDateNumber","maxDateNumber","playYear","clearInterval","handleSliderDateChange","handleSliderTooltip","handleSliderYearChange","handleSliderValue","currentDate","getRoundedDate","toDateString","toTimeString","setSeconds","setHours","setMinutes","getDay","selectedHour","getHours","selectedMinute","getMinutes","getRangeMinDate","getRangeMaxDate","atMinute","coeff","moment.duration","asMilliseconds","MatSlider","resetIcon","TimeFilterItemComponent","timeFilterService","filtersCollapsed","toggleFiltersCollapsed","TimeFilterListComponent","TimeFilterListBindingDirective","WktService","wktToFeature","wkt","wktProj","featureProj","olWKT","extentToWkt","epsgTO","extentProj","currentExtent","roundCoordinateArray","wktLine","wktMultiPoints","coordinateArray","roundArray","array","snrcToWkt","snrc","snrc250kIndex","snrc50kIndex","snrc1m","snrc250k","snrc50k","ar1m","part1m","part250k_1","part50k_1","partEW","partSN","index250kEW_1","index250kSN_1","index50kEW_1","index50kSN_1","increment250kEW","increment250kSN","increment50kEW","increment50kSN","unitPerTypeEW","unitPerTypeSN","ul","1","2","3","4","5","6","7","8","9","10","lr","ur","ll","OgcFilterFormComponent","updateField","computeAllowedOperators","allowedOperators","allowedOperatorsType","effectiveOperators","OgcFilterOperatorType","ogcFilterOperators","fields","excludeFromOgcFilters","currentFilter","checked","removeOverlayByID","refreshFilters","deleteFilter","changeNumericProperty","changeProperty","overlayId","baseOverlayName","changeOperator","changeGeometry","checkSNRC50k","checkSNRC250k","checkSNRC1m","wktService","igoSpatialSelectors","OgcFilterableFormComponent","OgcFilterableItemComponent","hasPushButton","ogcFilterService","lastRunOgcFilter","hasActiveSpatialFilter","filtersAreEditable","addFilterToSequence","lastLevel","firstFieldName","includedFields","datasourceOptions","defaultLogicalParent","force","activeFilters","af","ogcLayer","rebuildFilter","isAdvancedOgcFilters","addFilterDisabled","changeOgcFiltersAdvancedOgcFilters","changeOgcFilterType","OgcFilterableListComponent","OgcFilterableListBindingDirective","OgcFilterButtonComponent","toggleOgcFilter","ogcFilterCollapse","OgcFilterToggleButtonComponent","getPushButtonsGroups","currentPushButtonGroup","applyFilters","getToolTip","tt","getButtonColor","background-color","bundleIsVertical","vertical","onChangeGroup","currentOgcPushButton","conditions","SpatialFilterTypeComponent","_store","selectedTypeIndex","spatialType","activeDrawType","eventType","onTypeChange","SpatialFilterType","onQueryTypeChange","eventQueryType","selectedQueryType","onZoneChange","zoneChange","onDrawTypeChange","queryType","FormControl","SpatialFilterListComponent","_queryType","setValue","formValueChanges$$","filterNormalized","displayFn","spatialFilterService","featureGeom","selectedZone","SpatialFilterItemComponent","reset","drawStyle$","radiusFormControl","PointStyle","PolyStyle","overlayStyle$","entities$","items_1","items_1_1","childrens","localeCompare","child","thematics","radiusChanges$$","detach","onItemTypeChange","selectedItemType","itemTypeChange","onMeasureUnitChange","measureUnit","isPredefined","isPolygon","isPoint","hasChild","_","node","treeControl","isExpanded","collapse","isAllSelected","numSelected","numNodes","selectedThematics","hasChildrenSelected","bool","masterToggle","selectAll","selectedThematicsName","thematicChange","select","childrensToggle","deselect","onToggleChange","nodeSelected","onDrawControlChange","onfreehandControlChange","freehandControl","toggleSearchButton","drawZone","drawZoneEvent","radiusEvent","toggleSearch","clearButton","clearButtonEvent","clearSearch","clearSearchEvent","disableSearchButton","formValue","alert","NestedTreeControl","displayedColumns","MatTreeNestedDataSource","SelectionModel","displayedColumnsResults","IgoFilterModule","provide","MAT_DATE_LOCALE","useValue","MatAutocompleteModule","MatTabsModule","MatRadioModule","MatMenuModule","MatTableModule","MatTreeModule","MatCheckboxModule","MatSlideToggleModule","MatOptionModule","MatDatepickerModule","MatNativeDateModule","MatDatetimepickerModule","MatNativeDatetimeModule","ExportError","ExportInvalidFileError","ExportNothingToExportError","handleFileExportError","handleNothingToExportError","ExportFormat","strEnum","ExportService","export","exportOlFeatures","exportAsync","observer","nothingToExport","ogreFormats","ogreUrl","noOgreFallbacks","exportToFile","exportWithOgre","featuresText","writeFeatures","fileName","downloadContent","form","setAttribute","acceptCharset","enctype","geojsonField","appendChild","outputNameField","outputName","ogreFormat","outputFormatField","submit","removeChild","GML","GPX","KML","Shapefile","CSV","ImportError","ImportInvalidFileError","ImportUnreadableFileError","ImportNothingToImportError","ImportSizeError","ImportSRSError","addLayerAndFeaturesToMap","floor","olStyle.Stroke","olStyle.Fill","olStyle.Style","olStyle.Circle","addLayerAndFeaturesStyledToMap","styleListService","distance","getStyleList","styleByAttribute_1","clusterParam_1","handleFileImportSuccess","file","computeLayerTitleFromFile","messageTitle","handleNothingToImportError","handleFileImportError","Invalid file","handleInvalidFileImportError","File is too large","handleSizeFileImportError","Failed to read file","handleUnreadbleFileImportError","Invalid SRS definition","handleSRSImportError","mimeType","getFileExtension","ImportService","import","importAsync","getFileImporter","extension","allowedMimeTypes","allowedZipMimeTypes","allowedExtensions","importFile","importFileWithOgre","importer","reader","FileReader","parseFeaturesFromFile","readAsText","formData","FormData","append","headers","HttpHeaders","errors","parseFeaturesFromGeoJSON","caught","errMsg","msg","startWith","GeoJSON","olformat.KML","olformat.GML","olformat.GPX","writeFeatureObject","StyleListService","resolve","styleList","baseStyleList","path","injector","Promise","_reject","throwError","styleListResponse","Injector","ImportExportComponent","importFiles","files","inputProj","espgCodeRegex","loading$","this_1","importService","onFileImportSuccess","onFileImportError","files_1","files_1_1","handleExportFormSubmit","flatMap","cluster","exportService","onFileExportError","buildForm","formBuilder","Validators","required","FormBuilder","formats","DragAndDropDirective","DropGeoFileDirective","filesDropped$$","filesDropped","onFilesDropped","onDragOver","onDragLeave","onDrop","HostListener","filesInvalid","STYLELIST_OPTIONS","InjectionToken","provideStyleListOptions","styleListFactory","provideStyleListLoader","APP_INITIALIZER","useFactory","multi","deps","IgoStyleListModule","IgoImportExportModule","IgoSpinnerModule","IgoDrapDropModule","IgoMapModule","IgoConfirmDialogModule","MeasurerItemComponent","_auto","toggleAutoUnit","measureUnitChange","measure$$","computeBestMeasureUnit","IgoMeasurerModule","IgoEntityTableModule","IgoMeasureModule","IgoOverlayModule","html2canvas","_html2canvas","PrintService","print","paperFormat","orientation","doc","jsPDF","dimensions","internal","pageSize","margins","addTitle","showProjection","showScale","addProjScale","comment","addComment","addMap","addLegend","saveDoc","getLayersLegendHtml","getLayersLegendImage","doZipFile","div","useCORS","then","canvas","generateCanvaFileToZip","saveCanvasImageAsFile","parentNode","catch","pageWidth","titleMarginLeft","titleWidth","setFont","setFontSize","heightPixels","textProjScale","imgData","toDataURL","addPage","imageSize","getImageSizeToFitPdf","addImage","addCanvas","rect","timeout","mapSize","widthPixels","once","mapStatus$$","mapStatus","renderMap","defineNbFileToProcess","nbFileToProcess","downloadMapImage","newCanvas","positionHCanvas","positionWProjScale","commentWidth","measureText","positionHProjScale","commentNbLine","positionHComment","fillStyle","fillRect","projText","scaleText","mapScale","nbCommentChar","CommentLengthToCut","commentCurrentLine","positionFirstCutChar","positionLastBlank","tiwContent","getWorldFileInformation","addFileToZip","saveAs","saveFileProcessing","renderSync","save","pageHeight","getHeight","canHeight","canWidth","heightRatio","widthRatio","maxRatio","currentResolution","blobFormat","navigator","msSaveBlob","msToBlob","toBlob","zipFile","JSZip","getZipFile","generateAsync","PrintComponent","_outputFormat","_paperFormat","_orientation","_imageFormat","_resolution","handleFormSubmit","isPrintService","printService","imageFormat","PrintOutputFormat","PrintPaperFormat","PrintOrientation","PrintResolution","PrintSaveImageFormat","PrintFormComponent","imageFormatField","Jpeg","onlySelf","Pdf","paperFormatField","Letter","orientationField","landscape","resolutionField","titleField","commentField","showProjectionField","showScaleField","showLegendField","doZipFileField","isValid","submitted","toggleImageSaveProp","outputFormats","paperFormats","orientations","imageFormats","IgoPrintModule","querySearchSourceFactory","provideQuerySearchSource","IgoQueryModule","SearchSourceService","getSources","getEnabledSources","enableSourcesByType","sourceCanSearch","sourceCanReverseSearch","reverseSearch","sourceCanReverseSearchAsSummary","SearchService","termIsValid","getEnabledOnly","searchSourceService","sourceId","searchType","searchSources","asPointerSummary","reverseSourceFonction","reverseSearchSources","DirectionsSource","DirectionsSourceService","directionsSourceServiceFactory","provideDirectionsSourceService","DirectionsService","directionsOptions","directionsSourceService","routeSource","DirectionsFormService","getStopsCoordinates","stopsCoordinates","stops","stop","stopCoordinates","setStops","getStops","DirectionsFormComponent","changeRoute","showRouteGeometry","prevent","preventDefault","focusOnStop","browserLanguage","getLanguage","stopsForm","directionsType","directionsMode","stopOrderPriority","directionsFixedStartEnd","createStop","directionsFormService","conditionalInit","take","initStores","initOlInteraction","subscribeToFormChange","routesQueries$$","stream$","handleTermChanged","unsubscribeRoutesQueries","unlistenSingleClick","freezeStores","writeStopsToFormService","loadingStrategy","stopsStore","stopMarker","routeStore","selectedStopFeature","selectStop","olinteraction.Select","olcondition.pointerMove","translateStop","olinteraction.Translate","getLength","executeTranslation","selectedRoute","olcondition.click","selectCoordinates","addStop","pos","at","patchValue","handleLocationProposals","addStopOverlay","reverseSearchProposal","overview","firstFeature","translatedPos","translationCoordinates","stopProposals","steps","alternatives","getRoutes","stopIndex","groupedLocations","roundedCoordinates","stopPoint","searchService","resultPos","changeDetectorRefs","directionsText","stopsCounts","raiseStop","moveStop","lowerStop","fromValue","removeStop","insert","insertIndex","directionsPos","getStopOverlayID","deleteStoreFeatureByID","removeAt","resetForm","routesResults","nbStops","formatStep","formatInstruction","maneuver","modifier","bearing_after","exit","activeRoute","stepPosition","lastStep","directiveFr","directiveEn","directive","cssClass","translatedDirection","translateBearing","translatedModifier","translateModifier","frAggregatedDirection","enAggregatedDirection","coma","instruction","bearing","formatDistance","formatDuration","summary","showSegment","showRouteSegmentGeometry","vertexId","lastPoint","geojsonGeom","previousVertex","previousVertexRevision","vertexFeature","zoomRoute","routeFeature","routeExtent","geometryMapProjection","previousRoute","previousRouteRevision","coords","routeResponse","directionsService","focusKey","olobservable.unByKey","copyLinkToClipboard","Clipboard","copy","getUrl","copyDirectionsToClipboard","activeRouteDirective","wayPointList","wayPointsCnt","localCnt","directionsBody","searchProposals_1","search$$","currentStopIndex","setTerm","keyIsValid","invalidKeys","keyup","handleMapClick","clearStop","chooseProposal","proposal","geomCoord","getFirstCoordinate","getInteriorPoints","focus","indexPos","clickCoordinates","geolocateStop","geolocateCoordinates","stopColor","stopText","stopID","previousStop","previousStopRevision","stopFeature","stopOpacity","directionsKey","directionsCoordKey","directionsUrl","pathname","vertexStyle","stopStyle","routeStyle","DirectionsFormBindingDirective","storedStops","directionsParams","directionsCoordUrl_1","cnt_1","stopCoordinatesFromURL","IgoDirectionsModule","MatDividerModule","searchSourceServiceFactory","provideSearchSourceService","IChercheSearchResultFormatter","formatResult","IChercheSearchSource","title$","limit","ecmax","computeRequestParams","page","extractResults","toDisplay","getAllowedTypes","typesMatched","hashtagsLieuxToKeep","Set","computeOptionsParam","q","computeTerm","xMin","yMin","xMax","yMax","formatter","dataToResult","computeProperties","titleHtml","highlight","subtitleHtml","title2","subtitleHtml2","title3","dataType","nextPage","removeKeys","propertiesBlacklist","googleLinksProperties","GoogleMaps","GoogleStreetView","some","h","authService","AuthService","authenticate$","IChercheReverseSearchSource","getSubtitle","subtitle","municipalite","computeExtent","defaultIChercheSearchResultFormatterFactory","provideDefaultIChercheSearchResultFormatter","ichercheSearchSourceFactory","ichercheReverseSearchSourceFactory","CoordinatesSearchResultFormatter","CoordinatesReverseSearchSource","obj","roundedCoordString","coordLonLat","OpenStreetMap","defaultCoordinatesSearchResultFormatterFactory","provideDefaultCoordinatesSearchResultFormatter","CoordinatesReverseSearchSourceFactory","ILayerSearchResultFormatter","allowedKey","newKey","dataR","ILayerSearchSource","computeSearchRequestParams","computeLayerOptions","groupTitle","extractQueryParamsFromSourceUrl","maxScaleDenom","minScaleDenom","metadataUrl","formatOpt","urls","urlOpt","ilayerSearchResultFormatterFactory","provideILayerSearchResultFormatter","ilayerSearchSourceFactory","SEARCH_TYPES","SearchSelectorComponent","searchType$","setSearchType","searchType$$","onSetSearchType","onSearchTypeChange","getSearchTypeTitle","searchTypeChange","searchTypes","IgoSearchSelectorModule","SearchSettingsComponent","handleKeyboardEvent","pointerSummaryEnabled","pointerSummaryStatus","hasPointerReverseSearchSource","hasReverseSearchSourcesForPointerSummary","getSearchSources","textSearchSources","settingsValueCheckedCheckbox","settingValue","searchSourceChange","computeCheckAllBehavior","allEnabled","checkUncheckAll","stopPropagation","settingsValueCheckedRadioButton","onCheckSearchSource","getAvailableValues","getAvailableHashtagsValues","changePointerReverseSearch","fromTitleButton","lastKeyTime","now","IgoSearchSettingsModule","SearchBarComponent","term$","term$$","empty$","stream$$","onSetTerm","onKeyup","onClearButtonClick","clearFeature","onSearchSettingsChange","doSearch","searchSettingsChange","slug","minLength","input","searchTermChange","placeholder","placeholder$","softClear","research","onResearchCompleted","newResults","searchSelector","searchSettings","SearchUrlParamDirective","searchKey","ref","IgoSearchBarModule","Grouped","Flat","SearchResultsComponent","_term","pageIterator","_results$","liftResults","settingsChange$","onResultFocus","resultFocus","onResultUnfocus","resultUnfocus","computeGroupTitle","onResultSelect","resultSelect","groupResults","sortByOrder","r1","r2","displayOrder","grouped","sourceResults","isMoreResults","displayMoreResults","moreResults","searchResultMode","SearchResultMode","mode","withZoomButton","resultMouseenter","resultMouseleave","SearchResultsItemComponent","getEntityTitleHtml","onZoomHandler","zoomEvent","SearchResultAddButtonComponent","lay","tooltip$","layersSubcriptions","IgoSearchResultsModule","IgoStopPropagationModule","SearchPointerSummaryDirective","mouseout","subscribeToPointerStore","pointerPositionSummaryMarker","ngAfterContentChecked","unsubscribeToPointerStore","unsubscribeReverseSearch","store$$","pointerSearchStore","resultsUnderPointerPosition","entitiesToPointerOverlay","computeSummaryClosestFeature","closestResultByType","prevDistance","summarizedClosestType","processedSummarizedClosestType","typeIndex","addPointerOverlay","reverseSearch$$","igoSearchPointerSummaryEnabled","onSearchCoordinate","igoSearchPointerSummaryDelay","_results","onSearch","searchPointerSummaryFeatureId","pointerSummary","backgroundFill","backgroundStroke","IgoSearchModule","ToastComponent","_expanded","expanded","opened","zoomToFeatureExtent","swipe","SWIPE_ACTION","UP","DOWN","IgoToastModule","IgoPanelModule","IgoFlexibleModule","OgcFilterComponent","onUpdateInputs","cancel","OgcFilterWidget","ogcFilterWidgetFactory","widgetService","provideOgcFilterWidget","WidgetService","IgoOgcFilterModule","WfsWorkspace","Workspace","WfsWorkspaceService","createWorkspace","entityStore","createFeatureStore","actionStore","ActionStore","createTableTemplate","selectionStrategy","WmsWorkspace","WmsWorkspaceService","WorkspaceSelectorDirective","onLayersChange","editableLayers","layerIsEditable","editableLayersIds","workspacesToAdd","getOrCreateWorkspace","workspace","workspacesToRemove","workspaceStore","insertMany","wfsWorkspaceService","wmsWorkspaceService","WorkspaceSelectorComponent","IgoWorkspaceSelectorModule","IgoGeoWorkspaceModule","IgoWidgetModule","IgoWktModule","IgoGeoModule","CadastreSearchSource","endsWith","numero","lot","computeGeometry","NoLot","cadastreSearchSourceFactory","NominatimSearchSource","rxjs","i1","place_id","display_name","osm_type","class","boundingbox","computeTermTags","tag","computeTermSettings","nominatimSearchSourceFactory","StoredQueriesSearchSource","storedqueriesParams","storedQueriesOptions","outputformat","extractWFSData","patternGml3","olformat.WFS","WFS","geojson","wfsfeatures","splitterRegex","splitPrefix","remainingTerm","splittedTerm","storedquery_id","wfsversion","srsname","resultTitle","utils","defaultValue","multipleFieldsQuery","StoredQueriesReverseSearchSource","longLatParams","longField","latField","doc_type","storedqueriesSearchSourceFactory","storedqueriesReverseSearchSourceFactory","DirectionsFormat","SourceDirectionsType","Route","OsrmDirectionsSource","configurable","_name","getRouteParams","extractRoutesData","formatRoute","waypoints","geometries","stepsUI","leg","roadNetworkRoute","legs","sourceType","weight_name","osrmDirectionsSourcesFactory","provideCadastreSearchSource","provideIChercheSearchSource","provideIChercheReverseSearchSource","provideCoordinatesReverseSearchSource","provideILayerSearchSource","provideNominatimSearchSource","i1$1","provideStoredQueriesSearchSource","provideStoredQueriesReverseSearchSource","provideOsrmDirectionsSource","hideOlFeature","exportToCSV","rows","csvContent","row","entitiesToRowData","column","EntityTableColumnRenderer","clearOlGeometryMidpoints","featureToSearchResult"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { MetadataOptions } from './metadata.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MetadataService {\r\n  constructor() {}\r\n\r\n  open(metadata: MetadataOptions) {\r\n    if (metadata.extern) {\r\n      window.open(metadata.url, '_blank');\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport {\r\n  MetadataOptions,\r\n  MetadataLayerOptions\r\n} from '../shared/metadata.interface';\r\nimport { MetadataService } from '../shared/metadata.service';\r\n\r\n@Component({\r\n  selector: 'igo-metadata-button',\r\n  templateUrl: './metadata-button.component.html',\r\n  styleUrls: ['./metadata-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MetadataButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private metadataService: MetadataService) {}\r\n\r\n  openMetadata(metadata: MetadataOptions) {\r\n    this.metadataService.open(metadata);\r\n  }\r\n\r\n  get options(): MetadataLayerOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { MetadataButtonComponent } from './metadata-button/metadata-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [MetadataButtonComponent],\r\n  declarations: [MetadataButtonComponent]\r\n})\r\nexport class IgoMetadataModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMetadataModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export abstract class DataService {\r\n    abstract getData(): string;\r\n}\r\n","import { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { AnyDataSourceOptions } from '../datasource/shared/datasources/any-datasource.interface';\r\nimport { DataSourceOptions } from '../datasource/shared/datasources/datasource.interface';\r\nimport { WMSDataSourceOptions } from '../datasource/shared/datasources/wms-datasource.interface';\r\nimport { WMTSDataSourceOptions } from '../datasource/shared/datasources/wmts-datasource.interface';\r\n\r\n/**\r\n * Generate a id from it's datasource options.\r\n * @param options Data source options\r\n * @returns A id\r\n */\r\nexport function generateIdFromSourceOptions(options: DataSourceOptions): string {\r\n  const generators = {\r\n    wms: generateWMSIdFromSourceOptions,\r\n    wmts: generateWMTSIdFromSourceOptions,\r\n    xyz: generateXYZIdFromSourceOptions,\r\n    feature: generateFeatureIdFromSourceOptions,\r\n    osm: (_options: AnyDataSourceOptions) => 'OSM'\r\n  };\r\n  const generator = generators[options.type] || generateId;\r\n  return generator(options);\r\n}\r\n\r\n/**\r\n * Generate a id from WMS data source options\r\n * @param options WMS data source options\r\n * @returns A md5 hash of the the url and layers\r\n */\r\nexport function generateWMSIdFromSourceOptions(options: WMSDataSourceOptions) {\r\n  const layers = options.params.LAYERS;\r\n  const url = options.url.charAt(0) === '/' ? window.location.origin + options.url : options.url;\r\n  const chain = 'wms' + url + layers;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from WMTS data source options\r\n * @param options WMTS data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateWMTSIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const layer = options.layer;\r\n  const chain = 'wmts' + options.url + layer;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from XYZ data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateXYZIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const chain = 'xyz' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from feature data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateFeatureIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  if (! options.url) { return generateId(options); }\r\n  const chain = 'feature' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a unique id\r\n * @returns A uuid\r\n */\r\nexport function generateId(options: AnyDataSourceOptions) {\r\n  return uuid();\r\n}\r\n","import olSource from 'ol/source/Source';\r\n\r\nimport {\r\n  DataSourceOptions,\r\n  Legend\r\n} from './datasource.interface';\r\n\r\nimport { DataService } from './data.service';\r\nimport { generateIdFromSourceOptions } from '../../../utils/id-generator';\r\nimport { LegendOptions } from '../../../layer';\r\n\r\nexport abstract class DataSource {\r\n\r\n  public id: string;\r\n  public ol: olSource;\r\n  private legend: Legend[];\r\n\r\n  constructor(\r\n    public options: DataSourceOptions = {},\r\n    protected dataService?: DataService\r\n  ) {\r\n    this.options = options;\r\n    this.id = this.options.id ||Â this.generateId();\r\n    this.ol = this.createOlSource();\r\n  }\r\n\r\n  protected abstract createOlSource(): olSource;\r\n\r\n  protected generateId(): string {\r\n    return generateIdFromSourceOptions(this.options);\r\n  }\r\n\r\n  public getLegend(style?: string, scale?: number): Legend[] {\r\n    return this.legend ? this.legend : [];\r\n  }\r\n\r\n  public setLegend(options: LegendOptions): Legend[] {\r\n    if (options.url) {\r\n      this.legend = [{ url: options.url} ];\r\n    } else if (options.html) {\r\n      this.legend = [{ html: options.html} ];\r\n    } else {\r\n      this.legend = [];\r\n    }\r\n\r\n    return this.legend;\r\n  }\r\n\r\n  protected abstract onUnwatch();\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { FeatureDataSourceOptions } from './feature-datasource.interface';\r\n\r\nexport class FeatureDataSource extends DataSource {\r\n  public options: FeatureDataSourceOptions;\r\n  public ol: olSourceVector;\r\n  protected createOlSource(): olSourceVector {\r\n    const sourceOptions = {\r\n      format: this.getSourceFormatFromOptions(this.options)\r\n    };\r\n\r\n    return new olSourceVector(Object.assign(sourceOptions, this.options));\r\n  }\r\n\r\n  protected getSourceFormatFromOptions(options: FeatureDataSourceOptions) {\r\n    if (options.format) {\r\n      return options.format;\r\n    }\r\n    let olFormatCls;\r\n    const formatType = options.formatType;\r\n    if (!formatType) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    } else {\r\n      olFormatCls = olformat[formatType];\r\n      if (olFormatCls === undefined) {\r\n        throw new Error('Invalid vector source format ${formatType}.');\r\n      }\r\n    }\r\n\r\n    const formatOptions = options.formatOptions;\r\n    let format;\r\n    if (formatOptions) {\r\n      format = new olFormatCls(formatOptions);\r\n    } else {\r\n      format = new olFormatCls();\r\n    }\r\n\r\n    return format;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n}\r\n","import olSourceOSM from 'ol/source/OSM';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { OSMDataSourceOptions } from './osm-datasource.interface';\r\n\r\nexport class OSMDataSource extends DataSource {\r\n  public options: OSMDataSourceOptions;\r\n  public ol: olSourceOSM;\r\n\r\n  protected createOlSource(): olSourceOSM {\r\n    this.options.url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\r\n    return new olSourceOSM(this.options);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceXYZ from 'ol/source/XYZ';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { XYZDataSourceOptions } from './xyz-datasource.interface';\r\n\r\nexport class XYZDataSource extends DataSource {\r\n  public options: XYZDataSourceOptions;\r\n  public ol: olSourceXYZ;\r\n\r\n  protected createOlSource(): olSourceXYZ {\r\n    return new olSourceXYZ(this.options);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n}\r\n","import * as olfilter from 'ol/format/filter';\r\nimport olFormatWKT from 'ol/format/WKT';\r\nimport olFormatWFS from 'ol/format/WFS';\r\nimport olGeometry from 'ol/geom/Geometry';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { uuid, ObjectUtils } from '@igo2/utils';\r\n\r\nimport {\r\n  OgcFilter,\r\n  IgoOgcFilterObject,\r\n  WFSWriteGetFeatureOptions,\r\n  AnyBaseOgcFilterOptions,\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSourceOptions,\r\n  OgcFiltersOptions,\r\n  IgoPushButton,\r\n  PushButtonGroup,\r\n  OgcPushButtonBundle\r\n} from './ogc-filter.interface';\r\n\r\nexport class OgcFilterWriter {\r\n  private filterSequence: OgcInterfaceFilterOptions[] = [];\r\n  public operators = {\r\n    PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsLike: { spatial: false, fieldRestrict: ['string'] },\r\n    PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsGreaterThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsBetween: { spatial: false, fieldRestrict: ['number'] },\r\n    During: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNull: { spatial: false, fieldRestrict: [] },\r\n    Intersects: { spatial: true, fieldRestrict: [] },\r\n    Within: { spatial: true, fieldRestrict: [] },\r\n    Contains: { spatial: true, fieldRestrict: [] }\r\n  };\r\n\r\n  defineOgcFiltersDefaultOptions(\r\n    ogcFiltersOptions: OgcFiltersOptions,\r\n    fieldNameGeometry: string,\r\n    srcType?: string): OgcFiltersOptions  {\r\n    let ogcFiltersDefaultValue = true; // default values for wfs.\r\n    if (srcType && srcType === 'wms') {\r\n      ogcFiltersDefaultValue = false;\r\n    }\r\n\r\n    ogcFiltersOptions = ogcFiltersOptions || {};\r\n    ogcFiltersOptions.enabled = ogcFiltersOptions.enabled === undefined ? ogcFiltersDefaultValue : ogcFiltersOptions.enabled;\r\n    ogcFiltersOptions.editable = ogcFiltersOptions.editable === undefined ? ogcFiltersDefaultValue : ogcFiltersOptions.editable;\r\n    ogcFiltersOptions.geometryName = fieldNameGeometry;\r\n\r\n    ogcFiltersOptions.advancedOgcFilters = true;\r\n    if (ogcFiltersOptions.enabled && ogcFiltersOptions.pushButtons) {\r\n      ogcFiltersOptions.advancedOgcFilters = false;\r\n    }\r\n    return ogcFiltersOptions;\r\n  }\r\n\r\n  public buildFilter(\r\n    filters?: IgoOgcFilterObject,\r\n    extent?: [number, number, number, number],\r\n    proj?: olProjection,\r\n    fieldNameGeometry?: string\r\n  ): string {\r\n    let ourBboxFilter;\r\n    let enableBbox: boolean;\r\n    if (/intersects|contains|within/gi.test(JSON.stringify(filters))) {\r\n      enableBbox = false;\r\n    } else {\r\n      enableBbox = true;\r\n    }\r\n    if (filters) {\r\n      fieldNameGeometry =\r\n        (filters as any).geometryName !== undefined\r\n          ? (filters as any).geometryName\r\n          : fieldNameGeometry;\r\n    }\r\n    if (extent && filters) {\r\n      ourBboxFilter = olfilter.bbox(fieldNameGeometry, extent, proj.getCode());\r\n    }\r\n    let filterAssembly: OgcFilter;\r\n    if (filters) {\r\n      filters = this.checkIgoFiltersProperties(filters, fieldNameGeometry, proj);\r\n      if (extent && enableBbox) {\r\n        filterAssembly = olfilter.and(\r\n          ourBboxFilter,\r\n          this.bundleFilter(filters)\r\n        );\r\n      } else {\r\n        filterAssembly = this.bundleFilter(filters);\r\n      }\r\n    } else {\r\n      return 'bbox=' + extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    const wfsOptions: WFSWriteGetFeatureOptions = {\r\n      srsName: '',\r\n      featureNS: '',\r\n      featurePrefix: '',\r\n      featureTypes: ['featureTypes'],\r\n      filter: filterAssembly,\r\n      outputFormat: '',\r\n      geometryName: fieldNameGeometry\r\n    };\r\n\r\n    const query = new olFormatWFS().writeGetFeature(wfsOptions);\r\n    const str = new XMLSerializer().serializeToString(query);\r\n    const regexp1 = /typenames *=|typename *=\\\"featureTypes\\\" *>/gi;\r\n    const regexp2 = /<\\/Query><\\/GetFeature>/gi;\r\n\r\n    return 'filter=' + str.split(regexp1)[1].split(regexp2)[0];\r\n  }\r\n\r\n  private bundleFilter(filterObject: any) {\r\n    if (filterObject instanceof Array) {\r\n      const logicalArray = [];\r\n      filterObject.forEach(element => {\r\n        logicalArray.push(this.bundleFilter(element));\r\n      });\r\n      return logicalArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return this.createFilter({\r\n          operator: filterObject.logical,\r\n          logicalArray: this.bundleFilter(filterObject.filters)\r\n        });\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.createFilter(filterObject as AnyBaseOgcFilterOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createFilter(filterOptions): OgcFilter {\r\n    const operator = filterOptions.operator;\r\n    const logicalArray = filterOptions.logicalArray;\r\n\r\n    const wfsPropertyName = filterOptions.propertyName;\r\n    const wfsPattern = filterOptions.pattern;\r\n    const wfsMatchCase = filterOptions.matchCase\r\n      ? filterOptions.matchCase\r\n      : true;\r\n    const wfsWildCard = filterOptions.wildCard ? filterOptions.wildCard : '*';\r\n    const wfsSingleChar = filterOptions.singleChar\r\n      ? filterOptions.singleChar\r\n      : '.';\r\n    const wfsEscapeChar = filterOptions.escapeChar\r\n      ? filterOptions.escapeChar\r\n      : '!';\r\n\r\n    const wfsLowerBoundary = filterOptions.lowerBoundary;\r\n    const wfsUpperBoundary = filterOptions.upperBoundary;\r\n\r\n    const wfsGeometryName = filterOptions.geometryName;\r\n    const wfsExtent = filterOptions.extent;\r\n    const wfsWktGeometry = filterOptions.wkt_geometry;\r\n    const wfsSrsName = filterOptions.srsName\r\n      ? filterOptions.srsName\r\n      : 'EPSG:3857';\r\n\r\n    const wfsBegin = filterOptions.begin;\r\n    const wfsEnd = filterOptions.end;\r\n\r\n    const wfsExpression = filterOptions.expression;\r\n\r\n    let geometry: olGeometry;\r\n    if (wfsWktGeometry) {\r\n      const wkt = new olFormatWKT();\r\n      geometry = wkt.readGeometry(wfsWktGeometry, {\r\n        dataProjection: wfsSrsName,\r\n        featureProjection: wfsSrsName || 'EPSG:3857'\r\n      });\r\n    }\r\n\r\n    switch (operator) {\r\n      case 'BBOX':\r\n        return olfilter.bbox(wfsGeometryName, wfsExtent, wfsSrsName);\r\n      case 'PropertyIsBetween':\r\n        return olfilter.between(\r\n          wfsPropertyName,\r\n          wfsLowerBoundary,\r\n          wfsUpperBoundary\r\n        );\r\n      case 'Contains':\r\n        return olfilter.contains(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'During':\r\n        return olfilter.during(wfsPropertyName, wfsBegin, wfsEnd);\r\n      case 'PropertyIsEqualTo':\r\n        return olfilter.equalTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsGreaterThan':\r\n        return olfilter.greaterThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsGreaterThanOrEqualTo':\r\n        return olfilter.greaterThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'Intersects':\r\n        return olfilter.intersects(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'PropertyIsNull':\r\n        return olfilter.isNull(wfsPropertyName);\r\n      case 'PropertyIsLessThan':\r\n        return olfilter.lessThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLessThanOrEqualTo':\r\n        return olfilter.lessThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLike':\r\n        return olfilter.like(\r\n          wfsPropertyName,\r\n          wfsPattern.replace(/[()_]/gi, wfsSingleChar),\r\n          wfsWildCard,\r\n          wfsSingleChar,\r\n          wfsEscapeChar,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsNotEqualTo':\r\n        return olfilter.notEqualTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'Within':\r\n        return olfilter.within(wfsGeometryName, geometry, wfsSrsName);\r\n      // LOGICAL\r\n      case 'And':\r\n        return olfilter.and.apply(null, logicalArray);\r\n      case 'Or':\r\n        return olfilter.or.apply(null, logicalArray);\r\n      case 'Not':\r\n        return olfilter.not.apply(null, logicalArray);\r\n\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  public defineInterfaceFilterSequence(\r\n    filterObject: any,\r\n    geometryName,\r\n    logical = '',\r\n    level = -1\r\n  ): OgcInterfaceFilterOptions[] {\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            element,\r\n            geometryName,\r\n            logical,\r\n            level\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        level = level + 1;\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            filterObject.filters,\r\n            geometryName,\r\n            filterObject.logical,\r\n            level\r\n          )\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        this.filterSequence.push(\r\n          this.addInterfaceFilter(filterObject, geometryName, level, logical)\r\n        );\r\n      }\r\n    }\r\n    return this.filterSequence;\r\n  }\r\n\r\n  public addInterfaceFilter(\r\n    igoOgcFilterObject?,\r\n    geometryName?,\r\n    level = 0,\r\n    parentLogical = 'Or'\r\n  ): OgcInterfaceFilterOptions {\r\n    if (!igoOgcFilterObject) {\r\n      igoOgcFilterObject = { operator: 'PropertyIsEqualTo' };\r\n    }\r\n    const f = {\r\n      propertyName: '',\r\n      operator: '',\r\n      active: '',\r\n      filterid: uuid(),\r\n      begin: '',\r\n      end: '',\r\n      lowerBoundary: '',\r\n      upperBoundary: '',\r\n      expression: '',\r\n      pattern: '',\r\n      wildCard: '*',\r\n      singleChar: '.',\r\n      escapeChar: '!',\r\n      matchCase: true,\r\n      igoSpatialSelector: '',\r\n      geometryName: '',\r\n      geometry: '',\r\n      wkt_geometry: '',\r\n      extent: '',\r\n      srsName: '',\r\n      parentLogical: '',\r\n      level: 0\r\n    };\r\n\r\n    return Object.assign(\r\n      f,\r\n      {\r\n        parentLogical,\r\n        level,\r\n        geometryName\r\n      },\r\n      igoOgcFilterObject\r\n    );\r\n  }\r\n\r\n  public checkIgoFiltersProperties(\r\n    filterObject: any,\r\n    fieldNameGeometry,\r\n    proj: olProjection,\r\n    active = false\r\n  ) {\r\n    const filterArray = [];\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        filterArray.push(\r\n          this.checkIgoFiltersProperties(element, fieldNameGeometry, proj, active)\r\n        );\r\n      });\r\n      return filterArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return Object.assign(\r\n          {},\r\n          {\r\n            logical: filterObject.logical,\r\n            filters: this.checkIgoFiltersProperties(\r\n              filterObject.filters,\r\n              fieldNameGeometry,\r\n              proj,\r\n              active\r\n            )\r\n          }\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.addFilterProperties(\r\n          filterObject as OgcInterfaceFilterOptions,\r\n          fieldNameGeometry,\r\n          proj,\r\n          active\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private addFilterProperties(\r\n    igoOgcFilterObject: OgcInterfaceFilterOptions,\r\n    fieldNameGeometry,\r\n    proj: olProjection,\r\n    active = false\r\n  ) {\r\n    const filterid = igoOgcFilterObject.hasOwnProperty('filterid')\r\n      ? igoOgcFilterObject.filterid\r\n      : uuid();\r\n    const status = igoOgcFilterObject.hasOwnProperty('active')\r\n      ? igoOgcFilterObject.active\r\n      : active;\r\n\r\n    const srsName = igoOgcFilterObject.hasOwnProperty('srsName')\r\n      ? igoOgcFilterObject.srsName\r\n      : proj ? proj.getCode() : 'EPSG:3857';\r\n\r\n    return Object.assign(\r\n      {},\r\n      {\r\n        filterid,\r\n        active: status,\r\n        igoSpatialSelector: 'fixedExtent',\r\n        srsName\r\n      },\r\n      igoOgcFilterObject,\r\n      { geometryName: fieldNameGeometry }\r\n    );\r\n  }\r\n\r\n  public rebuiltIgoOgcFilterObjectFromSequence(\r\n    sequence: OgcInterfaceFilterOptions[]\r\n  ): IgoOgcFilterObject {\r\n    if (sequence instanceof Array) {\r\n      if (sequence.length >= 1) {\r\n        let lastParentLogical = sequence[0].parentLogical;\r\n        let nextElement: any;\r\n        let logicalArray = [];\r\n        let lastProcessedFilter;\r\n        sequence.forEach(uiFilter => {\r\n          const element = Object.assign({}, uiFilter);\r\n          const index = sequence.indexOf(uiFilter);\r\n          if (index >= 0 && index < sequence.length - 1) {\r\n            nextElement = sequence[index + 1];\r\n          } else {\r\n            nextElement = element;\r\n          }\r\n          delete element.active;\r\n          delete element.filterid;\r\n          delete element.parentLogical;\r\n          logicalArray.push(element);\r\n\r\n          if (sequence.length === 1) {\r\n            lastProcessedFilter = element;\r\n          } else if (lastParentLogical !== nextElement.parentLogical) {\r\n            if (logicalArray.length === 1) {\r\n              console.log(\r\n                'You must set at ' +\r\n                  'least two operator in a logical (' +\r\n                  lastParentLogical +\r\n                  ')'\r\n              );\r\n            } else {\r\n              lastProcessedFilter = Object.assign(\r\n                {},\r\n                { logical: lastParentLogical, filters: logicalArray }\r\n              );\r\n              logicalArray = [lastProcessedFilter];\r\n              lastParentLogical = nextElement.parentLogical;\r\n            }\r\n          }\r\n        });\r\n        return lastProcessedFilter;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private computeIgoPushButton(pushButtons: IgoPushButton): IgoPushButton {\r\n    if (pushButtons.groups.every(group => group.computedButtons !== undefined)) {\r\n      return pushButtons;\r\n    }\r\n    let pb: IgoPushButton;\r\n    if (pushButtons.groups && pushButtons.bundles) {\r\n      if (!pushButtons.bundles.every(bundle => bundle.id !== undefined)) {\r\n        throw new Error('You must set an id for each of your pushButtons bundles');\r\n      }\r\n      pb = ObjectUtils.copyDeep(pushButtons);\r\n      pb.groups.forEach(group => {\r\n        group.title = group.title ? group.title : group.name;\r\n        group.enabled = group.enabled ? group.enabled : false;\r\n        group.computedButtons = ObjectUtils.copyDeep(pb.bundles.filter(b => group.ids.includes(b.id)));\r\n      });\r\n    } else if (!pushButtons.groups && pushButtons.bundles) {\r\n      pb = ObjectUtils.copyDeep(pushButtons);\r\n      pb.groups = [{ title: 'group1', name: 'group1', computedButtons: ObjectUtils.copyDeep(pb.bundles) } as PushButtonGroup];\r\n    } else {\r\n      pb = {\r\n        bundles: pushButtons as OgcPushButtonBundle[],\r\n        groups: [\r\n          {\r\n            title: 'group1', name: 'group1',\r\n            computedButtons: ObjectUtils.copyDeep(pushButtons) as OgcPushButtonBundle[]\r\n          } as PushButtonGroup]\r\n      };\r\n    }\r\n    if (!pb.groups.find(pbGroup => pbGroup.enabled)) {\r\n      pb.groups[0].enabled = true;\r\n    }\r\n    return pb;\r\n  }\r\n\r\n  public handleOgcFiltersAppliedValue(\r\n    options: OgcFilterableDataSourceOptions,\r\n    fieldNameGeometry: string,\r\n    extent?: [number, number, number, number],\r\n    proj?: olProjection): string {\r\n    const ogcFilters = options.ogcFilters;\r\n    if (!ogcFilters) {\r\n      return;\r\n    }\r\n    let filterQueryStringPushButton = '';\r\n    let filterQueryStringAdvancedFilters = '';\r\n    if (ogcFilters.enabled && ogcFilters.pushButtons) {\r\n      ogcFilters.pushButtons = this.computeIgoPushButton(ogcFilters.pushButtons);\r\n      const pushButtonBundle = ogcFilters.pushButtons.groups.find(g => g.enabled).computedButtons;\r\n      const conditions = [];\r\n      pushButtonBundle.map(buttonBundle => {\r\n        const bundleCondition = [];\r\n        buttonBundle.buttons\r\n          .filter(ogcpb => ogcpb.enabled === true)\r\n          .forEach(enabledPb => bundleCondition.push(enabledPb.filters));\r\n        if (bundleCondition.length === 1) {\r\n          conditions.push(bundleCondition[0]);\r\n        } else if (bundleCondition.length > 1) {\r\n          conditions.push({ logical: buttonBundle.logical, filters: bundleCondition });\r\n        }\r\n      });\r\n      if (conditions.length >= 1) {\r\n        filterQueryStringPushButton = this.buildFilter(\r\n            conditions.length === 1 ? conditions[0] : { logical: 'And', filters: conditions },\r\n            extent,\r\n            proj,\r\n            ogcFilters.geometryName\r\n          );\r\n      }\r\n    }\r\n\r\n    if (ogcFilters.enabled && ogcFilters.filters) {\r\n      ogcFilters.geometryName = ogcFilters.geometryName || fieldNameGeometry;\r\n      const igoFilters = ogcFilters.filters;\r\n      filterQueryStringAdvancedFilters = this.buildFilter(igoFilters, extent, proj, ogcFilters.geometryName);\r\n    }\r\n\r\n    let filterQueryString = ogcFilters.advancedOgcFilters ? filterQueryStringAdvancedFilters : filterQueryStringPushButton;\r\n    if (options.type === 'wms') {\r\n      filterQueryString = this.formatProcessedOgcFilter(filterQueryString, (options as any).params.LAYERS);\r\n    }\r\n    if (options.type === 'wfs') {\r\n      filterQueryString = this.formatProcessedOgcFilter(filterQueryString, (options as any).params.featureTypes);\r\n    }\r\n\r\n    return filterQueryString;\r\n\r\n  }\r\n\r\n  public formatProcessedOgcFilter(\r\n    processedFilter: string,\r\n    layersOrTypenames: string): string {\r\n    let appliedFilter = '';\r\n    if (processedFilter.length === 0 && layersOrTypenames.indexOf(',') === -1) {\r\n      appliedFilter = processedFilter;\r\n    } else {\r\n      layersOrTypenames.split(',').forEach(layerOrTypenames => {\r\n        appliedFilter = `${appliedFilter}(${processedFilter.replace('filter=', '')})`;\r\n      });\r\n    }\r\n    const filterValue = appliedFilter.length > 0 ? appliedFilter.replace('filter=', '') : undefined;\r\n    return filterValue;\r\n  }\r\n}\r\n","import { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport * as OlFormat from 'ol/format';\r\nimport olFormatGML2 from 'ol/format/GML2';\r\nimport olFormatGML3 from 'ol/format/GML3';\r\nimport olFormatGML32 from 'ol/format/GML32';\r\nimport olFormatOSMXML from 'ol/format/OSMXML';\r\n\r\nexport const defaultEpsg = 'EPSG:3857';\r\nexport const defaultMaxFeatures = 5000;\r\nexport const defaultWfsVersion = '2.0.0';\r\nexport const defaultFieldNameGeometry = 'geometry';\r\nexport const gmlRegex = new RegExp(/(.*)?gml(.*)?/gi);\r\nexport const jsonRegex = new RegExp(/(.*)?json(.*)?/gi);\r\n\r\n/**\r\n * This method build/standardize WFS call query params based on the layer property.\r\n * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface\r\n * @param count  Number: Used to control the number of feature. Used to bypass whe wfs datasource options interface (maxFeatures)\r\n * @param epsg  String: Used to control the EPSG code (es: 'EPSG3857'). Used to bypass whe wfs datasource options interface (srsName)\r\n * @param properties  String: Used to control the queried fields  (WFS service).\r\n * @returns An array array of {name: '', value: ''} of predefined query params.\r\n */\r\nexport function formatWFSQueryString(\r\n  dataSourceOptions: WFSDataSourceOptions | WMSDataSourceOptions,\r\n  count?: number,\r\n  epsg?: string,\r\n  properties?: string\r\n): { name: string; value: string }[] {\r\n  const versionWfs200 = '2.0.0'; // not the same usage as defaultWfsVersion.\r\n  const url = dataSourceOptions.urlWfs;\r\n  const paramsWFS = dataSourceOptions.paramsWFS;\r\n  const effectiveCount = count || defaultMaxFeatures;\r\n  const epsgCode = epsg || defaultEpsg;\r\n  const outputFormat = paramsWFS.outputFormat\r\n    ? `outputFormat=${paramsWFS.outputFormat}`\r\n    : '';\r\n  const version = paramsWFS.version\r\n    ? `version=${paramsWFS.version}`\r\n    : `version=${defaultWfsVersion}`;\r\n  const paramTypename =\r\n    paramsWFS.version === versionWfs200 ? 'typenames' : 'typename';\r\n  const featureTypes = `${paramTypename}=${paramsWFS.featureTypes}`;\r\n  const paramMaxFeatures =\r\n    paramsWFS.version === versionWfs200 ? 'count' : 'maxFeatures';\r\n  const cnt = count\r\n    ? `${paramMaxFeatures}=${effectiveCount}`\r\n    : paramsWFS.maxFeatures\r\n    ? `${paramMaxFeatures}=${paramsWFS.maxFeatures}`\r\n    : `${paramMaxFeatures}=${effectiveCount}`;\r\n  const srs = epsg\r\n    ? `srsname=${epsgCode}`\r\n    : paramsWFS.srsName\r\n    ? 'srsname=' + paramsWFS.srsName\r\n    : `srsname=${epsgCode}`;\r\n\r\n  let propertyName = '';\r\n  let valueReference = '';\r\n  if (properties) {\r\n    propertyName = `propertyName=${properties}`;\r\n    valueReference = `valueReference=${properties}`;\r\n  }\r\n  const sourceFields = dataSourceOptions.sourceFields;\r\n  if (!propertyName && sourceFields && sourceFields.length > 0) {\r\n    const fieldsNames = [];\r\n    dataSourceOptions.sourceFields.forEach(sourcefield => {\r\n      fieldsNames.push(sourcefield.name);\r\n    });\r\n    propertyName = `propertyName=${fieldsNames.join(',')},${\r\n      paramsWFS.fieldNameGeometry\r\n    }`;\r\n  }\r\n\r\n  const getCapabilities = `${url}?service=WFS&request=GetCapabilities&${version}`;\r\n  let getFeature = `${url}?service=WFS&request=GetFeature&${version}&${featureTypes}&`;\r\n  getFeature += `${outputFormat}&${srs}&${cnt}&${propertyName}`;\r\n\r\n  let getpropertyvalue = `${url}?service=WFS&request=GetPropertyValue&version=${versionWfs200}&${featureTypes}&`;\r\n  getpropertyvalue += `&${cnt}&${valueReference}`;\r\n\r\n  return [\r\n    { name: 'outputformat', value: outputFormat },\r\n    { name: 'version', value: version },\r\n    { name: 'typename', value: featureTypes },\r\n    { name: 'count', value: cnt },\r\n    { name: 'srsname', value: srs },\r\n    { name: 'propertyname', value: propertyName },\r\n    { name: 'valuereference', value: valueReference },\r\n    { name: 'getcapabilities', value: getCapabilities.replace(/&&/g, '&') },\r\n    { name: 'getfeature', value: getFeature.replace(/&&/g, '&') },\r\n    { name: 'getpropertyvalue', value: getpropertyvalue.replace(/&&/g, '&') }\r\n  ];\r\n}\r\n\r\n/**\r\n * Validate/Modify layer's wfs options based on :\r\n * 1- an Openlayers's issue with GML provided from WFS. Refer to\r\n * https://github.com/openlayers/openlayers/pull/6400\r\n * 2- Set default values for optionals parameters.\r\n * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface\r\n * @returns An array array of {name: '', value: ''} of predefined query params.\r\n */\r\nexport function checkWfsParams(wfsDataSourceOptions, srcType?: string) {\r\n  if (srcType && srcType === 'wfs') {\r\n    // reassignation of params to paramsWFS and url to urlWFS to have a common interface with wms-wfs datasources\r\n    wfsDataSourceOptions.paramsWFS = wfsDataSourceOptions.params;\r\n  }\r\n\r\n  const paramsWFS = wfsDataSourceOptions.paramsWFS;\r\n  wfsDataSourceOptions.urlWfs =\r\n    wfsDataSourceOptions.urlWfs || wfsDataSourceOptions.url;\r\n\r\n  paramsWFS.version = paramsWFS.version || defaultWfsVersion;\r\n  paramsWFS.fieldNameGeometry =\r\n    paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;\r\n  paramsWFS.maxFeatures = paramsWFS.maxFeatures || defaultMaxFeatures;\r\n\r\n  let outputFormat;\r\n  if (paramsWFS.outputFormat) {\r\n    outputFormat = paramsWFS.outputFormat;\r\n  }\r\n\r\n  if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n    paramsWFS.version = '1.1.0';\r\n  }\r\n  return Object.assign({}, wfsDataSourceOptions);\r\n}\r\n\r\nexport function getFormatFromOptions(\r\n  options: WFSDataSourceOptions | WMSDataSourceOptions\r\n) {\r\n  let olFormatCls = OlFormat.WFS;\r\n  const outputFormat = options.paramsWFS.outputFormat\r\n    ? options.paramsWFS.outputFormat\r\n    : undefined;\r\n\r\n  if (!outputFormat) {\r\n    return new olFormatCls();\r\n  }\r\n\r\n  if (OlFormat[outputFormat]) {\r\n    olFormatCls = OlFormat[outputFormat];\r\n    return new olFormatCls();\r\n  } else if (outputFormat.toLowerCase().match('gml2')) {\r\n    olFormatCls = OlFormat.WFS;\r\n    return new olFormatCls({ gmlFormat: olFormatGML2 });\r\n  } else if (outputFormat.toLowerCase().match('gml32')) {\r\n    olFormatCls = OlFormat.WFS;\r\n    return new olFormatCls({ gmlFormat: olFormatGML32 });\r\n  } else if (outputFormat.toLowerCase().match('gml3')) {\r\n    olFormatCls = OlFormat.WFS;\r\n    return new olFormatCls({ gmlFormat: olFormatGML3 });\r\n  } else if (outputFormat.toLowerCase().match('topojson')) {\r\n    olFormatCls = OlFormat.TopoJSON;\r\n    return new olFormatCls();\r\n  } else if (outputFormat.toLowerCase().match('geojson')) {\r\n    olFormatCls = OlFormat.GeoJSON;\r\n    return new olFormatCls();\r\n  } else if (outputFormat.toLowerCase().match('esrijson')) {\r\n    olFormatCls = OlFormat.EsriJSON;\r\n    return new olFormatCls();\r\n  } else if (outputFormat.toLowerCase().match('json')) {\r\n    olFormatCls = OlFormat.GeoJSON;\r\n    return new olFormatCls();\r\n  } else if (outputFormat.toLowerCase().match('gpx')) {\r\n    olFormatCls = OlFormat.GPX;\r\n    return new olFormatCls();\r\n  } else if (outputFormat.toLowerCase().match('WKT')) {\r\n    olFormatCls = OlFormat.WKT;\r\n    return new olFormatCls();\r\n  } else if (outputFormat.toLowerCase().match('osmxml')) {\r\n    olFormatCls = olFormatOSMXML;\r\n    return new olFormatCls();\r\n  } else if (outputFormat.toLowerCase().match('kml')) {\r\n    olFormatCls = OlFormat.KML;\r\n    return new olFormatCls();\r\n  }\r\n\r\n  return new olFormatCls();\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as OlLoadingStrategy from 'ol/loadingstrategy';\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions, OgcFiltersOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport {\r\n  formatWFSQueryString,\r\n  defaultFieldNameGeometry,\r\n  checkWfsParams,\r\n  getFormatFromOptions\r\n} from './wms-wfs.utils';\r\n\r\nexport class WFSDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n\r\n  constructor(\r\n    public options: WFSDataSourceOptions,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(checkWfsParams(options, 'wfs'));\r\n\r\n    const ogcFilters = (this.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    const fieldNameGeometry = this.options.paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    (this.options as OgcFilterableDataSourceOptions).ogcFilters =\r\n      ogcFilterWriter.defineOgcFiltersDefaultOptions(ogcFilters, fieldNameGeometry);\r\n    if (\r\n      (this.options as OgcFilterableDataSourceOptions).ogcFilters.enabled &&\r\n      (this.options as OgcFilterableDataSourceOptions).ogcFilters.editable\r\n    ) {\r\n      this.wfsService.getSourceFieldsFromWFS(this.options);\r\n    }\r\n  }\r\n\r\n  protected createOlSource(): olSourceVector {\r\n\r\n    return new olSourceVector({\r\n      format: getFormatFromOptions(this.options),\r\n      overlaps: false,\r\n      url: (extent, resolution, proj: olProjection) => {\r\n        this.options.paramsWFS.srsName = this.options.paramsWFS.srsName || proj.getCode();\r\n        return this.buildUrl(\r\n          extent,\r\n          proj,\r\n          (this.options as OgcFilterableDataSourceOptions).ogcFilters);\r\n      },\r\n      strategy: OlLoadingStrategy.bbox\r\n    });\r\n  }\r\n\r\n  private buildUrl(extent, proj: olProjection, ogcFilters: OgcFiltersOptions): string {\r\n    const paramsWFS = this.options.paramsWFS;\r\n    const queryStringValues = formatWFSQueryString(this.options, undefined, proj.getCode());\r\n    let igoFilters;\r\n    if (ogcFilters && ogcFilters.enabled) {\r\n      igoFilters = ogcFilters.filters;\r\n    }\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    const filterOrBox = ogcFilterWriter.buildFilter(igoFilters, extent, proj, ogcFilters.geometryName);\r\n    let filterOrPush = ogcFilterWriter.handleOgcFiltersAppliedValue(this.options, ogcFilters.geometryName);\r\n\r\n    let prefix = 'filter';\r\n    if (!filterOrPush) {\r\n      prefix = 'bbox';\r\n      filterOrPush = extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    paramsWFS.xmlFilter = ogcFilters.advancedOgcFilters ? filterOrBox : `${prefix}=${filterOrPush}`;\r\n    let baseUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    const patternFilter = /(filter|bbox)=.*/gi;\r\n    baseUrl = patternFilter.test(paramsWFS.xmlFilter) ? `${baseUrl}&${paramsWFS.xmlFilter}` : baseUrl;\r\n    this.options.download = Object.assign({}, this.options.download, { dynamicUrl: baseUrl });\r\n    return baseUrl.replace(/&&/g, '&');\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport olFeature from 'ol/Feature';\r\nimport * as olformat from 'ol/format';\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport { DataService } from './data.service';\r\nimport { formatWFSQueryString,\r\n          gmlRegex,\r\n          defaultEpsg,\r\n          defaultMaxFeatures,\r\n          getFormatFromOptions} from './wms-wfs.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WFSService extends DataService {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getData() {\r\n    console.log('This is defining a data service.');\r\n    return 'This is defining a data service.';\r\n  }\r\n\r\n  public getSourceFieldsFromWFS(dataSourceOptions: WFSDataSourceOptions | WMSDataSourceOptions) {\r\n    if (!dataSourceOptions.sourceFields || dataSourceOptions.sourceFields.length === 0 ) {\r\n      dataSourceOptions.sourceFields = [];\r\n      this.defineFieldAndValuefromWFS(dataSourceOptions).subscribe(getfeatureSourceField => {\r\n        dataSourceOptions.sourceFields = getfeatureSourceField;\r\n      });\r\n\r\n    } else {\r\n      this.defineFieldAndValuefromWFS(dataSourceOptions).subscribe(getfeatureSourceField => {\r\n        dataSourceOptions.sourceFields.forEach(sourcefield => {\r\n          if (sourcefield.alias === undefined) {\r\n            sourcefield.alias = sourcefield.name; // to allow only a list of sourcefield with names\r\n          }\r\n          if (sourcefield.values === undefined || sourcefield.values.length === 0) {\r\n            sourcefield.values = getfeatureSourceField.find(sf => sf.name === sourcefield.name).values;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private wfsGetFeature(\r\n    dataSourceOptions: WFSDataSourceOptions | WMSDataSourceOptions,\r\n    nb: number = defaultMaxFeatures,\r\n    epsgCode: string = defaultEpsg,\r\n    propertyName?: string\r\n  ): Observable<any> {\r\n    const queryStringValues = formatWFSQueryString(dataSourceOptions, nb, epsgCode, propertyName);\r\n    const baseUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    const outputFormat = dataSourceOptions.paramsWFS.outputFormat;\r\n    if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n      return this.http.get(baseUrl, { responseType: 'text' });\r\n    } else {\r\n      return this.http.get(baseUrl);\r\n    }\r\n  }\r\n\r\n  defineFieldAndValuefromWFS(\r\n    dataSourceOptions: WFSDataSourceOptions | WMSDataSourceOptions\r\n  ): Observable<any> {\r\n    return new Observable(d => {\r\n      const sourceFields = [];\r\n      let fieldList;\r\n      let fieldListWoGeom;\r\n      let fieldListWoGeomStr;\r\n      let olFormats;\r\n\r\n      olFormats = getFormatFromOptions(dataSourceOptions);\r\n\r\n      this.wfsGetFeature(dataSourceOptions, 1).subscribe(oneFeature => {\r\n        const features = olFormats.readFeatures(oneFeature);\r\n        fieldList = features[0].getKeys();\r\n        fieldListWoGeom = fieldList.filter(\r\n          field =>\r\n            field !== features[0].getGeometryName() &&\r\n            !field.match(/boundedby/gi)\r\n        );\r\n        fieldListWoGeomStr = fieldListWoGeom.join(',');\r\n        this.wfsGetFeature(\r\n          dataSourceOptions,\r\n          dataSourceOptions.paramsWFS.maxFeatures || defaultMaxFeatures,\r\n          undefined,\r\n          fieldListWoGeomStr\r\n        ).subscribe(manyFeatures => {\r\n          const mfeatures = olFormats.readFeatures(manyFeatures);\r\n          this.built_properties_value(mfeatures).forEach(element => {\r\n            sourceFields.push(element);\r\n          });\r\n          d.next(sourceFields);\r\n          d.complete();\r\n        });\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  private built_properties_value(features: olFeature[]): string[] {\r\n    const kv = Object.assign({}, features[0].getProperties());\r\n    delete kv[features[0].getGeometryName()];\r\n    delete kv.boundedBy;\r\n    const sourceFields = [];\r\n    for (const property in kv) {\r\n      if (kv.hasOwnProperty(property)) {\r\n        const fieldType =\r\n          typeof features[0].get(property) === 'object'\r\n            ? undefined\r\n            : typeof features[0].get(property);\r\n        sourceFields.push({\r\n          name: property,\r\n          alias: property,\r\n          type: fieldType,\r\n          values: [kv[property]]\r\n        });\r\n      }\r\n    }\r\n    features.every((element) => {\r\n      const featureProperties = element.getProperties();\r\n      for (const key in featureProperties) {\r\n        if (featureProperties.hasOwnProperty(key) && key in kv) {\r\n          sourceFields.filter(f => f.name === key).forEach(v => {\r\n            if (v.values.indexOf(featureProperties[key]) === -1) {\r\n              v.values.push(featureProperties[key]);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    return sourceFields;\r\n  }\r\n}\r\n","export enum QueryFormat {\r\n  GML2 = 'gml2',\r\n  GML3 = 'gml3',\r\n  JSON = 'json',\r\n  GEOJSON = 'geojson',\r\n  ESRIJSON = 'esrijson',\r\n  TEXT = 'text',\r\n  HTML = 'html',\r\n  HTMLGML2 = 'htmlgml2'\r\n}\r\n\r\nexport enum QueryHtmlTarget {\r\n  IFRAME = 'iframe',\r\n  BLANK = '_blank'\r\n}\r\n","import olSourceImageWMS from 'ol/source/ImageWMS';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { Legend } from './datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\nimport {\r\n  formatWFSQueryString,\r\n  checkWfsParams,\r\n  defaultFieldNameGeometry\r\n} from './wms-wfs.utils';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nexport class WMSDataSource extends DataSource {\r\n  public ol: olSourceImageWMS;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get mapLabel(): string {\r\n    return (this.options as any).mapLabel;\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  constructor(\r\n    public options: WMSDataSourceOptions,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(options);\r\n    const sourceParams: any = options.params;\r\n\r\n    const dpi = sourceParams.DPI || 96;\r\n    sourceParams.DPI = dpi;\r\n    sourceParams.MAP_RESOLUTION = dpi;\r\n    sourceParams.FORMAT_OPTIONS = 'dpi:' + dpi;\r\n\r\n    if (options.refreshIntervalSec && options.refreshIntervalSec > 0) {\r\n      setInterval(() => {\r\n        this.refresh();\r\n      }, options.refreshIntervalSec * 1000); // Convert seconds to MS\r\n    }\r\n\r\n    let fieldNameGeometry = defaultFieldNameGeometry;\r\n\r\n    // ####   START if paramsWFS\r\n    if (options.paramsWFS) {\r\n      const wfsCheckup = checkWfsParams(options, 'wms');\r\n      ObjectUtils.mergeDeep(options.paramsWFS, wfsCheckup.paramsWFS);\r\n\r\n      fieldNameGeometry =\r\n        options.paramsWFS.fieldNameGeometry || fieldNameGeometry;\r\n\r\n      options.download = Object.assign({}, options.download, {\r\n        dynamicUrl: this.buildDynamicDownloadUrlFromParamsWFS(options)\r\n      });\r\n    } //  ####   END  if paramsWFS\r\n\r\n    if (!options.sourceFields || options.sourceFields.length === 0) {\r\n      options.sourceFields = [];\r\n    } else {\r\n      options.sourceFields.forEach(sourceField => {\r\n        sourceField.alias = sourceField.alias\r\n          ? sourceField.alias\r\n          : sourceField.name;\r\n        // to allow only a list of sourcefield with names\r\n      });\r\n    }\r\n    const initOgcFilters = (options as OgcFilterableDataSourceOptions)\r\n      .ogcFilters;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (!initOgcFilters) {\r\n      (options as OgcFilterableDataSourceOptions).ogcFilters = ogcFilterWriter.defineOgcFiltersDefaultOptions(\r\n        initOgcFilters,\r\n        fieldNameGeometry,\r\n        'wms'\r\n      );\r\n    } else {\r\n      initOgcFilters.advancedOgcFilters = initOgcFilters.pushButtons\r\n        ? false\r\n        : true;\r\n    }\r\n\r\n    if (\r\n      sourceParams.LAYERS.split(',').length > 1 &&\r\n      initOgcFilters &&\r\n      initOgcFilters.enabled\r\n    ) {\r\n      console.log('*******************************');\r\n      console.log(\r\n        'BE CAREFULL, YOUR WMS LAYERS (' +\r\n          sourceParams.LAYERS +\r\n          ') MUST SHARE THE SAME FIELDS TO ALLOW ogcFilters TO WORK !! '\r\n      );\r\n      console.log('*******************************');\r\n    }\r\n\r\n    if (options.paramsWFS && initOgcFilters && initOgcFilters.enabled && initOgcFilters.editable) {\r\n      this.wfsService.getSourceFieldsFromWFS(options);\r\n    }\r\n\r\n    const filterQueryString = ogcFilterWriter.handleOgcFiltersAppliedValue(\r\n      options,\r\n      fieldNameGeometry\r\n    );\r\n    sourceParams.FILTER = filterQueryString;\r\n  }\r\n\r\n  refresh() {\r\n    this.ol.updateParams({ igoRefresh: Math.random() });\r\n  }\r\n\r\n  private buildDynamicDownloadUrlFromParamsWFS(asWFSDataSourceOptions) {\r\n    const queryStringValues = formatWFSQueryString(asWFSDataSourceOptions);\r\n    const downloadUrl = queryStringValues.find(f => f.name === 'getfeature')\r\n      .value;\r\n    return downloadUrl;\r\n  }\r\n\r\n  protected createOlSource(): olSourceImageWMS {\r\n    return new olSourceImageWMS(this.options);\r\n  }\r\n\r\n  getLegend(style?: string, scale?: number): Legend[] {\r\n    let legend = super.getLegend();\r\n    if (legend.length > 0 && (style === undefined && !scale)) {\r\n      return legend;\r\n    }\r\n\r\n    const sourceParams = this.params;\r\n\r\n    let layers = [];\r\n    if (sourceParams.LAYERS !== undefined) {\r\n      layers = sourceParams.LAYERS.split(',');\r\n    }\r\n\r\n    const baseUrl = this.options.url.replace(/\\?$/, '');\r\n    const params = [\r\n      'REQUEST=GetLegendGraphic',\r\n      'SERVICE=WMS',\r\n      'FORMAT=image/png',\r\n      'SLD_VERSION=1.1.0',\r\n      `VERSION=${sourceParams.VERSION || '1.3.0'}`\r\n    ];\r\n    if (style !== undefined) {\r\n      params.push(`STYLE=${style}`);\r\n    }\r\n    if (scale !== undefined) {\r\n      params.push(`SCALE=${scale}`);\r\n    }\r\n\r\n    legend = layers.map((layer: string) => {\r\n      const separator = baseUrl.match(/\\?/) ? '&' : '?';\r\n      return {\r\n        url: `${baseUrl}${separator}${params.join('&')}&LAYER=${layer}`,\r\n        title: layers.length > 1 ? layer : undefined,\r\n        currentStyle: style === undefined ? undefined : style as string\r\n      };\r\n    });\r\n\r\n    return legend;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olTileGridWMTS from 'ol/tilegrid/WMTS';\r\nimport * as olproj from 'ol/proj';\r\nimport {\r\n  getTopLeft as extentGetTopLeft,\r\n  getWidth as extentGetWidth\r\n} from 'ol/extent.js';\r\n\r\nexport function createDefaultTileGrid(epsg?: string): olTileGridWMTS {\r\n  const projection = epsg ? olproj.get(epsg) : olproj.get('EPSG:3857');\r\n  const projectionExtent = projection.getExtent();\r\n  const size = extentGetWidth(projectionExtent) / 256;\r\n  const resolutions = new Array(20);\r\n  const matrixIds = new Array(20);\r\n  for (let z = 0; z < 20; ++z) {\r\n    resolutions[z] = size / Math.pow(2, z);\r\n    matrixIds[z] = z;\r\n  }\r\n\r\n  return new olTileGridWMTS({\r\n    origin: extentGetTopLeft(projectionExtent),\r\n    resolutions,\r\n    matrixIds\r\n  });\r\n}\r\n","import olSourceWMTS from 'ol/source/WMTS';\r\n\r\nimport { createDefaultTileGrid } from '../../utils/tilegrid';\r\nimport { DataSource } from './datasource';\r\nimport { WMTSDataSourceOptions } from './wmts-datasource.interface';\r\n\r\nexport class WMTSDataSource extends DataSource {\r\n  public options: WMTSDataSourceOptions;\r\n  public ol: olSourceWMTS;\r\n\r\n  constructor(options: WMTSDataSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  protected createOlSource(): olSourceWMTS {\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        tileGrid: createDefaultTileGrid(this.options.projection as string)\r\n      },\r\n      this.options\r\n    );\r\n\r\n    return new olSourceWMTS(sourceOptions);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n}\r\n","import olSourceCarto from 'ol/source/CartoDB';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { Legend } from './datasource.interface';\r\nimport { CartoDataSourceOptions } from './carto-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class CartoDataSource extends DataSource {\r\n  public ol: olSourceCarto;\r\n  public options: CartoDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get mapLabel(): string {\r\n    return (this.options as any).mapLabel;\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceCarto {\r\n    const crossOrigin = this.options.crossOrigin\r\n      ? this.options.crossOrigin\r\n      : 'anonymous';\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        crossOrigin\r\n      },\r\n      this.options\r\n    );\r\n    return new olSourceCarto(sourceOptions);\r\n  }\r\n\r\n  getLegend(): Legend[] {\r\n    const legend = super.getLegend();\r\n    if (legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    let htmlString = '<table>';\r\n    if (this.options.config.layers[0].legend != null) {\r\n      this.options.config.layers[0].legend.items.forEach(f => {\r\n        if (f.visible === true) {\r\n          htmlString +=\r\n            '<tr><td>' +\r\n            '<p><font size=\"5\" color=\"' +\r\n            f.value +\r\n            '\"> &#9679</font></p></td>' +\r\n            '<td>' +\r\n            f.name +\r\n            '</td></tr>';\r\n        }\r\n      });\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    } else {\r\n      // Try to build the legend from the cartocss options\r\n      const layerOptions = this.options.config.layers[0].options;\r\n      // All available cartocss style options\r\n      const types = [\r\n        'polygon-fill:',\r\n        'marker-fill:',\r\n        'shield-fill:',\r\n        'building-fill:',\r\n        'line-color:'\r\n      ];\r\n      for (const oneType of types) {\r\n        if (layerOptions.cartocss.includes(oneType)) {\r\n          const type = layerOptions.cartocss.split(oneType).pop();\r\n          const color = type.substr(0, type.indexOf(';'));\r\n          if (color.includes('ramp')) {\r\n            const colors = color.split(', (')[1].split(',');\r\n            const data = color.split(', (')[2].split(',');\r\n            for (let j = 0; j < colors.length; j++) {\r\n              colors[j] = colors[j].replace(/(\"|\\))/g, '');\r\n              data[j] = data[j].replace(/(\"|\\))/g, '');\r\n              if (data[j].replace(/\\s+/g, '') === '=') {\r\n                data[j] = 'Autres';\r\n              }\r\n              htmlString +=\r\n                '<tr><td>' +\r\n                '<p><font size=\"5\" color=\"' +\r\n                colors[j] +\r\n                '\"> &#9679</font></p></td>' +\r\n                '<td>' +\r\n                data[j] +\r\n                '</td></tr>';\r\n            }\r\n            break;\r\n          } else {\r\n            const title = layerOptions.layer_name\r\n              ? layerOptions.layer_name\r\n              : '';\r\n            htmlString +=\r\n              '<tr><td>' +\r\n              '<p><font size=\"5\" color=\"' +\r\n              color +\r\n              '\"> &#9679</font></p>' +\r\n              '</td><td>' +\r\n              title +\r\n              '</td></tr>';\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    }\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport * as olloadingstrategy from 'ol/loadingstrategy';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { Legend } from './datasource.interface';\r\nimport { ArcGISRestDataSourceOptions } from './arcgisrest-datasource.interface';\r\n\r\nexport class ArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n  public options: ArcGISRestDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    const esrijsonFormat = new olFormatEsriJSON();\r\n    return new olSourceVector({\r\n      attributions: this.options.params.attributions,\r\n      overlaps: false,\r\n      format: esrijsonFormat,\r\n      url: function(extent, resolution, proj) {\r\n        const baseUrl = this.options.url + '/' + this.options.layer + '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        if (this.options.params.timeFilter) {\r\n          const time = `time=${this.options.params.timeExtent}`;\r\n          params.push(time);\r\n        }\r\n        if (this.options.params.customParams) {\r\n          this.options.params.customParams.forEach(element => {\r\n            params.push(element);\r\n          });\r\n        }\r\n        return `${baseUrl}?${params.join('&')}`;\r\n      }.bind(this),\r\n      strategy: olloadingstrategy.bbox\r\n    });\r\n  }\r\n\r\n  getLegend(): Legend[] {\r\n    const legendInfo = this.options.params.legendInfo;\r\n    const legend = super.getLegend();\r\n    if (legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const modifiedUrl = this.options.url.replace(\r\n        'FeatureServer',\r\n        'MapServer'\r\n      );\r\n      const src = `${modifiedUrl}/${lyr.layerId}/images/${lyrLegend.url}`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceTileArcGISRest from 'ol/source/TileArcGISRest';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { Legend } from './datasource.interface';\r\nimport { TileArcGISRestDataSourceOptions } from './tilearcgisrest-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class TileArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceTileArcGISRest;\r\n  public options: TileArcGISRestDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get mapLabel(): string {\r\n    return (this.options as any).mapLabel;\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceTileArcGISRest {\r\n    return new olSourceTileArcGISRest(this.options);\r\n  }\r\n\r\n  getLegend(): Legend[] {\r\n    const legend = super.getLegend();\r\n    if (this.options.legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = this.options.legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const src = `${this.options.url}/${lyr.layerId}/images/${\r\n        lyrLegend.url\r\n      }`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { WebSocketDataSourceOptions } from './websocket-datasource.interface';\r\n\r\nexport class WebSocketDataSource extends FeatureDataSource {\r\n  public ws: WebSocket;\r\n  public options: WebSocketDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    this.createWebSocket();\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    return super.createOlSource();\r\n  }\r\n\r\n  private createWebSocket() {\r\n    this.ws = new WebSocket(this.options.url);\r\n    this.ws.onmessage = this.onMessage.bind(this);\r\n\r\n    if (this.options.onclose) {\r\n      this.ws.onclose = this.onClose.bind(this);\r\n    }\r\n\r\n    if (this.options.onerror) {\r\n      this.ws.onerror = this.onError.bind(this);\r\n    }\r\n\r\n    if (this.options.onopen) {\r\n      this.ws.onopen = this.onOpen.bind(this);\r\n    }\r\n  }\r\n\r\n  onMessage(event) {\r\n    const featureAdded = this.options.format.readFeature(event.data);\r\n\r\n    switch (this.options.onmessage) {\r\n      case 'update':\r\n        // ol don't add if same ID\r\n        const featureToRemove = this.ol.getFeatureById(featureAdded.getId());\r\n        if (featureToRemove) {\r\n          this.ol.removeFeature(featureToRemove);\r\n        }\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'delete':\r\n        this.ol.clear(true);\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'add':\r\n      default:\r\n        this.ol.addFeature(featureAdded);\r\n    }\r\n  }\r\n\r\n  onClose(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onError(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onOpen(event) {\r\n    // thrown message to user ?\r\n  }\r\n\r\n  public onUnwatch() {\r\n    this.ws.close();\r\n  }\r\n}\r\n","import { Md5 } from 'ts-md5';\r\nimport feature from 'ol/Feature';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\nimport olFormatMVT from 'ol/format/MVT';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { MVTDataSourceOptions } from './mvt-datasource.interface';\r\n\r\nexport class MVTDataSource extends DataSource {\r\n  public options: MVTDataSourceOptions;\r\n  public ol: olSourceVectorTile;\r\n\r\n  protected createOlSource(): olSourceVectorTile {\r\n    let mvtFormat;\r\n    if (this.options.featureClass === 'feature') {\r\n      mvtFormat = new olFormatMVT({featureClass: feature});\r\n    } else if (this.options.featureClass === undefined) {\r\n      mvtFormat = new olFormatMVT();\r\n    }\r\n    this.options.format = mvtFormat;\r\n    return new olSourceVectorTile(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    if (!this.options.url) {\r\n        return uuid();\r\n    }\r\n    const chain = 'mvt' + this.options.url;\r\n    return Md5.hashStr(chain) as string;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceCluster from 'ol/source/Cluster';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { ClusterDataSourceOptions } from './cluster-datasource.interface';\r\n\r\nexport class ClusterDataSource extends FeatureDataSource {\r\n  public options: ClusterDataSourceOptions;\r\n  public ol: olSourceCluster;\r\n\r\n  protected createOlSource(): olSourceCluster {\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    this.options.source = super.createOlSource();\r\n    return new olSourceCluster(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    return uuid();\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","export const FEATURE = 'Feature';\r\n\r\nexport enum FeatureMotion {\r\n  None,\r\n  Move,\r\n  Zoom,\r\n  Default\r\n}\r\n","export const LAYER = 'Layer';\r\n","import {\r\n  BehaviorSubject,\r\n  Observable,\r\n  Subject,\r\n  Subscription,\r\n  combineLatest\r\n} from 'rxjs';\r\nimport { debounceTime, map } from 'rxjs/operators';\r\n\r\nimport olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource, Legend } from '../../../datasource';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { AuthInterceptor } from '@igo2/auth';\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { LayerOptions } from './layer.interface';\r\n\r\nexport abstract class Layer {\r\n  public collapsed: boolean;\r\n  public dataSource: DataSource;\r\n  public legend: Legend[];\r\n  public legendCollapsed: boolean = true;\r\n  public firstLoadComponent: boolean = true;\r\n  public map: IgoMap;\r\n  public ol: olLayer;\r\n  public status$: Subject<SubjectStatus>;\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  get id(): string {\r\n    return this.options.id || this.dataSource.id;\r\n  }\r\n\r\n  get alias(): string {\r\n    return this.options.alias;\r\n  }\r\n\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  set title(title: string) {\r\n    this.options.title = title;\r\n  }\r\n\r\n  get zIndex(): number {\r\n    return this.ol.getZIndex();\r\n  }\r\n\r\n  set zIndex(zIndex: number) {\r\n    this.ol.setZIndex(zIndex);\r\n  }\r\n\r\n  get baseLayer(): boolean {\r\n    return this.options.baseLayer;\r\n  }\r\n\r\n  set baseLayer(baseLayer: boolean) {\r\n    this.options.baseLayer = baseLayer;\r\n  }\r\n\r\n  get opacity(): number {\r\n    return this.ol.get('opacity');\r\n  }\r\n\r\n  set opacity(opacity: number) {\r\n    this.ol.setOpacity(opacity);\r\n  }\r\n\r\n  set isInResolutionsRange(value: boolean) { this.isInResolutionsRange$.next(value); }\r\n  get isInResolutionsRange(): boolean { return this.isInResolutionsRange$.value; }\r\n  readonly isInResolutionsRange$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  set maxResolution(value: number) {\r\n    this.ol.setMaxResolution(value);\r\n    this.updateInResolutionsRange();\r\n  }\r\n  get maxResolution(): number { return this.ol.getMaxResolution(); }\r\n\r\n  set minResolution(value: number) {\r\n    this.ol.setMinResolution(value);\r\n    this.updateInResolutionsRange();\r\n  }\r\n  get minResolution(): number { return this.ol.getMinResolution(); }\r\n\r\n  set visible(value: boolean) {\r\n    this.ol.setVisible(value);\r\n    this.visible$.next(value);\r\n  }\r\n  get visible(): boolean { return this.visible$.value; }\r\n  readonly visible$: BehaviorSubject<boolean> = new BehaviorSubject(undefined);\r\n\r\n  get displayed(): boolean { return this.visible && this.isInResolutionsRange; }\r\n  readonly displayed$: Observable<boolean> = combineLatest([\r\n    this.isInResolutionsRange$,\r\n    this.visible$\r\n  ]).pipe(\r\n    map((bunch: [boolean, boolean]) => bunch[0] && bunch[1])\r\n  );\r\n\r\n  get showInLayerList(): boolean {\r\n    return this.options.showInLayerList !== false;\r\n  }\r\n\r\n  constructor(public options: LayerOptions, protected authInterceptor?: AuthInterceptor) {\r\n    this.dataSource = options.source;\r\n\r\n    this.ol = this.createOlLayer();\r\n    if (options.zIndex !== undefined) {\r\n      this.zIndex = options.zIndex;\r\n    }\r\n\r\n    if (options.baseLayer && options.visible === undefined) {\r\n      options.visible = false;\r\n    }\r\n\r\n    if (options.maxResolution !== undefined) {\r\n      this.maxResolution = options.maxResolution;\r\n    }\r\n    if (options.minResolution !== undefined) {\r\n      this.minResolution = options.minResolution;\r\n    }\r\n\r\n    this.visible =\r\n      options.visible === undefined ? true : options.visible;\r\n    this.opacity =\r\n      options.opacity === undefined ? 1 : options.opacity;\r\n\r\n    if (\r\n      options.legendOptions &&\r\n      (options.legendOptions.url || options.legendOptions.html)\r\n    ) {\r\n      this.legend = this.dataSource.setLegend(options.legendOptions);\r\n    }\r\n\r\n    this.legendCollapsed = options.legendOptions\r\n      ? options.legendOptions.collapsed\r\n        ? options.legendOptions.collapsed\r\n        : true\r\n      : true;\r\n\r\n    this.ol.set('_layer', this, true);\r\n  }\r\n\r\n  protected abstract createOlLayer(): olLayer;\r\n\r\n  setMap(igoMap: IgoMap | undefined) {\r\n    this.map = igoMap;\r\n\r\n    this.unobserveResolution();\r\n    if (igoMap !== undefined) {\r\n      this.observeResolution();\r\n    }\r\n  }\r\n\r\n  private observeResolution() {\r\n    this.resolution$$ = this.map.viewController.resolution$\r\n      .subscribe(() => this.updateInResolutionsRange());\r\n  }\r\n\r\n  private unobserveResolution() {\r\n    if (this.resolution$$ !== undefined) {\r\n      this.resolution$$.unsubscribe();\r\n      this.resolution$$ = undefined;\r\n    }\r\n  }\r\n\r\n  private updateInResolutionsRange() {\r\n    if (this.map !== undefined) {\r\n      const resolution = this.map.viewController.getResolution();\r\n      const minResolution = this.minResolution || 0;\r\n      const maxResolution = this.maxResolution || Infinity;\r\n      this.isInResolutionsRange = resolution >= minResolution && resolution <= maxResolution;\r\n    } else {\r\n      this.isInResolutionsRange = false;\r\n    }\r\n  }\r\n}\r\n","import olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource } from '../../../datasource/shared/datasources/datasource';\r\nimport { AnyDataSourceOptions } from '../../../datasource/shared/datasources/any-datasource.interface';\r\n\r\nexport interface LayerOptions {\r\n  source?: DataSource;\r\n  sourceOptions?: AnyDataSourceOptions;\r\n  title?: string;\r\n  id?: string;\r\n  alias?: string;\r\n  baseLayer?: boolean;\r\n  opacity?: number;\r\n  visible?: boolean;\r\n  extent?: [number, number, number, number];\r\n  zIndex?: number;\r\n  minResolution?: number;\r\n  maxResolution?: number;\r\n  showInLayerList?: boolean;\r\n  removable?: boolean;\r\n  legendOptions?: LegendOptions;\r\n  ol?: olLayer;\r\n  tooltip?: TooltipContent;\r\n}\r\n\r\nexport interface GroupLayers {\r\n  title: string;\r\n  layers?: LayerOptions;\r\n  collapsed?: boolean;\r\n}\r\n\r\nexport interface TooltipContent {\r\n  type?: TooltipType;\r\n  text?: string;\r\n}\r\nexport enum TooltipType {\r\n  TITLE = 'title',\r\n  ABSTRACT = 'abstract',\r\n  CUSTOM = 'custom'\r\n}\r\n\r\nexport interface LegendOptions {\r\n  collapsed?: boolean;\r\n  display?: boolean;\r\n  url?: string;\r\n  html?: string;\r\n  stylesAvailable?: ItemStyleOptions[];\r\n}\r\n\r\nexport interface ItemStyleOptions {\r\n  name: string;\r\n  title?: string;\r\n  }\r\n\r\nexport interface OutputLayerLegend {\r\n  title: string;\r\n  url: string;\r\n  image: string;\r\n}\r\n","import olSourceImage from 'ol/source/Image';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { ImageLayer } from '../shared/layers/image-layer';\r\n\r\nexport class ImageWatcher extends Watcher {\r\n  protected id: string;\r\n  protected loaded = 0;\r\n  protected loading = 0;\r\n\r\n  private source: olSourceImage;\r\n\r\n  constructor(layer: ImageLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    if (!event.image.__watchers__) {\r\n      event.image.__watchers__ = [];\r\n    }\r\n    event.image.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.image.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.image.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.image.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import olSourceTile from 'ol/source/Tile';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { TileLayer } from '../shared/layers/tile-layer';\r\nimport { VectorTileLayer } from '../shared/layers/vectortile-layer';\r\n\r\nexport class TileWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private source: olSourceTile;\r\n\r\n  constructor(layer: TileLayer | VectorTileLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    // This is to avoid increasing\r\n    // the number of loaded tiles if a tile was loading\r\n    // before subscribing to this watcher\r\n    if (!event.tile.__watchers__) {\r\n      event.tile.__watchers__ = [];\r\n    }\r\n    event.tile.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.tile.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.tile.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.tile.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Layer } from '../shared/layers/layer';\r\nimport { OutputLayerLegend } from '../shared/layers/layer.interface';\r\n\r\n/**\r\n * Get all the layers legend\r\n * @return Array of legend\r\n */\r\nexport function getLayersLegends(layers: Layer[], scale?: number): OutputLayerLegend[] {\r\n  const legends = [];\r\n  const newCanvas = document.createElement('canvas');\r\n  const newContext = newCanvas.getContext('2d');\r\n  newContext.font = '20px Calibri';\r\n\r\n  let heightPos = 0;\r\n  for (const layer of layers) {\r\n    if (layer.visible === false) { continue; }\r\n\r\n    const legendUrls = layer.dataSource.getLegend(undefined, scale) || [];\r\n    for (const legendUrl of legendUrls) {\r\n      if (legendUrl.url === undefined) { continue; }\r\n\r\n      const title = layer.title;\r\n      // Create an image for the legend\r\n      const legendImage = new Image();\r\n      legendImage.crossOrigin = 'anonymous';\r\n      legendImage.src = legendUrl.url;\r\n      legendImage.onload = () => {\r\n        newContext.fillText(title, 0, heightPos);\r\n        newContext.drawImage(legendImage, 0, heightPos + 20);\r\n        heightPos += legendImage.height + 5;\r\n      };\r\n      // Add legend info to the list\r\n      legends.push({\r\n        title,\r\n        url: legendUrl.url,\r\n        image: legendImage\r\n      });\r\n    }\r\n  }\r\n\r\n  return legends;\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { VectorLayer } from '../shared/layers/vector-layer';\r\n\r\nexport class VectorWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private layer: VectorLayer;\r\n\r\n  constructor(layer: VectorLayer) {\r\n    super();\r\n    this.layer = layer;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.layer.onUnwatch();\r\n  }\r\n}\r\n","import olLayerImage from 'ol/layer/Image';\r\nimport olSourceImage from 'ol/source/Image';\r\n\r\nimport { AuthInterceptor } from '@igo2/auth';\r\n\r\nimport { ImageWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { WMSDataSource } from '../../../datasource/shared/datasources/wms-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { ImageLayerOptions } from './image-layer.interface';\r\n\r\nexport class ImageLayer extends Layer {\r\n  public dataSource: WMSDataSource;\r\n  public options: ImageLayerOptions;\r\n  public ol: olLayerImage;\r\n\r\n  private watcher: ImageWatcher;\r\n\r\n  constructor(\r\n    options: ImageLayerOptions,\r\n    public authInterceptor?: AuthInterceptor\r\n  ) {\r\n    super(options, authInterceptor);\r\n    this.watcher = new ImageWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerImage {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceImage\r\n    });\r\n\r\n    const image = new olLayerImage(olOptions);\r\n    if (this.authInterceptor) {\r\n      (image.getSource() as any).setImageLoadFunction((tile, src) => {\r\n        this.customLoader(tile, src);\r\n      });\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  private customLoader(tile, src) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', src);\r\n\r\n    const intercepted = this.authInterceptor.interceptXhr(xhr, src);\r\n    if (!intercepted) {\r\n      xhr.abort();\r\n      tile.getImage().src = src;\r\n      return;\r\n    }\r\n\r\n    xhr.responseType = 'arraybuffer';\r\n\r\n    xhr.onload = function() {\r\n      const arrayBufferView = new Uint8Array((this as any).response);\r\n      const blob = new Blob([arrayBufferView], { type: 'image/png' });\r\n      const urlCreator = window.URL;\r\n      const imageUrl = urlCreator.createObjectURL(blob);\r\n      tile.getImage().src = imageUrl;\r\n    };\r\n    xhr.send();\r\n  }\r\n}\r\n","import olLayerTile from 'ol/layer/Tile';\r\nimport olSourceTile from 'ol/source/Tile';\r\n\r\nimport { TileWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { OSMDataSource } from '../../../datasource/shared/datasources/osm-datasource';\r\nimport { WMTSDataSource } from '../../../datasource/shared/datasources/wmts-datasource';\r\nimport { XYZDataSource } from '../../../datasource/shared/datasources/xyz-datasource';\r\nimport { CartoDataSource } from '../../../datasource/shared/datasources/carto-datasource';\r\nimport { TileArcGISRestDataSource } from '../../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { TileLayerOptions } from './tile-layer.interface';\r\n\r\nexport class TileLayer extends Layer {\r\n  public dataSource:\r\n    | OSMDataSource\r\n    | WMTSDataSource\r\n    | XYZDataSource\r\n    | CartoDataSource\r\n    | TileArcGISRestDataSource;\r\n  public options: TileLayerOptions;\r\n  public ol: olLayerTile;\r\n\r\n  private watcher: TileWatcher;\r\n\r\n  constructor(options: TileLayerOptions) {\r\n    super(options);\r\n\r\n    this.watcher = new TileWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceTile\r\n    });\r\n\r\n    return new olLayerTile(olOptions);\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n}\r\n","import olLayerVector from 'ol/layer/Vector';\r\nimport olSourceVector from 'ol/source/Vector';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { asArray as ColorAsArray } from 'ol/color';\r\n\r\nimport { FeatureDataSource } from '../../../datasource/shared/datasources/feature-datasource';\r\nimport { WFSDataSource } from '../../../datasource/shared/datasources/wfs-datasource';\r\nimport { ArcGISRestDataSource } from '../../../datasource/shared/datasources/arcgisrest-datasource';\r\nimport { WebSocketDataSource } from '../../../datasource/shared/datasources/websocket-datasource';\r\nimport { ClusterDataSource } from '../../../datasource/shared/datasources/cluster-datasource';\r\n\r\nimport { VectorWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\nimport { Layer } from './layer';\r\nimport { VectorLayerOptions } from './vector-layer.interface';\r\n\r\nexport class VectorLayer extends Layer {\r\n  public dataSource:\r\n    | FeatureDataSource\r\n    | WFSDataSource\r\n    | ArcGISRestDataSource\r\n    | WebSocketDataSource\r\n    | ClusterDataSource;\r\n  public options: VectorLayerOptions;\r\n  public ol: olLayerVector;\r\n  private watcher: VectorWatcher;\r\n  private trackFeatureListenerId;\r\n\r\n  get browsable(): boolean {\r\n    return this.options.browsable !== false;\r\n  }\r\n\r\n  get exportable(): boolean {\r\n    return this.options.exportable !== false;\r\n  }\r\n\r\n  constructor(options: VectorLayerOptions) {\r\n    super(options);\r\n    this.watcher = new VectorWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVector {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVector\r\n    });\r\n\r\n    if (this.options.animation) {\r\n      this.dataSource.ol.on(\r\n        'addfeature',\r\n        function(e) {\r\n          this.flash(e.feature);\r\n        }.bind(this)\r\n      );\r\n    }\r\n\r\n    if (this.options.trackFeature) {\r\n      this.enableTrackFeature(this.options.trackFeature);\r\n    }\r\n\r\n    return new olLayerVector(olOptions);\r\n  }\r\n\r\n  protected flash(feature) {\r\n    const start = new Date().getTime();\r\n    const listenerKey = this.map.ol.on('postcompose', animate.bind(this));\r\n\r\n    function animate(event) {\r\n      const vectorContext = event.vectorContext;\r\n      const frameState = event.frameState;\r\n      const flashGeom = feature.getGeometry().clone();\r\n      const elapsed = frameState.time - start;\r\n      const elapsedRatio = elapsed / this.options.animation.duration;\r\n      const opacity = easeOut(1 - elapsedRatio);\r\n      const newColor = ColorAsArray(this.options.animation.color || 'red');\r\n      newColor[3] = opacity;\r\n      let style = this.ol\r\n        .getStyleFunction()\r\n        .call(this, feature)\r\n        .find(style2 => {\r\n          return style2.getImage();\r\n        });\r\n      if (!style) {\r\n        style = this.ol.getStyleFunction().call(this, feature)[0];\r\n      }\r\n      const styleClone = style.clone();\r\n\r\n      switch (feature.getGeometry().getType()) {\r\n        case 'Point':\r\n          const radius =\r\n            easeOut(elapsedRatio) * (styleClone.getImage().getRadius() * 3);\r\n          styleClone.getImage().setRadius(radius);\r\n          styleClone.getImage().setOpacity(opacity);\r\n          break;\r\n        case 'LineString':\r\n          // TODO\r\n          if (styleClone.getImage()) {\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setColor(newColor);\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) *\r\n                  (styleClone\r\n                    .getImage()\r\n                    .getStroke()\r\n                    .getWidth() *\r\n                    3)\r\n              );\r\n          }\r\n          if (styleClone.getStroke()) {\r\n            styleClone.getStroke().setColor(newColor);\r\n            styleClone\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) * (styleClone.getStroke().getWidth() * 3)\r\n              );\r\n          }\r\n          break;\r\n        case 'Polygon':\r\n          // TODO\r\n          if (styleClone.getImage()) {\r\n            styleClone\r\n              .getImage()\r\n              .getFill()\r\n              .setColor(newColor);\r\n          }\r\n          if (styleClone.getFill()) {\r\n            styleClone.getFill().setColor(newColor);\r\n          }\r\n          break;\r\n      }\r\n\r\n      styleClone.setText('');\r\n      vectorContext.setStyle(styleClone);\r\n      vectorContext.drawGeometry(flashGeom);\r\n\r\n      if (elapsed > this.options.animation.duration) {\r\n        unByKey(listenerKey);\r\n        // remove last geometry\r\n        // there is a little flash before feature disappear, better solution ?\r\n        this.map.ol.render();\r\n        return;\r\n      }\r\n      // tell OpenLayers to continue postcompose animation\r\n      this.map.ol.render();\r\n    }\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  public onUnwatch() {\r\n    this.dataSource.onUnwatch();\r\n    this.stopAnimation();\r\n  }\r\n\r\n  public stopAnimation() {\r\n    this.dataSource.ol.un(\r\n      'addfeature',\r\n      function(e) {\r\n        if (this.visible) {\r\n          this.flash(e.feature);\r\n        }\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  public enableTrackFeature(id: string | number) {\r\n    this.trackFeatureListenerId = this.dataSource.ol.on(\r\n      'addfeature',\r\n      this.trackFeature.bind(this, id)\r\n    );\r\n  }\r\n  public centerMapOnFeature(id: string | number) {\r\n    const feat = this.dataSource.ol.getFeatureById(id);\r\n    if (feat) {\r\n      this.map.ol.getView().setCenter(feat.getGeometry().getCoordinates());\r\n    }\r\n  }\r\n\r\n  public trackFeature(id, feat) {\r\n    if (feat.feature.getId() === id && this.visible) {\r\n      this.centerMapOnFeature(id);\r\n    }\r\n  }\r\n\r\n  public disableTrackFeature(id?: string | number) {\r\n    unByKey(this.trackFeatureListenerId);\r\n  }\r\n}\r\n","import olLayerVectorTile from 'ol/layer/VectorTile';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\n\r\nimport { MVTDataSource } from '../../../datasource/shared/datasources/mvt-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { VectorTileLayerOptions } from './vectortile-layer.interface';\r\nimport { TileWatcher } from '../../utils';\r\n\r\nexport class VectorTileLayer extends Layer {\r\n  public dataSource: MVTDataSource;\r\n  public options: VectorTileLayerOptions;\r\n  public ol: olLayerVectorTile;\r\n\r\n  private watcher: TileWatcher;\r\n\r\n  constructor(options: VectorTileLayerOptions) {\r\n    super(options);\r\n    this.watcher = new TileWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVectorTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVectorTile\r\n    });\r\n\r\n    return new olLayerVectorTile(olOptions);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { ActivityService } from '@igo2/core';\r\n\r\nimport { IgoMap, MapViewOptions } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-map-browser',\r\n  templateUrl: './map-browser.component.html',\r\n  styleUrls: ['./map-browser.component.scss']\r\n})\r\nexport class MapBrowserComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  private activityId: string;\r\n  private status$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get view(): MapViewOptions { return this._view; }\r\n  set view(value: MapViewOptions) {\r\n    this._view = value;\r\n    if (this.map !== undefined) {\r\n      this.map.updateView(value);\r\n    }\r\n  }\r\n  private _view: MapViewOptions;\r\n\r\n  public id = `igo-map-target-${new Date().getTime()}`;\r\n\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  ngOnInit() {\r\n    this.status$$ = this.map.status$.subscribe(status =>\r\n      this.handleStatusChange(status)\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.map.setTarget(this.id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.setTarget(undefined);\r\n    this.activityService.unregister(this.activityId);\r\n    this.status$$.unsubscribe();\r\n  }\r\n\r\n  private handleStatusChange(status: SubjectStatus) {\r\n    if (status === SubjectStatus.Working && this.activityId === undefined) {\r\n      this.activityId = this.activityService.register();\r\n    } else if (status === SubjectStatus.Done && this.activityId !== undefined) {\r\n      this.activityService.unregister(this.activityId);\r\n      this.activityId = undefined;\r\n    }\r\n  }\r\n}\r\n","export enum OverlayAction {\r\n    None,\r\n    Move,\r\n    Zoom,\r\n    ZoomIfOutMapExtent\r\n  }\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayAction } from './overlay.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OverlayService {\r\n  public features$ = new BehaviorSubject<[Feature[], OverlayAction]>([\r\n    [],\r\n    undefined\r\n  ]);\r\n\r\n  constructor() {}\r\n\r\n  setFeatures(features: Feature[], action: OverlayAction = OverlayAction.None) {\r\n    this.features$.next([features, action]);\r\n  }\r\n\r\n  clear() {\r\n    this.features$.next([[], OverlayAction.None]);\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayService } from '../shared/overlay.service';\r\nimport { OverlayAction } from '../shared/overlay.enum';\r\n\r\n@Directive({\r\n  selector: '[igoOverlay]'\r\n})\r\nexport class OverlayDirective implements OnInit, OnDestroy {\r\n  private features$$: Subscription;\r\n  private format = new olFormatGeoJSON();\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private overlayService: OverlayService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.features$$ = this.overlayService.features$.subscribe(res =>\r\n      this.handleFeatures(res[0], res[1])\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.features$$.unsubscribe();\r\n  }\r\n\r\n  private handleFeatures(features: Feature[], action: OverlayAction) {}\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer, StyleService } from '../../layer';\r\n\r\n/**\r\n * Create an overlay layer and it's source\r\n * @returns Overlay layer\r\n */\r\nexport function createOverlayLayer(): VectorLayer {\r\n  const overlayDataSource = new FeatureDataSource();\r\n  return new VectorLayer({\r\n    title: 'Overlay',\r\n    zIndex: 300,\r\n    source: overlayDataSource,\r\n    style: createOverlayLayerStyle()\r\n  });\r\n}\r\n\r\n/**\r\n * Create an overlay style with markers for points and a basic stroke/fill\r\n * combination for lines and polygons\r\n * @returns Style function\r\n */\r\nfunction createOverlayLayerStyle(): (olFeature: OlFeature) => olstyle.Style {\r\n  const defaultStyle = createOverlayDefaultStyle();\r\n  const markerStyle = createOverlayMarkerStyle();\r\n\r\n  let style;\r\n\r\n  return (olFeature: OlFeature) => {\r\n    if (olFeature.getId() === 'bufferFeature') {\r\n      style = createBufferStyle(olFeature.get('bufferStroke'), 2, olFeature.get('bufferFill'), olFeature.get('bufferText'));\r\n      return style;\r\n    } else {\r\n      const customStyle = olFeature.get('_style');\r\n      if (customStyle) {\r\n        const styleService = new StyleService();\r\n        return styleService.createStyle(customStyle);\r\n      }\r\n      const geometryType = olFeature.getGeometry().getType();\r\n      style = geometryType === 'Point' ? markerStyle : defaultStyle;\r\n      style.getText().setText(olFeature.get('_mapTitle'));\r\n      return style;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Create a basic style for lines and polygons\r\n * @returns Style\r\n */\r\nexport function createOverlayDefaultStyle(\r\n  {text, fillOpacity, strokeWidth = 2, strokeOpacity, color = [0, 161, 222, 0.3]}:\r\n    {text?: string, fillOpacity?: number, strokeWidth?: number, strokeOpacity?: number, color?: number[]}  = {}\r\n  ): olstyle.Style {\r\n  const fillWithOpacity = color.slice(0);\r\n  const strokeWithOpacity = color.slice(0);\r\n  strokeWithOpacity[3] = 1;\r\n  if (fillOpacity) {\r\n    fillWithOpacity[3] = fillOpacity;\r\n  }\r\n  if (strokeOpacity) {\r\n    strokeWithOpacity[3] = strokeOpacity;\r\n  }\r\n\r\n  const stroke = new olstyle.Stroke({\r\n    width: strokeWidth,\r\n    color: strokeWithOpacity\r\n  });\r\n\r\n  const fill = new olstyle.Fill({\r\n    color: fillWithOpacity\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke,\r\n    fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke,\r\n      fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      text,\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a marker style for points\r\n * @returns Style\r\n */\r\nexport function createOverlayMarkerStyle(\r\n  {text, opacity = 1, color = 'blue'}:\r\n    {text?: string, opacity?: number, color?: string}  = {}\r\n  ): olstyle.Style {\r\n  let iconColor;\r\n  switch (color) {\r\n    case 'blue':\r\n    case 'red':\r\n    case 'yellow':\r\n    case 'green':\r\n      iconColor = color;\r\n      break;\r\n    default:\r\n      iconColor = 'blue';\r\n      break;\r\n  }\r\n  return new olstyle.Style({\r\n    image: new olstyle.Icon({\r\n      src: './assets/igo2/geo/icons/place_' + iconColor + '_36px.svg',\r\n      opacity,\r\n      imgSize: [36, 36], // for ie\r\n      anchor: [0.5, 0.92]\r\n    }),\r\n    text: new olstyle.Text({\r\n      text,\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n\r\nfunction createBufferStyle(\r\n  strokeRGBA: [number, number, number, number] = [0, 161, 222, 1],\r\n  strokeWidth: number = 2,\r\n  fillRGBA: [number, number, number, number] = [0, 161, 222, 0.15],\r\n  bufferRadius?\r\n): olstyle.Style {\r\n  const stroke = new olstyle.Stroke({\r\n    width: strokeWidth,\r\n    color: strokeRGBA\r\n  });\r\n\r\n  const fill = new olstyle.Stroke({\r\n    color: fillRGBA\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke,\r\n    fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke,\r\n      fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      text: bufferRadius,\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\nimport { StyleByAttribute } from './vector-style.interface';\r\n\r\nimport { ClusterParam } from './clusterParam';\r\nimport { createOverlayMarkerStyle } from '../../overlay';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleService {\r\n  public style: olstyle.Style;\r\n\r\n  createStyle(options: { [key: string]: any }) {\r\n    if (!options) {\r\n      return createOverlayMarkerStyle();\r\n    }\r\n    if (typeof options === 'function' || options instanceof olstyle.Style) {\r\n      return options;\r\n    }\r\n    return this.parseStyle('style', options);\r\n  }\r\n\r\n  private parseStyle(key: string, value: any): olstyle {\r\n    const styleOptions = {};\r\n    const olCls = this.getOlCls(key);\r\n\r\n    if (olCls && value instanceof Object) {\r\n      Object.keys(value).forEach(_key => {\r\n        const olKey = this.getOlKey(_key);\r\n        styleOptions[olKey] = this.parseStyle(_key, value[_key]);\r\n      });\r\n      return new olCls(styleOptions);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  private getOlKey(key: any) {\r\n    let olKey;\r\n    switch (key.toLowerCase()) {\r\n      case 'circle':\r\n      case 'regularshape':\r\n      case 'icon':\r\n        olKey = 'image';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return olKey || key;\r\n  }\r\n\r\n  private getOlCls(key: any) {\r\n    let olCls = olstyle[key.charAt(0).toUpperCase() + key.slice(1)];\r\n    if (key === 'regularshape') {\r\n      olCls = olstyle.RegularShape;\r\n    }\r\n    if (key === 'backgroundFill') {\r\n      olCls = olstyle.Fill;\r\n    }\r\n    if (key === 'backgroundStroke') {\r\n      olCls = olstyle.Stroke;\r\n    }\r\n\r\n    return olCls;\r\n  }\r\n\r\n  createStyleByAttribute(feature, styleByAttribute: StyleByAttribute) {\r\n    let style;\r\n    const type = styleByAttribute.type;\r\n    const attribute = styleByAttribute.attribute;\r\n    const data = styleByAttribute.data;\r\n    const stroke = styleByAttribute.stroke;\r\n    const width = styleByAttribute.width;\r\n    const fill = styleByAttribute.fill;\r\n    const radius = styleByAttribute.radius;\r\n    const icon = styleByAttribute.icon;\r\n    const scale = styleByAttribute.scale;\r\n    const size = data.length;\r\n    const label = styleByAttribute.label.attribute || styleByAttribute.label;\r\n    const labelStyle =\r\n      this.parseStyle('text', styleByAttribute.label.style) ||\r\n      new olstyle.Text();\r\n    labelStyle.setText(this.getLabel(feature, label));\r\n    const baseStyle = styleByAttribute.baseStyle;\r\n    if (type === 'circle') {\r\n      for (let i = 0; i < size; i++) {\r\n        const val =\r\n          typeof feature.get(attribute) !== 'undefined'\r\n            ? feature.get(attribute)\r\n            : '';\r\n        if (val === data[i] || val.toString().match(data[i])) {\r\n          if (icon) {\r\n            style = [\r\n              new olstyle.Style({\r\n                image: new olstyle.Icon({\r\n                  src: icon[i],\r\n                  scale: scale ? scale[i] : 1\r\n                })\r\n              })\r\n            ];\r\n            return style;\r\n          }\r\n          style = [\r\n            new olstyle.Style({\r\n              image: new olstyle.Circle({\r\n                radius: radius ? radius[i] : 4,\r\n                stroke: new olstyle.Stroke({\r\n                  color: stroke ? stroke[i] : 'black',\r\n                  width: width ? width[i] : 1\r\n                }),\r\n                fill: new olstyle.Fill({\r\n                  color: fill ? fill[i] : 'black'\r\n                })\r\n              }),\r\n              text: labelStyle\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n      if (!feature.getStyle()) {\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: 4,\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: '#bbbbf2'\r\n              })\r\n            })\r\n          })\r\n        ];\r\n        return style;\r\n      }\r\n    } else if (type === 'regular') {\r\n      for (let i = 0; i < size; i++) {\r\n        const val =\r\n          typeof feature.get(attribute) !== 'undefined'\r\n            ? feature.get(attribute)\r\n            : '';\r\n        if (val === data[i] || val.toString().match(data[i])) {\r\n          style = [\r\n            new olstyle.Style({\r\n              stroke: new olstyle.Stroke({\r\n                color: stroke ? stroke[i] : 'black',\r\n                width: width ? width[i] : 1\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: fill ? fill[i] : 'rgba(255,255,255,0.4)'\r\n              }),\r\n              text: labelStyle\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n      if (feature instanceof OlFeature) {\r\n        if (!feature.getStyle()) {\r\n          if (baseStyle) {\r\n            style = this.createStyle(baseStyle);\r\n            return style;\r\n          }\r\n          style = [\r\n            new olstyle.Style({\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: '#bbbbf2'\r\n              })\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createClusterStyle(feature, clusterParam: ClusterParam = {}, layerStyle) {\r\n    let style: olstyle.Style;\r\n    const size = feature.get('features').length;\r\n    if (size !== 1) {\r\n      if (clusterParam.clusterRanges) {\r\n        for (const r of clusterParam.clusterRanges) {\r\n          if (\r\n            (!r.minRadius || r.minRadius <= size) &&\r\n            (!r.maxRadius || r.maxRadius >= size)\r\n          ) {\r\n            style = this.createStyle(r.style);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!style) {\r\n        let clusterRadius: number;\r\n        if (clusterParam.radiusCalc) {\r\n          clusterRadius = clusterParam.radiusCalc(size);\r\n        } else {\r\n          const radiusMin = 6;\r\n          clusterRadius = 5 * Math.log(size);\r\n          if (clusterRadius < radiusMin) {\r\n            clusterRadius = radiusMin;\r\n          }\r\n        }\r\n\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: clusterRadius,\r\n              opacity: 0.4,\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: 'rgba(24, 134, 45, 0.5)'\r\n              })\r\n            }),\r\n            text: new olstyle.Text({\r\n              text: size.toString(),\r\n              fill: new olstyle.Fill({\r\n                color: '#fff'\r\n              })\r\n            })\r\n          })\r\n        ];\r\n      }\r\n    } else {\r\n      style = this.createStyle(layerStyle);\r\n    }\r\n    return style;\r\n  }\r\n\r\n  getLabel(feature, labelMatch): string {\r\n    let label = labelMatch;\r\n    const labelToGet = Array.from(labelMatch.matchAll(/\\$\\{([^\\{\\}]+)\\}/g));\r\n\r\n    labelToGet.forEach(v => {\r\n      label = label.replace(v[0], feature.get(v[1]));\r\n    });\r\n\r\n    // Nothing done? check feature's attribute\r\n    if (labelToGet.length === 0 && label === labelMatch) {\r\n      label = feature.get(labelMatch) || labelMatch;\r\n    }\r\n\r\n    return label;\r\n  }\r\n}\r\n","import OlLayer from 'ol/layer/Layer';\r\n\r\nimport { AnyLayer } from '../../layer/shared/layers/any-layer';\r\nimport { QueryableDataSource } from './query.interfaces';\r\n\r\n/**\r\n * Whether a layer is queryable\r\n * @param layer Layer\r\n * @returns True if the layer s squeryable\r\n */\r\nexport function layerIsQueryable(layer: AnyLayer): boolean {\r\n  const dataSource = layer.dataSource as QueryableDataSource;\r\n  return dataSource.options.queryable === true;\r\n}\r\n\r\n/**\r\n * Whether an OL layer is queryable\r\n * @param layer Layer\r\n * @returns True if the ol layer is queryable\r\n */\r\nexport function olLayerIsQueryable(olLayer: OlLayer): boolean {\r\n  const layer = olLayer.get('_layer');\r\n  return layer === undefined ? false : layerIsQueryable(layer);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\nimport { layerIsQueryable } from '../../query/shared/query.utils';\r\nimport { Layer, TooltipType } from '../shared/layers';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\n\r\n@Component({\r\n  selector: 'igo-layer-item',\r\n  templateUrl: './layer-item.component.html',\r\n  styleUrls: ['./layer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerItemComponent implements OnInit, OnDestroy {\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  inResolutionRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  queryBadgeHidden$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  tooltipText: string;\r\n\r\n  state: ConnectionState;\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendIfVisible: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() orderable: boolean = true;\r\n\r\n  @Input() lowerDisabled: boolean = false;\r\n\r\n  @Input() raiseDisabled: boolean = false;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  get removable(): boolean {\r\n    return this.layer.options.removable !== false;\r\n  }\r\n\r\n  get opacity() {\r\n    return this.layer.opacity * 100;\r\n  }\r\n  set opacity(opacity: number) {\r\n    this.layer.opacity = opacity / 100;\r\n  }\r\n\r\n  constructor(private networkService: NetworkService) {}\r\n\r\n  ngOnInit() {\r\n    if (\r\n      this.layer.visible &&\r\n      this.expandLegendIfVisible &&\r\n      this.layer.firstLoadComponent === true\r\n    ) {\r\n      this.layer.firstLoadComponent = false;\r\n      this.layer.legendCollapsed = false;\r\n    }\r\n    this.toggleLegend(this.layer.legendCollapsed);\r\n    this.updateQueryBadge();\r\n\r\n    const resolution$ = this.layer.map.viewController.resolution$;\r\n    this.resolution$$ = resolution$.subscribe(() => {\r\n      this.onResolutionChange();\r\n    });\r\n    this.tooltipText = this.computeTooltip();\r\n\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      this.state = state;\r\n      this.onResolutionChange();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.resolution$$.unsubscribe();\r\n  }\r\n\r\n  toggleLegend(collapsed: boolean) {\r\n    this.layer.legendCollapsed = collapsed;\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleLegendOnClick() {\r\n    this.toggleLegend(this.showLegend$.value);\r\n  }\r\n\r\n  toggleVisibility() {\r\n    this.layer.visible = !this.layer.visible;\r\n    if (this.toggleLegendOnVisibilityChange) {\r\n      this.toggleLegend(!this.layer.visible);\r\n    }\r\n    this.updateQueryBadge();\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    const layerOptions = this.layer.options;\r\n    if (!layerOptions.tooltip) {\r\n      return this.layer.title;\r\n    }\r\n    const layerTooltip = layerOptions.tooltip;\r\n    const layerMetadata = (layerOptions as MetadataLayerOptions).metadata;\r\n    switch (layerOptions.tooltip.type) {\r\n      case TooltipType.TITLE:\r\n        return this.layer.title;\r\n      case TooltipType.ABSTRACT:\r\n        if (layerMetadata && layerMetadata.abstract) {\r\n          return layerMetadata.abstract;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      case TooltipType.CUSTOM:\r\n        if (layerTooltip && layerTooltip.text) {\r\n          return layerTooltip.text;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      default:\r\n        return this.layer.title;\r\n    }\r\n  }\r\n\r\n  private onResolutionChange() {\r\n    const inResolutionRange = this.layer.isInResolutionsRange;\r\n    if (\r\n      inResolutionRange === false &&\r\n      this.updateLegendOnResolutionChange === true\r\n    ) {\r\n      this.toggleLegend(true);\r\n    }\r\n    this.inResolutionRange$.next(inResolutionRange);\r\n  }\r\n\r\n  private updateQueryBadge() {\r\n    const hidden =\r\n      this.queryBadge === false ||\r\n      this.layer.visible === false ||\r\n      !layerIsQueryable(this.layer);\r\n    this.queryBadgeHidden$.next(hidden);\r\n  }\r\n}\r\n","import { Component, Input, OnInit, OnDestroy, ChangeDetectionStrategy, ViewChildren, ElementRef, QueryList } from '@angular/core';\r\n\r\nimport { Subscription, BehaviorSubject, of, Observable } from 'rxjs';\r\n\r\nimport { Legend } from '../../datasource/shared/datasources/datasource.interface';\r\nimport { Layer, ItemStyleOptions } from '../shared/layers';\r\nimport { CapabilitiesService } from '../../datasource/shared/capabilities.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { LanguageService } from '@igo2/core';\r\n\r\n@Component({\r\n  selector: 'igo-layer-legend',\r\n  templateUrl: './layer-legend.component.html',\r\n  styleUrls: ['./layer-legend.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerLegendComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  /**\r\n   * Observable of the legend items\r\n   */\r\n  legendItems$: BehaviorSubject<Legend[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Subscription to the map's resolution\r\n   */\r\n  private resolution$$: Subscription;\r\n\r\n  /**\r\n   * The available styles\r\n   */\r\n  public styles;\r\n\r\n  /**\r\n   * The style used to make the legend\r\n   */\r\n  public currentStyle;\r\n\r\n  /**\r\n   * The scale used to make the legend\r\n   */\r\n  private scale: number = undefined;\r\n\r\n  /**\r\n   * Get list of images display\r\n   */\r\n  @ViewChildren('renderedLegend') renderedLegends: QueryList<ElementRef>;\r\n\r\n  /**\r\n   * List of size of images displayed\r\n   */\r\n  public imagesHeight: { [srcKey: string]: number } = {};\r\n\r\n  /**\r\n   * Layer\r\n   */\r\n  @Input() layer: Layer;\r\n\r\n  constructor(\r\n    private capabilitiesService: CapabilitiesService,\r\n    private languageService: LanguageService) {}\r\n\r\n  /**\r\n   * On init, subscribe to the map's resolution and update the legend accordingly\r\n   */\r\n  ngOnInit() {\r\n    let lastlLegend = this.layer.legend;\r\n    this.styles = this.listStyles();\r\n    const sourceOptions = this.layer.options.source.options as any;\r\n    if (\r\n      sourceOptions &&\r\n      sourceOptions.params &&\r\n      sourceOptions.params.STYLES) {\r\n      // if a styles is provided into the layers wms params\r\n      this.currentStyle = this.styles.find(style => style.name === sourceOptions.params.STYLES).name;\r\n    } else if (!this.layer.legend) {\r\n      // if no legend is manually provided\r\n      if (this.styles && this.styles.length > 1) {\r\n        this.currentStyle = this.styles[0].name;\r\n      }\r\n    } else if (this.styles && this.styles.length > 1) {\r\n      this.currentStyle = lastlLegend[0].currentStyle;\r\n    }\r\n\r\n    lastlLegend = this.layer.dataSource.getLegend(this.currentStyle, this.scale);\r\n    if (this.updateLegendOnResolutionChange === true) {\r\n      const resolution$ = this.layer.map.viewController.resolution$;\r\n      this.resolution$$ = resolution$.subscribe((resolution: number) => this.onResolutionChange(resolution));\r\n    } else if (lastlLegend.length !== 0) {\r\n      this.legendItems$.next(lastlLegend);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On destroy, unsubscribe to the map,s resolution\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.resolution$$ !== undefined) {\r\n      this.resolution$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  toggleLegendItem(collapsed: boolean, item: Legend) {\r\n    item.collapsed = collapsed;\r\n  }\r\n\r\n  private transfertToggleLegendItem(newLegends: Legend[]): Legend[] {\r\n    const outLegends: Legend[] = newLegends;\r\n    const lastLegends = this.layer.legend;\r\n    for (let i = 0; i < lastLegends.length; i++) {\r\n      outLegends[i].collapsed = lastLegends[i].collapsed;\r\n   }\r\n    return outLegends;\r\n  }\r\n\r\n  computeItemTitle(layerLegend): Observable<string> {\r\n    const layerOptions = this.layer.dataSource.options as any;\r\n    if (layerOptions.type !== 'wms') {\r\n      return of(layerLegend.title);\r\n    }\r\n\r\n    const layers = layerOptions.params.LAYERS.split(',');\r\n    const localLayerOptions = JSON.parse(JSON.stringify(layerOptions)); // to avoid to alter the original options.\r\n    localLayerOptions.params.LAYERS = layers.find(layer => layer === layerLegend.title);\r\n    return this.capabilitiesService\r\n      .getWMSOptions(localLayerOptions)\r\n      .pipe(map(wmsDataSourceOptions => {\r\n        return wmsDataSourceOptions._layerOptionsFromCapabilities.title;\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * On resolution change, compute the effective scale level and update the\r\n   * legend accordingly.\r\n   * @param resolution Map resolution\r\n   */\r\n  private onResolutionChange(resolution: number) {\r\n    this.scale = this.layer.map.viewController.getScale();\r\n    this.updateLegend();\r\n  }\r\n\r\n  /**\r\n   * Update the legend with scale level and style define\r\n   */\r\n  private updateLegend() {\r\n    let legendItems = this.layer.dataSource.getLegend(this.currentStyle, this.scale);\r\n    if (this.layer.legend && this.layer.legend.length > 1) { legendItems = this.transfertToggleLegendItem(legendItems); }\r\n    this.layer.legend = legendItems;\r\n\r\n    if (legendItems.length === 0 && this.legendItems$.value.length === 0) {\r\n      return;\r\n    }\r\n    this.legendItems$.next(legendItems);\r\n  }\r\n\r\n  private listStyles() {\r\n    const layerOptions = this.layer.options;\r\n    if (layerOptions && layerOptions.legendOptions) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.layer.legend.default');\r\n      const stylesAvailable =  [{ name: '', title } as ItemStyleOptions]\r\n        .concat(layerOptions.legendOptions.stylesAvailable.filter(sA => (\r\n          sA.name.normalize('NFD').replace(/[\\u0300-\\u036f]/gi, '') !== 'default' &&\r\n          sA.name.normalize('NFD').replace(/[\\u0300-\\u036f]/gi, '') !== 'defaut')));\r\n      stylesAvailable.map(s => s.title = s.title.charAt(0).toUpperCase() + s.title.slice(1).replace(/_/g, ' '));\r\n      return stylesAvailable;\r\n    }\r\n    return ;\r\n  }\r\n\r\n  onChangeStyle() {\r\n    this.updateLegend();\r\n    this.layer.dataSource.ol.updateParams({STYLES: this.currentStyle});\r\n  }\r\n\r\n  onLoadImage(id: string) {\r\n    let elemRef: HTMLImageElement;\r\n    if (this.renderedLegends.length === 1) {\r\n      elemRef = this.renderedLegends.first.nativeElement as HTMLImageElement;\r\n    } else {\r\n      elemRef = this.renderedLegends.find(renderedLegend => renderedLegend.nativeElement.id === id).nativeElement as HTMLImageElement;\r\n    }\r\n    this.imagesHeight[id] = elemRef.height;\r\n  }\r\n}\r\n","export enum LayerListControlsEnum {\r\n  always = 'always',\r\n  never = 'never',\r\n  default = 'default'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerListService {\r\n  public keyword: string;\r\n  public sortedAlpha = false;\r\n  public onlyVisible = false;\r\n  public onlyInRange = false;\r\n  public keywordInitialized = false;\r\n  public sortedAlphaInitialized = false;\r\n  public onlyVisibleInitialized = false;\r\n  public onlyInRangeInitialized = false;\r\n\r\n  constructor() {}\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef,\r\n  ContentChild,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { Layer } from '../shared';\r\nimport { LayerListControlsEnum } from './layer-list.enum';\r\nimport { LayerListService } from './layer-list.service';\r\nimport {\r\n  BehaviorSubject,\r\n  ReplaySubject,\r\n  Subscription,\r\n  EMPTY,\r\n  timer\r\n} from 'rxjs';\r\nimport { debounce } from 'rxjs/operators';\r\nimport {\r\n  MetadataOptions,\r\n  MetadataLayerOptions\r\n} from '../../metadata/shared/metadata.interface';\r\n\r\n// TODO: This class could use a clean up. Also, some methods could be moved ealsewhere\r\n@Component({\r\n  selector: 'igo-layer-list',\r\n  templateUrl: './layer-list.component.html',\r\n  styleUrls: ['./layer-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerListComponent implements OnInit, OnDestroy {\r\n  orderable = true;\r\n  thresholdToFilterAndSort = 5;\r\n\r\n  layers$: BehaviorSubject<Layer[]> = new BehaviorSubject([]);\r\n\r\n  change$ = new ReplaySubject<void>(1);\r\n\r\n  showToolbar$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private change$$: Subscription;\r\n\r\n  @ContentChild('igoLayerItemToolbar') templateLayerToolbar: TemplateRef<any>;\r\n\r\n  @Input() layersAreAllVisible: boolean = true;\r\n\r\n  @Input() layersAreAllInRange: boolean = true;\r\n\r\n  @Input()\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.next();\r\n  }\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  private _layers: Layer[];\r\n\r\n  @Input() floatLabel: FloatLabelType = 'auto';\r\n\r\n  @Input() layerFilterAndSortOptions: any = {};\r\n\r\n  @Input() excludeBaseLayers: boolean = false;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendOfVisibleLayers: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  get keyword(): string {\r\n    return this.layerListService.keyword;\r\n  }\r\n  set keyword(value: string) {\r\n    this.layerListService.keyword = value;\r\n    this.next();\r\n  }\r\n\r\n  get keywordInitialized(): boolean {\r\n    return this.layerListService.keywordInitialized;\r\n  }\r\n  set keywordInitialized(value: boolean) {\r\n    this.layerListService.keywordInitialized = value;\r\n  }\r\n\r\n  get onlyVisible(): boolean {\r\n    return this.layerListService.onlyVisible;\r\n  }\r\n  set onlyVisible(value: boolean) {\r\n    this.layerListService.onlyVisible = value;\r\n    this.next();\r\n  }\r\n\r\n  get onlyVisibleInitialized(): boolean {\r\n    return this.layerListService.onlyVisibleInitialized;\r\n  }\r\n  set onlyVisibleInitialized(value: boolean) {\r\n    this.layerListService.onlyVisibleInitialized = value;\r\n  }\r\n\r\n  get onlyInRange(): boolean {\r\n    return this.layerListService.onlyInRange;\r\n  }\r\n  set onlyInRange(value: boolean) {\r\n    this.layerListService.onlyInRange = value;\r\n    this.next();\r\n  }\r\n\r\n  get onlyInRangeInitialized(): boolean {\r\n    return this.layerListService.onlyInRangeInitialized;\r\n  }\r\n  set onlyInRangeInitialized(value: boolean) {\r\n    this.layerListService.onlyInRangeInitialized = value;\r\n  }\r\n\r\n  get sortedAlpha(): boolean {\r\n    return this.layerListService.sortedAlpha;\r\n  }\r\n  set sortedAlpha(value: boolean) {\r\n    this.layerListService.sortedAlpha = value;\r\n    this.next();\r\n  }\r\n\r\n  get sortedAlphaInitialized(): boolean {\r\n    return this.layerListService.sortedAlphaInitialized;\r\n  }\r\n  set sortedAlphaInitialized(value: boolean) {\r\n    this.layerListService.sortedAlphaInitialized = value;\r\n  }\r\n\r\n  constructor(private layerListService: LayerListService) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.change$$ = this.change$\r\n      .pipe(\r\n        debounce(() => {\r\n          return this.layers.length === 0 ? EMPTY : timer(50);\r\n        })\r\n      )\r\n      .subscribe(() => {\r\n        this.showToolbar$.next(this.computeShowToolbar());\r\n        this.layers$.next(this.computeLayers(this.layers.slice(0)));\r\n      });\r\n\r\n    this.initLayerFilterAndSortOptions();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change$$.unsubscribe();\r\n  }\r\n\r\n  toggleOnlyVisible() {\r\n    this.onlyVisible = !this.onlyVisible;\r\n  }\r\n\r\n  toggleOnlyInRange() {\r\n    this.onlyInRange = !this.onlyInRange;\r\n  }\r\n\r\n  toggleSort(sortAlpha: boolean) {\r\n    this.sortedAlpha = sortAlpha;\r\n  }\r\n\r\n  clearKeyword() {\r\n    this.keyword = undefined;\r\n  }\r\n\r\n  getLowerLayer() {\r\n    return this.layers\r\n      .filter(l => !l.baseLayer)\r\n      .reduce(\r\n        (prev, current) => {\r\n          return prev.zIndex < current.zIndex ? prev : current;\r\n        },\r\n        { zIndex: undefined, id: undefined }\r\n      );\r\n  }\r\n\r\n  getUpperLayer() {\r\n    return this.layers\r\n      .filter(l => !l.baseLayer)\r\n      .reduce(\r\n        (prev, current) => {\r\n          return prev.zIndex > current.zIndex ? prev : current;\r\n        },\r\n        { zIndex: undefined, id: undefined }\r\n      );\r\n  }\r\n\r\n  private next() {\r\n    this.change$.next();\r\n  }\r\n\r\n  private computeLayers(layers: Layer[]): Layer[] {\r\n    let layersOut = this.filterLayers(layers);\r\n    if (this.sortedAlpha) {\r\n      layersOut = this.sortLayersByTitle(layersOut);\r\n    } else {\r\n      layersOut = this.sortLayersByZindex(layersOut);\r\n    }\r\n    return layersOut;\r\n  }\r\n\r\n  private filterLayers(layers: Layer[]): Layer[] {\r\n    const keyword = this.keyword;\r\n    if (\r\n      this.layerFilterAndSortOptions.showToolbar === LayerListControlsEnum.never\r\n    ) {\r\n      return layers;\r\n    }\r\n    if (!keyword && !this.onlyInRange && !this.onlyVisible) {\r\n      return layers;\r\n    }\r\n\r\n    const keepLayerIds = layers.map((layer: Layer) => layer.id);\r\n\r\n    layers.forEach((layer: Layer) => {\r\n      const layerOptions = (layer.options as MetadataLayerOptions) || {};\r\n      const dataSourceOptions = layer.dataSource.options || {};\r\n      const metadata = layerOptions.metadata || ({} as MetadataOptions);\r\n      const keywords = metadata.keywordList || [];\r\n      const layerKeywords = keywords.map((kw: string) => {\r\n        return kw.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      });\r\n\r\n      if (keyword) {\r\n        const localKeyword = keyword\r\n          .normalize('NFD')\r\n          .replace(/[\\u0300-\\u036f]/g, '');\r\n        const layerTitle = layer.title\r\n          .normalize('NFD')\r\n          .replace(/[\\u0300-\\u036f]/g, '');\r\n        const dataSourceType = dataSourceOptions.type || '';\r\n        const keywordRegex = new RegExp(localKeyword, 'gi');\r\n        const keywordInList =\r\n          layerKeywords.find((kw: string) => keywordRegex.test(kw)) !==\r\n          undefined;\r\n        if (\r\n          !keywordRegex.test(layerTitle) &&\r\n          !(keyword.toLowerCase() === dataSourceType.toLowerCase()) &&\r\n          !keywordInList\r\n        ) {\r\n          const index = keepLayerIds.indexOf(layer.id);\r\n          if (index > -1) {\r\n            keepLayerIds.splice(index, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.onlyVisible && layer.visible === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (this.onlyInRange && layer.isInResolutionsRange === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n    });\r\n\r\n    return layers.filter(\r\n      (layer: Layer) => keepLayerIds.indexOf(layer.id) !== -1\r\n    );\r\n  }\r\n\r\n  private sortLayersByZindex(layers: Layer[]) {\r\n    return layers.sort((layer1, layer2) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  private sortLayersByTitle(layers: Layer[]) {\r\n    return layers.sort((a, b) => {\r\n      if (a.title < b.title) {\r\n        return -1;\r\n      }\r\n      if (a.title > b.title) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  private computeShowToolbar(): boolean {\r\n    switch (this.layerFilterAndSortOptions.showToolbar) {\r\n      case LayerListControlsEnum.always:\r\n        return true;\r\n      case LayerListControlsEnum.never:\r\n        return false;\r\n      default:\r\n        if (\r\n          this.layers.length >= this.thresholdToFilterAndSort ||\r\n          this.keyword ||\r\n          this.onlyInRange ||\r\n          this.onlyVisible\r\n        ) {\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private initLayerFilterAndSortOptions() {\r\n    if (this.layerFilterAndSortOptions.toolbarThreshold) {\r\n      this.thresholdToFilterAndSort = this.layerFilterAndSortOptions.toolbarThreshold;\r\n    }\r\n\r\n    if (this.layerFilterAndSortOptions.keyword && !this.keywordInitialized) {\r\n      this.keyword = this.layerFilterAndSortOptions.keyword;\r\n      this.keywordInitialized = true;\r\n    }\r\n    if (\r\n      this.layerFilterAndSortOptions.sortedAlpha &&\r\n      !this.sortedAlphaInitialized\r\n    ) {\r\n      this.sortedAlpha = this.layerFilterAndSortOptions.sortedAlpha;\r\n      this.sortedAlphaInitialized = true;\r\n    }\r\n    if (\r\n      this.layerFilterAndSortOptions.onlyVisible &&\r\n      !this.onlyVisibleInitialized &&\r\n      !this.layersAreAllVisible\r\n    ) {\r\n      this.onlyVisible = this.layerFilterAndSortOptions.onlyVisible;\r\n      this.onlyVisibleInitialized = true;\r\n    }\r\n    if (\r\n      this.layerFilterAndSortOptions.onlyInRange &&\r\n      !this.onlyInRangeInitialized &&\r\n      !this.layersAreAllInRange\r\n    ) {\r\n      this.onlyInRange = this.layerFilterAndSortOptions.onlyInRange;\r\n      this.onlyInRangeInitialized = true;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IgoMap } from './map';\r\n\r\n/**\r\n * MapService\r\n *\r\n * This service tracks the IgoMap instance, if any.\r\n * Currently, only one map instance is supported\r\n * but support for multiple maps may be added in the future.\r\n * This will impact other services such as the OverlayService\r\n * because these maps won't be sharing overlayed features.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MapService {\r\n  private map: IgoMap;\r\n\r\n  constructor() {}\r\n\r\n  getMap(): IgoMap {\r\n    return this.map;\r\n  }\r\n\r\n  setMap(map: IgoMap) {\r\n    this.map = map;\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy, AfterViewInit, Optional } from '@angular/core';\r\nimport { Subscription, combineLatest } from 'rxjs';\r\n\r\nimport { RouteService } from '@igo2/core';\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { LayerListComponent } from './layer-list.component';\r\nimport { LayerListService } from './layer-list.service';\r\nimport { Layer } from '../shared/layers/layer';\r\nimport { map, debounceTime } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[igoLayerListBinding]'\r\n})\r\nexport class LayerListBindingDirective implements OnInit, AfterViewInit, OnDestroy {\r\n  private component: LayerListComponent;\r\n  private layersOrResolutionChange$$: Subscription;\r\n  layersVisibility$$: Subscription;\r\n  layersRange$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: LayerListComponent,\r\n    private mapService: MapService,\r\n    private layerListService: LayerListService,\r\n    @Optional() private route: RouteService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n    this.layersOrResolutionChange$$ = combineLatest([\r\n      this.mapService.getMap().layers$,\r\n      this.mapService.getMap().viewController.resolution$]\r\n    ).pipe(\r\n      debounceTime(10)\r\n    ).subscribe((bunch: [Layer[], number]) => {\r\n      const shownLayers = bunch[0].filter((layer: Layer) => {\r\n        return layer.showInLayerList === true;\r\n      });\r\n      this.component.layers = shownLayers;\r\n      this.setLayersVisibilityRangeStatus(shownLayers, this.component.excludeBaseLayers);\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.initRoutes();\r\n  }\r\n\r\n  private setLayersVisibilityRangeStatus(layers: Layer[], excludeBaseLayers: boolean) {\r\n    if (this.layersVisibility$$ !== undefined) {\r\n      this.layersVisibility$$.unsubscribe();\r\n      this.layersVisibility$$ = undefined;\r\n    }\r\n    if (this.layersRange$$ !== undefined) {\r\n      this.layersRange$$.unsubscribe();\r\n      this.layersRange$$ = undefined;\r\n    }\r\n    this.layersVisibility$$ = combineLatest(layers\r\n      .filter(layer => layer.baseLayer !== excludeBaseLayers )\r\n      .map((layer: Layer) => layer.visible$))\r\n      .pipe(map((visibles: boolean[]) => visibles.every(Boolean)))\r\n      .subscribe((allLayersAreVisible: boolean) =>\r\n        this.component.layersAreAllVisible = allLayersAreVisible);\r\n\r\n    this.layersRange$$ = combineLatest(layers.map((layer: Layer) => layer.isInResolutionsRange$))\r\n      .pipe(map((inrange: boolean[]) => inrange.every(Boolean)))\r\n      .subscribe((layersAreAllInRange: boolean) =>\r\n      this.component.layersAreAllInRange = layersAreAllInRange);\r\n  }\r\n\r\n  private initRoutes() {\r\n    if (\r\n      this.route &&\r\n      (this.route.options.llcKKey || this.route.options.llcAKey ||\r\n        this.route.options.llcVKey || this.route.options.llcVKey)) {\r\n      this.route.queryParams.subscribe(params => {\r\n\r\n        const keywordFromUrl = params[this.route.options.llcKKey as string];\r\n        const sortedAplhaFromUrl = params[this.route.options.llcAKey as string];\r\n        const onlyVisibleFromUrl = params[this.route.options.llcVKey as string];\r\n        const onlyInRangeFromUrl = params[this.route.options.llcRKey as string];\r\n        if (keywordFromUrl && !this.layerListService.keywordInitialized) {\r\n          this.layerListService.keyword = keywordFromUrl;\r\n          this.layerListService.keywordInitialized = true;\r\n        }\r\n        if (sortedAplhaFromUrl && !this.layerListService.sortedAlphaInitialized) {\r\n          this.layerListService.sortedAlpha = sortedAplhaFromUrl === '1' ? true : false;\r\n          this.layerListService.sortedAlphaInitialized = true;\r\n        }\r\n        if (onlyVisibleFromUrl &&\r\n          !this.layerListService.onlyVisibleInitialized &&\r\n          !this.component.layersAreAllVisible) {\r\n          this.layerListService.onlyVisible = onlyVisibleFromUrl === '1' ? true : false;\r\n          this.layerListService.onlyVisibleInitialized = true;\r\n        }\r\n        if (onlyInRangeFromUrl &&\r\n          !this.layerListService.onlyInRangeInitialized &&\r\n          !this.component.layersAreAllInRange) {\r\n          this.layerListService.onlyInRange = onlyInRangeFromUrl === '1' ? true : false;\r\n          this.layerListService.onlyInRangeInitialized = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layersOrResolutionChange$$.unsubscribe();\r\n    if (this.layersVisibility$$ !== undefined) {\r\n      this.layersVisibility$$.unsubscribe();\r\n      this.layersVisibility$$ = undefined;\r\n    }\r\n    if (this.layersRange$$ !== undefined) {\r\n      this.layersRange$$.unsubscribe();\r\n      this.layersRange$$ = undefined;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\n\r\nimport { Layer, VectorLayer } from '../shared/layers';\r\nimport { VectorLayerOptions } from '../shared/layers/vector-layer.interface';\r\n\r\n@Component({\r\n  selector: 'igo-track-feature-button',\r\n  templateUrl: './track-feature-button.component.html',\r\n  styleUrls: ['./track-feature-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TrackFeatureButtonComponent implements OnInit {\r\n\r\n  @Input() layer: VectorLayer;\r\n\r\n  @Input() trackFeature = false;\r\n\r\n  get options(): VectorLayerOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.options;\r\n  }\r\n\r\n  public color: string = 'primary';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.color = this.trackFeature ? 'primary' : 'basic';\r\n  }\r\n\r\n  toggleTrackFeature() {\r\n    if (this.trackFeature) {\r\n      this.layer.disableTrackFeature(this.layer.options.trackFeature);\r\n      this.color = 'basic';\r\n    } else {\r\n      this.layer.enableTrackFeature(this.layer.options.trackFeature);\r\n      this.color = 'primary';\r\n    }\r\n    this.trackFeature = !this.trackFeature;\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\n\r\nimport { EntityStoreStrategy } from '@igo2/common';\r\n\r\nimport { FeatureMotion } from '../feature.enums';\r\nimport { Feature, FeatureStoreLoadingStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\n\r\n/**\r\n * This strategy loads a store's features into it's layer counterpart.\r\n * The store -> layer binding is a one-way binding. That means any entity\r\n * added to the store will be added to the layer but the opposite is false.\r\n *\r\n * Important: This strategy observes filtered entities, not raw entities. This\r\n * is not configurable yet.\r\n */\r\nexport class FeatureStoreLoadingStrategy extends EntityStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's features\r\n   */\r\n  private stores$$ = new Map<FeatureStore, Subscription>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.active === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.active === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for entities changes in a store.\r\n   * Important: Never observe a store's sorted entities. It makes no sense\r\n   * to display sorted entities (instead of unsorted) on a layer and it\r\n   * would potentially result in a lot of useless computation.\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    const subscription = store.view.all$()\r\n      .subscribe((features: Feature[]) => this.onFeaturesChange(features, store));\r\n    this.stores$$.set(store, subscription);\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in a store.\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const subscription = this.stores$$.get(store);\r\n    if (subscription !== undefined) {\r\n      subscription.unsubscribe();\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, Subscription]) => {\r\n      entries[1].unsubscribe();\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features into a layer or clear the layer if the array of features is empty.\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onFeaturesChange(features: Feature[], store: FeatureStore) {\r\n    if (features.length === 0) {\r\n      store.clearLayer();\r\n    } else {\r\n      store.setLayerFeatures(\r\n        features,\r\n        this.selectMotion(store),\r\n        this.options.viewScale,\r\n        this.options.areaRatio,\r\n        this.options.getFeatureId\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the best motion\r\n   * @param store A FeatureStore to apply the motion\r\n   * @returns The motion selected\r\n   */\r\n  private selectMotion(store: FeatureStore) {\r\n    if (this.options.motion !== undefined) { return this.options.motion; }\r\n\r\n    if (store.pristine === true) {\r\n      // If features have just been loaded into the store, move/zoom on them\r\n      return FeatureMotion.Default;\r\n    } else if (store.count > store.view.count) {\r\n      // If features have been filtered, move/zoom on the remaining ones\r\n      return FeatureMotion.Default;\r\n    } else {\r\n      // On insert, update or delete, do nothing\r\n      return FeatureMotion.None;\r\n    }\r\n  }\r\n}\r\n","import { unByKey } from 'ol/Observable';\r\nimport { OlEvent } from 'ol/events/Event';\r\n\r\nimport { EntityStoreStrategy } from '@igo2/common';\r\n\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreLoadingLayerStrategyOptions } from '../feature.interfaces';\r\n\r\n/**\r\n * This strategy loads a layer's features into it's store counterpart.\r\n * The layer -> store binding is a one-way binding. That means any OL feature\r\n * added to the layer will be added to the store but the opposite is false.\r\n *\r\n * Important: In it's current state, this strategy is to meant to be combined\r\n * with a standard Loading strategy and it would probably cause recursion issues.\r\n */\r\nexport class FeatureStoreLoadingLayerStrategy extends EntityStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's OL source changes\r\n   */\r\n  private stores$$ = new Map<FeatureStore, string>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingLayerStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.active === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.active === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for a store's  OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    this.onSourceChanges(store);\r\n    const olSource = store.layer.ol.getSource();\r\n    olSource.on('change', (event: OlEvent) => {\r\n      this.onSourceChanges(store);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop watching for a store's OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const key = this.stores$$.get(store);\r\n    if (key !== undefined) {\r\n      unByKey(key);\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for OL source changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, string]) => {\r\n      unByKey(entries[1]);\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features from an OL source into a  store or clear the store if the source is empty\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onSourceChanges(store: FeatureStore) {\r\n    const olFeatures = store.layer.ol.getSource().getFeatures();\r\n    if (olFeatures.length === 0) {\r\n      store.clear();\r\n    } else {\r\n      store.setStoreOlFeatures(olFeatures);\r\n    }\r\n  }\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  getEntityId,\r\n  EntityKey,\r\n  EntityStore\r\n} from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { FeatureMotion } from './feature.enums';\r\nimport { Feature, FeatureStoreOptions } from './feature.interfaces';\r\nimport { computeOlFeaturesDiff, featureFromOl, featureToOl, moveToOlFeatures } from './feature.utils';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * features and the map layer to display them on. Synchronization\r\n * between the store and the layer is handled by strategies.\r\n */\r\nexport class FeatureStore<T extends Feature = Feature> extends EntityStore<T> {\r\n\r\n  /**\r\n   * Vector layer to display the features on\r\n   */\r\n  layer: VectorLayer;\r\n\r\n  /**\r\n   * The map the layer is bound to\r\n   */\r\n  readonly map: IgoMap;\r\n\r\n  /**\r\n   * The layer's data source\r\n   */\r\n  get source(): FeatureDataSource {\r\n    return this.layer ? this.layer.dataSource as FeatureDataSource : undefined;\r\n  }\r\n\r\n  constructor(entities: T[], options: FeatureStoreOptions) {\r\n    super(entities, options);\r\n    this.map = options.map;\r\n  }\r\n\r\n  /**\r\n   * Bind this store to a vector layer\r\n   * @param layer Vector layer\r\n   * @returns Feature store\r\n   */\r\n  bindLayer(layer: VectorLayer): FeatureStore {\r\n    this.layer = layer;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible. Strategies\r\n   * make extensive use of that method.\r\n   * @param features Features\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  setLayerFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number,\r\n    getId?: (Feature) => EntityKey\r\n  ) {\r\n    getId = getId ? getId : getEntityId;\r\n    this.checkLayer();\r\n\r\n    const olFeatures = features\r\n      .map((feature: Feature) => featureToOl(feature, this.map.projection, getId));\r\n    this.setLayerOlFeatures(olFeatures, motion, viewScale, areaRatio);\r\n  }\r\n\r\n  /**\r\n   * Set the store's features from an array of OL features.\r\n   * @param olFeatures Ol features\r\n   */\r\n  setStoreOlFeatures(olFeatures: OlFeature[]) {\r\n    this.checkLayer();\r\n\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n      return featureFromOl(olFeature, this.layer.map.projection);\r\n    });\r\n    this.load(features as T[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the layer\r\n   */\r\n  clearLayer() {\r\n    this.checkLayer();\r\n    this.source.ol.clear();\r\n  }\r\n\r\n  /**\r\n   * Check wether a layer is bound or not and throw an error if not.\r\n   */\r\n  private checkLayer() {\r\n    if (this.layer === undefined) {\r\n      throw new Error('This FeatureStore is not bound to a layer.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible.\r\n   * @param features Openlayers feature objects\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  private setLayerOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number\r\n  ) {\r\n    const olSource = this.layer.ol.getSource();\r\n    const diff = computeOlFeaturesDiff(olSource.getFeatures(), olFeatures);\r\n    if (diff.remove.length > 0) {\r\n      this.removeOlFeaturesFromLayer(diff.remove);\r\n    }\r\n\r\n    if (diff.add.length > 0) {\r\n      this.addOlFeaturesToLayer(diff.add);\r\n    }\r\n\r\n    if (diff.add.length > 0) {\r\n      // If features are added, do a motion toward the newly added features\r\n      moveToOlFeatures(this.map, diff.add, motion, viewScale, areaRatio);\r\n    } else if (diff.remove.length > 0) {\r\n      // Else, do a motion toward all the features\r\n      moveToOlFeatures(this.map, olFeatures, motion, viewScale, areaRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add features to the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private addOlFeaturesToLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n    });\r\n    this.source.ol.addFeatures(olFeatures);\r\n  }\r\n\r\n  /**\r\n   * Remove features from the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private removeOlFeaturesFromLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      this.source.ol.removeFeature(olFeature);\r\n    });\r\n  }\r\n\r\n}\r\n","import OlFeature from 'ol/Feature';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { DragBoxEvent as OlDragBoxEvent } from 'ol/interaction/DragBox';\r\nimport { ListenerFunction } from 'ol/events';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subscription, combineLatest } from 'rxjs';\r\nimport { map, debounceTime, skip } from 'rxjs/operators';\r\n\r\nimport { EntityKey, EntityRecord, EntityStoreStrategy } from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../../datasource';\r\nimport { VectorLayer } from '../../../layer';\r\nimport { IgoMap, ctrlKeyDown } from '../../../map';\r\n\r\nimport { Feature, FeatureStoreSelectionStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureMotion } from '../feature.enums';\r\n\r\nclass OlDragSelectInteraction extends OlDragBoxInteraction {\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n}\r\n\r\n/**\r\n * This strategy synchronizes a store and a layer selected entities.\r\n * The store <-> layer binding is a two-way binding.\r\n *\r\n * In many cases, a single strategy bound to multiple stores\r\n * will yield better results that multiple strategies with each their\r\n * own store. In the latter scenario, a click on overlapping features\r\n * would trigger the strategy of each layer and they would cancel\r\n * each other as well as move the map view around needlessly.\r\n */\r\nexport class FeatureStoreSelectionStrategy extends EntityStoreStrategy {\r\n\r\n  /**\r\n   * Listener to the map click event that allows selecting a feature\r\n   * by clicking on the map\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  private olDragSelectInteraction: OlDragSelectInteraction;\r\n\r\n  private olDragSelectInteractionEndKey: string;\r\n\r\n  /**\r\n   * Subscription to all stores selected entities\r\n   */\r\n  private stores$$: Subscription;\r\n\r\n  /**\r\n   * The map the layers belong to\r\n   */\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  /**\r\n   * A feature store that'll contain the selected features. It has it's own\r\n   * layer, shared by all the stores this staretgy is bound to.\r\n   */\r\n  get overlayStore(): FeatureStore { return this._overlayStore; }\r\n  private _overlayStore: FeatureStore;\r\n\r\n  constructor(protected options: FeatureStoreSelectionStrategyOptions) {\r\n    super(options);\r\n    this._overlayStore = this.createOverlayStore();\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.active === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.active === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all entities, from all stores\r\n   */\r\n  unselectAll() {\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      store.state.updateAll({selected: false});\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.overlayStore.clear();\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer, setup the map click lsitener and\r\n   * start watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.addOverlayLayer();\r\n    this.listenToMapClick();\r\n    if (this.options.dragBox === true) {\r\n      this.addDragBoxInteraction();\r\n    }\r\n    this.watchAll();\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer, remove the map click lsitener and\r\n   * stop watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unlistenToMapClick();\r\n    this.removeDragBoxInteraction();\r\n    this.unwatchAll();\r\n    this.removeOverlayLayer();\r\n  }\r\n\r\n  /**\r\n   * Create a single observable of all the stores. With a single observable,\r\n   * features can be added all at once to the overlay layer and a single\r\n   * motion can be performed. Multiple observable would have\r\n   * a cancelling effect on each other.\r\n   */\r\n  private watchAll() {\r\n    this.unwatchAll();\r\n\r\n    const stores$ = this.stores.map((store: FeatureStore) => {\r\n      return store.stateView.manyBy$((record: EntityRecord<Feature>) => {\r\n        return record.state.selected === true;\r\n      }).pipe(\r\n        map((records: EntityRecord<Feature>[]) => records.map(record => record.entity))\r\n      );\r\n    });\r\n    this.stores$$ = combineLatest(...stores$)\r\n      .pipe(\r\n        debounceTime(5),\r\n        skip(1), // Skip intial selection\r\n        map((features: Array<Feature[]>) => features.reduce((a, b) => a.concat(b)))\r\n      ).subscribe((features: Feature[]) => this.onSelectFromStore(features));\r\n  }\r\n\r\n  /**\r\n   * Stop watching for selection in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    if (this.stores$$ !== undefined) {\r\n      this.stores$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a 'singleclick' listener to the map that'll allow selecting\r\n   * features by clicking on the map. The selection will be performed\r\n   * only on the layers bound to this strategy.\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on('singleclick', (event: OlMapBrowserPointerEvent) => {\r\n      this.onMapClick(event);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the map click listener\r\n   */\r\n  private unlistenToMapClick() {\r\n    if (this.mapClickListener !== undefined) {\r\n      this.map.ol.un(\r\n        this.mapClickListener.type,\r\n        this.mapClickListener.listener\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On map click, select feature at pixel\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onMapClick(event: OlMapBrowserPointerEvent) {\r\n    const exclusive = !ctrlKeyDown(event);\r\n    const reverse = !exclusive;\r\n    const olFeatures = event.map.getFeaturesAtPixel(event.pixel, {\r\n      hitTolerance: this.options.hitTolerance || 0,\r\n      layerFilter: (olLayer) => {\r\n        const storeOlLayer = this.stores.find((store: FeatureStore) => {\r\n          return store.layer.ol === olLayer;\r\n        });\r\n        return storeOlLayer !== undefined;\r\n      }\r\n    });\r\n    this.onSelectFromMap(olFeatures, exclusive, reverse);\r\n  }\r\n\r\n  /**\r\n   * Add a drag box interaction and, on drag box end, select features\r\n   */\r\n  private addDragBoxInteraction() {\r\n    let olDragSelectInteraction;\r\n    const olInteractions = this.map.ol.getInteractions().getArray();\r\n\r\n    // There can only be one dragbox interaction, so find the current one, if any\r\n    // Don't keep a reference to the current dragbox because we don't want\r\n    // to remove it when this startegy is deactivated\r\n    for (const olInteraction of olInteractions) {\r\n      if (olInteraction instanceof OlDragSelectInteraction) {\r\n        olDragSelectInteraction = olInteraction;\r\n        break;\r\n      }\r\n    }\r\n    // If no drag box interaction is found, create a new one and add it to the map\r\n    if (olDragSelectInteraction === undefined) {\r\n      olDragSelectInteraction = new OlDragSelectInteraction({\r\n        condition: ctrlKeyDown\r\n      });\r\n      this.map.ol.addInteraction(olDragSelectInteraction);\r\n      this.olDragSelectInteraction = olDragSelectInteraction;\r\n    }\r\n\r\n    this.olDragSelectInteractionEndKey = olDragSelectInteraction.on(\r\n      'boxend',\r\n      (event: OlMapBrowserPointerEvent) => this.onDragBoxEnd(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove drag box interaction\r\n   */\r\n  private removeDragBoxInteraction() {\r\n    if (this.olDragSelectInteractionEndKey !== undefined) {\r\n      unByKey(this.olDragSelectInteractionEndKey);\r\n    }\r\n    if (this.olDragSelectInteraction !== undefined) {\r\n      this.map.ol.removeInteraction(this.olDragSelectInteraction);\r\n    }\r\n    this.olDragSelectInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * On dragbox end, select features in drag box\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onDragBoxEnd(event: OlDragBoxEvent) {\r\n    const exclusive = !ctrlKeyDown(event.mapBrowserEvent);\r\n    const extent = event.target.getGeometry().getExtent();\r\n    const olFeatures = this.stores.reduce((acc: OlFeature[], store: FeatureStore) => {\r\n      const olSource = store.layer.ol.getSource();\r\n      acc.push(...olSource.getFeaturesInExtent(extent));\r\n      return acc;\r\n    }, []);\r\n    this.onSelectFromMap(olFeatures, exclusive, false);\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the store, add\r\n   * them to this startegy's overlay layer (select on map)\r\n   * @param features Store features\r\n   */\r\n  private onSelectFromStore(features: Feature[]) {\r\n    const motion = this.options ? this.options.motion : undefined;\r\n    const olOverlayFeatures = this.overlayStore.layer.ol.getSource().getFeatures();\r\n    const overlayFeaturesKeys = olOverlayFeatures.map((olFeature: OlFeature) => olFeature.getId());\r\n    const featuresKeys = features.map(this.overlayStore.getKey);\r\n\r\n    let doMotion;\r\n    if (features.length === 0) {\r\n      doMotion = false;\r\n    } else {\r\n      doMotion = overlayFeaturesKeys.length !== featuresKeys.length ||\r\n        !overlayFeaturesKeys.every((key: EntityKey) => featuresKeys.indexOf(key) >= 0);\r\n    }\r\n\r\n    this.overlayStore.setLayerFeatures(\r\n      features,\r\n      doMotion ? motion : FeatureMotion.None,\r\n      this.options.viewScale,\r\n      this.options.areaRatio,\r\n      this.options.getFeatureId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the map, also select them\r\n   * in their store.\r\n   * @param olFeatures OL feature objects\r\n   */\r\n  private onSelectFromMap(olFeatures: OlFeature[], exclusive: boolean, reverse: boolean) {\r\n    const groupedFeatures = this.groupFeaturesByStore(olFeatures);\r\n\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      const features = groupedFeatures.get(store);\r\n      if (features === undefined && exclusive === true) {\r\n        this.unselectAllFeaturesFromStore(store);\r\n      } else if (features === undefined && exclusive === false) {\r\n        // Do nothing\r\n      } else {\r\n        this.selectFeaturesFromStore(store, features, exclusive, reverse);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select features in store\r\n   * @param store: Feature store\r\n   * @param features Features\r\n   */\r\n  private selectFeaturesFromStore(store: FeatureStore, features: Feature[], exclusive: boolean, reverse: boolean) {\r\n    if (reverse === true) {\r\n      store.state.reverseMany(features, ['selected']);\r\n    } else {\r\n      store.state.updateMany(features, {selected: true}, exclusive);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all features from store\r\n   * @param store: Feature store\r\n   */\r\n  private unselectAllFeaturesFromStore(store: FeatureStore) {\r\n    store.state.updateAll({selected: false});\r\n  }\r\n\r\n  /**\r\n   * This method returns a store -> features mapping from a list\r\n   * of OL selected features. OL features keep a reference to the store\r\n   * they are from.\r\n   * @param olFeatures: OL feature objects\r\n   * @returns Store -> features mapping\r\n   */\r\n  private groupFeaturesByStore(olFeatures: OlFeature[]): Map<FeatureStore, Feature[]> {\r\n    const groupedFeatures = new Map<FeatureStore, Feature[]>();\r\n    if (olFeatures === null || olFeatures === undefined) {\r\n      return groupedFeatures;\r\n    }\r\n\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      const store = olFeature.get('_featureStore');\r\n      if (store === undefined) { return; }\r\n\r\n      let features = groupedFeatures.get(store);\r\n      if (features === undefined) {\r\n        features = [];\r\n        groupedFeatures.set(store, features);\r\n      }\r\n\r\n      const feature = store.get(olFeature.getId());\r\n      if (feature !== undefined) {\r\n        features.push(feature);\r\n      }\r\n    });\r\n\r\n    return groupedFeatures;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay store\r\n   */\r\n  private createOverlayStore(): FeatureStore {\r\n    const overlayLayer = this.options.layer\r\n      ? this.options.layer\r\n      : this.createOverlayLayer();\r\n    return new FeatureStore([], {map: this.map}).bindLayer(overlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay layer\r\n   */\r\n  private createOverlayLayer(): VectorLayer {\r\n    return new VectorLayer({\r\n      zIndex: 300,\r\n      source: new FeatureDataSource(),\r\n      style: undefined,\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay store's layer to the map to display the selected\r\n   * features.\r\n   */\r\n  private addOverlayLayer() {\r\n    if (this.overlayStore.layer.map === undefined) {\r\n      this.map.addLayer(this.overlayStore.layer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer from the map\r\n   */\r\n  private removeOverlayLayer() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.map.removeLayer(this.overlayStore.layer);\r\n  }\r\n}\r\n","import * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlGeometryLayout from 'ol/geom/GeometryLayout';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlPoint from 'ol/geom/Point';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlRenderFeature from 'ol/render/Feature';\r\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport OlLayer from 'ol/layer/Layer';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport {\r\n  EntityKey,\r\n  getEntityId,\r\n  getEntityTitle,\r\n  getEntityRevision,\r\n  getEntityIcon,\r\n  getEntityProperty\r\n} from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { VectorLayer } from '../../layer';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { FEATURE, FeatureMotion } from './feature.enums';\r\nimport { Feature } from './feature.interfaces';\r\nimport { FeatureStore } from './store';\r\nimport {\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from './strategies';\r\n\r\n/**\r\n * Create an Openlayers feature object out of a feature definition.\r\n * The output object has a reference to the feature id.\r\n * @param feature Feature definition\r\n * @param projectionOut Feature object projection\r\n * @returns OpenLayers feature object\r\n */\r\nexport function featureToOl(\r\n  feature: Feature,\r\n  projectionOut: string,\r\n  getId?: (Feature) => EntityKey\r\n): OlFeature {\r\n  getId = getId ? getId : getEntityId;\r\n\r\n  const olFormat = new OlFormatGeoJSON();\r\n  const olFeature = olFormat.readFeature(feature, {\r\n    dataProjection: feature.projection,\r\n    featureProjection: projectionOut\r\n  });\r\n\r\n  olFeature.setId(getId(feature));\r\n\r\n  const title = getEntityTitle(feature);\r\n  if (title !== undefined) {\r\n    olFeature.set('_title', title, true);\r\n  }\r\n\r\n  if (feature.extent !== undefined) {\r\n    olFeature.set('_extent', feature.extent, true);\r\n  }\r\n\r\n  if (feature.projection !== undefined) {\r\n    olFeature.set('_projection', feature.projection, true);\r\n  }\r\n\r\n  const mapTitle = getEntityProperty(feature, 'meta.mapTitle');\r\n  if (mapTitle !== undefined) {\r\n    olFeature.set('_mapTitle', mapTitle, true);\r\n  }\r\n\r\n  olFeature.set('_entityRevision', getEntityRevision(feature), true);\r\n\r\n  const icon = getEntityIcon(feature);\r\n  if (icon !== undefined) {\r\n    olFeature.set('_icon', icon, true);\r\n  }\r\n\r\n  if (feature.meta && feature.meta.style) {\r\n    olFeature.set('_style', feature.meta.style, true);\r\n  }\r\n\r\n  return olFeature;\r\n}\r\n\r\nexport function renderFeatureFromOl(\r\n  olRenderFeature: OlRenderFeature,\r\n  projectionIn: string,\r\n  olLayer?: OlLayer,\r\n  projectionOut = 'EPSG:4326'\r\n  ): Feature {\r\n    let geom;\r\n    let title;\r\n    let exclude;\r\n    let excludeOffline;\r\n\r\n    if (olLayer) {\r\n      title = olLayer.get('title');\r\n      if (olLayer.get('sourceOptions')) {\r\n        exclude = olLayer.get('sourceOptions').excludeAttribute;\r\n        excludeOffline = olLayer.get('sourceOptions').excludeAttributeOffline;\r\n      }\r\n    } else {\r\n      title = olRenderFeature.get('_title');\r\n    }\r\n\r\n    const olFormat = new OlFormatGeoJSON();\r\n    const properties = olRenderFeature.getProperties();\r\n    const geometryType = olRenderFeature.getType();\r\n\r\n    if (geometryType === 'Polygon') {\r\n      const ends = olRenderFeature.ends_;\r\n      geom = new OlPolygon(olRenderFeature.flatCoordinates_, OlGeometryLayout.XY, ends);\r\n    } else if (geometryType === 'Point') {\r\n      geom = new OlPoint(olRenderFeature.flatCoordinates_, OlGeometryLayout.XY);\r\n    } else if (geometryType === 'LineString') {\r\n      geom = new OlLineString(olRenderFeature.flatCoordinates_, OlGeometryLayout.XY);\r\n    }\r\n\r\n    const geometry = olFormat.writeGeometryObject(geom, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn\r\n    });\r\n\r\n    const id = olRenderFeature.getId() ? olRenderFeature.getId() : uuid();\r\n    const mapTitle = olRenderFeature.get('_mapTitle');\r\n\r\n    return {\r\n      type: FEATURE,\r\n      projection: projectionOut,\r\n      extent: olRenderFeature.getExtent(),\r\n      meta: {\r\n        id,\r\n        title: title ? title : mapTitle ? mapTitle : id,\r\n        mapTitle,\r\n        excludeAttribute: exclude,\r\n        excludeAttributeOffline: excludeOffline\r\n      },\r\n      properties,\r\n      geometry,\r\n      ol: olRenderFeature\r\n    };\r\n  }\r\n/**\r\n * Create a feature object out of an OL feature\r\n * The output object has a reference to the feature id.\r\n * @param olFeature OL Feature\r\n * @param projectionIn OL feature projection\r\n * @param olLayer OL Layer\r\n * @param projectionOut Feature projection\r\n * @returns Feature\r\n */\r\nexport function featureFromOl(\r\n  olFeature: OlFeature,\r\n  projectionIn: string,\r\n  olLayer?: OlLayer,\r\n  projectionOut = 'EPSG:4326'\r\n): Feature {\r\n  let title;\r\n  let exclude;\r\n  let excludeOffline;\r\n  const olFormat = new OlFormatGeoJSON();\r\n\r\n  const keys = olFeature.getKeys().filter((key: string) => {\r\n    return !key.startsWith('_') && key !== 'geometry';\r\n  });\r\n  const properties = keys.reduce((acc: object, key: string) => {\r\n    acc[key] = olFeature.get(key);\r\n    return acc;\r\n  }, {});\r\n\r\n  const geometry = olFormat.writeGeometryObject(olFeature.getGeometry(), {\r\n    dataProjection: projectionOut,\r\n    featureProjection: projectionIn\r\n  });\r\n\r\n  if (olLayer) {\r\n    title = olLayer.get('title');\r\n    if (olLayer.get('sourceOptions')) {\r\n      exclude = olLayer.get('sourceOptions').excludeAttribute;\r\n      excludeOffline = olLayer.get('sourceOptions').excludeAttributeOffline;\r\n    }\r\n  } else {\r\n    title = olFeature.get('_title');\r\n  }\r\n  const mapTitle = olFeature.get('_mapTitle');\r\n  const id = olFeature.getId() ? olFeature.getId() : uuid();\r\n\r\n  return {\r\n    type: FEATURE,\r\n    projection: projectionOut,\r\n    extent: olFeature.get('_extent'),\r\n    meta: {\r\n      id,\r\n      title: title ? title : mapTitle ? mapTitle : id,\r\n      mapTitle,\r\n      revision: olFeature.getRevision(),\r\n      style: olFeature.get('_style'),\r\n      excludeAttribute: exclude,\r\n      excludeAttributeOffline: excludeOffline\r\n    },\r\n    properties,\r\n    geometry,\r\n    ol: olFeature\r\n  };\r\n}\r\n\r\n/**\r\n * Compute an OL feature extent in it's map projection\r\n * @param map Map\r\n * @param olFeature OL feature\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeatureExtent(\r\n  map: IgoMap,\r\n  olFeature: OlFeature\r\n): [number, number, number, number] {\r\n  let olExtent = olextent.createEmpty();\r\n\r\n  const olFeatureExtent = olFeature.get('_extent');\r\n  const olFeatureProjection = olFeature.get('_projection');\r\n  if (olFeatureExtent !== undefined && olFeatureProjection !== undefined) {\r\n    olExtent = olproj.transformExtent(\r\n      olFeatureExtent,\r\n      olFeatureProjection,\r\n      map.projection\r\n    );\r\n  } else {\r\n    const olGeometry = olFeature.getGeometry();\r\n    if (olGeometry !== null) {\r\n      olExtent = olGeometry.getExtent();\r\n    }\r\n  }\r\n\r\n  return olExtent;\r\n}\r\n\r\n/**\r\n * Compute a multiple OL features extent in their map projection\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeaturesExtent(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[]\r\n): [number, number, number, number] {\r\n  const extent = olextent.createEmpty();\r\n\r\n  olFeatures.forEach((olFeature: OlFeature) => {\r\n    const featureExtent = computeOlFeatureExtent(map, olFeature);\r\n    olextent.extend(extent, featureExtent);\r\n  });\r\n\r\n  return extent;\r\n}\r\n\r\n/**\r\n * Scale an extent.\r\n * @param extent Extent\r\n * @param Scaling factors for top, right, bottom and left directions, in that order\r\n * @returns Scaled extent\r\n */\r\nexport function scaleExtent(\r\n  extent: [number, number, number, number],\r\n  scale: [number, number, number, number]\r\n): [number, number, number, number] {\r\n  const [width, height] = olextent.getSize(extent);\r\n  return [\r\n    scale[3] ? extent[0] - width * scale[3] : extent[0],\r\n    scale[2] ? extent[1] - height * scale[2] : extent[1],\r\n    scale[1] ? extent[2] + width * scale[1] : extent[2],\r\n    scale[0] ? extent[3] + height * scale[0] : extent[3]\r\n  ];\r\n}\r\n\r\n/**\r\n * Return true if features are out of view.\r\n * If features are too close to the edge, they are considered out of view.\r\n * We define the edge as 5% of the extent size.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @returns Return true if features are out of view\r\n */\r\nexport function featuresAreOutOfView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number]\r\n) {\r\n  const mapExtent = map.viewController.getExtent();\r\n  const edgeRatio = 0.05;\r\n  const scale = [-1, -1, -1, -1].map(x => x * edgeRatio);\r\n  const viewExtent = scaleExtent(mapExtent, scale as [\r\n    number,\r\n    number,\r\n    number,\r\n    number\r\n  ]);\r\n\r\n  return !olextent.containsExtent(viewExtent, featuresExtent);\r\n}\r\n\r\n/**\r\n * Return true if features are too deep into the view. This results\r\n * in features being too small.\r\n * Features are considered too small if their extent occupies less than\r\n * 1% of the map extent.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @param areaRatio The features extent to view extent acceptable ratio\r\n * @returns Return true if features are too deep in the view\r\n */\r\nexport function featuresAreTooDeepInView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  // An area ratio of 0.004 means that the feature extent's width and height\r\n  // should be about 1/16 of the map extent's width and height\r\n  areaRatio = areaRatio ? areaRatio : 0.004;\r\n  const mapExtent = map.viewController.getExtent();\r\n  const mapExtentArea = olextent.getArea(mapExtent);\r\n  const featuresExtentArea = olextent.getArea(featuresExtent);\r\n\r\n  if (featuresExtentArea === 0 && map.viewController.getZoom() > 13) { // In case it's a point\r\n      return false;\r\n  }\r\n\r\n  return featuresExtentArea / mapExtentArea < areaRatio;\r\n}\r\n\r\n/**\r\n * Fit view to include the features extent.\r\n * By default, this method will let the features occupy about 50% of the viewport.\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @param motion To motion to the new map view\r\n * @param scale If this is defined, the original view will be scaled\r\n *  by that factor before any logic is applied.\r\n */\r\nexport function moveToOlFeatures(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[],\r\n  motion: FeatureMotion = FeatureMotion.Default,\r\n  scale?: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  const featuresExtent = computeOlFeaturesExtent(map, olFeatures);\r\n  let viewExtent = featuresExtent;\r\n  if (scale !== undefined) {\r\n    viewExtent = scaleExtent(viewExtent, scale);\r\n  }\r\n\r\n  if (motion === FeatureMotion.Zoom) {\r\n    map.viewController.zoomToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Move) {\r\n    map.viewController.moveToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Default) {\r\n    if (\r\n      featuresAreOutOfView(map, featuresExtent) ||\r\n      featuresAreTooDeepInView(map, featuresExtent, areaRatio)\r\n    ) {\r\n      map.viewController.zoomToExtent(viewExtent);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Hide an OL feature\r\n * @param olFeature OL feature\r\n */\r\nexport function hideOlFeature(olFeature: OlFeature) {\r\n  olFeature.setStyle(new olstyle.Style({}));\r\n}\r\n\r\n/**\r\n * Try to bind a layer to a store if none is bound already.\r\n * The layer will also be added to the store's map.\r\n * If no layer is given to that function, a basic one will be created.\r\n * @param store The store to bind the layer\r\n * @param layer An optional VectorLayer\r\n */\r\nexport function tryBindStoreLayer(store: FeatureStore, layer?: VectorLayer) {\r\n  if (store.layer !== undefined) {\r\n    if (store.layer.map === undefined) {\r\n      store.map.addLayer(store.layer);\r\n    }\r\n    return;\r\n  }\r\n\r\n  layer = layer\r\n    ? layer\r\n    : new VectorLayer({\r\n        source: new FeatureDataSource()\r\n      });\r\n  store.bindLayer(layer);\r\n  if (store.layer.map === undefined) {\r\n    store.map.addLayer(store.layer);\r\n  }\r\n}\r\n\r\n/**\r\n * Try to add a loading strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the loading strategy\r\n * @param strategy An optional loading strategy\r\n */\r\nexport function tryAddLoadingStrategy(\r\n  store: FeatureStore,\r\n  strategy?: FeatureStoreLoadingStrategy\r\n) {\r\n  if (store.getStrategyOfType(FeatureStoreLoadingStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    return;\r\n  }\r\n\r\n  strategy = strategy ? strategy : new FeatureStoreLoadingStrategy({});\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n\r\n/**\r\n * Try to add a selection strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the selection strategy\r\n * @param [strategy] An optional selection strategy\r\n */\r\nexport function tryAddSelectionStrategy(\r\n  store: FeatureStore,\r\n  strategy?: FeatureStoreSelectionStrategy\r\n) {\r\n  if (store.getStrategyOfType(FeatureStoreSelectionStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n    return;\r\n  }\r\n  strategy = strategy\r\n    ? strategy\r\n    : new FeatureStoreSelectionStrategy({\r\n        map: store.map\r\n      });\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n\r\n/**\r\n * Compute a diff between a source array of Ol features and a target array\r\n * @param source Source array of OL features\r\n * @param starget Target array of OL features\r\n * @returns Features to add and remove\r\n */\r\nexport function computeOlFeaturesDiff(\r\n  source: OlFeature[],\r\n  target: OlFeature[]\r\n): {\r\n  add: OlFeature[];\r\n  remove: OlFeature;\r\n} {\r\n  const olFeaturesMap = new Map();\r\n  target.forEach((olFeature: OlFeature) => {\r\n    olFeaturesMap.set(olFeature.getId(), olFeature);\r\n  });\r\n\r\n  const olFeaturesToRemove = [];\r\n  source.forEach((olFeature: OlFeature) => {\r\n    const newOlFeature = olFeaturesMap.get(olFeature.getId());\r\n    if (newOlFeature === undefined) {\r\n      olFeaturesToRemove.push(olFeature);\r\n    } else if (\r\n      newOlFeature.get('_entityRevision') !== olFeature.get('_entityRevision')\r\n    ) {\r\n      olFeaturesToRemove.push(olFeature);\r\n    } else {\r\n      olFeaturesMap.delete(newOlFeature.getId());\r\n    }\r\n  });\r\n\r\n  const olFeaturesToAddIds = Array.from(olFeaturesMap.keys());\r\n  const olFeaturesToAdd = target.filter((olFeature: OlFeature) => {\r\n    return olFeaturesToAddIds.indexOf(olFeature.getId()) >= 0;\r\n  });\r\n\r\n  return {\r\n    add: olFeaturesToAdd,\r\n    remove: olFeaturesToRemove\r\n  };\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ViewChild\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Form, FormComponent, getEntityRevision } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FEATURE } from '../shared/feature.enums';\r\nimport { Feature, FeatureMeta } from '../shared/feature.interfaces';\r\n\r\n/**\r\n * A configurable form, optionnally bound to a feature.\r\n * This component creates an entity form and, on submit,\r\n * returns a feature made out of the submitted data. It also\r\n * does things like managing the feature visibility while it's being updated\r\n * as well as disabling the selection of another feature.\r\n */\r\n@Component({\r\n  selector: 'igo-feature-form',\r\n  templateUrl: './feature-form.component.html',\r\n  styleUrls: ['./feature-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureFormComponent {\r\n\r\n  /**\r\n   * Form\r\n   */\r\n  @Input() form: Form;\r\n\r\n  /**\r\n   * Feature to update\r\n   */\r\n  @Input()\r\n  set feature(value: Feature | undefined) { this.feature$.next(value); }\r\n  get feature(): Feature | undefined { return this.feature$.value; }\r\n  readonly feature$: BehaviorSubject<Feature> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Event emitted when the form is submitted\r\n   */\r\n  @Output() submitForm = new EventEmitter<Feature>();\r\n\r\n  @ViewChild('igoForm') igoForm: FormComponent;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Transform the form data to a feature and emit an event\r\n   * @param event Form submit event\r\n   * @internal\r\n   */\r\n  onSubmit(data: { [key: string]: any }) {\r\n    const feature = this.formDataToFeature(data);\r\n    this.submitForm.emit(feature);\r\n  }\r\n\r\n  getData(): Feature {\r\n    return this.formDataToFeature(this.igoForm.getData());\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature\r\n   * @param data Form data\r\n   * @returns A feature\r\n   */\r\n  private formDataToFeature(data: { [key: string]: any }): Feature {\r\n    const properties = {};\r\n    const meta = {};\r\n    if (this.feature === undefined) {\r\n      (meta as any).id = uuid();\r\n    } else {\r\n      Object.assign(properties, this.feature.properties);\r\n      Object.assign(meta, this.feature.meta, {\r\n        revision: getEntityRevision(this.feature) + 1\r\n      });\r\n    }\r\n\r\n    const propertyPrefix = 'properties.';\r\n    Object.entries(data).forEach((entry: [string, any]) => {\r\n      const [key, value] = entry;\r\n      if (key.startsWith(propertyPrefix)) {\r\n        const property = key.substr(propertyPrefix.length);\r\n        properties[property] = value;\r\n      }\r\n    });\r\n\r\n    let geometry = data.geometry;\r\n    if (geometry === undefined && this.feature !== undefined) {\r\n      geometry = this.feature.geometry;\r\n    }\r\n\r\n    return {\r\n      meta: meta as FeatureMeta,\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: 'EPSG:4326',\r\n      properties\r\n    };\r\n  }\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  Feature,\r\n  FeatureMotion,\r\n  featureToOl,\r\n  moveToOlFeatures\r\n} from '../../feature';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { createOverlayLayer } from './overlay.utils';\r\n\r\n/**\r\n * This class is simply a shortcut for adding features to a map.\r\n * It does nothing more than a standard layer but it's shipped with\r\n * a defautl style based on the geometry type of the features it contains.\r\n * @todo Enhance that by using a FeatureStore and strategies.\r\n */\r\nexport class Overlay {\r\n  /**\r\n   * The map to add the layer to\r\n   */\r\n  private map: IgoMap;\r\n\r\n  /**\r\n   * Overlay layer\r\n   */\r\n  private layer: VectorLayer;\r\n\r\n  /**\r\n   * Overlay layer's data source\r\n   */\r\n  get dataSource(): FeatureDataSource {\r\n    return this.layer.dataSource as FeatureDataSource;\r\n  }\r\n\r\n  constructor(map?: IgoMap) {\r\n    this.layer = createOverlayLayer();\r\n    this.setMap(map);\r\n  }\r\n\r\n  /**\r\n   * Bind this to a map and add the overlay layer to that map\r\n   * @param map Map\r\n   */\r\n  setMap(map: IgoMap) {\r\n    if (map === undefined) {\r\n      if (this.map !== undefined) {\r\n        this.map.ol.removeLayer(this.layer.ol);\r\n      }\r\n    } else {\r\n      map.ol.addLayer(this.layer.ol);\r\n    }\r\n    this.map = map;\r\n  }\r\n\r\n  /**\r\n   * Set the overlay features and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  setFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.clear();\r\n    this.addFeatures(features, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a feature to the  overlay and, optionally, move to it\r\n   * @param feature Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeature(feature: Feature, motion: FeatureMotion = FeatureMotion.Default) {\r\n    this.addFeatures([feature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add features to the  overlay and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    const olFeatures = [];\r\n    features.forEach((feature: Feature) => {\r\n      const olFeature = featureToOl(feature, this.map.projection);\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry === null) {\r\n        return;\r\n      }\r\n      olFeatures.push(olFeature);\r\n    });\r\n\r\n    this.addOlFeatures(olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a OpenLayers feature to the  overlay and, optionally, move to it\r\n   * @param olFeature OpenLayers Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeature(\r\n    olFeature: OlFeature,\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.addOlFeatures([olFeature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add OpenLayers features to the overlay and, optionally, move to them\r\n   * @param olFeatures OpenLayers Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.dataSource.ol.addFeatures(olFeatures);\r\n    moveToOlFeatures(this.map, olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay\r\n   */\r\n  clear() {\r\n    this.dataSource.ol.clear();\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { Watcher, SubjectStatus } from '@igo2/utils';\r\nimport { Layer } from '../../layer/shared/layers';\r\n\r\nexport class LayerWatcher extends Watcher {\r\n  private loaded = 0;\r\n  private loading = 0;\r\n  private layers: Layer[] = [];\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  watch() {}\r\n\r\n  unwatch() {\r\n    this.layers.forEach(layer => this.unwatchLayer(layer), this);\r\n  }\r\n\r\n  watchLayer(layer: Layer) {\r\n    if (layer.status$ === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.layers.push(layer);\r\n\r\n    const layer$$ = layer.status$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe(status => {\r\n        if (status === SubjectStatus.Working) {\r\n          this.loading += 1;\r\n        } else if (status === SubjectStatus.Done) {\r\n          this.loaded += 1;\r\n        }\r\n\r\n        if (this.loaded >= this.loading) {\r\n          this.loading = this.loaded = 0;\r\n          this.status = SubjectStatus.Done;\r\n        } else if (this.loading > 0) {\r\n          this.status = SubjectStatus.Working;\r\n        }\r\n      });\r\n\r\n    this.subscriptions.push(layer$$);\r\n  }\r\n\r\n  unwatchLayer(layer: Layer) {\r\n    layer.status$.next(SubjectStatus.Done);\r\n    const index = this.layers.indexOf(layer);\r\n    if (index >= 0) {\r\n      const status = (layer as any).watcher.status;\r\n      if (\r\n        [SubjectStatus.Working, SubjectStatus.Waiting].indexOf(status) !== -1\r\n      ) {\r\n        this.loaded += 1;\r\n      }\r\n      this.subscriptions[index].unsubscribe();\r\n      this.subscriptions.splice(index, 1);\r\n      this.layers.splice(index, 1);\r\n      (layer as any).watcher.unwatch();\r\n    }\r\n  }\r\n}\r\n","export enum MapViewAction {\r\n  Move,\r\n  Zoom\r\n}\r\n","import * as olproj from 'ol/proj';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { MAC } from 'ol/has';\r\n\r\nimport { MapViewState } from './map.interface';\r\nimport proj4 from 'proj4';\r\nimport { Projection } from './projection.interfaces';\r\n\r\n/**\r\n * This method extracts a coordinate tuple from a string.\r\n * @param str Any string\r\n * @param mapProjection string Map Projection\r\n * @param opts.forceNA boolean Force North America Zone\r\n * @returns object:\r\n *             lonLat: Coordinate,\r\n *             message: Message of error,\r\n *             radius: radius of the confience of coordinate,\r\n *             conf: confidence of the coordinate}\r\n */\r\nexport function stringToLonLat(\r\n  str: string,\r\n  mapProjection: string,\r\n  opts: { forceNA?: boolean } = {}\r\n): {\r\n  lonLat: [number, number] | undefined;\r\n  message: string;\r\n  radius: number | undefined;\r\n  conf: number | undefined;\r\n} {\r\n  let lonLat: [number, number];\r\n  let coordStr: string;\r\n  let negativeLon: string;\r\n  let degreesLon: string;\r\n  let minutesLon: string;\r\n  let secondsLon: string;\r\n  let directionLon: string;\r\n  let decimalLon: string;\r\n  let negativeLat: string;\r\n  let degreesLat: string;\r\n  let minutesLat: string;\r\n  let secondsLat: string;\r\n  let directionLat: string;\r\n  let decimalLat: string;\r\n  let zone: string;\r\n  let radius: string;\r\n  let conf: string;\r\n  let lon: any;\r\n  let lat: any;\r\n\r\n  const projectionPattern = '(\\\\s*;\\\\s*[\\\\d]{4,6})';\r\n  const toProjection = '4326';\r\n  let projectionStr: string;\r\n  const projectionRegex = new RegExp(projectionPattern, 'g');\r\n\r\n  const lonlatCoord = '([-+])?([\\\\d]{1,3})([,.](\\\\d+))?';\r\n  const lonLatPattern = `${lonlatCoord}[\\\\s,]+${lonlatCoord}`;\r\n  const lonLatRegex = new RegExp(`^${lonLatPattern}$`, 'g');\r\n\r\n  const dmsCoord =\r\n    '([0-9]{1,2})[:|Â°]?\\\\s*([0-9]{1,2})?[:|\\'|â²|â]?\\\\s*([0-9]{1,2}(?:.[0-9]+){0,1})?\\\\s*[\"|â³|â]?\\\\s*';\r\n  const dmsCoordPattern = `${dmsCoord}([N|S|E|W|O]),?\\\\s*${dmsCoord}([N|S|E|W|O])`;\r\n  const dmsRegex = new RegExp(`^${dmsCoordPattern}`, 'gi');\r\n\r\n  const patternUtm =\r\n    '(UTM)-?(\\\\d{1,2})[\\\\s,]*(\\\\d+[.,]?\\\\d+)[\\\\s,]+(\\\\d+[.,]?\\\\d+)';\r\n  const utmRegex = new RegExp(`^${patternUtm}`, 'gi');\r\n\r\n  const patternMtm =\r\n    '(MTM)-?(\\\\d{1,2})[\\\\s,]*(\\\\d+[.,]?\\\\d+)[\\\\s,]+(\\\\d+[.,]?\\\\d+)';\r\n  const mtmRegex = new RegExp(`^${patternMtm}`, 'gi');\r\n\r\n  const ddCoord = '([-+])?(\\\\d{1,3})[,.](\\\\d+)';\r\n  const patternDd = `${ddCoord}\\\\s*[,]?\\\\s*${ddCoord}`;\r\n  const ddRegex = new RegExp(`^${patternDd}`, 'g');\r\n\r\n  const dmdCoord =\r\n    '([-+])?(\\\\d{1,3})[\\\\s,.]{1}(\\\\d{1,2})[\\\\s,.]{1}(\\\\d{1,2})[.,]?(\\\\d{1,5})?';\r\n  const patternDmd = `${dmdCoord}\\\\s*[,.]?\\\\s*${dmdCoord}`;\r\n  const dmdRegex = new RegExp(`^${patternDmd}`, 'g');\r\n\r\n  // tslint:disable:max-line-length\r\n  const patternBELL =\r\n    'LAT\\\\s*[\\\\s:]*\\\\s*([-+])?(\\\\d{1,2})[\\\\s.,]?(\\\\d+)?[\\\\s.,]?\\\\s*(\\\\d{1,2}([.,]\\\\d+)?)?\\\\s*(N|S|E|W)?\\\\s*LONG\\\\s*[\\\\s:]*\\\\s*([-+])?(\\\\d{1,3})[\\\\s.,]?(\\\\d+)?[\\\\s.,]?\\\\s*(\\\\d{1,2}([.,]\\\\d+)?)?\\\\s*(N|S|E|W)?\\\\s*UNC\\\\s*[\\\\s:]?\\\\s*(\\\\d+)\\\\s*CONF\\\\s*[\\\\s:]?\\\\s*(\\\\d{1,3})';\r\n  const bellRegex = new RegExp(`^${patternBELL}?`, 'gi');\r\n\r\n  const mmCoord = '([-+]?\\\\d+)[,.]?(\\\\d+)?';\r\n  const mmPattern = `${mmCoord}[\\\\s,]+${mmCoord}`;\r\n  const mmRegex = new RegExp(`^${mmPattern}$`, 'g');\r\n\r\n  let isXYCoords = false;\r\n\r\n  str = str.toLocaleUpperCase().trim();\r\n\r\n  // Extract projection\r\n  if (projectionRegex.test(str)) {\r\n    [coordStr, projectionStr] = str.split(';').map(s => s.trim());\r\n  } else {\r\n    coordStr = str;\r\n  }\r\n  if (lonLatRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      negativeLon,\r\n      lon,\r\n      ,\r\n      decimalLon,\r\n      negativeLat,\r\n      lat,\r\n      ,\r\n      decimalLat\r\n    ] = coordStr.match(lonLatPattern);\r\n\r\n    lon = parseFloat((negativeLon ? negativeLon : '') + lon + '.' + decimalLon);\r\n    lat = parseFloat((negativeLat ? negativeLat : '') + lat + '.' + decimalLat);\r\n  } else if (dmsRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      directionLon,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      directionLat\r\n    ] = coordStr.match(dmsCoordPattern);\r\n\r\n    if (directionLon === 'S' || directionLon === 'N') {\r\n      degreesLon = [degreesLat, (degreesLat = degreesLon)][0];\r\n      minutesLon = [minutesLat, (minutesLat = minutesLon)][0];\r\n      secondsLon = [secondsLat, (secondsLat = secondsLon)][0];\r\n      directionLon = [directionLat, (directionLat = directionLon)][0];\r\n    }\r\n\r\n    lon = convertDMSToDD(\r\n      parseFloat(degreesLon),\r\n      parseFloat(minutesLon),\r\n      parseFloat(secondsLon),\r\n      directionLon\r\n    );\r\n    lat = convertDMSToDD(\r\n      parseFloat(degreesLat),\r\n      parseFloat(minutesLat),\r\n      parseFloat(secondsLat),\r\n      directionLat\r\n    );\r\n  } else if (utmRegex.test(coordStr)) {\r\n    isXYCoords = true;\r\n    [, , zone, lon, lat] = coordStr.match(patternUtm);\r\n    const epsgUtm = Number(zone) < 10 ? `EPSG:3260${zone}` : `EPSG:326${zone}`;\r\n    [lon, lat] = olproj.transform(\r\n      [parseFloat(lon), parseFloat(lat)],\r\n      epsgUtm,\r\n      'EPSG:4326'\r\n    );\r\n  } else if (mtmRegex.test(coordStr)) {\r\n    isXYCoords = true;\r\n    [, , zone, lon, lat] = coordStr.match(patternMtm);\r\n    const epsgMtm =\r\n      Number(zone) < 10 ? `EPSG:3218${zone}` : `EPSG:321${80 + Number(zone)}`;\r\n    [lon, lat] = olproj.transform(\r\n      [parseFloat(lon), parseFloat(lat)],\r\n      epsgMtm,\r\n      'EPSG:4326'\r\n    );\r\n  } else if (dmdRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      negativeLon,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      decimalLon,\r\n      negativeLat,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      decimalLat\r\n    ] = coordStr.match(patternDmd);\r\n\r\n    lon = convertDMSToDD(\r\n      parseFloat((negativeLon ? negativeLon : '') + degreesLon),\r\n      parseFloat(minutesLon),\r\n      parseFloat(secondsLon),\r\n      directionLon\r\n    );\r\n    lat = convertDMSToDD(\r\n      parseFloat((negativeLat ? negativeLat : '') + degreesLat),\r\n      parseFloat(minutesLat),\r\n      parseFloat(secondsLat),\r\n      directionLat\r\n    );\r\n  } else if (ddRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      negativeLon,\r\n      degreesLon,\r\n      decimalLon,\r\n      negativeLat,\r\n      degreesLat,\r\n      decimalLat\r\n    ] = coordStr.match(patternDd);\r\n\r\n    lon = convertDMSToDD(\r\n      parseFloat((negativeLon ? negativeLon : '') + degreesLon),\r\n      parseFloat(minutesLon),\r\n      parseFloat(secondsLon),\r\n      directionLon\r\n    );\r\n    lat = convertDMSToDD(\r\n      parseFloat((negativeLat ? negativeLat : '') + degreesLat),\r\n      parseFloat(minutesLat),\r\n      parseFloat(secondsLat),\r\n      directionLat\r\n    );\r\n  } else if (bellRegex.test(coordStr)) {\r\n    [\r\n      ,\r\n      negativeLat,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      ,\r\n      directionLat,\r\n      negativeLon,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      ,\r\n      directionLon,\r\n      radius,\r\n      conf\r\n    ] = coordStr.match(patternBELL);\r\n\r\n    // Set default value for North America\r\n    if (!directionLon) {\r\n      directionLon = 'W';\r\n    }\r\n\r\n    // Check if real minutes or decimals\r\n    if (minutesLon && minutesLon.length > 2) {\r\n      lon = parseFloat(\r\n        (negativeLon ? negativeLon : '') + degreesLon + '.' + minutesLon\r\n      );\r\n    } else {\r\n      lon = convertDMSToDD(\r\n        parseFloat(degreesLon),\r\n        parseFloat(minutesLon),\r\n        parseFloat(secondsLon),\r\n        directionLon\r\n      );\r\n    }\r\n\r\n    if (minutesLat && minutesLat.length > 2) {\r\n      lat = parseFloat(\r\n        (negativeLat ? negativeLat : '') + degreesLat + '.' + minutesLat\r\n      );\r\n    } else {\r\n      lat = convertDMSToDD(\r\n        parseFloat(degreesLat),\r\n        parseFloat(minutesLat),\r\n        parseFloat(secondsLat),\r\n        directionLat\r\n      );\r\n    }\r\n  } else if (mmRegex.test(coordStr)) {\r\n    isXYCoords = true;\r\n    [, lon, decimalLon, lat, decimalLat] = coordStr.match(mmPattern);\r\n\r\n    if (decimalLon) {\r\n      lon = parseFloat(lon + '.' + decimalLon);\r\n    }\r\n\r\n    if (decimalLat) {\r\n      lat = parseFloat(lat + '.' + decimalLat);\r\n    }\r\n  } else {\r\n    return {\r\n      lonLat: undefined,\r\n      message: '',\r\n      radius: undefined,\r\n      conf: undefined\r\n    };\r\n  }\r\n\r\n  if (opts.forceNA && !isXYCoords) {\r\n    // Set a negative coordinate for North America zone\r\n    if (lon > 0 && lat > 0) {\r\n      if (lon > lat) {\r\n        lon = -lon;\r\n      } else {\r\n        lat = -lat;\r\n      }\r\n    }\r\n\r\n    // Reverse coordinate to respect lonLat convention\r\n    if (lon > lat) {\r\n      lon = [lat, (lat = lon)][0];\r\n    }\r\n  }\r\n\r\n  lonLat = [Number(lon), Number(lat)] as [number, number];\r\n\r\n  // Reproject the coordinate if projection parameter have been set and coord is not 4326\r\n  if (\r\n    (projectionStr !== undefined && projectionStr !== toProjection) ||\r\n    (lonLat[0] > 180 || lonLat[0] < -180) ||\r\n    (lonLat[1] > 90 || lonLat[1] < -90)\r\n  ) {\r\n    const source = projectionStr ? 'EPSG:' + projectionStr : mapProjection;\r\n    const dest = 'EPSG:' + toProjection;\r\n\r\n    try {\r\n      lonLat = olproj.transform(lonLat, source, dest);\r\n    } catch (e) {\r\n      return {\r\n        lonLat: undefined,\r\n        message: 'Projection ' + source + ' not supported',\r\n        radius: undefined,\r\n        conf: undefined\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    lonLat,\r\n    message: '',\r\n    radius: radius ? parseInt(radius, 10) : undefined,\r\n    conf: conf ? parseInt(conf, 10) : undefined\r\n  };\r\n}\r\n\r\n/**\r\n * Convert degrees minutes seconds to dd\r\n * @param degrees Degrees\r\n * @param minutes Minutes\r\n * @param seconds Seconds\r\n * @param direction Direction\r\n */\r\nfunction convertDMSToDD(\r\n  degrees: number,\r\n  minutes: number,\r\n  seconds: number,\r\n  direction: string\r\n) {\r\n  minutes = minutes || 0;\r\n  seconds = seconds || 0;\r\n  let dd = degrees + minutes / 60 + seconds / 3600;\r\n\r\n  if (direction === 'S' || direction === 'W') {\r\n    dd = -dd;\r\n  } // Don't do anything for N or E\r\n  return dd;\r\n}\r\n\r\n/**\r\n * Return true of two view states are equal.\r\n * @param state1 View state\r\n * @param state2 View state\r\n * @returns True if the view states are equal\r\n */\r\nexport function viewStatesAreEqual(\r\n  state1: MapViewState,\r\n  state2: MapViewState\r\n): boolean {\r\n  if (state1 === undefined || state2 === undefined) {\r\n    return false;\r\n  }\r\n\r\n  const tolerance = 1 / 10000;\r\n  return (\r\n    state1.zoom === state2.zoom &&\r\n    Math.trunc(state1.center[0] / tolerance) ===\r\n      Math.trunc(state2.center[0] / tolerance) &&\r\n    Math.trunc(state1.center[1] / tolerance) ===\r\n      Math.trunc(state2.center[1] / tolerance)\r\n  );\r\n}\r\n\r\n/**\r\n * Format the scale to a human readable text\r\n * @param Scale of the map\r\n * @returns Human readable scale text\r\n */\r\nexport function formatScale(scale) {\r\n  scale = Math.round(scale);\r\n  if (scale < 10000) {\r\n    return scale + '';\r\n  }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  if (scale < 1000) {\r\n    return scale + 'K';\r\n  }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  return scale + 'M';\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param scale Scale denom\r\n * @param dpi DPI\r\n * @returns Resolution\r\n */\r\nexport function getResolutionFromScale(\r\n  scale: number,\r\n  dpi: number = 96\r\n): number {\r\n  const inchesPerMeter = 39.3701;\r\n  return scale / (inchesPerMeter * dpi);\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param Scale denom\r\n * @returns Resolution\r\n */\r\nexport function getScaleFromResolution(\r\n  resolution: number,\r\n  unit: string = 'm',\r\n  dpi: number = 96\r\n): number {\r\n  const inchesPerMeter = 39.3701;\r\n  return resolution * olproj.METERS_PER_UNIT[unit] * inchesPerMeter * dpi;\r\n}\r\n\r\n/**\r\n * Returns true if the CTRL key is pushed during an Ol MapBrowserPointerEvent\r\n * @param event OL MapBrowserPointerEvent\r\n * @returns Whether the CTRL key is pushed\r\n */\r\nexport function ctrlKeyDown(event: OlMapBrowserPointerEvent): boolean {\r\n  const originalEvent = event.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n}\r\n\r\nexport function roundCoordTo(coord: [number, number], decimal: number = 3) {\r\n  return [coord[0].toFixed(decimal), coord[1].toFixed(decimal)];\r\n}\r\n\r\n/**\r\n * Returns an array of converted coordinates.\r\n * Conversion is done for every configured projections\r\n * and for the current UTM zone and MTM zone.\r\n * @param lonLat [number, number] array of the coordinate to transform.\r\n * @param projections  Projection[] Array of destination projection.\r\n * @returns Returns an array of converted coordinates.\r\n */\r\nexport function lonLatConversion(\r\n  lonLat: [number, number],\r\n  projections: Projection[]\r\n): {\r\n  code: string;\r\n  alias: string;\r\n  coord: [number, number];\r\n  igo2CoordFormat: string;\r\n}[] {\r\n  const rawCoord3857 = olproj.transform(lonLat, 'EPSG:4326', 'EPSG:3857');\r\n  const convertedLonLat = [\r\n    {\r\n      code: 'EPSG:3857',\r\n      alias: 'Web mercator',\r\n      coord: rawCoord3857,\r\n      igo2CoordFormat: `${roundCoordTo(rawCoord3857).join(', ')} ; 3857`\r\n    }\r\n  ];\r\n\r\n  // detect the current utm zone.\r\n  const utmZone = utmZoneFromLonLat(lonLat);\r\n  const epsgUtm = utmZone < 10 ? `EPSG:3260${utmZone}` : `EPSG:326${utmZone}`;\r\n  const utmName = `UTM-${utmZone}`;\r\n  const rawCoordUtm = olproj.transform(lonLat, 'EPSG:4326', epsgUtm);\r\n  convertedLonLat.push({\r\n    code: epsgUtm,\r\n    alias: 'UTM',\r\n    coord: rawCoordUtm,\r\n    igo2CoordFormat: `${utmName} ${roundCoordTo(rawCoordUtm).join(', ')}`\r\n  });\r\n\r\n  // detect the current mtm zone.\r\n  const mtmZone = mtmZoneFromLonLat(lonLat);\r\n  if (mtmZone) {\r\n    const epsgMtm =\r\n      mtmZone < 10 ? `EPSG:3218${mtmZone}` : `EPSG:321${80 + mtmZone}`;\r\n    const mtmName = `MTM-${mtmZone}`;\r\n    const rawCoordMtm = olproj.transform(lonLat, 'EPSG:4326', epsgMtm);\r\n    convertedLonLat.push({\r\n      code: epsgMtm,\r\n      alias: 'MTM',\r\n      coord: rawCoordMtm,\r\n      igo2CoordFormat: `${mtmName} ${roundCoordTo(rawCoordMtm).join(', ')}`\r\n    });\r\n  }\r\n\r\n  projections.forEach(projection => {\r\n    const rawCoord = olproj.transform(lonLat, 'EPSG:4326', projection.code);\r\n    const numericEpsgCode = projection.code.split(':')[1];\r\n    convertedLonLat.push({\r\n      code: projection.code,\r\n      alias: projection.alias || projection.code,\r\n      coord: rawCoord,\r\n      igo2CoordFormat: `${roundCoordTo(rawCoord).join(\r\n        ', '\r\n      )} ; ${numericEpsgCode}`\r\n    });\r\n  });\r\n\r\n  return convertedLonLat;\r\n}\r\n\r\n/**\r\n * Detect the current utm zone of the lon/lat coordinate.\r\n * @param lonLat [number, number] array of the coordinate to detect the UTM zone.\r\n * @returns number The UTM zone.\r\n */\r\nexport function utmZoneFromLonLat(lonLat: [number, number]) {\r\n  return Math.ceil((lonLat[0] + 180) / 6);\r\n}\r\n\r\n/**\r\n * Detect the current mtm zone of the lon/lat coordinate.\r\n * @param lonLat [number, number] array of the coordinate to detect the MTM zone.\r\n * @returns number The MTM zone. Undefined if outside of the mtm application zone.\r\n */\r\nexport function mtmZoneFromLonLat(lonLat: [number, number]) {\r\n  const long = lonLat[0];\r\n  let mtmZone;\r\n  if (long < -51 && long > -54) {\r\n    mtmZone = 1;\r\n  }\r\n  if (long < -54 && long > -57) {\r\n    mtmZone = 2;\r\n  }\r\n  if (long < -57 && long > -60) {\r\n    mtmZone = 3;\r\n  }\r\n  if (long < -60 && long > -63) {\r\n    mtmZone = 4;\r\n  }\r\n  if (long < -63 && long > -66) {\r\n    mtmZone = 5;\r\n  }\r\n  if (long < -66 && long > -69) {\r\n    mtmZone = 6;\r\n  }\r\n  if (long < -69 && long > -72) {\r\n    mtmZone = 7;\r\n  }\r\n  if (long < -72 && long > -75) {\r\n    mtmZone = 8;\r\n  }\r\n  if (long < -75 && long > -78) {\r\n    mtmZone = 9;\r\n  }\r\n  if (long < -78 && long > -81) {\r\n    mtmZone = 10;\r\n  }\r\n  return mtmZone;\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\n/**\r\n * Base map controller\r\n */\r\nexport class MapController {\r\n\r\n  /**\r\n   * OL Map\r\n   */\r\n  protected olMap: OlMap;\r\n\r\n  /**\r\n   * Array of observer keys\r\n   */\r\n  protected observerKeys: string[] = [];\r\n\r\n  /**\r\n   * Return the OL map this controller is bound to\r\n   * @returns OL Map\r\n   */\r\n  getOlMap(): OlMap {\r\n    return this.olMap;\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap !== undefined && this.getOlMap() !== undefined) {\r\n      throw new Error('This controller is already bound to a map.');\r\n    }\r\n\r\n    if (olMap === undefined) {\r\n      this.teardownObservers();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    this.observerKeys.forEach((key: string) => unByKey(key));\r\n    this.observerKeys = [];\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlMapEvent from 'ol/MapEvent';\r\n\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport * as oleasing from 'ol/easing';\r\nimport * as olproj from 'ol/proj';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlView from 'ol/View';\r\n\r\nimport { MapViewAction } from '../map.enums';\r\nimport { MapExtent, MapViewState } from '../map.interface';\r\nimport { getScaleFromResolution, viewStatesAreEqual } from '../map.utils';\r\nimport { MapController } from './controller';\r\n\r\nexport interface MapViewControllerOptions {\r\n  stateHistory: boolean;\r\n}\r\n\r\n/**\r\n * Controller to handle map view interactions\r\n */\r\nexport class MapViewController extends MapController {\r\n  /**\r\n   * Observable of the current resolution\r\n   */\r\n  resolution$ = new BehaviorSubject<number>(undefined);\r\n\r\n  /**\r\n   * Observable of the current state\r\n   */\r\n  state$ = new BehaviorSubject<MapViewState>(undefined);\r\n\r\n  /**\r\n   * View Padding\r\n   */\r\n  padding = [0, 0, 0, 0];\r\n\r\n  /**\r\n   * Max zoom after set extent\r\n   */\r\n  maxZoomOnExtent = 19;\r\n\r\n  /**\r\n   * Extent stream\r\n   */\r\n  private extent$ = new Subject<{ extent: MapExtent; action: MapViewAction }>();\r\n\r\n  /**\r\n   * Subscription to the movement stream\r\n   */\r\n  private extent$$: Subscription;\r\n\r\n  /**\r\n   * History of states\r\n   */\r\n  private states: MapViewState[] = [];\r\n\r\n  /**\r\n   * Current state index\r\n   */\r\n  private stateIndex: number = 0;\r\n\r\n  /**\r\n   * Whether the view controller should keep the view's state history\r\n   */\r\n  get stateHistory(): boolean {\r\n    return this.options ? this.options.stateHistory === true : false;\r\n  }\r\n\r\n  /**\r\n   * OL View\r\n   */\r\n  get olView(): OlView {\r\n    return this.olMap.getView();\r\n  }\r\n\r\n  constructor(private options?: MapViewControllerOptions) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    super.setOlMap(olMap);\r\n    this.setupObservers();\r\n  }\r\n\r\n  /**\r\n   * Observe move moveend and subscribe to the extent stream\r\n   */\r\n  setupObservers() {\r\n    if (this.stateHistory === true) {\r\n      this.observerKeys.push(\r\n        this.olMap.on('moveend', (event: OlMapEvent) => this.onMoveEnd(event))\r\n      );\r\n    }\r\n\r\n    this.extent$$ = this.extent$\r\n      .pipe(debounceTime(25))\r\n      .subscribe((value: { extent: MapExtent; action: MapViewAction }) => {\r\n        this.setExtent(value.extent, value.action);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    super.teardownObservers();\r\n    if (this.extent$$ !== undefined) {\r\n      this.extent$$.unsubscribe();\r\n      this.extent$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the view's OL projection\r\n   * @returns OL projection\r\n   */\r\n  getOlProjection(): OlProjection {\r\n    return this.olView.getProjection();\r\n  }\r\n\r\n  /**\r\n   * Get the current map view center\r\n   * @param projection Output projection\r\n   * @returns Center\r\n   */\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    let center = this.olView.getCenter();\r\n    if (projection && center) {\r\n      center = olproj.transform(center, this.getOlProjection(), projection);\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * Get the current view extent\r\n   * @param projection Output projection\r\n   * @returns Extent\r\n   */\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    let extent = this.olView.calculateExtent(this.olMap.getSize());\r\n    if (projection && extent) {\r\n      extent = olproj.transformExtent(\r\n        extent,\r\n        this.getOlProjection(),\r\n        projection\r\n      );\r\n    }\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * Get the current scale\r\n   * @param dpi Dot per inches\r\n   * @returns View scale\r\n   */\r\n  getScale(dpi = 96) {\r\n    return getScaleFromResolution(\r\n      this.getResolution(),\r\n      this.getOlProjection().getUnits(),\r\n      dpi\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current resolution\r\n   * @returns Projection denominator\r\n   */\r\n  getResolution(): number {\r\n    return this.olView.getResolution();\r\n  }\r\n\r\n  /**\r\n   * Get the current zoom level\r\n   * @returns Zoom level\r\n   */\r\n  getZoom(): number {\r\n    return Math.round(this.olView.getZoom());\r\n  }\r\n\r\n  /**\r\n   * Zoom in\r\n   */\r\n  zoomIn() {\r\n    this.zoomTo(this.olView.getZoom() + 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom out\r\n   */\r\n  zoomOut() {\r\n    this.zoomTo(this.olView.getZoom() - 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom to specific zoom level\r\n   * @param zoom Zoom level\r\n   */\r\n  zoomTo(zoom: number) {\r\n    this.olView.cancelAnimations();\r\n    this.olView.animate({\r\n      zoom,\r\n      duration: 250,\r\n      easing: oleasing.easeOut\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Move to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to move to\r\n   */\r\n  moveToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({ extent, action: MapViewAction.Move });\r\n  }\r\n\r\n  /**\r\n   * Zoom to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to zoom to\r\n   */\r\n  zoomToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({ extent, action: MapViewAction.Zoom });\r\n  }\r\n\r\n  /**\r\n   * Return the current view rotation\r\n   * @returns Rotation angle in degrees\r\n   */\r\n  getRotation(): number {\r\n    return this.olView.getRotation();\r\n  }\r\n\r\n  /**\r\n   * Reset the view rotation to 0\r\n   */\r\n  resetRotation() {\r\n    this.olView.animate({ rotation: 0 });\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a previous state\r\n   * @returns True if the view has a previous state\r\n   */\r\n  hasPreviousState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex > 0;\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a next state\r\n   * @returns True if the view has a next state\r\n   */\r\n  hasNextState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex < this.states.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Restore the previous view state\r\n   */\r\n  previousState() {\r\n    if (this.hasPreviousState()) {\r\n      this.setStateIndex(this.stateIndex - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore the next view state\r\n   */\r\n  nextState() {\r\n    if (this.hasNextState()) {\r\n      this.setStateIndex(this.stateIndex + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the state history\r\n   */\r\n  clearStateHistory() {\r\n    this.states = [];\r\n    this.stateIndex = 0;\r\n  }\r\n\r\n  /**\r\n   * Update the the view to it's intial state\r\n   */\r\n  setInitialState() {\r\n    if (this.states.length > 0) {\r\n      this.setStateIndex(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move to the extent retrieved from the stream\r\n   * @param extent Extent\r\n   * @param action Either zoom or move\r\n   * @param animation With or without animation to the target extent.\r\n   */\r\n  private setExtent(\r\n    extent: MapExtent,\r\n    action: MapViewAction,\r\n    animation: boolean = true\r\n  ) {\r\n    const olView = this.olView;\r\n    olView.cancelAnimations();\r\n    const duration = animation ? 500 : 0;\r\n    const zoom = olView.getZoom();\r\n\r\n    const fromCenter = olView.getCenter();\r\n    const toCenter = [\r\n      extent[0] + (extent[2] - extent[0]) / 2,\r\n      extent[1] + (extent[3] - extent[1]) / 2\r\n    ];\r\n    const distCenter = Math.sqrt(\r\n      Math.pow(fromCenter[0] - toCenter[0], 2) +\r\n        Math.pow(fromCenter[1] - toCenter[1], 2)\r\n    );\r\n    const fromExtent = olView.calculateExtent();\r\n    const fromSize = Math.sqrt(\r\n      Math.pow(fromExtent[2] - fromExtent[0], 2) +\r\n        Math.pow(fromExtent[3] - fromExtent[1], 2)\r\n    );\r\n    const toSize = Math.sqrt(\r\n      Math.pow(extent[2] - extent[0], 2) + Math.pow(extent[3] - extent[1], 2)\r\n    );\r\n    const moySize = (toSize + fromSize) / 2;\r\n    const xSize = distCenter / moySize;\r\n\r\n    const maxZoom =\r\n      action === MapViewAction.Move || zoom > this.maxZoomOnExtent\r\n        ? zoom\r\n        : this.maxZoomOnExtent;\r\n\r\n    olView.fit(extent, {\r\n      maxZoom,\r\n      padding: this.padding,\r\n      duration: xSize > 4 ? 0 : duration\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set the view state index\r\n   * @param index State index\r\n   */\r\n  private setStateIndex(index: number) {\r\n    this.stateIndex = index;\r\n    this.setState(this.states[index]);\r\n  }\r\n\r\n  /**\r\n   * Set the view state\r\n   * @param state View state\r\n   */\r\n  private setState(state: MapViewState) {\r\n    this.olView.animate({\r\n      resolution: state.resolution,\r\n      center: state.center,\r\n      duration: 0\r\n    });\r\n  }\r\n\r\n  /**\r\n   * On move end, get the view state and record it.\r\n   * @param event Map event\r\n   */\r\n  private onMoveEnd(event: OlMapEvent) {\r\n    const resolution = this.getResolution();\r\n    if (this.resolution$.value !== resolution) {\r\n      this.resolution$.next(resolution);\r\n    }\r\n\r\n    const state = {\r\n      resolution,\r\n      center: this.getCenter(),\r\n      zoom: this.getZoom()\r\n    };\r\n\r\n    if (this.stateHistory === true) {\r\n      const stateIndex = this.stateIndex;\r\n      const stateAtIndex =\r\n        this.states.length === 0 ? undefined : this.states[stateIndex];\r\n      if (!viewStatesAreEqual(state, stateAtIndex)) {\r\n        this.states = this.states.slice(0, stateIndex + 1).concat([state]);\r\n        this.stateIndex = this.states.length - 1;\r\n      }\r\n    }\r\n\r\n    this.state$.next(state);\r\n  }\r\n}\r\n","import olMap from 'ol/Map';\r\nimport olView from 'ol/View';\r\nimport olFeature from 'ol/Feature';\r\nimport olGeolocation from 'ol/Geolocation';\r\nimport olControlAttribution from 'ol/control/Attribution';\r\nimport olControlScaleLine from 'ol/control/ScaleLine';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport olCircle from 'ol/geom/Circle';\r\n\r\nimport proj4 from 'proj4';\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\n\r\nimport { Layer } from '../../layer/shared/layers';\r\nimport { Overlay } from '../../overlay/shared/overlay';\r\n\r\nimport { LayerWatcher } from '../utils/layer-watcher';\r\nimport {\r\n  MapViewOptions,\r\n  MapOptions,\r\n  MapAttributionOptions,\r\n  MapScaleLineOptions,\r\n  MapExtent\r\n} from './map.interface';\r\nimport { MapViewController } from './controllers/view';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\n\r\n// TODO: This class is messy. Clearly define it's scope and the map browser's.\r\n// Move some stuff into controllers.\r\nexport class IgoMap {\r\n  public ol: olMap;\r\n  public offlineButtonToggle$ = new BehaviorSubject<boolean>(false);\r\n  public offlineButtonState: boolean = false;\r\n  public layers$ = new BehaviorSubject<Layer[]>([]);\r\n  public status$: Subject<SubjectStatus>;\r\n  public geolocation$ = new BehaviorSubject<olGeolocation>(undefined);\r\n  public geolocationFeature: olFeature;\r\n  public bufferGeom: olCircle;\r\n  public bufferFeature: olFeature;\r\n  public buffer: Overlay;\r\n  public overlay: Overlay;\r\n  public viewController: MapViewController;\r\n\r\n  public bufferDataSource: FeatureDataSource;\r\n\r\n  private layerWatcher: LayerWatcher;\r\n  private geolocation: olGeolocation;\r\n  private geolocation$$: Subscription;\r\n\r\n  private options: MapOptions;\r\n  private defaultOptions: Partial<MapOptions> = {\r\n    controls: { attribution: false }\r\n  };\r\n\r\n  get layers(): Layer[] {\r\n    return this.layers$.value;\r\n  }\r\n\r\n  get projection(): string {\r\n    return this.viewController.getOlProjection().getCode();\r\n  }\r\n\r\n  constructor(options?: MapOptions) {\r\n    this.options = Object.assign({}, this.defaultOptions, options);\r\n    this.layerWatcher = new LayerWatcher();\r\n    this.status$ = this.layerWatcher.status$;\r\n    olproj4.register(proj4);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    const controls = [];\r\n    if (this.options.controls) {\r\n      if (this.options.controls.attribution) {\r\n        const attributionOpt = (this.options.controls.attribution === true\r\n          ? {}\r\n          : this.options.controls.attribution) as MapAttributionOptions;\r\n        controls.push(new olControlAttribution(attributionOpt));\r\n      }\r\n      if (this.options.controls.scaleLine) {\r\n        const scaleLineOpt = (this.options.controls.scaleLine === true\r\n          ? {}\r\n          : this.options.controls.scaleLine) as MapScaleLineOptions;\r\n        controls.push(new olControlScaleLine(scaleLineOpt));\r\n      }\r\n    }\r\n    let interactions = {};\r\n    if (this.options.interactions === false) {\r\n      interactions = {\r\n        altShiftDragRotate: false,\r\n        doubleClickZoom: false,\r\n        keyboard: false,\r\n        mouseWheelZoom: false,\r\n        shiftDragZoom: false,\r\n        dragPan: false,\r\n        pinchRotate: false,\r\n        pinchZoom: false\r\n      };\r\n    }\r\n\r\n    this.ol = new olMap({\r\n      interactions: olinteraction.defaults(interactions),\r\n      controls\r\n    });\r\n\r\n    this.setView(this.options.view || {});\r\n    this.viewController = new MapViewController({\r\n      stateHistory: true\r\n    });\r\n    this.viewController.setOlMap(this.ol);\r\n    this.overlay = new Overlay(this);\r\n    this.buffer = new Overlay(this);\r\n  }\r\n\r\n  setTarget(id: string) {\r\n    this.ol.setTarget(id);\r\n    if (id !== undefined) {\r\n      this.layerWatcher.subscribe(() => {}, null);\r\n    } else {\r\n      this.layerWatcher.unsubscribe();\r\n    }\r\n  }\r\n\r\n  updateView(options: MapViewOptions) {\r\n    const currentView = this.ol.getView();\r\n    const viewOptions = Object.assign(\r\n      {\r\n        zoom: currentView.getZoom()\r\n      },\r\n      currentView.getProperties()\r\n    );\r\n\r\n    this.setView(Object.assign(viewOptions, options));\r\n    if (options.maxZoomOnExtent) {\r\n      this.viewController.maxZoomOnExtent = options.maxZoomOnExtent;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the map view\r\n   * @param options Map view options\r\n   */\r\n  setView(options: MapViewOptions) {\r\n    if (this.viewController !== undefined) {\r\n      this.viewController.clearStateHistory();\r\n    }\r\n\r\n    const view = new olView(options);\r\n    this.ol.setView(view);\r\n\r\n    this.unsubscribeGeolocate();\r\n    if (options) {\r\n      if (options.center) {\r\n        const projection = view.getProjection().getCode();\r\n        const center = olproj.fromLonLat(options.center, projection);\r\n        view.setCenter(center);\r\n      }\r\n\r\n      if (options.geolocate) {\r\n        this.geolocate(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deprecated\r\n   * TODO: Move to ViewController and update every place it's used\r\n   */\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    return this.viewController.getCenter(projection);\r\n  }\r\n\r\n  /**\r\n   * Deprecated\r\n   * TODO: Move to ViewController and update every place it's used\r\n   */\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    return this.viewController.getExtent(projection);\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getZoom(): number {\r\n    return this.viewController.getZoom();\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (!baseLayer) {\r\n      return;\r\n    }\r\n\r\n    for (const bl of this.getBaseLayers()) {\r\n      bl.visible = false;\r\n    }\r\n\r\n    baseLayer.visible = true;\r\n\r\n    this.viewController.olView.setMinZoom(\r\n      baseLayer.dataSource.options.minZoom || (this.options.view || {}).minZoom\r\n    );\r\n    this.viewController.olView.setMaxZoom(\r\n      baseLayer.dataSource.options.maxZoom || (this.options.view || {}).maxZoom\r\n    );\r\n  }\r\n\r\n  getBaseLayers(): Layer[] {\r\n    return this.layers.filter((layer: Layer) => layer.baseLayer === true);\r\n  }\r\n\r\n  getLayerById(id: string): Layer {\r\n    return this.layers.find((layer: Layer) => layer.id && layer.id === id);\r\n  }\r\n\r\n  getLayerByAlias(alias: string): Layer {\r\n    return this.layers.find(\r\n      (layer: Layer) => layer.alias && layer.alias === alias\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add a single layer\r\n   * @param layer Layer to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayer(layer: Layer, push = true) {\r\n    this.addLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add many layers\r\n   * @param layers Layers to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayers(layers: Layer[], push = true) {\r\n    let incrementArray = 0;\r\n    const addedLayers = layers\r\n      .map((layer: Layer) => this.doAddLayer(layer, incrementArray++))\r\n      .filter((layer: Layer | undefined) => layer !== undefined);\r\n    this.setLayers([].concat(this.layers, addedLayers));\r\n  }\r\n\r\n  /**\r\n   * Remove a single layer\r\n   * @param layer Layer to remove\r\n   */\r\n  removeLayer(layer: Layer) {\r\n    this.removeLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove many layers\r\n   * @param layers Layers to remove\r\n   */\r\n  removeLayers(layers: Layer[]) {\r\n    const newLayers = this.layers$.value.slice(0);\r\n    const layersToRemove = [];\r\n    layers.forEach((layer: Layer) => {\r\n      const index = this.getLayerIndex(layer);\r\n      if (index >= 0) {\r\n        layersToRemove.push(layer);\r\n        newLayers.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    layersToRemove.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.setLayers(newLayers);\r\n  }\r\n\r\n  /**\r\n   * Remove all layers\r\n   */\r\n  removeAllLayers() {\r\n    this.layers.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.layers$.next([]);\r\n  }\r\n\r\n  raiseLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index > 0) {\r\n      this.moveLayer(layer, index, index - 1);\r\n    }\r\n  }\r\n\r\n  lowerLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index < this.layers.length - 1) {\r\n      this.moveLayer(layer, index, index + 1);\r\n    }\r\n  }\r\n\r\n  moveLayer(layer: Layer, from: number, to: number) {\r\n    const layerTo = this.layers[to];\r\n    const zIndexTo = layerTo.zIndex;\r\n    const zIndexFrom = layer.zIndex;\r\n\r\n    if (layerTo.baseLayer) {\r\n      return;\r\n    }\r\n\r\n    layer.zIndex = zIndexTo;\r\n    layerTo.zIndex = zIndexFrom;\r\n\r\n    this.layers[to] = layer;\r\n    this.layers[from] = layerTo;\r\n    this.layers$.next(this.layers.slice(0));\r\n  }\r\n\r\n  /**\r\n   * Add a layer to the OL map and start watching. If the layer is already\r\n   * added to this map, make it visible but don't add it one again.\r\n   * @param layer Layer\r\n   * @returns The layer added, if any\r\n   */\r\n  private doAddLayer(layer: Layer, length: number) {\r\n    if (layer.baseLayer && layer.visible) {\r\n      this.changeBaseLayer(layer);\r\n    }\r\n\r\n    const existingLayer = this.getLayerById(layer.id);\r\n    if (existingLayer !== undefined) {\r\n      existingLayer.visible = true;\r\n      return;\r\n    }\r\n\r\n    if (layer.zIndex === undefined || layer.zIndex === 0) {\r\n      const offset = layer.baseLayer ? 1 : 10;\r\n      layer.zIndex = this.layers.length + offset + length;\r\n    }\r\n\r\n    layer.setMap(this);\r\n    this.layerWatcher.watchLayer(layer);\r\n    this.ol.addLayer(layer.ol);\r\n\r\n    return layer;\r\n  }\r\n\r\n  /**\r\n   * Remove a layer from the OL map and stop watching\r\n   * @param layer Layer\r\n   */\r\n  private doRemoveLayer(layer: Layer) {\r\n    this.layerWatcher.unwatchLayer(layer);\r\n    this.ol.removeLayer(layer.ol);\r\n    layer.setMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Update the layers observable\r\n   * @param layers Layers\r\n   */\r\n  private setLayers(layers: Layer[]) {\r\n    this.layers$.next(this.sortLayersByZIndex(layers).slice(0));\r\n  }\r\n\r\n  /**\r\n   * Sort layers by descending zIndex\r\n   * @param layers Array of layers\r\n   * @returns The original array, sorted by zIndex\r\n   */\r\n  private sortLayersByZIndex(layers: Layer[]) {\r\n    // Sort by descending zIndex\r\n    return layers.sort(\r\n      (layer1: Layer, layer2: Layer) => layer2.zIndex - layer1.zIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get layer index in the map's inenr array of layers\r\n   * @param layer Layer\r\n   * @returns The layer index\r\n   */\r\n  private getLayerIndex(layer: Layer) {\r\n    return this.layers.findIndex((_layer: Layer) => _layer === layer);\r\n  }\r\n\r\n  // TODO: Create a GeolocationController with everything below\r\n  geolocate(track = false) {\r\n    let first = true;\r\n    if (this.geolocation$$) {\r\n      track = this.geolocation.getTracking();\r\n      this.unsubscribeGeolocate();\r\n    }\r\n    this.startGeolocation();\r\n\r\n    this.geolocation$$ = this.geolocation$.subscribe(geolocation => {\r\n      if (!geolocation) {\r\n        return;\r\n      }\r\n      const accuracy = geolocation.getAccuracy();\r\n      if (accuracy < 10000) {\r\n        const geometry = geolocation.getAccuracyGeometry();\r\n        const extent = geometry.getExtent();\r\n        if (\r\n          this.geolocationFeature &&\r\n          this.overlay.dataSource.ol.getFeatureById(\r\n            this.geolocationFeature.getId()\r\n          )\r\n        ) {\r\n          this.overlay.dataSource.ol.removeFeature(this.geolocationFeature);\r\n        }\r\n\r\n        if (this.bufferFeature) {\r\n          this.buffer.dataSource.ol.removeFeature(this.bufferFeature);\r\n        }\r\n\r\n        this.geolocationFeature = new olFeature({ geometry });\r\n        this.geolocationFeature.setId('geolocationFeature');\r\n        this.overlay.addOlFeature(this.geolocationFeature);\r\n\r\n        if (this.ol.getView().options_.buffer) {\r\n          const bufferRadius = this.ol.getView().options_.buffer.bufferRadius;\r\n          const coordinates = geolocation.getPosition();\r\n          this.bufferGeom = new olCircle(coordinates, bufferRadius);\r\n          const bufferStroke = this.ol.getView().options_.buffer.bufferStroke;\r\n          const bufferFill = this.ol.getView().options_.buffer.bufferFill;\r\n\r\n          let bufferText;\r\n          if (this.ol.getView().options_.buffer.showBufferRadius) {\r\n            bufferText = bufferRadius.toString() + 'm';\r\n          } else {\r\n            bufferText = '';\r\n          }\r\n\r\n          this.bufferFeature = new olFeature(this.bufferGeom);\r\n          this.bufferFeature.setId('bufferFeature');\r\n          this.bufferFeature.set('bufferStroke', bufferStroke);\r\n          this.bufferFeature.set('bufferFill', bufferFill);\r\n          this.bufferFeature.set('bufferText', bufferText);\r\n          this.buffer.addOlFeature(this.bufferFeature);\r\n        }\r\n        if (first) {\r\n          this.viewController.zoomToExtent(extent);\r\n        }\r\n      } else if (first) {\r\n        const view = this.ol.getView();\r\n        const coordinates = geolocation.getPosition();\r\n        view.setCenter(coordinates);\r\n        view.setZoom(14);\r\n      }\r\n      if (track) {\r\n        this.unsubscribeGeolocate();\r\n      }\r\n      first = false;\r\n    });\r\n  }\r\n\r\n  unsubscribeGeolocate() {\r\n    this.stopGeolocation();\r\n    if (this.geolocation$$) {\r\n      this.geolocation$$.unsubscribe();\r\n      this.geolocation$$ = undefined;\r\n    }\r\n  }\r\n\r\n  private startGeolocation() {\r\n    if (!this.geolocation) {\r\n      this.geolocation = new olGeolocation({\r\n        trackingOptions: {\r\n          enableHighAccuracy: true\r\n        },\r\n        projection: this.projection,\r\n        tracking: true\r\n      });\r\n\r\n      this.geolocation.on('change', evt => {\r\n        this.geolocation$.next(this.geolocation);\r\n      });\r\n    } else {\r\n      this.geolocation.setTracking(true);\r\n    }\r\n  }\r\n\r\n  private stopGeolocation() {\r\n    if (this.geolocation) {\r\n      this.geolocation.setTracking(false);\r\n    }\r\n  }\r\n\r\n  onOfflineToggle(offline: boolean) {\r\n    this.offlineButtonToggle$.next(offline);\r\n    this.offlineButtonState = offline;\r\n  }\r\n}\r\n","import { Directive, AfterViewInit } from '@angular/core';\r\nimport { NetworkService, ConnectionState, MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { IgoMap } from './map';\r\nimport { MapBrowserComponent } from '../map-browser/map-browser.component';\r\nimport { FeatureDataSourceOptions } from '../../datasource/shared/datasources/feature-datasource.interface';\r\nimport { XYZDataSourceOptions } from '../../datasource/shared/datasources/xyz-datasource.interface';\r\nimport { MVTDataSourceOptions } from '../../datasource/shared/datasources/mvt-datasource.interface';\r\nimport { ClusterDataSourceOptions } from '../../datasource/shared/datasources/cluster-datasource.interface';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\n@Directive({\r\n    selector: '[igoMapOffline]'\r\n  })\r\nexport class MapOfflineDirective implements AfterViewInit {\r\n\r\n  private component: MapBrowserComponent;\r\n  private offlineButtonStatus: boolean = false;\r\n  private networkState: ConnectionState = {\r\n    connection: true\r\n  };\r\n  private offlineButtonState: ConnectionState = {\r\n    connection: true\r\n  };\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    component: MapBrowserComponent,\r\n    private networkService: NetworkService,\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService\r\n    ) {\r\n      this.component = component;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      this.map.offlineButtonToggle$.subscribe((offlineButtonToggle: boolean) => {\r\n        this.offlineButtonStatus = offlineButtonToggle;\r\n        const translate = this.languageService.translate;\r\n        if (this.offlineButtonStatus && this.networkState.connection) {\r\n          const message = translate.instant('igo.geo.network.offline.message');\r\n          const title = translate.instant('igo.geo.network.offline.title');\r\n          this.messageService.info(message, title);\r\n          this.offlineButtonState.connection = false;\r\n          this.changeLayer();\r\n        } else if (!this.offlineButtonStatus && !this.networkState.connection) {\r\n          const message = translate.instant('igo.geo.network.offline.message');\r\n          const title = translate.instant('igo.geo.network.offline.title');\r\n          this.messageService.info(message, title);\r\n          this.offlineButtonState.connection = false;\r\n          this.changeLayer();\r\n        } else if (!this.offlineButtonStatus && this.networkState.connection) {\r\n          let message;\r\n          let title;\r\n          const messageObs = translate.get('igo.geo.network.online.message');\r\n          const titleObs = translate.get('igo.geo.network.online.title');\r\n          messageObs.subscribe((message1: string) => {\r\n            message = message1;\r\n          });\r\n          titleObs.subscribe((title1: string) => {\r\n            title = title1;\r\n          });\r\n          this.messageService.info(message, title);\r\n          this.offlineButtonState.connection = true;\r\n          this.changeLayer();\r\n        }\r\n      });\r\n\r\n      this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n        this.networkState = state;\r\n        if (!this.offlineButtonStatus) {\r\n          this.changeLayer();\r\n        }\r\n      });\r\n\r\n      this.map.layers$.subscribe((layers: Layer[]) => {\r\n        this.changeLayer();\r\n      });\r\n    }\r\n\r\n  private changeLayer() {\r\n    let sourceOptions;\r\n    const layerList = this.map.layers$.value;\r\n    layerList.forEach(layer => {\r\n      if (layer.options.sourceOptions) {\r\n        if (layer.options.sourceOptions.type === 'mvt') {\r\n          sourceOptions = (layer.options.sourceOptions as MVTDataSourceOptions);\r\n          layer.ol.getSource().clear();\r\n        } else if (layer.options.sourceOptions.type === 'xyz') {\r\n          sourceOptions = (layer.options.sourceOptions as XYZDataSourceOptions);\r\n        } else if (layer.options.sourceOptions.type === 'vector') {\r\n          sourceOptions = (layer.options.sourceOptions as FeatureDataSourceOptions);\r\n        } else if (layer.options.sourceOptions.type === 'cluster') {\r\n          sourceOptions = (layer.options.sourceOptions as ClusterDataSourceOptions);\r\n        } else {\r\n          if (this.networkState.connection === false || this.offlineButtonState.connection === false) {\r\n            layer.ol.setMaxResolution(0);\r\n            return;\r\n          } else if (this.networkState.connection === true || this.offlineButtonState.connection === true) {\r\n            layer.ol.setMaxResolution(Infinity);\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (sourceOptions.pathOffline && this.networkState.connection === false ||\r\n          sourceOptions.pathOffline && this.offlineButtonState.connection === false) {\r\n            if (sourceOptions.type === 'vector' || sourceOptions.type === 'cluster') {\r\n              return;\r\n            }\r\n            layer.ol.getSource().setUrl(sourceOptions.pathOffline);\r\n        } else if (sourceOptions.pathOffline && this.networkState.connection === false ||\r\n          sourceOptions.pathOffline && this.offlineButtonState.connection === true) {\r\n            if (sourceOptions.type === 'vector' || sourceOptions.type === 'cluster') {\r\n              return;\r\n            }\r\n            layer.ol.getSource().setUrl(sourceOptions.url);\r\n        } else {\r\n          if (this.networkState.connection === false || this.offlineButtonState.connection === false) {\r\n            layer.ol.setMaxResolution(0);\r\n          } else if (this.networkState.connection === true || this.offlineButtonState.connection === true) {\r\n            layer.ol.setMaxResolution(Infinity);\r\n          }\r\n        }\r\n      } else {\r\n        if (this.networkState.connection === false || this.offlineButtonState.connection === false) {\r\n          layer.ol.setMaxResolution(0);\r\n        } else if (this.networkState.connection === true || this.offlineButtonState.connection === true) {\r\n          layer.ol.setMaxResolution(Infinity);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  Self,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\n\r\nimport { transform } from 'ol/proj';\r\nimport { MediaService } from '@igo2/core';\r\n/**\r\n * This directive return the pointer coordinate (on click or pointermove)\r\n * in [longitude, latitude], delayed by in input (pointerMoveDelay)\r\n * to avoid too many emitted values.\r\n */\r\n@Directive({\r\n  selector: '[igoPointerPosition]'\r\n})\r\nexport class PointerPositionDirective implements OnInit, OnDestroy {\r\n\r\n  private lastTimeoutRequest;\r\n\r\n  /**\r\n   * Listener to the pointer move event\r\n   */\r\n  private pointerMoveListener: ListenerFunction;\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * Delay before emitting an event\r\n   */\r\n  @Input() pointerPositionDelay: number = 1000;\r\n\r\n  /**\r\n   * Event emitted when the pointer move, delayed by pointerMoveDelay\r\n   */\r\n  @Output() pointerPositionCoord = new EventEmitter<[number, number]>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  get mapProjection(): string {\r\n    return (this.component.map as IgoMap).projection;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private mediaService: MediaService\r\n  ) { }\r\n\r\n  /**\r\n   * Start listening to pointermove\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.listenToMapPointerMove();\r\n    this.listenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to pointermove\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.unlistenToMapPointerMove();\r\n    this.unlistenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * On map pointermove\r\n   */\r\n  private listenToMapPointerMove() {\r\n    this.pointerMoveListener = this.map.ol.on(\r\n      'pointermove',\r\n      (event: OlMapBrowserPointerEvent) => this.onPointerEvent(event, this.pointerPositionDelay)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * On map click\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onPointerEvent(event, 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map pointermove\r\n   */\r\n  private unlistenToMapPointerMove() {\r\n    this.map.ol.un(this.pointerMoveListener.type, this.pointerMoveListener.listener);\r\n    this.pointerMoveListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * emit delayed coordinate (longitude, latitude array) based on pointerMoveDelay or on click\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onPointerEvent(event: OlMapBrowserPointerEvent, delay: number) {\r\n    if (event.dragging || this.mediaService.isTouchScreen()) {return; }\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves\r\n      clearTimeout(this.lastTimeoutRequest);\r\n    }\r\n\r\n    const lonlat = transform(event.coordinate, this.mapProjection, 'EPSG:4326');\r\n    this.lastTimeoutRequest = setTimeout(() => {\r\n      this.pointerPositionCoord.emit(lonlat);\r\n    }, delay);\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  Self,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\n\r\nimport { transform } from 'ol/proj';\r\nimport { Subscription, BehaviorSubject, fromEvent } from 'rxjs';\r\nimport { MediaService } from '@igo2/core';\r\n/**\r\n * This directive return the pointer coordinate (on click or pointermove)\r\n * in [longitude, latitude], delayed by in input (pointerMoveDelay)\r\n * to avoid too many emitted values.\r\n * User needs to hold the key defined by pointerByKeyEventKeyCode to emit a coord.\r\n */\r\n@Directive({\r\n  selector: '[igoPointerPositionByKey]'\r\n})\r\nexport class PointerPositionByKeyDirective implements OnInit, OnDestroy {\r\n\r\n  private keyDown$$: Subscription;\r\n  private keyUp$$: Subscription;\r\n  private definedKeyIsDown$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private lastTimeoutRequest;\r\n\r\n  /**\r\n   * Listener to the pointer move event\r\n   */\r\n  private pointerMoveListener: ListenerFunction;\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * Delay before emitting an event\r\n   */\r\n  @Input() pointerPositionByKeyDelay: number = 1000;\r\n\r\n  /**\r\n   * The key pressed (must be hold) to trigger the output\r\n   */\r\n  @Input() pointerPositionByKeyCode: number = 17;\r\n\r\n  /**\r\n   * Event emitted when the pointer move, delayed by pointerMoveDelay\r\n   */\r\n  @Output() pointerPositionByKeyCoord = new EventEmitter<[number, number]>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  get mapProjection(): string {\r\n    return (this.component.map as IgoMap).projection;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private mediaService: MediaService\r\n  ) { }\r\n\r\n  /**\r\n   * Start listening to pointermove\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.listenToMapPointerMove();\r\n    this.listenToMapClick();\r\n    this.subscribeToKeyDown();\r\n    this.subscribeToKeyUp();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to pointermove\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.unlistenToMapPointerMove();\r\n    this.unlistenToMapClick();\r\n    this.unsubscribeToKeyDown();\r\n    this.unsubscribeToKeyUp();\r\n  }\r\n\r\n  /**\r\n   * On map pointermove\r\n   */\r\n  private listenToMapPointerMove() {\r\n    this.pointerMoveListener = this.map.ol.on(\r\n      'pointermove',\r\n      (event: OlMapBrowserPointerEvent) => this.onPointerEvent(event, this.pointerPositionByKeyDelay)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * On map click\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onPointerEvent(event, 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Subscribe to user defined key keyDown, hold down to activate the emit\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.unsubscribeToKeyDown();\r\n    this.keyDown$$ = fromEvent(document, 'keydown')\r\n    .subscribe((event: KeyboardEvent) => {\r\n      // On user defined key is down,\r\n      if (event.keyCode === this.pointerPositionByKeyCode) {\r\n        this.definedKeyIsDown$.next(true);\r\n        return;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Subscribe to user defined key keyUp, release to desactivate the emit\r\n   */\r\n  private subscribeToKeyUp() {\r\n    this.unsubscribeToKeyUp();\r\n    this.keyUp$$ = fromEvent(document, 'keyup')\r\n    .subscribe((event: KeyboardEvent) => {\r\n      // When user defined key is released,\r\n      if (event.keyCode === this.pointerPositionByKeyCode) {\r\n        this.definedKeyIsDown$.next(false);\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map pointermove\r\n   */\r\n  private unlistenToMapPointerMove() {\r\n    this.map.ol.un(this.pointerMoveListener.type, this.pointerMoveListener.listener);\r\n    this.pointerMoveListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n      this.keyDown$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key up\r\n   */\r\n  private unsubscribeToKeyUp() {\r\n    if (this.keyUp$$ !== undefined) {\r\n      this.keyUp$$.unsubscribe();\r\n      this.keyUp$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * emit delayed coordinate (longitude, latitude array) based on pointerMoveDelay or on click\r\n   * User must hold the defined key to allow the emit.\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onPointerEvent(event: OlMapBrowserPointerEvent, delay: number) {\r\n    if (event.dragging || this.mediaService.isTouchScreen()) {return; }\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves\r\n      clearTimeout(this.lastTimeoutRequest);\r\n    }\r\n\r\n    if (this.definedKeyIsDown$.value) {\r\n    const lonlat = transform(event.coordinate, this.mapProjection, 'EPSG:4326');\r\n    this.lastTimeoutRequest = setTimeout(() => {\r\n      this.pointerPositionByKeyCoord.emit(lonlat);\r\n    }, delay);\r\n  }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport proj4 from 'proj4';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Projection } from './projection.interfaces';\r\n\r\n/**\r\n * When injected, this service automatically registers and\r\n * projection defined in the application config. A custom projection\r\n * needs to be registered to be usable by OL.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectionService {\r\n\r\n  constructor(private config: ConfigService) {\r\n    const projections = this.config.getConfig('projections') || [];\r\n    projections.forEach((projection: Projection) => {\r\n      projection.alias = projection.alias ? projection.alias : projection.code;\r\n      this.registerProjection(projection);\r\n    });\r\n\r\n    // register all utm zones\r\n    for (let utmZone = 1; utmZone < 61; utmZone++) {\r\n      const code = utmZone < 10 ? `EPSG:3260${utmZone}` : `EPSG:326${utmZone}`;\r\n      const def = `+proj=utm +zone=${utmZone} +datum=WGS84 +units=m +no_defs`;\r\n      const proj: Projection = { code, def, extent : undefined};\r\n      this.registerProjection(proj);\r\n    }\r\n\r\n    // register all mtm zones\r\n    for (let mtmZone = 1; mtmZone < 11; mtmZone++) {\r\n      const code = mtmZone < 10 ? `EPSG:3218${mtmZone}` : `EPSG:321${80 + mtmZone}`;\r\n      let lon0;\r\n      if (Number(mtmZone) <= 2) {\r\n        lon0 = -50 - Number(mtmZone) * 3;\r\n      } else if (Number(mtmZone) >= 12) {\r\n        lon0 = -81 - (Number(mtmZone) - 12) * 3;\r\n      } else {\r\n        lon0 = -49.5 - Number(mtmZone) * 3;\r\n      }\r\n      const def = `+proj=tmerc +lat_0=0 +lon_0=${lon0} +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"`;\r\n      const proj: Projection = { code, def, extent : undefined};\r\n      this.registerProjection(proj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Define a proj4 projection and register it in OL\r\n   * @param projection Projection\r\n   */\r\n  registerProjection(projection: Projection) {\r\n    proj4.defs(projection.code, projection.def);\r\n    olproj4.register(proj4);\r\n    if (projection.extent) {\r\n      olproj.get(projection.code).setExtent(projection.extent);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-zoom-button',\r\n  templateUrl: './zoom-button.component.html',\r\n  styleUrls: ['./zoom-button.component.scss']\r\n})\r\nexport class ZoomButtonComponent {\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string;\r\n\r\n  get zoom(): number { return this.map.viewController.getZoom(); }\r\n\r\n  get minZoom(): number { return this.map.viewController.olView.getMinZoom() || 1; }\r\n\r\n  get maxZoom(): number { return this.map.viewController.olView.getMaxZoom(); }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-geolocate-button',\r\n  templateUrl: './geolocate-button.component.html',\r\n  styleUrls: ['./geolocate-button.component.scss']\r\n})\r\nexport class GeolocateButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, EventEmitter, Output, AfterViewInit } from '@angular/core';\r\nimport { IgoMap } from '../shared/map';\r\nimport { Observable, BehaviorSubject, Subscription, fromEvent } from 'rxjs';\r\nimport { debounceTime, startWith } from 'rxjs/operators';\r\nimport { ConfigService } from '@igo2/core';\r\n\r\n@Component({\r\n  selector: 'igo-offline-button',\r\n  templateUrl: './offline-button.component.html',\r\n  styleUrls: ['./offline-button.component.scss']\r\n})\r\n\r\nexport class OfflineButtonComponent {\r\n\r\n  btnStyle: string = 'baseStyle';\r\n  colorOff: string = 'rgb(255,255,255)';\r\n\r\n  @Output() change = new EventEmitter<boolean>();\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  @Input() public check: boolean = false;\r\n\r\n  get checked(): boolean {\r\n    return this.check;\r\n  }\r\n\r\n  public visible = false;\r\n\r\n  constructor(\r\n    private config: ConfigService\r\n    ) {\r\n    this.visible = this.config.getConfig('offlineButton') ? true : false;\r\n  }\r\n\r\n  onToggle() {\r\n    this.check = !this.check;\r\n    if (this.check) {\r\n      this.btnStyle = 'toggleStyle';\r\n    } else {\r\n      this.btnStyle = 'baseStyle';\r\n    }\r\n  }\r\n}\r\n","import {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationTriggerMetadata\r\n} from '@angular/animations';\r\n\r\nexport function baseLayersSwitcherSlideInOut(): AnimationTriggerMetadata {\r\n  return trigger('baseLayerSwitcherState', [\r\n    state(\r\n      'collapseIcon',\r\n      style({\r\n        height: '40px',\r\n        width: '40px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'collapseMap',\r\n      style({\r\n        height: '85px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'expand',\r\n      style({\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    transition('collapse => expand', animate('200ms')),\r\n    transition('expand => collapse', animate('200ms'))\r\n  ]);\r\n}\r\n","import { Component, Input, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MediaService, Media } from '@igo2/core';\r\nimport { Layer } from '../../layer';\r\nimport { IgoMap } from '../shared';\r\nimport { baseLayersSwitcherSlideInOut } from './baselayers-switcher.animation';\r\n\r\n@Component({\r\n  selector: 'igo-baselayers-switcher',\r\n  templateUrl: './baselayers-switcher.component.html',\r\n  styleUrls: ['./baselayers-switcher.component.scss'],\r\n  animations: [baseLayersSwitcherSlideInOut()]\r\n})\r\nexport class BaseLayersSwitcherComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get useStaticIcon(): boolean {\r\n    return this._useStaticIcon;\r\n  }\r\n  set useStaticIcon(value: boolean) {\r\n    this._useStaticIcon = value;\r\n  }\r\n  private _useStaticIcon: boolean;\r\n\r\n  public _baseLayers: Layer[] = [];\r\n  public expand = false;\r\n  public showButton = true;\r\n\r\n  private layers$$: Subscription;\r\n\r\n  constructor(private mediaService: MediaService) {\r\n    const media = this.mediaService.media$.value;\r\n    if (media === Media.Mobile && this.useStaticIcon === undefined) {\r\n      this.useStaticIcon = true;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(arrayLayers => {\r\n      this._baseLayers = arrayLayers.filter(l => l.baseLayer);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  collapseOrExpand() {\r\n    if (this.baseLayers.length > 1 || this.useStaticIcon) {\r\n      this.expand = !this.expand;\r\n    } else {\r\n      this.expand = false;\r\n    }\r\n  }\r\n\r\n  get baseLayers(): Layer[] {\r\n    const mapResolution = this.map.viewController.getResolution();\r\n    const mapZoom = this.map.viewController.getZoom();\r\n\r\n    const bl = this._baseLayers.filter(l => {\r\n      return (\r\n        (!l.options.maxResolution ||\r\n          mapResolution <= l.options.maxResolution) &&\r\n        (!l.options.minResolution || mapResolution >= l.options.minResolution) &&\r\n        (!l.options.source.options.maxZoom || mapZoom <= l.options.source.options.maxZoom) &&\r\n        (!l.options.source.options.minZoom || mapZoom >= l.options.source.options.minZoom)\r\n      );\r\n    });\r\n\r\n    const blHidden = bl.filter(l => !l.visible);\r\n    return blHidden.length + 1 === bl.length ? blHidden : bl;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  ApplicationRef\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-mini-basemap',\r\n  templateUrl: './mini-basemap.component.html',\r\n  styleUrls: ['./mini-basemap.component.scss']\r\n})\r\nexport class MiniBaseMapComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n    this.handleMoveEnd();\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get baseLayer(): Layer {\r\n    return this._baseLayer;\r\n  }\r\n  set baseLayer(value: Layer) {\r\n    this._baseLayer = value;\r\n    this.handleBaseLayerChanged(value);\r\n  }\r\n  private _baseLayer: Layer;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  @Input()\r\n  get display(): boolean {\r\n    return this._display;\r\n  }\r\n  set display(value: boolean) {\r\n    this._display = value;\r\n  }\r\n  private _display: boolean;\r\n\r\n  public basemap = new IgoMap({\r\n    controls: {},\r\n    interactions: false\r\n  });\r\n\r\n  @Input() title: string;\r\n\r\n  constructor(\r\n    private layerService: LayerService,\r\n    private appRef: ApplicationRef\r\n  ) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.map.ol.on('moveend', () => this.handleMoveEnd());\r\n    this.handleMoveEnd();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.ol.un('moveend', () => this.handleMoveEnd());\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.map.changeBaseLayer(baseLayer);\r\n    this.appRef.tick();\r\n  }\r\n\r\n  private handleMoveEnd() {\r\n    this.basemap.ol.setView(this.map.ol.getView());\r\n  }\r\n\r\n  private handleBaseLayerChanged(baselayer: Layer) {\r\n    this.basemap.removeAllLayers();\r\n\r\n    const options: any = Object.assign(\r\n      Object.create(baselayer.options),\r\n      baselayer.options,\r\n      {\r\n        visible: true,\r\n        baseLayer: false\r\n      }\r\n    );\r\n\r\n    const layer = this.layerService.createLayer(options);\r\n    this.basemap.addLayer(layer);\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-rotation-button',\r\n  templateUrl: './rotation-button.component.html',\r\n  styleUrls: ['./rotation-button.component.scss']\r\n})\r\nexport class RotationButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get showIfNoRotation(): boolean {\r\n    return this._showIfNoRotation;\r\n  }\r\n  set showIfNoRotation(value: boolean) {\r\n    this._showIfNoRotation = value;\r\n  }\r\n  private _showIfNoRotation: boolean;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  get rotated(): boolean {\r\n    return this.map.viewController.getRotation() !== 0;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  rotationStyle(radians): {} {\r\n    const rotation = 'rotate(' + radians + 'rad)';\r\n    return {\r\n      transform: rotation\r\n    };\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport * as olproj from 'ol/proj';\r\n\r\nexport class EsriStyleGenerator {\r\n  public _converters: any;\r\n  public _renderers: any;\r\n\r\n  constructor() {\r\n    this._converters = {};\r\n    this._converters.esriPMS = EsriStyleGenerator._convertEsriPMS;\r\n    this._converters.esriSFS = EsriStyleGenerator._convertEsriSFS;\r\n    this._converters.esriSLS = EsriStyleGenerator._convertEsriSLS;\r\n    this._converters.esriSMS = EsriStyleGenerator._convertEsriSMS;\r\n    this._converters.esriTS = EsriStyleGenerator._convertEsriTS;\r\n    this._renderers = {};\r\n    this._renderers.uniqueValue = this._renderUniqueValue;\r\n    this._renderers.simple = this._renderSimple;\r\n    this._renderers.classBreaks = this._renderClassBreaks;\r\n  }\r\n  static _convertPointToPixel(point) {\r\n    return point / 0.75;\r\n  }\r\n  static _transformColor(color): [number, number, number, number] {\r\n    // alpha channel is different, runs from 0-255 but in ol3 from 0-1\r\n    return [color[0], color[1], color[2], color[3] / 255];\r\n  }\r\n\r\n  static _getResolutionForScale(scale, units) {\r\n    const dpi = 96;\r\n    const mpu = olproj.METERS_PER_UNIT[units];\r\n    const inchesPerMeter = 39.3701;\r\n    return parseFloat(scale) / (mpu * inchesPerMeter * dpi);\r\n  }\r\n\r\n  /* convert an Esri Text Symbol */\r\n  static _convertEsriTS(symbol) {\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    const text = symbol.text !== undefined ? symbol.text : undefined;\r\n    return new olstyle.Style({\r\n      text: new olstyle.Text({\r\n        fill: new olstyle.Fill({\r\n          color: EsriStyleGenerator._transformColor(symbol.color)\r\n        }),\r\n        font:\r\n          symbol.font.style +\r\n          ' ' +\r\n          symbol.font.weight +\r\n          ' ' +\r\n          symbol.font.size +\r\n          ' px ' +\r\n          symbol.font.family,\r\n        textBaseline: symbol.verticalAlignment,\r\n        textAlign: symbol.horizontalAlignment,\r\n        offsetX: EsriStyleGenerator._convertPointToPixel(symbol.xoffset),\r\n        offsetY: EsriStyleGenerator._convertPointToPixel(symbol.yoffset),\r\n        rotation,\r\n        text\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Picture Marker Symbol */\r\n  static _convertEsriPMS(symbol) {\r\n    const src = 'data:' + symbol.contentType + ';base64, ' + symbol.imageData;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n\r\n    return new olstyle.Style({\r\n      image: new olstyle.Icon({\r\n        src,\r\n        rotation\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Simple Fill Symbol */\r\n  static _convertEsriSFS(symbol) {\r\n    // there is no support in openlayers currently for fill patterns, so style is not interpreted\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    return new olstyle.Style({\r\n      fill,\r\n      stroke\r\n    });\r\n  }\r\n  static _convertOutline(outline) {\r\n    let lineDash;\r\n    const color = EsriStyleGenerator._transformColor(outline.color);\r\n    if (outline.style === 'esriSLSDash') {\r\n      lineDash = [5];\r\n    } else if (outline.style === 'esriSLSDashDot') {\r\n      lineDash = [5, 5, 1, 2];\r\n    } else if (outline.style === 'esriSLSDashDotDot') {\r\n      lineDash = [5, 5, 1, 2, 1, 2];\r\n    } else if (outline.style === 'esriSLSDot') {\r\n      lineDash = [1, 2];\r\n    } else if (outline.style === 'esriSLSNull') {\r\n      // line not visible, make color fully transparent\r\n      color[3] = 0;\r\n    }\r\n    return new olstyle.Stroke({\r\n      color,\r\n      lineDash,\r\n      width: EsriStyleGenerator._convertPointToPixel(outline.width)\r\n    });\r\n  }\r\n  /* convert an Esri Simple Line Symbol */\r\n  static _convertEsriSLS(symbol) {\r\n    return new olstyle.Style({\r\n      stroke: EsriStyleGenerator._convertOutline(symbol)\r\n    });\r\n  }\r\n  static _transformAngle(angle) {\r\n    if (angle === 0 || angle === undefined) {\r\n      return undefined;\r\n    }\r\n    const normalRad = (angle * Math.PI) / 180;\r\n    const ol3Rad = -normalRad + Math.PI / 2;\r\n    if (ol3Rad < 0) {\r\n      return 2 * Math.PI + ol3Rad;\r\n    } else {\r\n      return ol3Rad;\r\n    }\r\n  }\r\n  /* convert an Esri Simple Marker Symbol */\r\n  static _convertEsriSMS(symbol) {\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    const radius = EsriStyleGenerator._convertPointToPixel(symbol.size) / 2;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    if (symbol.style === 'esriSMSCircle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.Circle({\r\n          radius,\r\n          fill,\r\n          stroke\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSCross') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSDiamond') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSSquare') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSX') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSTriangle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 3,\r\n          radius,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  _convertLabelingInfo(labelingInfo, mapUnits) {\r\n    const styles = [];\r\n    for (let i = 0, ii = labelingInfo.length; i < ii; ++i) {\r\n      const labelExpression = labelingInfo[i].labelExpression;\r\n      // only limited support for label expressions\r\n      const field = labelExpression.substr(\r\n        labelExpression.indexOf('[') + 1,\r\n        labelExpression.indexOf(']') - 1\r\n      );\r\n      const symbol = labelingInfo[i].symbol;\r\n      const maxScale = labelingInfo[i].maxScale;\r\n      const minScale = labelingInfo[i].minScale;\r\n      let minResolution = null;\r\n      if (maxScale !== 0) {\r\n        minResolution = EsriStyleGenerator._getResolutionForScale(\r\n          maxScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      let maxResolution = null;\r\n      if (minScale !== 0) {\r\n        maxResolution = EsriStyleGenerator._getResolutionForScale(\r\n          minScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      styles.push(\r\n        (() => {\r\n          return function(feature, resolution) {\r\n            let visible = true;\r\n            if (this.minResolution !== null && this.maxResolution !== null) {\r\n              visible =\r\n                resolution < this.maxResolution &&\r\n                resolution >= this.minResolution;\r\n            } else if (this.minResolution !== null) {\r\n              visible = resolution >= this.minResolution;\r\n            } else if (this.maxResolution !== null) {\r\n              visible = resolution < this.maxResolution;\r\n            }\r\n            if (visible) {\r\n              const value = feature.get(this.field);\r\n              this.style.getText().setText(value);\r\n              return [this.style];\r\n            }\r\n          };\r\n        })().bind({\r\n          minResolution,\r\n          maxResolution,\r\n          field,\r\n          style\r\n        })\r\n      );\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  _renderSimple(renderer) {\r\n    const style = this._converters[renderer.symbol.type].call(\r\n      this,\r\n      renderer.symbol\r\n    );\r\n    return (() => {\r\n      return () => {\r\n        return [style];\r\n      };\r\n    })();\r\n  }\r\n  _renderClassBreaks(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    const defaultStyle = this._converters[defaultSymbol.type].call(\r\n      this,\r\n      defaultSymbol\r\n    );\r\n    const field = renderer.field;\r\n    const classes = [];\r\n    for (let i = 0, ii = renderer.classBreakInfos.length; i < ii; ++i) {\r\n      const classBreakInfo = renderer.classBreakInfos[i];\r\n      let min;\r\n      if (\r\n        classBreakInfo.classMinValue === null ||\r\n        classBreakInfo.classMinValue === undefined\r\n      ) {\r\n        if (i === 0) {\r\n          min = renderer.minValue;\r\n        } else {\r\n          min = renderer.classBreakInfos[i - 1].classMaxValue;\r\n        }\r\n      } else {\r\n        min = classBreakInfo.classMinValue;\r\n      }\r\n      const max = classBreakInfo.classMaxValue;\r\n      const symbol = classBreakInfo.symbol;\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      classes.push({ min, max, style });\r\n    }\r\n    return (() => {\r\n      return (feature) => {\r\n        const value = feature.get(field);\r\n        for (let i = 0, ii = classes.length; i < ii; ++i) {\r\n          let condition;\r\n          if (i === 0) {\r\n            condition = value >= classes[i].min && value <= classes[i].max;\r\n          } else {\r\n            condition = value > classes[i].min && value <= classes[i].max;\r\n          }\r\n          if (condition) {\r\n            return [classes[i].style];\r\n          }\r\n        }\r\n        return [defaultStyle];\r\n      };\r\n    })();\r\n  }\r\n  _renderUniqueValue(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    let defaultStyle = [];\r\n    if (defaultSymbol) {\r\n      defaultStyle = [\r\n        this._converters[defaultSymbol.type].call(this, defaultSymbol)\r\n      ];\r\n    }\r\n    const field = renderer.field1;\r\n    const infos = renderer.uniqueValueInfos;\r\n    const me = this;\r\n    return (() => {\r\n      const hash = {};\r\n      for (let i = 0, ii = infos.length; i < ii; ++i) {\r\n        const info = infos[i];\r\n        const symbol = info.symbol;\r\n        hash[info.value] = [me._converters[symbol.type].call(me, symbol)];\r\n      }\r\n\r\n      return (feature) => {\r\n        const style = hash[feature.get(field)];\r\n        return style ? style : defaultStyle;\r\n      };\r\n    })();\r\n  }\r\n  generateStyle(layerInfo, mapUnits) {\r\n    const drawingInfo = layerInfo.drawingInfo;\r\n    let styleFunctions = [];\r\n    const drawingInfoStyle = this._renderers[drawingInfo.renderer.type].call(\r\n      this,\r\n      drawingInfo.renderer\r\n    );\r\n    if (drawingInfoStyle !== undefined) {\r\n      styleFunctions.push(drawingInfoStyle);\r\n    }\r\n    if (layerInfo.labelingInfo) {\r\n      const labelingInfoStyleFunctions = this._convertLabelingInfo(\r\n        layerInfo.labelingInfo,\r\n        mapUnits\r\n      );\r\n      styleFunctions = styleFunctions.concat(labelingInfoStyleFunctions);\r\n    }\r\n    if (styleFunctions.length === 1) {\r\n      return styleFunctions[0];\r\n    } else {\r\n      return (() => {\r\n        return (feature, resolution) => {\r\n          let styles = [];\r\n          for (let i = 0, ii = styleFunctions.length; i < ii; ++i) {\r\n            const result = styleFunctions[i].call(null, feature, resolution);\r\n            if (result) {\r\n              styles = styles.concat(result);\r\n            }\r\n          }\r\n          return styles;\r\n        };\r\n      })();\r\n    }\r\n  }\r\n}\r\n","export enum TimeFilterType {\r\n    DATE = 'date',\r\n    TIME = 'time',\r\n    DATETIME = 'datetime',\r\n    YEAR = 'year',\r\n}\r\n\r\nexport enum TimeFilterStyle {\r\n    CALENDAR = 'calendar',\r\n    SLIDER = 'slider',\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Cacheable } from 'ngx-cacheable';\r\n\r\nimport { WMSCapabilities, WMTSCapabilities } from 'ol/format';\r\nimport { optionsFromCapabilities } from 'ol/source/WMTS.js';\r\nimport olAttribution from 'ol/control/Attribution';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { getResolutionFromScale } from '../../map';\r\nimport { EsriStyleGenerator } from '../utils/esri-style-generator';\r\n\r\nimport {\r\n  WMTSDataSourceOptions,\r\n  WMSDataSourceOptions,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSourceOptions\r\n} from './datasources';\r\nimport {\r\n  LegendOptions,\r\n  ItemStyleOptions\r\n} from '../../layer/shared/layers/layer.interface';\r\nimport {\r\n  TimeFilterType,\r\n  TimeFilterStyle\r\n} from '../../filter/shared/time-filter.enum';\r\n\r\nexport enum TypeCapabilities {\r\n  wms = 'wms', wmts = 'wmts'\r\n}\r\n\r\nexport type TypeCapabilitiesStrings = keyof typeof TypeCapabilities;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CapabilitiesService {\r\n  private capabilitiesStore: any[] = [];\r\n  private parsers = {\r\n    wms: new WMSCapabilities(),\r\n    wmts: new WMTSCapabilities()\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getWMSOptions(\r\n    baseOptions: WMSDataSourceOptions\r\n  ): Observable<WMSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = (baseOptions.params as any).VERSION;\r\n\r\n    return this.getCapabilities('wms', url, version).pipe(\r\n      map((capabilities: any) => {\r\n        return capabilities\r\n          ? this.parseWMSOptions(baseOptions, capabilities)\r\n          : undefined;\r\n      })\r\n    );\r\n  }\r\n\r\n  getWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = baseOptions.version;\r\n\r\n    const options = this.getCapabilities('wmts', url, version).pipe(\r\n      map((capabilities: any) => {\r\n        return capabilities\r\n          ? this.parseWMTSOptions(baseOptions, capabilities)\r\n          : undefined;\r\n      })\r\n    );\r\n\r\n    return options;\r\n  }\r\n\r\n  getCartoOptions(\r\n    baseOptions: CartoDataSourceOptions\r\n  ): Observable<CartoDataSourceOptions> {\r\n    const baseUrl =\r\n      'https://' +\r\n      baseOptions.account +\r\n      '.carto.com/api/v2/viz/' +\r\n      baseOptions.mapId +\r\n      '/viz.json';\r\n\r\n    return this.http\r\n      .jsonp(baseUrl, 'callback')\r\n      .pipe(\r\n        map((cartoOptions: any) =>\r\n          this.parseCartoOptions(baseOptions, cartoOptions)\r\n        )\r\n      );\r\n  }\r\n\r\n  getArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const modifiedUrl = baseOptions.url.replace('FeatureServer', 'MapServer');\r\n    const legendUrl = modifiedUrl + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legend = this.http.get(legendUrl).pipe(\r\n      map((res: any) => res),\r\n      catchError(err => {\r\n        console.log('No legend associated with this Feature Service');\r\n        return of(err);\r\n      })\r\n    );\r\n    return forkJoin([arcgisOptions, legend]).pipe(\r\n      map((res: any) => {\r\n        return this.parseArcgisOptions(baseOptions, res[0], res[1]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const legendUrl = baseOptions.url + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legendInfo = this.http.get(legendUrl);\r\n\r\n    return forkJoin([arcgisOptions, legendInfo]).pipe(\r\n      map((res: any) =>\r\n        this.parseTileArcgisOptions(baseOptions, res[0], res[1])\r\n      )\r\n    );\r\n  }\r\n\r\n  @Cacheable({\r\n    maxCacheCount: 20\r\n  })\r\n  getCapabilities(\r\n    service: TypeCapabilitiesStrings,\r\n    baseUrl: string,\r\n    version?: string\r\n  ): Observable<any> {\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        request: 'GetCapabilities',\r\n        service: service.toUpperCase(),\r\n        version: version || '1.3.0',\r\n        _i: 'true'\r\n      }\r\n    });\r\n\r\n    const request = this.http.get(baseUrl, {\r\n      params,\r\n      responseType: 'text'\r\n    });\r\n\r\n    return request.pipe(\r\n      map(res => {\r\n        try {\r\n          return this.parsers[service].read(res);\r\n        } catch (e) {\r\n          return undefined;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private parseWMSOptions(\r\n    baseOptions: WMSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMSDataSourceOptions {\r\n    const layers = (baseOptions.params as any).LAYERS;\r\n    const layer = this.findDataSourceInCapabilities(\r\n      capabilities.Capability.Layer,\r\n      layers\r\n    );\r\n\r\n    if (!layer) {\r\n      return baseOptions;\r\n    }\r\n    const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n    const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n    const keywordList = layer.KeywordList ? layer.KeywordList : undefined;\r\n    const queryable = layer.queryable;\r\n    const timeFilter = this.getTimeFilter(layer);\r\n    const timeFilterable = timeFilter && Object.keys(timeFilter).length > 0;\r\n    const legendOptions = layer.Style ? this.getStyle(layer.Style) : undefined;\r\n\r\n    const options: WMSDataSourceOptions = ObjectUtils.removeUndefined({\r\n      _layerOptionsFromCapabilities: {\r\n        title: layer.Title,\r\n        maxResolution:\r\n          getResolutionFromScale(layer.MaxScaleDenominator) || Infinity,\r\n        minResolution: getResolutionFromScale(layer.MinScaleDenominator) || 0,\r\n        metadata: {\r\n          url: metadata ? metadata.OnlineResource : undefined,\r\n          extern: metadata ? true : undefined,\r\n          abstract,\r\n          keywordList\r\n        },\r\n        legendOptions\r\n      },\r\n      queryable,\r\n      timeFilter: timeFilterable ? timeFilter : undefined,\r\n      timeFilterable: timeFilterable ? true : undefined\r\n    });\r\n\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMTSDataSourceOptions {\r\n    const options = optionsFromCapabilities(capabilities, baseOptions);\r\n\r\n    return Object.assign(options, baseOptions);\r\n  }\r\n\r\n  private parseCartoOptions(\r\n    baseOptions: CartoDataSourceOptions,\r\n    cartoOptions: any\r\n  ): CartoDataSourceOptions {\r\n    const layers = [];\r\n    const params = cartoOptions.layers[1].options.layer_definition;\r\n    params.layers.forEach(element => {\r\n      layers.push({\r\n        type: element.type.toLowerCase(),\r\n        options: element.options,\r\n        legend: element.legend\r\n      });\r\n    });\r\n    const options = ObjectUtils.removeUndefined({\r\n      config: {\r\n        version: params.version,\r\n        layers\r\n      }\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend?: any\r\n  ): ArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const styleGenerator = new EsriStyleGenerator();\r\n    const units = arcgisOptions.units === 'esriMeters' ? 'm' : 'degrees';\r\n    const style = styleGenerator.generateStyle(arcgisOptions, units);\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: TimeFilterType.DATETIME,\r\n        style: TimeFilterStyle.CALENDAR\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        legendInfo,\r\n        style,\r\n        timeFilter,\r\n        timeExtent,\r\n        attributions\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend: any\r\n  ): TileArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: TimeFilterType.DATETIME,\r\n        style: TimeFilterStyle.CALENDAR\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        layers: 'show:' + baseOptions.layer,\r\n        time: timeExtent\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params,\r\n      legendInfo,\r\n      timeFilter,\r\n      attributions\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private findDataSourceInCapabilities(layerArray, name): any {\r\n    if (Array.isArray(layerArray)) {\r\n      let layer;\r\n      layerArray.find(value => {\r\n        layer = this.findDataSourceInCapabilities(value, name);\r\n        return layer !== undefined;\r\n      }, this);\r\n\r\n      return layer;\r\n    } else if (layerArray.Layer) {\r\n      return this.findDataSourceInCapabilities(layerArray.Layer, name);\r\n    } else {\r\n      if (layerArray.Name && layerArray.Name === name) {\r\n        return layerArray;\r\n      }\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getTimeFilter(layer) {\r\n    let dimension;\r\n\r\n    if (layer.Dimension) {\r\n      const timeFilter: any = {};\r\n      dimension = layer.Dimension[0];\r\n\r\n      if (dimension.values) {\r\n        const minMaxDim = dimension.values.split('/');\r\n        timeFilter.min = minMaxDim[0] !== undefined ? minMaxDim[0] : undefined;\r\n        timeFilter.max = minMaxDim[1] !== undefined ? minMaxDim[1] : undefined;\r\n        timeFilter.step = minMaxDim[2] !== undefined ? minMaxDim[2] : undefined;\r\n      }\r\n\r\n      if (dimension.default) {\r\n        timeFilter.value = dimension.default;\r\n      }\r\n      return timeFilter;\r\n    }\r\n  }\r\n\r\n  getStyle(Style): LegendOptions {\r\n    const styleOptions: ItemStyleOptions[] = Style.map(style => {\r\n      return {\r\n        name: style.Name,\r\n        title: style.Title\r\n      };\r\n    })\r\n      // Handle repeat the style \"default\" in output  (MapServer or OpenLayer)\r\n      .filter(\r\n        (item, index, self) =>\r\n          self.findIndex((i: ItemStyleOptions) => i.name === item.name) ===\r\n          index\r\n      );\r\n\r\n    const legendOptions: LegendOptions = {\r\n      stylesAvailable: styleOptions\r\n    } as LegendOptions;\r\n\r\n    return legendOptions;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { CapabilitiesService } from './capabilities.service';\r\nimport { WFSService } from './datasources/wfs.service';\r\nimport {\r\n  DataSource,\r\n  OSMDataSource,\r\n  OSMDataSourceOptions,\r\n  FeatureDataSource,\r\n  FeatureDataSourceOptions,\r\n  XYZDataSource,\r\n  XYZDataSourceOptions,\r\n  WFSDataSource,\r\n  WFSDataSourceOptions,\r\n  WMTSDataSource,\r\n  WMTSDataSourceOptions,\r\n  WMSDataSource,\r\n  WMSDataSourceOptions,\r\n  CartoDataSource,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSource,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSource,\r\n  TileArcGISRestDataSourceOptions,\r\n  WebSocketDataSource,\r\n  AnyDataSourceOptions,\r\n  MVTDataSource,\r\n  MVTDataSourceOptions,\r\n  ClusterDataSource,\r\n  ClusterDataSourceOptions\r\n} from './datasources';\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSourceService {\r\n  public datasources$ = new BehaviorSubject<DataSource[]>([]);\r\n\r\n  constructor(\r\n    private capabilitiesService: CapabilitiesService,\r\n    private wfsDataSourceService: WFSService\r\n  ) {}\r\n\r\n  createAsyncDataSource(context: AnyDataSourceOptions): Observable<DataSource> {\r\n    if (!context.type) {\r\n      console.error(context);\r\n      throw new Error('Datasource needs a type');\r\n    }\r\n    let dataSource;\r\n    switch (context.type.toLowerCase()) {\r\n      case 'osm':\r\n        dataSource = this.createOSMDataSource(context as OSMDataSourceOptions);\r\n        break;\r\n      case 'vector':\r\n        dataSource = this.createFeatureDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'wfs':\r\n        dataSource = this.createWFSDataSource(context as WFSDataSourceOptions);\r\n        break;\r\n      case 'wms':\r\n        const wmsContext = context as WMSDataSourceOptions;\r\n        ObjectUtils.removeDuplicateCaseInsensitive(wmsContext.params);\r\n        dataSource = this.createWMSDataSource(wmsContext);\r\n        break;\r\n      case 'wmts':\r\n        dataSource = this.createWMTSDataSource(\r\n          context as WMTSDataSourceOptions\r\n        );\r\n        break;\r\n      case 'xyz':\r\n        dataSource = this.createXYZDataSource(context as XYZDataSourceOptions);\r\n        break;\r\n      case 'carto':\r\n        dataSource = this.createCartoDataSource(\r\n          context as CartoDataSourceOptions\r\n        );\r\n        break;\r\n      case 'arcgisrest':\r\n        dataSource = this.createArcGISRestDataSource(\r\n          context as ArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'websocket':\r\n        dataSource = this.createWebSocketDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'mvt':\r\n        dataSource = this.createMVTDataSource(context as MVTDataSourceOptions);\r\n        break;\r\n      case 'tilearcgisrest':\r\n        dataSource = this.createTileArcGISRestDataSource(\r\n          context as TileArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'cluster':\r\n        dataSource = this.createClusterDataSource(\r\n          context as ClusterDataSourceOptions\r\n        );\r\n        break;\r\n      default:\r\n        console.error(context);\r\n        throw new Error('Invalid datasource type');\r\n    }\r\n\r\n    this.datasources$.next(this.datasources$.value.concat([dataSource]));\r\n\r\n    return dataSource;\r\n  }\r\n\r\n  private createOSMDataSource(\r\n    context: OSMDataSourceOptions\r\n  ): Observable<OSMDataSource> {\r\n    return new Observable(d => d.next(new OSMDataSource(context)));\r\n  }\r\n\r\n  private createFeatureDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<FeatureDataSource> {\r\n    return new Observable(d => d.next(new FeatureDataSource(context)));\r\n  }\r\n\r\n  private createWebSocketDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<WebSocketDataSource> {\r\n    return new Observable(d => d.next(new WebSocketDataSource(context)));\r\n  }\r\n\r\n  private createWFSDataSource(\r\n    context: WFSDataSourceOptions\r\n  ): Observable<WFSDataSource> {\r\n    return new Observable(d =>\r\n      d.next(new WFSDataSource(context, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMSDataSource(\r\n    context: WMSDataSourceOptions\r\n  ): Observable<WMSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService.getWMSOptions(context).pipe(\r\n        map((options: WMSDataSourceOptions) => {\r\n          return options\r\n            ? new WMSDataSource(options, this.wfsDataSourceService)\r\n            : undefined;\r\n        })\r\n      );\r\n    }\r\n\r\n    return new Observable(d =>\r\n      d.next(new WMSDataSource(context, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMTSDataSource(\r\n    context: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService.getWMTSOptions(context).pipe(\r\n        map((options: WMTSDataSourceOptions) => {\r\n          return options ? new WMTSDataSource(options) : undefined;\r\n        })\r\n      );\r\n    }\r\n\r\n    return new Observable(d => d.next(new WMTSDataSource(context)));\r\n  }\r\n\r\n  private createXYZDataSource(\r\n    context: XYZDataSourceOptions\r\n  ): Observable<XYZDataSource> {\r\n    return new Observable(d => d.next(new XYZDataSource(context)));\r\n  }\r\n\r\n  private createCartoDataSource(\r\n    context: CartoDataSourceOptions\r\n  ): Observable<CartoDataSource> {\r\n    if (context.mapId) {\r\n      return this.capabilitiesService\r\n        .getCartoOptions(context)\r\n        .pipe(\r\n          map((options: CartoDataSourceOptions) => new CartoDataSource(options))\r\n        );\r\n    }\r\n    return new Observable(d => d.next(new CartoDataSource(context)));\r\n  }\r\n\r\n  private createArcGISRestDataSource(\r\n    context: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: ArcGISRestDataSourceOptions) =>\r\n            new ArcGISRestDataSource(options)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createTileArcGISRestDataSource(\r\n    context: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getTileArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: TileArcGISRestDataSourceOptions) =>\r\n            new TileArcGISRestDataSource(options)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createMVTDataSource(\r\n    context: MVTDataSourceOptions\r\n  ): Observable<MVTDataSource> {\r\n    return new Observable(d => d.next(new MVTDataSource(context)));\r\n  }\r\n\r\n  private createClusterDataSource(\r\n    context: ClusterDataSourceOptions\r\n  ): Observable<ClusterDataSource> {\r\n    return new Observable(d => d.next(new ClusterDataSource(context)));\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport stylefunction from 'ol-mapbox-style/stylefunction';\r\nimport { AuthInterceptor } from '@igo2/auth';\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport {\r\n  OSMDataSource,\r\n  FeatureDataSource,\r\n  XYZDataSource,\r\n  WFSDataSource,\r\n  WMTSDataSource,\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  ArcGISRestDataSource,\r\n  TileArcGISRestDataSource,\r\n  WebSocketDataSource,\r\n  MVTDataSource,\r\n  ClusterDataSource\r\n} from '../../datasource';\r\n\r\nimport { DataSourceService } from '../../datasource/shared/datasource.service';\r\n\r\nimport {\r\n  Layer,\r\n  ImageLayer,\r\n  ImageLayerOptions,\r\n  TileLayer,\r\n  TileLayerOptions,\r\n  VectorLayer,\r\n  VectorLayerOptions,\r\n  AnyLayerOptions,\r\n  VectorTileLayer,\r\n  VectorTileLayerOptions\r\n} from './layers';\r\n\r\nimport { StyleService } from './style.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private styleService: StyleService,\r\n    private dataSourceService: DataSourceService,\r\n    @Optional() private authInterceptor: AuthInterceptor\r\n  ) {}\r\n\r\n  createLayer(layerOptions: AnyLayerOptions): Layer {\r\n    if (!layerOptions.source) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      layerOptions.source.options &&\r\n      layerOptions.source.options.optionsFromCapabilities\r\n    ) {\r\n      layerOptions = ObjectUtils.mergeDeep(\r\n        (layerOptions.source.options as any)._layerOptionsFromCapabilities ||\r\n          {},\r\n        layerOptions || {}\r\n      );\r\n    }\r\n\r\n    let layer;\r\n    switch (layerOptions.source.constructor) {\r\n      case OSMDataSource:\r\n      case WMTSDataSource:\r\n      case XYZDataSource:\r\n      case CartoDataSource:\r\n      case TileArcGISRestDataSource:\r\n        layer = this.createTileLayer(layerOptions as TileLayerOptions);\r\n        break;\r\n      case FeatureDataSource:\r\n      case WFSDataSource:\r\n      case ArcGISRestDataSource:\r\n      case WebSocketDataSource:\r\n      case ClusterDataSource:\r\n        layer = this.createVectorLayer(layerOptions as VectorLayerOptions);\r\n        break;\r\n      case WMSDataSource:\r\n        layer = this.createImageLayer(layerOptions as ImageLayerOptions);\r\n        break;\r\n      case MVTDataSource:\r\n        layer = this.createVectorTileLayer(\r\n          layerOptions as VectorTileLayerOptions\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return layer;\r\n  }\r\n\r\n  createAsyncLayer(layerOptions: AnyLayerOptions): Observable<Layer> {\r\n    if (layerOptions.source) {\r\n      return new Observable(d => d.next(this.createLayer(layerOptions)));\r\n    }\r\n\r\n    return this.dataSourceService\r\n      .createAsyncDataSource(layerOptions.sourceOptions)\r\n      .pipe(\r\n        map(source => {\r\n          if (source === undefined) {\r\n            return undefined;\r\n          }\r\n          return this.createLayer(Object.assign(layerOptions, { source }));\r\n        })\r\n      );\r\n  }\r\n\r\n  private createImageLayer(layerOptions: ImageLayerOptions): ImageLayer {\r\n    return new ImageLayer(layerOptions, this.authInterceptor);\r\n  }\r\n\r\n  private createTileLayer(layerOptions: TileLayerOptions): TileLayer {\r\n    return new TileLayer(layerOptions);\r\n  }\r\n\r\n  private createVectorLayer(layerOptions: VectorLayerOptions): VectorLayer {\r\n    let style;\r\n    let olLayer;\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ArcGISRestDataSource) {\r\n      const source = layerOptions.source as ArcGISRestDataSource;\r\n      style = source.options.params.style;\r\n    } else if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createStyleByAttribute(\r\n          feature,\r\n          layerOptions.styleByAttribute\r\n        );\r\n      };\r\n      olLayer = new VectorLayer(layerOptions);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ClusterDataSource) {\r\n      const serviceStyle = this.styleService;\r\n      const baseStyle = layerOptions.style;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createClusterStyle(\r\n          feature,\r\n          layerOptions.clusterParam,\r\n          baseStyle\r\n        );\r\n      };\r\n      olLayer = new VectorLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n\r\n    if (!olLayer) {\r\n      olLayer = new VectorLayer(layerOptionsOl);\r\n    }\r\n\r\n    this.applyMapboxStyle(olLayer, layerOptionsOl);\r\n\r\n    return olLayer;\r\n  }\r\n\r\n  private createVectorTileLayer(\r\n    layerOptions: VectorTileLayerOptions\r\n  ): VectorTileLayer {\r\n    let style;\r\n    let olLayer;\r\n\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createStyleByAttribute(\r\n          feature,\r\n          layerOptions.styleByAttribute\r\n        );\r\n      };\r\n      olLayer = new VectorTileLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n\r\n    if (!olLayer) {\r\n      olLayer = new VectorTileLayer(layerOptionsOl);\r\n    }\r\n\r\n    this.applyMapboxStyle(olLayer, layerOptionsOl);\r\n    return olLayer;\r\n  }\r\n\r\n  private applyMapboxStyle(layer: Layer, layerOptions: VectorTileLayerOptions) {\r\n    if (layerOptions.mapboxStyle) {\r\n      this.getMapboxGlStyle(layerOptions.mapboxStyle.url).subscribe(res => {\r\n        stylefunction(layer.ol, res, layerOptions.mapboxStyle.source);\r\n      });\r\n    }\r\n  }\r\n\r\n  public getMapboxGlStyle(url: string) {\r\n    return this.http.get(url).pipe(\r\n      map((res: any) => res),\r\n      catchError(err => {\r\n        console.log('No style was found');\r\n        return of(err);\r\n      })\r\n    );\r\n  }\r\n}\r\n","export enum CatalogItemType {\r\n  Layer = 'layer',\r\n  Group = 'group'\r\n}\r\n\r\nexport enum TypeCatalog {\r\n  wms, wmts, baselayers, composite\r\n}\r\n\r\nexport type TypeCatalogStrings = keyof typeof TypeCatalog;\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { TooltipType } from '../../layer';\r\nimport { TimeFilterOptions } from '../../filter';\r\nimport { QueryFormat, QueryHtmlTarget  } from '../../query';\r\n\r\nimport { ICatalog, ICompositeCatalog , CatalogItem, CatalogItemGroup } from './catalog.interface';\r\nimport { CatalogService } from './catalog.service';\r\nimport { TypeCatalog, TypeCatalogStrings } from './catalog.enum';\r\n\r\nexport abstract class Catalog implements ICatalog {\r\n\r\n    // ICatalog -----------------------------\r\n    id: string;\r\n    title: string;\r\n    url: string;\r\n    items?: CatalogItem[];\r\n    type?: TypeCatalogStrings;\r\n    version?: string;\r\n    matrixSet?: string;\r\n    requestEncoding?: string;\r\n    regFilters?: string[];\r\n    groupImpose?: CatalogItemGroup;\r\n    timeFilter?: TimeFilterOptions;\r\n    queryFormat?: QueryFormat;\r\n    queryHtmlTarget?: QueryHtmlTarget;\r\n    queryParams?: { [key: string]: string; };\r\n    sourceOptions?: { [key: string]: any; };\r\n    count?: number;\r\n    tooltipType?: TooltipType.ABSTRACT | TooltipType.TITLE;\r\n    sortDirection?: 'asc' | 'desc';\r\n    setCrossOriginAnonymous?: boolean;\r\n    showLegend?: boolean;\r\n    // ICatalog -----------------------------\r\n\r\n    protected catalogService: CatalogService;\r\n\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        Object.assign(this, options);\r\n        this.catalogService = service;\r\n    }\r\n\r\n    public abstract collectCatalogItems(): Observable<CatalogItem[]>;\r\n}\r\n\r\nclass WMSCatalog extends Catalog {\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        super(options, service);\r\n        const sType: string = TypeCatalog[TypeCatalog.wms];\r\n        this.type =  TypeCatalog[sType];\r\n    }\r\n\r\n    public collectCatalogItems(): Observable<CatalogItem[]> {\r\n        return this.catalogService.loadCatalogWMSLayerItems(this);\r\n    }\r\n}\r\n\r\nclass WMTSCatalog extends Catalog {\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        super(options, service);\r\n        const sType: string = TypeCatalog[TypeCatalog.wmts];\r\n        this.type =  TypeCatalog[sType];\r\n    }\r\n\r\n    public collectCatalogItems(): Observable<CatalogItem[]> {\r\n        return this.catalogService.loadCatalogWMTSLayerItems(this);\r\n    }\r\n}\r\n\r\nclass BaselayersCatalog extends Catalog {\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        super(options, service);\r\n        const sType: string = TypeCatalog[TypeCatalog.baselayers];\r\n        this.type =  TypeCatalog[sType];\r\n    }\r\n\r\n    public collectCatalogItems(): Observable<CatalogItemGroup[]> {\r\n        return this.catalogService.loadCatalogBaseLayerItems(this);\r\n    }\r\n}\r\n\r\nexport class CompositeCatalog extends Catalog implements ICompositeCatalog {\r\n    composite: ICatalog[];\r\n\r\n    constructor(options: Catalog, service: CatalogService) {\r\n        super(options, service);\r\n        const sType: string = TypeCatalog[TypeCatalog.composite];\r\n        this.type =  TypeCatalog[sType];\r\n        this.url = null;\r\n    }\r\n\r\n    public collectCatalogItems(): Observable<CatalogItem[]> {\r\n        return this.catalogService.loadCatalogCompositeLayerItems(this);\r\n    }\r\n}\r\n\r\nexport class CatalogFactory {\r\n\r\n    public static createInstanceCatalog(options: Catalog, service: CatalogService): Catalog {\r\n\r\n        let catalog: Catalog;\r\n        if (options.hasOwnProperty('composite')) {\r\n            catalog = new CompositeCatalog(options, service);\r\n        } else if (options.type === TypeCatalog[TypeCatalog.baselayers]) {\r\n            catalog = new BaselayersCatalog(options, service);\r\n        } else if (options.type === TypeCatalog[TypeCatalog.wmts]) {\r\n            catalog = new WMTSCatalog(options, service);\r\n        } else {\r\n            catalog = new WMSCatalog(options, service);\r\n        }\r\n\r\n        return catalog;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport * as olextent from 'ol/extent';\r\nimport olFormatGML2 from 'ol/format/GML2';\r\nimport olFormatGML3 from 'ol/format/GML3';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport olFeature from 'ol/Feature';\r\nimport * as olgeom from 'ol/geom';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport {\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  TileArcGISRestDataSource,\r\n  WMSDataSourceOptions\r\n} from '../../datasource';\r\n\r\nimport { QueryFormat, QueryHtmlTarget } from './query.enums';\r\nimport {\r\n  QueryOptions,\r\n  QueryableDataSource,\r\n  QueryableDataSourceOptions\r\n} from './query.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QueryService {\r\n  public queryEnabled = true;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  query(layers: Layer[], options: QueryOptions): Observable<Feature[]>[] {\r\n    return layers\r\n      .filter((layer: Layer) => layer.visible && layer.isInResolutionsRange)\r\n      .map((layer: Layer) => this.queryLayer(layer, options));\r\n  }\r\n\r\n  queryLayer(layer: Layer, options: QueryOptions): Observable<Feature[]> {\r\n    const url = this.getQueryUrl(layer.dataSource, options);\r\n    if (!url) {\r\n      return of([]);\r\n    }\r\n\r\n    if (\r\n      (layer.dataSource as QueryableDataSource).options.queryFormat ===\r\n      QueryFormat.HTMLGML2\r\n    ) {\r\n      const urlGml = this.getQueryUrl(layer.dataSource, options, true);\r\n      return this.http.get(urlGml, { responseType: 'text' }).pipe(\r\n        mergeMap(gmlRes => {\r\n          const imposedGeom = this.mergeGML(gmlRes, url);\r\n          return this.http\r\n            .get(url, { responseType: 'text' })\r\n            .pipe(\r\n              map(res =>\r\n                this.extractData(res, layer, options, url, imposedGeom)\r\n              )\r\n            );\r\n        })\r\n      );\r\n    }\r\n\r\n    const request = this.http.get(url, { responseType: 'text' });\r\n    return request.pipe(map(res => this.extractData(res, layer, options, url)));\r\n  }\r\n\r\n  private mergeGML(gmlRes, url) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(gmlRes);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      features = parser.readFeatures(gmlRes);\r\n    }\r\n    const olmline = new olgeom.MultiLineString([]);\r\n    let pts;\r\n    const ptsArray = [];\r\n    let olmpoly = new olgeom.MultiPolygon([]);\r\n    let firstFeatureType;\r\n    const nbFeatures = features.length;\r\n\r\n    // Check if geometry intersect bbox\r\n    // for geoserver getfeatureinfo response in data projection, not call projection\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const bbox = bboxRaw.split(',');\r\n    const bboxExtent = olextent.createEmpty();\r\n    olextent.extend(bboxExtent, bbox);\r\n    const outBboxExtent = false;\r\n    features.map(feature => {\r\n      /*  if (!feature.getGeometry().simplify(100).intersectsExtent(bboxExtent)) {\r\n        outBboxExtent = true;\r\n        // TODO: Check to project the geometry?\r\n      }*/\r\n      const featureGeometryCoordinates = feature.getGeometry().getCoordinates();\r\n      const featureGeometryType = feature.getGeometry().getType();\r\n\r\n      if (!firstFeatureType && !outBboxExtent) {\r\n        firstFeatureType = featureGeometryType;\r\n      }\r\n      if (!outBboxExtent) {\r\n        switch (featureGeometryType) {\r\n          case 'Point':\r\n            if (nbFeatures === 1) {\r\n              pts = new olgeom.Point(featureGeometryCoordinates, 'XY');\r\n            } else {\r\n              ptsArray.push(featureGeometryCoordinates);\r\n            }\r\n            break;\r\n          case 'LineString':\r\n            olmline.appendLineString(\r\n              new olgeom.LineString(featureGeometryCoordinates, 'XY')\r\n            );\r\n            break;\r\n          case 'Polygon':\r\n            olmpoly.appendPolygon(\r\n              new olgeom.Polygon(featureGeometryCoordinates, 'XY')\r\n            );\r\n            break;\r\n          case 'MultiPolygon':\r\n            olmpoly = new olgeom.MultiPolygon(featureGeometryCoordinates, 'XY');\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    });\r\n\r\n    let olmpts;\r\n    if (ptsArray.length === 0 && pts) {\r\n      olmpts = {\r\n        type: pts.getType(),\r\n        coordinates: pts.getCoordinates()\r\n      };\r\n    } else {\r\n      olmpts = {\r\n        type: 'Polygon',\r\n        coordinates: [this.convexHull(ptsArray)]\r\n      };\r\n    }\r\n\r\n    switch (firstFeatureType) {\r\n      case 'LineString':\r\n        return {\r\n          type: olmline.getType(),\r\n          coordinates: olmline.getCoordinates()\r\n        };\r\n      case 'Point':\r\n        return olmpts;\r\n      case 'Polygon':\r\n        return {\r\n          type: olmpoly.getType(),\r\n          coordinates: olmpoly.getCoordinates()\r\n        };\r\n      case 'MultiPolygon':\r\n        return {\r\n          type: olmpoly.getType(),\r\n          coordinates: olmpoly.getCoordinates()\r\n        };\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  cross(a, b, o) {\r\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);\r\n  }\r\n\r\n  /**\r\n   * @param points An array of [X, Y] coordinates\r\n   * This method is use instead of turf.js convexHull because Turf needs at least 3 point to make a hull.\r\n   * https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript\r\n   */\r\n  convexHull(points) {\r\n    points.sort((a, b) => {\r\n      return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];\r\n    });\r\n\r\n    const lower = [];\r\n    for (const point of points) {\r\n      while (\r\n        lower.length >= 2 &&\r\n        this.cross(lower[lower.length - 2], lower[lower.length - 1], point) <= 0\r\n      ) {\r\n        lower.pop();\r\n      }\r\n      lower.push(point);\r\n    }\r\n\r\n    const upper = [];\r\n    for (let i = points.length - 1; i >= 0; i--) {\r\n      while (\r\n        upper.length >= 2 &&\r\n        this.cross(\r\n          upper[upper.length - 2],\r\n          upper[upper.length - 1],\r\n          points[i]\r\n        ) <= 0\r\n      ) {\r\n        upper.pop();\r\n      }\r\n      upper.push(points[i]);\r\n    }\r\n\r\n    upper.pop();\r\n    lower.pop();\r\n    return lower.concat(upper);\r\n  }\r\n\r\n  private extractData(\r\n    res,\r\n    layer: Layer,\r\n    options: QueryOptions,\r\n    url: string,\r\n    imposedGeometry?\r\n  ): Feature[] {\r\n    const queryDataSource = layer.dataSource as QueryableDataSource;\r\n\r\n    const allowedFieldsAndAlias = this.getAllowedFieldsAndAlias(layer);\r\n    let features = [];\r\n    switch (queryDataSource.options.queryFormat) {\r\n      case QueryFormat.GML3:\r\n        features = this.extractGML3Data(\r\n          res,\r\n          layer.zIndex,\r\n          allowedFieldsAndAlias\r\n        );\r\n        break;\r\n      case QueryFormat.JSON:\r\n      case QueryFormat.GEOJSON:\r\n        features = this.extractGeoJSONData(res);\r\n        break;\r\n      case QueryFormat.ESRIJSON:\r\n        features = this.extractEsriJSONData(res, layer.zIndex);\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        features = this.extractTextData(res);\r\n        break;\r\n      case QueryFormat.HTML:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url\r\n        );\r\n        break;\r\n      case QueryFormat.HTMLGML2:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url,\r\n          imposedGeometry\r\n        );\r\n        break;\r\n      case QueryFormat.GML2:\r\n      default:\r\n        features = this.extractGML2Data(res, layer, allowedFieldsAndAlias);\r\n        break;\r\n    }\r\n\r\n    return features.map((feature: Feature, index: number) => {\r\n      const mapLabel = feature.properties[queryDataSource.mapLabel];\r\n\r\n      let exclude;\r\n      if (layer.options.sourceOptions.type === 'wms') {\r\n        const sourceOptions = layer.options\r\n          .sourceOptions as WMSDataSourceOptions;\r\n        exclude = sourceOptions ? sourceOptions.excludeAttribute : undefined;\r\n      }\r\n\r\n      let title = this.getQueryTitle(feature, layer);\r\n      if (!title && features.length > 1) {\r\n        title = `${layer.title} (${index + 1})`;\r\n      } else if (!title) {\r\n        title = layer.title;\r\n      }\r\n\r\n      const meta = Object.assign({}, feature.meta || {}, {\r\n        id: uuid(),\r\n        title,\r\n        mapTitle: mapLabel,\r\n        sourceTitle: layer.title,\r\n        order: 1000 - layer.zIndex,\r\n        excludeAttribute: exclude\r\n      });\r\n\r\n      return Object.assign(feature, {\r\n        meta,\r\n        projection:\r\n          queryDataSource.options.type === 'carto'\r\n            ? 'EPSG:4326'\r\n            : options.projection\r\n      });\r\n    });\r\n  }\r\n\r\n  private extractGML2Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(res);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      try {\r\n        features = parser.readFeatures(res);\r\n      } catch (e) {\r\n        console.warn(\r\n          'query.service: Multipolygons are badly managed in mapserver in GML2. Use another format.'\r\n        );\r\n      }\r\n    }\r\n\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGML3Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    const parser = new olFormatGML3();\r\n    const features = parser.readFeatures(res);\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGeoJSONData(res) {\r\n    let features = [];\r\n    try {\r\n      features = JSON.parse(res).features;\r\n    } catch (e) {\r\n      console.warn('query.service: Unable to parse geojson', '\\n', res);\r\n    }\r\n    return features;\r\n  }\r\n\r\n  private extractEsriJSONData(res, zIndex) {\r\n    const parser = new olFormatEsriJSON();\r\n    const features = parser.readFeatures(res);\r\n\r\n    return features.map(feature => this.featureToResult(feature, zIndex));\r\n  }\r\n\r\n  private extractTextData(res) {\r\n    // TODO\r\n    return [];\r\n  }\r\n\r\n  private extractHtmlData(\r\n    res,\r\n    htmlTarget: QueryHtmlTarget,\r\n    url,\r\n    imposedGeometry?\r\n  ) {\r\n    // _blank , iframe or undefined\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const width = parseInt(searchParams.width, 10);\r\n    const height = parseInt(searchParams.height, 10);\r\n    const xPosition = parseInt(searchParams.i || searchParams.x, 10);\r\n    const yPosition = parseInt(searchParams.j || searchParams.y, 10);\r\n    const projection = searchParams.crs || searchParams.srs || 'EPSG:3857';\r\n\r\n    const bbox = bboxRaw.split(',');\r\n    let threshold =\r\n      (Math.abs(parseFloat(bbox[0])) - Math.abs(parseFloat(bbox[2]))) * 0.05;\r\n\r\n    // for context in degree (EPSG:4326,4269...)\r\n    if (Math.abs(parseFloat(bbox[0])) < 180) {\r\n      threshold = 0.045;\r\n    }\r\n\r\n    const clickx =\r\n      parseFloat(bbox[0]) +\r\n      (Math.abs(parseFloat(bbox[0]) - parseFloat(bbox[2])) * xPosition) /\r\n        width -\r\n      threshold;\r\n    const clicky =\r\n      parseFloat(bbox[1]) +\r\n      (Math.abs(parseFloat(bbox[1]) - parseFloat(bbox[3])) * yPosition) /\r\n        height -\r\n      threshold;\r\n    const clickx1 = clickx + threshold * 2;\r\n    const clicky1 = clicky + threshold * 2;\r\n\r\n    const wktPoly =\r\n      'POLYGON((' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      '))';\r\n\r\n    const format = new olformat.WKT();\r\n    const tenPercentWidthGeom = format.readFeature(wktPoly);\r\n    const f = tenPercentWidthGeom.getGeometry() as any;\r\n\r\n    if (\r\n      htmlTarget !== QueryHtmlTarget.BLANK &&\r\n      htmlTarget !== QueryHtmlTarget.IFRAME\r\n    ) {\r\n      htmlTarget = QueryHtmlTarget.IFRAME;\r\n    }\r\n\r\n    const bodyTagStart = res.toLowerCase().indexOf('<body>');\r\n    const bodyTagEnd = res.toLowerCase().lastIndexOf('</body>') + 7;\r\n    // replace \\r \\n  and ' ' with '' to validate if the body is really empty.\r\n    const body = res.slice(bodyTagStart, bodyTagEnd).replace(/(\\r|\\n|\\s)/g, '');\r\n    if (body === '<body></body>' || res === '') {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      {\r\n        type: FEATURE,\r\n        projection,\r\n        properties: { target: htmlTarget, body: res, url },\r\n        geometry: imposedGeometry || {\r\n          type: f.getType(),\r\n          coordinates: f.getCoordinates()\r\n        }\r\n      }\r\n    ];\r\n  }\r\n\r\n  private getQueryParams(url) {\r\n    const queryString = url.split('?');\r\n    if (!queryString[1]) {\r\n      return;\r\n    }\r\n    const pairs = queryString[1].split('&');\r\n\r\n    const result = {};\r\n    pairs.forEach(pair => {\r\n      pair = pair.split('=');\r\n      result[pair[0]] = decodeURIComponent(pair[1] || '');\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public featureToResult(\r\n    featureOL: olFeature,\r\n    zIndex: number,\r\n    allowedFieldsAndAlias?\r\n  ): Feature {\r\n    const featureGeometry = featureOL.getGeometry() as any;\r\n    const properties: any = Object.assign({}, featureOL.getProperties());\r\n    delete properties.geometry;\r\n    delete properties.boundedBy;\r\n    delete properties.shape;\r\n    delete properties.SHAPE;\r\n    delete properties.the_geom;\r\n\r\n    let geometry;\r\n    if (featureGeometry !== undefined) {\r\n      geometry = {\r\n        type: featureGeometry.getType(),\r\n        coordinates: featureGeometry.getCoordinates()\r\n      };\r\n    }\r\n\r\n    return {\r\n      type: FEATURE,\r\n      projection: undefined,\r\n      properties,\r\n      geometry,\r\n      meta: {\r\n        id: uuid(),\r\n        order: 1000 - zIndex,\r\n        alias: allowedFieldsAndAlias\r\n      }\r\n    };\r\n  }\r\n\r\n  private getQueryUrl(\r\n    datasource: QueryableDataSource,\r\n    options: QueryOptions,\r\n    forceGML2 = false\r\n  ): string {\r\n    let url;\r\n    switch (datasource.constructor) {\r\n      case WMSDataSource:\r\n        const wmsDatasource = datasource as WMSDataSource;\r\n\r\n        const WMSGetFeatureInfoOptions = {\r\n          INFO_FORMAT:\r\n            wmsDatasource.params.INFO_FORMAT ||\r\n            this.getMimeInfoFormat(datasource.options.queryFormat),\r\n          QUERY_LAYERS: wmsDatasource.params.LAYERS,\r\n          FEATURE_COUNT: wmsDatasource.params.FEATURE_COUNT || '5'\r\n        };\r\n\r\n        if (forceGML2) {\r\n          WMSGetFeatureInfoOptions.INFO_FORMAT = this.getMimeInfoFormat(\r\n            QueryFormat.GML2\r\n          );\r\n        }\r\n\r\n        url = wmsDatasource.ol.getGetFeatureInfoUrl(\r\n          options.coordinates,\r\n          options.resolution,\r\n          options.projection,\r\n          WMSGetFeatureInfoOptions\r\n        );\r\n        // const wmsVersion =\r\n        //   wmsDatasource.params.VERSION ||\r\n        //   wmsDatasource.params.version ||\r\n        //   '1.3.0';\r\n        // if (wmsVersion !== '1.3.0') {\r\n        //   url = url.replace('&I=', '&X=');\r\n        //   url = url.replace('&J=', '&Y=');\r\n        // }\r\n        break;\r\n      case CartoDataSource:\r\n        const cartoDatasource = datasource as CartoDataSource;\r\n        const baseUrl =\r\n          'https://' +\r\n          cartoDatasource.options.account +\r\n          '.carto.com/api/v2/sql?';\r\n        const format = 'format=GeoJSON';\r\n        const sql =\r\n          '&q=' + cartoDatasource.options.config.layers[0].options.sql;\r\n        const clause =\r\n          ' WHERE ST_Intersects(the_geom_webmercator,ST_BUFFER(ST_SetSRID(ST_POINT(';\r\n        const meters = cartoDatasource.options.queryPrecision\r\n          ? cartoDatasource.options.queryPrecision\r\n          : '1000';\r\n        const coordinates =\r\n          options.coordinates[0] +\r\n          ',' +\r\n          options.coordinates[1] +\r\n          '),3857),' +\r\n          meters +\r\n          '))';\r\n\r\n        url = `${baseUrl}${format}${sql}${clause}${coordinates}`;\r\n        break;\r\n      case TileArcGISRestDataSource:\r\n        const tileArcGISRestDatasource = datasource as TileArcGISRestDataSource;\r\n        let extent = olextent.boundingExtent([options.coordinates]);\r\n        if (tileArcGISRestDatasource.options.queryPrecision) {\r\n          extent = olextent.buffer(\r\n            extent,\r\n            tileArcGISRestDatasource.options.queryPrecision\r\n          );\r\n        }\r\n        const serviceUrl =\r\n          tileArcGISRestDatasource.options.url +\r\n          '/' +\r\n          tileArcGISRestDatasource.options.layer +\r\n          '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        url = `${serviceUrl}?${params.join('&')}`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  private getMimeInfoFormat(queryFormat) {\r\n    let mime;\r\n    switch (queryFormat) {\r\n      case QueryFormat.GML2:\r\n        mime = 'application/vnd.ogc.gml';\r\n        break;\r\n      case QueryFormat.GML3:\r\n        mime = 'application/vnd.ogc.gml/3.1.1';\r\n        break;\r\n      case QueryFormat.JSON:\r\n        mime = 'application/json';\r\n        break;\r\n      case QueryFormat.GEOJSON:\r\n        mime = 'application/geojson';\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        mime = 'text/plain';\r\n        break;\r\n      case QueryFormat.HTML:\r\n        mime = 'text/html';\r\n        break;\r\n      case QueryFormat.HTMLGML2:\r\n        mime = 'text/html';\r\n        break;\r\n      default:\r\n        mime = 'application/vnd.ogc.gml';\r\n        break;\r\n    }\r\n\r\n    return mime;\r\n  }\r\n\r\n  getAllowedFieldsAndAlias(layer: any) {\r\n    let allowedFieldsAndAlias;\r\n    if (\r\n      layer.options &&\r\n      layer.options.source &&\r\n      layer.options.source.options &&\r\n      layer.options.source.options.sourceFields &&\r\n      layer.options.source.options.sourceFields.length >= 1\r\n    ) {\r\n      allowedFieldsAndAlias = {};\r\n      layer.options.source.options.sourceFields.forEach(sourceField => {\r\n        const alias = sourceField.alias ? sourceField.alias : sourceField.name;\r\n        allowedFieldsAndAlias[sourceField.name] = alias;\r\n      });\r\n    }\r\n    return allowedFieldsAndAlias;\r\n  }\r\n\r\n  getQueryTitle(feature: Feature, layer: Layer): string {\r\n    let title;\r\n    if (layer.options && layer.options.source && layer.options.source.options) {\r\n      const dataSourceOptions = layer.options.source\r\n        .options as QueryableDataSourceOptions;\r\n      if (dataSourceOptions.queryTitle) {\r\n        title = this.getLabelMatch(feature, dataSourceOptions.queryTitle);\r\n      }\r\n    }\r\n\r\n    return title;\r\n  }\r\n\r\n  getLabelMatch(feature: Feature, labelMatch): string {\r\n    let label = labelMatch;\r\n    const labelToGet = Array.from(labelMatch.matchAll(/\\$\\{([^\\{\\}]+)\\}/g));\r\n\r\n    labelToGet.forEach(v => {\r\n      label = label.replace(v[0], feature.properties[v[1]]);\r\n    });\r\n\r\n    // Nothing done? check feature's attribute\r\n    if (labelToGet.length === 0 && label === labelMatch) {\r\n      label = feature.properties[labelMatch] || labelMatch;\r\n    }\r\n\r\n    return label;\r\n  }\r\n}\r\n","import { getEntityTitle } from '@igo2/common';\r\nimport {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Self\r\n} from '@angular/core';\r\n\r\nimport { Subscription, Observable, of, zip } from 'rxjs';\r\n\r\nimport OlFeature from 'ol/Feature';\r\nimport OlRenderFeature from 'ol/render/Feature';\r\nimport OlLayer from 'ol/layer/Layer';\r\n\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { renderFeatureFromOl } from '../../feature/shared/feature.utils';\r\nimport { featureFromOl } from '../../feature/shared/feature.utils';\r\nimport { QueryService } from './query.service';\r\nimport { layerIsQueryable, olLayerIsQueryable } from './query.utils';\r\nimport { AnyLayer } from '../../layer/shared/layers/any-layer';\r\n\r\n/**\r\n * This directive makes a map queryable with a click of with a drag box.\r\n * By default, all layers are queryable but this can ben controlled at\r\n * the layer level.\r\n */\r\n@Directive({\r\n  selector: '[igoQuery]'\r\n})\r\nexport class QueryDirective implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * Subscriptions to ongoing queries\r\n   */\r\n  private queries$$: Subscription[] = [];\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * OL drag box interaction\r\n   */\r\n  private olDragBoxInteraction: OlDragBoxInteraction;\r\n\r\n  /**\r\n   * Ol drag box \"end\" event key\r\n   */\r\n  private olDragBoxInteractionEndKey: string;\r\n\r\n  /**\r\n   * Whter to query features or not\r\n   */\r\n  @Input() queryFeatures: boolean = false;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesHitTolerance: number = 0;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesCondition: (olLayer: OlLayer) => boolean;\r\n\r\n  /**\r\n   * Whether all query should complete before emitting an event\r\n   */\r\n  @Input() waitForAllQueries: boolean = true;\r\n\r\n  /**\r\n   * Event emitted when a query (or all queries) complete\r\n   */\r\n  @Output() query = new EventEmitter<{\r\n    features: Feature[] | Feature[][];\r\n    event: OlMapBrowserPointerEvent;\r\n  }>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return (this.component.map as any) as IgoMap;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private queryService: QueryService\r\n  ) {}\r\n\r\n  /**\r\n   * Start listening to click and drag box events\r\n   * @internal\r\n   */\r\n  ngAfterViewInit() {\r\n    this.listenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to click and drag box events and cancel ongoind requests\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.cancelOngoingQueries();\r\n    this.unlistenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * On map click, issue queries\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onMapEvent(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Issue queries from a map event and emit events with the results\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onMapEvent(event: OlMapBrowserPointerEvent) {\r\n    this.cancelOngoingQueries();\r\n    if (!this.queryService.queryEnabled) {\r\n      return;\r\n    }\r\n\r\n    const queries$ = [];\r\n    if (this.queryFeatures) {\r\n      queries$.push(this.doQueryFeatures(event));\r\n    }\r\n\r\n    const resolution = this.map.ol.getView().getResolution();\r\n    const queryLayers = this.map.layers.filter(layerIsQueryable);\r\n    queries$.push(\r\n      ...this.queryService.query(queryLayers, {\r\n        coordinates: event.coordinate,\r\n        projection: this.map.projection,\r\n        resolution\r\n      })\r\n    );\r\n\r\n    if (queries$.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.waitForAllQueries) {\r\n      this.queries$$.push(\r\n        zip(...queries$).subscribe((results: Feature[][]) => {\r\n          const features = [].concat(...results);\r\n          this.query.emit({ features, event });\r\n        })\r\n      );\r\n    } else {\r\n      this.queries$$ = queries$.map((query$: Observable<Feature[]>) => {\r\n        return query$.subscribe((features: Feature[]) => {\r\n          this.query.emit({ features, event });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query features already present on the map\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private doQueryFeatures(\r\n    event: OlMapBrowserPointerEvent\r\n  ): Observable<Feature[]> {\r\n    const clickedFeatures = [];\r\n\r\n    this.map.ol.forEachFeatureAtPixel(\r\n      event.pixel,\r\n      (featureOL: OlFeature, layerOL: OlLayer) => {\r\n        if (featureOL) {\r\n          if (featureOL.get('features')) {\r\n            for (const feature of featureOL.get('features')) {\r\n              const newFeature = featureFromOl(feature, this.map.projection);\r\n              newFeature.meta = {\r\n                title: feature.values_.nom,\r\n                id: feature.id_,\r\n                icon: feature.values_._icon,\r\n                sourceTitle: layerOL.values_.title\r\n              };\r\n              clickedFeatures.push(newFeature);\r\n            }\r\n          } else if (featureOL instanceof OlRenderFeature) {\r\n            const featureFromRender: OlFeature = featureOL;\r\n            const feature = renderFeatureFromOl(\r\n              featureOL,\r\n              this.map.projection,\r\n              layerOL\r\n            );\r\n            clickedFeatures.push(feature);\r\n          } else {\r\n            const feature = featureFromOl(\r\n              featureOL,\r\n              this.map.projection,\r\n              layerOL\r\n            );\r\n            clickedFeatures.push(feature);\r\n          }\r\n        }\r\n      },\r\n      {\r\n        hitTolerance: this.queryFeaturesHitTolerance || 0,\r\n        layerFilter: this.queryFeaturesCondition\r\n          ? this.queryFeaturesCondition\r\n          : olLayerIsQueryable\r\n      }\r\n    );\r\n\r\n    const queryableLayers = this.map.layers.filter(layerIsQueryable);\r\n    clickedFeatures.forEach((feature: Feature) => {\r\n      queryableLayers.forEach((layer: AnyLayer) => {\r\n        if (typeof layer.ol.getSource().hasFeature !== 'undefined') {\r\n          if (layer.ol.getSource().hasFeature(feature.ol)) {\r\n            (feature.meta.id = feature.ol._id),\r\n              (feature.meta.alias = this.queryService.getAllowedFieldsAndAlias(\r\n                layer\r\n              ));\r\n            feature.meta.title =\r\n              feature.meta.title ||\r\n              this.queryService.getQueryTitle(feature, layer);\r\n            feature.meta.sourceTitle = layer.title;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    return of(clickedFeatures);\r\n  }\r\n\r\n  /**\r\n   * Cancel ongoing requests, if any\r\n   */\r\n  private cancelOngoingQueries() {\r\n    this.queries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.queries$$ = [];\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions,\r\n  SearchSourceSettings\r\n} from './source.interfaces';\r\n\r\n/**\r\n * Base search source class\r\n */\r\nexport class SearchSource {\r\n  /**\r\n   * Search source ID\r\n   * @internal\r\n   */\r\n  static id = '';\r\n\r\n  /**\r\n   * Search source type\r\n   * @internal\r\n   */\r\n  static type = '';\r\n\r\n  /**\r\n   * Search source options\r\n   * @internal\r\n   */\r\n  protected options: SearchSourceOptions;\r\n\r\n  /**\r\n   * Get search source's id\r\n   * @returns Search source's id\r\n   */\r\n  getId(): string {\r\n    throw new Error('You have to implement the method \"getId\".');\r\n  }\r\n  /**\r\n   * Get search source's type\r\n   * @returns Search source's type\r\n   */\r\n  getType(): string {\r\n    throw new Error('You have to implement the method \"getType\".');\r\n  }\r\n\r\n  /**\r\n   * Get search source's default options\r\n   * @returns Search source default options\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    throw new Error('You have to implement the method \"getDefaultOptions\".');\r\n  }\r\n\r\n  /**\r\n   * Search source's title\r\n   */\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is available\r\n   */\r\n  get available(): boolean {\r\n    return this.options.available !== false;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is enabled\r\n   */\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  get enabled(): boolean {\r\n    return this.available && this.options.enabled !== false;\r\n  }\r\n\r\n  get showInPointerSummary(): boolean {\r\n    const showInPointerSummary = this.options.showInPointerSummary;\r\n    return showInPointerSummary ? showInPointerSummary : false;\r\n  }\r\n\r\n  get showInSettings(): boolean {\r\n    const showInSettings = this.options.showInSettings;\r\n    return showInSettings === undefined ? true : showInSettings;\r\n  }\r\n\r\n  /**\r\n   * Search url\r\n   */\r\n  get searchUrl(): string {\r\n    return this.options.searchUrl;\r\n  }\r\n\r\n  /**\r\n   * Search query params\r\n   */\r\n  get params(): { [key: string]: string } {\r\n    return this.options.params === undefined ? {} : this.options.params;\r\n  }\r\n\r\n  /**\r\n   * Search settings\r\n   */\r\n  get settings(): SearchSourceSettings[] {\r\n    return this.options.settings === undefined ? [] : this.options.settings;\r\n  }\r\n\r\n  /**\r\n   * Set params from selected settings\r\n   */\r\n  setParamFromSetting(setting: SearchSourceSettings) {\r\n    switch (setting.type) {\r\n      case 'radiobutton':\r\n        setting.values.forEach(conf => {\r\n          if (conf.enabled) {\r\n            this.options.params = Object.assign(this.options.params || {}, {\r\n              [setting.name]: conf.value\r\n            });\r\n          }\r\n        });\r\n        break;\r\n      case 'checkbox':\r\n        let confValue = '';\r\n        setting.values\r\n          .filter(s => s.available !== false)\r\n          .forEach(conf => {\r\n            if (conf.enabled) {\r\n              confValue += conf.value + ',';\r\n            }\r\n          });\r\n        confValue = confValue.slice(0, -1);\r\n        this.options.params = Object.assign(this.options.params || {}, {\r\n          [setting.name]: confValue\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search results display order\r\n   */\r\n  get displayOrder(): number {\r\n    return this.options.order === undefined ? 99 : this.options.order;\r\n  }\r\n\r\n  constructor(options: SearchSourceOptions) {\r\n    this.options = options;\r\n    this.options = Object.assign({}, this.getDefaultOptions(), options);\r\n\r\n    // Set Default Params from Settings\r\n    this.settings.forEach(setting => {\r\n      this.setParamFromSetting(setting);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get hashtags valid\r\n   * @param hashtag hashtag from query\r\n   */\r\n  getHashtagsValid(term: string, settingsName: string): string[] {\r\n    const hashtags = term.match(/(#[^\\s]+)/g);\r\n    if (!hashtags) {\r\n      return undefined;\r\n    }\r\n\r\n    const searchSourceSetting = this.getSettingsValues(settingsName);\r\n    const hashtagsValid = [];\r\n    hashtags.forEach(hashtag => {\r\n      searchSourceSetting.values.forEach(conf => {\r\n        const hashtagKey = hashtag.substring(1);\r\n        if (typeof conf.value === 'string') {\r\n          const types = conf.value\r\n            .toLowerCase()\r\n            .normalize('NFD')\r\n            .replace(/[\\u0300-\\u036f]/g, '')\r\n            .split(',');\r\n          const index = types.indexOf(\r\n            hashtagKey\r\n              .toLowerCase()\r\n              .normalize('NFD')\r\n              .replace(/[\\u0300-\\u036f]/g, '')\r\n          );\r\n          if (index !== -1) {\r\n            hashtagsValid.push(types[index]);\r\n          }\r\n        }\r\n        if (conf.hashtags && conf.hashtags.indexOf(hashtagKey) !== -1) {\r\n          hashtagsValid.push(conf.value);\r\n        }\r\n      });\r\n    });\r\n\r\n    return hashtagsValid.filter((a, b) => hashtagsValid.indexOf(a) === b);\r\n  }\r\n\r\n  getSettingsValues(search: string): SearchSourceSettings {\r\n    return this.getDefaultOptions().settings.find(\r\n      (value: SearchSourceSettings) => {\r\n        return value.name === search;\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by text implement this class\r\n */\r\nexport interface TextSearch {\r\n  /**\r\n   * Search by text\r\n   * @param term Text\r\n   * @param options Optional: TextSearchOptions\r\n   * @returns Observable or search results\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by coordinates implement this class\r\n */\r\nexport interface ReverseSearch {\r\n  /**\r\n   * Search by text\r\n   * @param lonLat Coordinates\r\n   * @param options Optional: ReverseSearchOptions\r\n   * @returns Observable or search results\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\nimport { SearchSourceOptions } from '../../search/shared/sources/source.interfaces';\r\n/**\r\n * Map search source. For now it has no search capability. All it does\r\n * is act as a placeholder for the map query results' \"search source\".\r\n */\r\n@Injectable()\r\nexport class QuerySearchSource extends SearchSource {\r\n  static id = 'map';\r\n  static type = FEATURE;\r\n\r\n  constructor(@Inject('options') options: SearchSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return QuerySearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return QuerySearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Carte'\r\n    };\r\n  }\r\n}\r\n","export class GoogleLinks {\r\n  static getGoogleMapsLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=' + lat + ',' + lon;\r\n  }\r\n\r\n  static getGoogleStreetViewLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon;\r\n  }\r\n}\r\n","export class OsmLinks {\r\n  static getOpenStreetMapLink(lon, lat, zoom: number = 17) {\r\n    // return 'https://www.google.com/maps?q=' + lat + ',' + lon;\r\n    return  `https://www.openstreetmap.org/?mlat=${lat}&mlon=${lon}#map=${zoom}/${lat}/${lon}`;\r\n  }\r\n\r\n  static getOpenStreetCamLink(lon, lat, zoom: number = 17) {\r\n    return  `https://openstreetcam.org/map/@${lat},${lon},${zoom}z`;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { EMPTY, Observable, of, zip } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { LanguageService, ConfigService } from '@igo2/core';\r\nimport {\r\n  CapabilitiesService,\r\n  TypeCapabilities,\r\n  WMSDataSourceOptions,\r\n  WMTSDataSourceOptions,\r\n  WMSDataSourceOptionsParams\r\n} from '../../datasource';\r\nimport {\r\n  LayerOptions,\r\n  ImageLayerOptions,\r\n  TooltipContent,\r\n  TooltipType\r\n} from '../../layer';\r\nimport { getResolutionFromScale } from '../../map';\r\n\r\nimport {\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup\r\n} from './catalog.interface';\r\nimport {\r\n  Catalog,\r\n  CatalogFactory,\r\n  CompositeCatalog\r\n} from './catalog.abstract';\r\nimport { CatalogItemType, TypeCatalog } from './catalog.enum';\r\nimport { QueryHtmlTarget, QueryFormat } from '../../query';\r\nimport { generateIdFromSourceOptions } from '../../utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CatalogService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private config: ConfigService,\r\n    private languageService: LanguageService,\r\n    private capabilitiesService: CapabilitiesService\r\n  ) {}\r\n\r\n  loadCatalogs(): Observable<Catalog[]> {\r\n    const contextConfig = this.config.getConfig('context') || {};\r\n    const catalogConfig = this.config.getConfig('catalog') || {};\r\n    const apiUrl = catalogConfig.url || contextConfig.url;\r\n    const catalogsFromConfig = catalogConfig.sources || [];\r\n\r\n    const observables$ = [];\r\n\r\n    if (apiUrl) {\r\n      // Base layers catalog\r\n      if (catalogConfig.baseLayers) {\r\n        const translate = this.languageService.translate;\r\n        const title = translate.instant('igo.geo.catalog.baseLayers');\r\n        const baseLayersCatalog = [\r\n          {\r\n            id: 'catalog.baselayers',\r\n            title,\r\n            url: `${apiUrl}/baselayers`,\r\n            type: 'baselayers'\r\n          }\r\n        ];\r\n        observables$.push(of(baseLayersCatalog));\r\n      }\r\n\r\n      // Catalogs from API\r\n      const catalogsFromApi$ = this.http\r\n        .get<Catalog[]>(`${apiUrl}/catalogs`)\r\n        .pipe(\r\n          map(catalogs => catalogs.map((c: any) => Object.assign(c, c.options))),\r\n          catchError((response: HttpErrorResponse) => EMPTY)\r\n        );\r\n      observables$.push(catalogsFromApi$);\r\n    }\r\n\r\n    // Catalogs from config\r\n    if (catalogsFromConfig.length > 0) {\r\n      observables$.push(\r\n        of(catalogsFromConfig).pipe(\r\n          map((catalogs: Catalog[]) =>\r\n            catalogs.map(c => {\r\n              if (!c.id) {\r\n                c.id = uuid();\r\n              }\r\n              return c;\r\n            })\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    return zip(...observables$).pipe(\r\n      map((catalogs: Catalog[][]) => [].concat.apply([], catalogs))\r\n    ) as Observable<Catalog[]>;\r\n  }\r\n\r\n  loadCatalogItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    let newCatalog: Catalog;\r\n    newCatalog = CatalogFactory.createInstanceCatalog(catalog, this);\r\n    return newCatalog.collectCatalogItems();\r\n  }\r\n\r\n  loadCatalogBaseLayerItems(\r\n    catalog: Catalog\r\n  ): Observable<CatalogItemGroup[]> {\r\n    return this.getCatalogBaseLayersOptions(catalog).pipe(\r\n      map((layersOptions: LayerOptions[]) => {\r\n        const items = layersOptions.map((layerOptions: LayerOptions) => {\r\n          return {\r\n            id: generateIdFromSourceOptions(layerOptions.sourceOptions),\r\n            title: layerOptions.title,\r\n            type: CatalogItemType.Layer,\r\n            options: layerOptions\r\n          } as CatalogItemLayer;\r\n        });\r\n        return [\r\n          {\r\n            id: 'catalog.group.baselayers',\r\n            type: CatalogItemType.Group,\r\n            title: catalog.title,\r\n            items\r\n          }\r\n        ];\r\n      })\r\n    );\r\n  }\r\n\r\n  private getCatalogBaseLayersOptions(\r\n    catalog: Catalog\r\n  ): Observable<LayerOptions[]> {\r\n    return this.http.get<LayerOptions[]>(catalog.url);\r\n  }\r\n\r\n  loadCatalogWMSLayerItems(\r\n    catalog: Catalog\r\n  ): Observable<CatalogItem[]> {\r\n    return this.getCatalogCapabilities(catalog).pipe(\r\n      map((capabilities: any) => {\r\n        const items = [];\r\n        this.includeRecursiveItems(\r\n          catalog,\r\n          capabilities.Capability.Layer,\r\n          items\r\n        );\r\n        return items;\r\n      })\r\n    );\r\n  }\r\n\r\n  loadCatalogWMTSLayerItems(\r\n    catalog: Catalog\r\n  ): Observable<CatalogItem[]> {\r\n    return this.getCatalogCapabilities(catalog).pipe(\r\n      map((capabilities: any) => this.getWMTSItems(catalog, capabilities))\r\n    );\r\n  }\r\n\r\n  loadCatalogCompositeLayerItems(\r\n    catalog: Catalog\r\n  ): Observable<CatalogItem[]> {\r\n\r\n    const compositeCatalog = (catalog as CompositeCatalog).composite;\r\n\r\n    const catalogsFromInstance = [] as Catalog[];\r\n    compositeCatalog.map((component: Catalog) => catalogsFromInstance.push(CatalogFactory.createInstanceCatalog(component, this)));\r\n\r\n    // get CatalogItems for each original Catalog-----------------------------------------------------\r\n    const request1$ = [];\r\n    catalogsFromInstance.map((component: Catalog) => request1$.push(component.collectCatalogItems()));\r\n\r\n    // integrate imposed group -----------------------------------------------------\r\n    let request2$ = [];\r\n\r\n    function flatDeepLayer(arr) {\r\n      return arr.reduce((acc, val) => acc.concat(val.type === CatalogItemType.Group ? flatDeepLayer(val.items) : val), []);\r\n    }\r\n\r\n    if (Object.keys(compositeCatalog).find(k => compositeCatalog[k].groupImpose)) {\r\n      const pushImposeGroup = (item, index) => {\r\n        const c = catalogsFromInstance[index];\r\n        const outGroupImpose = Object.assign({}, c.groupImpose);\r\n        outGroupImpose.address = c.id;\r\n        outGroupImpose.type = CatalogItemType.Group;\r\n        outGroupImpose.items = [];\r\n\r\n        const flatLayer = flatDeepLayer(item);\r\n        flatLayer.map((v) => v.address = `${outGroupImpose.address}.${outGroupImpose.id}`);\r\n        outGroupImpose.items = flatLayer;\r\n\r\n        return outGroupImpose;\r\n      };\r\n\r\n      request2$ = request1$.map((obs, idx) => obs.pipe(\r\n        map((items) => compositeCatalog[idx].groupImpose ? pushImposeGroup(items, idx) : items )\r\n      ));\r\n    } else {\r\n      request2$ = request1$;\r\n    }\r\n\r\n    // concat Group -----------------------------------------------------\r\n    const request3$ = zip(...request2$)\r\n      .pipe(\r\n          map((output: CatalogItem[]) => [].concat(...output) // [].concat.apply([], result1\r\n      ));\r\n\r\n    // merge Group (first level only) -----------------------------------------------------\r\n    const groupByGroupId = (data, keyFn) => data.reduce((acc, group) => {\r\n      const groupId = keyFn(group);\r\n      const ind = acc.find((x) => x.id === groupId);\r\n\r\n      if (!ind) {\r\n        acc[acc.length] = group;\r\n      } else {\r\n        const ix = acc.indexOf(ind);\r\n        if (acc[ix].address.split('|').indexOf(group.address) === -1) {\r\n          acc[ix].address = `${acc[ix].address}|${group.address}`;\r\n        }\r\n        acc[ix].items.push(...group.items);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    // merge Layer for each Level (catalog, group(recursive))\r\n    const recursiveGroupByLayerAddress = (items, keyFn) => items.reduce((acc, item, idx, arr) => {\r\n\r\n      const layerTitle = keyFn(item);\r\n      const outItem = Object.assign({}, item);\r\n\r\n      if (item.type === CatalogItemType.Layer) {\r\n        // same title, same address => result: only one item is keep\r\n\r\n        // same title, address diff\r\n        const indicesMatchTitle = [];\r\n        const diffAddress = arr.filter((x, i) => {\r\n          let bInd = false;\r\n          if (x.title === layerTitle && x.type === CatalogItemType.Layer) {\r\n            if (i !== idx && x.address !== item.address) {\r\n              bInd = true;\r\n            }\r\n            indicesMatchTitle.push(i);\r\n          }\r\n          return bInd;\r\n        }); // $& i !== idx\r\n\r\n        if (diffAddress.length > 0) {\r\n          const nPosition = indicesMatchTitle.findIndex(x => x === idx) + 1;\r\n          outItem.title = `${item.title} (${nPosition})`; // source: ${item.address.split('.')[0]}\r\n        }\r\n\r\n        const exist = acc.find((x) => x.title === outItem.title && x.type === CatalogItemType.Layer);\r\n        if (!exist) {\r\n          acc[acc.length] = outItem;\r\n        }\r\n      } else if (item.type === CatalogItemType.Group) {\r\n          outItem.items = recursiveGroupByLayerAddress(item.items,  layer => layer.title);\r\n          acc[acc.length] = outItem;\r\n      }\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n    const request4$ = request3$.pipe(\r\n      map(output => groupByGroupId(output, group => group.id)),\r\n      map((output) => [].concat(...output)),\r\n      map(data => recursiveGroupByLayerAddress(data,  layer => layer.title))\r\n    );\r\n\r\n    return request4$;\r\n  }\r\n\r\n  private getCatalogCapabilities(catalog: Catalog): Observable<any> {\r\n    const sType: string = TypeCatalog[catalog.type as string];\r\n    return this.capabilitiesService.getCapabilities(\r\n      TypeCapabilities[sType],\r\n      catalog.url,\r\n      catalog.version\r\n    );\r\n  }\r\n\r\n  private prepareCatalogItemLayer(layer, idParent, layersQueryFormat, catalog,\r\n                                  catalogQueryParams, catalogSourceOptions, catalogTooltipType) {\r\n    const configuredQueryFormat = this.retriveLayerInfoFormat(\r\n      layer.Name,\r\n      layersQueryFormat\r\n    );\r\n\r\n    const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n    const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n    const keywordList = layer.KeywordList\r\n      ? layer.KeywordList\r\n      : undefined;\r\n    const timeFilter = this.capabilitiesService.getTimeFilter(layer);\r\n    const timeFilterable =\r\n      timeFilter && Object.keys(timeFilter).length > 0 ? true : false;\r\n    const legendOptions = layer.Style\r\n      ? this.capabilitiesService.getStyle(layer.Style)\r\n      : undefined;\r\n\r\n    const params = Object.assign({}, catalogQueryParams, {\r\n      LAYERS: layer.Name,\r\n      FEATURE_COUNT: catalog.count,\r\n      VERSION: catalog.version || '1.3.0'\r\n    } as WMSDataSourceOptionsParams\r\n    );\r\n    const baseSourceOptions = {\r\n      type: 'wms',\r\n      url: catalog.url,\r\n      crossOrigin: catalog.setCrossOriginAnonymous\r\n        ? 'anonymous'\r\n        : undefined,\r\n      timeFilter: { ...timeFilter, ...catalog.timeFilter },\r\n      timeFilterable: timeFilterable ? true : false,\r\n      queryable: layer.queryable,\r\n      queryFormat: configuredQueryFormat,\r\n      queryHtmlTarget: catalog.queryHtmlTarget || QueryHtmlTarget.IFRAME\r\n    };\r\n    const sourceOptions = Object.assign(\r\n      {},\r\n      baseSourceOptions,\r\n      catalogSourceOptions,\r\n      { params }\r\n    ) as WMSDataSourceOptions;\r\n\r\n    const layerPrepare = {\r\n      id: generateIdFromSourceOptions(sourceOptions),\r\n      type: CatalogItemType.Layer,\r\n      title: layer.Title,\r\n      address: idParent,\r\n      options: {\r\n        title: layer.Title,\r\n        maxResolution:\r\n          getResolutionFromScale(layer.MaxScaleDenominator) || Infinity,\r\n        minResolution:\r\n          getResolutionFromScale(layer.MinScaleDenominator) || 0,\r\n        metadata: {\r\n          url: metadata ? metadata.OnlineResource : undefined,\r\n          extern: metadata ? true : undefined,\r\n          abstract,\r\n          keywordList\r\n        },\r\n        legendOptions,\r\n        tooltip: { type: catalogTooltipType } as TooltipContent,\r\n        sourceOptions\r\n      }\r\n    };\r\n\r\n    return layerPrepare;\r\n  }\r\n\r\n  private prepareCatalogItemGroup(itemListIn, regexes, idGroup, layersQueryFormat, catalog,\r\n                                  catalogQueryParams, catalogSourceOptions, catalogTooltipType) {\r\n     const groupPrepare = {\r\n        id: idGroup,\r\n        type: CatalogItemType.Group,\r\n        title: itemListIn.Title,\r\n        address: catalog.id,\r\n        items: itemListIn.Layer.reduce(\r\n          (items: CatalogItem[], layer: any) => {\r\n\r\n            if (layer.Layer !== undefined) {\r\n              // recursive, check next level\r\n              const idGroupItemNextLevel = idGroup + `.group.${layer.Name || layer.Layer[0].Name}`;\r\n              const groupItem: CatalogItemGroup = this.prepareCatalogItemGroup(layer, regexes, idGroupItemNextLevel,\r\n                layersQueryFormat, catalog, catalogQueryParams, catalogSourceOptions, catalogTooltipType);\r\n\r\n              items.push(groupItem);\r\n            } else {\r\n              if (this.testLayerRegexes(layer.Name, regexes) === false) {\r\n                return items;\r\n              }\r\n\r\n              const layerItem: CatalogItemLayer<ImageLayerOptions> = this.prepareCatalogItemLayer(layer, idGroup, layersQueryFormat,\r\n                catalog, catalogQueryParams, catalogSourceOptions, catalogTooltipType);\r\n\r\n              items.push(layerItem);\r\n            }\r\n            return items;\r\n          },\r\n          []\r\n        )\r\n      };\r\n     return groupPrepare;\r\n  }\r\n\r\n  private includeRecursiveItems(\r\n    catalog: Catalog,\r\n    itemListIn: any,\r\n    itemsPrepare: CatalogItem[],\r\n    loopLevel: number = 0,\r\n  ) {\r\n    // Dig all levels until last level (layer object are not defined on last level)\r\n    const regexes = (catalog.regFilters || []).map(\r\n      (pattern: string) => new RegExp(pattern)\r\n    );\r\n    const catalogQueryParams = catalog.queryParams || {};\r\n    const catalogSourceOptions = catalog.sourceOptions || {};\r\n\r\n    if (!itemListIn.Layer) {\r\n      return;\r\n    }\r\n\r\n    for (const item of itemListIn.Layer) {\r\n      if (item.Layer !== undefined) {\r\n        // recursive, check next level\r\n        this.includeRecursiveItems(catalog, item, itemsPrepare, loopLevel + 1);\r\n        continue;\r\n      }\r\n\r\n      const catalogTooltipType = this.retrieveTooltipType(catalog);\r\n      const layersQueryFormat = this.findCatalogInfoFormat(catalog);\r\n\r\n      // group(with layers) and layer(without group) level 1\r\n      if (loopLevel !== 0) {\r\n\r\n        // TODO: Slice that into multiple methods\r\n        // Define object of group layer\r\n        const idGroupItem = `catalog.group.${itemListIn.Name || item.Name}`;\r\n        const groupItem = this.prepareCatalogItemGroup(itemListIn, regexes, idGroupItem, layersQueryFormat, catalog,\r\n          catalogQueryParams, catalogSourceOptions, catalogTooltipType);\r\n\r\n        if (groupItem.items.length !== 0) {\r\n          itemsPrepare.push(groupItem);\r\n        }\r\n\r\n        // Break the group (don't add a group of layer for each of their layer!)\r\n        break;\r\n      } else {\r\n        // layer without group\r\n        const layerItem = this.prepareCatalogItemLayer(item, catalog.id, layersQueryFormat,\r\n          catalog, catalogQueryParams, catalogSourceOptions, catalogTooltipType);\r\n        itemsPrepare.push(layerItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getWMTSItems(\r\n    catalog: Catalog,\r\n    capabilities: { [key: string]: any }\r\n  ): CatalogItemLayer[] {\r\n    const layers = capabilities.Contents.Layer;\r\n    const regexes = (catalog.regFilters || []).map(\r\n      (pattern: string) => new RegExp(pattern)\r\n    );\r\n    const catalogQueryParams = catalog.queryParams || {};\r\n    const catalogSourceOptions = catalog.sourceOptions || {};\r\n\r\n    return layers\r\n      .map((layer: any) => {\r\n        if (this.testLayerRegexes(layer.Identifier, regexes) === false) {\r\n          return undefined;\r\n        }\r\n        const params = Object.assign({}, catalogQueryParams, {\r\n          version: '1.0.0'\r\n        });\r\n        const baseSourceOptions = {\r\n          type: 'wmts',\r\n          url: catalog.url,\r\n          crossOrigin: catalog.setCrossOriginAnonymous\r\n            ? 'anonymous'\r\n            : undefined,\r\n          layer: layer.Identifier,\r\n          matrixSet: catalog.matrixSet,\r\n          optionsFromCapabilities: true,\r\n          requestEncoding: catalog.requestEncoding || 'KVP',\r\n          style: 'default'\r\n        } as WMTSDataSourceOptions;\r\n        const sourceOptions = Object.assign(\r\n          {},\r\n          baseSourceOptions,\r\n          catalogSourceOptions,\r\n          { params }\r\n        ) as WMTSDataSourceOptions;\r\n\r\n        return {\r\n          id: generateIdFromSourceOptions(sourceOptions),\r\n          type: CatalogItemType.Layer,\r\n          title: layer.Title,\r\n          address: catalog.id,\r\n          options: {\r\n            title: layer.Title,\r\n            sourceOptions,\r\n            maxResolution: Infinity,\r\n            minResolution: 0\r\n          }\r\n        };\r\n      })\r\n      .filter((item: CatalogItemLayer | undefined) => item !== undefined);\r\n  }\r\n\r\n  private testLayerRegexes(layerName, regexes): boolean {\r\n    if (regexes.length === 0) {\r\n      return true;\r\n    }\r\n    return regexes.find((regex: RegExp) => regex.test(layerName)) !== undefined;\r\n  }\r\n\r\n  private retriveLayerInfoFormat(\r\n    layerNameFromCatalog: string,\r\n    layersQueryFormat: { layer: string; queryFormat: QueryFormat }[]\r\n  ): QueryFormat {\r\n    const currentLayerInfoFormat = layersQueryFormat.find(\r\n      f => f.layer === layerNameFromCatalog\r\n    );\r\n    const baseInfoFormat = layersQueryFormat.find(f => f.layer === '*');\r\n    let queryFormat: QueryFormat;\r\n    if (currentLayerInfoFormat) {\r\n      queryFormat = currentLayerInfoFormat.queryFormat;\r\n    } else if (baseInfoFormat) {\r\n      queryFormat = baseInfoFormat.queryFormat;\r\n    }\r\n    return queryFormat;\r\n  }\r\n\r\n  private retrieveTooltipType(catalog: Catalog): TooltipType {\r\n    if (!catalog.tooltipType) {\r\n      return TooltipType.TITLE;\r\n    }\r\n    return catalog.tooltipType;\r\n  }\r\n\r\n  private findCatalogInfoFormat(\r\n    catalog: Catalog\r\n  ): { layer: string; queryFormat: QueryFormat }[] {\r\n    const layersQueryFormat: { layer: string; queryFormat: QueryFormat }[] = [];\r\n    if (!catalog.queryFormat) {\r\n      return layersQueryFormat;\r\n    }\r\n    Object.keys(catalog.queryFormat).forEach(configuredInfoFormat => {\r\n      if (catalog.queryFormat[configuredInfoFormat] instanceof Array) {\r\n        catalog.queryFormat[configuredInfoFormat].forEach(layerName => {\r\n          if (\r\n            !layersQueryFormat.find(specific => specific.layer === layerName)\r\n          ) {\r\n            layersQueryFormat.push({\r\n              layer: layerName,\r\n              queryFormat: configuredInfoFormat as QueryFormat\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (\r\n          !layersQueryFormat.find(\r\n            specific =>\r\n              specific.layer === catalog.queryFormat[configuredInfoFormat]\r\n          )\r\n        ) {\r\n          layersQueryFormat.push({\r\n            layer: catalog.queryFormat[configuredInfoFormat],\r\n            queryFormat: configuredInfoFormat as QueryFormat\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return layersQueryFormat;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { zip, BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStore, EntityStoreWatcher } from '@igo2/common';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Component to browse a catalog's groups and layers and display them on a map.\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser',\r\n  templateUrl: './catalog-browser.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Catalog items store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<CatalogItem>;\r\n\r\n // private resolution$$: Subscription;\r\n\r\n  get resolution$(): BehaviorSubject<number> { return this.map.viewController.resolution$; }\r\n\r\n  @Input() catalogAllowLegend = false;\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Store holding the catalog's items\r\n   */\r\n  @Input() store: EntityStore<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Whether a group can be toggled when it's collapsed\r\n   */\r\n  @Input() toggleCollapsedGroup: boolean = true;\r\n\r\n  constructor(\r\n    private layerService: LayerService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    const currentItems = this.map.layers.map((layer: Layer) => {\r\n      return {\r\n        id: layer.options.source.id,\r\n        title: layer.title,\r\n        type: CatalogItemType.Layer\r\n      };\r\n    });\r\n    this.store.state.updateMany(currentItems, { added: true }, true);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n\r\n    this.catalogAllowLegend = this.catalog.showLegend ? this.catalog.showLegend : this.catalogAllowLegend;\r\n\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Layer added event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const layer = event.layer;\r\n    this.store.state.update(layer, { added: event.added }, false);\r\n    event.added ? this.addLayerToMap(layer) : this.removeLayerFromMap(layer);\r\n  }\r\n\r\n  /**\r\n   * When a froup is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Group added event\r\n   */\r\n  onGroupAddedChange(event: { added: boolean; group: CatalogItemGroup }) {\r\n    const group = event.group;\r\n    this.store.state.update(group, { added: event.added }, false);\r\n    event.added ? this.addGroupToMap(group) : this.removeGroupFromMap(group);\r\n  }\r\n\r\n  /**\r\n   * Add layer to map\r\n   * @param layer Catalog layer\r\n   */\r\n  private addLayerToMap(layer: CatalogItemLayer) {\r\n    this.addLayersToMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove layer from map\r\n   * @param layer Catalog layer\r\n   */\r\n  private removeLayerFromMap(layer: CatalogItemLayer) {\r\n    this.removeLayersFromMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add multiple layers to map\r\n   * @param layers Catalog layers\r\n   */\r\n  private addLayersToMap(layers: CatalogItemLayer[]) {\r\n    const layers$ = layers.map((layer: CatalogItemLayer) => {\r\n      return this.layerService.createAsyncLayer(layer.options);\r\n    });\r\n\r\n    zip(...layers$).subscribe((oLayers: Layer[]) => {\r\n      this.store.state.updateMany(layers, { added: true });\r\n      this.map.addLayers(oLayers);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove multiple layers from map\r\n   * @param layers Catalog layers\r\n   */\r\n  private removeLayersFromMap(layers: CatalogItemLayer[]) {\r\n    layers.forEach((layer: CatalogItemLayer) => {\r\n      this.store.state.update(layer, { added: false });\r\n      if (layer.options.baseLayer === true) {\r\n        const oLayer = this.map.getLayerById(layer.options.id);\r\n        if (oLayer !== undefined) {\r\n          this.map.removeLayer(oLayer);\r\n        }\r\n      } else {\r\n        const oLayer = this.map.getLayerById(layer.id);\r\n        if (oLayer !== undefined) {\r\n          this.map.removeLayer(oLayer);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sort the layers by title. asc or desc.\r\n   * @internal\r\n   */\r\n  private sortCatalogItemsByTitle(items: CatalogItem[], direction) {\r\n    const returnItem = items.sort((a, b) => {\r\n      const titleA = a.title.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      const titleB = b.title.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n\r\n      if (titleA < titleB) {\r\n        return -1;\r\n      }\r\n      if (titleA > titleB) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n    switch (direction) {\r\n      case 'asc':\r\n        return returnItem;\r\n      case 'desc':\r\n        return returnItem.reverse();\r\n      default:\r\n        return items;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add all the layers of a group to map\r\n   * @param group Catalog group\r\n   */\r\n  private addGroupToMap(group: CatalogItemGroup) {\r\n    let layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === false;\r\n    });\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      layers = this.sortCatalogItemsByTitle(layers, this.catalog.sortDirection);\r\n  }\r\n    this.addLayersToMap(layers.reverse() as CatalogItemLayer[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all the layers of a group from map\r\n   * @param group Catalog group\r\n   */\r\n  private removeGroupFromMap(group: CatalogItemGroup) {\r\n    const layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === true;\r\n    });\r\n    this.removeLayersFromMap(layers as CatalogItemLayer[]);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { CatalogItemLayer } from '../shared';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { first } from 'rxjs/operators';\r\nimport { Layer } from '../../layer/shared/layers';\r\n\r\n/**\r\n * Catalog browser layer item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-layer',\r\n  templateUrl: './catalog-browser-layer.component.html',\r\n  styleUrls: ['./catalog-browser-layer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserLayerComponent implements OnInit {\r\n  public inRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n  public isPreview$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private lastTimeoutRequest;\r\n\r\n  public layerLegendShown$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  public igoLayer$ = new BehaviorSubject<Layer>(undefined);\r\n\r\n  @Input() resolution: number;\r\n\r\n  @Input() catalogAllowLegend = false;\r\n\r\n  /**\r\n   * Catalog layer\r\n   */\r\n  @Input() layer: CatalogItemLayer;\r\n\r\n  /**\r\n   * Whether the layer is already added to the map\r\n   */\r\n  @Input() added = false;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  @Output() addedLayerIsPreview = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.layer);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.layer) || 'layers';\r\n  }\r\n\r\n  constructor(private layerService: LayerService ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isInResolutionsRange();\r\n    this.isPreview$.subscribe(value => this.addedLayerIsPreview.emit(value));\r\n  }\r\n\r\n  /**\r\n   * On mouse event, mouseenter /mouseleave\r\n   * @internal\r\n   */\r\n  onMouseEvent(event) {\r\n    this.onToggleClick(event);\r\n  }\r\n\r\n  askForLegend(event) {\r\n    this.layerLegendShown$.next(!this.layerLegendShown$.value);\r\n    this.layerService.createAsyncLayer(this.layer.options).pipe(first())\r\n    .subscribe(layer => this.igoLayer$.next(layer));\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick(event) {\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') {\r\n      clearTimeout(this.lastTimeoutRequest);\r\n    }\r\n\r\n    switch (event.type) {\r\n      case 'click':\r\n        if (!this.isPreview$.value) {\r\n          if (this.added) {\r\n            this.remove();\r\n          } else {\r\n            this.add();\r\n          }\r\n        }\r\n        this.isPreview$.next(false);\r\n        break;\r\n      case 'mouseenter':\r\n        if (!this.isPreview$.value && !this.added) {\r\n          this.lastTimeoutRequest = setTimeout(() => {\r\n            this.add();\r\n            this.isPreview$.next(true);\r\n          }, 500);\r\n        }\r\n        break;\r\n      case 'mouseleave':\r\n        if (this.isPreview$.value) {\r\n          this.remove();\r\n          this.isPreview$.next(false);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    if (!this.added) {\r\n      this.added = true;\r\n      this.addedChange.emit({ added: true, layer: this.layer });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = false\r\n   */\r\n  private remove() {\r\n    if (this.added) {\r\n      this.added = false;\r\n      this.addedChange.emit({ added: false, layer: this.layer });\r\n    }\r\n  }\r\n\r\n  haveGroup(): boolean {\r\n    return !(!this.layer.address || this.layer.address.split('.').length === 1);\r\n  }\r\n\r\n  isInResolutionsRange(): boolean {\r\n    const minResolution = this.layer.options.minResolution;\r\n    const maxResolution = this.layer.options.maxResolution;\r\n    this.inRange$.next(\r\n      this.resolution >= minResolution && this.resolution <= maxResolution\r\n    );\r\n    return this.inRange$.value;\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    if (this.added) {\r\n      return this.isPreview$.value\r\n        ? 'igo.geo.catalog.layer.addToMap'\r\n        : this.inRange$.value\r\n        ? 'igo.geo.catalog.layer.removeFromMap'\r\n        : 'igo.geo.catalog.layer.removeFromMapOutRange';\r\n    } else {\r\n      return this.inRange$.value\r\n        ? 'igo.geo.catalog.layer.addToMap'\r\n        : 'igo.geo.catalog.layer.addToMapOutRange';\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStateManager, EntityStore } from '@igo2/common';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemGroup,\r\n  CatalogItemLayer,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Catalog browser group item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-group',\r\n  templateUrl: './catalog-browser-group.component.html',\r\n  styleUrls: ['./catalog-browser-group.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserGroupComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Group's items store\r\n   * @internal\r\n   */\r\n  store = new EntityStore<CatalogItem, CatalogItemState>([]);\r\n\r\n  /**\r\n   * Whether all the layers of the group are added\r\n   * @internal\r\n   */\r\n  added$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  preview$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  /**\r\n   * Whether the toggle button is disabled\r\n   * @internal\r\n   */\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Catalog group\r\n   */\r\n  @Input() group: CatalogItemGroup;\r\n\r\n  /**\r\n   * Whether the group is collapsed\r\n   */\r\n  @Input() collapsed: boolean = true;\r\n\r\n  @Input() resolution: number;\r\n\r\n  @Input() catalogAllowLegend = false;\r\n\r\n  /**\r\n   * Whether the group can be toggled when it's collapsed\r\n   */\r\n  @Input() toggleCollapsed: boolean = true;\r\n\r\n  /**\r\n   * Parent catalog's items store state. Groups share a unique\r\n   * EntityState that tracks the group and it's layers state (whether they are added or not).\r\n   * Sharing a unique state would also allow us to expand this component to allow\r\n   * the selection of a layer while unselecting any layer already selected in another group.\r\n   * This could be useful to display some layer info before adding it, for example.\r\n   */\r\n  @Input() state: EntityStateManager<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of the group is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    group: CatalogItemGroup;\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of a layer is clicked\r\n   */\r\n  @Output() layerAddedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return this.group.title;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.load(this.group.items);\r\n    this.evaluateAdded();\r\n    this.evaluateDisabled(this.collapsed);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.store.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added$.value ? this.remove() : this.add();\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleCollapsed(collapsed: boolean) {\r\n    this.evaluateDisabled(collapsed);\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, evaluate if all the layers of the group\r\n   * are now added or removed. If so, consider that the group itself is added\r\n   * or removed.\r\n   * @internal\r\n   * @param event Layer added change event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    this.layerAddedChange.emit(event);\r\n    this.tryToggleGroup(event);\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    this.added$.next(true);\r\n    this.addedChange.emit({\r\n      added: true,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private remove() {\r\n    this.added$.next(false);\r\n    this.addedChange.emit({\r\n      added: false,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  onLayerPreview(event) {\r\n    this.preview$.next(event);\r\n  }\r\n\r\n  /**\r\n   * If all the layers of the group added or removed, add or remove the group itself.\r\n   * @param event The last layer added change event to occur\r\n   */\r\n  private tryToggleGroup(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const added = event.added;\r\n    const layer = event.layer;\r\n\r\n    const layersAdded = this.store.view\r\n      .all()\r\n      .filter((item: CatalogItem) => item.id !== layer.id)\r\n      .map((item: CatalogItem) => this.state.get(item).added || false);\r\n\r\n    if (layersAdded.every(value => value === added)) {\r\n      added ? this.add() : this.remove();\r\n    } else if (this.added$.value === true) {\r\n      this.added$.next(false);\r\n    }\r\n  }\r\n\r\n  private evaluateAdded() {\r\n    const added = this.store.all().every((item: CatalogItem) => {\r\n      return (this.state.get(item).added || false) === true;\r\n    });\r\n    this.added$.next(added);\r\n  }\r\n\r\n  private evaluateDisabled(collapsed: boolean) {\r\n    let disabled = false;\r\n    if (this.toggleCollapsed === false) {\r\n      disabled = collapsed;\r\n    }\r\n    this.disabled$.next(disabled);\r\n  }\r\n\r\n  onTitleClick() {\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatSliderModule,\r\n  MatBadgeModule,\r\n  MatSelectModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoListModule,\r\n  IgoCollapsibleModule,\r\n  IgoImageModule\r\n} from '@igo2/common';\r\n\r\nimport { LayerService } from './shared/layer.service';\r\nimport { StyleService } from './shared/style.service';\r\nimport { LayerListService } from './layer-list/layer-list.service';\r\nimport { LayerItemComponent } from './layer-item/layer-item.component';\r\nimport { LayerLegendComponent } from './layer-legend/layer-legend.component';\r\nimport { LayerListComponent } from './layer-list/layer-list.component';\r\nimport { LayerListBindingDirective } from './layer-list/layer-list-binding.directive';\r\nimport { TrackFeatureButtonComponent } from './track-feature-button/track-feature-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    MatListModule,\r\n    MatSliderModule,\r\n    MatBadgeModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoImageModule\r\n  ],\r\n  exports: [\r\n    LayerItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListBindingDirective,\r\n    TrackFeatureButtonComponent\r\n  ],\r\n  declarations: [\r\n    LayerItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListBindingDirective,\r\n    TrackFeatureButtonComponent\r\n  ]\r\n})\r\nexport class IgoLayerModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLayerModule,\r\n      providers: [LayerService, StyleService, LayerListService]\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatBadgeModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoMatBadgeIconModule,\r\n  IgoCollapsibleModule,\r\n  IgoListModule\r\n} from '@igo2/common';\r\n\r\nimport { IgoMetadataModule } from './../../metadata/metadata.module';\r\nimport { CatalogBrowserComponent } from './catalog-browser.component';\r\nimport { CatalogBrowserLayerComponent } from './catalog-browser-layer.component';\r\nimport { CatalogBrowserGroupComponent } from './catalog-browser-group.component';\r\nimport { IgoLayerModule } from '../../layer/layer.module';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatBadgeModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoMatBadgeIconModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoMetadataModule,\r\n    IgoLayerModule\r\n  ],\r\n  exports: [\r\n    CatalogBrowserComponent\r\n  ],\r\n  declarations: [\r\n    CatalogBrowserComponent,\r\n    CatalogBrowserGroupComponent,\r\n    CatalogBrowserLayerComponent\r\n  ]\r\n})\r\nexport class IgoCatalogBrowserModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { EntityStore } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\nimport { Catalog } from '../shared/catalog.abstract';\r\n\r\n/**\r\n * Component to browse a list of available catalogs\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library',\r\n  templateUrl: './catalog-library.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryComponent implements OnInit {\r\n\r\n  /**\r\n   * Store holding the catalogs\r\n   */\r\n  @Input() store: EntityStore<Catalog>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted a catalog is selected or unselected\r\n   */\r\n  @Output() catalogSelectChange = new EventEmitter<{\r\n    selected: boolean;\r\n    catalog: Catalog;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.state.clear();\r\n  }\r\n\r\n  /**\r\n   * When a catalog is selected, update it's state in the store\r\n   * and emit the catalog select change event\r\n   * @internal\r\n   */\r\n  onCatalogSelect(catalog: Catalog) {\r\n    this.store.state.update(catalog, {\r\n      selected: true,\r\n      focused: true\r\n    }, true);\r\n    this.catalogSelectChange.emit({selected: true, catalog});\r\n  }\r\n\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { getEntityTitle } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\nimport { Catalog } from '../shared/catalog.abstract';\r\n\r\n/**\r\n * Catalog library item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library-item',\r\n  templateUrl: './catalog-library-item.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryItemComponent {\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.catalog); }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule } from '@igo2/common';\r\n\r\nimport { CatalogLibaryComponent, } from './catalog-library.component';\r\nimport { CatalogLibaryItemComponent } from './catalog-library-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoListModule\r\n  ],\r\n  exports: [\r\n    CatalogLibaryComponent\r\n  ],\r\n  declarations: [\r\n    CatalogLibaryComponent,\r\n    CatalogLibaryItemComponent\r\n  ]\r\n})\r\nexport class IgoCatalogLibraryModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatBadgeModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule, IgoCollapsibleModule, IgoMatBadgeIconModule } from '@igo2/common';\r\n\r\nimport { IgoCatalogBrowserModule } from './catalog-browser/catalog-browser.module';\r\nimport { IgoCatalogLibraryModule } from './catalog-library/catalog-library.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatBadgeModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoMatBadgeIconModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule\r\n  ],\r\n  exports: [\r\n    IgoCatalogBrowserModule,\r\n    IgoCatalogLibraryModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoCatalogModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoDataSourceModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDataSourceModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DataSource } from '../../datasource/shared/datasources/datasource';\r\n\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\nimport { TimeFilterableDataSource } from './time-filter.interface';\r\n\r\n@Pipe({\r\n  name: 'filterableDataSource'\r\n})\r\nexport class FilterableDataSourcePipe implements PipeTransform {\r\n  transform(value: Layer[], arg: string): Layer[] {\r\n    let layers;\r\n\r\n    if (arg === 'time') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as TimeFilterableDataSource;\r\n        return (\r\n          this.isTimeFilterable(datasource) &&\r\n          datasource.options.timeFilter !== undefined &&\r\n          Object.keys(datasource.options.timeFilter).length\r\n        );\r\n      });\r\n    }\r\n    if (arg === 'ogc') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as OgcFilterableDataSource;\r\n        return this.isOgcFilterable(datasource);\r\n      });\r\n    }\r\n    return layers;\r\n  }\r\n\r\n  private isTimeFilterable(dataSource: TimeFilterableDataSource) {\r\n    if (dataSource.options.type !== 'wms') {\r\n      return false;\r\n    }\r\n    return dataSource.options.timeFilterable;\r\n  }\r\n\r\n  private isOgcFilterable(dataSource: OgcFilterableDataSource): boolean {\r\n    let isOgcFilterable = false;\r\n    if (\r\n      dataSource.options.ogcFilters &&\r\n      dataSource.options.ogcFilters.enabled &&\r\n      dataSource.options.ogcFilters.editable\r\n    ) {\r\n      isOgcFilterable = true;\r\n    }\r\n    if (\r\n      dataSource.options.ogcFilters &&\r\n      dataSource.options.ogcFilters.enabled &&\r\n      dataSource.options.ogcFilters.pushButtons) {\r\n        isOgcFilterable = true;\r\n    }\r\n    return isOgcFilterable;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { TileArcGISRestDataSource } from '../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\n@Injectable()\r\nexport class TimeFilterService {\r\n  constructor() {}\r\n\r\n  filterByDate(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    date: Date | [Date, Date]\r\n  ) {\r\n    let time;\r\n    let newdateform;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(date)) {\r\n      const dates = [];\r\n      if (date[0]) {\r\n        newdateformStart = this.reformatDateTime(date[0]);\r\n        dates.push(date[0]);\r\n      }\r\n      if (date[1]) {\r\n        newdateformEnd = this.reformatDateTime(date[1]);\r\n        dates.push(date[1]);\r\n      }\r\n      if (dates.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else if (date) {\r\n      newdateform = this.reformatDateTime(date);\r\n      time = newdateform;\r\n    }\r\n\r\n    const params = { TIME: time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  filterByYear(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    year: string | [string, string]\r\n  ) {\r\n    let time;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(year)) {\r\n      const years = [];\r\n      if (year[0]) {\r\n        newdateformStart = year[0];\r\n        years.push(year[0]);\r\n      }\r\n      if (year[1]) {\r\n        newdateformEnd = year[1];\r\n        years.push(year[1]);\r\n      }\r\n      if (years.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else {  // to reset filter.\r\n      time = year;\r\n    }\r\n\r\n    const params = { TIME: time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  private reformatDateTime(value) {\r\n    const year = value.getFullYear();\r\n    let month = value.getMonth() + 1;\r\n    let day = value.getUTCDate();\r\n    let hour = value.getUTCHours();\r\n    let minute = value.getUTCMinutes();\r\n\r\n    if (Number(month) < 10) {\r\n      month = '0' + month;\r\n    }\r\n\r\n    if (Number(day) < 10) {\r\n      day = '0' + day;\r\n    }\r\n\r\n    if (Number(hour) < 10) {\r\n      hour = '0' + hour;\r\n    }\r\n\r\n    if (Number(minute) < 10) {\r\n      minute = '0' + minute;\r\n    }\r\n\r\n    return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':00Z';\r\n  }\r\n}\r\n","export enum OgcFilterOperatorType {\r\n    BasicNumericOperator = 'BasicNumericOperator',\r\n    Basic = 'Basic',\r\n    BasicAndSpatial = 'BasicAndSpatial',\r\n    Spatial = 'Spatial',\r\n    All = 'All'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { OgcFilterWriter } from './ogc-filter';\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\n\r\n@Injectable()\r\nexport class OGCFilterService {\r\n  constructor() {}\r\n\r\n  public filterByOgc(wmsDatasource: WMSDataSource, filterString: string) {\r\n    const appliedFilter = new OgcFilterWriter().formatProcessedOgcFilter(filterString, wmsDatasource.options.params.LAYERS);\r\n    wmsDatasource.ol.updateParams({ FILTER: appliedFilter });\r\n  }\r\n\r\n  public setOgcWFSFiltersOptions(wfsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wfsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.paramsWFS.fieldNameGeometry,\r\n        new olProjection({ code: options.paramsWFS.srsName }),\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          options.ogcFilters.filters,\r\n          options.paramsWFS.fieldNameGeometry\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public setOgcWMSFiltersOptions(wmsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wmsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.fieldNameGeometry,\r\n        undefined,\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          // With some wms server, this param must be set to make spatials call.\r\n          options.ogcFilters.filters,\r\n          options.fieldNameGeometry\r\n        );\r\n      }\r\n      this.filterByOgc(\r\n        wmsDatasource as WMSDataSource,\r\n        ogcFilterWriter.buildFilter(options.ogcFilters.filters)\r\n      );\r\n      options.filtered = true;\r\n    } else {\r\n      options.ogcFilters.filters = undefined;\r\n      options.ogcFilters.interfaceOgcFilters = [];\r\n      options.filtered = false;\r\n    }\r\n  }\r\n}\r\n","export enum SpatialFilterQueryType {\r\n    AdmRegion = 'AdmRegion',\r\n    Mun = 'Mun',\r\n    Arrond = 'Arrond',\r\n    CircFed = 'CircFed',\r\n    CircProv = 'CircProv',\r\n    DirReg = 'DirReg',\r\n    MRC = 'MRC',\r\n    RegTour = 'RegTour'\r\n}\r\n\r\nexport enum SpatialFilterType {\r\n    Predefined = 'Predefined',\r\n    Polygon = 'Polygon',\r\n    Point = 'Point'\r\n}\r\n\r\nexport enum SpatialFilterItemType {\r\n    Address = 'Address',\r\n    Thematics = 'Thematics'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../../feature/shared';\r\nimport {\r\n  SpatialFilterQueryType,\r\n  SpatialFilterItemType\r\n} from './spatial-filter.enum';\r\nimport { SpatialFilterThematic } from './spatial-filter.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpatialFilterService {\r\n  public baseUrl: string = 'https://geoegl.msp.gouv.qc.ca/apis/terrapi/';\r\n\r\n  /*\r\n   * Type association with URL\r\n   */\r\n  public urlFilterList = {\r\n    AdmRegion: 'regadmin',\r\n    Arrond: 'arrondissements',\r\n    CircFed: 'circ-fed',\r\n    CircProv: 'circ-prov',\r\n    DirReg: 'dir-reg',\r\n    MRC: 'mrc',\r\n    Mun: 'municipalites',\r\n    RegTour: 'tourisme',\r\n    bornes: 'bornes-sumi',\r\n    hydro: 'hydro',\r\n    routes: 'routes'\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    private configService: ConfigService\r\n  ) {\r\n    this.baseUrl =\r\n      this.configService.getConfig('spatialFilter.url') || this.baseUrl;\r\n  }\r\n\r\n  getKeyByValue(object, value) {\r\n    return Object.keys(object).find(key => object[key] === value);\r\n  }\r\n\r\n  /*\r\n   * Loading data for spatial filter list component (NO GEOMETRY)\r\n   */\r\n  loadFilterList(type: SpatialFilterQueryType): Observable<Feature[]> {\r\n    const urlPath = type as string;\r\n    if (urlPath) {\r\n      return this.http\r\n        .get<{ features: Feature[] }>(\r\n          this.baseUrl + this.urlFilterList[urlPath]\r\n        )\r\n        .pipe(\r\n          map(featureCollection =>\r\n            featureCollection.features.map(f => {\r\n              f.meta = {\r\n                id: f.properties.code\r\n              };\r\n              return f;\r\n            })\r\n          )\r\n        );\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Loading item list (STRING)\r\n   */\r\n  loadThematicsList() {\r\n    const url = 'types';\r\n    const items: SpatialFilterThematic[] = [];\r\n    return this.http.get(this.baseUrl + url).pipe(\r\n      map((types: string[]) => {\r\n        types.forEach(type => {\r\n          if (type.startsWith('lieux')) {\r\n            const item: SpatialFilterThematic = {\r\n              name: undefined,\r\n              source: type\r\n            };\r\n            let substr = type.substring(6, type.length);\r\n            let name = substr;\r\n            if (substr.includes('.')) {\r\n              const index = substr.indexOf('.');\r\n              name = substr.substring(index + 1, substr.length);\r\n              substr = substr.substring(0, index);\r\n            }\r\n            try {\r\n              item.name = this.languageService.translate.instant(\r\n                'igo.geo.terrapi.' + name\r\n              );\r\n            } catch (e) {\r\n              item.name = name.substring(0, 1).toUpperCase() + name.substring(1, name.length - 1);\r\n            }\r\n\r\n            try {\r\n              item.group = this.languageService.translate.instant(\r\n                'igo.geo.spatialFilter.group.' + substr\r\n              );\r\n            } catch (e) {\r\n              item.group = substr.substring(0, 1).toUpperCase() + substr.substring(1, name.length - 1);\r\n            }\r\n\r\n            items.push(item);\r\n          } else {\r\n            if (this.getKeyByValue(this.urlFilterList, type)) {\r\n              const item: SpatialFilterThematic = {\r\n                name: undefined,\r\n                source: type\r\n              };\r\n              const name = this.getKeyByValue(this.urlFilterList, type);\r\n              try {\r\n                item.name = this.languageService.translate.instant(\r\n                  'igo.geo.terrapi.' + name\r\n                );\r\n              } catch (e) {\r\n                item.name = name.substring(0, 1).toUpperCase() + name.substring(1, name.length - 1);\r\n              }\r\n              item.source = type;\r\n\r\n              items.push(item);\r\n            }\r\n          }\r\n        });\r\n        return items;\r\n      })\r\n    );\r\n  }\r\n\r\n  /*\r\n   * Loading data for spatial filter item component (Address or Thematics) depends on predefined zone or draw zone (feature)\r\n   */\r\n  loadFilterItem(\r\n    feature,\r\n    itemType: SpatialFilterItemType,\r\n    type?: SpatialFilterQueryType,\r\n    thematic?: SpatialFilterThematic,\r\n    buffer?: number\r\n  ) {\r\n    if (type) {\r\n      // Predefined type\r\n      const urlType = type as string;\r\n      const url = this.baseUrl + this.urlFilterList[urlType];\r\n      let urlItem = '';\r\n      if (itemType === SpatialFilterItemType.Address) {\r\n        urlItem = 'adresses';\r\n        return this.http\r\n          .get<{ features: Feature[] }>(\r\n            url + '/' + feature.properties.code + '/' + urlItem,\r\n            {\r\n              params: {\r\n                geometry: 'true',\r\n                icon: 'true'\r\n              }\r\n            }\r\n          )\r\n          .pipe(\r\n            map(featureCollection =>\r\n              featureCollection.features.map(f => {\r\n                f.meta = {\r\n                  id: f.properties.code,\r\n                  title: this.languageService.translate.instant(\r\n                    'igo.geo.spatialFilter.Address'\r\n                  ),\r\n                  icon: (f as any).icon\r\n                };\r\n                return f;\r\n              })\r\n            )\r\n          );\r\n      } else {\r\n        // If thematics search\r\n        urlItem = thematic.source;\r\n        return this.http\r\n          .get<{ features: Feature[] }>(\r\n            url + '/' + feature.properties.code + '/' + urlItem,\r\n            {\r\n              params: {\r\n                geometry: 'true',\r\n                icon: 'true'\r\n              }\r\n            }\r\n          )\r\n          .pipe(\r\n            map(featureCollection =>\r\n              featureCollection.features.map(f => {\r\n                f.meta = {\r\n                  id: f.properties.code,\r\n                  title: thematic.name,\r\n                  icon: (f as any).icon\r\n                };\r\n                return f;\r\n              })\r\n            )\r\n          );\r\n      }\r\n    } else {\r\n      // Draw type\r\n      const url = this.baseUrl + 'locate';\r\n      if (itemType === SpatialFilterItemType.Address) {\r\n        const urlItem = '?type=adresses';\r\n        return this.http\r\n          .post<{ features: Feature[] }>(url + urlItem, {\r\n            geometry: 'true',\r\n            icon: 'true',\r\n            buffer,\r\n            loc: JSON.stringify(feature)\r\n          })\r\n          .pipe(\r\n            map(featureCollection =>\r\n              featureCollection.features.map(f => {\r\n                f.meta = {\r\n                  id: f.properties.code,\r\n                  title: this.languageService.translate.instant(\r\n                    'igo.geo.spatialFilter.Address'\r\n                  ),\r\n                  icon: (f as any).icon\r\n                };\r\n                return f;\r\n              })\r\n            )\r\n          );\r\n      } else {\r\n        // If thematics search\r\n        const urlItem = '?type=' + thematic.source;\r\n        return this.http\r\n          .post<{ features: Feature[] }>(url + urlItem, {\r\n            geometry: 'true',\r\n            icon: 'true',\r\n            buffer,\r\n            loc: JSON.stringify(feature)\r\n          })\r\n          .pipe(\r\n            map(featureCollection =>\r\n              featureCollection.features.map(f => {\r\n                f.meta = {\r\n                  id: f.properties.code,\r\n                  title: thematic.name,\r\n                  icon: (f as any).icon\r\n                };\r\n                return f;\r\n              })\r\n            )\r\n          );\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Get one territory by id (WITH GEOMETRY)\r\n   */\r\n  loadItemById(\r\n    feature: Feature,\r\n    type: SpatialFilterQueryType\r\n  ): Observable<Feature> {\r\n    const featureType = this.urlFilterList[type];\r\n    const featureCode = '/' + feature.properties.code;\r\n    if (featureType && featureCode) {\r\n      return this.http\r\n        .get<Feature>(this.baseUrl + featureType + featureCode, {\r\n          params: {\r\n            geometry: 'true'\r\n          }\r\n        })\r\n        .pipe(\r\n          map(f => {\r\n            f.meta = {\r\n              id: f.properties.code,\r\n              alias: f.properties.nom,\r\n              title: f.properties.nom\r\n            };\r\n            return f;\r\n          })\r\n        );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { OgcFilterWriter, OgcFilterableDataSourceOptions } from '../../filter/shared';\r\n\r\nimport { DataSourceOptions } from '../../datasource/shared/datasources/datasource.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DownloadService {\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  open(layer: Layer) {\r\n    const translate = this.languageService.translate;\r\n    const title = translate.instant('igo.geo.download.title');\r\n    this.messageService.success(\r\n      translate.instant('igo.geo.download.start'),\r\n      title\r\n    );\r\n\r\n    const DSOptions: DataSourceOptions = layer.dataSource.options;\r\n    if (Object.keys(DSOptions.download).length > 0) {\r\n      if (\r\n        DSOptions.download.dynamicUrl &&\r\n        DSOptions.download.url === undefined\r\n      ) {\r\n        let wfsOptions;\r\n        if (\r\n          (layer.dataSource.options as any).paramsWFS &&\r\n          Object.keys((layer.dataSource.options as any).paramsWFS).length > 0\r\n        ) {\r\n          wfsOptions = (layer.dataSource.options as any).paramsWFS;\r\n        } else {\r\n          wfsOptions = (layer.dataSource.options as any).params;\r\n        }\r\n\r\n        const outputFormatDownload =\r\n          wfsOptions.outputFormatDownload === undefined\r\n            ? 'outputformat=' + wfsOptions.outputFormat\r\n            : 'outputformat=' + wfsOptions.outputFormatDownload;\r\n\r\n        const baseurl = DSOptions.download.dynamicUrl\r\n          .replace(/&?outputformat=[^&]*/gi, '')\r\n          .replace(/&?filter=[^&]*/gi, '')\r\n          .replace(/&?bbox=[^&]*/gi, '');\r\n\r\n        const ogcFilters = (layer.dataSource.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n\r\n        let filterQueryString;\r\n        filterQueryString = new OgcFilterWriter()\r\n        .handleOgcFiltersAppliedValue(\r\n          layer.dataSource.options,\r\n          ogcFilters.geometryName,\r\n          layer.map.viewController.getExtent(),\r\n          new olProjection({ code: layer.map.projection }));\r\n        if (!filterQueryString) {\r\n          // Prevent getting all the features for empty filter\r\n            filterQueryString = new OgcFilterWriter().buildFilter(\r\n            undefined,\r\n            layer.map.viewController.getExtent(),\r\n            new olProjection({ code: layer.map.projection }),\r\n            ogcFilters.geometryName\r\n          );\r\n        } else {\r\n          filterQueryString = 'filter=' + encodeURIComponent(filterQueryString);\r\n        }\r\n        window.open(\r\n          `${baseurl}&${filterQueryString}&${outputFormatDownload}`,\r\n          '_blank'\r\n        );\r\n      } else if (DSOptions.download) {\r\n        window.open(DSOptions.download.url, '_blank');\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport { DownloadDataSourceOptions } from '../shared/download.interface';\r\nimport { DownloadService } from '../shared/download.service';\r\n\r\n@Component({\r\n  selector: 'igo-download-button',\r\n  templateUrl: './download-button.component.html',\r\n  styleUrls: ['./download-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DownloadButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private downloadService: DownloadService) {}\r\n\r\n  openDownload(layer: Layer) {\r\n    this.downloadService.open(layer);\r\n  }\r\n\r\n  get options(): DownloadDataSourceOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { DownloadButtonComponent } from './download-button/download-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [DownloadButtonComponent],\r\n  declarations: [DownloadButtonComponent]\r\n})\r\nexport class IgoDownloadModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDownloadModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { Feature } from '../shared';\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\nimport { IgoMap } from '../../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-feature-details',\r\n  templateUrl: './feature-details.component.html',\r\n  styleUrls: ['./feature-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureDetailsComponent {\r\n  private state: ConnectionState;\r\n  private offlineButtonState: boolean;\r\n\r\n  @Input()\r\n  get source(): SearchSource {\r\n    return this._source;\r\n  }\r\n  set source(value: SearchSource ) {\r\n    this._source = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  private _feature: Feature;\r\n  private _source: SearchSource;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.feature);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.feature) || 'link';\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private sanitizer: DomSanitizer,\r\n    private networkService: NetworkService\r\n  ) {\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      this.state = state;\r\n    });\r\n  }\r\n\r\n  htmlSanitizer(value): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n  }\r\n\r\n  isObject(value) {\r\n    return typeof value === 'object';\r\n  }\r\n\r\n  isUrl(value) {\r\n    if (typeof value === 'string') {\r\n      return (\r\n        value.slice(0, 8) === 'https://' || value.slice(0, 7) === 'http://'\r\n      );\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  filterFeatureProperties(feature) {\r\n    const allowedFieldsAndAlias = feature.meta ? feature.meta.alias : undefined;\r\n    const properties = {};\r\n    const offlineButtonState = this.map.offlineButtonState;\r\n\r\n    if (allowedFieldsAndAlias) {\r\n      Object.keys(allowedFieldsAndAlias).forEach(field => {\r\n        properties[allowedFieldsAndAlias[field]] = feature.properties[field];\r\n      });\r\n      return properties;\r\n    } else {\r\n      if (!offlineButtonState) {\r\n        if (this.state.connection && feature.meta && feature.meta.excludeAttribute) {\r\n          const excludeAttribute = feature.meta.excludeAttribute;\r\n          excludeAttribute.forEach(attribute => {\r\n            delete feature.properties[attribute];\r\n          });\r\n        } else if (!this.state.connection && feature.meta && feature.meta.excludeAttributeOffline) {\r\n          const excludeAttributeOffline = feature.meta.excludeAttributeOffline;\r\n          excludeAttributeOffline.forEach(attribute => {\r\n            delete feature.properties[attribute];\r\n          });\r\n        }\r\n        return feature.properties;\r\n      } else {\r\n        if (feature.meta && feature.meta.excludeAttributeOffline) {\r\n          const excludeAttributeOffline = feature.meta.excludeAttributeOffline;\r\n          excludeAttributeOffline.forEach(attribute => {\r\n            delete feature.properties[attribute];\r\n          });\r\n        }\r\n      }\r\n      return feature.properties;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { FeatureDetailsComponent } from './feature-details.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [FeatureDetailsComponent],\r\n  declarations: [FeatureDetailsComponent]\r\n})\r\nexport class IgoFeatureDetailsModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFormModule } from '@igo2/common';\r\n\r\nimport { FeatureFormComponent } from './feature-form.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoFormModule\r\n  ],\r\n  exports: [\r\n    IgoFormModule,\r\n    FeatureFormComponent\r\n  ],\r\n  declarations: [\r\n    FeatureFormComponent\r\n  ]\r\n})\r\nexport class IgoFeatureFormModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFeatureDetailsModule } from './feature-details/feature-details.module';\r\nimport { IgoFeatureFormModule } from './feature-form/feature-form.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoFeatureDetailsModule,\r\n    IgoFeatureFormModule\r\n  ],\r\n  declarations: [],\r\n  providers: []\r\n})\r\nexport class IgoFeatureModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport { Style as OlStyle } from 'ol/style';\r\n\r\nimport { FormFieldComponent } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map.\r\n */\r\n@FormFieldComponent('geometry')\r\n@Component({\r\n  selector: 'igo-geometry-form-field',\r\n  templateUrl: './geometry-form-field.component.html',\r\n  styleUrls: ['./geometry-form-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldComponent implements OnInit, OnDestroy {\r\n\r\n  readonly value$: BehaviorSubject<GeoJSONGeometry> = new BehaviorSubject(undefined);\r\n\r\n  private value$$: Subscription;\r\n\r\n  public drawControlIsActive = true;\r\n  public freehandDrawIsActive = false;\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  set geometryType(value: OlGeometryType) { this.geometryType$.next(value); }\r\n  get geometryType(): OlGeometryType { return this.geometryType$.value; }\r\n  readonly geometryType$: BehaviorSubject<OlGeometryType> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Whether a geometry type toggle should be displayed\r\n   */\r\n  @Input() geometryTypeField: boolean = false;\r\n\r\n  /**\r\n   * Available geometry types\r\n   */\r\n  @Input() geometryTypes: string[] = ['Point', 'LineString', 'Polygon'];\r\n\r\n  /**\r\n   * Whether a draw guide field should be displayed\r\n   */\r\n  @Input() drawGuideField: boolean = false;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input()\r\n  set drawGuide(value: number) { this.drawGuide$.next(value); }\r\n  get drawGuide(): number { return this.drawGuide$.value; }\r\n  readonly drawGuide$: BehaviorSubject<number> = new BehaviorSubject(0);\r\n\r\n  /**\r\n   * Draw guide placeholder\r\n   */\r\n  @Input() drawGuidePlaceholder: string = '';\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * Style for the draw control (applies while the geometry is being drawn)\r\n   */\r\n  @Input() drawStyle: OlStyle;\r\n\r\n  /**\r\n   * Style for the overlay layer (applies once the geometry is added to the map)\r\n   * If not specified, drawStyle applies\r\n   */\r\n  @Input() overlayStyle: OlStyle;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Set up a value stream\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.value$.next(this.formControl.value ? this.formControl.value : undefined);\r\n    this.value$$ = this.formControl.valueChanges.subscribe((value: GeoJSONGeometry) => {\r\n      this.value$.next(value ? value : undefined);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the value stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.value$$.unsubscribe();\r\n  }\r\n}\r\n","\r\nexport const MEASURE_UNIT_AUTO = 'auto';\r\n\r\nexport enum MeasureType {\r\n  Length = 'length',\r\n  Area = 'area'\r\n}\r\n\r\nexport enum MeasureLengthUnit {\r\n  Meters = 'meters',\r\n  Kilometers = 'kilometers',\r\n  Miles = 'miles',\r\n  Feet = 'feet'\r\n}\r\n\r\nexport const MeasureLengthUnitAbbreviation = {\r\n  [MeasureLengthUnit.Meters]: 'm',\r\n  [MeasureLengthUnit.Kilometers]: 'km',\r\n  [MeasureLengthUnit.Miles]: 'mi',\r\n  [MeasureLengthUnit.Feet]: 'ft'\r\n};\r\n\r\nexport enum MeasureAreaUnit {\r\n  SquareMeters = 'squareMeters',\r\n  SquareKilometers = 'squareKilometers',\r\n  SquareMiles = 'squareMiles',\r\n  SquareFeet = 'squareFeet',\r\n  Hectares = 'hectares',\r\n  Acres = 'acres'\r\n}\r\n\r\nexport const MeasureAreaUnitAbbreviation = {\r\n  [MeasureAreaUnit.SquareMeters]: 'mÂ²',\r\n  [MeasureAreaUnit.SquareKilometers]: 'kmÂ²',\r\n  [MeasureAreaUnit.SquareMiles]: 'miÂ²',\r\n  [MeasureAreaUnit.SquareFeet]: 'ftÂ²',\r\n  [MeasureAreaUnit.Hectares]: 'ha',\r\n  [MeasureAreaUnit.Acres]: 'ac'\r\n};\r\n","import { LanguageService } from '@igo2/core';\r\nimport * as olstyle from 'ol/style';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlPoint from 'ol/geom/Point';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { getCenter as olGetCenter } from 'ol/extent';\r\nimport {\r\n  getLength as olGetLength,\r\n  getArea as olGetArea\r\n} from 'ol/sphere';\r\n\r\nimport { Measure } from './measure.interfaces';\r\nimport {\r\n  MeasureAreaUnit,\r\n  MeasureAreaUnitAbbreviation,\r\n  MeasureLengthUnit,\r\n  MeasureLengthUnitAbbreviation\r\n} from './measure.enum';\r\n\r\n/**\r\n * Convert value from meters to kilometers\r\n * @param value Value in meters\r\n * @returns Value in kilometers\r\n */\r\nexport function metersToKilometers(value: number): number {\r\n  return value * 0.001;\r\n}\r\n\r\n/**\r\n * Convert value from meters to feet\r\n * @param value Value in meters\r\n * @returns Value in feet\r\n */\r\nexport function metersToFeet(value: number): number {\r\n  return value * 3.2808;\r\n}\r\n\r\n/**\r\n * Convert value from meters to miles\r\n * @param value Value in meters\r\n * @returns Value in miles\r\n */\r\nexport function metersToMiles(value: number): number {\r\n  return value * 0.000621;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square kilometers\r\n * @param value Value in square meters\r\n * @returns Value in square kilometers\r\n */\r\nexport function squareMetersToSquareKilometers(value: number): number {\r\n  return value * 0.000001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square miles\r\n * @param value Value in square meters\r\n * @returns Value in square miles\r\n */\r\nexport function squareMetersToSquareMiles(value: number): number {\r\n  return value * 0.0000003861;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square feet\r\n * @param value Value in square meters\r\n * @returns Value in square feet\r\n */\r\nexport function squareMetersToSquareFeet(value: number): number {\r\n  return value * 10.764;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to hectares\r\n * @param value Value in square meters\r\n * @returns Value in hectares\r\n */\r\nexport function squareMetersToHectares(value: number): number {\r\n  return value * 0.0001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to acres\r\n * @param value Value in square meters\r\n * @returns Value in acres\r\n */\r\nexport function squareMetersToAcres(value: number): number {\r\n  return value * 0.00024711;\r\n}\r\n\r\n/**\r\n * Convert value from meters to the specified length unit\r\n * @param value Value in meters\r\n * @param unit Length unit\r\n * @returns Value in unit\r\n */\r\nexport function metersToUnit(value: number, unit: MeasureLengthUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureLengthUnit.Meters, (val: number) => val],\r\n    [MeasureLengthUnit.Kilometers, metersToKilometers],\r\n    [MeasureLengthUnit.Miles, metersToMiles],\r\n    [MeasureLengthUnit.Feet, metersToFeet],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to the specified area unit\r\n * @param value Value in meters\r\n * @param unit Area unit\r\n * @returns Value in unit\r\n */\r\nexport function squareMetersToUnit(value: number, unit: MeasureAreaUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureAreaUnit.SquareMeters, (val: number) => val],\r\n    [MeasureAreaUnit.SquareKilometers, squareMetersToSquareKilometers],\r\n    [MeasureAreaUnit.SquareMiles, squareMetersToSquareMiles],\r\n    [MeasureAreaUnit.SquareFeet, squareMetersToSquareFeet],\r\n    [MeasureAreaUnit.Hectares, squareMetersToHectares],\r\n    [MeasureAreaUnit.Acres, squareMetersToAcres],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * This method format a measure to a readable format\r\n * @param measure Measure\r\n * @param options Formatting options\r\n * @returns Formatted measure\r\n */\r\nexport function formatMeasure(\r\n  measure: number,\r\n  options?: {\r\n    decimal?: number;\r\n    unit?: MeasureAreaUnit | MeasureLengthUnit;\r\n    unitAbbr?: boolean;\r\n    locale?: string;\r\n  },\r\n  languageService?: LanguageService) {\r\n  let decimal = options.decimal;\r\n  if (decimal === undefined || decimal < 0) {\r\n    decimal = 1;\r\n  }\r\n\r\n  const parts = [];\r\n  if (options.locale !== undefined) {\r\n    parts.push(measure.toLocaleString(options.locale, {\r\n      minimumFractionDigits: decimal,\r\n      maximumFractionDigits: decimal\r\n    }));\r\n  } else {\r\n    parts.push(measure.toFixed(decimal).toString());\r\n  }\r\n\r\n  if (options.unit !== undefined && options.unitAbbr === true) {\r\n    if (languageService) {\r\n      parts.push(\r\n        MeasureLengthUnitAbbreviation[options.unit] ?\r\n          languageService.translate.instant('igo.geo.measure.' + MeasureLengthUnitAbbreviation[options.unit]) :\r\n          languageService.translate.instant('igo.geo.measure.' + MeasureAreaUnitAbbreviation[options.unit])\r\n      );\r\n    } else {\r\n      parts.push(\r\n        MeasureLengthUnitAbbreviation[options.unit] || MeasureAreaUnitAbbreviation[options.unit]\r\n      );\r\n    }\r\n  }\r\n\r\n  return parts.filter(p => p !== undefined).join(' ');\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestLengthUnit(value: number): MeasureLengthUnit {\r\n  let unit = MeasureLengthUnit.Meters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureLengthUnit.Kilometers];\r\n  while (converted > 1000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = metersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in square meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestAreaUnit(value: number): MeasureAreaUnit {\r\n  let unit = MeasureAreaUnit.SquareMeters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureAreaUnit.SquareKilometers];\r\n  while (converted > 1000000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = squareMetersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Create a default style for a measure interaction\r\n * @returns OL style\r\n */\r\nexport function createMeasureInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      lineDash: [10, 10],\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke: new olstyle.Stroke({\r\n        color: '#ffcc33',\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: 'rgba(255, 255, 255, 0.2)'\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for a measure layer\r\n * @returns OL style\r\n */\r\nexport function createMeasureLayerStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Compute the length in meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Length in meters\r\n */\r\nexport function measureOlGeometryLength(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetLength(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area in square meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Area in square meters\r\n */\r\nexport function measureOlGeometryArea(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint || olGeometry instanceof OlLineString) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetArea(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area (square meters), length (meters) and last length (meters)\r\n * of an OL geometry with a given projection.\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Computed measure\r\n */\r\nexport function measureOlGeometry(olGeometry: OlGeometry, projection: string): Measure {\r\n  const length = measureOlGeometryLength(olGeometry, projection);\r\n  const area = measureOlGeometryArea(olGeometry, projection);\r\n\r\n  const lengths = [];\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const coordinatesLength = coordinates.length;\r\n  for (let i = 0; i <= coordinatesLength - 4; i += 2) {\r\n    const olSegment = new OlLineString([\r\n      [coordinates[i], coordinates[i + 1]],\r\n      [coordinates[i + 2], coordinates[i + 3]]\r\n    ]);\r\n\r\n    lengths.push(measureOlGeometryLength(olSegment, projection));\r\n  }\r\n\r\n  return {\r\n    area,\r\n    length,\r\n    lengths\r\n  };\r\n}\r\n\r\n/**\r\n * Update an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nexport function updateOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n\r\n  // TODO: handle multi geometries\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const j = i * 2;\r\n    const olSegment = new OlLineString([\r\n      [coordinates[j], coordinates[j + 1]],\r\n      [coordinates[j + 2], coordinates[j + 3]]\r\n    ]);\r\n\r\n    const midpointCoordinate = olSegment.getCoordinateAt(0.5);\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      olMidpoint.setCoordinates(midpointCoordinate);\r\n    } else {\r\n      olMidpoints[i] = new OlPoint(midpointCoordinate);\r\n    }\r\n  }\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Clear an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n */\r\nexport function clearOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon) {\r\n  const olMidpoints = olGeometry.get('_midpoints') || [];\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      if (olMidpoint !== undefined) {\r\n        clearOlMidpointTooltip(olMidpoint);\r\n      }\r\n    }\r\n  }\r\n\r\n  olGeometry.set('_midpoints', undefined, true);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Return an array of  OL geometry midpoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nfunction getOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const expectedNumber = Math.max((olGeometry.flatCoordinates.length / 2) - 1, 0);\r\n\r\n  // TODO: This works but it's quite messy. If time permits,\r\n  // clean this. Maybe a Tooltip class could handle that\r\n  let olMidpoints = olGeometry.get('_midpoints');\r\n  if (olMidpoints === undefined) {\r\n    olMidpoints = new Array(expectedNumber);\r\n    olGeometry.set('_midpoints', olMidpoints, true);\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber === olMidpoints.length) {\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber > olMidpoints.length) {\r\n    olMidpoints.push(...new Array(expectedNumber - olMidpoints.length));\r\n    return olMidpoints;\r\n  }\r\n\r\n  for (let i = expectedNumber; i < olMidpoints.length; i++) {\r\n    const olMidpoint = olMidpoints[expectedNumber];\r\n    if (olMidpoint !== undefined) {\r\n      clearOlMidpointTooltip(olMidpoint);\r\n    }\r\n  }\r\n  olMidpoints.splice(expectedNumber);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Remove an OL midpoint's tooltip from the map\r\n * @param olMidpoint OL Point\r\n */\r\nfunction clearOlMidpointTooltip(olMidpoint: OlPoint) {\r\n  const olTooltip = olMidpoint.get('_tooltip');\r\n  if (olTooltip !== undefined) {\r\n    const olMap = olTooltip.getMap();\r\n    if (olMap !== undefined) {\r\n      olMap.removeOverlay(olTooltip);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add an OL overlay at each midpoint and return an array of those overlays\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function updateOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n  const olTooltips = olMidpoints.map((olMidpoint: OlPoint) => {\r\n    let olTooltip = olMidpoint.get('_tooltip');\r\n    if (olTooltip === undefined) {\r\n      olTooltip = createOlTooltipAtPoint(olMidpoint);\r\n    } else {\r\n      olTooltip.setPosition(olMidpoint.flatCoordinates);\r\n    }\r\n    return olTooltip;\r\n  });\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n  return olMidpoints.map((olMidpoint: OlPoint) => {\r\n    return olMidpoint ? olMidpoint.get('_tooltip') : undefined;\r\n  });\r\n}\r\n\r\n/**\r\n * Update an OL geometry center and return it\r\n * @param olGeometry OL Geometry\r\n * @returns OL point\r\n */\r\nexport function updateOlGeometryCenter(olGeometry: OlLineString | OlPolygon): OlPoint {\r\n  let olCenter = olGeometry.get('_center');\r\n  const centerCoordinate = olGetCenter(olGeometry.getExtent());\r\n  if (olCenter !== undefined) {\r\n    olCenter.setCoordinates(centerCoordinate);\r\n  } else {\r\n    olCenter = new OlPoint(centerCoordinate);\r\n    olGeometry.set('_center', olCenter);\r\n  }\r\n\r\n  return olCenter;\r\n}\r\n\r\n/**\r\n * Add an OL overlay at the center of a geometry and return that overlay\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlay\r\n */\r\nexport function updateOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = updateOlGeometryCenter(olGeometry);\r\n  let olTooltip = olCenter.get('_tooltip');\r\n  if (olTooltip === undefined) {\r\n    olTooltip = createOlTooltipAtPoint(olCenter);\r\n  } else {\r\n    olTooltip.setPosition(olCenter.flatCoordinates);\r\n  }\r\n  return olTooltip;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = olGeometry.get('_center');\r\n  return olCenter ? olCenter.get('_tooltip') : undefined;\r\n}\r\n\r\n/**\r\n * Get all the tooltips of an OL geometry\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olTooltips = [].concat(getOlTooltipsAtMidpoints(olGeometry) || []);\r\n  const olCenterTooltip = getOlTooltipAtCenter(olGeometry);\r\n  if (olCenterTooltip !== undefined) {\r\n    olTooltips.push(olCenterTooltip);\r\n  }\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Create an OL overlay at a point and bind the overlay to the point\r\n * @param olPoint OL Point\r\n * @returns OL overlay\r\n */\r\nexport function createOlTooltipAtPoint(olPoint: OlPoint): OlOverlay {\r\n  const olTooltip = new OlOverlay({\r\n    element: document.createElement('div'),\r\n    offset: [-30, -10],\r\n    className: [\r\n      'igo-map-tooltip',\r\n      'igo-map-tooltip-measure'\r\n    ].join(' '),\r\n    stopEvent: false\r\n  });\r\n  olTooltip.setPosition(olPoint.flatCoordinates);\r\n  olPoint.set('_tooltip', olTooltip);\r\n\r\n  return olTooltip;\r\n}\r\n","/* tslint:disable */\r\n// See this issue: https://github.com/Microsoft/TypeScript/issues/13965\r\n// And the solution: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n// for an explanation as to why the prototype is set manually\r\n/* tslint:enable */\r\n\r\nexport class GeometrySliceError extends Error {}\r\n\r\nexport class GeometrySliceMultiPolygonError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice a MultiPolygon.');\r\n    Object.setPrototypeOf(this, GeometrySliceMultiPolygonError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceLineStringError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice with a line that has more than 2 points.');\r\n    Object.setPrototypeOf(this, GeometrySliceLineStringError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceTooManyIntersectionError extends GeometrySliceError {\r\n  constructor() {\r\n    super('More than 2 intersections found between the target polygon and the slicing line.');\r\n    Object.setPrototypeOf(this, GeometrySliceTooManyIntersectionError.prototype);\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport { GeometryEvent as OlGeometryEvent } from 'ol/geom/Geometry';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport lineIntersect from '@turf/line-intersect';\r\nimport { lineString } from '@turf/helpers';\r\n\r\nimport {\r\n  GeometrySliceMultiPolygonError,\r\n  GeometrySliceLineStringError,\r\n  GeometrySliceTooManyIntersectionError\r\n } from './geometry.errors';\r\n\r\n/**\r\n * Create a default style for draw and modify interactions\r\n * @param color Style color (R, G, B)\r\n * @returns OL style\r\n */\r\nexport function createDrawInteractionStyle(color?: [number, number, number]): olstyle.Style {\r\n  color = color || [0, 153, 255];\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: color.concat([1]),\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: color.concat([0.2])\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 8,\r\n      stroke: new olstyle.Stroke({\r\n        color: color.concat([1])\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: color.concat([0.2])\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for drawing a hole\r\n * @returns OL style\r\n */\r\nexport function createDrawHoleInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color:  [0, 153, 255, 1],\r\n      width: 2\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Slice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function sliceOlGeometry(\r\n  olGeometry: OlLineString | OlPolygon,\r\n  olSlicer: OlLineString\r\n): Array<OlLineString | OlPolygon> {\r\n  if (olGeometry instanceof OlPolygon) {\r\n    return sliceOlPolygon(olGeometry, olSlicer);\r\n  } else if (olGeometry instanceof OlLineString) {\r\n    return sliceOlLineString(olGeometry, olSlicer);\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL LineString into one or more lines\r\n * @param olLineString OL line string\r\n * @param olSlicer Slicing line\r\n * @returns New OL line strings\r\n */\r\nexport function sliceOlLineString(olLineString: OlLineString, olSlicer: OlLineString): OlLineString[] {\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL Polygon into one or more polygons\r\n * @param olPolygon OL polygon\r\n * @param olSlicer Slicing line\r\n * @returns New OL polygons\r\n */\r\nexport function sliceOlPolygon(olPolygon: OlPolygon, olSlicer: OlLineString): OlPolygon[] {\r\n  if (olPolygon.getLinearRingCount() > 1) {\r\n    throw new GeometrySliceMultiPolygonError();\r\n  }\r\n\r\n  if (olSlicer.getCoordinates().length > 2) {\r\n    throw new GeometrySliceLineStringError();\r\n  }\r\n\r\n  const olGeoJSON = new OlGeoJSON();\r\n  const slicer = olGeoJSON.writeGeometryObject(olSlicer);\r\n  const outerCoordinates = olPolygon.getLinearRing(0).getCoordinates();\r\n\r\n  const parts = [[], []];\r\n  let totalIntersectionCount = 0;\r\n  for (let i = 0, ii = outerCoordinates.length - 1; i < ii; i++) {\r\n    const segmentCoordinates = [outerCoordinates[i], outerCoordinates[i + 1]];\r\n    const segment = lineString(segmentCoordinates);\r\n    const intersections = lineIntersect(segment, slicer).features;\r\n\r\n    const intersectionCount = intersections.length;\r\n    totalIntersectionCount += intersectionCount;\r\n    if (intersectionCount > 1 || totalIntersectionCount > 2) {\r\n      throw new GeometrySliceTooManyIntersectionError();\r\n    }\r\n\r\n    parts[0].push(segmentCoordinates[0]);\r\n    if (intersectionCount === 1) {\r\n      const intersection = intersections[0].geometry.coordinates;\r\n      parts[0].push(intersection);\r\n      parts[1].push(intersection);\r\n      parts.reverse();\r\n    }\r\n  }\r\n\r\n  if (totalIntersectionCount <= 1) {\r\n    return [];\r\n  }\r\n\r\n  parts[0].push(parts[0][0]);\r\n  parts[1].push(parts[1][0]);\r\n\r\n  return [new OlPolygon([parts[0]]), new OlPolygon([parts[1]])];\r\n}\r\n\r\n/**\r\n * Splice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function addLinearRingToOlPolygon(olPolygon: OlPolygon, olLinearRing: OlLinearRing ): OlPolygon {\r\n  // TODO: make some validation and support updating an existing linear ring\r\n  olPolygon.appendLinearRing(olLinearRing);\r\n}\r\n\r\nexport function getMousePositionFromOlGeometryEvent(\r\n  olEvent: OlGeometryEvent\r\n): [number, number] {\r\n  const olGeometry = olEvent.target;\r\n  if (olGeometry instanceof OlPolygon) {\r\n    return olGeometry.flatCoordinates.slice(-4, -2);\r\n  }\r\n  return olGeometry.flatCoordinates.slice(-2);\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subject, Subscription, fromEvent, BehaviorSubject } from 'rxjs';\r\n\r\nimport { getMousePositionFromOlGeometryEvent } from '../geometry.utils';\r\n\r\nexport interface DrawControlOptions {\r\n  geometryType: OlGeometryType;\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  maxPoints?: number;\r\n}\r\n\r\n/**\r\n * Control to draw geometries\r\n */\r\nexport class DrawControl {\r\n\r\n  /**\r\n   * Draw start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Draw end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olDrawInteraction: OlDraw;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onChangesKey: string;\r\n\r\n  private mousePosition: [number, number];\r\n\r\n  private keyDown$$: Subscription;\r\n\r\n  freehand$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Geometry type\r\n   * @internal\r\n   */\r\n  get geometryType(): OlGeometryType {\r\n    return this.options.geometryType;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: DrawControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  addOlDrawInteraction() {\r\n    let olDrawInteraction;\r\n    if (this.freehand$.getValue() === false) {\r\n      olDrawInteraction = new OlDraw({\r\n        type: this.geometryType,\r\n        source: this.getSource(),\r\n        stopClick: true,\r\n        style: this.options.drawStyle,\r\n        maxPoints: this.options.maxPoints,\r\n        freehand: false,\r\n        freehandCondition: () => false\r\n      });\r\n    } else {\r\n      if (this.geometryType === 'Point') {\r\n        olDrawInteraction = new OlDraw({\r\n          type: 'Circle',\r\n          source: this.getSource(),\r\n          maxPoints: this.options.maxPoints,\r\n          freehand: true\r\n        });\r\n      } else {\r\n        olDrawInteraction = new OlDraw({\r\n          type: this.geometryType,\r\n          source: this.getSource(),\r\n          maxPoints: this.options.maxPoints,\r\n          freehand: true\r\n        });\r\n      }\r\n    }\r\n\r\n    this.onDrawStartKey = olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(olDrawInteraction);\r\n    this.olDrawInteraction = olDrawInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * When drawing starts, clear the overlay and start watching from changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.clearOlInnerOverlaySource();\r\n    this.onChangesKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.mousePosition = getMousePositionFromOlGeometryEvent(olGeometryEvent);\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, update the geometry observable and start watching from changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    this.unsubscribeToKeyDown();\r\n    if (this.onChangesKey !== undefined) {\r\n      unByKey(this.onChangesKey);\r\n    }\r\n    this.end$.next(event.feature.getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.unsubscribeToKeyDown();\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      // On ESC key down, remove the last vertex\r\n      if (event.keyCode === 27) {\r\n        this.olDrawInteraction.removeLastPoint();\r\n        return;\r\n      }\r\n\r\n      // On space bar, pan to the current mouse position\r\n      if (event.keyCode === 32) {\r\n        this.olMap.getView().animate({\r\n          center: this.mousePosition,\r\n          duration: 0\r\n        });\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n      this.keyDown$$ = undefined;\r\n    }\r\n  }\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlModify from 'ol/interaction/Modify';\r\nimport OlTranslate from 'ol/interaction/Translate';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlInteraction from 'ol/interaction/Interaction';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserEvent as OlMapBrowserEvent } from 'ol/MapBrowserEvent';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { ModifyEvent as OlModifyEvent } from 'ol/interaction/Modify';\r\nimport { TranslateEvent as OlTranslateEvent } from 'ol/interaction/Translate';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subject, Subscription, fromEvent } from 'rxjs';\r\n\r\nimport {\r\n  addLinearRingToOlPolygon,\r\n  createDrawHoleInteractionStyle,\r\n  getMousePositionFromOlGeometryEvent\r\n} from '../geometry.utils';\r\n\r\nexport interface ModifyControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class ModifyControl {\r\n\r\n  /**\r\n   * Modify start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Modify end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  public olModifyInteraction: OlModify;\r\n  private onModifyStartKey: string;\r\n  private onModifyEndKey: string;\r\n  private onModifyKey: string;\r\n  private olModifyInteractionIsActive: boolean = false;\r\n  private olTranslateInteraction: OlTranslate;\r\n  private onTranslateStartKey: string;\r\n  private onTranslateEndKey: string;\r\n  private onTranslateKey: string;\r\n  private olTranslateInteractionIsActive: boolean = false;\r\n  private olDrawInteraction: OlTranslate;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onDrawKey: string;\r\n  private olDrawInteractionIsActive: boolean = false;\r\n\r\n  private mousePosition: [number, number];\r\n\r\n  private keyDown$$: Subscription;\r\n  private drawKeyUp$$: Subscription;\r\n  private drawKeyDown$$: Subscription;\r\n\r\n  private removedOlInteractions: OlInteraction[] = [];\r\n  private olLinearRingsLayer: OlVectorLayer;\r\n\r\n  // This is the geometry to test against when drawing holes\r\n  private olOuterGeometry: OlGeometry;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  /**\r\n   * OL linear rings source\r\n   * @internal\r\n   */\r\n  get olLinearRingsSource(): OlVectorSource {\r\n    return this.olLinearRingsLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: ModifyControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n    this.olLinearRingsLayer = this.createOlLinearRingsLayer();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlModifyInteraction();\r\n      this.removeOlTranslateInteraction();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n    this.addOlTranslateInteraction();\r\n    this.activateTranslateInteraction();\r\n    this.addOlModifyInteraction();\r\n    this.activateModifyInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay and start modifying it\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  private createOlLinearRingsLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      style: createDrawHoleInteractionStyle(),\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the linear rings layer\r\n   */\r\n  private addOlLinearRingsLayer() {\r\n    this.olMap.addLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings layer\r\n   */\r\n  private removeOlLinearRingsLayer() {\r\n    this.olMap.removeLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings source\r\n   */\r\n  private clearOlLinearRingsSource() {\r\n    this.olLinearRingsSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Add a modify interaction to the map an set up some listeners\r\n   */\r\n  private addOlModifyInteraction() {\r\n    const olModifyInteraction = new OlModify({\r\n      source: this.olOverlaySource,\r\n      style: this.options.drawStyle\r\n    });\r\n    this.olModifyInteraction = olModifyInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the modify interaction\r\n   */\r\n  private removeOlModifyInteraction() {\r\n    if (this.olModifyInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateModifyInteraction();\r\n    this.olModifyInteraction = undefined;\r\n  }\r\n\r\n  private activateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = true;\r\n    this.onModifyStartKey = this.olModifyInteraction\r\n      .on('modifystart', (event: OlModifyEvent) => this.onModifyStart(event));\r\n    this.onModifyEndKey = this.olModifyInteraction\r\n      .on('modifyend', (event: OlModifyEvent) => this.onModifyEnd(event));\r\n    this.olMap.addInteraction(this.olModifyInteraction);\r\n  }\r\n\r\n  private deactivateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = false;\r\n    unByKey(this.onModifyStartKey);\r\n    unByKey(this.onModifyEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olModifyInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When modifying starts, clear the overlay and start watching for changes\r\n   * @param event Modify start event\r\n   */\r\n  private onModifyStart(event: OlModifyEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onModifyKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.mousePosition = getMousePositionFromOlGeometryEvent(olGeometryEvent);\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When modifying ends, update the geometry observable and stop watching for changes\r\n   * @param event Modify end event\r\n   */\r\n  private onModifyEnd(event: OlModifyEvent) {\r\n    if (this.onModifyKey !== undefined) {\r\n      unByKey(this.onModifyKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n    this.unsubscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode === 32) {\r\n        // On space bar, pan to the current mouse position\r\n        this.olMap.getView().animate({\r\n          center: this.mousePosition,\r\n          duration: 0\r\n        });\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a translate interaction to the map an set up some listeners\r\n   */\r\n  private addOlTranslateInteraction() {\r\n    const olTranslateInteraction = new OlTranslate({\r\n      layers: [this.olOverlayLayer]\r\n    });\r\n    this.olTranslateInteraction = olTranslateInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the translate interaction\r\n   */\r\n  private removeOlTranslateInteraction() {\r\n    if (this.olTranslateInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateTranslateInteraction();\r\n    this.olTranslateInteraction = undefined;\r\n  }\r\n\r\n  private activateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = true;\r\n    this.onTranslateStartKey = this.olTranslateInteraction\r\n      .on('translatestart', (event: OlTranslateEvent) => this.onTranslateStart(event));\r\n    this.onTranslateEndKey = this.olTranslateInteraction\r\n      .on('translateend', (event: OlTranslateEvent) => this.onTranslateEnd(event));\r\n    this.olMap.addInteraction(this.olTranslateInteraction);\r\n  }\r\n\r\n  private deactivateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = false;\r\n    unByKey(this.onTranslateStartKey);\r\n    unByKey(this.onTranslateEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olTranslateInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When translation starts, clear the overlay and start watching for changes\r\n   * @param event Translate start event\r\n   */\r\n  private onTranslateStart(event: OlTranslateEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onTranslateKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Translate end event\r\n   */\r\n  private onTranslateEnd(event: OlTranslateEvent) {\r\n    if (this.onTranslateKey !== undefined) {\r\n      unByKey(this.onTranslateKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  private addOlDrawInteraction() {\r\n    const olDrawInteraction = new OlDraw({\r\n      type: 'Polygon',\r\n      source: this.olLinearRingsSource,\r\n      stopClick: true,\r\n      style: createDrawHoleInteractionStyle(),\r\n      condition: (event: OlMapBrowserEvent) => {\r\n        const olOuterGeometry = this.olOuterGeometry || this.getOlGeometry();\r\n        return olOuterGeometry.intersectsCoordinate(event.coordinate);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteraction = olDrawInteraction;\r\n    this.subscribeToDrawKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToDrawKeyDown() {\r\n    this.drawKeyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode !== 17) { return; }\r\n\r\n      this.unsubscribeToDrawKeyDown();\r\n\r\n      const olGeometry = this.getOlGeometry();\r\n      if (!olGeometry || !(olGeometry instanceof OlPolygon)) { return; }\r\n\r\n      this.subscribeToDrawKeyUp();\r\n\r\n      this.deactivateModifyInteraction();\r\n      this.deactivateTranslateInteraction();\r\n      this.activateDrawInteraction();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key up to deactivate the draw control\r\n   */\r\n  private subscribeToDrawKeyUp() {\r\n    this.drawKeyUp$$ = fromEvent(document, 'keyup')\r\n      .subscribe((event: KeyboardEvent) => {\r\n        if (event.keyCode !== 17) {\r\n          return;\r\n        }\r\n\r\n        this.unsubscribeToDrawKeyUp();\r\n        this.unsubscribeToKeyDown();\r\n        this.deactivateDrawInteraction();\r\n\r\n        this.activateModifyInteraction();\r\n        this.activateTranslateInteraction();\r\n        this.subscribeToDrawKeyDown();\r\n\r\n        this.end$.next(this.getOlGeometry());\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to draw key down\r\n   */\r\n  private unsubscribeToDrawKeyDown() {\r\n    if (this.drawKeyDown$$ !== undefined) {\r\n      this.drawKeyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key up\r\n   */\r\n  private unsubscribeToDrawKeyUp() {\r\n    if (this.drawKeyUp$$ !== undefined) {\r\n      this.drawKeyUp$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    this.unsubscribeToDrawKeyUp();\r\n    this.unsubscribeToDrawKeyDown();\r\n    this.deactivateDrawInteraction();\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * Activate the draw interaction\r\n   */\r\n  private activateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.clearOlLinearRingsSource();\r\n    this.addOlLinearRingsLayer();\r\n\r\n    this.olMap.getInteractions().forEach((olInteraction: OlInteraction) => {\r\n      if (olInteraction instanceof OlDragBoxInteraction) {\r\n        this.olMap.removeInteraction(olInteraction);\r\n        this.removedOlInteractions.push(olInteraction);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = true;\r\n    this.onDrawStartKey = this.olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = this.olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(this.olDrawInteraction);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the draw interaction\r\n   */\r\n  private deactivateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.removeOlLinearRingsLayer();\r\n\r\n    this.removedOlInteractions.forEach((olInteraction: OlInteraction) => {\r\n      this.olMap.addInteraction(olInteraction);\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = false;\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When draw start, add a new linerar ring to the geometry and start watching for changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    this.olOuterGeometry = this.getOlGeometry().clone();\r\n\r\n    const linearRingCoordinates = olGeometry.getLinearRing().getCoordinates();\r\n    this.addLinearRingToOlGeometry(linearRingCoordinates);\r\n    this.start$.next(this.getOlGeometry());\r\n\r\n    this.onDrawKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      const _linearRingCoordinates = olGeometryEvent.target.getLinearRing().getCoordinates();\r\n      this.updateLinearRingOfOlGeometry(_linearRingCoordinates);\r\n      this.changes$.next(this.getOlGeometry());\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    if (this.onDrawKey !== undefined) {\r\n      unByKey(this.onDrawKey);\r\n    }\r\n\r\n    this.olOuterGeometry = undefined;\r\n\r\n    const linearRingCoordinates = event.feature.getGeometry().getLinearRing().getCoordinates();\r\n    this.updateLinearRingOfOlGeometry(linearRingCoordinates);\r\n    this.clearOlLinearRingsSource();\r\n    this.end$.next(this.getOlGeometry());\r\n    this.unsubscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Add a linear ring to the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private addLinearRingToOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    const olLinearRing = new OlLinearRing(coordinates);\r\n    addLinearRingToOlPolygon(olGeometry, olLinearRing);\r\n  }\r\n\r\n  /**\r\n   * Update the last linear ring of the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private updateLinearRingOfOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    // Remove the last linear ring (the one we are updating)\r\n    const olLinearRings = olGeometry.getLinearRings().slice(0, -1);\r\n    const newCoordinates = olLinearRings.map((olLinearRing: OlLinearRing) => {\r\n      return olLinearRing.getCoordinates();\r\n    });\r\n    newCoordinates.push(coordinates);\r\n    olGeometry.setCoordinates(newCoordinates);\r\n  }\r\n\r\n  /**\r\n   * Get the geometry being modified\r\n   * @returns OL Geometry\r\n   */\r\n  private getOlGeometry(): OlGeometry {\r\n    const olFeatures = this.olOverlaySource.getFeatures();\r\n    return olFeatures.length > 0 ? olFeatures[0].getGeometry() : undefined;\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlLineString from 'ol/geom/LineString';\r\n\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\nimport { GeometrySliceError } from '../geometry.errors';\r\nimport { sliceOlGeometry } from '../geometry.utils';\r\nimport { DrawControl } from './draw';\r\n\r\nexport interface SliceControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class SliceControl {\r\n\r\n  /**\r\n   * Slice end observable\r\n   */\r\n  public end$: Subject<OlGeometry[]> = new Subject();\r\n\r\n  /**\r\n   * Slice error, if any\r\n   */\r\n  public error$: Subject<GeometrySliceError> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawLineStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawLineEnd$$: Subscription;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: SliceControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeDrawLineControl();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addDrawLineControl();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay for slicing\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control and add it to the map\r\n   */\r\n  private addDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      drawStyle: this.options.drawStyle,\r\n      maxPoints: 2\r\n    });\r\n    this.drawLineStart$$ = this.drawLineControl.start$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineStart(olLine));\r\n    this.drawLineEnd$$ = this.drawLineControl.end$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineEnd(olLine));\r\n    this.drawLineControl.setOlMap(this.olMap);\r\n  }\r\n\r\n  /**\r\n   * Remove draw line control\r\n   */\r\n  private removeDrawLineControl() {\r\n    if (this.drawLineControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.drawLineStart$$.unsubscribe();\r\n    this.drawLineEnd$$.unsubscribe();\r\n    this.drawLineControl.getSource().clear();\r\n    this.drawLineControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olLine Ol linestring or polygon\r\n   */\r\n  private onDrawLineStart(olLine: OlLineString) {\r\n    this.drawLineControl.getSource().clear();\r\n  }\r\n\r\n  /**\r\n   * Slice the first geometry encountered with the drawn line\r\n   * @param olLine Ol linestring\r\n   */\r\n  private onDrawLineEnd(olLine: OlLineString) {\r\n    const olSlicedGeometries = [];\r\n    const lineExtent = olLine.getExtent();\r\n\r\n    const olFeaturesToRemove = [];\r\n    try {\r\n      this.olOverlaySource.forEachFeatureInExtent(lineExtent, (olFeature: OlFeature) => {\r\n        const olGeometry = olFeature.getGeometry();\r\n        const olParts = sliceOlGeometry(olGeometry, olLine);\r\n        if (olParts.length > 0) {\r\n          olSlicedGeometries.push(...olParts);\r\n          olFeaturesToRemove.push(olFeature);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (e instanceof GeometrySliceError) {\r\n        this.error$.next(e);\r\n        return;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    this.drawLineControl.getSource().clear();\r\n\r\n    this.olOverlaySource.addFeatures(\r\n      olSlicedGeometries.map((olGeometry: OlGeometry) => new OlFeature(olGeometry))\r\n    );\r\n    olFeaturesToRemove.forEach((olFeature: OlFeature) => {\r\n      this.olOverlaySource.removeFeature(olFeature);\r\n    });\r\n\r\n    this.error$.next(undefined);\r\n    this.end$.next(olSlicedGeometries);\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nimport { MeasurerDialogData } from '../shared/measure.interfaces';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit} from '../shared/measure.enum';\r\n\r\n@Component({\r\n  selector: 'igo-measurer-dialog',\r\n  templateUrl: 'measurer-dialog.component.html',\r\n  styleUrls: ['./measurer-dialog.component.scss']\r\n})\r\nexport class MeasurerDialogComponent {\r\n\r\n  measureAreaUnit = MeasureAreaUnit;\r\n\r\n  measureLengthUnit = MeasureLengthUnit;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MeasurerDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: MeasurerDialogData\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\n\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlStyle from 'ol/style/Style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport { VectorSourceEvent as OlVectorSourceEvent } from 'ol/source/Vector';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { EntityRecord, EntityTableTemplate, EntityTableComponent } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport {\r\n  FEATURE,\r\n  FeatureStore,\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy,\r\n  tryBindStoreLayer,\r\n  tryAddLoadingStrategy,\r\n  tryAddSelectionStrategy\r\n} from '../../feature';\r\nimport { DrawControl, ModifyControl } from '../../geometry';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { Measure, MeasurerDialogData, FeatureWithMeasure } from '../shared/measure.interfaces';\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit,\r\n} from '../shared/measure.enum';\r\nimport {\r\n  measureOlGeometry,\r\n  createMeasureInteractionStyle,\r\n  createMeasureLayerStyle,\r\n  updateOlTooltipsAtMidpoints,\r\n  updateOlTooltipAtCenter,\r\n  getTooltipsOfOlGeometry,\r\n  squareMetersToUnit,\r\n  metersToUnit,\r\n  formatMeasure\r\n} from '../shared/measure.utils';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * Tool to measure lengths and areas\r\n */\r\n@Component({\r\n  selector: 'igo-measurer',\r\n  templateUrl: './measurer.component.html',\r\n  styleUrls: ['./measurer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Table template\r\n   * @internal\r\n   */\r\n  public tableTemplate: EntityTableTemplate = {\r\n    selection: true,\r\n    selectMany: true,\r\n    selectionCheckbox: true,\r\n    sort: true,\r\n    columns: [\r\n      {\r\n        name: 'length',\r\n        title: this.languageService.translate.instant('igo.geo.measure.lengthHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeLengthUnit;\r\n          const measure = metersToUnit(feature.properties.measure.length, unit);\r\n          return formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          });\r\n        }\r\n      },\r\n      {\r\n        name: 'area',\r\n        title: this.languageService.translate.instant('igo.geo.measure.areaHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeAreaUnit;\r\n          const measure = squareMetersToUnit(feature.properties.measure.area, unit);\r\n          return measure ? formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          }) : '';\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  /**\r\n   * Reference to the MeasureType enum\r\n   * @internal\r\n   */\r\n  public measureType = MeasureType;\r\n\r\n  /**\r\n   * Reference to the AreaMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureAreaUnit = MeasureAreaUnit;\r\n\r\n  /**\r\n   * Reference to the LengthMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureLengthUnit = MeasureLengthUnit;\r\n\r\n  /**\r\n   * Whether measure units should be automatically determined\r\n   * @internal\r\n   */\r\n  public measureUnitsAuto: boolean = false;\r\n\r\n  /**\r\n   * Observable of area\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<Measure> = new BehaviorSubject({});\r\n\r\n  /**\r\n   * Observable of selected features\r\n   * @internal\r\n   */\r\n  public selectedFeatures$: BehaviorSubject<FeatureWithMeasure[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * OL draw source\r\n   * @internal\r\n   */\r\n  public showTooltips: boolean = true;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Draw polygon control\r\n   */\r\n  private drawPolygonControl: DrawControl;\r\n\r\n  /**\r\n   * Modify control\r\n   */\r\n  private modifyControl: ModifyControl;\r\n\r\n  /**\r\n   * Active OL geometry\r\n   */\r\n  private activeOlGeometry: OlLineString | OlPolygon;\r\n\r\n  /**\r\n   * Active mlength unit\r\n   */\r\n  private activeLengthUnit: MeasureLengthUnit = MeasureLengthUnit.Meters;\r\n\r\n  /**\r\n   * Active area unit\r\n   */\r\n  private activeAreaUnit: MeasureAreaUnit = MeasureAreaUnit.SquareMeters;\r\n\r\n  /**\r\n   * Feature added listener key\r\n   */\r\n  private onFeatureAddedKey: string;\r\n\r\n  /**\r\n   * Feature removed listener key\r\n   */\r\n  private onFeatureRemovedKey: string;\r\n\r\n  /**\r\n   * Active draw control\r\n   * @internal\r\n   */\r\n  private activeDrawControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private drawChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify start\r\n   */\r\n  private modifyStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify end\r\n   */\r\n  private modifyEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private modifyChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to measures selection\r\n   */\r\n  private selectedFeatures$$: Subscription;\r\n\r\n  /**\r\n   * OL draw source\r\n   */\r\n  private olDrawSource = new OlVectorSource();\r\n\r\n  /**\r\n   * The map to measure on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The measures store\r\n   */\r\n  @Input() store: FeatureStore<FeatureWithMeasure>;\r\n\r\n  /**\r\n   * Measure type\r\n   * @internal\r\n   */\r\n  @Input()\r\n  set activeMeasureType(value: MeasureType) { this.setActiveMeasureType(value); }\r\n  get activeMeasureType(): MeasureType { return this._activeMeasureType; }\r\n  private _activeMeasureType: MeasureType = MeasureType.Length;\r\n\r\n  /**\r\n   * The minimum length a segment must have to display a tooltip.\r\n   * It also applies to area tooltips.\r\n   */\r\n  @Input() minSegmentLength: number = 10;\r\n\r\n  @ViewChild('table') table: EntityTableComponent;\r\n\r\n  /**\r\n   * Wheter one of the draw control is active\r\n   * @internal\r\n   */\r\n  get drawControlIsActive(): boolean {\r\n    return this.activeDrawControl !== undefined;\r\n  }\r\n\r\n  get projection(): OlProjection {\r\n    return this.map.ol.getView().getProjection();\r\n  }\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  /**\r\n   * Add draw controls and activate one\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.initStore();\r\n    this.createDrawLineControl();\r\n    this.createDrawPolygonControl();\r\n    this.createModifyControl();\r\n    this.toggleDrawControl();\r\n    this.onToggleTooltips(this.showTooltips);\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.setActiveMeasureType(undefined);\r\n    this.deactivateModifyControl();\r\n    this.freezeStore();\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onMeasureTypeChange(measureType: MeasureType) {\r\n    this.activeMeasureType = measureType;\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleDrawControl(toggle: boolean) {\r\n    if (toggle === true) {\r\n      this.toggleDrawControl();\r\n    } else {\r\n      this.deactivateDrawControl();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleTooltips(toggle: boolean) {\r\n    this.showTooltips = toggle;\r\n    if (toggle === true) {\r\n      this.showTooltipsOfOlSource(this.store.source.ol);\r\n    } else {\r\n      this.clearTooltipsOfOlSource(this.store.source.ol);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleMeasureUnitsAuto(toggle: boolean) {\r\n    this.measureUnitsAuto = toggle;\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onLengthUnitChange(unit: MeasureLengthUnit) {\r\n    this.activeLengthUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onAreaUnitChange(unit: MeasureAreaUnit) {\r\n    this.activeAreaUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  onCalculateClick() {\r\n    const features = this.selectedFeatures$.value;\r\n    const area = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      return sum + feature.properties.measure.area || 0;\r\n    }, 0);\r\n    const length = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'Polygon') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n    const perimeter = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'LineString') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n\r\n    this.openDialog({\r\n      area,\r\n      length,\r\n      perimeter\r\n    });\r\n  }\r\n\r\n  onDeleteClick() {\r\n    this.store.deleteMany(this.selectedFeatures$.value);\r\n  }\r\n\r\n  onModifyClick() {\r\n    if (this.selectedFeatures$.value.length !== 1) { return; }\r\n\r\n    if (this.modifyControl.active === true) {\r\n      this.deactivateModifyControl();\r\n      this.toggleDrawControl();\r\n    } else {\r\n      const feature = this.selectedFeatures$.value[0];\r\n      const olFeatures = this.store.layer.ol.getSource().getFeatures();\r\n      const olFeature = olFeatures.find((_olFeature: OlFeature) => {\r\n        return _olFeature.get('id') === feature.properties.id;\r\n      });\r\n\r\n      if (olFeature !== undefined) {\r\n        this.deactivateDrawControl();\r\n        this.activateModifyControl();\r\n\r\n        const olGeometry = olFeature.getGeometry();\r\n        this.clearTooltipsOfOlGeometry(olGeometry);\r\n        this.modifyControl.setOlGeometry(olGeometry);\r\n      }\r\n    }\r\n  }\r\n\r\n  private openDialog(data: MeasurerDialogData): void {\r\n    this.dialog.open(MeasurerDialogComponent, {data});\r\n  }\r\n\r\n  /**\r\n   * Initialize the measure store and set up some listeners\r\n   * @internal\r\n   */\r\n  private initStore() {\r\n    const store = this.store;\r\n\r\n    const layer = new VectorLayer({\r\n      title: 'Measures',\r\n      zIndex: 200,\r\n      source: new FeatureDataSource(),\r\n      style: createMeasureLayerStyle(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n    tryBindStoreLayer(store, layer);\r\n\r\n    tryAddLoadingStrategy(store);\r\n\r\n    tryAddSelectionStrategy(store, new FeatureStoreSelectionStrategy({\r\n      map: this.map,\r\n      many: true\r\n    }));\r\n\r\n    this.onFeatureAddedKey = store.source.ol.on('addfeature', (event: OlVectorSourceEvent) => {\r\n      const feature = event.feature;\r\n      const olGeometry = feature.getGeometry();\r\n      this.updateMeasureOfOlGeometry(olGeometry, feature.get('measure'));\r\n    });\r\n\r\n    this.onFeatureRemovedKey = store.source.ol.on('removefeature', (event: OlVectorSourceEvent) => {\r\n      const olGeometry = event.feature.getGeometry();\r\n      this.clearTooltipsOfOlGeometry(olGeometry);\r\n    });\r\n\r\n    this.selectedFeatures$$ = store.stateView.manyBy$((record: EntityRecord<FeatureWithMeasure>) => {\r\n      return record.state.selected === true;\r\n    }).pipe(\r\n      skip(1)  // Skip initial emission\r\n    )\r\n    .subscribe((records: EntityRecord<FeatureWithMeasure>[]) => {\r\n      if (this.modifyControl.active === true) {\r\n        this.deactivateModifyControl();\r\n      }\r\n      this.selectedFeatures$.next(records.map(record => record.entity));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Freeze any store, meaning the layer is removed, strategies are deactivated\r\n   * and some listener removed\r\n   * @internal\r\n   */\r\n  private freezeStore() {\r\n    const store = this.store;\r\n    this.selectedFeatures$$.unsubscribe();\r\n    unByKey(this.onFeatureAddedKey);\r\n    unByKey(this.onFeatureRemovedKey);\r\n    this.clearTooltipsOfOlSource(store.source.ol);\r\n    this.map.removeLayer(store.layer);\r\n    store.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    store.deactivateStrategyOfType(FeatureStoreSelectionStrategy);\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control\r\n   */\r\n  private createDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createDrawPolygonControl() {\r\n    this.drawPolygonControl = new DrawControl({\r\n      geometryType: 'Polygon',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate the right control\r\n   */\r\n  private toggleDrawControl() {\r\n    this.deactivateDrawControl();\r\n    // this.deactivateModifyControl();\r\n    if (this.activeMeasureType === MeasureType.Length) {\r\n      this.activateDrawControl(this.drawLineControl);\r\n    } else if (this.activeMeasureType === MeasureType.Area) {\r\n      this.activateDrawControl(this.drawPolygonControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param drawControl Draw control\r\n   */\r\n  private activateDrawControl(drawControl: DrawControl) {\r\n    this.activeDrawControl = drawControl;\r\n    this.drawStart$$ = drawControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawStart(olGeometry));\r\n    this.drawEnd$$ = drawControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawEnd(olGeometry));\r\n    this.drawChanges$$ = drawControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawChanges(olGeometry));\r\n\r\n    drawControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active draw control\r\n   */\r\n  private deactivateDrawControl() {\r\n    if (this.activeDrawControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n    if (this.drawStart$$ !== undefined ) { this.drawStart$$.unsubscribe(); }\r\n    if (this.drawEnd$$ !== undefined ) { this.drawEnd$$.unsubscribe(); }\r\n    if (this.drawChanges$$ !== undefined ) { this.drawChanges$$.unsubscribe(); }\r\n\r\n    this.clearTooltipsOfOlSource(this.olDrawSource);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.clearTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n    this.activeDrawControl.setOlMap(undefined);\r\n    this.activeDrawControl = undefined;\r\n    this.activeOlGeometry = undefined;\r\n  }\r\n\r\n  private setActiveMeasureType(measureType: MeasureType) {\r\n    this._activeMeasureType = measureType;\r\n    this.clearMeasures();\r\n    this.toggleDrawControl();\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = olGeometry;\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = undefined;\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n    this.addFeatureToStore(olGeometry);\r\n    this.clearTooltipsOfOlGeometry(olGeometry);\r\n    this.olDrawSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawChanges(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = measureOlGeometry(olGeometry, this.projection);\r\n    this.updateMeasureOfOlGeometry(olGeometry, Object.assign({}, measure, {\r\n      area: undefined  // We don't want to display an area tooltip while drawing.\r\n    }));\r\n    this.measure$.next(measure);\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param modifyControl Modify control\r\n   */\r\n  private activateModifyControl() {\r\n    const selection = this.store.getStrategyOfType(FeatureStoreSelectionStrategy) as FeatureStoreSelectionStrategy;\r\n    selection.deactivate();\r\n    selection.clear();\r\n\r\n    this.modifyStart$$ = this.modifyControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyStart(olGeometry));\r\n    this.modifyEnd$$ = this.modifyControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyEnd(olGeometry));\r\n    this.modifyChanges$$ = this.modifyControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyChanges(olGeometry));\r\n    this.modifyControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active modify control\r\n   */\r\n  private deactivateModifyControl() {\r\n    if (this.modifyStart$$ !== undefined ) { this.modifyStart$$.unsubscribe(); }\r\n    if (this.modifyEnd$$ !== undefined ) { this.modifyEnd$$.unsubscribe(); }\r\n    if (this.modifyChanges$$ !== undefined ) { this.modifyChanges$$.unsubscribe(); }\r\n\r\n    if (this.activeOlGeometry !== undefined) {\r\n      if (this.selectedFeatures$.value.length === 1) {\r\n        const feature = this.selectedFeatures$.value[0];\r\n        this.addFeatureToStore(this.activeOlGeometry, feature);\r\n      }\r\n      this.finalizeMeasureOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n\r\n    this.store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n\r\n    this.activeOlGeometry = undefined;\r\n    this.modifyControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawStart(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyChanges(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawChanges(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  private finalizeMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    let measure = measureOlGeometry(olGeometry, this.projection);\r\n    if (olGeometry instanceof OlPolygon) {\r\n      measure = Object.assign({}, measure, {\r\n        lengths: []  // We don't want to display an area tooltip while drawing.\r\n      });\r\n    }\r\n    this.updateMeasureOfOlGeometry(olGeometry, measure);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables\r\n   * @param olGeometry Ol linestring or polygon\r\n   * @param measure Measure\r\n   */\r\n  private updateMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon, measure: Measure) {\r\n    olGeometry.setProperties({_measure: measure}, true);\r\n    this.updateTooltipsOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the measures observables\r\n   */\r\n  private clearMeasures() {\r\n    this.measure$.next({});\r\n  }\r\n\r\n  /**\r\n   * Add a feature with measures to the store. The loading stragegy of the store\r\n   * will trigger and add the feature to the map.\r\n   * @internal\r\n   */\r\n  private addFeatureToStore(olGeometry: OlLineString | OlPolygon, feature?: FeatureWithMeasure) {\r\n    const featureId = feature ? feature.properties.id : uuid();\r\n    const projection = this.map.ol.getView().getProjection();\r\n    const geometry = new OlGeoJSON().writeGeometryObject(olGeometry, {\r\n      featureProjection: projection,\r\n      dataProjection: projection\r\n    });\r\n    this.store.update({\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: projection.getCode(),\r\n      properties: {\r\n        id: featureId,\r\n        measure: olGeometry.get('_measure')\r\n      },\r\n      meta: {\r\n        id: featureId\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update all the tooltips of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   * @param lengths Lengths of the OL geometry's segments\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = olGeometry.get('_measure');\r\n    const lengths = measure.lengths;\r\n    const area = measure.area;\r\n\r\n    const olMidpointsTooltips = updateOlTooltipsAtMidpoints(olGeometry);\r\n    if (lengths.length === olMidpointsTooltips.length) {\r\n      for (let i = 0; i < olMidpointsTooltips.length; i++) {\r\n        const length = lengths[i];\r\n        if (length !== undefined) {\r\n          this.updateOlTooltip(\r\n            olMidpointsTooltips[i],\r\n            metersToUnit(length, this.activeLengthUnit),\r\n            this.activeLengthUnit,\r\n            MeasureType.Length\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (area !== undefined) {\r\n      this.updateOlTooltip(\r\n        updateOlTooltipAtCenter(olGeometry),\r\n        squareMetersToUnit(area,  this.activeAreaUnit),\r\n        this.activeAreaUnit,\r\n        MeasureType.Area\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of a geoemtry\r\n   */\r\n  private showTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (this.shouldShowTooltip(olTooltip)) {\r\n        this.map.ol.addOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the tooltips of an OL geometrys\r\n   * @param olGeometry OL geometry with tooltips\r\n   */\r\n  private clearTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (olTooltip !== undefined && olTooltip.getMap() !== undefined) {\r\n        this.map.ol.removeOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private updateTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.updateTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private showTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.showTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the map tooltips\r\n   * @param olDrawSource OL vector source\r\n   */\r\n  private clearTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry !== undefined) {\r\n        this.clearTooltipsOfOlGeometry(olFeature.getGeometry());\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update an OL tooltip properties and inner HTML and add it to the map if possible\r\n   * @param olTooltip OL tooltip\r\n   * @param measure The measure valeu ti display\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateOlTooltip(\r\n    olTooltip: OlOverlay,\r\n    measure: number,\r\n    unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    type: MeasureType\r\n  ) {\r\n    olTooltip.setProperties({_measure: measure, _unit: unit, _type: type}, true);\r\n    olTooltip.getElement().innerHTML = this.computeTooltipInnerHTML(olTooltip);\r\n    if (this.shouldShowTooltip(olTooltip)) {\r\n      this.map.ol.addOverlay(olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute a tooltip's content\r\n   * @param olTooltip OL overlay\r\n   * @returns Inner HTML\r\n   */\r\n  private computeTooltipInnerHTML(olTooltip: OlOverlay): string {\r\n    const properties = olTooltip.getProperties() as any;\r\n    return formatMeasure(properties._measure, {\r\n      decimal: 1,\r\n      unit: properties._unit,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    }, this.languageService);\r\n  }\r\n\r\n  /**\r\n   * Whether a tooltip should be showned based on the length\r\n   * of the segment it is bound to.\r\n   * @param olTooltip OL overlay\r\n   * @returns True if the tooltip should be shown\r\n   */\r\n  private shouldShowTooltip(olTooltip: OlOverlay): boolean {\r\n    if (this.showTooltips === false) {\r\n      return false;\r\n    }\r\n\r\n    const properties = olTooltip.getProperties() as any;\r\n    const measure = properties._measure;\r\n    if (measure === undefined) {\r\n      return false;\r\n    }\r\n\r\n    if (properties._unit === MeasureType.Length) {\r\n      const minSegmentLength = metersToUnit(this.minSegmentLength, properties._unit) || 0;\r\n      return measure > Math.max(minSegmentLength, 0);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit } from '../shared/measure.enum';\r\nimport { metersToUnit, squareMetersToUnit, formatMeasure } from '../shared/measure.utils';\r\n\r\n/**\r\n * This pipe returns a measure converted from meters (or square meters)\r\n * to the specified unit. It also keeps a certain number of decimals.\r\n */\r\n@Pipe({\r\n  name: 'measureFormat'\r\n})\r\nexport class MeasureFormatPipe implements PipeTransform {\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  transform(\r\n    value: number, unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    unitAbbr: boolean = false,\r\n    decimal: number = 1\r\n  ): number {\r\n    let out;\r\n    if (Object.values(MeasureAreaUnit).indexOf(unit) >= 0) {\r\n      out = squareMetersToUnit(value, unit as MeasureAreaUnit);\r\n    } else if (Object.values(MeasureLengthUnit).indexOf(unit) >= 0) {\r\n      out = metersToUnit(value, unit as MeasureLengthUnit);\r\n    }\r\n\r\n    return out ? formatMeasure(out, {\r\n      decimal: 1,\r\n      unit,\r\n      unitAbbr,\r\n      locale: 'fr'\r\n    }) : out;\r\n  }\r\n}\r\n","import { OlModify } from 'ol/interaction/Modify';\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  Self,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output\r\n} from '@angular/core';\r\nimport { NgControl, ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport * as OlStyle from 'ol/style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport * as poly from 'ol/geom/Polygon';\r\nimport * as olproj from 'ol/proj';\r\nimport Point from 'ol/geom/Point';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport {\r\n  MeasureLengthUnit,\r\n  updateOlGeometryMidpoints,\r\n  formatMeasure,\r\n  measureOlGeometry\r\n} from '../../measure';\r\nimport { DrawControl, ModifyControl } from '../shared/controls';\r\nimport { createDrawInteractionStyle } from '../shared/geometry.utils';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map. A text input is also displayed in the\r\n * form with some instructions.\r\n * This is still WIP.\r\n */\r\n@Component({\r\n  selector: 'igo-geometry-form-field-input',\r\n  templateUrl: './geometry-form-field-input.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldInputComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olGeoJSON = new OlGeoJSON();\r\n  private ready = false;\r\n\r\n  private drawControl: DrawControl;\r\n  private modifyControl: ModifyControl;\r\n  private defaultDrawStyleRadius: number;\r\n  private olGeometryEnds$$: Subscription;\r\n  private olGeometryChanges$$: Subscription;\r\n  private olTooltip = OlOverlay;\r\n\r\n  /**\r\n   * Active control\r\n   * @internal\r\n   */\r\n  public activeControl: DrawControl | ModifyControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The geometry type\r\n   */\r\n  @Input()\r\n  set geometryType(value: OlGeometryType) {\r\n    this._geometryType = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateControl();\r\n    this.createDrawControl();\r\n    this.drawControl.freehand$.next(this.freehandDrawIsActive);\r\n    this.toggleControl();\r\n  }\r\n  get geometryType(): OlGeometryType { return this._geometryType; }\r\n  private _geometryType: OlGeometryType;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input() drawGuide: number = null;\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * Whether draw control should be active or not\r\n   */\r\n  @Input()\r\n  get drawControlIsActive(): boolean { return this._drawControlIsActive; }\r\n  set drawControlIsActive(value: boolean) {\r\n    this._drawControlIsActive = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n    this.deactivateControl();\r\n    if (!this._drawControlIsActive) {\r\n      return;\r\n    } else {\r\n      this.toggleControl();\r\n    }\r\n  }\r\n  private _drawControlIsActive: boolean;\r\n\r\n  /**\r\n   * Whether freehand draw control should be active or not\r\n   */\r\n  @Input()\r\n  get freehandDrawIsActive(): boolean { return this._freehandDrawIsActive; }\r\n  set freehandDrawIsActive(value: boolean) {\r\n    this._freehandDrawIsActive = value;\r\n    this.deactivateControl();\r\n\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n\r\n    this.drawControl.freehand$.next(this.freehandDrawIsActive);\r\n\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n\r\n    if (!this.drawControlIsActive) {\r\n      return;\r\n    }\r\n    this.toggleControl();\r\n  }\r\n  private _freehandDrawIsActive: boolean;\r\n\r\n  /**\r\n   * Style for the draw control (applies while the geometry is being drawn)\r\n   */\r\n  @Input()\r\n  set drawStyle(value: OlStyle) {\r\n    if (value === undefined) {\r\n      value = createDrawInteractionStyle();\r\n    }\r\n    this._drawStyle = value;\r\n    if (value && this.isStyleWithRadius(value)) {\r\n      this.defaultDrawStyleRadius = value.getImage().getRadius();\r\n    } else {\r\n      this.defaultDrawStyleRadius = null;\r\n    }\r\n    this.deactivateControl();\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n\r\n    this.drawControl.freehand$.next(this.freehandDrawIsActive);\r\n    this.toggleControl();\r\n  }\r\n  get drawStyle(): OlStyle { return this._drawStyle; }\r\n  private _drawStyle: OlStyle;\r\n\r\n  /**\r\n   * Style for the overlay layer (applies once the geometry is added to the map)\r\n   * If not specified, drawStyle applies\r\n   */\r\n  @Input()\r\n  set overlayStyle(value: OlStyle) { this._overlayStyle = value; }\r\n  get overlayStyle(): OlStyle { return this._overlayStyle; }\r\n  private _overlayStyle: OlStyle;\r\n\r\n  /**\r\n   * The geometry value (GeoJSON)\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  @Input()\r\n  set value(value: GeoJSONGeometry) {\r\n    this._value = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n\r\n    if (value) {\r\n      this.addGeoJSONToOverlay(value);\r\n    } else {\r\n      this.olOverlaySource.clear();\r\n    }\r\n    this.onChange(value);\r\n    this.toggleControl();\r\n    this.cdRef.detectChanges();\r\n  }\r\n  get value(): GeoJSONGeometry { return this._value; }\r\n  private _value: GeoJSONGeometry;\r\n\r\n  /**\r\n   * The vector source to add the geometry to\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  @Input()\r\n  set radius(value: any) {\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n    if (this.modifyControl.getSource()) {\r\n      this.modifyControl.getSource().refresh();\r\n    }\r\n    if (this.freehandDrawIsActive) {\r\n      let olModify;\r\n      setTimeout(() => {\r\n        olModify = this.modifyControl.olModifyInteraction;\r\n        if (olModify) {\r\n          if (olModify.features_) {\r\n            olModify.features_.clear();\r\n          }\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    @Optional() @Self() public ngControl: NgControl\r\n  ) {\r\n    if (this.ngControl !== undefined) {\r\n      // Setting the value accessor directly (instead of using\r\n      // the providers) to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an overlay layer, add the initial geometry to it (if any)\r\n   * and toggle the right interaction.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    if (this.drawStyle === undefined) {\r\n      this.drawStyle = createDrawInteractionStyle();\r\n    }\r\n\r\n    if (this.overlayStyle === undefined) {\r\n      this.overlayStyle = this.drawStyle;\r\n    }\r\n\r\n    this.addOlOverlayLayer();\r\n    this.createMeasureTooltip();\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n\r\n    if (this.value) {\r\n      this.addGeoJSONToOverlay(this.value);\r\n    }\r\n    this.toggleControl();\r\n\r\n    this.ready = true;\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    // This is mandatory when the form control is reused after\r\n    // this component has been destroyed. It seems like the control\r\n    // keeps a reference to this component even after it's destroyed\r\n    // and it attempts to set it's value\r\n    this.ready = false;\r\n\r\n    this.deactivateControl();\r\n    this.olOverlaySource.clear();\r\n    this.map.ol.removeLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnChange(fn: Function) {\r\n    this.onChange = fn;\r\n  }\r\n  private onChange: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n  private onTouched: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  writeValue(value: GeoJSONGeometry) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Add an overlay layer to the map\r\n   */\r\n  private addOlOverlayLayer(): OlVectorLayer {\r\n    this.olOverlayLayer = new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      zIndex: 500,\r\n      style: null\r\n    });\r\n    this.map.ol.addLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create a draw control and subscribe to it's geometry\r\n   */\r\n  private createDrawControl() {\r\n    this.drawControl = new DrawControl({\r\n      geometryType: this.geometryType || 'Point',\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: typeof this.drawStyle === 'function' ? this.drawStyle : (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a modify control and subscribe to it's geometry\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: typeof this.drawStyle === 'function' ? this.drawStyle : (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle the proper control (draw or modify)\r\n   */\r\n  private toggleControl() {\r\n    this.deactivateControl();\r\n\r\n    if (!this.drawControlIsActive) {\r\n      return;\r\n    }\r\n    if (!this.value && this.geometryType) {\r\n      this.activateControl(this.drawControl);\r\n    } else {\r\n      this.activateControl(this.modifyControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param control Control\r\n   */\r\n  private activateControl(control: DrawControl | ModifyControl) {\r\n    this.activeControl = control;\r\n    this.olGeometryEnds$$ = control.end$\r\n      .subscribe((olGeometry: OlGeometry) => this.onOlGeometryEnds(olGeometry));\r\n    if (this.measure === true && control === this.drawControl) {\r\n      this.olGeometryChanges$$ = control.changes$\r\n        .subscribe((olGeometry: OlGeometry) => this.onOlGeometryChanges(olGeometry));\r\n    }\r\n    control.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active control\r\n   */\r\n  private deactivateControl() {\r\n    this.removeMeasureTooltip();\r\n    if (this.activeControl !== undefined) {\r\n      this.activeControl.setOlMap(undefined);\r\n    }\r\n    if (this.olGeometryEnds$$ !== undefined) {\r\n      this.olGeometryEnds$$.unsubscribe();\r\n    }\r\n    if (this.olGeometryChanges$$ !== undefined) {\r\n      this.olGeometryChanges$$.unsubscribe();\r\n    }\r\n    this.activeControl = undefined;\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryEnds(olGeometry: OlGeometry | undefined) {\r\n    this.removeMeasureTooltip();\r\n    this.setOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryChanges(olGeometry: OlGeometry) {\r\n    if (olGeometry.getType() !== 'Point') {\r\n      this.updateMeasureTooltip(olGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, convert the output value to GeoJSON and keep it.\r\n   * Restore the double click interaction.\r\n   * @param olGeometry OL geometry\r\n   */\r\n  private setOlGeometry(olGeometry: OlGeometry | undefined) {\r\n    let value;\r\n    if (olGeometry === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (olGeometry.getType() === 'Circle') { // Because Circle doesn't exist as a GeoJSON object\r\n      olGeometry = this.circleToPoint(olGeometry);\r\n    }\r\n\r\n    value = this.olGeoJSON.writeGeometryObject(olGeometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: 'EPSG:4326'\r\n    });\r\n    if (olGeometry.get('radius')) {\r\n      value.radius = olGeometry.get('radius');\r\n      olGeometry._radius = value.radius;\r\n    }\r\n    this.writeValue(value);\r\n  }\r\n\r\n  private circleToPoint(olGeometry) {\r\n    const center = olGeometry.getCenter();\r\n    const coordinates = olproj.transform(center, this.map.projection, 'EPSG:4326');\r\n    const radius = Math.round(olGeometry.getRadius() * (Math.cos((Math.PI / 180) * coordinates[1])));\r\n\r\n    // Convert it to a point object\r\n    olGeometry = new Point(center);\r\n    olGeometry.set('radius', radius, true);\r\n    return olGeometry;\r\n  }\r\n\r\n  /**\r\n   * Add a GeoJSON geometry to the overlay\r\n   * @param geometry GeoJSON geometry\r\n   */\r\n  private addGeoJSONToOverlay(geometry: GeoJSONGeometry) {\r\n    const olGeometry = this.olGeoJSON.readGeometry(geometry, {\r\n      dataProjection: 'EPSG:4326',\r\n      featureProjection: this.map.projection\r\n    });\r\n    const olFeature = new OlFeature({\r\n      geometry: olGeometry\r\n    });\r\n    olFeature.setStyle(this.overlayStyle);\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create the measure tooltip\r\n   */\r\n  private createMeasureTooltip(): OlOverlay {\r\n    this.olTooltip = new OlOverlay({\r\n      element: document.createElement('div'),\r\n      offset: [-30, -10],\r\n      className: [\r\n        'igo-map-tooltip',\r\n        'igo-map-tooltip-measure'\r\n      ].join(' '),\r\n      stopEvent: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the measure tooltip of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   */\r\n  private updateMeasureTooltip(olGeometry: OlGeometry) {\r\n    const measure = measureOlGeometry(olGeometry, this.map.projection);\r\n    const lengths = measure.lengths;\r\n    const lastIndex = olGeometry.getType() === 'Polygon' ? lengths.length - 2 : lengths.length - 1;\r\n    const lastLength = lengths[lastIndex];\r\n\r\n    const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n    const olLastMidpoint = olMidpoints[lastIndex];\r\n    if (olMidpoints.length === 0 || olLastMidpoint === undefined) {\r\n      this.removeMeasureTooltip();\r\n      return;\r\n    }\r\n\r\n    this.olTooltip.setPosition(olLastMidpoint.flatCoordinates);\r\n\r\n    const innerHtml = formatMeasure(lastLength, {\r\n      decimal: 1,\r\n      unit: MeasureLengthUnit.Meters,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    });\r\n    this.olTooltip.getElement().innerHTML = innerHtml;\r\n    if (this.olTooltip.getMap() === undefined) {\r\n      this.map.ol.addOverlay(this.olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the measure tooltip from the map\r\n   */\r\n  private removeMeasureTooltip() {\r\n    if (this.olTooltip.getMap && this.olTooltip.getMap() !== undefined) {\r\n      this.map.ol.removeOverlay(this.olTooltip);\r\n      this.olTooltip.setMap(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjust the draw style with the specified draw guide distance, if possible\r\n   * @param olStyle Draw style to update\r\n   * @param resolution Resolution (to make the screen size of symbol fit the drawGuide value)\r\n   */\r\n  private updateDrawStyleWithDrawGuide(olStyle: OlStyle, resolution: number) {\r\n    if (this.isStyleWithRadius(olStyle)) {\r\n      const drawGuide = this.drawGuide;\r\n      let radius;\r\n      if (!drawGuide || drawGuide < 0) {\r\n        radius = this.defaultDrawStyleRadius;\r\n      } else {\r\n        radius = drawGuide > 0 ? drawGuide / resolution : drawGuide;\r\n      }\r\n      olStyle.getImage().setRadius(radius);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns wether a given Open Layers style has a radius property that can be set (used to set draw guide)\r\n   * @param olStyle The style on which to perform the check\r\n   */\r\n  private isStyleWithRadius(olStyle: OlStyle): boolean {\r\n    return typeof olStyle !== 'function' && olStyle.getImage && olStyle.getImage().setRadius;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { GeometryFormFieldComponent } from './geometry-form-field.component';\r\nimport { GeometryFormFieldInputComponent } from './geometry-form-field-input.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ],\r\n  declarations: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ]\r\n})\r\nexport class IgoGeometryFormFieldModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoGeometryFormFieldModule } from './geometry-form-field/geometry-form-field.module';\r\nimport { GeometryFormFieldComponent } from './geometry-form-field/geometry-form-field.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  exports: [\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  declarations: [],\r\n  providers: [],\r\n  entryComponents: [\r\n    GeometryFormFieldComponent\r\n  ]\r\n})\r\nexport class IgoGeometryModule {}\r\n","import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\nimport { TimeFilterableDataSourceOptions } from '../shared/time-filter.interface';\r\nimport { WMSDataSourceOptions } from '../../datasource/shared/datasources/wms-datasource.interface';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-button',\r\n  templateUrl: './time-filter-button.component.html',\r\n  styleUrls: ['./time-filter-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TimeFilterButtonComponent implements OnInit {\r\n\r\n  public options: TimeFilterableDataSourceOptions;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string = 'primary';\r\n\r\n  @Input() header: boolean = true;\r\n\r\n  public timeFilterCollapse = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.options = this.layer.dataSource.options as WMSDataSourceOptions;\r\n  }\r\n\r\n  toggleTimeFilter() {\r\n      this.timeFilterCollapse = !this.timeFilterCollapse;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatSlider } from '@angular/material';\r\nimport * as moment from 'moment';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { TimeFilterOptions } from '../shared/time-filter.interface';\r\nimport { TimeFilterType, TimeFilterStyle } from '../shared/time-filter.enum';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-form',\r\n  templateUrl: './time-filter-form.component.html',\r\n  styleUrls: ['./time-filter-form.component.scss']\r\n})\r\nexport class TimeFilterFormComponent implements OnInit {\r\n  @Input() layer: Layer;\r\n\r\n  @Input() options: TimeFilterOptions;\r\n\r\n  public color = 'primary';\r\n  public date: Date;\r\n  public startDate: Date;\r\n  public endDate: Date;\r\n  public year: any;\r\n  public startYear: any;\r\n  public endYear: any;\r\n  public initStartYear: any;\r\n  public initEndYear: any;\r\n  public listYears: Array<string> = [];\r\n  public startListYears: Array<string> = [];\r\n  public endListYears: Array<string> = [];\r\n\r\n  @Input()\r\n  set currentValue(value: string) {\r\n    if (value) {\r\n      if (this.type !== TimeFilterType.YEAR) {\r\n        const valueArray = value.split('/');\r\n        if (valueArray.length > 0) {\r\n          const startDate = new Date(valueArray[0]);\r\n          const endDate = new Date(valueArray[1]);\r\n          if (!isNaN(startDate.valueOf())) {\r\n            this.startDate = startDate;\r\n          }\r\n          if (!isNaN(endDate.valueOf())) {\r\n            this.endDate = endDate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public interval: any;\r\n  public playIcon = 'play-circle';\r\n  public resetIcon = 'replay';\r\n\r\n  @Output() change: EventEmitter<Date | [Date, Date]> = new EventEmitter();\r\n  @Output()\r\n  yearChange: EventEmitter<string | [string, string]> = new EventEmitter();\r\n  @ViewChild(MatSlider) mySlider;\r\n\r\n  get type(): TimeFilterType {\r\n    return this.options.type === undefined ? TimeFilterType.DATE : this.options.type;\r\n  }\r\n\r\n  get isRange(): boolean {\r\n    return this.options.range === undefined || this.options.style === TimeFilterStyle.SLIDER\r\n      ? false\r\n      : this.options.range;\r\n  }\r\n\r\n  get style(): TimeFilterStyle {\r\n    return this.options.style === undefined ? TimeFilterStyle.SLIDER : this.options.style;\r\n  }\r\n\r\n  get step(): number {\r\n    let step = 10800000;\r\n    if (this.options.step === undefined) {\r\n      switch (this.type) {\r\n        case TimeFilterType.DATE:\r\n        case TimeFilterType.DATETIME:\r\n          step = 10800000;\r\n          break;\r\n        case TimeFilterType.TIME:\r\n          step = 3600000;\r\n          break;\r\n        case TimeFilterType.YEAR:\r\n          step = 31536000000;\r\n          break;\r\n        default:\r\n          step = 10800000;\r\n      }\r\n    } else {\r\n      step = this.getStepDefinition(this.options.step);\r\n    }\r\n\r\n    return step;\r\n  }\r\n\r\n  get timeInterval(): number {\r\n    return this.options.timeInterval === undefined\r\n      ? 2000\r\n      : this.options.timeInterval;\r\n  }\r\n\r\n  get min(): Date {\r\n    return this.options.min === undefined\r\n      ? undefined\r\n      : new Date(this.options.min);\r\n  }\r\n\r\n  get max(): Date {\r\n    return this.options.max === undefined\r\n      ? undefined\r\n      : new Date(this.options.max);\r\n  }\r\n\r\n  get is(): boolean {\r\n    return this.options.range === undefined ? false : this.options.range;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    if (this.startDate === undefined) {\r\n      const utcmin = new Date(this.min);\r\n      this.startDate = new Date(\r\n        utcmin.getTime() + utcmin.getTimezoneOffset() * 60000\r\n      );\r\n    }\r\n    if (this.endDate === undefined) {\r\n      const utcmax = new Date(this.max);\r\n      this.endDate = new Date(\r\n        utcmax.getTime() + utcmax.getTimezoneOffset() * 60000\r\n      );\r\n    }\r\n    if (this.startYear === undefined) {\r\n      this.startYear = new Date(this.startDate).getFullYear();\r\n      this.initStartYear = this.startYear;\r\n    }\r\n    if (this.endYear === undefined) {\r\n      this.endYear = new Date(this.endDate).getFullYear();\r\n      this.initEndYear = this.endYear;\r\n    }\r\n\r\n    if (!this.isRange) {\r\n      for (let i = this.startYear; i <= this.endYear + 1; i++) {\r\n        this.listYears.push(i);\r\n      }\r\n    } else {\r\n      for (let i = this.startYear; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      for (let i = this.startYear + 1; i <= this.endYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n    }\r\n    this.options.enabled = this.options.enabled === undefined ? true : this.options.enabled;\r\n    this.checkFilterValue();\r\n    if (this.options.enabled) {\r\n      if (!this.isRange && this.style === 'slider' && this.type === 'year') {\r\n        this.yearChange.emit(this.year);\r\n      }\r\n    } else {\r\n      this.storeCurrentFilterValue();\r\n      this.yearChange.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    }\r\n  }\r\n\r\n  storeCurrentFilterValue() {\r\n    // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    if (!this.isRange && this.style === TimeFilterStyle.SLIDER && this.type === TimeFilterType.YEAR) {\r\n        this.options.value = this.year.toString();\r\n    }\r\n  }\r\n\r\n  checkFilterValue() {\r\n    const timeFromWms = this.layer.dataSource.ol.getParams().TIME;\r\n    if (!this.isRange && this.style === TimeFilterStyle.SLIDER && this.type === TimeFilterType.YEAR) {\r\n      if (timeFromWms) {\r\n        this.year = new Date(timeFromWms.toString()).getFullYear() + 1;\r\n      } else if (this.options.value) {\r\n        this.year = new Date(this.options.value.toString()).getFullYear() + 1;\r\n      } else {\r\n        this.year = new Date(this.min).getFullYear() + 1;\r\n      }\r\n    } else {\r\n      // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    }\r\n  }\r\n\r\n  handleDateChange(event: any) {\r\n    this.setupDateOutput();\r\n    this.applyTypeChange();\r\n\r\n    // Only if is range, use 2 dates to make the range\r\n    if (this.isRange) {\r\n      this.change.emit([this.startDate, this.endDate]);\r\n    } else {\r\n      this.change.emit(this.startDate);\r\n    }\r\n  }\r\n\r\n  handleYearChange(event: any) {\r\n    if (this.isRange) {\r\n      this.endListYears = [];\r\n      for (let i = this.startYear + 1; i <= this.initEndYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n      this.startListYears = [];\r\n      for (let i = this.initStartYear + 1; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      this.yearChange.emit([this.startYear, this.endYear]);\r\n    } else {\r\n      this.yearChange.emit(this.year);\r\n    }\r\n  }\r\n\r\n  handleListYearChange(event: any) {\r\n    this.handleYearChange([this.startYear, this.endYear]);\r\n  }\r\n\r\n  handleListYearStartChange(event: any) {\r\n    this.change.emit([this.startDate, this.endDate]);\r\n  }\r\n\r\n  dateToNumber(date: Date): number {\r\n    let newDate;\r\n    if (date) {\r\n      newDate = new Date(date);\r\n    } else {\r\n      newDate = new Date(this.min);\r\n    }\r\n\r\n    return newDate.getTime();\r\n  }\r\n\r\n  setSliderThumbLabel(label: string) {\r\n    const thumbLabel = this.findThumbLabel(\r\n      this.mySlider._elementRef.nativeElement.childNodes\r\n    );\r\n    if (thumbLabel) {\r\n      thumbLabel.textContent = label;\r\n    }\r\n  }\r\n\r\n  findThumbLabel(test: any[]): any {\r\n    let thumbLabel;\r\n\r\n    test.forEach(value => {\r\n      if (value.className === 'mat-slider-thumb-label-text') {\r\n        thumbLabel = value;\r\n      }\r\n\r\n      if (value.children.length > 0 && !thumbLabel) {\r\n        thumbLabel = this.findThumbLabel(value.childNodes);\r\n      }\r\n    }, this);\r\n    return thumbLabel;\r\n  }\r\n\r\n  toggleFilterState() {\r\n    this.options.enabled = !this.options.enabled;\r\n\r\n    if (this.options.enabled) {\r\n      if (!this.isRange && TimeFilterStyle.SLIDER && this.type === TimeFilterType.YEAR) {\r\n        this.yearChange.emit(this.year);\r\n      }\r\n    } else {\r\n      this.stopFilter();\r\n      this.storeCurrentFilterValue();\r\n      this.change.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    }\r\n  }\r\n\r\n  resetFilter(event: any) {\r\n    this.date = new Date(this.min);\r\n    this.year = this.date.getFullYear() + 1;\r\n    if (!this.isRange && TimeFilterStyle.SLIDER && this.type === TimeFilterType.YEAR) {\r\n      this.yearChange.emit(this.year);\r\n    } else {\r\n      this.setupDateOutput();\r\n      this.change.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.\r\n    }\r\n  }\r\n\r\n  playFilter(event: any) {\r\n    if (this.interval) {\r\n      this.stopFilter();\r\n    } else {\r\n      this.playIcon = 'pause-circle';\r\n      this.interval = setInterval(\r\n        (that) => {\r\n          let newMinDateNumber;\r\n          const maxDateNumber = new Date(that.max);\r\n\r\n          newMinDateNumber =\r\n            that.date === undefined ? that.min.getTime() : that.date.getTime();\r\n          newMinDateNumber += that.mySlider.step;\r\n          that.date = new Date(newMinDateNumber);\r\n\r\n          if (newMinDateNumber > maxDateNumber.getTime()) {\r\n            that.stopFilter();\r\n          }\r\n\r\n          that.handleDateChange({ value: that.date, date: that.date });\r\n        },\r\n        this.timeInterval,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  playYear(event: any) {\r\n    if (this.year + this.mySlider.step > (this.max.getFullYear() + this.mySlider.step)) {\r\n      this.stopFilter();\r\n      this.resetFilter(event);\r\n    }\r\n    if (this.interval) {\r\n      this.stopFilter();\r\n    } else {\r\n      this.playIcon = 'pause-circle';\r\n      this.interval = setInterval(\r\n        // tslint:disable-next-line:only-arrow-functions\r\n        function(that) {\r\n          that.year = that.year + that.mySlider.step;\r\n          if (that.year > that.max.getFullYear()) {\r\n            that.stopFilter();\r\n          }\r\n          that.yearChange.emit(that.year);\r\n        },\r\n        this.timeInterval,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  stopFilter() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n    this.interval = undefined;\r\n    this.playIcon = 'play-circle';\r\n  }\r\n\r\n  handleSliderDateChange(event: any) {\r\n    this.date = new Date(event.value);\r\n    this.setSliderThumbLabel(this.handleSliderTooltip());\r\n    this.handleDateChange(event);\r\n  }\r\n\r\n  handleSliderYearChange(event: any) {\r\n    this.year = event.value;\r\n    this.yearChange.emit(this.year);\r\n  }\r\n\r\n  handleSliderValue(): number {\r\n    if (this.options.current === true || !this.min) {\r\n      const currentDate = new Date();\r\n      this.date = this.getRoundedDate(currentDate);\r\n    }\r\n    if (this.type === TimeFilterType.YEAR) {\r\n      return this.year;\r\n    } else {\r\n      return this.date === undefined ? this.min.getTime() : this.date.getTime();\r\n    }\r\n  }\r\n\r\n  handleSliderTooltip() {\r\n    let label: string;\r\n\r\n    switch (this.type) {\r\n      case TimeFilterType.DATE:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toDateString()\r\n            : this.date.toDateString();\r\n        break;\r\n      case TimeFilterType.TIME:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toTimeString()\r\n            : this.date.toTimeString();\r\n        break;\r\n      // datetime\r\n      default:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toUTCString()\r\n            : this.date.toUTCString();\r\n        break;\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  setupDateOutput() {\r\n    if (this.style === TimeFilterStyle.SLIDER) {\r\n      this.startDate = new Date(this.date);\r\n      this.startDate.setSeconds(-(this.step / 1000));\r\n      this.endDate = new Date(this.startDate);\r\n      this.endDate.setSeconds(this.step / 1000);\r\n    } else if (!this.isRange && !!this.date) {\r\n      this.endDate = new Date(this.date);\r\n      this.startDate = new Date(this.date);\r\n    } else if (this.isRange && (!!this.date || !this.date)) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    } else if (!this.date) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    }\r\n  }\r\n\r\n  applyTypeChange() {\r\n    switch (this.type) {\r\n      case TimeFilterType.DATE:\r\n        if (this.startDate !== undefined || this.endDate !== undefined) {\r\n          this.startDate.setHours(0);\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setHours(23);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      case TimeFilterType.TIME:\r\n        if (this.style === TimeFilterStyle.CALENDAR) {\r\n          if (this.startDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.startDate.getHours();\r\n            const selectedMinute = this.startDate.getMinutes();\r\n            this.startDate = this.min;\r\n            this.startDate.setHours(selectedHour);\r\n            this.startDate.setMinutes(selectedMinute);\r\n          }\r\n\r\n          if (this.endDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.endDate.getHours();\r\n            const selectedMinute = this.endDate.getMinutes();\r\n            this.endDate = this.min;\r\n            this.endDate.setHours(selectedHour);\r\n            this.endDate.setMinutes(selectedMinute);\r\n          }\r\n        }\r\n\r\n        if (!this.isRange && this.step > 60 * 60 * 1000) {\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      // datetime\r\n      default:\r\n      // do nothing\r\n    }\r\n  }\r\n\r\n  getRangeMinDate(): Date {\r\n    return this.startDate === undefined ? this.min : this.startDate;\r\n  }\r\n\r\n  getRangeMaxDate(): Date {\r\n    return this.endDate === undefined ? this.max : this.endDate;\r\n  }\r\n\r\n  /**\r\n   * Round date at a certain time, 10 minutes by Default\r\n   * @param date - Date to Round\r\n   * @param atMinute - round to closest 'atMinute' minute, rounded 10 by default\r\n   * @return the rounded date\r\n   */\r\n  getRoundedDate(date, atMinute = 10) {\r\n    const coeff = 1000 * 60 * atMinute;\r\n    return new Date(Math.round(date.getTime() / coeff) * coeff);\r\n  }\r\n\r\n  /**\r\n   * Get the step (period) definition from the layer dimension tag\r\n   * @param step The step as ISO 8601 example: PT10M for 10 Minutes\r\n   * @return the duration in milliseconds\r\n   */\r\n  getStepDefinition(step) {\r\n    return moment.duration(step).asMilliseconds();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { TimeFilterableDataSource } from '../shared/time-filter.interface';\r\nimport { TimeFilterService } from '../shared/time-filter.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-item',\r\n  templateUrl: './time-filter-item.component.html',\r\n  styleUrls: ['./time-filter-item.component.scss']\r\n})\r\nexport class TimeFilterItemComponent {\r\n\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  filtersCollapsed: boolean = false;\r\n\r\n  @Input() header: boolean = true;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  get datasource(): TimeFilterableDataSource {\r\n    return this.layer.dataSource as TimeFilterableDataSource;\r\n  }\r\n  constructor(private timeFilterService: TimeFilterService) {}\r\n\r\n  handleYearChange(year: string | [string, string]) {\r\n    this.timeFilterService.filterByYear(this.datasource, year);\r\n  }\r\n\r\n  handleDateChange(date: Date | [Date, Date]) {\r\n    this.timeFilterService.filterByDate(this.datasource, date);\r\n  }\r\n\r\n  private toggleLegend(collapsed: boolean) {\r\n    this.layer.legendCollapsed = collapsed;\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleLegendOnClick() {\r\n    if (!this.filtersCollapsed) {\r\n      this.toggleLegend(this.showLegend$.value);\r\n    }\r\n  }\r\n\r\n  public setVisible() {\r\n    this.layer.visible = true;\r\n  }\r\n\r\n  toggleFiltersCollapsed() {\r\n    this.filtersCollapsed = !this.filtersCollapsed;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-list',\r\n  templateUrl: './time-filter-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TimeFilterListComponent {\r\n  @Input()\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  private _layers: Layer[] = [];\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { TimeFilterListComponent } from './time-filter-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoTimeFilterListBinding]'\r\n})\r\nexport class TimeFilterListBindingDirective implements OnInit, OnDestroy {\r\n  private component: TimeFilterListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: TimeFilterListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olproj from 'ol/proj';\r\nimport olWKT from 'ol/format/WKT';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WktService {\r\n  constructor() {}\r\n\r\n  public wktToFeature(wkt, wktProj, featureProj) {\r\n    return new olWKT().readFeature(wkt, {\r\n      dataProjection: wktProj,\r\n      featureProjection: featureProj\r\n    });\r\n  }\r\n  public extentToWkt(epsgTO, extent, extentProj) {\r\n    let currentExtent = olproj.transformExtent(extent, extentProj, epsgTO);\r\n    currentExtent = this.roundCoordinateArray(currentExtent, epsgTO, 0);\r\n    const wktPoly = `POLYGON((\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]}))`;\r\n    const wktLine = `LINESTRING(\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]})`;\r\n    const wktMultiPoints = `MULTIPOINT(\r\n        ${extent[0]} ${extent[1]},\r\n        ${extent[0]} ${extent[3]},\r\n        ${extent[2]} ${extent[3]},\r\n        ${extent[2]} ${extent[1]})`;\r\n    return {\r\n      wktPoly,\r\n      wktLine,\r\n      wktMultiPoints\r\n    };\r\n  }\r\n\r\n  private roundCoordinateArray(coordinateArray, projection, decimal = 0) {\r\n    const lproj = olproj.get(projection);\r\n    const units = lproj.getUnits();\r\n    const olUnits = ['ft', 'm', 'us-ft'];\r\n    if (olUnits.indexOf(units) !== -1) {\r\n      coordinateArray = this.roundArray(coordinateArray, decimal);\r\n    }\r\n    return coordinateArray;\r\n  }\r\n\r\n  private roundArray(array, decimal = 0) {\r\n    let x = 0;\r\n    while (x < array.length) {\r\n      array[x] = array[x].toFixed(decimal);\r\n      x++;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  public snrcToWkt(snrc, epsgTO) {\r\n    snrc = snrc.toLowerCase();\r\n    let wktPoly;\r\n    const ew = {\r\n      1: { from: -56, to: -64 },\r\n      2: { from: -64, to: -72 },\r\n      3: { from: -72, to: -80 },\r\n      4: { from: -80, to: -88 },\r\n      5: { from: -88, to: -96 },\r\n      6: { from: -96, to: -104 },\r\n      7: { from: -104, to: -112 },\r\n      8: { from: -112, to: -120 },\r\n      9: { from: -120, to: -128 },\r\n      10: { from: -128, to: -136 }\r\n    };\r\n    const sn = {\r\n      1: { from: 44, to: 48 },\r\n      2: { from: 48, to: 52 },\r\n      3: { from: 52, to: 56 },\r\n      4: { from: 56, to: 60 },\r\n      5: { from: 60, to: 64 },\r\n      6: { from: 64, to: 68 },\r\n      7: { from: 68, to: 72 },\r\n      8: { from: 72, to: 76 },\r\n      9: { from: 76, to: -128 }\r\n    };\r\n    const snrc250kIndex = [\r\n      ['m', 'n', 'o', 'p'],\r\n      ['l', 'k', 'j', 'i'],\r\n      ['e', 'f', 'g', 'h'],\r\n      ['d', 'c', 'b', 'a']\r\n    ];\r\n\r\n    const snrc50kIndex = [\r\n      ['13', '14', '15', '16'],\r\n      ['12', '11', '10', '09'],\r\n      ['05', '06', '07', '08'],\r\n      ['04', '03', '02', '01']\r\n    ];\r\n    const checkSNRC50k = /\\d{2,3}[a-p][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n\r\n    let snrc1m = false;\r\n    let snrc250k = false;\r\n    let snrc50k = false;\r\n\r\n    if (checkSNRC50k.test(snrc)) {\r\n      snrc50k = true;\r\n    } else {\r\n      if (checkSNRC250k.test(snrc)) {\r\n        snrc250k = true;\r\n      } else {\r\n        if (checkSNRC1m.test(snrc)) {\r\n          snrc1m = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (snrc1m) {\r\n      snrc += 'a01';\r\n    } else if (snrc250k) {\r\n      snrc += '01';\r\n    }\r\n    if (/\\d{2,3}[a-p][0,1][0-9]/gi.test(snrc)) {\r\n      const regex1m = /(?=[a-p])/gi;\r\n      const ar1m = snrc.split(regex1m);\r\n      const part1m = ar1m[0];\r\n      const part250k = ar1m[1][0];\r\n      const part50k = ar1m[1].split(part250k)[1];\r\n      let separator = 1;\r\n      if (part1m.length === 3) {\r\n        separator = 2;\r\n      }\r\n      const partEW = part1m.substring(0, separator);\r\n      const partSN = part1m.substring(separator);\r\n      const unit1mEW = 8;\r\n      const unit1mSN = 4;\r\n      const unit250kEW = 2;\r\n      const unit250kSN = 1;\r\n      const unit50kEW = 0.5;\r\n      const unit50kSN = 0.25;\r\n      let index250kEW = 0;\r\n      let index250kSN = 0;\r\n      let index50kEW = 0;\r\n      let index50kSN = 0;\r\n      snrc250kIndex.forEach(element => {\r\n        if (element.indexOf(part250k) !== -1) {\r\n          index250kSN = snrc250kIndex.indexOf(element);\r\n          index250kEW = element.indexOf(part250k);\r\n        }\r\n      });\r\n      snrc50kIndex.forEach(element => {\r\n        if (element.indexOf(part50k) !== -1) {\r\n          index50kSN = snrc50kIndex.indexOf(element);\r\n          index50kEW = element.indexOf(part50k);\r\n        }\r\n      });\r\n\r\n      let increment250kEW = 0;\r\n      let increment250kSN = 0;\r\n      let increment50kEW = 0;\r\n      let increment50kSN = 0;\r\n      let unitPerTypeEW = unit1mEW;\r\n      let unitPerTypeSN = unit1mSN;\r\n      if (snrc250k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = 0;\r\n        increment50kSN = 0;\r\n        unitPerTypeEW = unit250kEW;\r\n        unitPerTypeSN = unit250kSN;\r\n      } else if (snrc50k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = index50kEW * unit50kEW;\r\n        increment50kSN = index50kSN * unit50kSN;\r\n        unitPerTypeEW = unit50kEW;\r\n        unitPerTypeSN = unit50kSN;\r\n      }\r\n\r\n      const coord: {ul?: any, lr?: any, ur?: any, ll?: any} = {\r\n        ul: [\r\n          ew[partEW].to + increment250kEW + increment50kEW,\r\n          sn[partSN].to - increment250kSN - increment50kSN\r\n        ]\r\n      };\r\n\r\n      coord.lr = [\r\n        coord.ul[0] + unitPerTypeEW,\r\n        coord.ul[1] - unitPerTypeSN\r\n      ];\r\n      coord.ur = [coord.ul[0], coord.ul[1] - unitPerTypeSN];\r\n      coord.ll = [coord.ul[0] + unitPerTypeEW, coord.ul[1]];\r\n\r\n      coord.ul = olproj.transform(\r\n        [coord.ul[0], coord.ul[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.lr = olproj.transform(\r\n        [coord.lr[0], coord.lr[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ur = olproj.transform(\r\n        [coord.ur[0], coord.ur[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ll = olproj.transform(\r\n        [coord.ll[0], coord.ll[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n\r\n      // Rounded coordinate to shorten url in get\r\n      coord.ul = this.roundCoordinateArray(coord.ul, epsgTO, 0);\r\n      coord.lr = this.roundCoordinateArray(coord.lr, epsgTO, 0);\r\n      coord.ur = this.roundCoordinateArray(coord.ur, epsgTO, 0);\r\n      coord.ll = this.roundCoordinateArray(coord.ll, epsgTO, 0);\r\n\r\n      wktPoly =\r\n        'POLYGON((' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        '))';\r\n      const wktLine =\r\n        'LINESTRING(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n\r\n      const wktMultiPoints =\r\n        'MULTIPOINT(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n      return {\r\n        wktPoly,\r\n        wktLine,\r\n        wktMultiPoints\r\n      };\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { WktService } from '../../wkt/shared/wkt.service';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterOperatorType } from '../../filter/shared/ogc-filter.enum';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-form',\r\n  templateUrl: './ogc-filter-form.component.html',\r\n  styleUrls: ['./ogc-filter-form.component.scss']\r\n})\r\nexport class OgcFilterFormComponent implements OnInit {\r\n  public ogcFilterOperators;\r\n  public igoSpatialSelectors;\r\n  public value = '';\r\n  public inputOperator;\r\n  public fields: any[];\r\n  public values: any[];\r\n  public color = 'primary';\r\n  public snrc = '';\r\n  public disabled;\r\n  public baseOverlayName = 'ogcFilterOverlay_';\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() currentFilter: any;\r\n\r\n  @Input() floatLabel: FloatLabelType = 'never';\r\n\r\n  get activeFilters() {\r\n    this.updateField();\r\n    return this.datasource.options.ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private wktService: WktService\r\n  ) {\r\n    // TODO: Filter permitted operator based on wfscapabilities\r\n    // Need to work on regex on XML capabilities because\r\n    // comaparison operator's name varies between WFS servers...\r\n    // Ex: IsNull vs PropertyIsNull vs IsNil ...\r\n    this.ogcFilterOperators = new OgcFilterWriter().operators;\r\n    this.igoSpatialSelectors = [\r\n      {\r\n        type: 'fixedExtent'\r\n      },\r\n      {\r\n        type: 'snrc'\r\n      }\r\n    ];\r\n    // TODO: selectFeature & drawFeature\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.computeAllowedOperators();\r\n  }\r\n\r\n  computeAllowedOperators() {\r\n    let allowedOperators = this.datasource.options.ogcFilters.allowedOperatorsType;\r\n    let effectiveOperators: {} = {};\r\n\r\n    if (!allowedOperators)  {\r\n      allowedOperators = OgcFilterOperatorType.BasicAndSpatial;\r\n    }\r\n\r\n    switch (allowedOperators.toLowerCase()) {\r\n      case 'all':\r\n        effectiveOperators = this.ogcFilterOperators;\r\n        break;\r\n      case 'spatial':\r\n        effectiveOperators = {\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n        break;\r\n      case 'basicandspatial':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n        break;\r\n      case 'basic':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] }\r\n        };\r\n        break;\r\n      case 'basicnumeric':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsGreaterThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n        };\r\n        break;\r\n      default:\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n    }\r\n\r\n    this.ogcFilterOperators = effectiveOperators;\r\n  }\r\n\r\n  updateField() {\r\n    if (!this.datasource.options.sourceFields) {\r\n      return;\r\n    }\r\n    this.fields = this.datasource.options.sourceFields\r\n    .filter(sf => (sf.excludeFromOgcFilters === undefined || !sf.excludeFromOgcFilters));\r\n    this.fields.filter(f => f.name === this.currentFilter.propertyName)\r\n      .forEach(element => {\r\n        this.values = element.values !== undefined ? element.values.sort() : [];\r\n      });\r\n  }\r\n\r\n  toggleFilterState(event, filter: OgcInterfaceFilterOptions, property) {\r\n    this.updateField();\r\n    if (event.checked) {\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = true;\r\n        });\r\n    } else {\r\n      this.removeOverlayByID(filter.filterid);\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = false;\r\n        });\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  deleteFilter(filter: OgcInterfaceFilterOptions) {\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    ogcFilters.interfaceOgcFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.filterid !== filter.filterid\r\n    );\r\n    this.removeOverlayByID(filter.filterid);\r\n\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeNumericProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.changeProperty(filter, property, parseFloat(value));\r\n    this.refreshFilters();\r\n  }\r\n\r\n  private removeOverlayByID(id) {\r\n    const overlayId = this.baseOverlayName + id;\r\n    if (this.map.overlay.dataSource.ol.getFeatureById(overlayId)) {\r\n      this.map.overlay.dataSource.ol.removeFeature(\r\n        this.map.overlay.dataSource.ol.getFeatureById(overlayId)\r\n      );\r\n    }\r\n  }\r\n\r\n  changeOperator(filter) {\r\n    if (this.ogcFilterOperators[filter.operator].spatial === false) {\r\n      this.removeOverlayByID(filter.filterid);\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        element[property] = value;\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeGeometry(filter, value?) {\r\n    const checkSNRC50k = /\\d{2,3}[a-l][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n    const mapProjection = this.map.projection;\r\n    this.removeOverlayByID(filter.filterid);\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        let wktPoly;\r\n        if (filter.igoSpatialSelector === 'snrc') {\r\n          if (value === '' && this.snrc !== '') {\r\n            wktPoly = this.wktService.snrcToWkt(this.snrc, this.map.projection).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          } else if (\r\n            value !== '' &&\r\n            (checkSNRC1m.test(value) ||\r\n              checkSNRC250k.test(value) ||\r\n              checkSNRC50k.test(value))\r\n          ) {\r\n            wktPoly = this.wktService.snrcToWkt(value, this.map.projection).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          }\r\n        } else if (filter.igoSpatialSelector === 'fixedExtent') {\r\n          wktPoly = this.wktService.extentToWkt(\r\n            mapProjection,\r\n            this.map.viewController.getExtent(),\r\n            mapProjection\r\n          ).wktPoly;\r\n          element.wkt_geometry = wktPoly;\r\n        }\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { OgcFilterableDataSource } from '../shared/ogc-filter.interface';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-form',\r\n  templateUrl: './ogc-filterable-form.component.html'\r\n})\r\nexport class OgcFilterableFormComponent {\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters;\r\n  }\r\n\r\n  get advancedOgcFilters(): boolean {\r\n    if (this.datasource.options.ogcFilters) {\r\n      return this.datasource.options.ogcFilters.advancedOgcFilters;\r\n    }\r\n    return;\r\n  }\r\n\r\n  public color = 'primary';\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DownloadService } from '../../download/shared/download.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { WFSDataSourceOptionsParams } from '../../datasource/shared/datasources/wfs-datasource.interface';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions,\r\n  OgcInterfaceFilterOptions\r\n} from '../shared/ogc-filter.interface';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterWriter } from '../shared/ogc-filter';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-item',\r\n  templateUrl: './ogc-filterable-item.component.html',\r\n  styleUrls: ['./ogc-filterable-item.component.scss']\r\n})\r\nexport class OgcFilterableItemComponent implements OnInit {\r\n  public color = 'primary';\r\n  private lastRunOgcFilter;\r\n  private defaultLogicalParent = 'And';\r\n  public hasActiveSpatialFilter = false;\r\n  public filtersAreEditable = true;\r\n  public filtersCollapsed = true;\r\n  public hasPushButton: boolean = false;\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() header: boolean = true;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters.bind(this);\r\n  }\r\n\r\n  get datasource(): OgcFilterableDataSource {\r\n    return this.layer.dataSource as OgcFilterableDataSource;\r\n  }\r\n\r\n  get downloadable() {\r\n    return (this.datasource.options as any).download;\r\n  }\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService,\r\n    private downloadService: DownloadService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const ogcFilters = this.datasource.options.ogcFilters;\r\n    if (ogcFilters.pushButtons && ogcFilters.pushButtons.bundles.length > 0) {\r\n      if (ogcFilters.advancedOgcFilters === undefined) {\r\n        ogcFilters.advancedOgcFilters = false;\r\n      }\r\n      this.hasPushButton = true;\r\n    }\r\n\r\n    switch (this.datasource.options.type) {\r\n      case 'wms':\r\n        this.ogcFilterService.setOgcWMSFiltersOptions(this.datasource);\r\n        break;\r\n      case 'wfs':\r\n        this.ogcFilterService.setOgcWFSFiltersOptions(this.datasource);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (ogcFilters) {\r\n      if (ogcFilters.interfaceOgcFilters) {\r\n        this.lastRunOgcFilter = JSON.parse(\r\n          JSON.stringify(ogcFilters.interfaceOgcFilters)\r\n        );\r\n        if (\r\n          ogcFilters.interfaceOgcFilters.filter(f => f.wkt_geometry).length >= 1\r\n        ) {\r\n          this.hasActiveSpatialFilter = true;\r\n        }\r\n      }\r\n\r\n      this.filtersAreEditable = ogcFilters.editable\r\n        ? ogcFilters.editable\r\n        : false;\r\n    }\r\n  }\r\n\r\n  addFilterToSequence() {\r\n    this.filtersCollapsed = false;\r\n    const interfaceOgcFilters: OgcInterfaceFilterOptions[] = this.datasource\r\n      .options.ogcFilters.interfaceOgcFilters;\r\n    const arr = interfaceOgcFilters || [];\r\n    const lastLevel = arr.length === 0 ? 0 : arr[arr.length - 1].level;\r\n    let firstFieldName = '';\r\n    const includedFields = this.datasource.options.sourceFields.filter(f => !f.excludeFromOgcFilters);\r\n    if (includedFields.length > 0) {\r\n      firstFieldName =\r\n        includedFields[0].name === undefined ? '' : includedFields[0].name;\r\n    }\r\n    let fieldNameGeometry;\r\n    const datasourceOptions = this.datasource\r\n      .options as WFSDataSourceOptionsParams;\r\n    if (datasourceOptions.fieldNameGeometry) {\r\n      fieldNameGeometry = datasourceOptions.fieldNameGeometry;\r\n    } else if (\r\n      (this.datasource.options as any).paramsWFS &&\r\n      (this.datasource.options as any).paramsWFS.fieldNameGeometry\r\n    ) {\r\n      fieldNameGeometry = (this.datasource.options as any).paramsWFS\r\n        .fieldNameGeometry;\r\n    }\r\n    const status = arr.length === 0 ? true : false;\r\n    arr.push(\r\n      new OgcFilterWriter().addInterfaceFilter(\r\n        {\r\n          propertyName: firstFieldName,\r\n          operator: 'PropertyIsEqualTo',\r\n          active: status,\r\n          igoSpatialSelector: 'fixedExtent',\r\n          srsName: this.map.projection,\r\n        } as OgcInterfaceFilterOptions,\r\n        fieldNameGeometry,\r\n        lastLevel,\r\n        this.defaultLogicalParent\r\n      )\r\n    );\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters = arr;\r\n  }\r\n\r\n  openDownload() {\r\n    this.downloadService.open(this.layer);\r\n  }\r\n\r\n  refreshFilters(force?: boolean) {\r\n    if (force === true) {\r\n      this.lastRunOgcFilter = undefined;\r\n    }\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    const activeFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n    if (activeFilters.length === 0) {\r\n      ogcFilters.filters = undefined;\r\n      ogcFilters.filtered = false;\r\n    }\r\n    if (activeFilters.length > 1) {\r\n      activeFilters[0].parentLogical = activeFilters[1].parentLogical;\r\n    }\r\n    if (\r\n      activeFilters.filter(\r\n        af => ['Contains', 'Intersects', 'Within'].indexOf(af.operator) !== -1\r\n      ).length === 0\r\n    ) {\r\n      this.hasActiveSpatialFilter = false;\r\n    } else {\r\n      this.hasActiveSpatialFilter = true;\r\n    }\r\n\r\n    if (\r\n      !(JSON.stringify(this.lastRunOgcFilter) === JSON.stringify(activeFilters))\r\n    ) {\r\n      if (this.layer.dataSource.options.type === 'wfs') {\r\n        const ogcDataSource: any = this.layer.dataSource;\r\n        const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n        ogcLayer.filters = ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(\r\n          activeFilters\r\n        );\r\n        this.layer.dataSource.ol.clear();\r\n      } else if (\r\n        this.layer.dataSource.options.type === 'wms' &&\r\n        ogcFilters.enabled\r\n      ) {\r\n        let rebuildFilter = '';\r\n        if (activeFilters.length >= 1) {\r\n          const ogcDataSource: any = this.layer.dataSource;\r\n          const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n          ogcLayer.filters = ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(\r\n            activeFilters\r\n          );\r\n          rebuildFilter = ogcFilterWriter.buildFilter(\r\n            ogcLayer.filters,\r\n            undefined,\r\n            undefined,\r\n            (this.layer.dataSource.options as any).fieldNameGeometry\r\n          );\r\n        }\r\n        this.ogcFilterService.filterByOgc(\r\n          this.datasource as WMSDataSource,\r\n          rebuildFilter\r\n        );\r\n        this.datasource.options.ogcFilters.filtered =\r\n          activeFilters.length === 0 ? false : true;\r\n      }\r\n\r\n      this.lastRunOgcFilter = JSON.parse(JSON.stringify(activeFilters));\r\n    } else {\r\n      // identical filter. Nothing triggered\r\n    }\r\n  }\r\n\r\n  public setVisible() {\r\n    this.layer.visible = true;\r\n  }\r\n\r\n  public isAdvancedOgcFilters(): boolean {\r\n    return this.datasource.options.ogcFilters.advancedOgcFilters;\r\n  }\r\n\r\n  public addFilterDisabled(): boolean {\r\n    return (\r\n      !this.datasource.options.sourceFields ||\r\n      this.datasource.options.sourceFields.length === 0\r\n    );\r\n  }\r\n\r\n  private changeOgcFiltersAdvancedOgcFilters(value: boolean) {\r\n    this.datasource.options.ogcFilters.advancedOgcFilters = value;\r\n  }\r\n\r\n  changeOgcFilterType(isAdvancedOgcFilters) {\r\n    this.changeOgcFiltersAdvancedOgcFilters(isAdvancedOgcFilters.checked);\r\n    if (isAdvancedOgcFilters.checked) {\r\n      this.refreshFilters(true);\r\n    }\r\n  }\r\n\r\n  private toggleLegend(collapsed: boolean) {\r\n    this.layer.legendCollapsed = collapsed;\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleLegendOnClick() {\r\n    if (!this.filtersCollapsed) {\r\n      this.toggleLegend(this.showLegend$.value);\r\n    }\r\n  }\r\n\r\n  toggleFiltersCollapsed() {\r\n    this.filtersCollapsed = !this.filtersCollapsed;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-list',\r\n  templateUrl: './ogc-filterable-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterableListComponent {\r\n\r\n  @Input() layers: Layer[];\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  constructor() {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoOgcFilterableListBinding]'\r\n})\r\nexport class OgcFilterableListBindingDirective implements OnInit, OnDestroy {\r\n  private component: OgcFilterableListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: OgcFilterableListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterableDataSourceOptions } from '../shared/ogc-filter.interface';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-button',\r\n  templateUrl: './ogc-filter-button.component.html',\r\n  styleUrls: ['./ogc-filter-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterButtonComponent implements OnInit {\r\n\r\n  public options: OgcFilterableDataSourceOptions;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string = 'primary';\r\n\r\n  @Input() header: boolean;\r\n\r\n  public ogcFilterCollapse = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.options = this.layer.dataSource.options as OgcFilterableDataSourceOptions;\r\n  }\r\n\r\n  toggleOgcFilter() {\r\n      this.ogcFilterCollapse = !this.ogcFilterCollapse;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  IgoOgcFilterObject,\r\n  OgcPushButton,\r\n  OgcPushButtonBundle,\r\n  PushButtonGroup\r\n\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { IgoMap } from '../../map';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-toggle-button',\r\n  templateUrl: './ogc-filter-toggle-button.component.html',\r\n  styleUrls: ['./ogc-filter-toggle-button.component.scss']\r\n})\r\nexport class OgcFilterToggleButtonComponent implements OnInit {\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  private ogcFilterWriter: OgcFilterWriter;\r\n  public color = 'primary';\r\n  public currentPushButtonGroup;\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService\r\n  ) {\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n  }\r\n\r\n  getPushButtonsGroups(): PushButtonGroup[] {\r\n    return this.datasource.options.ogcFilters.pushButtons.groups;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.datasource.options.ogcFilters &&\r\n      this.datasource.options.ogcFilters.pushButtons) {\r\n      this.currentPushButtonGroup =\r\n        this.datasource.options.ogcFilters.pushButtons.groups.find(g => g.enabled) ||\r\n        this.datasource.options.ogcFilters.pushButtons.groups[0];\r\n    }\r\n    this.applyFilters();\r\n  }\r\n\r\n  getToolTip(pb: OgcPushButton): string  {\r\n    let tt;\r\n    if (pb.tooltip) {\r\n      if (Array.isArray(pb.tooltip)) {\r\n        tt = pb.tooltip.join('\\n');\r\n      } else {\r\n        tt = pb.tooltip;\r\n      }\r\n    }\r\n    return tt || '';\r\n  }\r\n\r\n  getButtonColor(pb: OgcPushButton): {} {\r\n\r\n    let styles;\r\n    if (pb.color) {\r\n      styles = {\r\n        'background-color': pb.enabled ? `rgba(${pb.color})` : `rgba(255,255,255,0)`,\r\n\r\n      };\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  bundleIsVertical(bundle: OgcPushButtonBundle): boolean {\r\n    return bundle.vertical ? bundle.vertical : false;\r\n  }\r\n\r\n  onChangeGroup() {\r\n\r\n    this.getPushButtonsGroups().map(g => g.enabled = false);\r\n    this.getPushButtonsGroups().find(g => g === this.currentPushButtonGroup).enabled = true;\r\n    this.applyFilters();\r\n  }\r\n\r\n  applyFilters(currentOgcPushButton?: OgcPushButton) {\r\n    if (currentOgcPushButton) {\r\n      currentOgcPushButton.enabled = !currentOgcPushButton.enabled;\r\n    }\r\n    let filterQueryString = '';\r\n    const conditions = [];\r\n    this.currentPushButtonGroup.computedButtons.map(buttonBundle => {\r\n      const bundleCondition = [];\r\n      buttonBundle.buttons\r\n      .filter(ogcpb => ogcpb.enabled === true)\r\n      .forEach(enabledPb => bundleCondition.push(enabledPb.filters));\r\n      if (bundleCondition.length >= 1 ) {\r\n        if (bundleCondition.length === 1) {\r\n          conditions.push(bundleCondition[0]);\r\n        } else {\r\n          conditions.push({logical: buttonBundle.logical, filters: bundleCondition});\r\n        }\r\n      }\r\n    });\r\n    if (conditions.length >= 1) {\r\n      filterQueryString = this.ogcFilterWriter\r\n        .buildFilter(conditions.length === 1 ?\r\n          conditions[0] : {logical: 'And', filters: conditions } as IgoOgcFilterObject);\r\n    }\r\n    if (this.datasource.options.type === 'wms') {\r\n      this.ogcFilterService.filterByOgc(this.datasource as WMSDataSource, filterQueryString );\r\n    }\r\n    if (this.datasource.options.type === 'wfs') {\r\n      // TODO: Check how to prevent wfs to refresh when filter icon is pushed...\r\n      this.datasource.ol.clear();\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { SpatialFilterQueryType, SpatialFilterType } from '../../shared/spatial-filter.enum';\r\nimport { FormControl } from '@angular/forms';\r\nimport { EntityStore } from '@igo2/common';\r\nimport { Feature } from '../../../feature';\r\n\r\n/**\r\n * Spatial Filter Type\r\n */\r\n@Component({\r\n  selector: 'igo-spatial-filter-type',\r\n  templateUrl: './spatial-filter-type.component.html',\r\n  styleUrls: ['./spatial-filter-type.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SpatialFilterTypeComponent implements OnInit {\r\n\r\n  @Input()\r\n  get store(): EntityStore<Feature> {\r\n    return this._store;\r\n  }\r\n  set store(store: EntityStore<Feature>) {\r\n    this._store = store;\r\n  }\r\n  private _store: EntityStore<Feature>;\r\n\r\n  public queryType: string[] = ['Arrond', 'CircFed', 'CircProv', 'DirReg', 'Mun', 'MRC', 'AdmRegion', 'RegTour'];\r\n  public selectedTypeIndex = new FormControl(0);\r\n\r\n  /**\r\n   * Reference to the SpatialFIlterType enum\r\n   * @internal\r\n   */\r\n  public spatialType = SpatialFilterType;\r\n\r\n  public activeDrawType: SpatialFilterType = this.spatialType.Polygon;\r\n\r\n  @Input() selectedQueryType: SpatialFilterQueryType;\r\n\r\n  @Input() zone: Feature;\r\n\r\n  public type: SpatialFilterType;\r\n\r\n  @Output() eventType = new EventEmitter<SpatialFilterType>();\r\n\r\n  @Output() eventQueryType = new EventEmitter<SpatialFilterQueryType>();\r\n\r\n  @Output() zoneChange = new EventEmitter<Feature>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    if (this.selectedTypeIndex.value === 0) {\r\n      this.type = this.spatialType.Predefined;\r\n    }\r\n    if (this.selectedTypeIndex.value === 1) {\r\n      this.type = this.activeDrawType;\r\n    }\r\n    this.eventType.emit(this.type);\r\n  }\r\n\r\n  onTypeChange(event) {\r\n    if (this.selectedTypeIndex.value === 0) {\r\n      this.type = SpatialFilterType.Predefined;\r\n    }\r\n    if (this.selectedTypeIndex.value === 1) {\r\n      this.type = this.activeDrawType;\r\n    }\r\n    this.eventType.emit(this.type);\r\n  }\r\n\r\n  onQueryTypeChange(event) {\r\n    this.eventQueryType.emit(this.selectedQueryType);\r\n  }\r\n\r\n  onZoneChange(feature) {\r\n    this.zoneChange.emit(feature);\r\n  }\r\n\r\n  onDrawTypeChange(spatialType: SpatialFilterType) {\r\n    this.activeDrawType = spatialType;\r\n    this.eventType.emit(this.activeDrawType);\r\n  }\r\n}\r\n","import { EntityStore } from '@igo2/common';\r\nimport { SpatialFilterService } from './../../shared/spatial-filter.service';\r\nimport { SpatialFilterQueryType } from './../../shared/spatial-filter.enum';\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Feature } from '../../../feature';\r\n\r\n@Component({\r\n  selector: 'igo-spatial-filter-list',\r\n  templateUrl: './spatial-filter-list.component.html',\r\n  styleUrls: ['./spatial-filter-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SpatialFilterListComponent implements OnInit, OnDestroy {\r\n\r\n  @Input()\r\n  get store(): EntityStore<Feature> {\r\n    return this._store;\r\n  }\r\n  set store(store: EntityStore<Feature>) {\r\n    this._store = store;\r\n  }\r\n  private _store: EntityStore<Feature>;\r\n\r\n  @Input()\r\n  get queryType(): SpatialFilterQueryType {\r\n    return this._queryType;\r\n  }\r\n  set queryType(queryType: SpatialFilterQueryType) {\r\n    this.formControl.setValue('');\r\n    this._queryType = queryType;\r\n  }\r\n  private _queryType: SpatialFilterQueryType;\r\n\r\n  @Input() selectedZone: Feature;\r\n\r\n  public formControl = new FormControl();\r\n\r\n  @Output() zoneChange = new EventEmitter<Feature>();\r\n\r\n  formValueChanges$$: Subscription;\r\n\r\n  ngOnInit() {\r\n    this.formValueChanges$$ = this.formControl.valueChanges.subscribe((value) => {\r\n      if (value.length) {\r\n        this.store.view.filter((feature) => {\r\n          const filterNormalized = value.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n          const featureNameNormalized = feature.properties.nom.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n          return featureNameNormalized.includes(filterNormalized);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.formValueChanges$$.unsubscribe();\r\n  }\r\n\r\n  displayFn(feature?: Feature): string | undefined {\r\n    return feature ? feature.properties.nom : undefined;\r\n  }\r\n\r\n  constructor(private spatialFilterService: SpatialFilterService) {}\r\n\r\n  onZoneChange(feature) {\r\n    if (feature && this.queryType) {\r\n      this.spatialFilterService.loadItemById(feature, this.queryType)\r\n      .subscribe((featureGeom: Feature) => {\r\n        this.selectedZone = featureGeom;\r\n        this.zoneChange.emit(featureGeom);\r\n      });\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { SpatialFilterQueryType, SpatialFilterType } from '../../shared/spatial-filter.enum';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { IgoMap } from '../../../map';\r\nimport { SpatialFilterItemType } from './../../shared/spatial-filter.enum';\r\nimport { Feature } from './../../../feature/shared/feature.interfaces';\r\nimport { FormControl } from '@angular/forms';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport { GeoJSONGeometry } from '../../../geometry/shared/geometry.interfaces';\r\nimport { Style as OlStyle } from 'ol/style';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olproj from 'ol/proj';\r\nimport { olFeature } from 'ol/Feature';\r\nimport { MatTreeNestedDataSource } from '@angular/material';\r\nimport { SpatialFilterService } from '../../shared/spatial-filter.service';\r\nimport { MeasureLengthUnit } from '../../../measure';\r\nimport { EntityStore } from '@igo2/common';\r\nimport { Layer } from '../../../layer/shared';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { SpatialFilterThematic } from './../../shared/spatial-filter.interface';\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\n/**\r\n * Spatial-Filter-Item (search parameters)\r\n */\r\n@Component({\r\n  selector: 'igo-spatial-filter-item',\r\n  templateUrl: './spatial-filter-item.component.html',\r\n  styleUrls: ['./spatial-filter-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SpatialFilterItemComponent implements OnDestroy, OnInit {\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get type(): SpatialFilterType {\r\n    return this._type;\r\n  }\r\n  set type(type: SpatialFilterType) {\r\n    this._type = type;\r\n    const index = this.geometryTypes.findIndex(geom => geom === this.type);\r\n    this.geometryType = this.geometryTypes[index];\r\n    this.formControl.reset();\r\n    this.radius = undefined;\r\n    this.drawGuide$.next(null);\r\n    this.drawStyle$.next(undefined);\r\n\r\n    // Necessary to keep reference to the geometry form field input\r\n    if (this.type === SpatialFilterType.Predefined) {\r\n      const geojson: GeoJSONGeometry = {\r\n        type: 'Point',\r\n        coordinates: ''\r\n      };\r\n      this.formControl.setValue(geojson);\r\n    }\r\n\r\n    // Necessary to apply the right style when geometry type is Point\r\n    if (this.type === SpatialFilterType.Point) {\r\n      this.radius = 1000; // Base radius\r\n      this.radiusFormControl.setValue(this.radius);\r\n      this.PointStyle = (feature: olFeature, resolution: number) => {\r\n        const coordinates = olproj.transform(feature.getGeometry().getCoordinates(), this.map.projection, 'EPSG:4326');\r\n        return new olstyle.Style ({\r\n          image: new olstyle.Circle ({\r\n            radius: this.radius / (Math.cos((Math.PI / 180) * coordinates[1])) / resolution, // Latitude correction\r\n            stroke: new olstyle.Stroke({\r\n              width: 2,\r\n              color: 'rgba(0, 153, 255)'\r\n            }),\r\n            fill: new olstyle.Fill({\r\n              color: 'rgba(0, 153, 255, 0.2)'\r\n            })\r\n          })\r\n        });\r\n      };\r\n      this.overlayStyle = this.PointStyle;\r\n      this.drawStyle$.next(this.overlayStyle);\r\n    } else {\r\n      // If geometry types is Polygon\r\n      this.radius = undefined;\r\n      this.PolyStyle = (feature, resolution) => {\r\n        return new olstyle.Style ({\r\n          stroke: new olstyle.Stroke({\r\n            width: 2,\r\n            color: 'rgba(0, 153, 255)'\r\n          }),\r\n          fill: new olstyle.Fill({\r\n            color: 'rgba(0, 153, 255, 0.2)'\r\n          })\r\n        });\r\n      };\r\n      this.overlayStyle = this.PolyStyle;\r\n    }\r\n    this.overlayStyle$.next(this.overlayStyle);\r\n  }\r\n  private _type: SpatialFilterType;\r\n\r\n  @Input() queryType: SpatialFilterQueryType;\r\n\r\n  @Input() zone: Feature;\r\n\r\n  @Input() loading;\r\n\r\n  @Input()\r\n  get store(): EntityStore<Feature> {\r\n    return this._store;\r\n  }\r\n  set store(store: EntityStore<Feature>) {\r\n    this._store = store;\r\n    this._store.entities$.subscribe(() => { this.cdRef.detectChanges(); });\r\n  }\r\n  private _store: EntityStore<Feature>;\r\n\r\n  /**\r\n   * Available measure units for the measure type given\r\n   * @internal\r\n   */\r\n  get measureUnits(): string[] {\r\n    return [MeasureLengthUnit.Meters];\r\n  }\r\n\r\n  @Input() layers: Layer[] = [];\r\n\r\n  @Output() toggleSearch = new EventEmitter();\r\n\r\n  @Output() itemTypeChange = new EventEmitter<SpatialFilterItemType>();\r\n\r\n  @Output() thematicChange = new EventEmitter<SpatialFilterThematic[]>();\r\n\r\n  @Output() drawZoneEvent = new EventEmitter<Feature>();\r\n\r\n  @Output() radiusEvent = new EventEmitter<number>();\r\n  @Output() freehandControl = new EventEmitter<boolean>();\r\n\r\n  @Output() clearButtonEvent = new EventEmitter<Layer[]>();\r\n\r\n  @Output() clearSearchEvent = new EventEmitter();\r\n\r\n  public itemType: SpatialFilterItemType[] = [SpatialFilterItemType.Address, SpatialFilterItemType.Thematics];\r\n  public selectedItemType: SpatialFilterItemType = SpatialFilterItemType.Address;\r\n  public selectedSourceAddress;\r\n\r\n  treeControl = new NestedTreeControl<SpatialFilterThematic>(node => node.children);\r\n\r\n  // For thematics and results tables\r\n  public displayedColumns: string[] = ['name', 'select'];\r\n  public childrens: SpatialFilterThematic[] = [];\r\n  public groups: string[] = [];\r\n  public thematics: SpatialFilterThematic[] = [];\r\n  public dataSource = new MatTreeNestedDataSource<SpatialFilterThematic>();\r\n  public selectedThematics = new SelectionModel<SpatialFilterThematic>(true, []);\r\n  public displayedColumnsResults: string[] = ['typeResults', 'nameResults'];\r\n\r\n  // For geometry form field input\r\n  value$: BehaviorSubject<GeoJSONGeometry> = new BehaviorSubject(undefined);\r\n  drawGuide$: BehaviorSubject<number> = new BehaviorSubject(null);\r\n  overlayStyle$: BehaviorSubject<OlStyle> = new BehaviorSubject(undefined);\r\n  drawStyle$: BehaviorSubject<OlStyle> = new BehaviorSubject(undefined);\r\n\r\n  private value$$: Subscription;\r\n  private radiusChanges$$: Subscription;\r\n\r\n  public formControl = new FormControl();\r\n  public geometryType: OlGeometryType;\r\n  public geometryTypeField = false;\r\n  public geometryTypes: string[] = ['Point', 'Polygon'];\r\n  public drawGuideField = false;\r\n  public drawGuide: number = null;\r\n  public drawGuidePlaceholder = '';\r\n  public measure = false;\r\n  public drawControlIsActive = true;\r\n  public freehandDrawIsActive = false;\r\n  public drawStyle: OlStyle;\r\n  public drawZone: Feature;\r\n  public overlayStyle: OlStyle;\r\n  public PointStyle: OlStyle;\r\n  public PolyStyle: OlStyle;\r\n\r\n  public radius: number;\r\n  public radiusFormControl = new FormControl();\r\n\r\n  public measureUnit: MeasureLengthUnit = MeasureLengthUnit.Meters;\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private spatialFilterService: SpatialFilterService,\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService) {}\r\n\r\n  ngOnInit() {\r\n    this.spatialFilterService.loadThematicsList()\r\n    .subscribe((items: SpatialFilterThematic[]) => {\r\n      for (const item of items) {\r\n        this.childrens.push(item);\r\n        this.childrens.sort((a, b) => {\r\n          return a.name.localeCompare(b.name);\r\n        });\r\n      }\r\n      this.childrens.forEach(child => {\r\n        if (child.group && (this.groups.indexOf(child.group) === -1)) {\r\n          this.groups.push(child.group);\r\n          const thematic: SpatialFilterThematic = {\r\n            name: child.group,\r\n            children: []\r\n          };\r\n          this.thematics.push(thematic);\r\n        }\r\n        if (!child.group) {\r\n          const thematic: SpatialFilterThematic = {\r\n            name: child.name,\r\n            children: [],\r\n            source: child.source\r\n          };\r\n          this.thematics.push(thematic);\r\n        }\r\n        this.thematics.sort((a, b) => {\r\n          return a.name.localeCompare(b.name);\r\n        });\r\n      });\r\n      this.thematics.forEach(thematic => {\r\n        for (const child of this.childrens) {\r\n          if (child.group === thematic.name) {\r\n            thematic.children.push(child);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    this.dataSource.data = this.thematics;\r\n\r\n    this.drawGuide$.next(null);\r\n    this.value$.next(this.formControl.value ? this.formControl.value : undefined);\r\n    this.value$$ = this.formControl.valueChanges.subscribe((value: GeoJSONGeometry) => {\r\n      this.value$.next(value ? value : undefined);\r\n    });\r\n\r\n    this.value$.subscribe(() => {\r\n      this.getRadius();\r\n      this.cdRef.detectChanges();\r\n    });\r\n\r\n    this.radiusChanges$$ = this.radiusFormControl.valueChanges.subscribe(() => {\r\n      this.getRadius();\r\n      this.cdRef.detectChanges();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the value stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.value$$.unsubscribe();\r\n    this.cdRef.detach();\r\n  }\r\n\r\n  onItemTypeChange(event) {\r\n    this.selectedItemType = event.value;\r\n    this.itemTypeChange.emit(this.selectedItemType);\r\n  }\r\n\r\n  /**\r\n   * Set the measure unit\r\n   * @internal\r\n   */\r\n  onMeasureUnitChange(unit: MeasureLengthUnit) {\r\n    this.measureUnit = unit;\r\n  }\r\n\r\n  isPredefined() {\r\n    return this.type === SpatialFilterType.Predefined;\r\n  }\r\n\r\n  isPolygon() {\r\n    return this.type === SpatialFilterType.Polygon;\r\n  }\r\n\r\n  isPoint() {\r\n    return this.type === SpatialFilterType.Point;\r\n  }\r\n\r\n  hasChild(_: number, node: SpatialFilterThematic) {\r\n    if (node.children) {\r\n      return node.children.length;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onToggleClick(node: SpatialFilterThematic) {\r\n    this.treeControl.isExpanded(node) ? this.treeControl.collapse(node) : this.treeControl.expand(node);\r\n  }\r\n\r\n  isAllSelected(node?: SpatialFilterThematic) {\r\n    let numSelected;\r\n    let numNodes = 0;\r\n    if (!node) {\r\n      numSelected = this.selectedThematics.selected.length;\r\n      this.thematics.forEach(thematic => {\r\n        if (this.groups.indexOf(thematic.name) === -1) {\r\n          numNodes++;\r\n        }\r\n      });\r\n      this.childrens.forEach(children => {\r\n        if (!this.thematics.find(thematic => thematic.source === children.source)) {\r\n          numNodes++;\r\n        }\r\n      });\r\n    } else {\r\n      numSelected = node.children.length;\r\n      node.children.forEach(children => {\r\n        if (this.selectedThematics.selected.find(thematic => thematic === children)) {\r\n          numNodes++;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (numNodes >= 1) {\r\n      return numSelected === numNodes;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  hasChildrenSelected(node: SpatialFilterThematic) {\r\n    let bool = false;\r\n    node.children.forEach(child => {\r\n      if (this.selectedThematics.selected.find(thematic => thematic.source === child.source)) {\r\n        bool = true;\r\n      }\r\n    });\r\n    return bool;\r\n  }\r\n\r\n  /**\r\n   * Apply header checkbox\r\n   */\r\n  masterToggle() {\r\n    this.isAllSelected() ?\r\n      this.selectedThematics.clear() :\r\n      this.selectAll();\r\n\r\n    const selectedThematicsName: SpatialFilterThematic[] = [];\r\n    for (const thematic of this.selectedThematics.selected) {\r\n      selectedThematicsName.push(thematic);\r\n    }\r\n\r\n    if (this.isAllSelected()) {\r\n      this.thematics.forEach(thematic => {\r\n        if (this.hasChild(0, thematic)) {\r\n          this.treeControl.expand(thematic);\r\n        }\r\n      });\r\n    } else {\r\n      this.thematics.forEach(thematic => {\r\n        if (this.hasChild(0, thematic)) {\r\n          this.treeControl.collapse(thematic);\r\n        }\r\n      });\r\n    }\r\n    this.thematicChange.emit(selectedThematicsName);\r\n  }\r\n\r\n  selectAll(node?: SpatialFilterThematic) {\r\n    if (!node) {\r\n      this.thematics.forEach(thematic => {\r\n        if (this.groups.indexOf(thematic.name) === -1) {\r\n          this.selectedThematics.select(thematic);\r\n        }\r\n      });\r\n      this.childrens.forEach(children => {\r\n        if (!this.selectedThematics.selected.find(thematic => thematic.source === children.source)) {\r\n          this.selectedThematics.select(children);\r\n        }\r\n      });\r\n    } else {\r\n      if (this.hasChild(0, node)) {\r\n        node.children.forEach(children => this.selectedThematics.select(children));\r\n      }\r\n    }\r\n  }\r\n\r\n  childrensToggle(node: SpatialFilterThematic) {\r\n    this.isAllSelected(node) ?\r\n    node.children.forEach(child => this.selectedThematics.deselect(child)) :\r\n    this.selectAll(node);\r\n\r\n    const selectedThematicsName: SpatialFilterThematic[] = [];\r\n    for (const thematic of this.selectedThematics.selected) {\r\n      selectedThematicsName.push(thematic);\r\n    }\r\n    this.treeControl.expand(node);\r\n    this.thematicChange.emit(selectedThematicsName);\r\n  }\r\n\r\n  /**\r\n   * Apply changes to the thematics selected tree and emit event\r\n   */\r\n  onToggleChange(nodeSelected: SpatialFilterThematic) {\r\n    let selected = false;\r\n    if (this.selectedThematics.selected.find(thematic => thematic.source === nodeSelected.source) !== undefined) {\r\n      selected = true;\r\n    }\r\n\r\n    this.childrens.forEach(children => {\r\n      if (children === nodeSelected && selected === false) {\r\n        this.selectedThematics.select(children);\r\n      }\r\n      if (children === nodeSelected && selected === true) {\r\n        this.selectedThematics.deselect(children);\r\n      }\r\n    });\r\n    this.thematics.forEach(thematic => {\r\n      if (thematic === nodeSelected && selected === false) {\r\n        this.selectedThematics.select(thematic);\r\n      }\r\n      if (thematic === nodeSelected && selected === true) {\r\n        this.selectedThematics.deselect(thematic);\r\n      }\r\n    });\r\n\r\n    const selectedThematicsName: SpatialFilterThematic[] = [];\r\n    for (const thematic of this.selectedThematics.selected) {\r\n      selectedThematicsName.push(thematic);\r\n    }\r\n    this.thematicChange.emit(selectedThematicsName);\r\n  }\r\n\r\n  onDrawControlChange() {\r\n    this.drawControlIsActive = !this.drawControlIsActive;\r\n  }\r\n\r\n  onfreehandControlChange() {\r\n    this.freehandDrawIsActive = !this.freehandDrawIsActive;\r\n    this.freehandControl.emit(this.freehandDrawIsActive);\r\n  }\r\n\r\n  /**\r\n   * Launch search button\r\n   */\r\n  toggleSearchButton() {\r\n    if (this.isPolygon() || this.isPoint()) {\r\n      this.drawZone = this.formControl.value as Feature;\r\n      this.drawZone.meta = {\r\n        id: undefined,\r\n        title: 'Zone'\r\n      };\r\n      this.drawZone.properties = {\r\n        nom: 'Zone'\r\n      };\r\n      this.drawZoneEvent.emit(this.drawZone);\r\n    }\r\n    this.radiusEvent.emit(this.radius);\r\n    this.toggleSearch.emit();\r\n  }\r\n\r\n  /**\r\n   * Launch clear button (clear store and map layers)\r\n   */\r\n  clearButton() {\r\n    this.loading = true;\r\n    this.map.removeLayers(this.layers);\r\n    this.loading = false;\r\n    if (this.store) {\r\n      this.store.clear();\r\n    }\r\n    this.clearButtonEvent.emit([]);\r\n  }\r\n\r\n  /**\r\n   * Launch clear search (clear field if type is predefined)\r\n   */\r\n  clearSearch() {\r\n    this.selectedThematics.clear();\r\n    this.thematicChange.emit([]);\r\n    this.clearSearchEvent.emit();\r\n  }\r\n\r\n  /**\r\n   * Verify conditions of incomplete fields or busy service\r\n   */\r\n  disableSearchButton(): boolean {\r\n    if (this.type === SpatialFilterType.Predefined) {\r\n      if (this.selectedItemType === SpatialFilterItemType.Address) {\r\n        if (this.queryType !== undefined && this.zone !== undefined) {\r\n          return this.loading;\r\n        }\r\n      }\r\n      if (this.selectedItemType === SpatialFilterItemType.Thematics) {\r\n        if (this.queryType !== undefined && this.zone !== undefined && this.selectedThematics.selected.length > 0) {\r\n          return this.loading;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === SpatialFilterType.Polygon || this.type === SpatialFilterType.Point) {\r\n      if (this.selectedItemType === SpatialFilterItemType.Address && this.formControl.value !== null) {\r\n        return this.loading;\r\n      }\r\n      if (this.selectedItemType === SpatialFilterItemType.Thematics) {\r\n        if (this.selectedThematics.selected.length > 0 && this.formControl.value !== null) {\r\n          return this.loading;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Manage radius value at user change\r\n   */\r\n  getRadius() {\r\n    let formValue;\r\n    this.formControl.value !== null ? formValue = this.formControl.value.radius : formValue = undefined;\r\n    if (this.type === SpatialFilterType.Point) {\r\n      if (!this.freehandDrawIsActive) {\r\n        if (this.radiusFormControl.value >= 10000 || this.radiusFormControl.value < 0) {\r\n          this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.radiusAlert'),\r\n            this.languageService.translate.instant('igo.geo.spatialFilter.warning'));\r\n          this.radius = 1000;\r\n          this.radiusFormControl.setValue(this.radius);\r\n          this.drawGuide$.next(this.radius);\r\n          return;\r\n        }\r\n      } else {\r\n        if (this.radiusFormControl.value >= 10000 || this.radiusFormControl.value < 0) {\r\n          this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.radiusAlert'),\r\n            this.languageService.translate.instant('igo.geo.spatialFilter.warning'));\r\n          this.radius = 1000;\r\n          this.radiusFormControl.setValue(this.radius);\r\n          this.drawGuide$.next(this.radius);\r\n          return;\r\n        }\r\n        if (formValue >= 10000) {\r\n          this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.radiusAlert'),\r\n            this.languageService.translate.instant('igo.geo.spatialFilter.warning'));\r\n          this.formControl.reset();\r\n          return;\r\n        }\r\n        if (formValue) {\r\n          if (formValue !== this.radiusFormControl.value) {\r\n            this.radiusFormControl.setValue(formValue);\r\n          }\r\n          this.formControl.value.radius = undefined;\r\n        }\r\n      }\r\n      this.radius = this.radiusFormControl.value;\r\n      this.drawGuide$.next(this.radius);\r\n      this.overlayStyle$.next(this.PointStyle);\r\n      this.drawStyle$.next(this.PointStyle);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatFormFieldModule,\r\n  MatTableModule,\r\n  MatTreeModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MAT_DATE_LOCALE,\r\n  MatCheckboxModule,\r\n  MatTabsModule,\r\n  MatRadioModule,\r\n  MatMenuModule\r\n} from '@angular/material';\r\n\r\nimport {\r\n  MatDatetimepickerModule,\r\n  MatNativeDatetimeModule\r\n} from '@mat-datetimepicker/core';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule,\r\n  IgoKeyValueModule\r\n} from '@igo2/common';\r\nimport { IgoGeometryModule } from './../geometry/geometry.module';\r\n\r\nimport { FilterableDataSourcePipe } from './shared/filterable-datasource.pipe';\r\nimport { IgoLayerModule } from '../layer/layer.module';\r\nimport { TimeFilterButtonComponent } from './time-filter-button/time-filter-button.component';\r\nimport { TimeFilterFormComponent } from './time-filter-form/time-filter-form.component';\r\nimport { TimeFilterItemComponent } from './time-filter-item/time-filter-item.component';\r\nimport { TimeFilterListBindingDirective } from './time-filter-list/time-filter-list-binding.directive';\r\nimport { TimeFilterListComponent } from './time-filter-list/time-filter-list.component';\r\nimport { TimeFilterService } from './shared/time-filter.service';\r\n\r\nimport { OgcFilterFormComponent } from './ogc-filter-form/ogc-filter-form.component';\r\nimport { OgcFilterableFormComponent } from './ogc-filterable-form/ogc-filterable-form.component';\r\nimport { OgcFilterableItemComponent } from './ogc-filterable-item/ogc-filterable-item.component';\r\nimport { OgcFilterableListBindingDirective } from './ogc-filterable-list/ogc-filterable-list-binding.directive';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list/ogc-filterable-list.component';\r\nimport { OgcFilterButtonComponent } from './ogc-filter-button/ogc-filter-button.component';\r\nimport { OGCFilterService } from './shared/ogc-filter.service';\r\nimport { OgcFilterToggleButtonComponent } from './ogc-filter-toggle-button/ogc-filter-toggle-button.component';\r\n\r\nimport { SpatialFilterTypeComponent } from './spatial-filter/spatial-filter-type/spatial-filter-type.component';\r\nimport { SpatialFilterListComponent } from './spatial-filter/spatial-filter-list/spatial-filter-list.component';\r\nimport { SpatialFilterItemComponent } from './spatial-filter/spatial-filter-item/spatial-filter-item.component';\r\nimport { SpatialFilterService } from './shared/spatial-filter.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatRadioModule,\r\n    MatMenuModule,\r\n    MatTableModule,\r\n    MatTreeModule,\r\n    MatButtonToggleModule,\r\n    MatCheckboxModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatDatetimepickerModule,\r\n    MatNativeDatetimeModule,\r\n    IgoLanguageModule,\r\n    IgoLayerModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoKeyValueModule,\r\n    IgoGeometryModule\r\n  ],\r\n  exports: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterButtonComponent,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterToggleButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective,\r\n    SpatialFilterTypeComponent,\r\n    SpatialFilterListComponent,\r\n    SpatialFilterItemComponent\r\n  ],\r\n  declarations: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterButtonComponent,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterToggleButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective,\r\n    SpatialFilterTypeComponent,\r\n    SpatialFilterListComponent,\r\n    SpatialFilterItemComponent\r\n  ],\r\n  providers: [TimeFilterService, OGCFilterService, SpatialFilterService]\r\n})\r\nexport class IgoFilterModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoFilterModule,\r\n      providers: [\r\n        {\r\n          provide: MAT_DATE_LOCALE,\r\n          useValue: 'fr'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","export class ExportError extends Error {}\r\n\r\nexport class ExportInvalidFileError extends ExportError {\r\n  constructor() {\r\n    super('Invalid file');\r\n    Object.setPrototypeOf(this, ExportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ExportNothingToExportError extends ExportError {\r\n  constructor() {\r\n    super('Nothing to export');\r\n    Object.setPrototypeOf(this, ExportNothingToExportError.prototype);\r\n  }\r\n}\r\n","import {\r\n  getEntityProperty,\r\n  EntityTableColumn,\r\n  EntityTableColumnRenderer\r\n} from '@igo2/common';\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\nimport { downloadContent } from '@igo2/utils';\r\n\r\nimport { ExportNothingToExportError } from './export.errors';\r\n\r\nexport function handleFileExportError(\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  if (error instanceof ExportNothingToExportError) {\r\n    handleNothingToExportError(messageService, languageService);\r\n    return;\r\n  }\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.failed.title');\r\n  const message = translate.instant('igo.geo.export.failed.text');\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToExportError(\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.nothing.title');\r\n  const message = translate.instant('igo.geo.export.nothing.text');\r\n  messageService.error(message, title);\r\n}\r\n\r\n/**\r\n * Export array to CSV\r\n *\r\n * @param rows Array of arrays to export as CSV\r\n * @param separator Cell separator\r\n */\r\nexport function exportToCSV(rows: any[][], fileName: string, separator: string = ';') {\r\n  const lines = rows.map((row: any[][], index: number) => row.join(separator));\r\n  const csvContent = lines.join('\\n');\r\n  downloadContent(csvContent, 'text/csv;charset=utf-8', fileName);\r\n}\r\n\r\n/**\r\n * Return an array of values from an array of entities.\r\n *\r\n * @param entities Array of entities\r\n * @param scolumns Columns definition of the output data\r\n */\r\nexport function entitiesToRowData(entities: object[], columns: EntityTableColumn[]) {\r\n  return entities.map((entity: object) => {\r\n    return columns.map((column: EntityTableColumn) => {\r\n      let valueAccessor;\r\n      if (column.renderer === undefined || column.renderer === EntityTableColumnRenderer.Default) {\r\n        valueAccessor = column.valueAccessor;\r\n      }\r\n      valueAccessor = valueAccessor ? valueAccessor : getEntityProperty;\r\n      return valueAccessor(entity, column.name);\r\n    });\r\n  });\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const ExportFormat = strEnum(['GeoJSON', 'GML', 'GPX', 'KML', 'Shapefile', 'CSV']);\r\nexport type ExportFormat = keyof typeof ExportFormat;\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { downloadContent } from '@igo2/utils';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { ExportFormat } from './export.type';\r\nimport {\r\n  ExportInvalidFileError,\r\n  ExportNothingToExportError\r\n} from './export.errors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportService {\r\n  static ogreFormats = {\r\n    GML: 'gml',\r\n    GPX: 'gpx',\r\n    KML: 'kml',\r\n    Shapefile: 'ESRI Shapefile',\r\n    CSV: 'CSV'\r\n  };\r\n\r\n  static noOgreFallbacks = ['GML', 'GPX', 'KML'];\r\n\r\n  private ogreUrl: string;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n  }\r\n\r\n  export(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn = 'EPSG:4326',\r\n    projectionOut = 'EPSG:4326'\r\n  ): Observable<void> {\r\n    const exportOlFeatures = olFeatures.map((olFeature: OlFeature) => {\r\n      const keys = olFeature\r\n        .getKeys()\r\n        .filter((key: string) => !key.startsWith('_'));\r\n      const properties = keys.reduce(\r\n        (acc: object, key: string) => {\r\n          acc[key] = olFeature.get(key);\r\n          return acc;\r\n        },\r\n        { geometry: olFeature.getGeometry() }\r\n      );\r\n      return new OlFeature(properties);\r\n    });\r\n\r\n    return this.exportAsync(\r\n      exportOlFeatures,\r\n      format,\r\n      title,\r\n      projectionIn,\r\n      projectionOut\r\n    );\r\n  }\r\n\r\n  private exportAsync(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Observable<void> {\r\n    const doExport = (observer: Observer<void>) => {\r\n      const nothingToExport = this.nothingToExport(olFeatures, format);\r\n      if (nothingToExport === true) {\r\n        observer.error(new ExportNothingToExportError());\r\n        return;\r\n      }\r\n\r\n      const ogreFormats = Object.keys(ExportService.ogreFormats);\r\n      if (ogreFormats.indexOf(format) >= 0) {\r\n        if (this.ogreUrl === undefined) {\r\n          if (ExportService.noOgreFallbacks.indexOf(format) >= 0) {\r\n            this.exportToFile(\r\n              olFeatures,\r\n              observer,\r\n              format,\r\n              title,\r\n              projectionIn,\r\n              projectionOut\r\n            );\r\n          } else {\r\n            observer.error(new ExportInvalidFileError());\r\n          }\r\n          return;\r\n        }\r\n        this.exportWithOgre(\r\n          olFeatures,\r\n          observer,\r\n          format,\r\n          title,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n      } else {\r\n        this.exportToFile(\r\n          olFeatures,\r\n          observer,\r\n          format,\r\n          title,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n      }\r\n    };\r\n\r\n    return new Observable(doExport);\r\n  }\r\n\r\n  private exportToFile(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const olFormat = new olformat[format]();\r\n    const featuresText = olFormat.writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const fileName = `${title}.${format.toLowerCase()}`;\r\n\r\n    downloadContent(featuresText, 'text/plain;charset=utf-8', fileName);\r\n    observer.complete();\r\n  }\r\n\r\n  private exportWithOgre(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: string,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const featuresText = new olformat.GeoJSON().writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const url = `${this.ogreUrl}/convertJson`;\r\n    const form = document.createElement('form');\r\n    form.setAttribute('method', 'post');\r\n    form.setAttribute('target', '_blank');\r\n    form.setAttribute('action', url);\r\n    form.acceptCharset = 'UTF-8';\r\n    form.enctype = 'application/x-www-form-urlencoded; charset=utf-8;';\r\n\r\n    const geojsonField = document.createElement('input');\r\n    geojsonField.setAttribute('type', 'hidden');\r\n    geojsonField.setAttribute('name', 'json');\r\n    geojsonField.setAttribute('value', featuresText);\r\n    form.appendChild(geojsonField);\r\n\r\n    const outputNameField = document.createElement('input');\r\n    const outputName =\r\n      format === 'Shapefile'\r\n        ? `${title}.zip`\r\n        : `${title}.${format.toLowerCase()}`;\r\n    outputNameField.setAttribute('type', 'hidden');\r\n    outputNameField.setAttribute('name', 'outputName');\r\n    outputNameField.setAttribute('value', outputName);\r\n    form.appendChild(outputNameField);\r\n\r\n    const ogreFormat = ExportService.ogreFormats[format];\r\n    const outputFormatField = document.createElement('input');\r\n    outputFormatField.setAttribute('type', 'hidden');\r\n    outputFormatField.setAttribute('name', 'format');\r\n    outputFormatField.setAttribute('value', ogreFormat);\r\n    form.appendChild(outputFormatField);\r\n\r\n    document.body.appendChild(form);\r\n    form.submit();\r\n    document.body.removeChild(form);\r\n\r\n    observer.complete();\r\n  }\r\n\r\n  private nothingToExport(olFeatures: OlFeature[], format: string): boolean {\r\n    if (olFeatures.length === 0) {\r\n      return true;\r\n    }\r\n    if (format === 'GPX') {\r\n      const pointOrLine = olFeatures.find(olFeature => {\r\n        return (\r\n          ['Point', 'LineString'].indexOf(olFeature.getGeometry().getType()) >=\r\n          0\r\n        );\r\n      });\r\n      return pointOrLine === undefined;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","export class ImportError extends Error {}\r\n\r\nexport class ImportInvalidFileError extends ImportError {\r\n  constructor() {\r\n    super('Invalid file');\r\n    Object.setPrototypeOf(this, ImportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportUnreadableFileError extends ImportError {\r\n  constructor() {\r\n      super('Failed to read file');\r\n      Object.setPrototypeOf(this, ImportUnreadableFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportNothingToImportError extends ImportError {\r\n  constructor() {\r\n      super('Nothing to import');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportSizeError extends ImportError {\r\n  constructor() {\r\n      super('File is too large');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportSRSError extends ImportError {\r\n  constructor() {\r\n      super('Invalid SRS definition');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n","import * as olStyle from 'ol/style';\r\n\r\nimport { MessageService, LanguageService, ConfigService } from '@igo2/core';\r\n\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { FeatureDataSourceOptions } from '../../datasource/shared/datasources/feature-datasource.interface';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { featureToOl, moveToOlFeatures } from '../../feature/shared/feature.utils';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { QueryableDataSourceOptions } from '../../query/shared/query.interfaces';\r\nimport { StyleService } from '../../layer/shared/style.service';\r\nimport { StyleByAttribute } from '../../layer/shared/vector-style.interface';\r\nimport { StyleListService } from '../style-list/style-list.service';\r\nimport { ClusterParam } from '../../layer/shared/clusterParam';\r\nimport { ClusterDataSource } from '../../datasource/shared/datasources/cluster-datasource';\r\nimport { ClusterDataSourceOptions } from '../../datasource/shared/datasources/cluster-datasource.interface';\r\n\r\nexport function addLayerAndFeaturesToMap(features: Feature[], map: IgoMap, layerTitle: string): VectorLayer {\r\n  const olFeatures = features.map((feature: Feature) => featureToOl(feature, map.projection));\r\n\r\n  const r = Math.floor(Math.random() * 255);\r\n  const g = Math.floor(Math.random() * 255);\r\n  const b = Math.floor(Math.random() * 255);\r\n  const stroke = new olStyle.Stroke({\r\n    color: [r, g, b, 1],\r\n    width: 2\r\n  });\r\n\r\n  const fill = new olStyle.Fill({\r\n    color: [r, g, b, 0.4]\r\n  });\r\n  const sourceOptions: FeatureDataSourceOptions & QueryableDataSourceOptions = {\r\n    queryable: true\r\n  };\r\n  const source = new FeatureDataSource(sourceOptions);\r\n  source.ol.addFeatures(olFeatures);\r\n  const layer = new VectorLayer({\r\n    title: layerTitle,\r\n    source,\r\n    style: new olStyle.Style({\r\n      stroke,\r\n      fill,\r\n      image: new olStyle.Circle({\r\n        radius: 5,\r\n        stroke,\r\n        fill\r\n      })\r\n    })\r\n  });\r\n  map.addLayer(layer);\r\n  moveToOlFeatures(map, olFeatures);\r\n\r\n  return layer;\r\n}\r\n\r\nexport function addLayerAndFeaturesStyledToMap(features: Feature[], map: IgoMap, layerTitle: string,\r\n                                               styleListService: StyleListService, styleService: StyleService): VectorLayer {\r\n  const olFeatures = features.map((feature: Feature) => featureToOl(feature, map.projection));\r\n  let style;\r\n  let distance: number;\r\n\r\n  if (styleListService.getStyleList(layerTitle.toString() + '.styleByAttribute')) {\r\n    const styleByAttribute: StyleByAttribute = styleListService.getStyleList(layerTitle.toString() + '.styleByAttribute');\r\n\r\n    style = feature => {\r\n      return styleService.createStyleByAttribute(\r\n        feature,\r\n        styleByAttribute\r\n      );\r\n    };\r\n\r\n  } else if (styleListService.getStyleList(layerTitle.toString() + '.clusterStyle')) {\r\n    const clusterParam: ClusterParam = styleListService.getStyleList(layerTitle.toString() + '.clusterParam');\r\n    distance = styleListService.getStyleList(layerTitle.toString() + '.distance');\r\n\r\n    const baseStyle = styleService.createStyle(styleListService.getStyleList(layerTitle.toString() + '.clusterStyle'));\r\n\r\n    style = feature => {\r\n      return styleService.createClusterStyle(\r\n        feature,\r\n        clusterParam,\r\n        baseStyle\r\n      );\r\n    };\r\n\r\n  } else if (styleListService.getStyleList(layerTitle.toString() + '.style')) {\r\n\r\n    style = styleService.createStyle(styleListService.getStyleList(layerTitle.toString() + '.style'));\r\n\r\n  } else {\r\n\r\n    style = styleService.createStyle(styleListService.getStyleList('default.style'));\r\n\r\n  }\r\n  let source;\r\n\r\n  if (styleListService.getStyleList(layerTitle.toString() + '.clusterStyle')) {\r\n    const sourceOptions: ClusterDataSourceOptions & QueryableDataSourceOptions = {\r\n      distance,\r\n      type: 'cluster',\r\n      queryable: true\r\n    };\r\n    source = new ClusterDataSource(sourceOptions);\r\n    source.ol.source.addFeatures(olFeatures);\r\n  } else {\r\n    const sourceOptions: FeatureDataSourceOptions & QueryableDataSourceOptions = {\r\n      queryable: true\r\n    };\r\n    source = new FeatureDataSource(sourceOptions);\r\n    source.ol.addFeatures(olFeatures);\r\n  }\r\n\r\n  const layer = new VectorLayer({\r\n    title: layerTitle,\r\n    source,\r\n    style\r\n  });\r\n  map.addLayer(layer);\r\n  moveToOlFeatures(map, olFeatures);\r\n\r\n  return layer;\r\n}\r\n\r\nexport function handleFileImportSuccess(\r\n  file: File,\r\n  features: Feature[],\r\n  map: IgoMap,\r\n  messageService: MessageService,\r\n  languageService: LanguageService,\r\n  styleListService?: StyleListService,\r\n  styleService?: StyleService\r\n) {\r\n  if (features.length === 0) {\r\n    handleNothingToImportError(file, messageService, languageService);\r\n    return;\r\n  }\r\n\r\n  const layerTitle = computeLayerTitleFromFile(file);\r\n\r\n  if (!styleListService) {\r\n    addLayerAndFeaturesToMap(features, map, layerTitle);\r\n  } else {\r\n    addLayerAndFeaturesStyledToMap(features, map, layerTitle, styleListService, styleService);\r\n  }\r\n\r\n  const translate = languageService.translate;\r\n  const messageTitle = translate.instant('igo.geo.dropGeoFile.success.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.success.text', {\r\n      value: layerTitle\r\n  });\r\n  messageService.success(message, messageTitle);\r\n}\r\n\r\nexport function handleFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const errMapping = {\r\n    'Invalid file': handleInvalidFileImportError,\r\n    'File is too large': handleSizeFileImportError,\r\n    'Failed to read file': handleUnreadbleFileImportError,\r\n    'Invalid SRS definition': handleSRSImportError\r\n  };\r\n  errMapping[error.message](file, error, messageService, languageService);\r\n}\r\n\r\nexport function handleInvalidFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.invalid.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.invalid.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleUnreadbleFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.unreadable.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.unreadable.text', {\r\n      value: file.name\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleSizeFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.tooLarge.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.tooLarge.text', {\r\n      value: file.name\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToImportError(\r\n  file: File,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.empty.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.empty.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleSRSImportError(\r\n  file: File,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.invalidSRS.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.invalidSRS.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function getFileExtension(file: File): string {\r\n  return file.name.split('.').pop().toLowerCase();\r\n}\r\n\r\nexport function computeLayerTitleFromFile(file: File): string {\r\n  return file.name.substr(0, file.name.lastIndexOf('.'));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport {\r\n  ImportInvalidFileError,\r\n  ImportUnreadableFileError,\r\n  ImportSizeError,\r\n  ImportSRSError\r\n} from './import.errors';\r\nimport { computeLayerTitleFromFile, getFileExtension } from './import.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImportService {\r\n  static allowedMimeTypes = [\r\n    'application/gml+xml',\r\n    'application/vnd.google-earth.kml+xml',\r\n    'application/gpx+xml',\r\n    'application/json'\r\n  ];\r\n\r\n  static allowedZipMimeTypes = [\r\n    'application/zip',\r\n    'application/x-zip-compressed',\r\n    'application/x-zip'\r\n  ];\r\n\r\n  static allowedExtensions = ['geojson', 'kml', 'gpx', 'json', 'gml'];\r\n\r\n  private ogreUrl: string;\r\n\r\n  constructor(private http: HttpClient, private config: ConfigService) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n  }\r\n\r\n  import(\r\n    file: File,\r\n    projectionIn = 'EPSG:4326',\r\n    projectionOut = 'EPSG:4326'\r\n  ): Observable<Feature[]> {\r\n    return this.importAsync(file, projectionIn, projectionOut);\r\n  }\r\n\r\n  private getFileImporter(\r\n    file: File\r\n  ): (\r\n    file: File,\r\n    observer: Observer<Feature[]>,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) => void {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n    const allowedMimeTypes = [\r\n      ...ImportService.allowedMimeTypes,\r\n      ...ImportService.allowedZipMimeTypes\r\n    ];\r\n    const allowedExtensions = ImportService.allowedExtensions;\r\n\r\n    if (\r\n      allowedMimeTypes.indexOf(mimeType) < 0 &&\r\n      allowedExtensions.indexOf(extension) < 0\r\n    ) {\r\n      return undefined;\r\n    } else if (\r\n      mimeType === 'application/json' ||\r\n      ['json', 'geojson', 'kml', 'gpx'].indexOf(extension) >= 0\r\n    ) {\r\n      return this.importFile;\r\n    } else if (this.ogreUrl !== undefined) {\r\n      return this.importFileWithOgre;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private importAsync(\r\n    file: File,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Observable<Feature[]> {\r\n    const doImport = (observer: Observer<Feature[]>) => {\r\n      if (file.size >= 30000000) {\r\n        observer.error(new ImportSizeError());\r\n        return;\r\n      }\r\n      const importer = this.getFileImporter(file);\r\n      if (importer === undefined) {\r\n        observer.error(new ImportInvalidFileError());\r\n        return;\r\n      }\r\n\r\n      importer.call(this, file, observer, projectionIn, projectionOut);\r\n    };\r\n\r\n    return new Observable(doImport);\r\n  }\r\n\r\n  private importFile(\r\n    file: File,\r\n    observer: Observer<Feature[]>,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event: any) => {\r\n      try {\r\n        const features = this.parseFeaturesFromFile(\r\n          file,\r\n          event.target.result,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n        observer.next(features);\r\n      } catch (e) {\r\n        observer.error(new ImportUnreadableFileError());\r\n      }\r\n\r\n      observer.complete();\r\n    };\r\n\r\n    reader.onerror = evt => {\r\n      observer.error(new ImportUnreadableFileError());\r\n    };\r\n\r\n    reader.readAsText(file, 'UTF-8');\r\n  }\r\n\r\n  private importFileWithOgre(\r\n    file: File,\r\n    observer: Observer<Feature[]>,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const url = `${this.ogreUrl}/convert`;\r\n    const formData = new FormData();\r\n    formData.append('upload', file);\r\n    formData.append('sourceSrs', projectionIn);\r\n    formData.append('targetSrs', projectionOut);\r\n    formData.append('formatOutput', 'GEOJSON');\r\n    formData.append('skipFailures', '');\r\n\r\n    this.http.post(url, formData, { headers: new HttpHeaders() }).subscribe(\r\n      (response: { errors?: string[] } | object | null) => {\r\n        if (response === null) {\r\n          observer.error(new ImportUnreadableFileError());\r\n          return;\r\n        }\r\n\r\n        const errors = (response as any).errors || [];\r\n        if (errors.length > 0) {\r\n          observer.error(new ImportUnreadableFileError());\r\n        } else {\r\n          const features = this.parseFeaturesFromGeoJSON(\r\n            file,\r\n            response,\r\n            projectionOut\r\n          );\r\n          observer.next(features);\r\n          observer.complete();\r\n        }\r\n      },\r\n      (error: any) => {\r\n        error.error.caught = true;\r\n        const errMsg = error.error.msg || '';\r\n        if (errMsg === 'No valid files found') {\r\n          observer.error(new ImportInvalidFileError());\r\n        } else if (\r\n          errMsg.startWith('ERROR 1: Failed to process SRS definition')\r\n        ) {\r\n          observer.error(new ImportSRSError());\r\n        } else {\r\n          observer.error(new ImportUnreadableFileError());\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  private parseFeaturesFromFile(\r\n    file: File,\r\n    data: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Feature[] {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n\r\n    const GeoJSON = new olformat.GeoJSON();\r\n\r\n    let format;\r\n    if (mimeType === 'application/vnd.google-earth.kml+xml') {\r\n      format = new olformat.KML();\r\n    } else if (mimeType === 'application/gml+xml') {\r\n      format = new olformat.GML();\r\n    } else if (mimeType === 'application/gpx+xml') {\r\n      format = new olformat.GPX();\r\n    } else {\r\n      switch (extension) {\r\n        case 'kml':\r\n          format = new olformat.KML();\r\n          break;\r\n        case 'gpx':\r\n          format = new olformat.GPX();\r\n          break;\r\n        case 'gml':\r\n          format = new olformat.GML();\r\n          break;\r\n        default:\r\n          format = GeoJSON;\r\n          break;\r\n      }\r\n    }\r\n\r\n    const olFeatures = format.readFeatures(data, {\r\n      dataProjection: projectionIn,\r\n      featureProjection: projectionOut\r\n    });\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(GeoJSON.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n\r\n  private parseFeaturesFromGeoJSON(\r\n    file: File,\r\n    data: object,\r\n    projectionOut: string\r\n  ): Feature[] {\r\n    const olFormat = new olformat.GeoJSON();\r\n    const olFeatures = olFormat.readFeatures(data);\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(olFormat.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { StyleListOptions } from './style-list.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleListService {\r\n  private styleList: object = {};\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  /**\r\n   * Use to get the data found in styleList file\r\n   */\r\n  public getStyleList(key: string): any {\r\n    return ObjectUtils.resolve(this.styleList, key);\r\n  }\r\n\r\n  /**\r\n   * This method loads \"[path]\" to get all styleList's variables\r\n   */\r\n  public load(options: StyleListOptions) {\r\n    const baseStyleList = options.default || {};\r\n    if (!options.path) {\r\n      this.styleList = baseStyleList;\r\n      return true;\r\n    }\r\n\r\n    const http = this.injector.get(HttpClient);\r\n\r\n    return new Promise((resolve, _reject) => {\r\n      http\r\n        .get(options.path)\r\n        .pipe(\r\n          catchError((error: any): any => {\r\n            console.log(`StyleList file ${options.path} could not be read`);\r\n            resolve(true);\r\n            return throwError(error.error || 'Server error');\r\n          })\r\n        )\r\n        .subscribe(styleListResponse => {\r\n          this.styleList = ObjectUtils.mergeDeep(baseStyleList, styleListResponse);\r\n          resolve(true);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService, ConfigService } from '@igo2/core';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { ClusterDataSource } from '../../datasource/shared/datasources/cluster-datasource';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\n\r\nimport { handleFileExportError } from '../shared/export.utils';\r\nimport { ExportOptions } from '../shared/export.interface';\r\nimport { ExportFormat } from '../shared/export.type';\r\nimport { ExportService } from '../shared/export.service';\r\nimport { ImportService } from '../shared/import.service';\r\nimport {\r\n  handleFileImportSuccess,\r\n  handleFileImportError\r\n} from '../shared/import.utils';\r\nimport { StyleService } from '../../layer/shared/style.service';\r\nimport { StyleListService } from '../style-list/style-list.service';\r\n\r\n@Component({\r\n  selector: 'igo-import-export',\r\n  templateUrl: './import-export.component.html',\r\n  styleUrls: ['./import-export.component.scss']\r\n})\r\nexport class ImportExportComponent implements OnDestroy, OnInit {\r\n  public form: FormGroup;\r\n  public formats = ExportFormat;\r\n  public layers: VectorLayer[];\r\n  public inputProj: string = 'EPSG:4326';\r\n  public loading$ = new BehaviorSubject(false);\r\n\r\n  private layers$$: Subscription;\r\n\r\n  private espgCodeRegex = new RegExp('^\\\\d{4,6}');\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  constructor(\r\n    private importService: ImportService,\r\n    private exportService: ExportService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private styleListService: StyleListService,\r\n    private styleService: StyleService,\r\n    private formBuilder: FormBuilder,\r\n    private config: ConfigService\r\n  ) {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(layers => {\r\n      this.layers = layers.filter((layer: Layer) => {\r\n        return layer instanceof VectorLayer && layer.exportable === true;\r\n      }) as VectorLayer[];\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  importFiles(files: File[]) {\r\n    let inputProj = this.inputProj;\r\n    if (this.espgCodeRegex.test(inputProj)) {\r\n      inputProj = `EPSG:${inputProj}`;\r\n    }\r\n\r\n    this.loading$.next(true);\r\n    for (const file of files) {\r\n      this.importService.import(file, inputProj).subscribe(\r\n        (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n        (error: Error) => this.onFileImportError(file, error),\r\n        () => {\r\n          this.loading$.next(false);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleExportFormSubmit(data: ExportOptions) {\r\n    this.loading$.next(true);\r\n    const layer = this.map.getLayerById(data.layer);\r\n    let olFeatures = layer.dataSource.ol.getFeatures();\r\n    if (layer.dataSource instanceof ClusterDataSource) {\r\n      olFeatures = olFeatures.flatMap((cluster: any) => cluster.get('features'));\r\n    }\r\n    this.exportService\r\n      .export(olFeatures, data.format, layer.title, this.map.projection)\r\n      .subscribe(\r\n        () => {},\r\n        (error: Error) => this.onFileExportError(error),\r\n        () => {\r\n          this.loading$.next(false);\r\n        }\r\n      );\r\n  }\r\n\r\n  private buildForm() {\r\n    this.form = this.formBuilder.group({\r\n      format: ['', [Validators.required]],\r\n      layer: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    if (!this.config.getConfig('importWithStyle')) {\r\n    handleFileImportSuccess(\r\n      file,\r\n      features,\r\n      this.map,\r\n      this.messageService,\r\n      this.languageService\r\n    );\r\n    } else {\r\n      handleFileImportSuccess(\r\n        file,\r\n        features,\r\n        this.map,\r\n        this.messageService,\r\n        this.languageService,\r\n        this.styleListService,\r\n        this.styleService\r\n      );\r\n    }\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    this.loading$.next(false);\r\n    handleFileImportError(\r\n      file,\r\n      error,\r\n      this.messageService,\r\n      this.languageService\r\n    );\r\n  }\r\n\r\n  private onFileExportError(error: Error) {\r\n    this.loading$.next(false);\r\n    handleFileExportError(error, this.messageService, this.languageService);\r\n  }\r\n}\r\n","import { Directive, HostListener, EventEmitter, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService, ConfigService } from '@igo2/core';\r\nimport { DragAndDropDirective } from '@igo2/common';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { ImportService } from './import.service';\r\nimport { handleFileImportSuccess, handleFileImportError } from '../shared/import.utils';\r\nimport { StyleService } from '../../layer/shared/style.service';\r\nimport { StyleListService } from '../style-list/style-list.service';\r\n\r\n@Directive({\r\n  selector: '[igoDropGeoFile]'\r\n})\r\nexport class DropGeoFileDirective extends DragAndDropDirective implements OnInit, OnDestroy {\r\n\r\n  protected filesDropped: EventEmitter<File[]> = new EventEmitter();\r\n  protected filesInvalid: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  private filesDropped$$: Subscription;\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    private component: MapBrowserComponent,\r\n    private importService: ImportService,\r\n    private languageService: LanguageService,\r\n    private styleListService: StyleListService,\r\n    private styleService: StyleService,\r\n    private config: ConfigService,\r\n    private messageService: MessageService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filesDropped$$ = this.filesDropped.subscribe((files: File[]) => {\r\n      this.onFilesDropped(files);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.filesDropped$$.unsubscribe();\r\n  }\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(evt) {\r\n    super.onDragOver(evt);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(evt) {\r\n    super.onDragLeave(evt);\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(evt) {\r\n    super.onDrop(evt);\r\n  }\r\n\r\n  private onFilesDropped(files: File[]) {\r\n    for (const file of files) {\r\n      this.importService\r\n        .import(file)\r\n        .subscribe(\r\n          (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n          (error: Error) => this.onFileImportError(file, error)\r\n        );\r\n    }\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    if (!this.config.getConfig('importWithStyle')) {\r\n      handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);\r\n    } else {\r\n      handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService,\r\n                               this.styleListService, this.styleService);\r\n    }\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    handleFileImportError(file, error, this.messageService, this.languageService);\r\n  }\r\n}\r\n","import { APP_INITIALIZER, InjectionToken } from '@angular/core';\r\n\r\nimport { StyleListService } from './style-list.service';\r\nimport { StyleListOptions } from './style-list.interface';\r\n\r\nexport let STYLELIST_OPTIONS = new InjectionToken<StyleListOptions>('styleListOptions');\r\n\r\nexport function provideStyleListOptions(options: StyleListOptions) {\r\n  return {\r\n    provide: STYLELIST_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\nexport function styleListFactory(\r\n  styleListService: StyleListService,\r\n  options: StyleListOptions\r\n) {\r\n  return () => styleListService.load(options);\r\n}\r\n\r\nexport function provideStyleListLoader() {\r\n  return {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: styleListFactory,\r\n    multi: true,\r\n    deps: [StyleListService, STYLELIST_OPTIONS]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { provideStyleListOptions, provideStyleListLoader } from './style-list.provider';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoStyleListModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoStyleListModule,\r\n      providers: [provideStyleListOptions({}), provideStyleListLoader()]\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatButtonModule,\r\n  MatTabsModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule, IgoDrapDropModule, IgoSpinnerModule } from '@igo2/common';\r\n\r\nimport { ImportExportComponent } from './import-export/import-export.component';\r\nimport { DropGeoFileDirective } from './shared/drop-geo-file.directive';\r\nimport { IgoStyleListModule } from './style-list/style-list.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoSpinnerModule,\r\n    IgoKeyValueModule,\r\n    IgoDrapDropModule,\r\n    IgoStyleListModule.forRoot()\r\n  ],\r\n  exports: [ImportExportComponent, DropGeoFileDirective, IgoStyleListModule],\r\n  declarations: [ImportExportComponent, DropGeoFileDirective]\r\n})\r\nexport class IgoImportExportModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoImportExportModule\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoConfirmDialogModule } from '@igo2/common';\r\n\r\nimport { MapBrowserComponent } from './map-browser/map-browser.component';\r\nimport { ZoomButtonComponent } from './zoom-button/zoom-button.component';\r\nimport { GeolocateButtonComponent } from './geolocate-button/geolocate-button.component';\r\nimport { RotationButtonComponent } from './rotation-button/rotation-button.component';\r\nimport { BaseLayersSwitcherComponent } from './baselayers-switcher/baselayers-switcher.component';\r\nimport { MiniBaseMapComponent } from './baselayers-switcher/mini-basemap.component';\r\nimport { MapOfflineDirective } from './shared/mapOffline.directive';\r\nimport { OfflineButtonComponent } from './offline-button/offline-button.component';\r\nimport { PointerPositionDirective } from './shared/map-pointer-position.directive';\r\nimport { PointerPositionByKeyDirective } from './shared/map-pointer-position-by-key.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoLanguageModule,\r\n    IgoConfirmDialogModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule\r\n  ],\r\n  exports: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapOfflineDirective,\r\n    OfflineButtonComponent,\r\n    PointerPositionDirective,\r\n    PointerPositionByKeyDirective\r\n  ],\r\n  declarations: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapOfflineDirective,\r\n    OfflineButtonComponent,\r\n    PointerPositionDirective,\r\n    PointerPositionByKeyDirective\r\n  ]\r\n})\r\nexport class IgoMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit\r\n} from '../shared/measure.enum';\r\nimport { computeBestAreaUnit, computeBestLengthUnit } from '../shared/measure.utils';\r\n\r\n/**\r\n * Measurer item\r\n */\r\n@Component({\r\n  selector: 'igo-measurer-item',\r\n  templateUrl: './measurer-item.component.html',\r\n  styleUrls: ['./measurer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerItemComponent implements OnDestroy {\r\n\r\n  /**\r\n   * Measure observable\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<number> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the measure observable when the auto mode is on\r\n   * @internal\r\n   */\r\n  public measure$$: Subscription;\r\n\r\n  /**\r\n   * Measure type\r\n   */\r\n  @Input() measureType: MeasureType;\r\n\r\n  /**\r\n   * Measure unit\r\n   */\r\n  @Input() measureUnit: MeasureAreaUnit | MeasureLengthUnit;\r\n\r\n  /**\r\n   * Measure\r\n   */\r\n  @Input()\r\n  set measure(value: number) {\r\n    this.measure$.next(value);\r\n  }\r\n  get measure(): number { return this.measure$.value; }\r\n\r\n  /**\r\n   * Whther measure units should be automatically determined\r\n   */\r\n  @Input()\r\n  set auto(value: boolean) { this.toggleAutoUnit(value); }\r\n  get auto(): boolean { return this._auto; }\r\n  private _auto: boolean = false;\r\n\r\n  /**\r\n   * Placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Event emitted when the measure unit changes\r\n   */\r\n  @Output() measureUnitChange = new EventEmitter<MeasureAreaUnit | MeasureLengthUnit>();\r\n\r\n  /**\r\n   * Available measure units for the measure type given\r\n   * @internal\r\n   */\r\n  get measureUnits(): string[] {\r\n    if (this.measureType === MeasureType.Area) {\r\n      return Object.values(MeasureAreaUnit);\r\n    }\r\n    return Object.values(MeasureLengthUnit);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Toggle the auto unit off\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.toggleAutoUnit(false);\r\n  }\r\n\r\n  /**\r\n   * Set the measure unit\r\n   * @internal\r\n   */\r\n  onMeasureUnitChange(unit: MeasureAreaUnit | MeasureLengthUnit) {\r\n    this.measureUnit = unit;\r\n    this.measureUnitChange.emit(unit);\r\n  }\r\n\r\n  private toggleAutoUnit(toggle: boolean) {\r\n    if (this.measure$$ !== undefined) {\r\n      this.measure$$.unsubscribe();\r\n    }\r\n    if (toggle === true) {\r\n      this.measure$$ = this.measure$.subscribe((measure: number) => {\r\n        this.computeBestMeasureUnit(measure);\r\n      });\r\n    }\r\n    this._auto = toggle;\r\n  }\r\n\r\n  private computeBestMeasureUnit(measure: number) {\r\n    let measureUnit = this.measureUnit;\r\n    if (this.measureType === MeasureType.Area) {\r\n      measureUnit = computeBestAreaUnit(measure);\r\n    } else if (this.measureType === MeasureType.Length) {\r\n      measureUnit = computeBestLengthUnit(measure);\r\n    }\r\n    if (measureUnit !== this.measureUnit) {\r\n      this.onMeasureUnitChange(measureUnit);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSelectModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoEntityTableModule } from '@igo2/common';\r\n\r\nimport { MeasureFormatPipe } from './measure-format.pipe';\r\nimport { MeasurerItemComponent } from './measurer-item.component';\r\nimport { MeasurerComponent } from './measurer.component';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoEntityTableModule\r\n  ],\r\n  declarations: [\r\n    MeasureFormatPipe,\r\n    MeasurerItemComponent,\r\n    MeasurerComponent,\r\n    MeasurerDialogComponent\r\n  ],\r\n  exports: [\r\n    MeasureFormatPipe,\r\n    MeasurerComponent\r\n  ],\r\n  entryComponents: [\r\n    MeasurerDialogComponent\r\n  ]\r\n})\r\nexport class IgoMeasurerModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { IgoMeasurerModule } from './measurer/measurer.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoMeasurerModule\r\n  ]\r\n})\r\nexport class IgoMeasureModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { OverlayDirective } from './shared/overlay.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [OverlayDirective],\r\n  declarations: [OverlayDirective]\r\n})\r\nexport class IgoOverlayModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoOverlayModule\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { saveAs } from 'file-saver';\r\nimport * as jsPDF from 'jspdf';\r\nimport * as _html2canvas from 'html2canvas';\r\nimport * as JSZip from 'jszip';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { MessageService, ActivityService, LanguageService } from '@igo2/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { formatScale } from '../../map/shared/map.utils';\r\nimport { OutputLayerLegend } from '../../layer/shared/layers/layer.interface';\r\nimport { getLayersLegends } from '../../layer/utils/outputLegend';\r\n\r\nimport { PrintOptions } from './print.interface';\r\n\r\nconst html2canvas = _html2canvas;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrintService {\r\n  zipFile: JSZip;\r\n  nbFileToProcess: number;\r\n  activityId: string;\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private activityService: ActivityService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  print(map: IgoMap, options: PrintOptions): Subject<any> {\r\n    const status$ = new Subject();\r\n\r\n    const paperFormat: string = options.paperFormat;\r\n    const resolution = +options.resolution; // Default is 96\r\n    const orientation = options.orientation;\r\n\r\n    this.activityId = this.activityService.register();\r\n    const doc = new jsPDF({\r\n      orientation,\r\n      format: paperFormat.toLowerCase()\r\n    });\r\n\r\n    const dimensions = [\r\n      doc.internal.pageSize.width,\r\n      doc.internal.pageSize.height\r\n    ];\r\n\r\n    const margins = [20, 10, 20, 10];\r\n    const width = dimensions[0] - margins[3] - margins[1];\r\n    const height = dimensions[1] - margins[0] - margins[2];\r\n    const size = [width, height];\r\n\r\n    if (options.title !== undefined) {\r\n      this.addTitle(doc, options.title, dimensions[0]);\r\n    }\r\n\r\n    if (options.showProjection === true || options.showScale === true) {\r\n      this.addProjScale(\r\n        doc,\r\n        map,\r\n        resolution,\r\n        options.showProjection,\r\n        options.showScale\r\n      );\r\n    }\r\n    if (options.comment !== '') {\r\n      this.addComment(doc, options.comment);\r\n    }\r\n\r\n    this.addMap(doc, map, resolution, size, margins).subscribe(\r\n      (status: SubjectStatus) => {\r\n        if (status === SubjectStatus.Done) {\r\n          if (options.showLegend === true) {\r\n            this.addLegend(doc, map, margins, resolution);\r\n          } else {\r\n            this.saveDoc(doc);\r\n          }\r\n        }\r\n\r\n        if (status === SubjectStatus.Done || status === SubjectStatus.Error) {\r\n          this.activityService.unregister(this.activityId);\r\n          status$.next(SubjectStatus.Done);\r\n        }\r\n      }\r\n    );\r\n\r\n    return status$;\r\n  }\r\n\r\n  /**\r\n   * Get html code for all layers legend\r\n   * @param  map IgoMap\r\n   * @param  width The width that the legend need to be\r\n   * @return Html code for the legend\r\n   */\r\n  getLayersLegendHtml(map: IgoMap, width: number, resolution: number): string {\r\n    let html = '';\r\n    const legends = getLayersLegends(\r\n      map.layers,\r\n      map.viewController.getScale(resolution)\r\n    );\r\n    if (legends.length === 0) {\r\n      return html;\r\n    }\r\n\r\n    // Define important style to be sure that all container is convert\r\n    // to image not just visible part\r\n    html += '<style media=\"screen\" type=\"text/css\">';\r\n    html += '.html2canvas-container { width: ' + width;\r\n    html += 'mm !important; height: 2000px !important; }';\r\n    html += '</style>';\r\n    html += '<font size=\"2\" face=\"Courier New\" >';\r\n    html += '<div style=\"display:inline-block;max-width:' + width + 'mm\">';\r\n    // For each legend, define an html table cell\r\n    legends.forEach((legend: OutputLayerLegend) => {\r\n      html +=\r\n        '<table border=1 style=\"display:inline-block;vertical-align:top\">';\r\n      html += '<tr><th width=\"170px\">' + legend.title + '</th>';\r\n      html += '<td><img class=\"printImageLegend\" src=\"' + legend.url + '\">';\r\n      html += '</td></tr></table>';\r\n    });\r\n    html += '</div>';\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Get all the legend in a single image\r\n   * * @param  format - Image format. default value to \"png\"\r\n   * @return The image of the legend\r\n   */\r\n  getLayersLegendImage(\r\n    map,\r\n    format: string = 'png',\r\n    doZipFile: boolean,\r\n    resolution: number\r\n  ) {\r\n    const status$ = new Subject();\r\n    // Get html code for the legend\r\n    const width = 200; // milimeters unit, originally define for document pdf\r\n    let html = this.getLayersLegendHtml(map, width, resolution);\r\n    const that = this;\r\n    format = format.toLowerCase();\r\n\r\n    // If no legend show No LEGEND in an image\r\n    if (html.length === 0) {\r\n      html = '<font size=\"12\" face=\"Courier New\" >';\r\n      html += '<div align=\"center\"><b>NO LEGEND</b></div>';\r\n    }\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n    // Define event to execute after all images are loaded to create the canvas\r\n    setTimeout(() => {\r\n      html2canvas(div, { useCORS: true })\r\n        .then(canvas => {\r\n          let status = SubjectStatus.Done;\r\n          try {\r\n            if (!doZipFile) {\r\n              // Save the canvas as file\r\n              that.saveCanvasImageAsFile(canvas, 'legendImage', format);\r\n            } else {\r\n              // Add the canvas to zip\r\n              that.generateCanvaFileToZip(canvas, 'legendImage' + '.' + format);\r\n            }\r\n            div.parentNode.removeChild(div); // remove temp div (IE)\r\n          } catch (err) {\r\n            status = SubjectStatus.Error;\r\n          }\r\n          status$.next(status);\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n        });\r\n    }, 500);\r\n  }\r\n\r\n  private addTitle(doc: jsPDF, title: string, pageWidth: number) {\r\n    const pdfResolution = 96;\r\n    const titleSize = 32;\r\n    const titleWidth = ((titleSize * 25.4) / pdfResolution) * title.length;\r\n\r\n    let titleMarginLeft;\r\n    if (titleWidth > pageWidth) {\r\n      titleMarginLeft = 0;\r\n    } else {\r\n      titleMarginLeft = (pageWidth - titleWidth) / 2;\r\n    }\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(32);\r\n    doc.text(title, titleMarginLeft, 15);\r\n  }\r\n\r\n  /**\r\n   * Add comment to the document\r\n   * * @param  doc - pdf document\r\n   * * @param  comment - Comment to add in the document\r\n   * * @param  size - Size of the document\r\n   */\r\n  private addComment(doc: jsPDF, comment: string) {\r\n    const commentSize = 16;\r\n    const commentMarginLeft = 20;\r\n    const marginBottom = 5;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(commentSize);\r\n    doc.text(comment, commentMarginLeft, heightPixels);\r\n  }\r\n  /**\r\n   * Add projection and/or scale to the document\r\n   * @param  doc - pdf document\r\n   * @param  map - Map of the app\r\n   * @param  dpi - DPI resolution of the document\r\n   * @param  projection - Bool to indicate if projection need to be added\r\n   * @param  scale - Bool to indicate if scale need to be added\r\n   */\r\n  private addProjScale(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    dpi: number,\r\n    projection: boolean,\r\n    scale: boolean\r\n  ) {\r\n    const translate = this.languageService.translate;\r\n    const projScaleSize = 16;\r\n    const projScaleMarginLeft = 20;\r\n    const marginBottom = 15;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    let textProjScale: string = '';\r\n    if (projection === true) {\r\n      const projText = translate.instant('igo.geo.printForm.projection');\r\n      textProjScale += projText + ': ' + map.projection;\r\n    }\r\n    if (scale === true) {\r\n      if (projection === true) {\r\n        textProjScale += '   ';\r\n      }\r\n      const scaleText = translate.instant('igo.geo.printForm.scale');\r\n      const mapScale = map.viewController.getScale(dpi);\r\n      textProjScale += scaleText + ': ~ 1 / ' + formatScale(mapScale);\r\n    }\r\n    doc.setFont('courier');\r\n    doc.setFontSize(projScaleSize);\r\n    doc.text(textProjScale, projScaleMarginLeft, heightPixels);\r\n  }\r\n\r\n  /**\r\n   * Add the legend to the document\r\n   * @param  doc - Pdf document where legend will be added\r\n   * @param  map - Map of the app\r\n   * @param  margins - Page margins\r\n   */\r\n  private addLegend(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    margins: Array<number>,\r\n    resolution: number\r\n  ) {\r\n    const that = this;\r\n    // Get html code for the legend\r\n    const width = doc.internal.pageSize.width;\r\n    const html = this.getLayersLegendHtml(map, width, resolution);\r\n    // If no legend, save the map directly\r\n    if (html === '') {\r\n      this.saveDoc(doc);\r\n      return true;\r\n    }\r\n\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n    html2canvas(div, { useCORS: true })\r\n      .then(canvas => {\r\n        let imgData;\r\n        const position = 10;\r\n\r\n        imgData = canvas.toDataURL('image/png');\r\n        doc.addPage();\r\n        const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n        doc.addImage(imgData, 'PNG', 10, position, imageSize[0], imageSize[1]);\r\n        that.saveDoc(doc);\r\n        div.parentNode.removeChild(div); // remove temp div (IE style)\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n  }\r\n\r\n  private addCanvas(\r\n    doc: jsPDF,\r\n    canvas: HTMLCanvasElement,\r\n    margins: Array<number>\r\n  ) {\r\n    let image;\r\n\r\n    image = canvas.toDataURL('image/jpeg');\r\n\r\n    if (image !== undefined) {\r\n      const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n      doc.addImage(\r\n        image,\r\n        'JPEG',\r\n        margins[3],\r\n        margins[0],\r\n        imageSize[0],\r\n        imageSize[1]\r\n      );\r\n      doc.rect(margins[3], margins[0], imageSize[0], imageSize[1]);\r\n    }\r\n  }\r\n\r\n  // TODO fix printing with image resolution\r\n  private addMap(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    resolution: number,\r\n    size: Array<number>,\r\n    margins: Array<number>\r\n  ) {\r\n    const status$ = new Subject();\r\n\r\n    const mapSize = map.ol.getSize();\r\n    const extent = map.ol.getView().calculateExtent(mapSize);\r\n\r\n    const widthPixels = Math.round((size[0] * resolution) / 25.4);\r\n    const heightPixels = Math.round((size[1] * resolution) / 25.4);\r\n\r\n    let timeout;\r\n\r\n    map.ol.once('postcompose', (event: any) => {\r\n      const canvas = event.context.canvas;\r\n      const mapStatus$$ = map.status$.subscribe((mapStatus: SubjectStatus) => {\r\n        clearTimeout(timeout);\r\n\r\n        if (mapStatus !== SubjectStatus.Done) {\r\n          return;\r\n        }\r\n\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      });\r\n\r\n      // If no loading as started after 200ms, then probably no loading\r\n      // is required.\r\n      timeout = window.setTimeout(() => {\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      }, 200);\r\n    });\r\n\r\n    this.renderMap(map, [widthPixels, heightPixels], extent);\r\n\r\n    return status$;\r\n  }\r\n\r\n  defineNbFileToProcess(nbFileToProcess) {\r\n    this.nbFileToProcess = nbFileToProcess;\r\n  }\r\n\r\n  /**\r\n   * Download an image of the map with addition of informations\r\n   * @param  map - Map of the app\r\n   * @param  format - Image format. default value to \"png\"\r\n   * @param  projection - Indicate if projection need to be add. Default to false\r\n   * @param  scale - Indicate if scale need to be add. Default to false\r\n   * @param  legend - Indicate if the legend of layers need to be download. Default to false\r\n   * @param  title - Title to add for the map - Default to blank\r\n   * @param  comment - Comment to add for the map - Default to blank\r\n   * @param  doZipFile - Indicate if we do a zip with the file\r\n   * @return Image file of the map with extension format given as parameter\r\n   */\r\n  downloadMapImage(\r\n    map: IgoMap,\r\n    resolution: number,\r\n    format = 'png',\r\n    projection = false,\r\n    scale = false,\r\n    legend = false,\r\n    title = '',\r\n    comment = '',\r\n    doZipFile = true\r\n  ) {\r\n    const status$ = new Subject();\r\n    // const resolution = map.ol.getView().getResolution();\r\n    this.activityId = this.activityService.register();\r\n    const translate = this.languageService.translate;\r\n    map.ol.once('postcompose', (event: any) => {\r\n      format = format.toLowerCase();\r\n      const context = event.context;\r\n      const newCanvas = document.createElement('canvas');\r\n      const newContext = newCanvas.getContext('2d');\r\n      // Postion in height to set the canvas in new canvas\r\n      let positionHCanvas = 0;\r\n      // Position in width to set the Proj/Scale in new canvas\r\n      let positionWProjScale = 10;\r\n      // Get height/width of map canvas\r\n      const width = context.canvas.width;\r\n      let height = context.canvas.height;\r\n      // Set Font to calculate comment width\r\n      newContext.font = '20px Calibri';\r\n      const commentWidth = newContext.measureText(comment).width;\r\n      // Add height for title if defined\r\n      height = title !== '' ? height + 30 : height;\r\n      // Add height for projection or scale (same line) if defined\r\n      height = projection !== false || scale !== false ? height + 30 : height;\r\n      const positionHProjScale = height - 10;\r\n      // Define number of line depending of the comment length\r\n      const commentNbLine = Math.ceil(commentWidth / width);\r\n      // Add height for multiline comment if defined\r\n      height = comment !== '' ? height + commentNbLine * 30 : height;\r\n      let positionHComment = height - commentNbLine * 20 + 5;\r\n      // Set the new canvas with the new calculated size\r\n      newCanvas.width = width;\r\n      newCanvas.height = height;\r\n      // Patch Jpeg default black background to white\r\n      if (format === 'jpeg') {\r\n        newContext.fillStyle = '#ffffff';\r\n        newContext.fillRect(0, 0, width, height);\r\n        newContext.fillStyle = '#000000';\r\n      }\r\n      // If a title need to be added to canvas\r\n      if (title !== '') {\r\n        // Set font for title\r\n        newContext.font = '26px Calibri';\r\n        positionHCanvas = 30;\r\n        newContext.textAlign = 'center';\r\n        newContext.fillText(title, width / 2, 20);\r\n      }\r\n      // Set font for next section\r\n      newContext.font = '20px Calibri';\r\n      // If projection need to be added to canvas\r\n      if (projection !== false) {\r\n        const projText = translate.instant('igo.geo.printForm.projection');\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          projText + ': ' + map.projection,\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n        positionWProjScale += 200; // Width position change for scale position\r\n      }\r\n      // If scale need to be added to canvas\r\n      if (scale !== false) {\r\n        const scaleText = translate.instant('igo.geo.printForm.scale');\r\n        const mapScale = map.viewController.getScale(resolution);\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          scaleText + ': ~ 1 / ' + formatScale(mapScale),\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n      }\r\n      // If a comment need to be added to canvas\r\n      if (comment !== '') {\r\n        newContext.textAlign = 'center';\r\n        // If only one line, no need to multiline the comment\r\n        if (commentNbLine === 1) {\r\n          newContext.fillText(comment, width / 2, positionHComment);\r\n        } else {\r\n          // Separate the setenses to be approx. the same length\r\n          const nbCommentChar = comment.length;\r\n          const CommentLengthToCut = Math.floor(nbCommentChar / commentNbLine);\r\n          let commentCurrentLine = '';\r\n          let positionFirstCutChar = 0;\r\n          let positionLastBlank;\r\n          // Loop for the number of line calculated\r\n          for (let i = 0; i < commentNbLine; i++) {\r\n            // For all line except last\r\n            if (commentNbLine - 1 > i) {\r\n              // Get comment current line to find the right place tu cut comment\r\n              commentCurrentLine = comment.substr(\r\n                positionFirstCutChar,\r\n                CommentLengthToCut\r\n              );\r\n              // Cut the setence at blank\r\n              positionLastBlank = commentCurrentLine.lastIndexOf(' ');\r\n              newContext.fillText(\r\n                commentCurrentLine.substr(0, positionLastBlank),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n              positionFirstCutChar += positionLastBlank;\r\n              // Go to next line for insertion\r\n              positionHComment += 20;\r\n            } else {\r\n              // Don't cut last part\r\n              newContext.fillText(\r\n                comment.substr(positionFirstCutChar),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // Add map to new canvas\r\n      newContext.drawImage(context.canvas, 0, positionHCanvas);\r\n\r\n      let status = SubjectStatus.Done;\r\n      try {\r\n        // Save the canvas as file\r\n        if (!doZipFile) {\r\n          this.saveCanvasImageAsFile(newCanvas, 'map', format);\r\n        } else if (format.toLowerCase() === 'tiff') {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(\r\n            newCanvas,\r\n            'map' + map.projection.replace(':', '_') + '.' + format\r\n          );\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(newCanvas, 'map' + '.' + format);\r\n        }\r\n      } catch (err) {\r\n        status = SubjectStatus.Error;\r\n      }\r\n\r\n      status$.next(status);\r\n\r\n      if (format.toLowerCase() === 'tiff') {\r\n        const tiwContent = this.getWorldFileInformation(map);\r\n        const blob = new Blob([tiwContent], {\r\n          type: 'text/plain;charset=utf-8'\r\n        });\r\n        if (!doZipFile) {\r\n          // saveAs automaticly replace ':' for '_'\r\n          saveAs(blob, 'map' + map.projection + '.tfw');\r\n          this.saveFileProcessing();\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.addFileToZip(\r\n            'map' + map.projection.replace(':', '_') + '.tfw',\r\n            blob\r\n          );\r\n        }\r\n      }\r\n    });\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  private renderMap(map, size, extent) {\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  /**\r\n   * Save document\r\n   * @param  doc - Document to save\r\n   */\r\n  private saveDoc(doc: jsPDF) {\r\n    doc.save('map.pdf');\r\n  }\r\n\r\n  /**\r\n   * Calculate the best Image size to fit in pdf\r\n   * @param doc - Pdf Document\r\n   * @param canvas - Canvas of image\r\n   * @param margins - Page margins\r\n   */\r\n  private getImageSizeToFitPdf(doc, canvas, margins) {\r\n    // Define variable to calculate best size to fit in one page\r\n    const pageHeight =\r\n      doc.internal.pageSize.getHeight() - (margins[0] + margins[2]);\r\n    const pageWidth =\r\n      doc.internal.pageSize.getWidth() - (margins[1] + margins[3]);\r\n    const canHeight = canvas.height;\r\n    const canWidth = canvas.width;\r\n    const heightRatio = canHeight / pageHeight;\r\n    const widthRatio = canWidth / pageWidth;\r\n    const maxRatio = heightRatio > widthRatio ? heightRatio : widthRatio;\r\n    const imgHeigh = maxRatio > 1 ? canHeight / maxRatio : canHeight;\r\n    const imgWidth = maxRatio > 1 ? canWidth / maxRatio : canWidth;\r\n\r\n    return [imgWidth, imgHeigh];\r\n  }\r\n\r\n  /**\r\n   * Get a world file information for tiff\r\n   * @param  map - Map of the app\r\n   */\r\n  private getWorldFileInformation(map) {\r\n    const currentResolution = map.viewController.getResolution();\r\n    const currentExtent = map.viewController.getExtent(); // Return [minx, miny, maxx, maxy]\r\n    return [\r\n      currentResolution,\r\n      0,\r\n      0,\r\n      -currentResolution,\r\n      currentExtent[0] + currentResolution / 0.5,\r\n      currentExtent[3] - currentResolution / 0.5\r\n    ].join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Save canvas image as file\r\n   * @param canvas - Canvas to save\r\n   * @param name - Name of the file\r\n   * @param format - file format\r\n   */\r\n  private saveCanvasImageAsFile(canvas, name, format) {\r\n    const blobFormat = 'image/' + format;\r\n    const that = this;\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      // If navigator is Internet Explorer\r\n      if (navigator.msSaveBlob) {\r\n        navigator.msSaveBlob(canvas.msToBlob(), name + '.' + format);\r\n        this.saveFileProcessing();\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          // download image\r\n          saveAs(blob, name + '.' + format);\r\n          that.saveFileProcessing();\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to a zip\r\n   * @param canvas - File to add to the zip\r\n   * @param  name -Name of the fileoverview\r\n   */\r\n  private generateCanvaFileToZip(canvas, name) {\r\n    const blobFormat = 'image/' + 'jpeg';\r\n    const that = this;\r\n    if (\r\n      !this.hasOwnProperty('zipFile') ||\r\n      typeof this.zipFile === 'undefined'\r\n    ) {\r\n      this.zipFile = new JSZip();\r\n    }\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      if (navigator.msSaveBlob) {\r\n        this.addFileToZip(name, canvas.msToBlob());\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          that.addFileToZip(name, blob);\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to zip, if all file are zipped, download\r\n   * @param name - Name of the files\r\n   * @param blob - Contain of file\r\n   */\r\n  private addFileToZip(name, blob) {\r\n    // add file to zip\r\n    this.zipFile.file(name, blob);\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Download zip file\r\n      this.getZipFile();\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  private saveFileProcessing() {\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the zipped file\r\n   * @return Retun a zip file\r\n   */\r\n  private getZipFile() {\r\n    const that = this;\r\n    this.zipFile.generateAsync({ type: 'blob' }).then(blob => {\r\n      // 1) generate the zip file\r\n      saveAs(blob, 'map.zip');\r\n      delete that.zipFile;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\nimport { PrintService } from '../shared/print.service';\r\n\r\n@Component({\r\n  selector: 'igo-print',\r\n  templateUrl: './print.component.html'\r\n})\r\nexport class PrintComponent {\r\n  public disabled = false;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this._outputFormat;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this._outputFormat = value;\r\n  }\r\n  private _outputFormat: PrintOutputFormat;\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this._paperFormat;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this._paperFormat = value;\r\n  }\r\n  private _paperFormat: PrintPaperFormat;\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this._orientation;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this._orientation = value;\r\n  }\r\n  private _orientation: PrintOrientation;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this._imageFormat;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this._imageFormat = value;\r\n  }\r\n  private _imageFormat: PrintSaveImageFormat;\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this._resolution;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this._resolution = value;\r\n  }\r\n  private _resolution: PrintResolution;\r\n\r\n  constructor(private printService: PrintService) {}\r\n\r\n  handleFormSubmit(data: PrintOptions) {\r\n    this.disabled = true;\r\n\r\n    if (data.isPrintService === true) {\r\n      this.printService\r\n        .print(this.map, data)\r\n        .subscribe();\r\n    } else {\r\n      let nbFileToProcess = 1;\r\n\r\n      if (data.showLegend) {\r\n        nbFileToProcess++;\r\n      }\r\n      if (data.imageFormat.toLowerCase() === 'tiff') {\r\n        nbFileToProcess++;\r\n      }\r\n\r\n      this.printService.defineNbFileToProcess(nbFileToProcess);\r\n\r\n      const resolution = +data.resolution;\r\n      this.printService.downloadMapImage(\r\n        this.map,\r\n        resolution,\r\n        data.imageFormat,\r\n        data.showProjection,\r\n        data.showScale,\r\n        data.showLegend,\r\n        data.title,\r\n        data.comment,\r\n        data.doZipFile\r\n      );\r\n      if (data.showLegend) {\r\n        this.printService.getLayersLegendImage(\r\n          this.map,\r\n          data.imageFormat,\r\n          data.doZipFile,\r\n          +resolution\r\n        );\r\n      }\r\n    }\r\n    this.disabled = false;\r\n  }\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const PrintOutputFormat = strEnum(['Pdf', 'Image']);\r\n\r\nexport type PrintOutputFormat = keyof typeof PrintOutputFormat;\r\n\r\nexport const PrintPaperFormat = strEnum([\r\n  'A0',\r\n  'A1',\r\n  'A2',\r\n  'A3',\r\n  'A4',\r\n  'A5',\r\n  'Letter',\r\n  'Legal'\r\n]);\r\nexport type PrintPaperFormat = keyof typeof PrintPaperFormat;\r\n\r\nexport const PrintOrientation = strEnum(['landscape', 'portrait']);\r\nexport type PrintOrientation = keyof typeof PrintOrientation;\r\n\r\nexport const PrintResolution = strEnum(['72', '96', '150', '300']);\r\nexport type PrintResolution = keyof typeof PrintResolution;\r\n\r\nexport const PrintSaveImageFormat = strEnum([\r\n  'Bmp',\r\n  'Gif',\r\n  'Jpeg',\r\n  'Png',\r\n  'Tiff'\r\n]);\r\nexport type PrintSaveImageFormat = keyof typeof PrintSaveImageFormat;\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators\r\n} from '@angular/forms';\r\n\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\n@Component({\r\n  selector: 'igo-print-form',\r\n  templateUrl: './print-form.component.html',\r\n  styleUrls: ['./print-form.component.scss']\r\n})\r\nexport class PrintFormComponent implements OnInit {\r\n  public form: FormGroup;\r\n  public submitted: boolean;\r\n\r\n  public outputFormats = PrintOutputFormat;\r\n  public paperFormats = PrintPaperFormat;\r\n  public orientations = PrintOrientation;\r\n  public resolutions = PrintResolution;\r\n  public imageFormats = PrintSaveImageFormat;\r\n  public isPrintService = true;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this.imageFormatField.value;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this.imageFormatField.setValue(value || PrintSaveImageFormat.Jpeg, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this.outputFormatField.value;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this.outputFormatField.setValue(value || PrintOutputFormat.Pdf, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this.paperFormatField.value;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this.paperFormatField.setValue(value || PrintPaperFormat.Letter, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this.orientationField.value;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this.orientationField.setValue(value || PrintOrientation.landscape, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this.resolutionField.value;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this.resolutionField.setValue(value || PrintResolution['96'], {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get title(): string {\r\n    return this.titleField.value;\r\n  }\r\n  set title(value: string) {\r\n    this.titleField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get comment(): string {\r\n    return this.commentField.value;\r\n  }\r\n  set comment(value: string) {\r\n    this.commentField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showProjection(): boolean {\r\n    return this.showProjectionField.value;\r\n  }\r\n  set showProjection(value: boolean) {\r\n    this.showProjectionField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showScale(): boolean {\r\n    return this.showScaleField.value;\r\n  }\r\n  set showScale(value: boolean) {\r\n    this.showScaleField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showLegend(): boolean {\r\n    return this.showLegendField.value;\r\n  }\r\n  set showLegend(value: boolean) {\r\n    this.showLegendField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get doZipFile(): boolean {\r\n    return this.doZipFileField.value;\r\n  }\r\n  set doZipFile(value: boolean) {\r\n    this.doZipFileField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  get outputFormatField() {\r\n    return (this.form.controls as any).outputFormat as FormControl;\r\n  }\r\n\r\n  get paperFormatField() {\r\n    return (this.form.controls as any).paperFormat as FormControl;\r\n  }\r\n\r\n  get imageFormatField() {\r\n    return (this.form.controls as any).imageFormat as FormControl;\r\n  }\r\n\r\n  get orientationField() {\r\n    return (this.form.controls as any).orientation as FormControl;\r\n  }\r\n\r\n  get resolutionField() {\r\n    return (this.form.controls as any).resolution as FormControl;\r\n  }\r\n\r\n  get commentField() {\r\n    return (this.form.controls as any).comment as FormControl;\r\n  }\r\n\r\n  get showProjectionField() {\r\n    return (this.form.controls as any).showProjection as FormControl;\r\n  }\r\n\r\n  get showScaleField() {\r\n    return (this.form.controls as any).showScale as FormControl;\r\n  }\r\n\r\n  get showLegendField() {\r\n    return (this.form.controls as any).showLegend as FormControl;\r\n  }\r\n\r\n  get doZipFileField() {\r\n    return (this.form.controls as any).doZipFile as FormControl;\r\n  }\r\n\r\n  get titleField() {\r\n    return (this.form.controls as any).title as FormControl;\r\n  }\r\n\r\n  @Output() submit: EventEmitter<PrintOptions> = new EventEmitter();\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n    this.form = this.formBuilder.group({\r\n      title: ['', []],\r\n      comment: ['', []],\r\n      outputFormat: ['', [Validators.required]],\r\n      paperFormat: ['', [Validators.required]],\r\n      imageFormat: [ '', [Validators.required]],\r\n      resolution: ['', [Validators.required]],\r\n      orientation: ['', [Validators.required]],\r\n      showProjection: false,\r\n      showScale: false,\r\n      showLegend: false,\r\n      doZipFile: [{hidden: this.isPrintService }]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doZipFileField.setValue(false);\r\n  }\r\n\r\n  handleFormSubmit(data: PrintOptions, isValid: boolean) {\r\n    this.submitted = true;\r\n    data.isPrintService = this.isPrintService;\r\n    if (isValid) {\r\n      this.submit.emit(data);\r\n    }\r\n  }\r\n\r\n  toggleImageSaveProp() {\r\n    if (this.outputFormatField.value === 'Image') {\r\n      this.isPrintService = false;\r\n    } else {\r\n      this.isPrintService = true;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { PrintComponent } from './print/print.component';\r\nimport { PrintFormComponent } from './print-form/print-form.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [PrintComponent, PrintFormComponent],\r\n  declarations: [PrintComponent, PrintFormComponent]\r\n})\r\nexport class IgoPrintModule {}\r\n","import { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\n\r\nimport { QuerySearchSource } from './query-search-source';\r\n\r\n/**\r\n * Map search source factory\r\n * @ignore\r\n */\r\nexport function querySearchSourceFactory(config: ConfigService) {\r\n  return new QuerySearchSource(\r\n    config.getConfig(`searchSources.${QuerySearchSource.id}`) || {}\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the map search source\r\n */\r\nexport function provideQuerySearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: querySearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { QueryDirective } from './shared/query.directive';\r\nimport { QueryService } from './shared/query.service';\r\nimport { provideQuerySearchSource } from './shared/query-search-source.providers';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [QueryDirective],\r\n  declarations: [QueryDirective],\r\n  providers: [QueryService]\r\n})\r\nexport class IgoQueryModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoQueryModule,\r\n      providers: [provideQuerySearchSource()]\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceSettings } from './sources/source.interfaces';\r\n\r\n/**\r\n * Service where all available search sources are registered.\r\n */\r\nexport class SearchSourceService {\r\n\r\n  constructor(private sources: SearchSource[]) {}\r\n\r\n  /**\r\n   * Return available search sources\r\n   * @returns Search sources\r\n   */\r\n  getSources(): SearchSource[] {\r\n    return this.sources;\r\n  }\r\n\r\n  /**\r\n   * Return enabled search sources\r\n   * @returns Search sources\r\n   */\r\n  getEnabledSources(): SearchSource[] {\r\n    return this.getSources().filter(\r\n      (source: SearchSource) => source.enabled === true\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Enable search sources of given type\r\n   * @param type Search type\r\n   * @todo It would be better to track the enabled search sources\r\n   *  without updating their 'enabled' property.\r\n   */\r\n  enableSourcesByType(type: string) {\r\n    this.getSources().forEach((source: SearchSource) => {\r\n      if ((source.constructor as typeof SearchSource).type === type) {\r\n        source.enabled = true;\r\n      } else {\r\n        source.enabled = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set Param from the selected settings\r\n   * @param source search-source\r\n   * @param setting settings\r\n   */\r\n  setParamFromSetting(source: SearchSource, setting: SearchSourceSettings) {\r\n    source.setParamFromSetting(setting);\r\n  }\r\n}\r\n","import { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { SearchSource } from './sources/source';\r\nimport { SearchResult } from './search.interfaces';\r\n\r\n/**\r\n * Function that checks whether a search source implements TextSearch\r\n * @param source Search source\r\n * @returns True if the search source implements TextSearch\r\n */\r\nexport function sourceCanSearch(source: SearchSource): boolean {\r\n  return (source as any).search !== undefined;\r\n}\r\n\r\n/**\r\n * Function that checks whether a search source implements ReverseSearch\r\n * @param source Search source\r\n * @returns True if the search source implements ReverseSearch\r\n */\r\nexport function sourceCanReverseSearch(source: SearchSource): boolean {\r\n  return (source as any).reverseSearch !== undefined;\r\n}\r\n\r\n/**\r\n * Function that checks whether a search source implements ReverseSearch AND is shown in the pointer summary\r\n * @param source Search source\r\n * @returns True if the search source implements ReverseSearch AND is shown in the pointer summary\r\n */\r\nexport function sourceCanReverseSearchAsSummary(source: SearchSource): boolean {\r\n  return (source as any).reverseSearch !== undefined && source.showInPointerSummary === true;\r\n}\r\n\r\n/**\r\n * Return a search result out of an Feature. This is used to adapt\r\n * the IGO query module to the new Feature/SearchResult interfaces\r\n * @param feature feature\r\n * @param source Search source\r\n * @returns SearchResult\r\n */\r\nexport function featureToSearchResult(\r\n  feature: Feature,\r\n  source: SearchSource\r\n): SearchResult<Feature> {\r\n  return {\r\n    source,\r\n    data: feature,\r\n    meta: {\r\n      dataType: FEATURE,\r\n      id: feature.meta.id as string,\r\n      title: feature.meta.title,\r\n      icon: feature.meta.icon || 'map-marker'\r\n    }\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { stringToLonLat } from '../../map';\r\nimport { MapService } from '../../map/shared/map.service';\r\n\r\nimport { SearchSource, TextSearch, ReverseSearch } from './sources/source';\r\nimport {\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './sources/source.interfaces';\r\nimport { SearchSourceService } from './search-source.service';\r\nimport { Research } from './search.interfaces';\r\nimport {\r\n  sourceCanSearch,\r\n  sourceCanReverseSearch,\r\n  sourceCanReverseSearchAsSummary\r\n} from './search.utils';\r\n\r\n/**\r\n * This service perform researches in all the search sources enabled.\r\n * It returns Research objects who's 'request' property needs to be\r\n * subscribed to in order to trigger the research. This services has\r\n * keeps internal state of the researches it performed\r\n * and the results they yielded.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchService {\r\n  constructor(\r\n    private searchSourceService: SearchSourceService,\r\n    private mapService: MapService\r\n  ) {}\r\n\r\n  /**\r\n   * Perform a research by text\r\n   * @param term Any text\r\n   * @returns Researches\r\n   */\r\n  search(term: string, options: TextSearchOptions = {}): Research[] {\r\n    if (!this.termIsValid(term)) {\r\n      return [];\r\n    }\r\n\r\n    const response = stringToLonLat(term, this.mapService.getMap().projection, {\r\n      forceNA: options.forceNA\r\n    });\r\n    if (response.lonLat) {\r\n      return this.reverseSearch(response.lonLat, { distance: response.radius });\r\n    } else if (response.message) {\r\n      console.log(response.message);\r\n    }\r\n\r\n    options.extent = this.mapService\r\n      .getMap()\r\n      .viewController.getExtent('EPSG:4326');\r\n\r\n    let sources;\r\n\r\n    if (options.getEnabledOnly || options.getEnabledOnly === undefined) {\r\n      sources = this.searchSourceService.getEnabledSources();\r\n    } else {\r\n      sources = this.searchSourceService.getSources();\r\n    }\r\n\r\n    if (options.sourceId) {\r\n      sources = sources.filter(source => source.getId() === options.sourceId);\r\n    } else if (options.searchType) {\r\n      sources = sources.filter(\r\n        source => source.getType() === options.searchType\r\n      );\r\n    }\r\n\r\n    sources = sources.filter(sourceCanSearch);\r\n    return this.searchSources(sources, term, options);\r\n  }\r\n\r\n  /**\r\n   * Perform a research by lon/lat\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Researches\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions,\r\n    asPointerSummary: boolean = false\r\n  ) {\r\n    const reverseSourceFonction = asPointerSummary\r\n      ? sourceCanReverseSearchAsSummary\r\n      : sourceCanReverseSearch;\r\n    const sources = this.searchSourceService\r\n      .getEnabledSources()\r\n      .filter(reverseSourceFonction);\r\n    return this.reverseSearchSources(sources, lonLat, options || {});\r\n  }\r\n\r\n  /**\r\n   * Create a text research out of all given search sources\r\n   * @param sources Search sources that implement TextSearch\r\n   * @param term Search term\r\n   * @returns Observable of Researches\r\n   */\r\n  private searchSources(\r\n    sources: SearchSource[],\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: ((source as any) as TextSearch).search(term, options),\r\n        reverse: false,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a reverse research out of all given search sources\r\n   * @param sources Search sources that implement ReverseSearch\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Observable of Researches\r\n   */\r\n  private reverseSearchSources(\r\n    sources: SearchSource[],\r\n    lonLat: [number, number],\r\n    options: ReverseSearchOptions\r\n  ): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: ((source as any) as ReverseSearch).reverseSearch(\r\n          lonLat,\r\n          options\r\n        ),\r\n        reverse: true,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate that a search term is valid\r\n   * @param term Search term\r\n   * @returns True if the search term is valid\r\n   */\r\n  private termIsValid(term: string): boolean {\r\n    return typeof term === 'string' && term !== '';\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Directions, DirectionsOptions } from '../shared/directions.interface';\r\n\r\nexport abstract class DirectionsSource {\r\n  abstract enabled: boolean;\r\n  abstract getName(): string;\r\n  abstract route(coordinates: [number, number][], directionsOptions: DirectionsOptions): Observable<Directions[]>;\r\n}\r\n","import { DirectionsSource } from '../directions-sources/directions-source';\r\n\r\nexport class DirectionsSourceService {\r\n  constructor(public sources: DirectionsSource[]) {}\r\n}\r\n\r\nexport function directionsSourceServiceFactory(sources: DirectionsSource[]) {\r\n  return new DirectionsSourceService(sources);\r\n}\r\n\r\nexport function provideDirectionsSourceService() {\r\n  return {\r\n    provide: DirectionsSourceService,\r\n    useFactory: directionsSourceServiceFactory,\r\n    deps: [DirectionsSource]\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Directions, DirectionsOptions } from '../shared/directions.interface';\r\nimport { DirectionsSource } from '../directions-sources/directions-source';\r\nimport { DirectionsSourceService } from './directions-source.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DirectionsService {\r\n  constructor(private directionsSourceService: DirectionsSourceService) {}\r\n\r\n  route(coordinates: [number, number][], directionsOptions: DirectionsOptions = {}): Observable<Directions[]>[] {\r\n    if (coordinates.length === 0) {\r\n      return;\r\n    }\r\n    return this.directionsSourceService.sources\r\n      .filter((source: DirectionsSource) => source.enabled)\r\n      .map((source: DirectionsSource) => this.routeSource(source, coordinates, directionsOptions));\r\n  }\r\n\r\n  routeSource(\r\n    source: DirectionsSource,\r\n    coordinates: [number, number][],\r\n    directionsOptions: DirectionsOptions = {}\r\n  ): Observable<Directions[]> {\r\n    const request = source.route(coordinates, directionsOptions );\r\n    return request;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Stop } from '../shared/directions.interface';\r\n\r\n@Injectable()\r\nexport class DirectionsFormService {\r\n  private stops: Stop[];\r\n\r\n  constructor() {}\r\n\r\n  getStopsCoordinates(): [number, number][] {\r\n    const stopsCoordinates = [];\r\n    if (this.stops) {\r\n      this.stops.forEach(stop => {\r\n        stopsCoordinates.push(stop.stopCoordinates);\r\n      });\r\n    }\r\n    return stopsCoordinates;\r\n  }\r\n\r\n  setStops(stops: Stop[]) {\r\n    this.stops = stops;\r\n  }\r\n\r\n  getStops() {\r\n    return this.stops;\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map, take, skipWhile } from 'rxjs/operators';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport * as olgeom from 'ol/geom';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olcondition from 'ol/events/condition';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport * as olobservable from 'ol/Observable';\r\n\r\nimport { Clipboard } from '@igo2/utils';\r\nimport {\r\n  Message,\r\n  LanguageService,\r\n  MessageService,\r\n  RouteService\r\n} from '@igo2/core';\r\nimport { getEntityTitle } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { SearchService } from '../../search/shared/search.service';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { FeatureMotion, FEATURE } from '../../feature/shared/feature.enums';\r\nimport { moveToOlFeatures, tryBindStoreLayer, tryAddLoadingStrategy } from '../../feature/shared/feature.utils';\r\n\r\nimport { Directions, DirectionsOptions } from '../shared/directions.interface';\r\nimport { DirectionsService } from '../shared/directions.service';\r\nimport { DirectionsFormService } from './directions-form.service';\r\n\r\nimport { QueryService } from '../../query/shared/query.service';\r\nimport { FeatureStore } from '../../feature/shared/store';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { FeatureStoreLoadingStrategy } from '../../feature/shared/strategies/loading';\r\nimport { roundCoordTo } from '../../map/shared/map.utils';\r\n\r\n@Component({\r\n  selector: 'igo-directions-form',\r\n  templateUrl: './directions-form.component.html',\r\n  styleUrls: ['./directions-form.component.scss']\r\n})\r\nexport class DirectionsFormComponent implements OnInit, OnDestroy {\r\n  private readonly invalidKeys = ['Control', 'Shift', 'Alt'];\r\n\r\n  public stopsForm: FormGroup;\r\n  public projection = 'EPSG:4326';\r\n  public currentStopIndex: number;\r\n  private routesQueries$$: Subscription[] = [];\r\n  private search$$: Subscription;\r\n\r\n  private stream$ = new Subject<string>();\r\n\r\n  public routesResults: Directions[] | Message[];\r\n  public activeRoute: Directions;\r\n  private lastTimeoutRequest;\r\n\r\n  private focusOnStop = false;\r\n  private focusKey = [];\r\n  public initialStopsCoords;\r\n  private browserLanguage;\r\n\r\n  @Input() term: string;\r\n\r\n  @Input() debounce: number = 200;\r\n\r\n  @Input() length: number = 2;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The stops store\r\n   */\r\n  @Input() stopsStore: FeatureStore;\r\n\r\n  /**\r\n   * The route and vertex store\r\n   */\r\n  @Input() routeStore: FeatureStore;\r\n\r\n  @Output() submit: EventEmitter<any> = new EventEmitter();\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private directionsService: DirectionsService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private searchService: SearchService,\r\n    private queryService: QueryService,\r\n    private directionsFormService: DirectionsFormService,\r\n    private changeDetectorRefs: ChangeDetectorRef,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  changeRoute() {\r\n    this.showRouteGeometry();\r\n  }\r\n\r\n  prevent(event) {\r\n    event.preventDefault();\r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n    this.queryService.queryEnabled = false;\r\n    this.focusOnStop = false;\r\n    this.browserLanguage = this.languageService.getLanguage();\r\n    this.stopsForm = this.formBuilder.group({\r\n      directionsType: 'car',\r\n      directionsMode: 'driving', // loop\r\n      stopOrderPriority: true,\r\n      directionsFixedStartEnd: false,\r\n      stops: this.formBuilder.array([\r\n        this.createStop('start'),\r\n        this.createStop('end')\r\n      ])\r\n    });\r\n\r\n    if (!this.directionsFormService.getStops()) {\r\n      this.map.status$.pipe(take(1)).subscribe(() => {\r\n        this.conditionalInit();\r\n      });\r\n    } else {\r\n      this.conditionalInit();\r\n    }\r\n\r\n  }\r\n\r\n  private conditionalInit() {\r\n    this.initStores();\r\n    this.initOlInteraction();\r\n    this.subscribeToFormChange();\r\n\r\n    this.routesQueries$$.push(\r\n      this.stream$\r\n        .pipe(\r\n          debounceTime(this.debounce),\r\n          distinctUntilChanged()\r\n        )\r\n        .subscribe((term: string) => this.handleTermChanged(term))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribeRoutesQueries();\r\n    this.unlistenSingleClick();\r\n    this.queryService.queryEnabled = true;\r\n    this.freezeStores();\r\n    this.writeStopsToFormService();\r\n\r\n  }\r\n\r\n  private initStores() {\r\n\r\n    const loadingStrategy = new FeatureStoreLoadingStrategy({motion: FeatureMotion.None});\r\n\r\n    // STOP STORE\r\n    const stopsStore = this.stopsStore;\r\n    const stopsLayer = new VectorLayer({\r\n      title: 'Directions - stops',\r\n      zIndex: 911,\r\n      source: new FeatureDataSource(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false,\r\n      style: stopMarker\r\n    });\r\n    tryBindStoreLayer(stopsStore, stopsLayer);\r\n    tryAddLoadingStrategy(stopsStore, loadingStrategy);\r\n\r\n    // ROUTE AND VERTEX STORE\r\n    const routeStore = this.routeStore;\r\n    const routeLayer = new VectorLayer({\r\n      title: 'Directions - route and vertex',\r\n      zIndex: 910,\r\n      source: new FeatureDataSource(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false,\r\n      style: stopMarker\r\n    });\r\n    tryBindStoreLayer(routeStore, routeLayer);\r\n    tryAddLoadingStrategy(routeStore, loadingStrategy);\r\n\r\n  }\r\n\r\n  private initOlInteraction() {\r\n    let selectedStopFeature;\r\n    const selectStop = new olinteraction.Select({\r\n      layers: [this.stopsStore.layer.ol],\r\n      condition: olcondition.pointerMove,\r\n      hitTolerance: 7,\r\n      filter: (feature) => {\r\n        return feature.get('type') === 'stop';\r\n      }\r\n    });\r\n\r\n    selectStop.on('select', evt => {\r\n      selectedStopFeature = evt.target.getFeatures()[0];\r\n    });\r\n\r\n    const translateStop = new olinteraction.Translate({\r\n      layers: [this.stopsStore.layer.ol],\r\n      features: selectedStopFeature\r\n      // TODO In Openlayers >= 6.x, filter is now allowed.\r\n    });\r\n\r\n    translateStop.on('translating', evt => {\r\n      const features = evt.features;\r\n      if (features.getLength() === 0) { return; }\r\n      this.executeTranslation(features, false, 50, true);\r\n    });\r\n\r\n    translateStop.on('translateend', evt => {\r\n      const features = evt.features;\r\n      if (features.getLength() === 0) { return; }\r\n      this.executeTranslation(features, true, 0, false);\r\n    });\r\n\r\n    const selectedRoute = new olinteraction.Select({\r\n      layers: [this.routeStore.layer.ol],\r\n      condition: olcondition.click,\r\n      hitTolerance: 7,\r\n      filter: (feature) => {\r\n        return feature.getId() === 'route';\r\n      }\r\n    });\r\n    selectedRoute.on('select', evt => {\r\n      if (this.focusOnStop === false) {\r\n        const selectCoordinates = olproj.transform(\r\n          (evt as any).mapBrowserEvent.coordinate,\r\n          this.map.projection,\r\n          this.projection\r\n        );\r\n        this.addStop();\r\n        const pos = this.stops.length - 2;\r\n        this.stops.at(pos).patchValue({ stopCoordinates: selectCoordinates });\r\n        this.handleLocationProposals(selectCoordinates, pos);\r\n        this.addStopOverlay(selectCoordinates, pos);\r\n        selectedRoute.getFeatures().clear();\r\n      }\r\n      selectedRoute.getFeatures().clear();\r\n    });\r\n\r\n    this.map.ol.addInteraction(selectStop);\r\n    this.map.ol.addInteraction(translateStop);\r\n    this.map.ol.addInteraction(selectedRoute);\r\n\r\n  }\r\n\r\n  private subscribeToFormChange() {\r\n    this.routesQueries$$.push(\r\n      this.stopsForm.valueChanges\r\n        .pipe(debounceTime(this.debounce))\r\n        .subscribe(val => {\r\n          this.writeStopsToFormService();\r\n        })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Freeze any store, meaning the layer is removed, strategies are deactivated\r\n   * and some listener removed\r\n   * @internal\r\n   */\r\n  private freezeStores() {\r\n    const stopsStore = this.stopsStore;\r\n    const routeStore = this.routeStore;\r\n\r\n    this.map.removeLayer(stopsStore.layer);\r\n    this.map.removeLayer(routeStore.layer);\r\n    stopsStore.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    routeStore.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n\r\n  }\r\n\r\n  private executeTranslation(\r\n    features,\r\n    reverseSearchProposal = false,\r\n    delay: number = 0,\r\n    overview: boolean = false) {\r\n    this.routeStore.clear();\r\n    const firstFeature = features.getArray()[0];\r\n    const translatedID = firstFeature.getId();\r\n    const translatedPos = translatedID.split('_');\r\n    let p;\r\n    switch (translatedPos[1]) {\r\n      case 'start':\r\n        p = 0;\r\n        break;\r\n      case 'end':\r\n        p = this.stops.length - 1;\r\n        break;\r\n      default:\r\n        p = Number(translatedPos[1]);\r\n        break;\r\n    }\r\n    const translationCoordinates = olproj.transform(\r\n      firstFeature.getGeometry().getCoordinates(),\r\n      this.map.projection,\r\n      this.projection\r\n    );\r\n    this.stops\r\n      .at(p)\r\n      .patchValue({ stopCoordinates: translationCoordinates, stopProposals: [] });\r\n    if (reverseSearchProposal) {\r\n      this.handleLocationProposals(translationCoordinates, p);\r\n    }\r\n\r\n    const directionsOptions = {\r\n      steps: true,\r\n      overview: false,\r\n      alternatives: true\r\n    } as DirectionsOptions;\r\n\r\n    if (overview) {\r\n      directionsOptions.overview = true;\r\n      directionsOptions.steps = false;\r\n      directionsOptions.alternatives = false;\r\n    }\r\n\r\n    if (delay > 0) {\r\n      if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves\r\n        clearTimeout(this.lastTimeoutRequest);\r\n      }\r\n      this.lastTimeoutRequest = setTimeout(() => {\r\n        this.getRoutes(undefined, directionsOptions);\r\n      }, delay);\r\n\r\n    } else {\r\n      clearTimeout(this.lastTimeoutRequest);\r\n      this.getRoutes(undefined, directionsOptions);\r\n    }\r\n\r\n  }\r\n\r\n  handleLocationProposals(coordinates: [number, number], stopIndex: number) {\r\n    const groupedLocations = [];\r\n    const roundedCoordinates = [coordinates[0].toFixed(5), coordinates[1].toFixed(5)];\r\n    this.stops.at(stopIndex).patchValue({ stopPoint: roundedCoordinates.join(',') });\r\n    this.searchService\r\n      .reverseSearch(coordinates, { zoom: this.map.viewController.getZoom() })\r\n      .map(res =>\r\n        this.routesQueries$$.push(\r\n          res.request.pipe(map(f => f)).subscribe(results => {\r\n            results.forEach(result => {\r\n              if (\r\n                groupedLocations.filter(f => f.source === result.source)\r\n                  .length === 0\r\n              ) {\r\n                groupedLocations.push({\r\n                  source: result.source,\r\n                  results: results.map(r => r.data)\r\n                });\r\n              }\r\n            });\r\n            this.stops\r\n              .at(stopIndex)\r\n              .patchValue({ stopProposals: groupedLocations });\r\n            // TODO: Prefer another source?\r\n            if (results[0]) {\r\n              if (results[0].source.getId() === 'icherchereverse') {\r\n                // prefer address type.\r\n                let resultPos = 0;\r\n                for (let i = 0; i < results.length; i++) {\r\n                  const feature: any = results[i].data;\r\n                  if (feature.properties.type === 'adresses') {\r\n                    resultPos = i;\r\n                    break;\r\n                  }\r\n                }\r\n                this.stops.at(stopIndex).patchValue({\r\n                  stopPoint: getEntityTitle(results[resultPos])\r\n                });\r\n                if (results[resultPos].data.geometry.type === 'Point') {\r\n                  this.stops.at(stopIndex).patchValue({\r\n                    stopCoordinates:\r\n                      results[resultPos].data.geometry.coordinates\r\n                  });\r\n                } else {\r\n                  // Not moving the translated point Only to suggest value into the UI.\r\n                }\r\n              } else if (results[0].source.getId() === 'coordinatesreverse') {\r\n                this.stops.at(stopIndex).patchValue({\r\n                  stopPoint: [\r\n                    results[0].data.geometry.coordinates[0].toFixed(5),\r\n                    results[0].data.geometry.coordinates[1].toFixed(5)\r\n                  ].join(',')\r\n                });\r\n                if (results[0].data.geometry.type === 'Point') {\r\n                  this.stops.at(stopIndex).patchValue({\r\n                    stopCoordinates:\r\n                      results[0].data.geometry.coordinates\r\n                  });\r\n                } else {\r\n                  // Not moving the translated point Only to suggest value into the UI.\r\n                }\r\n              }\r\n            } else {\r\n              this.stops.at(stopIndex).patchValue({ stopPoint: roundedCoordinates.join(','), stopProposals: [] });\r\n            }\r\n            this.changeDetectorRefs.detectChanges();\r\n          })\r\n        )\r\n      );\r\n  }\r\n\r\n  directionsText(index: number, stopsCounts = this.stops.length): string {\r\n    if (index === 0) {\r\n      return 'start';\r\n    } else if (index === stopsCounts - 1 || stopsCounts === 1) {\r\n      return 'end';\r\n    } else {\r\n      return 'intermediate';\r\n    }\r\n  }\r\n\r\n  raiseStop(index: number) {\r\n    if (index > 0) {\r\n      this.moveStop(index, -1);\r\n    }\r\n  }\r\n\r\n  lowerStop(index: number) {\r\n    if (index < this.stops.length - 1) {\r\n      this.moveStop(index, 1);\r\n    }\r\n  }\r\n\r\n  private moveStop(index, diff) {\r\n    const fromValue = this.stops.at(index);\r\n    this.removeStop(index);\r\n    this.stops.insert(index + diff, fromValue);\r\n    this.stops.at(index).patchValue({ directionsText: this.directionsText(index) });\r\n    this.stops\r\n      .at(index + diff)\r\n      .patchValue({ directionsText: this.directionsText(index + diff) });\r\n    if (this.stops.at(index).value.stopCoordinates) {\r\n      this.addStopOverlay(this.stops.at(index).value.stopCoordinates, index);\r\n    }\r\n    if (this.stops.at(index + diff).value.stopCoordinates) {\r\n      this.addStopOverlay(\r\n        this.stops.at(index + diff).value.stopCoordinates,\r\n        index + diff\r\n      );\r\n    }\r\n  }\r\n\r\n  get stops(): FormArray {\r\n    return this.stopsForm.get('stops') as FormArray;\r\n  }\r\n\r\n  public writeStopsToFormService() {\r\n    const stops = [];\r\n    this.stops.value.forEach(stop => {\r\n      if (stop.stopCoordinates instanceof Array) {\r\n        stops.push(stop);\r\n      }\r\n    });\r\n    this.directionsFormService.setStops(stops);\r\n  }\r\n\r\n  addStop(): void {\r\n    const insertIndex = this.stops.length - 1;\r\n    this.stops.insert(insertIndex, this.createStop());\r\n  }\r\n\r\n  createStop(directionsPos = 'intermediate'): FormGroup {\r\n    return this.formBuilder.group({\r\n      stopPoint: [''],\r\n      stopProposals: [[]],\r\n      directionsText: directionsPos,\r\n      stopCoordinates: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  removeStop(index: number): void {\r\n    const id = this.getStopOverlayID(index);\r\n    this.deleteStoreFeatureByID(this.stopsStore, id);\r\n    this.stops.removeAt(index);\r\n    let cnt = 0;\r\n    this.stops.value.forEach(stop => {\r\n      this.stops.at(cnt).patchValue({ directionsText: this.directionsText(cnt) });\r\n      this.addStopOverlay(this.stops.at(cnt).value.stopCoordinates, cnt);\r\n      cnt++;\r\n    });\r\n  }\r\n\r\n  resetForm() {\r\n    this.routesResults = undefined;\r\n    const nbStops = this.stops.length;\r\n    for (let i = 0; i < nbStops; i++) {\r\n      this.stops.removeAt(0);\r\n    }\r\n    this.stops.insert(0, this.createStop('start'));\r\n    this.stops.insert(1, this.createStop('end'));\r\n\r\n    this.stopsStore.clear();\r\n    this.routeStore.clear();\r\n  }\r\n\r\n  formatStep(step, cnt) {\r\n    return this.formatInstruction(\r\n      step.maneuver.type,\r\n      step.maneuver.modifier,\r\n      step.name,\r\n      step.maneuver.bearing_after,\r\n      cnt,\r\n      step.maneuver.exit,\r\n      cnt === this.activeRoute.steps.length - 1\r\n    );\r\n  }\r\n\r\n  formatInstruction(\r\n    type,\r\n    modifier,\r\n    route,\r\n    direction,\r\n    stepPosition,\r\n    exit,\r\n    lastStep = false\r\n  ) {\r\n    let directiveFr;\r\n    let directiveEn;\r\n    let image = 'forward';\r\n    let cssClass = 'rotate-270';\r\n    const translatedDirection = this.translateBearing(direction);\r\n    const translatedModifier = this.translateModifier(modifier);\r\n    const enPrefix = modifier === 'straight' ? '' : 'on the ';\r\n    const frPrefix = modifier === 'straight' ? '' : 'Ã  ';\r\n\r\n    let frAggregatedDirection = frPrefix + translatedModifier;\r\n    let enAggregatedDirection = enPrefix + translatedModifier;\r\n\r\n    if (modifier && modifier.search('slight') >= 0) {\r\n      enAggregatedDirection = translatedModifier;\r\n    }\r\n\r\n    if (modifier === 'uturn') {\r\n      image = 'forward';\r\n      cssClass = 'rotate-90';\r\n    } else if (modifier === 'sharp right') {\r\n      image = 'subdirectory-arrow-right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'right') {\r\n      image = 'subdirectory-arrow-right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'slight right') {\r\n      image = 'forward';\r\n      cssClass = 'rotate-290';\r\n    } else if (modifier === 'straight') {\r\n      image = 'forward';\r\n    } else if (modifier === 'slight left') {\r\n      image = 'forward';\r\n      cssClass = 'rotate-250';\r\n    } else if (modifier === 'left') {\r\n      image = 'subdirectory-arrow-left';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'sharp left') {\r\n      image = 'subdirectory-arrow-left';\r\n      cssClass = 'icon-flipped';\r\n    }\r\n\r\n    if (type === 'turn') {\r\n      if (modifier === 'straight') {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      } else if (modifier === 'uturn') {\r\n        directiveFr = 'Faire demi-tour sur ' + route;\r\n        directiveEn = 'Make u-turn on ' + route;\r\n      } else {\r\n        directiveFr = 'Tourner ' + frAggregatedDirection + ' sur ' + route;\r\n        directiveEn = 'Turn ' + translatedModifier + ' onto ' + route;\r\n      }\r\n    } else if (type === 'new name') {\r\n      directiveFr =\r\n        'Continuer en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'compass';\r\n      cssClass = '';\r\n    } else if (type === 'depart') {\r\n      directiveFr =\r\n        'Aller en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'compass';\r\n      cssClass = '';\r\n    } else if (type === 'arrive') {\r\n      if (lastStep) {\r\n        let coma = ', ';\r\n        if (!translatedModifier) {\r\n          frAggregatedDirection = '';\r\n          enAggregatedDirection = '';\r\n          coma = '';\r\n        }\r\n        directiveFr = 'Vous Ãªtes arrivÃ©' + coma + frAggregatedDirection;\r\n        directiveEn =\r\n          'You have reached your destination' + coma + enAggregatedDirection;\r\n      } else {\r\n        directiveFr = 'Vous atteignez le point intermÃ©diare sur ' + route;\r\n        directiveEn = 'You have reached the intermediate stop onto ' + route;\r\n        image = 'map-marker';\r\n        cssClass = '';\r\n      }\r\n    } else if (type === 'merge') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'on ramp') {\r\n      directiveFr = \"Prendre l'entrÃ©e d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take the ramp ' + enAggregatedDirection;\r\n    } else if (type === 'off ramp') {\r\n      directiveFr = \"Prendre la sortie d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take exit ' + enAggregatedDirection;\r\n    } else if (type === 'fork') {\r\n      if (modifier.search('left') >= 0) {\r\n        directiveFr = 'Garder la gauche sur ' + route;\r\n        directiveEn = 'Merge left onto ' + route;\r\n      } else if (modifier.search('right') >= 0) {\r\n        directiveFr = 'Garder la droite sur ' + route;\r\n        directiveEn = 'Merge right onto ' + route;\r\n      } else {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      }\r\n    } else if (type === 'end of road') {\r\n      directiveFr =\r\n        'Ã la fin de la route, tourner ' + translatedModifier + ' sur ' + route;\r\n      directiveEn =\r\n        'At the end of the road, turn ' + translatedModifier + ' onto ' + route;\r\n    } else if (type === 'use lane') {\r\n      directiveFr = 'Prendre la voie de ... ';\r\n      directiveEn = 'Take the lane ...';\r\n    } else if (type === 'continue' && modifier !== 'uturn') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'roundabout') {\r\n      directiveFr = 'Au rond-point, prendre la ' + exit;\r\n      directiveFr += exit === 1 ? 're' : 'e';\r\n      directiveFr += ' sortie vers ' + route;\r\n      directiveEn = 'At the roundabout, take the ' + exit;\r\n      directiveEn += exit === 1 ? 'st' : 'rd';\r\n      directiveEn += ' exit towards ' + route;\r\n      image = 'chart-donut';\r\n      cssClass = '';\r\n    } else if (type === 'rotary') {\r\n      directiveFr = 'Rond-point rotary....';\r\n      directiveEn = 'Roundabout rotary....';\r\n      image = 'chart-donut';\r\n      cssClass = '';\r\n    } else if (type === 'roundabout turn') {\r\n      directiveFr = 'Rond-point, prendre la ...';\r\n      directiveEn = 'Roundabout, take the ...';\r\n      image = 'chart-donut';\r\n      cssClass = '';\r\n    } else if (type === 'exit roundabout') {\r\n      directiveFr = 'Poursuivre vers ' + route;\r\n      directiveEn = 'Continue to ' + route;\r\n      image = 'forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'notification') {\r\n      directiveFr = 'notification ....';\r\n      directiveEn = 'notification ....';\r\n    } else if (modifier === 'uturn') {\r\n      directiveFr =\r\n        'Faire demi-tour et continuer en direction ' +\r\n        translatedDirection +\r\n        ' sur ' +\r\n        route;\r\n      directiveEn =\r\n        'Make u-turn and head ' + translatedDirection + ' on ' + route;\r\n    } else {\r\n      directiveFr = '???';\r\n      directiveEn = '???';\r\n    }\r\n\r\n    if (lastStep) {\r\n      image = 'flag-variant';\r\n      cssClass = '';\r\n    }\r\n    if (stepPosition === 0) {\r\n      image = 'compass';\r\n      cssClass = '';\r\n    }\r\n\r\n    let directive;\r\n    if (this.browserLanguage === 'fr') {\r\n      directive = directiveFr;\r\n    } else if (this.browserLanguage === 'en') {\r\n      directive = directiveEn;\r\n    }\r\n\r\n    return { instruction: directive, image, cssClass };\r\n  }\r\n\r\n  translateModifier(modifier) {\r\n    if (modifier === 'uturn') {\r\n      return this.languageService.translate.instant('igo.geo.directions.uturn');\r\n    } else if (modifier === 'sharp right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.directions.sharp right'\r\n      );\r\n    } else if (modifier === 'right') {\r\n      return this.languageService.translate.instant('igo.geo.directions.right');\r\n    } else if (modifier === 'slight right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.directions.slight right'\r\n      );\r\n    } else if (modifier === 'sharp left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.directions.sharp left'\r\n      );\r\n    } else if (modifier === 'left') {\r\n      return this.languageService.translate.instant('igo.geo.directions.left');\r\n    } else if (modifier === 'slight left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.directions.slight left'\r\n      );\r\n    } else if (modifier === 'straight') {\r\n      return this.languageService.translate.instant('igo.geo.directions.straight');\r\n    } else {\r\n      return modifier;\r\n    }\r\n  }\r\n\r\n  translateBearing(bearing) {\r\n    if (bearing >= 337 || bearing < 23) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.n');\r\n    } else if (bearing < 67) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.ne'\r\n      );\r\n    } else if (bearing < 113) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.e');\r\n    } else if (bearing < 157) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.se'\r\n      );\r\n    } else if (bearing < 203) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.s');\r\n    } else if (bearing < 247) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.sw'\r\n      );\r\n    } else if (bearing < 293) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.w');\r\n    } else if (bearing < 337) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.nw'\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  formatDistance(distance) {\r\n    if (distance === 0) {\r\n      return;\r\n    }\r\n    if (distance >= 100000) {\r\n      return Math.round(distance / 1000) + ' km';\r\n    }\r\n    if (distance >= 10000) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    if (distance >= 100) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    return distance + ' m';\r\n  }\r\n\r\n  formatDuration(duration: number, summary = false) {\r\n    if (duration >= 3600) {\r\n      const hour = Math.floor(duration / 3600);\r\n      const minute = Math.round((duration / 3600 - hour) * 60);\r\n      if (minute === 60) {\r\n        return hour + 1 + ' h';\r\n      }\r\n      return hour + ' h ' + minute + ' min';\r\n    }\r\n\r\n    if (duration >= 60) {\r\n      return Math.round(duration / 60) + ' min';\r\n    }\r\n    return duration + ' s';\r\n  }\r\n\r\n  showSegment(step, zoomToExtent = false) {\r\n    this.showRouteSegmentGeometry(step.geometry.coordinates, zoomToExtent);\r\n  }\r\n\r\n  showRouteSegmentGeometry(coordinates, zoomToExtent = false) {\r\n    const vertexId = 'vertex';\r\n    const geometry4326 = new olgeom.LineString(coordinates);\r\n    const geometryMapProjection = geometry4326.transform('EPSG:4326', this.map.projection);\r\n    const routeSegmentCoordinates = (geometryMapProjection as any).getCoordinates();\r\n    const lastPoint = routeSegmentCoordinates[0];\r\n\r\n    const geometry = new olgeom.Point(lastPoint);\r\n    const feature = new olFeature({ geometry });\r\n\r\n    const geojsonGeom = new OlGeoJSON().writeGeometryObject(geometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: this.map.projection\r\n    });\r\n\r\n    const previousVertex = this.routeStore.get(vertexId);\r\n    const previousVertexRevision = previousVertex ? previousVertex.meta.revision : 0;\r\n\r\n    const vertexFeature: Feature = {\r\n      type: FEATURE,\r\n      geometry: geojsonGeom,\r\n      projection: this.map.projection,\r\n      properties: {\r\n        id: vertexId,\r\n        type: 'vertex'\r\n      },\r\n      meta: {\r\n        id: vertexId,\r\n        revision: previousVertexRevision + 1\r\n      },\r\n      ol: feature\r\n    };\r\n    this.routeStore.update(vertexFeature);\r\n    if (zoomToExtent) {\r\n      this.map.viewController.zoomToExtent(feature.getGeometry().getExtent());\r\n    }\r\n  }\r\n\r\n  zoomRoute(extent?) {\r\n\r\n    if (extent) {\r\n      this.map.viewController.zoomToExtent(extent);\r\n    } else {\r\n      const routeFeature = this.routeStore.layer.ol.getSource().getFeatures().find(f => f.getId() === 'route');\r\n      if (routeFeature) {\r\n        const routeExtent = routeFeature.getGeometry().getExtent();\r\n        this.map.viewController.zoomToExtent(routeExtent);\r\n      }\r\n    }\r\n  }\r\n\r\n  private showRouteGeometry(moveToExtent = false) {\r\n    const geom = this.activeRoute.geometry.coordinates;\r\n    const geometry4326 = new olgeom.LineString(geom);\r\n    const geometryMapProjection = geometry4326.transform('EPSG:4326', this.map.projection);\r\n    if (moveToExtent) {\r\n      this.zoomRoute(geometryMapProjection.getExtent());\r\n    }\r\n\r\n    const geojsonGeom = new OlGeoJSON().writeGeometryObject(geometryMapProjection, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: this.map.projection\r\n    });\r\n\r\n    const previousRoute = this.routeStore.get('route');\r\n    const previousRouteRevision = previousRoute ? previousRoute.meta.revision : 0;\r\n\r\n    const routeFeature: Feature = {\r\n      type: FEATURE,\r\n      geometry: geojsonGeom,\r\n      projection: this.map.projection,\r\n      properties: {\r\n        id: 'route',\r\n        type: 'route'\r\n      },\r\n      meta: {\r\n        id: 'route',\r\n        revision: previousRouteRevision + 1\r\n      },\r\n      ol: new olFeature({ geometry: geometryMapProjection })\r\n    };\r\n    this.routeStore.update(routeFeature);\r\n\r\n  }\r\n\r\n  getRoutes(moveToExtent: boolean = false, directionsOptions: DirectionsOptions = {}) {\r\n    this.deleteStoreFeatureByID(this.routeStore, 'vertex');\r\n    this.writeStopsToFormService();\r\n    const coords = this.directionsFormService.getStopsCoordinates();\r\n    if (coords.length < 2) {\r\n      return;\r\n    }\r\n    const routeResponse = this.directionsService.route(coords, directionsOptions);\r\n    if (routeResponse) {\r\n      routeResponse.map(res =>\r\n        this.routesQueries$$.push(\r\n          res.subscribe(route => {\r\n            this.routesResults = route;\r\n            this.activeRoute = this.routesResults[0] as Directions;\r\n            this.showRouteGeometry(moveToExtent);\r\n            this.changeDetectorRefs.detectChanges();\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  private unlistenSingleClick() {\r\n    if (this.focusKey.length !== 0) {\r\n      this.focusKey.forEach(key => {\r\n        olobservable.unByKey(key);\r\n      });\r\n    }\r\n  }\r\n\r\n  private unsubscribeRoutesQueries() {\r\n    this.routesQueries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.routesQueries$$ = [];\r\n  }\r\n\r\n  copyLinkToClipboard() {\r\n    const successful = Clipboard.copy(this.getUrl());\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.directionsForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.directionsForm.dialog.copyMsgLink');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  copyDirectionsToClipboard() {\r\n    const indent = '\\t';\r\n    let activeRouteDirective =\r\n      this.languageService.translate.instant(\r\n        'igo.geo.directionsForm.instructions'\r\n      ) + ':\\n';\r\n    let wayPointList = '';\r\n    const summary =\r\n      this.languageService.translate.instant('igo.geo.directionsForm.summary') +\r\n      ': \\n' +\r\n      indent +\r\n      this.activeRoute.title +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDistance(this.activeRoute.distance) +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDuration(this.activeRoute.duration) +\r\n      '\\n\\n' +\r\n      this.languageService.translate.instant('igo.geo.directionsForm.stopsList') +\r\n      ':\\n';\r\n\r\n    const url =\r\n      this.languageService.translate.instant('igo.geo.directionsForm.link') +\r\n      ':\\n' +\r\n      indent +\r\n      this.getUrl();\r\n\r\n    let wayPointsCnt = 1;\r\n    this.stops.value.forEach(stop => {\r\n      let coord = '';\r\n      let stopPoint = '';\r\n      if (stop.stopPoint !== stop.stopCoordinates) {\r\n        stopPoint = stop.stopPoint;\r\n        coord =\r\n          ' (' +\r\n          [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(',') +\r\n          ')';\r\n      } else {\r\n        stopPoint = [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(\r\n          ','\r\n        );\r\n      }\r\n\r\n      wayPointList =\r\n        wayPointList +\r\n        indent +\r\n        wayPointsCnt.toLocaleString() +\r\n        '. ' +\r\n        stopPoint +\r\n        coord +\r\n        '\\n';\r\n      wayPointsCnt++;\r\n    });\r\n\r\n    // Directions\r\n    let localCnt = 0;\r\n    this.activeRoute.steps.forEach(step => {\r\n      const instruction = this.formatStep(step, localCnt).instruction;\r\n      const distance =\r\n        this.formatDistance(step.distance) === undefined\r\n          ? ''\r\n          : ' (' + this.formatDistance(step.distance) + ')';\r\n      activeRouteDirective =\r\n        activeRouteDirective +\r\n        indent +\r\n        (localCnt + 1).toLocaleString() +\r\n        '. ' +\r\n        instruction +\r\n        distance +\r\n        '\\n';\r\n      localCnt++;\r\n    });\r\n\r\n    const directionsBody =\r\n      summary + wayPointList + '\\n' + url + '\\n\\n' + activeRouteDirective;\r\n\r\n    const successful = Clipboard.copy(directionsBody);\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.directionsForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.directionsForm.dialog.copyMsg');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  private handleTermChanged(term: string) {\r\n    if (term !== undefined || term.length !== 0) {\r\n      const searchProposals = [];\r\n      if (this.search$$) {\r\n        this.search$$.unsubscribe();\r\n      }\r\n      const researches = this.searchService.search(term, {searchType: 'Feature'});\r\n      researches.map(res =>\r\n        this.search$$ =\r\n        res.request.subscribe(results => {\r\n          results\r\n            .filter(r => r.data.geometry)\r\n            .forEach(element => {\r\n              if (\r\n                searchProposals.filter(r => r.source === element.source)\r\n                  .length === 0\r\n              ) {\r\n                searchProposals.push({\r\n                  source: element.source,\r\n                  meta: element.meta,\r\n                  results: results.map(r => r.data)\r\n                });\r\n              }\r\n            });\r\n          this.stops\r\n            .at(this.currentStopIndex)\r\n            .patchValue({ stopProposals: searchProposals });\r\n          this.changeDetectorRefs.detectChanges();\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  setTerm(term: string) {\r\n    this.term = term;\r\n    if (\r\n      this.keyIsValid(term) &&\r\n      (term.length >= this.length || term.length === 0)\r\n    ) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  private keyIsValid(key: string) {\r\n    return this.invalidKeys.find(value => value === key) === undefined;\r\n  }\r\n\r\n  keyup(i, event: KeyboardEvent) {\r\n    const term = (event.target as HTMLInputElement).value;\r\n    this.setTerm(term);\r\n    this.map.ol.un('singleclick', evt => {\r\n      this.handleMapClick(evt, i);\r\n    });\r\n  }\r\n\r\n  clearStop(stopIndex) {\r\n    // this.deleteDirectionsOverlaybyID(this.getStopOverlayID(stopIndex));\r\n    const id = this.getStopOverlayID(stopIndex);\r\n    this.deleteStoreFeatureByID(this.stopsStore, id);\r\n    this.routeStore.clear();\r\n    const stopsCounts = this.stops.length;\r\n    this.stops.removeAt(stopIndex);\r\n    this.stops.insert(stopIndex, this.createStop(this.directionsText(stopIndex, stopsCounts)));\r\n    this.routesResults = undefined;\r\n    this.getRoutes();\r\n  }\r\n\r\n  chooseProposal(proposal, i) {\r\n    if (proposal !== undefined) {\r\n      let geomCoord;\r\n      const geom = (proposal as any).geometry;\r\n      if (geom.type === 'Point') {\r\n        geomCoord = geom.coordinates;\r\n      } else if (geom.type.search('Line') >= 0) {\r\n        const line = (new OlGeoJSON()).readFeatures(geom);\r\n        geomCoord = line[0].getGeometry().getFirstCoordinate();\r\n        geomCoord = [geomCoord[0], geomCoord[1]];\r\n      } else if (geom.type.search('Polygon') >= 0) {\r\n        const poly = (new OlGeoJSON()).readFeatures(geom);\r\n        geomCoord = poly[0].getGeometry().getInteriorPoints().getFirstCoordinate();\r\n        geomCoord = [geomCoord[0], geomCoord[1]];\r\n      }\r\n\r\n      if (geomCoord !== undefined) {\r\n        this.stops.at(i).patchValue({ stopCoordinates: geomCoord });\r\n        this.addStopOverlay(geomCoord, i);\r\n      /*  const proposalExtent = this.directionsStopsOverlayDataSource.ol\r\n          .getFeatureById(this.getStopOverlayID(i))\r\n          .getGeometry()\r\n          .getExtent();*/\r\n\r\n       /* if (!olextent.intersects(proposalExtent, this.map.viewController.getExtent())) {\r\n          this.map.viewController.moveToExtent(proposalExtent);\r\n        }*/\r\n      }\r\n    }\r\n  }\r\n\r\n  focus(i) {\r\n    this.unlistenSingleClick();\r\n    this.currentStopIndex = i;\r\n    this.focusOnStop = true;\r\n    this.focusKey.push(\r\n      this.map.ol.once('singleclick', evt => {\r\n        this.handleMapClick(evt, i);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleMapClick(event: olcondition, indexPos?) {\r\n    if (this.currentStopIndex === undefined) {\r\n      this.addStop();\r\n      indexPos = this.stops.length - 2;\r\n      this.stops.at(indexPos).value.stopProposals = [];\r\n    } else {\r\n      indexPos = this.currentStopIndex;\r\n    }\r\n    const clickCoordinates = olproj.transform(\r\n      event.coordinate,\r\n      this.map.projection,\r\n      this.projection\r\n    );\r\n    this.stops.at(indexPos).patchValue({ stopProposals: [], stopCoordinates: clickCoordinates });\r\n\r\n    this.handleLocationProposals(clickCoordinates, indexPos);\r\n    this.addStopOverlay(clickCoordinates, indexPos);\r\n    setTimeout(() => {\r\n      this.focusOnStop = false; // prevent to trigger map click and Select on routes at same time.\r\n    }, 500);\r\n  }\r\n\r\n  geolocateStop(index: number) {\r\n    moveToOlFeatures(this.map, [this.map.geolocationFeature], FeatureMotion.Move);\r\n    const geolocateCoordinates = this.map.viewController.getCenter(this.projection);\r\n    this.stops.at(index).patchValue({ stopCoordinates: geolocateCoordinates });\r\n    this.addStopOverlay(geolocateCoordinates, index);\r\n    this.handleLocationProposals(geolocateCoordinates, index);\r\n  }\r\n\r\n  public addStopOverlay(coordinates: [number, number], index: number) {\r\n    const directionsText = this.directionsText(index);\r\n    let stopColor;\r\n    let stopText;\r\n    if (directionsText === 'start') {\r\n      stopColor = 'green';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.directionsForm.start'\r\n      );\r\n    } else if (directionsText === 'end') {\r\n      stopColor = 'red';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.directionsForm.end'\r\n      );\r\n    } else {\r\n      stopColor = 'yellow';\r\n      stopText =\r\n        this.languageService.translate.instant(\r\n          'igo.geo.directionsForm.intermediate'\r\n        ) +\r\n        ' #' +\r\n        index;\r\n    }\r\n\r\n    const geometry = new olgeom.Point(\r\n      olproj.transform(coordinates, this.projection, this.map.projection)\r\n    );\r\n\r\n    const stopID = this.getStopOverlayID(index);\r\n    const geojsonGeom = new OlGeoJSON().writeGeometryObject(geometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: this.map.projection\r\n    });\r\n\r\n    const previousStop = this.stopsStore.get(stopID);\r\n    const previousStopRevision = previousStop ? previousStop.meta.revision : 0;\r\n\r\n    const stopFeature: Feature = {\r\n      type: FEATURE,\r\n      geometry: geojsonGeom,\r\n      projection: this.map.projection,\r\n      properties: {\r\n        id: stopID,\r\n        type: 'stop',\r\n        stopText,\r\n        stopColor,\r\n        stopOpacity: 1\r\n      },\r\n      meta: {\r\n        id: stopID,\r\n        revision: previousStopRevision + 1\r\n      },\r\n      ol: new olFeature({ geometry })\r\n    };\r\n\r\n    this.stopsStore.update(stopFeature);\r\n    this.getRoutes();\r\n\r\n  }\r\n\r\n  public getStopOverlayID(index: number): string {\r\n    let txt;\r\n    if (index === 0) {\r\n      txt = 'start';\r\n    } else if (index === this.stops.length - 1) {\r\n      txt = 'end';\r\n    } else {\r\n      txt = index;\r\n    }\r\n    return 'directionsStop_' + txt;\r\n  }\r\n\r\n  private deleteStoreFeatureByID(store, id) {\r\n    const entity = store.get(id);\r\n    if (entity) {\r\n      store.delete(entity);\r\n    }\r\n  }\r\n\r\n  private getUrl() {\r\n    if (!this.route) {\r\n      return;\r\n    }\r\n\r\n    const directionsKey = this.route.options.directionsCoordKey;\r\n    const stopsCoordinates = [];\r\n    if (\r\n      this.directionsFormService &&\r\n      this.directionsFormService.getStopsCoordinates() &&\r\n      this.directionsFormService.getStopsCoordinates().length !== 0\r\n    ) {\r\n      this.directionsFormService.getStopsCoordinates().forEach(coord => {\r\n        stopsCoordinates.push(roundCoordTo(coord, 6));\r\n      });\r\n    }\r\n    let directionsUrl = '';\r\n    if (stopsCoordinates.length >= 2) {\r\n      directionsUrl = `${directionsKey}=${stopsCoordinates.join(';')}`;\r\n    }\r\n\r\n    return `${location.origin}${\r\n      location.pathname\r\n    }?tool=directions&${directionsUrl}`;\r\n  }\r\n}\r\n\r\n/**\r\n * Create a style for the directions stops and routes\r\n * @param feature OlFeature\r\n * @returns OL style function\r\n */\r\nexport function stopMarker(feature: olFeature, resolution: number): olstyle.Style {\r\n\r\n  const vertexStyle = [\r\n    new olstyle.Style({\r\n      geometry: feature.getGeometry(),\r\n      image: new olstyle.Circle({\r\n        radius: 7,\r\n        stroke: new olstyle.Stroke({ color: '#FF0000', width: 3 })\r\n      })\r\n    })\r\n  ];\r\n\r\n  const stopStyle = new olstyle.Style({\r\n    image: new olstyle.Icon({\r\n      src: './assets/igo2/geo/icons/place_' + feature.get('stopColor') + '_36px.svg',\r\n      opacity : feature.get('stopOpacity'),\r\n      imgSize: [36, 36], // for ie\r\n      anchor: [0.5, 0.92]\r\n    }),\r\n\r\n    text: new olstyle.Text({\r\n      text: feature.get('stopText'),\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n\r\n  const routeStyle = [\r\n    new olstyle.Style({\r\n      stroke: new olstyle.Stroke({ color: '#6a7982', width: 10, opacity: 0.75 })\r\n    }),\r\n    new olstyle.Style({\r\n      stroke: new olstyle.Stroke({ color: '#4fa9dd', width: 6, opacity: 0.75 })\r\n    })\r\n  ];\r\n\r\n  if (feature.get('type') === 'stop') {\r\n    return stopStyle;\r\n  }\r\n  if (feature.get('type') === 'vertex') {\r\n    return vertexStyle;\r\n  }\r\n  if (feature.get('type') === 'route') {\r\n    return routeStyle;\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  AfterViewInit,\r\n  Optional\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { DirectionsFormComponent } from './directions-form.component';\r\nimport { DirectionsFormService } from './directions-form.service';\r\n\r\n@Directive({\r\n  selector: '[igoDirectionsFormBinding]'\r\n})\r\nexport class DirectionsFormBindingDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    @Self() private component: DirectionsFormComponent,\r\n    private directionsFormService: DirectionsFormService,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    const storedStops = this.directionsFormService.getStops();\r\n    if (\r\n      !storedStops && this.route &&\r\n      this.route.options.directionsCoordKey\r\n    ) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const directionsParams =\r\n          params[this.route.options.directionsCoordKey as string];\r\n        const stopsCoordinatesFromURL = [];\r\n        if (directionsParams) {\r\n          const directionsCoordUrl = directionsParams.split(';');\r\n          if (directionsCoordUrl.length >= 2) {\r\n            let cnt = 0;\r\n            directionsCoordUrl.forEach(coord => {\r\n              if (cnt !== 0 && cnt !== directionsCoordUrl.length - 1) {\r\n                this.component.stops.insert(cnt, this.component.createStop());\r\n              }\r\n\r\n              const stopCoordinatesFromURL = JSON.parse('[' + coord + ']');\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopCoordinates: stopCoordinatesFromURL });\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopPoint: stopCoordinatesFromURL });\r\n              this.component.handleLocationProposals(\r\n                stopCoordinatesFromURL,\r\n                cnt\r\n              );\r\n\r\n              stopsCoordinatesFromURL.push(stopCoordinatesFromURL);\r\n              this.component.addStopOverlay(stopCoordinatesFromURL, cnt);\r\n              cnt++;\r\n            });\r\n            this.component.getRoutes(true);\r\n          }\r\n        }\r\n      });\r\n    } else if (storedStops) {\r\n      for (let i = 0; i < storedStops.length; i++) {\r\n        if (i !== 0 && i !== storedStops.length - 1) {\r\n          this.component.stops.insert(i, this.component.createStop());\r\n        }\r\n        if (storedStops[i].stopCoordinates instanceof Array) {\r\n          this.component.addStopOverlay(storedStops[i].stopCoordinates, i);\r\n          this.component.stops.at(i).patchValue(storedStops[i] );\r\n        }\r\n      }\r\n      this.component.getRoutes();\r\n    }\r\n    this.component.writeStopsToFormService();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatListModule,\r\n  MatDividerModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatTooltipModule,\r\n  MatAutocompleteModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { DirectionsFormComponent } from './directions-form/directions-form.component';\r\nimport { DirectionsFormBindingDirective } from './directions-form/directions-form-binding.directive';\r\nimport { DirectionsFormService } from './directions-form/directions-form.service';\r\nimport { provideDirectionsSourceService } from './shared/directions-source.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatListModule,\r\n    MatDividerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [DirectionsFormComponent, DirectionsFormBindingDirective],\r\n  declarations: [DirectionsFormComponent, DirectionsFormBindingDirective],\r\n  providers: [DirectionsFormService, provideDirectionsSourceService()]\r\n})\r\nexport class IgoDirectionsModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDirectionsModule\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceService } from './search-source.service';\r\n\r\n/**\r\n * Search source factory\r\n * @ignore\r\n */\r\nexport function searchSourceServiceFactory(sources: SearchSource[]) {\r\n  return new SearchSourceService(sources);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the SearchSource service\r\n */\r\nexport function provideSearchSourceService() {\r\n  return {\r\n    provide: SearchSourceService,\r\n    useFactory: searchSourceServiceFactory,\r\n    deps: [SearchSource]\r\n  };\r\n}\r\n","import { Injectable, Inject, Injector } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '@igo2/auth';\r\nimport { LanguageService } from '@igo2/core';\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\nimport { GoogleLinks } from './../../../utils/googleLinks';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  IChercheData,\r\n  IChercheResponse,\r\n  IChercheReverseData,\r\n  IChercheReverseResponse\r\n} from './icherche.interfaces';\r\n\r\n@Injectable()\r\nexport class IChercheSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * ICherche search source\r\n */\r\n@Injectable()\r\nexport class IChercheSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'icherche';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  private hashtagsLieuxToKeep = [];\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: SearchSourceOptions,\r\n    @Inject(IChercheSearchResultFormatter)\r\n    private formatter: IChercheSearchResultFormatter,\r\n    injector: Injector\r\n  ) {\r\n    super(options);\r\n\r\n    this.languageService.translate\r\n      .get(this.options.title)\r\n      .subscribe(title => this.title$.next(title));\r\n\r\n    const authService = injector.get(AuthService);\r\n    if (this.settings.length) {\r\n      if (!authService) {\r\n        this.getAllowedTypes();\r\n      } else {\r\n        authService.authenticate$.subscribe(() => {\r\n          this.getAllowedTypes();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return IChercheSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    const limit =\r\n      this.options.params && this.options.params.limit\r\n        ? Number(this.options.params.limit)\r\n        : undefined;\r\n    const ecmax =\r\n      this.options.params && this.options.params.ecmax\r\n        ? Number(this.options.params.ecmax)\r\n        : undefined;\r\n    const types =\r\n      this.options.params && this.options.params.type\r\n        ? this.options.params.type\r\n            .replace(/\\s/g, '')\r\n            .toLowerCase()\r\n            .split(',')\r\n        : [\r\n            'adresses',\r\n            'codes-postaux',\r\n            'routes',\r\n            'municipalites',\r\n            'mrc',\r\n            'regadmin',\r\n            'lieux'\r\n          ];\r\n    return {\r\n      title: 'igo.geo.search.icherche.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/icherche',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.icherche.type.address',\r\n              value: 'adresses',\r\n              enabled: types.indexOf('adresses') !== -1,\r\n              hashtags: ['adresse']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.oldAddress',\r\n              value: 'anciennes-adresses',\r\n              enabled: types.indexOf('anciennes-adresses') !== -1,\r\n              hashtags: ['anciennes-adresses']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.postalCode',\r\n              value: 'codes-postaux',\r\n              enabled: types.indexOf('codes-postaux') !== -1,\r\n              hashtags: ['code-postal']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.road',\r\n              value: 'routes',\r\n              enabled: types.indexOf('routes') !== -1,\r\n              hashtags: ['route']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.city',\r\n              value: 'municipalites',\r\n              enabled: types.indexOf('municipalites') !== -1,\r\n              hashtags: ['municipalitÃ©', 'mun']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.oldCity',\r\n              value: 'anciennes-municipalites',\r\n              enabled: types.indexOf('anciennes-municipalites') !== -1,\r\n              hashtags: ['anciennes-municipalites']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.mrc',\r\n              value: 'mrc',\r\n              enabled: types.indexOf('mrc') !== -1,\r\n              hashtags: ['mrc']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.regadmin',\r\n              value: 'regadmin',\r\n              enabled: types.indexOf('regadmin') !== -1,\r\n              hashtags: ['rÃ©gion-administrative', 'regadmin']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.entreprise',\r\n              value: 'entreprises',\r\n              enabled: types.indexOf('entreprises') !== -1,\r\n              available: false,\r\n              hashtags: ['entreprise']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.place',\r\n              value: 'lieux',\r\n              enabled: types.indexOf('lieux') !== -1,\r\n              hashtags: ['lieu']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.sumi',\r\n              value: 'bornes-sumi',\r\n              enabled: types.indexOf('bornes-sumi') !== -1,\r\n              hashtags: ['borne', 'bornes', 'sumi']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.km',\r\n              value: 'bornes-km',\r\n              enabled: false,\r\n              hashtags: ['borne', 'bornes', 'repÃ¨re', 'km']\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '1',\r\n              value: 1,\r\n              enabled: limit === 1\r\n            },\r\n            {\r\n              title: '5',\r\n              value: 5,\r\n              enabled: limit === 5 || !limit\r\n            },\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: limit === 10\r\n            },\r\n            {\r\n              title: '25',\r\n              value: 25,\r\n              enabled: limit === 25\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: limit === 50\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'ecmax',\r\n          name: 'ecmax',\r\n          values: [\r\n            {\r\n              title: '10 %',\r\n              value: 10,\r\n              enabled: ecmax === 10\r\n            },\r\n            {\r\n              title: '30 %',\r\n              value: 30,\r\n              enabled: ecmax === 30 || !ecmax\r\n            },\r\n            {\r\n              title: '50 %',\r\n              value: 50,\r\n              enabled: ecmax === 50\r\n            },\r\n            {\r\n              title: '75 %',\r\n              value: 75,\r\n              enabled: ecmax === 75\r\n            },\r\n            {\r\n              title: '100 %',\r\n              value: 100,\r\n              enabled: ecmax === 100\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'restrictExtent',\r\n          name: 'loc',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.icherche.restrictExtent.map',\r\n              value: 'true',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.restrictExtent.quebec',\r\n              value: 'false',\r\n              enabled: true\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(term, options || {});\r\n    if (!params.get('type').length) {\r\n      return of([]);\r\n    }\r\n    this.options.params.page = params.get('page') || '1';\r\n\r\n    return this.http.get(`${this.searchUrl}/geocode`, { params }).pipe(\r\n      map((response: IChercheResponse) => this.extractResults(response)),\r\n      catchError(err => {\r\n        err.error.toDisplay = true;\r\n        err.error.title = this.languageService.translate.instant(\r\n          this.getDefaultOptions().title\r\n        );\r\n        throw err;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getAllowedTypes() {\r\n    return this.http\r\n      .get(`${this.searchUrl}/types`)\r\n      .subscribe((types: string[]) => {\r\n        const typeSetting = this.settings.find(s => s.name === 'type');\r\n        typeSetting.values.forEach(v => {\r\n          const regex = new RegExp(`^${v.value}(\\\\.|$)`);\r\n          const typesMatched = types.filter(value => regex.test(value));\r\n          v.available = typesMatched.length > 0;\r\n          if (v.value === 'lieux') {\r\n            this.hashtagsLieuxToKeep = [\r\n              ...(new Set(\r\n                typesMatched\r\n                  .map(t => t.split('.'))\r\n                  .reduce((a, b) => a.concat(b))\r\n                  .filter(t => t !== 'lieux')\r\n              ) as any)\r\n            ];\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  private computeRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    const queryParams: any = Object.assign(\r\n      {\r\n        geometry: true,\r\n        bbox: true,\r\n        icon: true,\r\n        type:\r\n          'adresses,codes-postaux,municipalites,mrc,regadmin,lieux,entreprises,bornes-sumi'\r\n      },\r\n      this.params,\r\n      this.computeOptionsParam(term, options || {}).params,\r\n      {\r\n        q: this.computeTerm(term),\r\n        page: options.page\r\n      }\r\n    );\r\n\r\n    if (queryParams.loc === 'true') {\r\n      const [xMin, yMin, xMax, yMax] = options.extent;\r\n      queryParams.loc = `${xMin},${yMin};${xMax},${yMin};${xMax},${yMax};${xMin},${yMax};${xMin},${yMin}`;\r\n    } else if (queryParams.loc === 'false') {\r\n      delete queryParams.loc;\r\n    }\r\n\r\n    if (queryParams.q.indexOf('#') !== -1) {\r\n      queryParams.type = 'lieux';\r\n    }\r\n\r\n    return new HttpParams({ fromObject: ObjectUtils.removeUndefined(queryParams) });\r\n  }\r\n\r\n  private extractResults(response: IChercheResponse): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheData) => {\r\n      return this.formatter.formatResult(this.dataToResult(data, response));\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: IChercheData, response?: IChercheResponse): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, properties.code].join('.');\r\n\r\n    const titleHtml = data.highlight.title || data.properties.nom;\r\n    const subtitleHtml = data.highlight.title2\r\n      ? ' <small> ' + data.highlight.title2 + '</small>'\r\n      : '';\r\n    const subtitleHtml2 = data.highlight.title3\r\n      ? '<br><small> ' + data.highlight.title3 + '</small>'\r\n      : '';\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        titleHtml: titleHtml + subtitleHtml + subtitleHtml2,\r\n        icon: data.icon || 'map-marker',\r\n        nextPage: response.features.length % +this.options.params.limit === 0 && +this.options.params.page < 10\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheSearchSource.propertiesBlacklist\r\n    );\r\n\r\n    if (data.geometry === undefined) {\r\n      return Object.assign({ type: data.index }, properties);\r\n    }\r\n\r\n    const googleLinksProperties: {\r\n      GoogleMaps: string;\r\n      GoogleStreetView?: string;\r\n    } = {\r\n      GoogleMaps: GoogleLinks.getGoogleMapsLink(\r\n        data.geometry.coordinates[0],\r\n        data.geometry.coordinates[1]\r\n      )\r\n    };\r\n    if (data.geometry.type === 'Point') {\r\n      googleLinksProperties.GoogleStreetView = GoogleLinks.getGoogleStreetViewLink(\r\n        data.geometry.coordinates[0],\r\n        data.geometry.coordinates[1]\r\n      );\r\n    }\r\n\r\n    return Object.assign(\r\n      { type: data.index },\r\n      properties,\r\n      googleLinksProperties\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove hashtag from query\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTerm(term: string): string {\r\n    // Keep hashtags for \"lieux\"\r\n    const hashtags = term.match(/(#[^\\s]+)/g) || [];\r\n    let keep = false;\r\n    keep = hashtags.some(hashtag => {\r\n      const hashtagKey = hashtag.substring(1);\r\n      return this.hashtagsLieuxToKeep.some(\r\n        h =>\r\n          h\r\n            .toLowerCase()\r\n            .normalize('NFD')\r\n            .replace(/[\\u0300-\\u036f]/g, '') ===\r\n          hashtagKey\r\n            .toLowerCase()\r\n            .normalize('NFD')\r\n            .replace(/[\\u0300-\\u036f]/g, '')\r\n      );\r\n    });\r\n\r\n    if (!keep) {\r\n      term = term.replace(/(#[^\\s]*)/g, '');\r\n    }\r\n\r\n    return term.replace(/[^\\wÃ-Ã¿ !\\-\\(\\),'#]+/g, '');\r\n  }\r\n\r\n  /**\r\n   * Add hashtag to param if valid\r\n   * @param term Query with hashtag\r\n   * @param options TextSearchOptions\r\n   */\r\n  private computeOptionsParam(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): TextSearchOptions {\r\n    const hashtags = super.getHashtagsValid(term, 'type');\r\n    if (hashtags) {\r\n      options.params = Object.assign(options.params || {}, {\r\n        type: hashtags.join(',')\r\n      });\r\n    }\r\n\r\n    return options;\r\n  }\r\n}\r\n\r\n/**\r\n * IChercheReverse search source\r\n */\r\n@Injectable()\r\nexport class IChercheReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'icherchereverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: SearchSourceOptions,\r\n    injector: Injector\r\n  ) {\r\n    super(options);\r\n\r\n    this.languageService.translate\r\n      .get(this.options.title)\r\n      .subscribe(title => this.title$.next(title));\r\n\r\n    const authService = injector.get(AuthService);\r\n    if (this.settings.length) {\r\n      if (!authService) {\r\n        this.getAllowedTypes();\r\n      } else {\r\n        authService.authenticate$.subscribe(() => {\r\n          this.getAllowedTypes();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheReverseSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return IChercheReverseSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    const types =\r\n      this.options.params && this.options.params.type\r\n        ? this.options.params.type\r\n            .replace(/\\s/g, '')\r\n            .toLowerCase()\r\n            .split(',')\r\n        : ['adresses', 'municipalites', 'mrc', 'regadmin'];\r\n\r\n    return {\r\n      title: 'igo.geo.search.ichercheReverse.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/terrapi',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.icherche.type.address',\r\n              value: 'adresses',\r\n              enabled: types.indexOf('adresses') !== -1\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.road',\r\n              value: 'routes',\r\n              enabled: types.indexOf('routes') !== -1,\r\n              available: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.district',\r\n              value: 'arrondissements',\r\n              enabled: types.indexOf('arrondissements') !== -1\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.city',\r\n              value: 'municipalites',\r\n              enabled: types.indexOf('municipalites') !== -1\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.mrc',\r\n              value: 'mrc',\r\n              enabled: types.indexOf('mrc') !== -1\r\n            },\r\n            {\r\n              title: 'igo.geo.search.icherche.type.regadmin',\r\n              value: 'regadmin',\r\n              enabled: types.indexOf('regadmin') !== -1\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'radius',\r\n          name: 'buffer',\r\n          values: [\r\n            {\r\n              title: '100 m',\r\n              value: 100,\r\n              enabled: !this.options.distance || this.options.distance === 100\r\n            },\r\n            {\r\n              title: '500 m',\r\n              value: 500,\r\n              enabled: this.options.distance === 500\r\n            },\r\n            {\r\n              title: '1 km',\r\n              value: 1000,\r\n              enabled: this.options.distance === 1000\r\n            },\r\n            {\r\n              title: '2 km',\r\n              value: 2000,\r\n              enabled: this.options.distance === 2000\r\n            },\r\n            {\r\n              title: '5 km',\r\n              value: 5000,\r\n              enabled: this.options.distance === 5000\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n    if (!params.get('type').length) {\r\n      return of([]);\r\n    }\r\n    return this.http.get(`${this.searchUrl}/locate`, { params }).pipe(\r\n      map((response: IChercheReverseResponse) => {\r\n        return this.extractResults(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  private getAllowedTypes() {\r\n    return this.http\r\n      .get(`${this.searchUrl}/types`)\r\n      .subscribe((types: string[]) => {\r\n        const typeSetting = this.settings.find(s => s.name === 'type');\r\n        typeSetting.values.forEach(v => {\r\n          v.available = types.indexOf(v.value as string) > -1;\r\n        });\r\n      });\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    if (options.distance || this.options.distance) {\r\n      options.params = Object.assign(options.params || {}, {\r\n        buffer: options.distance || this.options.distance\r\n      });\r\n    }\r\n\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          loc: lonLat.join(','),\r\n          sort: 'distance',\r\n          geometry: true,\r\n          icon: true\r\n        },\r\n        options.params || {},\r\n        this.params\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: IChercheReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private getSubtitle(data: IChercheReverseData) {\r\n    if (!this.settings.length) {\r\n      return '';\r\n    }\r\n    let subtitle = '';\r\n    switch (data.properties.type) {\r\n      case 'arrondissements':\r\n        subtitle = data.properties.municipalite + ' (Arrondissement)';\r\n        break;\r\n      default:\r\n        const typeSetting = this.settings.find(s => s.name === 'type');\r\n        const type = typeSetting.values.find(\r\n          t => t.value === data.properties.type\r\n        );\r\n        if (type) {\r\n          subtitle = this.languageService.translate.instant(type.title);\r\n        }\r\n    }\r\n    return subtitle;\r\n  }\r\n\r\n  private dataToResult(data: IChercheReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), properties.type, properties.code].join('.');\r\n\r\n    const titleHtml = data.properties.nom;\r\n    const subtitleHtml = ' <small> ' + this.getSubtitle(data) + '</small>';\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        titleHtml: titleHtml + subtitleHtml,\r\n        icon: data.icon || 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheReverseData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n\r\n  private computeExtent(\r\n    data: IChercheReverseData\r\n  ): [number, number, number, number] | undefined {\r\n    return data.bbox\r\n      ? [data.bbox[0], data.bbox[2], data.bbox[1], data.bbox[3]]\r\n      : undefined;\r\n  }\r\n}\r\n","import { Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  IChercheSearchSource,\r\n  IChercheSearchResultFormatter,\r\n  IChercheReverseSearchSource\r\n} from './icherche';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultIChercheSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new IChercheSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultIChercheSearchResultFormatter() {\r\n  return {\r\n    provide: IChercheSearchResultFormatter,\r\n    useFactory: defaultIChercheSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * ICherche search source factory\r\n * @ignore\r\n */\r\nexport function ichercheSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService,\r\n  formatter: IChercheSearchResultFormatter,\r\n  injector: Injector\r\n) {\r\n  return new IChercheSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${IChercheSearchSource.id}`),\r\n    formatter,\r\n    injector\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search source\r\n */\r\nexport function provideIChercheSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheSearchSourceFactory,\r\n    multi: true,\r\n    deps: [\r\n      HttpClient,\r\n      LanguageService,\r\n      ConfigService,\r\n      IChercheSearchResultFormatter,\r\n      Injector\r\n    ]\r\n  };\r\n}\r\n\r\n/**\r\n * IChercheReverse search source factory\r\n * @ignore\r\n */\r\nexport function ichercheReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService,\r\n  injector: Injector\r\n) {\r\n  return new IChercheReverseSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${IChercheReverseSearchSource.id}`),\r\n    injector\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideIChercheReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, LanguageService, ConfigService, Injector]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { Observable, BehaviorSubject, of } from 'rxjs';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, ReverseSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { GoogleLinks } from '../../../utils/googleLinks';\r\nimport { Projection } from '../../../map/shared/projection.interfaces';\r\nimport { lonLatConversion, roundCoordTo } from '../../../map/shared/map.utils';\r\nimport { OsmLinks } from '../../../utils';\r\n\r\n@Injectable()\r\nexport class CoordinatesSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n/**\r\n * CoordinatesReverse search source\r\n */\r\n@Injectable()\r\nexport class CoordinatesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'coordinatesreverse';\r\n  static type = FEATURE;\r\n\r\n  private projections;\r\n\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    @Inject('options') options: SearchSourceOptions,\r\n    private languageService: LanguageService,\r\n    @Inject('projections') projections: Projection[],\r\n  ) {\r\n    super(options);\r\n    this.projections = projections;\r\n    this.languageService.translate\r\n      .get(this.options.title)\r\n      .subscribe(title => this.title$.next(title));\r\n  }\r\n\r\n  getId(): string {\r\n    return CoordinatesReverseSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return CoordinatesReverseSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'igo.geo.search.coordinates.name',\r\n      order: 1,\r\n      showInSettings: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    return of([this.dataToResult(lonLat)]);\r\n  }\r\n\r\n  private dataToResult(data: [number, number]): SearchResult<Feature> {\r\n    const convertedCoord = lonLatConversion(data, this.projections);\r\n    const coords = convertedCoord.reduce((obj, item) => (\r\n      obj[item.alias] = item.igo2CoordFormat, obj), {});\r\n\r\n    const roundedCoordString = roundCoordTo(data, 6).join(', ');\r\n\r\n    const coordKey =  this.languageService.translate.instant('igo.geo.search.coordinates.coord');\r\n    const coordLonLat = {};\r\n    coordLonLat[coordKey] = roundedCoordString;\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [data[0], data[1]]\r\n        },\r\n        extent: undefined,\r\n        properties: Object.assign({},\r\n          coordLonLat,\r\n          coords,\r\n          {\r\n            GoogleMaps: GoogleLinks.getGoogleMapsLink(data[0], data[1]),\r\n            GoogleStreetView: GoogleLinks.getGoogleStreetViewLink(\r\n              data[0],\r\n              data[1]\r\n            ),\r\n            OpenStreetMap: OsmLinks.getOpenStreetMapLink(data[0], data[1], 14)\r\n          }),\r\n        meta: {\r\n          id: data[0].toString() + ',' + data[1].toString(),\r\n          title: roundedCoordString\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id: data[0].toString() + ',' + data[1].toString(),\r\n        title: roundedCoordString,\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  CoordinatesReverseSearchSource,\r\n  CoordinatesSearchResultFormatter\r\n} from './coordinates';\r\nimport { Projection } from '../../../map/shared/projection.interfaces';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultCoordinatesSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new CoordinatesSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultCoordinatesSearchResultFormatter() {\r\n  return {\r\n    provide: CoordinatesSearchResultFormatter,\r\n    useFactory: defaultCoordinatesSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * CoordinatesReverse search source factory\r\n * @ignore\r\n */\r\nexport function CoordinatesReverseSearchSourceFactory(\r\n  config: ConfigService,\r\n  languageService: LanguageService\r\n) {\r\n  return new CoordinatesReverseSearchSource(\r\n    config.getConfig(`searchSources.${CoordinatesReverseSearchSource.id}`),\r\n    languageService,\r\n    config.getConfig('projections') as Projection[] || []\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideCoordinatesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: CoordinatesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService, LanguageService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, BehaviorSubject, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { getResolutionFromScale } from '../../../map/shared/map.utils';\r\nimport { LAYER } from '../../../layer';\r\nimport { QueryableDataSourceOptions, QueryFormat } from '../../../query';\r\nimport { QueryHtmlTarget } from './../../../query/shared/query.enums';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { TextSearchOptions } from './source.interfaces';\r\nimport {\r\n  ILayerSearchSourceOptions,\r\n  ILayerData,\r\n  ILayerItemResponse,\r\n  ILayerServiceResponse,\r\n  ILayerDataSource\r\n} from './ilayer.interfaces';\r\n\r\n@Injectable()\r\nexport class ILayerSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(data: ILayerData): ILayerData {\r\n    const allowedKey = ['title', 'abstract', 'groupTitle', 'metadataUrl'];\r\n\r\n    const property = Object.entries(data.properties)\r\n      .filter(([key]) => allowedKey.indexOf(key) !== -1)\r\n      .reduce((out: { [key: string]: any }, entries: [string, any]) => {\r\n        const [key, value] = entries;\r\n        let newKey;\r\n        try {\r\n          newKey = this.languageService.translate.instant(\r\n            'igo.geo.search.ilayer.properties.' + key\r\n          );\r\n        } catch (e) {\r\n          newKey = key;\r\n        }\r\n        out[newKey] = value ? value : '';\r\n        return out;\r\n      }, {});\r\n\r\n    const dataR = Object.assign({}, data);\r\n    dataR.properties = property as ILayerDataSource;\r\n\r\n    return dataR;\r\n  }\r\n}\r\n\r\n/**\r\n * ILayer search source\r\n */\r\n@Injectable()\r\nexport class ILayerSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'ilayer';\r\n  static type = LAYER;\r\n\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: ILayerSearchSourceOptions,\r\n    @Inject(ILayerSearchResultFormatter)\r\n    private formatter: ILayerSearchResultFormatter\r\n  ) {\r\n    super(options);\r\n    this.languageService.translate\r\n      .get(this.options.title)\r\n      .subscribe(title => this.title$.next(title));\r\n  }\r\n\r\n  getId(): string {\r\n    return ILayerSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return ILayerSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): ILayerSearchSourceOptions {\r\n    const limit =\r\n      this.options.params && this.options.params.limit\r\n        ? Number(this.options.params.limit)\r\n        : undefined;\r\n    return {\r\n      title: 'igo.geo.search.ilayer.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/layers/search',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.ilayer.type.layer',\r\n              value: 'layer',\r\n              enabled: true,\r\n              hashtags: ['layer', 'layers', 'couche', 'couches']\r\n            },\r\n            {\r\n              title: 'igo.geo.search.ilayer.type.groupLayer',\r\n              value: 'group',\r\n              enabled: false,\r\n              hashtags: ['gr-layer', 'gr-layers', 'gr-couche', 'gr-couches']\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '1',\r\n              value: 1,\r\n              enabled: limit === 1\r\n            },\r\n            {\r\n              title: '5',\r\n              value: 5,\r\n              enabled: limit === 5 || !limit\r\n            },\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: limit === 10\r\n            },\r\n            {\r\n              title: '25',\r\n              value: 25,\r\n              enabled: limit === 25\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: limit === 50\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a layer by name or keyword\r\n   * @param term Layer name or keyword\r\n   * @returns Observable of <SearchResult<LayerOptions>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<ILayerItemResponse>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    if (!params.get('q') ||Â !params.get('type')) {\r\n      return of([]);\r\n    }\r\n    this.options.params.page = params.get('page') || '1';\r\n\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(\r\n        map((response: ILayerServiceResponse) => this.extractResults(response))\r\n      );\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: ObjectUtils.removeUndefined(Object.assign(\r\n        {\r\n          q: this.computeTerm(term)\r\n        },\r\n        this.params,\r\n        this.computeOptionsParam(term, options || {}).params,\r\n        {\r\n          page: options.page\r\n        }\r\n      )\r\n    )});\r\n  }\r\n\r\n  /**\r\n   * Remove hashtag from query\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTerm(term: string): string {\r\n    return term.replace(/(#[^\\s]*)/g, '').replace(/[^\\wÃ-Ã¿ !\\-\\(\\),'#]+/g, '');\r\n  }\r\n\r\n  /**\r\n   * Add hashtag to param if valid\r\n   * @param term Query with hashtag\r\n   * @param options TextSearchOptions\r\n   */\r\n  private computeOptionsParam(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): TextSearchOptions {\r\n    const hashtags = super.getHashtagsValid(term, 'type');\r\n    if (hashtags) {\r\n      options.params = Object.assign(options.params || {}, {\r\n        type: hashtags.join(',')\r\n      });\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  private extractResults(\r\n    response: ILayerServiceResponse\r\n  ): SearchResult<ILayerItemResponse>[] {\r\n    return response.items.map((data: ILayerData) => this.dataToResult(data, response));\r\n  }\r\n\r\n  private dataToResult(data: ILayerData, response?: ILayerServiceResponse): SearchResult<ILayerItemResponse> {\r\n    const layerOptions = this.computeLayerOptions(data);\r\n\r\n    const titleHtml = data.highlight.title || data.properties.title;\r\n    const groupTitle = data.highlight.groupTitle || data.properties.groupTitle;\r\n    const subtitleHtml = groupTitle\r\n      ? ' <small style=\"color: #6f6969\"> ' + groupTitle + '</small>'\r\n      : '';\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: LAYER,\r\n        id: [this.getId(), data.properties.id].join('.'),\r\n        title: data.properties.title,\r\n        titleHtml: titleHtml + subtitleHtml,\r\n        icon: data.properties.type === 'Layer' ? 'layers' : 'map',\r\n        nextPage: response.items.length % +this.options.params.limit === 0 && +this.options.params.page < 10\r\n      },\r\n      data: layerOptions\r\n    };\r\n  }\r\n\r\n  private computeLayerOptions(data: ILayerData): ILayerItemResponse {\r\n    const url = data.properties.url;\r\n    const queryParams: QueryableDataSourceOptions = this.extractQueryParamsFromSourceUrl(\r\n      url\r\n    );\r\n    return {\r\n      sourceOptions: {\r\n        id: data.properties.id,\r\n        crossOrigin: 'anonymous',\r\n        type: data.properties.format,\r\n        url,\r\n        queryFormat: queryParams.queryFormat,\r\n        queryHtmlTarget: queryParams.queryHtmlTarget,\r\n        queryable: data.properties.queryable,\r\n        params: {\r\n          LAYERS: data.properties.name\r\n        }\r\n      },\r\n      title: data.properties.title,\r\n      maxResolution:\r\n        getResolutionFromScale(Number(data.properties.maxScaleDenom)) ||\r\n        Infinity,\r\n      minResolution:\r\n        getResolutionFromScale(Number(data.properties.minScaleDenom)) || 0,\r\n      metadata: {\r\n        url: data.properties.metadataUrl,\r\n        extern: true\r\n      },\r\n      properties: this.formatter.formatResult(data).properties\r\n    };\r\n  }\r\n\r\n  private extractQueryParamsFromSourceUrl(\r\n    url: string\r\n  ): { queryFormat: QueryFormat; queryHtmlTarget: QueryHtmlTarget } {\r\n    let queryFormat = QueryFormat.GML2;\r\n    let queryHtmlTarget;\r\n    const formatOpt = (this.options as ILayerSearchSourceOptions).queryFormat;\r\n    if (formatOpt) {\r\n      for (const key of Object.keys(formatOpt)) {\r\n        const value = formatOpt[key];\r\n        if (value === '*') {\r\n          queryFormat = QueryFormat[key.toUpperCase()];\r\n          break;\r\n        }\r\n\r\n        const urls = ((value as any) as { urls: string[] }).urls;\r\n        if (Array.isArray(urls)) {\r\n          urls.forEach(urlOpt => {\r\n            if (url.indexOf(urlOpt) !== -1) {\r\n              queryFormat = QueryFormat[key.toUpperCase()];\r\n            }\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (queryFormat === QueryFormat.HTML) {\r\n      queryHtmlTarget = 'iframe';\r\n    }\r\n\r\n    return {\r\n      queryFormat,\r\n      queryHtmlTarget\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { ILayerSearchSource, ILayerSearchResultFormatter } from './ilayer';\r\n\r\n/**\r\n * ILayer search result formatter factory\r\n * @ignore\r\n */\r\nexport function ilayerSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new ILayerSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ILayer search result formatter\r\n */\r\nexport function provideILayerSearchResultFormatter() {\r\n  return {\r\n    provide: ILayerSearchResultFormatter,\r\n    useFactory: ilayerSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * ILayer search source factory\r\n * @ignore\r\n */\r\nexport function ilayerSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService,\r\n  formatter: ILayerSearchResultFormatter\r\n) {\r\n  return new ILayerSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${ILayerSearchSource.id}`),\r\n    formatter\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ILayer search source\r\n */\r\nexport function provideILayerSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ilayerSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, LanguageService, ConfigService, ILayerSearchResultFormatter]\r\n  };\r\n}\r\n","import { FEATURE } from '../../feature';\r\nimport { LAYER } from '../../layer';\r\n\r\nexport const SEARCH_TYPES = [FEATURE, LAYER];\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-selector',\r\n  templateUrl: './search-selector.component.html',\r\n  styleUrls: ['./search-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchSelectorComponent implements OnInit, OnDestroy {\r\n\r\n  readonly searchType$: BehaviorSubject<string> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the search type\r\n   */\r\n  private searchType$$: Subscription;\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * The search type enabled\r\n   */\r\n  @Input()\r\n  set searchType(value: string) { this.setSearchType(value); }\r\n  get searchType(): string { return this.searchType$.value; }\r\n\r\n  /**\r\n   * Event emitted when the enabled search type changes\r\n   */\r\n  @Output() searchTypeChange = new EventEmitter<string>();\r\n\r\n  constructor(private searchSourceService: SearchSourceService) {}\r\n\r\n  ngOnInit() {\r\n    this.searchType$$ = this.searchType$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe((searchType: string) => this.onSetSearchType(searchType));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.searchType$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Enable the selected search type\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.setSearchType(searchType);\r\n  }\r\n\r\n  /**\r\n   * Get a search type's title. The title\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  getSearchTypeTitle(searchType: string) {\r\n    return `igo.geo.search.${searchType.toLowerCase()}.title`;\r\n  }\r\n\r\n  /**\r\n   * Emit an event and enable the search sources of the given type.\r\n   * @param searchType Search type\r\n   */\r\n  private setSearchType(searchType: string | undefined) {\r\n    this.searchType$.next(searchType);\r\n  }\r\n\r\n  private onSetSearchType(searchType: string) {\r\n    if (searchType === undefined || searchType === null) {\r\n      return;\r\n    }\r\n\r\n    this.searchSourceService.enableSourcesByType(searchType);\r\n    this.searchTypeChange.emit(searchType);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatTabsModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { SearchSelectorComponent } from './search-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatTabsModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSelectorComponent],\r\n  declarations: [SearchSelectorComponent]\r\n})\r\nexport class IgoSearchSelectorModule {}\r\n","import { MatCheckboxChange, MatRadioChange } from '@angular/material';\r\n\r\nimport {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  HostListener,\r\n  Input\r\n} from '@angular/core';\r\n\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\nimport { SearchSource } from '../shared/sources/source';\r\nimport {\r\n  SearchSourceSettings,\r\n  SettingOptions\r\n} from '../shared/sources/source.interfaces';\r\nimport { sourceCanReverseSearchAsSummary, sourceCanSearch, sourceCanReverseSearch } from '../shared/search.utils';\r\nimport { MediaService } from '@igo2/core';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-settings',\r\n  templateUrl: './search-settings.component.html',\r\n  styleUrls: ['./search-settings.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchSettingsComponent implements OnInit {\r\n\r\n  public hasPointerReverseSearchSource: boolean = false;\r\n\r\n  public buffer = [];\r\n  public lastKeyTime = Date.now();\r\n\r\n  get isTouchScreen(): boolean {\r\n    return this.mediaService.isTouchScreen();\r\n  }\r\n\r\n  @Input() pointerSummaryEnabled: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the enabled search source changes\r\n   */\r\n  @Output() searchSourceChange = new EventEmitter<SearchSource>();\r\n\r\n  /**\r\n   * Event emitted when the pointer summary is activated\r\n   */\r\n  @Output() pointerSummaryStatus = new EventEmitter<boolean>();\r\n\r\n  @HostListener('document:keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n\r\n    if (event.keyCode === 113) {\r\n      this.pointerSummaryEnabled = !this.pointerSummaryEnabled;\r\n      this.pointerSummaryStatus.emit(this.pointerSummaryEnabled);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private searchSourceService: SearchSourceService,\r\n    private mediaService: MediaService\r\n    ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.hasPointerReverseSearchSource = this.hasReverseSearchSourcesForPointerSummary();\r\n  }\r\n\r\n  /**\r\n   * Get all search sources\r\n   * @internal\r\n   */\r\n  getSearchSources(): SearchSource[] {\r\n    const textSearchSources = this.searchSourceService\r\n      .getSources()\r\n      .filter(sourceCanSearch)\r\n      .filter(s => s.available && s.getId() !== 'map' && s.showInSettings);\r\n\r\n    const reverseSearchSources = this.searchSourceService\r\n      .getSources()\r\n      .filter(sourceCanReverseSearch)\r\n      .filter(s => s.available && s.getId() !== 'map' && s.showInSettings);\r\n    return textSearchSources.concat(reverseSearchSources);\r\n  }\r\n\r\n  /**\r\n   * Get all search sources usable for pointer summary\r\n   * @internal\r\n   */\r\n  hasReverseSearchSourcesForPointerSummary(): boolean {\r\n    if (this.searchSourceService.getEnabledSources().filter(sourceCanReverseSearchAsSummary).length) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggered when a setting is checked (checkbox style)\r\n   * @internal\r\n   */\r\n  settingsValueCheckedCheckbox(\r\n    event: MatCheckboxChange,\r\n    source: SearchSource,\r\n    setting: SearchSourceSettings,\r\n    settingValue: SettingOptions\r\n  ) {\r\n    settingValue.enabled = event.checked;\r\n    source.setParamFromSetting(setting);\r\n    this.searchSourceChange.emit(source);\r\n  }\r\n\r\n  /**\r\n   * Defining the action to do for check/uncheck checkboxes\r\n   * return true if all checkbox must be checked\r\n   * return false if all checkbox must be unchecked\r\n   * @internal\r\n   */\r\n  computeCheckAllBehavior(setting: SearchSourceSettings) {\r\n    if (setting.allEnabled === undefined) {\r\n      if (setting.values.find(settingValue => settingValue.enabled)) {\r\n        setting.allEnabled = false;\r\n      } else {\r\n        setting.allEnabled = true;\r\n      }\r\n    } else {\r\n      setting.allEnabled = !setting.allEnabled;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggered when the check all / uncheck all type is clicked,\r\n   * @internal\r\n   */\r\n  checkUncheckAll(event, source: SearchSource, setting: SearchSourceSettings) {\r\n    event.stopPropagation();\r\n    this.computeCheckAllBehavior(setting);\r\n    setting.values.forEach(settingValue => {\r\n      settingValue.enabled = setting.allEnabled;\r\n    });\r\n    source.setParamFromSetting(setting);\r\n    this.searchSourceChange.emit(source);\r\n  }\r\n\r\n  /**\r\n   * Triggered when a setting is checked (radiobutton style)\r\n   * @internal\r\n   */\r\n  settingsValueCheckedRadioButton(\r\n    event: MatRadioChange,\r\n    source: SearchSource,\r\n    setting: SearchSourceSettings,\r\n    settingValue: SettingOptions\r\n  ) {\r\n    setting.values.forEach(conf => {\r\n      if (conf.value !== settingValue.value) {\r\n        conf.enabled = !event.source.checked;\r\n      } else {\r\n        conf.enabled = event.source.checked;\r\n      }\r\n    });\r\n    source.setParamFromSetting(setting);\r\n    this.searchSourceChange.emit(source);\r\n  }\r\n\r\n  onCheckSearchSource(event: MatCheckboxChange, source: SearchSource) {\r\n    source.enabled = event.checked;\r\n    this.searchSourceChange.emit(source);\r\n  }\r\n\r\n  getAvailableValues(setting: SearchSourceSettings) {\r\n    return setting.values.filter(s => s.available !== false);\r\n  }\r\n\r\n  getAvailableHashtagsValues(setting: SettingOptions) {\r\n    if (setting.hashtags) {\r\n      const output: string[] = [];\r\n      for (let value of setting.hashtags) {\r\n        value = '#' + value;\r\n        output.push(value);\r\n      }\r\n      return output;\r\n    }\r\n    return;\r\n  }\r\n\r\n  stopPropagation(event) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  changePointerReverseSearch(event, fromTitleButton?: boolean) {\r\n    if (fromTitleButton) {\r\n      event.stopPropagation();\r\n      this.pointerSummaryEnabled = !this.pointerSummaryEnabled;\r\n    } else {\r\n      this.pointerSummaryEnabled = event.checked;\r\n    }\r\n\r\n    this.pointerSummaryStatus.emit(this.pointerSummaryEnabled);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SearchSettingsComponent } from './search-settings.component';\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatCheckboxModule,\r\n  MatDividerModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  declarations: [SearchSettingsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatCheckboxModule,\r\n    MatDividerModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSettingsComponent]\r\n})\r\nexport class IgoSearchSettingsModule { }\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { BehaviorSubject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { EntityStore } from '@igo2/common';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchResult, Research } from '../shared/search.interfaces';\r\nimport { SearchService } from '../shared/search.service';\r\n\r\n/**\r\n * Searchbar that triggers a research in all search sources enabled.\r\n * If the store input is defined, the search results will be loaded\r\n * into that store. An event is always emitted when a research is completed.\r\n */\r\n@Component({\r\n  selector: 'igo-search-bar',\r\n  templateUrl: './search-bar.component.html',\r\n  styleUrls: ['./search-bar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchBarComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Invalid keys\r\n   */\r\n  static invalidKeys = [\r\n    'Control',\r\n    'Shift',\r\n    'Alt',\r\n    'ArrowDown',\r\n    'ArrowUp',\r\n    'ArrowRight',\r\n    'ArrowLeft'\r\n  ];\r\n\r\n  readonly placeholder$: BehaviorSubject<string> = new BehaviorSubject(\r\n    'igo.geo.search.placeholder'\r\n  );\r\n\r\n  readonly empty$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  /**\r\n   * Subscription to the ssearch bar term\r\n   */\r\n  private term$$: Subscription;\r\n\r\n  /**\r\n   * Search term stream\r\n   */\r\n  private stream$: BehaviorSubject<string> = new BehaviorSubject('');\r\n\r\n  /**\r\n   * Subscription to the search term stream\r\n   */\r\n  private stream$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to the search type\r\n   */\r\n  private searchType$$: Subscription;\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input()\r\n  set searchType(value: string) {\r\n    this.setSearchType(value);\r\n  }\r\n  get searchType(): string {\r\n    return this.searchType$.value;\r\n  }\r\n  readonly searchType$: BehaviorSubject<string> = new BehaviorSubject(\r\n    undefined\r\n  );\r\n\r\n  /**\r\n   * Event emitted when the pointer summary is activated by the searchbar setting\r\n   */\r\n  @Output() pointerSummaryStatus = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input()\r\n  set term(value: string) {\r\n    this.setTerm(value);\r\n  }\r\n  get term(): string {\r\n    return this.term$.value;\r\n  }\r\n  readonly term$: BehaviorSubject<string> = new BehaviorSubject('');\r\n\r\n  /**\r\n   * Whether this component is disabled\r\n   */\r\n  @Input()\r\n  set disabled(value: boolean) {\r\n    this.disabled$.next(value);\r\n  }\r\n  get disabled(): boolean {\r\n    return this.disabled$.value;\r\n  }\r\n  readonly disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  @Input() pointerSummaryEnabled: boolean = false;\r\n  /**\r\n   * Whether a float label should be displayed\r\n   */\r\n  @Input() floatLabel: FloatLabelType = 'never';\r\n\r\n  /**\r\n   * Icons color (search and clear)\r\n   */\r\n  @Input() color = 'primary';\r\n\r\n  /**\r\n   * Debounce time between each keystroke\r\n   */\r\n  @Input() debounce = 200;\r\n\r\n  /**\r\n   * Minimum term length required to trigger a research\r\n   */\r\n  @Input() minLength = 2;\r\n\r\n  /**\r\n   * Search icon\r\n   */\r\n  @Input() searchIcon: string;\r\n\r\n  /**\r\n   * Search Selector\r\n   */\r\n  @Input() searchSelector = false;\r\n\r\n  /**\r\n   * Search Settings\r\n   */\r\n  @Input() searchSettings = false;\r\n\r\n  /**\r\n   * Force coordinates in north america\r\n   */\r\n  @Input() forceNA = false;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * Event emitted when the search term changes\r\n   */\r\n  @Output() searchTermChange = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Event emitted when a research is completed\r\n   */\r\n  @Output() search = new EventEmitter<{\r\n    research: Research;\r\n    results: SearchResult[];\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the search type changes\r\n   */\r\n  @Output() searchTypeChange = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Event emitted when the search type changes\r\n   */\r\n  @Output() clearFeature = new EventEmitter();\r\n\r\n  /**\r\n   * Event emitted when the search settings changes\r\n   */\r\n  @Output() searchSettingsChange = new EventEmitter();\r\n\r\n  /**\r\n   * Input element\r\n   * @internal\r\n   */\r\n  @ViewChild('input') input: ElementRef;\r\n\r\n  /**\r\n   * Whether the search bar is empty\r\n   * @internal\r\n   */\r\n  get empty(): boolean {\r\n    return this.term.length === 0;\r\n  }\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private searchService: SearchService\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.term$$ = this.term$.subscribe((term: string) => {\r\n      this.empty$.next(term === undefined || term.length === 0);\r\n    });\r\n\r\n    this.stream$$ = this.stream$\r\n      .pipe(\r\n        debounce((term: string) => (term === '' ? EMPTY : timer(this.debounce)))\r\n      )\r\n      .subscribe((term: string) => this.onSetTerm(term));\r\n\r\n    this.searchType$$ = this.searchType$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe((searchType: string) => this.onSetSearchType(searchType));\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the search term stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.term$$.unsubscribe();\r\n    this.stream$$.unsubscribe();\r\n    this.searchType$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * When a user types, validates the key and send it into the\r\n   * stream if it's valid\r\n   * @param event Keyboard event\r\n   * @internal\r\n   */\r\n  onKeyup(event: KeyboardEvent) {\r\n    const key = event.key;\r\n    if (!this.keyIsValid(key)) {\r\n      return;\r\n    }\r\n    const term = (event.target as HTMLInputElement).value;\r\n    this.setTerm(term);\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   * @internal\r\n   */\r\n  onClearButtonClick() {\r\n    this.clear();\r\n    this.clearFeature.emit();\r\n  }\r\n\r\n  /**\r\n   * Update search type\r\n   * @param searchType Enabled search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.setSearchType(searchType);\r\n  }\r\n\r\n  /**\r\n   * Update the placeholder with the enabled search type. The placeholder\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Enabled search type\r\n   * @internal\r\n   */\r\n  setSearchType(searchType: string) {\r\n    this.searchType$.next(searchType);\r\n  }\r\n\r\n  onSearchSettingsChange() {\r\n    this.doSearch(this.term);\r\n    this.searchSettingsChange.emit();\r\n  }\r\n\r\n  /**\r\n   * Send the term into the stream only if this component is not disabled\r\n   * @param term Search term\r\n   */\r\n  setTerm(term: string) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    term = term || '';\r\n\r\n    if (term !== this.term) {\r\n      this.term$.next(term);\r\n    }\r\n\r\n    const slug = term.replace(/(#[^\\s]*)/g, '').trim();\r\n    if (slug.length >= this.minLength || slug.length === 0) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   */\r\n  private clear() {\r\n    this.term$.next('');\r\n    this.stream$.next('');\r\n    this.input.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Validate if a given key stroke is a valid input\r\n   */\r\n  private keyIsValid(key: string) {\r\n    return SearchBarComponent.invalidKeys.indexOf(key) === -1;\r\n  }\r\n\r\n  /**\r\n   * When the search term changes, emit an event and trigger a\r\n   * research in every enabled search sources.\r\n   * @param term Search term\r\n   */\r\n  private onSetTerm(term: string | undefined) {\r\n    this.searchTermChange.emit(term);\r\n    this.doSearch(term);\r\n  }\r\n\r\n  private onSetSearchType(searchType: string) {\r\n    if (searchType === undefined || searchType === null) {\r\n      return;\r\n    }\r\n\r\n    this.searchTypeChange.emit(searchType);\r\n\r\n    const placeholder = `igo.geo.search.${searchType.toLowerCase()}.placeholder`;\r\n    this.placeholder$.next(placeholder);\r\n\r\n    this.setTerm(this.term);\r\n  }\r\n\r\n  /**\r\n   * Execute the search\r\n   * @param term Search term\r\n   */\r\n  private doSearch(term: string | undefined) {\r\n    const slug = term ? term.replace(/(#[^\\s]*)/g, '').trim() : '';\r\n    if (slug === '') {\r\n      if (this.store !== undefined) {\r\n        this.store.clear();\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.store !== undefined) {\r\n      this.store.softClear();\r\n    }\r\n\r\n    const researches = this.searchService.search(term, {\r\n      forceNA: this.forceNA\r\n    });\r\n    researches.map(research => {\r\n      research.request.subscribe((results: SearchResult[]) => {\r\n        this.onResearchCompleted(research, results);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When a research  is completed, emit an event and update\r\n   * the store's items.\r\n   * @param research Research\r\n   * @param results Research results\r\n   */\r\n  private onResearchCompleted(research: Research, results: SearchResult[]) {\r\n    this.search.emit({ research, results });\r\n\r\n    if (this.store !== undefined) {\r\n      const newResults = this.store\r\n        .all()\r\n        .filter(result => result.source !== research.source)\r\n        .concat(results);\r\n      this.store.load(newResults);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  OnInit,\r\n  Optional,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { SearchBarComponent } from './search-bar.component';\r\n\r\n@Directive({\r\n  selector: '[igoSearchUrlParam]'\r\n})\r\nexport class SearchUrlParamDirective implements OnInit {\r\n  constructor(\r\n    @Self() private component: SearchBarComponent,\r\n    private ref: ChangeDetectorRef,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.route && this.route.options.searchKey) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const searchParams = params[this.route.options.searchKey as string];\r\n        if (searchParams) {\r\n          this.component.setTerm(searchParams);\r\n          this.ref.detectChanges();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoSearchSelectorModule } from '../search-selector/search-selector.module';\r\nimport { IgoSearchSettingsModule } from '../search-settings/search-settings.module';\r\nimport { SearchBarComponent } from './search-bar.component';\r\nimport { SearchUrlParamDirective } from './search-url-param.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  exports: [\r\n    SearchBarComponent,\r\n  ],\r\n  declarations: [\r\n    SearchBarComponent,\r\n    SearchUrlParamDirective\r\n  ]\r\n})\r\nexport class IgoSearchBarModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ContentChild,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  TemplateRef,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { Observable, EMPTY, timer, BehaviorSubject } from 'rxjs';\r\nimport { debounce, map } from 'rxjs/operators';\r\n\r\nimport { EntityStore, EntityStoreWatcher } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { TextSearchOptions } from '../shared/sources/source.interfaces';\r\nimport { SearchService } from '../shared/search.service';\r\nimport { SearchResult, Research } from '../shared/search.interfaces';\r\nimport { SearchSource } from '../shared/sources/source';\r\n\r\nexport enum SearchResultMode {\r\n  Grouped = 'grouped',\r\n  Flat = 'flat'\r\n}\r\n\r\n/**\r\n * List of search results with focus and selection capabilities.\r\n * This component is dumb and only emits events.\r\n */\r\n@Component({\r\n  selector: 'igo-search-results',\r\n  templateUrl: './search-results.component.html',\r\n  styleUrls: ['./search-results.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Reference to the SearchResultMode enum\r\n   * @internal\r\n   */\r\n  public searchResultMode = SearchResultMode;\r\n\r\n  /**\r\n   * Search results store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<SearchResult>;\r\n\r\n  public pageIterator: {sourceId: string}[] = [];\r\n\r\n  public collapsed: {sourceId: string}[] = [];\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * to show hide results icons\r\n   */\r\n  @Input() showIcons: boolean;\r\n\r\n  /**\r\n   * Search results display mode\r\n   */\r\n  @Input() mode: SearchResultMode = SearchResultMode.Grouped;\r\n\r\n  /**\r\n   * Whether there should be a zoom button\r\n   */\r\n  @Input() withZoomButton = false;\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input()\r\n  get term(): string {\r\n    return this._term;\r\n  }\r\n  set term(value: string) {\r\n    this._term = value;\r\n    this.pageIterator = [];\r\n  }\r\n  public _term: string;\r\n\r\n  @Input() settingsChange$ = new BehaviorSubject<boolean>(undefined);\r\n\r\n  /**\r\n   * Event emitted when a result is focused\r\n   */\r\n  @Output() resultFocus = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a result is unfocused\r\n   */\r\n  @Output() resultUnfocus = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a result is selected\r\n   */\r\n  @Output() resultSelect = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a research is completed after displaying more results is clicked\r\n   */\r\n  @Output() moreResults = new EventEmitter<{\r\n    research: Research;\r\n    results: SearchResult[];\r\n  }>();\r\n\r\n  /**\r\n   * Events emitted when a result is focus or unfocus by mouse event\r\n   */\r\n  @Output() resultMouseenter = new EventEmitter<SearchResult>();\r\n  @Output() resultMouseleave = new EventEmitter<SearchResult>();\r\n\r\n  @ContentChild('igoSearchItemToolbar') templateSearchToolbar: TemplateRef<any>;\r\n\r\n  get results$(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    if (this._results$ === undefined) {\r\n      this._results$ = this.liftResults();\r\n    }\r\n    return this._results$;\r\n  }\r\n  private _results$: Observable<\r\n    {source: SearchSource; results: SearchResult[]}[]\r\n  >;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef,\r\n              private searchService: SearchService) {}\r\n\r\n  /**\r\n   * Bind the search results store to the watcher\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n\r\n    this.settingsChange$.subscribe(() => {\r\n      this.pageIterator = [];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unbind the search results store from the watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * When a result is focused, update it's state in the store and emit\r\n   * an event.\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultFocus(result: SearchResult) {\r\n    if (this.store.state.get(result)) {\r\n      if (this.store.state.get(result).focused === true) {\r\n        return;\r\n      }\r\n    }\r\n    this.store.state.update(result, {focused: true}, true);\r\n    this.resultFocus.emit(result);\r\n  }\r\n\r\n  onResultUnfocus(result: SearchResult) {\r\n    this.resultUnfocus.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Compute a group title\r\n   * @param group Search results group\r\n   * @returns Group title\r\n   * @internal\r\n   */\r\n  computeGroupTitle(group: {source: SearchSource; results: SearchResult[]}): string {\r\n    const parts = [group.source.title];\r\n    const count = group.results.length;\r\n    if (count > 1) {\r\n      parts.push(`(${count})`);\r\n    }\r\n    return parts.join(' ');\r\n  }\r\n\r\n  /**\r\n   * When a result is selected, update it's state in the store and emit\r\n   * an event. A selected result is also considered focused\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultSelect(result: SearchResult) {\r\n    if (this.store.state.get(result)) {\r\n      if (this.store.state.get(result).selected === true) {\r\n        return;\r\n      }\r\n    }\r\n    this.store.state.update(result, {focused: true, selected: true}, true);\r\n    this.resultSelect.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Return an observable of the search results, grouped by search source\r\n   * @returns Observable of grouped search results\r\n   * @internal\r\n   */\r\n  private liftResults(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    return this.store.view.all$().pipe(\r\n      debounce((results: SearchResult[]) => {\r\n        return results.length === 0 ? EMPTY : timer(200);\r\n      }),\r\n      map((results: SearchResult[]) => {\r\n        return this.groupResults(results.sort(this.sortByOrder));\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sort the results by display order.\r\n   * @param r1 First result\r\n   * @param r2 Second result\r\n   */\r\n  private sortByOrder(r1: SearchResult, r2: SearchResult) {\r\n    return r1.source.displayOrder - r2.source.displayOrder;\r\n  }\r\n\r\n  /**\r\n   * Group results by search source\r\n   * @param results Search results from all sources\r\n   * @returns Search results grouped by source\r\n   */\r\n  private groupResults(results: SearchResult[]): {source: SearchSource; results: SearchResult[]}[] {\r\n    const grouped = new Map<SearchSource, SearchResult[]>();\r\n    results.forEach((result: SearchResult) => {\r\n      const source = result.source;\r\n      let sourceResults = grouped.get(source);\r\n      if (sourceResults === undefined) {\r\n        sourceResults = [];\r\n        grouped.set(source, sourceResults);\r\n      }\r\n      sourceResults.push(result);\r\n    });\r\n\r\n    return Array.from(grouped.keys()).map((source: SearchSource) => {\r\n      if (this.pageIterator[source.getId()] === undefined) {\r\n        this.pageIterator[source.getId()] = 1;\r\n      }\r\n      return {source, results: grouped.get(source)};\r\n    });\r\n  }\r\n\r\n  isMoreResults(group: {source: SearchSource; results: SearchResult[]}) {\r\n    return group.results && group.results[group.results.length - 1].meta.nextPage === true;\r\n  }\r\n\r\n  displayMoreResults(group: {source: SearchSource; results: SearchResult[]}) {\r\n    const options: TextSearchOptions = {\r\n      sourceId: group.source.getId(),\r\n      page: ++this.pageIterator[group.source.getId()]\r\n    };\r\n\r\n    const researches = this.searchService.search(this.term, options);\r\n    researches.map(research => {\r\n      research.request.subscribe((results: SearchResult[]) => {\r\n        const newResults = group.results.concat(results);\r\n        if (!results.length) {\r\n          newResults[newResults.length - 1].meta.nextPage = false;\r\n        }\r\n        this.moreResults.emit({research, results: newResults});\r\n      });\r\n    });\r\n    return;\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\n\r\nimport {\r\n  getEntityTitle,\r\n  getEntityTitleHtml,\r\n  getEntityIcon\r\n} from '@igo2/common';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\nimport { FeatureMotion, moveToOlFeatures } from '../../feature';\r\nimport { IgoMap } from '../../map';\r\n\r\n/**\r\n * Search results list item\r\n */\r\n@Component({\r\n  selector: 'igo-search-results-item',\r\n  templateUrl: './search-results-item.component.html',\r\n  styleUrls: ['./search-results-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsItemComponent {\r\n  /**\r\n   * Search result item\r\n   */\r\n  @Input() result: SearchResult;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Search result title\r\n   * @internal\r\n   */\r\n\r\n  /**\r\n   * to show hide results icons\r\n   */\r\n  @Input() showIcons: boolean;\r\n\r\n  /**\r\n   * Whether there should be a zoom button\r\n   */\r\n  @Input() withZoomButton = false;\r\n\r\n  @Output() zoomEvent = new EventEmitter<boolean>();\r\n\r\n  private format = new olFormatGeoJSON();\r\n\r\n  get title(): string {\r\n    return getEntityTitle(this.result);\r\n  }\r\n\r\n  /**\r\n   * Search result HTML title\r\n   * @internal\r\n   */\r\n  get titleHtml(): string {\r\n    return getEntityTitleHtml(this.result);\r\n  }\r\n\r\n  /**\r\n   * Search result tooltip\r\n   * @internal\r\n   */\r\n  get tooltipHtml(): string {\r\n    return this.titleHtml\r\n      .replace(/<small?[^>]+(>|$)/g, '\\n')\r\n      .replace(/<\\/?[^>]+(>|$)/g, '');\r\n  }\r\n\r\n  /**\r\n   * Search result icon\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.result);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  onZoomHandler() {\r\n    const olFeature = this.format.readFeature(this.result.data, {\r\n      dataProjection: this.result.data.projection,\r\n      featureProjection: this.map.projection\r\n    });\r\n    moveToOlFeatures(this.map, [olFeature], FeatureMotion.Default);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { LayerOptions } from '../../layer/shared/layers/layer.interface';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { LAYER } from '../../layer/shared/layer.enums';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'igo-search-add-button',\r\n  templateUrl: './search-results-add-button.component.html',\r\n  styleUrls: ['./search-results-add-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultAddButtonComponent implements OnInit, OnDestroy {\r\n  public tooltip$: BehaviorSubject<string> = new BehaviorSubject(\r\n    'igo.geo.catalog.layer.addToMap'\r\n  );\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  public inRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  public isPreview$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private layersSubcriptions = [];\r\n\r\n  private lastTimeoutRequest;\r\n\r\n  @Input() layer: SearchResult;\r\n\r\n  /**\r\n   * Whether the layer is already added to the map\r\n   */\r\n  @Input() added: boolean;\r\n\r\n  /**\r\n   * The map to add the search result layer to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private layerService: LayerService) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.layer.meta.dataType === 'Layer') {\r\n      this.added =\r\n        this.map.layers.findIndex(\r\n          lay => lay.id === this.layer.data.sourceOptions.id\r\n        ) !== -1;\r\n    }\r\n    this.resolution$$ = this.map.viewController.resolution$.subscribe(value => {\r\n      this.isInResolutionsRange(value);\r\n      this.tooltip$.next(this.computeTooltip());\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.resolution$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * On mouse event, mouseenter /mouseleave\r\n   * @internal\r\n   */\r\n  onMouseEvent(event) {\r\n    this.onToggleClick(event);\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick(event) {\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') {\r\n      clearTimeout(this.lastTimeoutRequest);\r\n    }\r\n\r\n    switch (event.type) {\r\n      case 'click':\r\n        if (!this.isPreview$.value) {\r\n          if (this.added) {\r\n            this.remove();\r\n          } else {\r\n            this.add();\r\n          }\r\n        }\r\n        this.isPreview$.next(false);\r\n        break;\r\n      case 'mouseenter':\r\n        if (!this.isPreview$.value && !this.added) {\r\n          this.lastTimeoutRequest = setTimeout(() => {\r\n            this.add();\r\n            this.isPreview$.next(true);\r\n          }, 500);\r\n        }\r\n        break;\r\n      case 'mouseleave':\r\n        if (this.isPreview$.value) {\r\n          this.remove();\r\n          this.isPreview$.next(false);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private add() {\r\n    if (!this.added) {\r\n      this.added = true;\r\n      this.addLayerToMap();\r\n    }\r\n  }\r\n\r\n  private remove() {\r\n    if (this.added) {\r\n      this.added = false;\r\n      this.removeLayerFromMap();\r\n      this.layersSubcriptions.map(s => s.unsubscribe());\r\n      this.layersSubcriptions = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private addLayerToMap() {\r\n    if (this.map === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (this.layer.meta.dataType !== LAYER) {\r\n      return undefined;\r\n    }\r\n\r\n    const layerOptions = (this.layer as SearchResult<LayerOptions>).data;\r\n    this.layersSubcriptions.push(\r\n      this.layerService\r\n        .createAsyncLayer(layerOptions)\r\n        .subscribe(layer => this.map.addLayer(layer))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = false\r\n   */\r\n  private removeLayerFromMap() {\r\n    if (this.map === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (this.layer.meta.dataType !== LAYER) {\r\n      return undefined;\r\n    }\r\n\r\n    const oLayer = this.map.getLayerById(this.layer.data.sourceOptions.id);\r\n    this.map.removeLayer(oLayer);\r\n  }\r\n\r\n  isInResolutionsRange(resolution: number) {\r\n    const minResolution = this.layer.data.minResolution;\r\n    const maxResolution = this.layer.data.maxResolution;\r\n    this.inRange$.next(\r\n      resolution >= minResolution && resolution <= maxResolution\r\n    );\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    if (this.added) {\r\n      return this.inRange$.value\r\n        ? 'igo.geo.catalog.layer.removeFromMap'\r\n        : 'igo.geo.catalog.layer.removeFromMapOutRange';\r\n    } else {\r\n      return this.inRange$.value\r\n        ? 'igo.geo.catalog.layer.addToMap'\r\n        : 'igo.geo.catalog.layer.addToMapOutRange';\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatButtonModule,\r\n  MatBadgeModule\r\n} from '@angular/material';\r\n\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule,\r\n  IgoMatBadgeIconModule,\r\n  IgoStopPropagationModule\r\n} from '@igo2/common';\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoMetadataModule } from './../../metadata/metadata.module';\r\nimport { SearchResultsComponent } from './search-results.component';\r\nimport { SearchResultsItemComponent } from './search-results-item.component';\r\nimport { SearchResultAddButtonComponent } from './search-results-add-button.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatBadgeModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatButtonModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoStopPropagationModule,\r\n    IgoLanguageModule,\r\n    IgoMatBadgeIconModule,\r\n    IgoMetadataModule,\r\n  ],\r\n  exports: [\r\n    SearchResultsComponent,\r\n    SearchResultAddButtonComponent\r\n  ],\r\n  declarations: [\r\n    SearchResultsComponent,\r\n    SearchResultsItemComponent,\r\n    SearchResultAddButtonComponent\r\n  ]\r\n})\r\nexport class IgoSearchResultsModule {}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  OnDestroy,\r\n  Self,\r\n  OnInit,\r\n  HostListener,\r\n  AfterContentChecked\r\n} from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { SearchService } from './search.service';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport { transform } from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olgeom from 'ol/geom';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\n\r\nimport { SearchResult, Research } from './search.interfaces';\r\nimport { EntityStore } from '@igo2/common';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { take } from 'rxjs/operators';\r\nimport { tryBindStoreLayer } from '../../feature/shared/feature.utils';\r\nimport { FeatureStore } from '../../feature/shared/store';\r\nimport { FeatureMotion, FEATURE } from '../../feature/shared/feature.enums';\r\nimport { SearchSourceService } from './search-source.service';\r\nimport { sourceCanReverseSearchAsSummary } from './search.utils';\r\nimport { MediaService } from '@igo2/core';\r\n\r\n/**\r\n * This directive makes the mouse coordinate trigger a reverse search on available search sources.\r\n * The search results are placed into a label, on a cross icon, representing the mouse coordinate.\r\n * By default, no search sources. Config in config file must be defined.\r\n * the layer level.\r\n */\r\n@Directive({\r\n  selector: '[igoSearchPointerSummary]'\r\n})\r\nexport class SearchPointerSummaryDirective implements OnInit, OnDestroy, AfterContentChecked {\r\n\r\n  public store: FeatureStore<Feature>;\r\n  private lonLat: [number, number];\r\n  private pointerSearchStore: EntityStore<SearchResult> = new EntityStore<SearchResult>([]);\r\n  private lastTimeoutRequest;\r\n  private store$$: Subscription;\r\n  private reverseSearch$$: Subscription[] = [];\r\n  private hasPointerReverseSearchSource: boolean =  false;\r\n\r\n  /**\r\n   * Listener to the pointer move event\r\n   */\r\n  private pointerMoveListener: ListenerFunction;\r\n\r\n  private searchPointerSummaryFeatureId: string = 'searchPointerSummaryFeatureId';\r\n  /**\r\n   * The delay where the mouse must be motionless before trigger the reverse search\r\n   */\r\n  @Input() igoSearchPointerSummaryDelay: number = 1000;\r\n\r\n  /**\r\n   * If the user has enabled or not the directive\r\n   */\r\n  @Input() igoSearchPointerSummaryEnabled: boolean = false;\r\n\r\n  @HostListener('mouseout')\r\n  mouseout() {\r\n    clearTimeout(this.lastTimeoutRequest);\r\n    this.clearLayer();\r\n  }\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  get mapProjection(): string {\r\n    return (this.component.map as IgoMap).projection;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private searchService: SearchService,\r\n    private searchSourceService: SearchSourceService,\r\n    private mediaService: MediaService\r\n  ) { }\r\n\r\n  /**\r\n   * Start listening to pointermove and reverse search results.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.listenToMapPointerMove();\r\n    this.subscribeToPointerStore();\r\n\r\n    this.map.status$.pipe(take(1)).subscribe(() => {\r\n      this.store = new FeatureStore<Feature>([], {map: this.map});\r\n      this.initStore();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize the pointer position store\r\n   * @internal\r\n   */\r\n  private initStore() {\r\n    const store = this.store;\r\n\r\n    const layer = new VectorLayer({\r\n      title: 'searchPointerSummary',\r\n      zIndex: 900,\r\n      source: new FeatureDataSource(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false,\r\n      style: pointerPositionSummaryMarker\r\n    });\r\n    tryBindStoreLayer(store, layer);\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n      if (!this.searchSourceService.getEnabledSources().filter(sourceCanReverseSearchAsSummary).length) {\r\n        this.hasPointerReverseSearchSource = false;\r\n      } else {\r\n        this.hasPointerReverseSearchSource = true;\r\n      }\r\n    }\r\n\r\n  /**\r\n   * Stop listening to pointermove and reverse search results.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.unlistenToMapPointerMove();\r\n    this.unsubscribeToPointerStore();\r\n    this.unsubscribeReverseSearch();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to pointermove result store\r\n   * @internal\r\n   */\r\n  subscribeToPointerStore() {\r\n    this.store$$ = this.pointerSearchStore.entities$.subscribe(resultsUnderPointerPosition => {\r\n      this.entitiesToPointerOverlay(resultsUnderPointerPosition);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build an object based on the closest feature by type (base on type and distance properties )\r\n   * @param results SearchResult[]\r\n   * @returns OL style function\r\n   */\r\n  private computeSummaryClosestFeature(results: SearchResult[]): {} {\r\n    const closestResultByType = {};\r\n\r\n    results.map(result => {\r\n      if (result.data.properties.type && result.data.properties.distance >= 0) {\r\n        if (closestResultByType.hasOwnProperty(result.data.properties.type)) {\r\n          const prevDistance = closestResultByType[result.data.properties.type].distance;\r\n          if (result.data.properties.distance < prevDistance) {\r\n            closestResultByType[result.data.properties.type] = { distance: result.data.properties.distance, title: result.meta.title };\r\n          }\r\n        } else {\r\n          closestResultByType[result.data.properties.type] = { distance: result.data.properties.distance, title: result.meta.title };\r\n        }\r\n      }\r\n    });\r\n\r\n    return closestResultByType;\r\n  }\r\n\r\n  /**\r\n   * convert store entities to a pointer position overlay with label summary on.\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private entitiesToPointerOverlay(resultsUnderPointerPosition: SearchResult[]) {\r\n    const closestResultByType = this.computeSummaryClosestFeature(resultsUnderPointerPosition);\r\n    const summarizedClosestType = Object.keys(closestResultByType);\r\n    const processedSummarizedClosestType = [];\r\n    const summary = [];\r\n    resultsUnderPointerPosition.map(result => {\r\n      const typeIndex = summarizedClosestType.indexOf(result.data.properties.type);\r\n      if (typeIndex !== -1) {\r\n        summary.push(closestResultByType[result.data.properties.type].title);\r\n        summarizedClosestType.splice(typeIndex, 1);\r\n        processedSummarizedClosestType.push(result.data.properties.type);\r\n      } else {\r\n        if (processedSummarizedClosestType.indexOf(result.data.properties.type) === -1) {\r\n          summary.push(result.meta.title);\r\n        }\r\n      }\r\n    });\r\n    if (summary.length) {\r\n      this.addPointerOverlay(summary.join('\\n'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On map pointermove\r\n   */\r\n  private listenToMapPointerMove() {\r\n    this.pointerMoveListener = this.map.ol.on(\r\n      'pointermove',\r\n      (event: OlMapBrowserPointerEvent) => this.onMapEvent(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to pointer store.\r\n   * @internal\r\n   */\r\n  unsubscribeToPointerStore() {\r\n    this.store$$.unsubscribe();\r\n  }\r\n  /**\r\n   * Unsubscribe to reverse seatch store.\r\n   * @internal\r\n   */\r\n  unsubscribeReverseSearch() {\r\n    this.reverseSearch$$.map(s => s.unsubscribe());\r\n    this.reverseSearch$$ = [];\r\n  }\r\n\r\n  /**\r\n   * Stop listening for map pointermove\r\n   * @internal\r\n   */\r\n  private unlistenToMapPointerMove() {\r\n    this.map.ol.un(this.pointerMoveListener.type, this.pointerMoveListener.listener);\r\n    this.pointerMoveListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Trigger reverse search when the mouse is motionless during the defined delay (pointerMoveDelay).\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onMapEvent(event: OlMapBrowserPointerEvent) {\r\n    if (\r\n      event.dragging || !this.igoSearchPointerSummaryEnabled ||\r\n      !this.hasPointerReverseSearchSource || this.mediaService.isTouchScreen()) {\r\n      this.clearLayer();\r\n      return;\r\n    }\r\n    if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves\r\n      clearTimeout(this.lastTimeoutRequest);\r\n      this.clearLayer();\r\n      this.unsubscribeReverseSearch();\r\n    }\r\n\r\n    this.lonLat = transform(event.coordinate, this.mapProjection, 'EPSG:4326');\r\n\r\n    this.lastTimeoutRequest = setTimeout(() => {\r\n      this.onSearchCoordinate();\r\n    }, this.igoSearchPointerSummaryDelay);\r\n  }\r\n\r\n  private onSearchCoordinate() {\r\n    this.pointerSearchStore.clear();\r\n    const results = this.searchService.reverseSearch(this.lonLat, { params: { geometry: 'false', icon: 'false' } }, true);\r\n\r\n    for (const i in results) {\r\n      if (results.length > 0) {\r\n        this.reverseSearch$$.push(\r\n          results[i].request.subscribe((_results: SearchResult<Feature>[]) => {\r\n            this.onSearch({ research: results[i], results: _results });\r\n          }));\r\n      }\r\n    }\r\n  }\r\n\r\n  private onSearch(event: { research: Research; results: SearchResult[] }) {\r\n    const results = event.results;\r\n    const newResults = this.pointerSearchStore.all()\r\n      .filter((result: SearchResult) => result.source !== event.research.source)\r\n      .concat(results);\r\n    this.pointerSearchStore.load(newResults);\r\n  }\r\n\r\n  /**\r\n   * Add a feature to the pointer store\r\n   * @param text string\r\n   */\r\n  private addPointerOverlay(text: string) {\r\n    this.clearLayer();\r\n\r\n    const geometry = new olgeom.Point(\r\n      transform(this.lonLat, 'EPSG:4326', this.mapProjection)\r\n    );\r\n    const feature = new olFeature({ geometry });\r\n    const geojsonGeom = new OlGeoJSON().writeGeometryObject(geometry, {\r\n      featureProjection: this.mapProjection,\r\n      dataProjection: this.mapProjection\r\n    });\r\n\r\n    const f: Feature = {\r\n      type: FEATURE,\r\n      geometry: geojsonGeom,\r\n      projection: this.mapProjection,\r\n      properties: {\r\n        id: this.searchPointerSummaryFeatureId,\r\n        pointerSummary: text\r\n      },\r\n      meta: {\r\n        id: this.searchPointerSummaryFeatureId\r\n      },\r\n      ol: feature\r\n    };\r\n    this.store.setLayerFeatures([f], FeatureMotion.None);\r\n  }\r\n\r\n/**\r\n * Clear the pointer store features\r\n */\r\nprivate clearLayer() {\r\n  if (this.store) {\r\n    this.store.clearLayer();\r\n  }\r\n}\r\n\r\n}\r\n\r\n/**\r\n * Create a default style for the pointer position and it's label summary.\r\n * @param feature OlFeature\r\n * @returns OL style function\r\n */\r\nexport function pointerPositionSummaryMarker(feature: olFeature, resolution: number): olstyle.Style {\r\n  return new olstyle.Style({\r\n    image: new olstyle.Icon({\r\n      src: './assets/igo2/geo/icons/cross_black_18px.svg',\r\n      imgSize: [18, 18], // for ie\r\n    }),\r\n\r\n    text: new olstyle.Text({\r\n      text: feature.get('pointerSummary'),\r\n      textAlign: 'left',\r\n      textBaseline: 'bottom',\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      backgroundFill: new olstyle.Fill({ color: 'rgba(255, 255, 255, 0.5)' }),\r\n      backgroundStroke: new olstyle.Stroke({ color: 'rgba(200, 200, 200, 0.75)', width: 2 }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true,\r\n      offsetX: 10,\r\n      offsetY: -10,\r\n      padding: [2.5, 2.5, 2.5, 2.5]\r\n    })\r\n  });\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { provideSearchSourceService } from './shared/search-source-service.providers';\r\nimport { provideDefaultIChercheSearchResultFormatter } from './shared/sources/icherche.providers';\r\nimport { provideDefaultCoordinatesSearchResultFormatter } from './shared/sources/coordinates.providers';\r\nimport { provideILayerSearchResultFormatter } from './shared/sources/ilayer.providers';\r\n\r\nimport { IgoSearchBarModule } from './search-bar/search-bar.module';\r\nimport { IgoSearchSelectorModule } from './search-selector/search-selector.module';\r\nimport { IgoSearchResultsModule } from './search-results/search-results.module';\r\nimport { IgoSearchSettingsModule } from './search-settings/search-settings.module';\r\nimport { SearchPointerSummaryDirective } from './shared/search-pointer-summary.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  exports: [\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule,\r\n    IgoSearchSettingsModule,\r\n    SearchPointerSummaryDirective\r\n  ],\r\n  declarations: [SearchPointerSummaryDirective]\r\n})\r\nexport class IgoSearchModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoSearchModule,\r\n      providers: [\r\n        provideSearchSourceService(),\r\n        provideDefaultIChercheSearchResultFormatter(),\r\n        provideDefaultCoordinatesSearchResultFormatter(),\r\n        provideILayerSearchResultFormatter()\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { FlexibleState, getEntityTitle } from '@igo2/common';\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport { Feature } from '../feature/shared/feature.interfaces';\r\nimport { FeatureMotion } from '../feature/shared/feature.enums';\r\nimport { moveToOlFeatures } from '../feature/shared/feature.utils';\r\nimport { IgoMap } from '../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-toast',\r\n  templateUrl: './toast.component.html',\r\n  styleUrls: ['./toast.component.scss']\r\n})\r\nexport class ToastComponent {\r\n  static SWIPE_ACTION = {\r\n    UP: 'swipeup',\r\n    DOWN: 'swipedown'\r\n  };\r\n  private format = new olFormatGeoJSON();\r\n\r\n  @Input()\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n  set expanded(value: boolean) {\r\n    this.state = value ? 'expanded' : 'collapsed';\r\n    this._expanded = value;\r\n  }\r\n  private _expanded: boolean;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n  }\r\n  private _feature: Feature;\r\n\r\n  @Output() opened = new EventEmitter<boolean>();\r\n\r\n  public state: FlexibleState;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.feature); }\r\n\r\n  constructor() {}\r\n\r\n  toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.opened.emit(this.expanded);\r\n  }\r\n\r\n  zoomToFeatureExtent() {\r\n    if (this.feature.geometry) {\r\n      const olFeature = this.format.readFeature(this.feature, {\r\n        dataProjection: this.feature.projection,\r\n        featureProjection: this.map.projection\r\n      });\r\n      moveToOlFeatures(this.map, [olFeature], FeatureMotion.Zoom);\r\n    }\r\n  }\r\n\r\n  swipe(action: string) {\r\n    if (action === ToastComponent.SWIPE_ACTION.UP) {\r\n      if (!this.expanded) {\r\n        this.toggle();\r\n      }\r\n    } else if (action === ToastComponent.SWIPE_ACTION.DOWN) {\r\n      if (this.expanded) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule, MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoPanelModule, IgoFlexibleModule } from '@igo2/common';\r\n\r\nimport { IgoFeatureModule } from '../feature/feature.module';\r\nimport { ToastComponent } from './toast.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    IgoPanelModule,\r\n    IgoFlexibleModule,\r\n    IgoFeatureModule\r\n  ],\r\n  exports: [ToastComponent],\r\n  declarations: [ToastComponent]\r\n})\r\nexport class IgoToastModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoToastModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { OnUpdateInputs, WidgetComponent } from '@igo2/common';\r\n\r\nimport { Layer } from '../../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter',\r\n  templateUrl: './ogc-filter.component.html',\r\n  styleUrls: ['./ogc-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterComponent implements OnUpdateInputs, WidgetComponent {\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted on complete\r\n   */\r\n  @Output() complete = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted on cancel\r\n   */\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Implemented as part of OnUpdateInputs\r\n   */\r\n  onUpdateInputs() {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * On close, emit the cancel event\r\n   */\r\n  onClose() {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nimport { Widget, WidgetService } from '@igo2/common';\r\n\r\nimport { OgcFilterComponent } from './ogc-filter/ogc-filter.component';\r\n\r\nexport const OgcFilterWidget = new InjectionToken<Widget>('OgcFilterWidget');\r\n\r\nexport function ogcFilterWidgetFactory(widgetService: WidgetService): Widget {\r\n  return widgetService.create(OgcFilterComponent);\r\n}\r\n\r\nexport function provideOgcFilterWidget() {\r\n  return {\r\n    provide: OgcFilterWidget,\r\n    useFactory: ogcFilterWidgetFactory,\r\n    deps: [WidgetService]\r\n  };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoFilterModule } from '../../../filter/filter.module';\r\nimport { OgcFilterComponent } from './ogc-filter.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule,\r\n    IgoFilterModule\r\n  ],\r\n  exports: [OgcFilterComponent],\r\n  declarations: [OgcFilterComponent],\r\n  entryComponents: [OgcFilterComponent]\r\n})\r\nexport class IgoOgcFilterModule {}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WfsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: VectorLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WfsWorkspace extends Workspace {\r\n\r\n  get layer(): VectorLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WfsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  ActionStore,\r\n  EntityTableTemplate\r\n} from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { SourceFieldsOptionsParams } from '../../datasource';\r\n\r\nimport { WfsWorkspace } from './wfs-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WfsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: VectorLayer, map: IgoMap): WfsWorkspace {\r\n    return new WfsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      entityStore: this.createFeatureStore(layer, map),\r\n      actionStore: new ActionStore([]),\r\n      meta: {\r\n        tableTemplate: this.createTableTemplate(layer)\r\n      }\r\n    });\r\n  }\r\n\r\n  private createFeatureStore(layer: VectorLayer, map: IgoMap): FeatureStore {\r\n    const store = new FeatureStore([], {map});\r\n    store.bindLayer(layer);\r\n\r\n    const loadingStrategy = new FeatureStoreLoadingLayerStrategy({});\r\n    const selectionStrategy = new FeatureStoreSelectionStrategy({\r\n      map,\r\n      hitTolerance: 5\r\n    });\r\n    store.addStrategy(loadingStrategy, true);\r\n    store.addStrategy(selectionStrategy, true);\r\n\r\n    return store;\r\n  }\r\n\r\n  private createTableTemplate(layer: VectorLayer): EntityTableTemplate {\r\n    const fields = layer.dataSource.options.sourceFields || [];\r\n    const columns = fields.map((field: SourceFieldsOptionsParams) => {\r\n      return {\r\n        name: `properties.${field.name}`,\r\n        title: field.alias ? field.alias : field.name\r\n      };\r\n    });\r\n\r\n    return {\r\n      selection: true,\r\n      sort: true,\r\n      columns\r\n    };\r\n  }\r\n\r\n}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WmsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: ImageLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WmsWorkspace extends Workspace {\r\n\r\n  get layer(): ImageLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WmsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ActionStore } from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { WmsWorkspace } from './wms-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WmsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: ImageLayer, map: IgoMap): WmsWorkspace {\r\n    return new WmsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      actionStore: new ActionStore([])\r\n    });\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { Workspace, WorkspaceStore, WorkspaceSelectorComponent } from '@igo2/common';\r\n\r\nimport { Layer, ImageLayer, VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { WFSDataSource, WMSDataSource } from '../../datasource';\r\nimport { OgcFilterableDataSourceOptions } from '../../filter';\r\n\r\nimport { WfsWorkspaceService } from '../shared/wfs-workspace.service';\r\nimport { WmsWorkspaceService } from '../shared/wms-workspace.service';\r\n\r\n@Directive({\r\n  selector: '[igoWorkspaceSelector]'\r\n})\r\nexport class WorkspaceSelectorDirective implements OnInit, OnDestroy {\r\n\r\n  private layers$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  get workspaceStore(): WorkspaceStore {\r\n    return this.component.store;\r\n  }\r\n\r\n  constructor(\r\n    private component: WorkspaceSelectorComponent,\r\n    private wfsWorkspaceService: WfsWorkspaceService,\r\n    private wmsWorkspaceService: WmsWorkspaceService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$\r\n      .pipe(debounceTime(50))\r\n      .subscribe((layers: Layer[]) =>\r\n        this.onLayersChange(layers)\r\n      );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  private onLayersChange(layers: Layer[]) {\r\n    const editableLayers = layers.filter((layer: Layer) =>\r\n      this.layerIsEditable(layer)\r\n    );\r\n    const editableLayersIds = editableLayers.map((layer: Layer) => layer.id);\r\n\r\n    const workspacesToAdd = editableLayers\r\n      .map((layer: VectorLayer) => this.getOrCreateWorkspace(layer))\r\n      .filter((workspace: Workspace | undefined) => workspace !== undefined);\r\n\r\n    const workspacesToRemove = this.workspaceStore.all()\r\n      .filter((workspace: Workspace) => {\r\n        return editableLayersIds.indexOf(workspace.id) < 0;\r\n      });\r\n\r\n    if (workspacesToRemove.length > 0) {\r\n      workspacesToRemove.forEach((workspace: Workspace) => {\r\n        workspace.deactivate();\r\n      });\r\n      this.workspaceStore.state.updateMany(workspacesToRemove, {active: false, selected: false});\r\n      this.workspaceStore.deleteMany(workspacesToRemove);\r\n    }\r\n\r\n    if (workspacesToAdd.length > 0) {\r\n      this.workspaceStore.insertMany(workspacesToAdd);\r\n    }\r\n  }\r\n\r\n  private getOrCreateWorkspace(layer: VectorLayer | ImageLayer): Workspace | undefined {\r\n    const workspace = this.workspaceStore.get(layer.id);\r\n    if (workspace !== undefined) {\r\n      return;\r\n    }\r\n    if (layer.dataSource instanceof WFSDataSource) {\r\n      return this.wfsWorkspaceService.createWorkspace(layer as VectorLayer, this.map);\r\n    } else if (layer.dataSource instanceof WMSDataSource) {\r\n      return this.wmsWorkspaceService.createWorkspace(layer as ImageLayer, this.map);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  private layerIsEditable(layer: Layer): boolean {\r\n    const dataSource = layer.dataSource;\r\n    if (dataSource instanceof WFSDataSource) {\r\n      return true;\r\n    }\r\n\r\n    if (dataSource instanceof WMSDataSource) {\r\n      const dataSourceOptions = (dataSource.options ||\r\n        {}) as OgcFilterableDataSourceOptions;\r\n      return (\r\n        dataSourceOptions.ogcFilters && dataSourceOptions.ogcFilters.enabled\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { WorkspaceSelectorDirective } from './workspace-selector.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n   WorkspaceSelectorDirective\r\n  ],\r\n  declarations: [\r\n    WorkspaceSelectorDirective\r\n  ]\r\n})\r\nexport class IgoWorkspaceSelectorModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IgoWidgetModule } from '@igo2/common';\r\n\r\nimport { provideOgcFilterWidget } from './widgets/widgets';\r\n\r\nimport { IgoOgcFilterModule } from './widgets/ogc-filter/ogc-filter.module';\r\nimport { IgoWorkspaceSelectorModule } from './workspace-selector/workspace-selector.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetModule,\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  exports: [\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    provideOgcFilterWidget()\r\n  ]\r\n})\r\nexport class IgoGeoWorkspaceModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoWktModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoWktModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { IgoCatalogModule } from './catalog/catalog.module';\r\nimport { IgoDataSourceModule } from './datasource/datasource.module';\r\nimport { IgoDownloadModule } from './download/download.module';\r\nimport { IgoFeatureModule } from './feature/feature.module';\r\nimport { IgoFilterModule } from './filter/filter.module';\r\nimport { IgoGeometryModule } from './geometry/geometry.module';\r\nimport { IgoImportExportModule } from './import-export/import-export.module';\r\nimport { IgoLayerModule } from './layer/layer.module';\r\nimport { IgoMapModule } from './map/map.module';\r\nimport { IgoMeasureModule } from './measure/measure.module';\r\nimport { IgoMetadataModule } from './metadata/metadata.module';\r\nimport { IgoOverlayModule } from './overlay/overlay.module';\r\nimport { IgoPrintModule } from './print/print.module';\r\nimport { IgoQueryModule } from './query/query.module';\r\nimport { IgoDirectionsModule } from './directions/directions.module';\r\nimport { IgoSearchModule } from './search/search.module';\r\nimport { IgoToastModule } from './toast/toast.module';\r\nimport { IgoGeoWorkspaceModule } from './workspace/workspace.module';\r\nimport { IgoWktModule } from './wkt/wkt.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoCatalogModule,\r\n    IgoDataSourceModule,\r\n    IgoDownloadModule,\r\n    IgoFeatureModule,\r\n    IgoFilterModule,\r\n    IgoGeometryModule,\r\n    IgoImportExportModule,\r\n    IgoLayerModule,\r\n    IgoMapModule,\r\n    IgoMeasureModule,\r\n    IgoMetadataModule,\r\n    IgoOverlayModule,\r\n    IgoPrintModule,\r\n    IgoQueryModule,\r\n    IgoDirectionsModule,\r\n    IgoSearchModule,\r\n    IgoToastModule,\r\n    IgoGeoWorkspaceModule,\r\n    IgoWktModule\r\n  ]\r\n})\r\nexport class IgoGeoModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoGeoModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport olWKT from 'ol/format/WKT';\r\n\r\nimport { FEATURE, Feature, FeatureGeometry } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\n\r\n/**\r\n * Cadastre search source\r\n */\r\n@Injectable()\r\nexport class CadastreSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'cadastre';\r\n  static type = FEATURE;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return CadastreSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return CadastreSearchSource.type;\r\n  }\r\n\r\n  /*\r\n   * Source : https://wiki.openstreetmap.org/wiki/Key:amenity\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Cadastre (QuÃ©bec)',\r\n      searchUrl: 'https://carto.cptaq.gouv.qc.ca/php/find_lot_v1.php?'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a place by name\r\n   * @param term Place name\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    term = term.endsWith(',') ? term.slice(0, -1) : term;\r\n    term = term.startsWith(',') ? term.substr(1) : term;\r\n    term = term.replace(/ /g, '');\r\n\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    if (!params.get('numero') || !params.get('numero').match(/^[0-9,]+$/g)) {\r\n      return of([]);\r\n    }\r\n    return this.http\r\n      .get(this.searchUrl, { params, responseType: 'text' })\r\n      .pipe(map((response: string) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          numero: term,\r\n          epsg: '4326'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: string): SearchResult<Feature>[] {\r\n    return response\r\n      .split('<br />')\r\n      .filter((lot: string) => lot.length > 0)\r\n      .map((lot: string) => this.dataToResult(lot));\r\n  }\r\n\r\n  private dataToResult(data: string): SearchResult<Feature> {\r\n    const lot = data.split(';');\r\n    const numero = lot[0];\r\n    const wkt = lot[7];\r\n    const geometry = this.computeGeometry(wkt);\r\n    const properties = { NoLot: numero };\r\n    const id = [this.getId(), 'cadastre', numero].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: numero,\r\n        icon: 'map-marker'\r\n      },\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: numero\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeGeometry(wkt: string): FeatureGeometry {\r\n    const feature = new olWKT().readFeature(wkt, {\r\n      dataProjection: 'EPSG:4326',\r\n      featureProjection: 'EPSG:4326'\r\n    });\r\n    return {\r\n      type: feature.getGeometry().getType(),\r\n      coordinates: feature.getGeometry().getCoordinates()\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { CadastreSearchSource } from './cadastre';\r\n\r\n/**\r\n * Cadastre search source factory\r\n * @ignore\r\n */\r\nexport function cadastreSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new CadastreSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${CadastreSearchSource.id}`),\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the Cadastre search source\r\n */\r\nexport function provideCadastreSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: cadastreSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FEATURE, Feature, FeatureGeometry } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\nimport { NominatimData } from './nominatim.interfaces';\r\n\r\n/**\r\n * Nominatim search source\r\n */\r\n@Injectable()\r\nexport class NominatimSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'nominatim';\r\n  static type = FEATURE;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return NominatimSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return NominatimSearchSource.type;\r\n  }\r\n\r\n  /*\r\n   * Source : https://wiki.openstreetmap.org/wiki/Key:amenity\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Nominatim (OSM)',\r\n      searchUrl: 'https://nominatim.openstreetmap.org/search',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'amenity',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.nominatim.type.food',\r\n              value:\r\n                'bar,bbq,biergaten,cafe,drinking_water,fast_food,food_court,ice_cream,pub,restaurant',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.nominatim.type.health',\r\n              value:\r\n                'baby_hatch,clinic,dentist,doctors,hospital,nursing_home,pharmacy,social_facility,veterinary',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.nominatim.type.entertainment',\r\n              value:\r\n                'arts_centre,brothel,casino,cinema,community_center_fountain,gambling,nightclub,planetarium \\\r\n                          ,public_bookcase,social_centre,stripclub,studio,swingerclub,theatre,internet_cafe',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.nominatim.type.finance',\r\n              value: 'atm,bank,bureau_de_change',\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: true\r\n            },\r\n            {\r\n              title: '20',\r\n              value: 20,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'restrictExtent',\r\n          name: 'countrycodes',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.nominatim.country.canada',\r\n              value: 'CA',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'igo.geo.search.nominatim.country.all',\r\n              value: null,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'multiple object',\r\n          name: 'dedupe',\r\n          values: [\r\n            {\r\n              title: 'igo.geo.search.searchSources.settings.true',\r\n              value: 0,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'igo.geo.search.searchSources.settings.false',\r\n              value: 1,\r\n              enabled: true\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a place by name\r\n   * @param term Place name\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    if (!params.get('q')) {\r\n      return of([]);\r\n    }\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response: NominatimData[]) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          q: this.computeTerm(term),\r\n          format: 'json'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: NominatimData[]): SearchResult<Feature>[] {\r\n    return response.map((data: NominatimData) => this.dataToResult(data));\r\n  }\r\n\r\n  private dataToResult(data: NominatimData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const geometry = this.computeGeometry(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), 'place', data.place_id].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.display_name,\r\n        icon: 'map-marker'\r\n      },\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.display_name\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: NominatimData): { [key: string]: any } {\r\n    return {\r\n      display_name: data.display_name,\r\n      place_id: data.place_id,\r\n      osm_type: data.osm_type,\r\n      class: data.class,\r\n      type: data.type\r\n    };\r\n  }\r\n\r\n  private computeGeometry(data: NominatimData): FeatureGeometry {\r\n    return {\r\n      type: 'Point',\r\n      coordinates: [parseFloat(data.lon), parseFloat(data.lat)]\r\n    };\r\n  }\r\n\r\n  private computeExtent(data: NominatimData): [number, number, number, number] {\r\n    return [\r\n      parseFloat(data.boundingbox[2]),\r\n      parseFloat(data.boundingbox[0]),\r\n      parseFloat(data.boundingbox[3]),\r\n      parseFloat(data.boundingbox[1])\r\n    ];\r\n  }\r\n\r\n  private computeTerm(term: string): string {\r\n    return this.computeTermTags(term);\r\n  }\r\n\r\n  /**\r\n   * Add hashtag from query in Nominatim's format (+[])\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTermTags(term: string): string {\r\n    const hashtags = super.getHashtagsValid(term, 'amenity');\r\n    if (!hashtags) {\r\n      return this.computeTermSettings(term);\r\n    }\r\n\r\n    if (!hashtags.length) {\r\n      return null;\r\n    }\r\n\r\n    term = term.replace(/(#[^\\s]*)/g, '');\r\n    hashtags.forEach(tag => {\r\n      term += '+[' + tag + ']';\r\n    });\r\n\r\n    return term;\r\n  }\r\n\r\n  /**\r\n   * Add hashtag from settings in Nominatim's format (+[])\r\n   * @param term Query\r\n   */\r\n  private computeTermSettings(term: string): string {\r\n    this.options.settings.forEach(settings => {\r\n      if (settings.name === 'amenity') {\r\n        settings.values.forEach(conf => {\r\n          if (conf.enabled && typeof conf.value === 'string') {\r\n            const splitted = conf.value.split(',');\r\n            splitted.forEach(value => {\r\n              term += '+[' + value + ']';\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return term;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { NominatimSearchSource } from './nominatim';\r\n\r\n/**\r\n * Nominatim search source factory\r\n * @ignore\r\n */\r\nexport function nominatimSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new NominatimSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${NominatimSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the Nominatim search source\r\n */\r\nexport function provideNominatimSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: nominatimSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  StoredQueriesData,\r\n  StoredQueriesResponse,\r\n  StoredQueriesReverseData,\r\n  StoredQueriesReverseResponse,\r\n  StoredQueriesSearchSourceOptions,\r\n  StoredQueriesFields,\r\n  StoredQueriesReverseSearchSourceOptions\r\n} from './storedqueries.interfaces';\r\n\r\nimport * as olformat from 'ol/format';\r\n\r\n/**\r\n * StoredQueries search source\r\n */\r\n@Injectable()\r\nexport class StoredQueriesSearchSource extends SearchSource\r\n  implements TextSearch {\r\n  static id = 'storedqueries';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [\r\n    'boundedBy',\r\n    'id',\r\n    'coord_x',\r\n    'coord_y'\r\n  ];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesSearchSourceOptions;\r\n    if (this.storedQueriesOptions && !this.storedQueriesOptions.available) {\r\n      return;\r\n    }\r\n\r\n    const defaultStoredqueryId = 'rtss';\r\n    const defaultFieldSplitter: StoredQueriesFields[] = [\r\n      { name: 'rtss', defaultValue: '-99' },\r\n      { name: 'chainage', defaultValue: '0', splitPrefix: '\\\\+' }\r\n    ];\r\n    const defaultOutputformat = 'text/xml; subtype=gml/3.1.1';\r\n    const defaultSrsname = 'EPSG:4326';\r\n    const defaultResultTitle = 'title';\r\n\r\n    if (!this.storedQueriesOptions) {\r\n      console.log(\r\n        ' No configuration for this search source (storedqueries). You will use the default values'\r\n      );\r\n      this.storedQueriesOptions = {\r\n        storedquery_id: defaultStoredqueryId,\r\n        fields: defaultFieldSplitter,\r\n        outputformat: defaultOutputformat,\r\n        srsname: defaultSrsname,\r\n        resultTitle: defaultResultTitle\r\n      };\r\n      this.resultTitle = defaultResultTitle;\r\n      console.log('Default values', this.storedQueriesOptions);\r\n    }\r\n\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err =\r\n        'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.fields) {\r\n      throw new Error(\r\n        'Stored Queries :You have to set \"fields\" into options. ex: fields: {\"name\": \"rtss\", \"defaultValue\": \"-99\"}'\r\n      );\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat =\r\n      this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname =\r\n      this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n\r\n    const storedQueryId = this.storedQueriesOptions.storedquery_id.toLowerCase();\r\n    if (\r\n      storedQueryId.includes('getfeaturebyid') &&\r\n      this.storedQueriesOptions.outputformat\r\n        .toLowerCase()\r\n        .includes('getfeaturebyid')\r\n    ) {\r\n      let err =\r\n        'You must set a geojson format for your stored query. This is due to an openlayers issue)';\r\n      err += ' (wfs 1.1.0 & gml 3.1.1 limitation)';\r\n      throw new Error(err);\r\n    }\r\n\r\n    if (!(this.storedQueriesOptions.fields instanceof Array)) {\r\n      this.storedQueriesOptions.fields = [this.storedQueriesOptions.fields];\r\n    }\r\n\r\n    this.multipleFieldsQuery =\r\n      this.storedQueriesOptions.fields.length > 1 ? true : false;\r\n\r\n    this.storedQueriesOptions.fields.forEach((field, index) => {\r\n      if (this.multipleFieldsQuery && !field.splitPrefix && index !== 0) {\r\n        throw new Error(\r\n          'Stored Queries :You must set a field spliter into your field definition (optional for the first one!)'\r\n        );\r\n      }\r\n      if (!field.defaultValue) {\r\n        throw new Error(\r\n          'Stored Queries :You must set a field default value into your field definition'\r\n        );\r\n      }\r\n    });\r\n\r\n    this.storedQueriesOptions.resultTitle =\r\n      this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return StoredQueriesSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/ws/swtq'\r\n    };\r\n  }\r\n\r\n  // URL CALL EXAMPLES:\r\n  //  GetFeatureById (mandatory storedquery for wfs server) (outputformat must be in geojson)\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://geoegl.msp.gouv.qc.ca/apis/ws/swtq?service=wfs&version=2.0.0&request=GetFeature&storedquery_id=urn:ogc:def:query:OGC-WFS::GetFeatureById&srsname=epsg:4326&outputformat=geojson&ID=a_num_route.132\r\n  //  Custom StoredQuery\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://geoegl.msp.gouv.qc.ca/apis/ws/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=rtss&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&rtss=0013801110000c&chainage=12\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const storedqueriesParams = this.termSplitter(\r\n      term,\r\n      this.storedQueriesOptions.fields\r\n    );\r\n    const params = this.computeRequestParams(\r\n      options || {},\r\n      storedqueriesParams\r\n    );\r\n\r\n    if (\r\n      new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)\r\n    ) {\r\n      return this.http\r\n        .get(this.searchUrl, { params, responseType: 'text' })\r\n        .pipe(\r\n          map(response => {\r\n            return this.extractResults(this.extractWFSData(response));\r\n          })\r\n        );\r\n    } else {\r\n      return this.http.get(this.searchUrl, { params }).pipe(\r\n        map(response => {\r\n          return this.extractResults(this.extractWFSData(response));\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private termSplitter(term: string, fields: StoredQueriesFields[]): {} {\r\n    const splittedTerm = {};\r\n    let remainingTerm = term;\r\n    let cnt = 0;\r\n\r\n    // Used to build the default values\r\n    fields.forEach(field => {\r\n      splittedTerm[field.name] = field.defaultValue;\r\n      const splitterRegex = new RegExp(field.splitPrefix + '(.+)', 'i');\r\n      if (splitterRegex.test(remainingTerm)) {\r\n        cnt = field.splitPrefix ? (cnt += 1) : cnt;\r\n        remainingTerm = remainingTerm.split(splitterRegex)[1];\r\n      }\r\n    });\r\n    if (cnt === 0) {\r\n      splittedTerm[fields[0].name] = term;\r\n      return splittedTerm;\r\n    }\r\n    remainingTerm = term;\r\n    const localFields = [...fields].reverse();\r\n    localFields.forEach(field => {\r\n      const splitterRegex = new RegExp(field.splitPrefix || '' + '(.+)', 'i');\r\n      if (remainingTerm || remainingTerm !== '') {\r\n        const values = remainingTerm.split(splitterRegex);\r\n        remainingTerm = values[0];\r\n        if (values[1]) {\r\n          splittedTerm[field.name] = values[1].trim();\r\n        }\r\n      }\r\n    });\r\n    return splittedTerm;\r\n  }\r\n\r\n  private computeRequestParams(\r\n    options: TextSearchOptions,\r\n    queryParams\r\n  ): HttpParams {\r\n    const wfsversion = this.storedQueriesOptions.storedquery_id\r\n      .toLowerCase()\r\n      .includes('getfeaturebyid')\r\n      ? '2.0.0'\r\n      : '1.1.0';\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'wfs',\r\n          version: wfsversion,\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat\r\n        },\r\n        queryParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: StoredQueriesResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle]\r\n      ? this.storedQueriesOptions.resultTitle\r\n      : this.resultTitle;\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        // extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.title,\r\n        titleHtml: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: StoredQueriesData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source\r\n */\r\n\r\n// EXAMPLE CALLS\r\n// tslint:disable-next-line:max-line-length\r\n// https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=lim_adm&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&long=-71.292469&lat=46.748107\r\n//\r\n\r\n@Injectable()\r\nexport class StoredQueriesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'storedqueriesreverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesReverseSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesReverseSearchSourceOptions;\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err =\r\n        'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.longField) {\r\n      throw new Error(\r\n        'Stored Queries :You have to set \"longField\" to map the longitude coordinate to the query params.'\r\n      );\r\n    }\r\n    if (!this.storedQueriesOptions.latField) {\r\n      throw new Error(\r\n        'Stored Queries :You have to set \"latField\" to map the latitude coordinate to the query params.'\r\n      );\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat =\r\n      this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname =\r\n      this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n    this.storedQueriesOptions.resultTitle =\r\n      this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesReverseSearchSource.id;\r\n  }\r\n\r\n  getType(): string {\r\n    return StoredQueriesReverseSearchSource.type;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries (reverse)',\r\n      searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n\r\n    if (\r\n      new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)\r\n    ) {\r\n      return this.http\r\n        .get(this.searchUrl, { params, responseType: 'text' })\r\n        .pipe(\r\n          map(response => {\r\n            return this.extractResults(this.extractWFSData(response));\r\n          })\r\n        );\r\n    } else {\r\n      return this.http.get(this.searchUrl, { params }).pipe(\r\n        map(response => {\r\n          return this.extractResults(this.extractWFSData(response));\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    const longLatParams = {};\r\n    longLatParams[this.storedQueriesOptions.longField] = lonLat[0];\r\n    longLatParams[this.storedQueriesOptions.latField] = lonLat[1];\r\n\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'WFS',\r\n          version: '1.1.0',\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat\r\n        },\r\n        longLatParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: StoredQueriesReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle]\r\n      ? this.storedQueriesOptions.resultTitle\r\n      : this.resultTitle;\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(\r\n    data: StoredQueriesReverseData\r\n  ): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return Object.assign(properties, { type: data.properties.doc_type });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  StoredQueriesSearchSource,\r\n  StoredQueriesReverseSearchSource\r\n} from './storedqueries';\r\n\r\n/**\r\n * StoredQueries search source factory\r\n * @ignore\r\n */\r\nexport function storedqueriesSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueries search source\r\n */\r\nexport function provideStoredQueriesSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source factory\r\n * @ignore\r\n */\r\n\r\nexport function storedqueriesReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesReverseSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueriesReverse search source\r\n */\r\nexport function provideStoredQueriesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","export enum DirectionsFormat {\r\n  GeoJSON,\r\n  JSON\r\n}\r\nexport enum SourceDirectionsType {\r\n  Route = 'Route',\r\n  Trip = 'Trip'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { ConfigService, Message } from '@igo2/core';\r\n\r\nimport { Directions, DirectionsOptions } from '../shared/directions.interface';\r\nimport { DirectionsFormat, SourceDirectionsType } from '../shared/directions.enum';\r\n\r\nimport { DirectionsSource } from './directions-source';\r\nimport { DirectionsSourceOptions } from './directions-source.interface';\r\n\r\n@Injectable()\r\nexport class OsrmDirectionsSource extends DirectionsSource {\r\n  get enabled(): boolean {\r\n    return this.options.enabled !== false;\r\n  }\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  static _name = 'OSRM QuÃ©bec';\r\n  private directionsUrl =\r\n    'https://geoegl.msp.gouv.qc.ca/services/itineraire/route/v1/driving/';\r\n  private options: DirectionsSourceOptions;\r\n\r\n  constructor(private http: HttpClient, private config: ConfigService) {\r\n    super();\r\n    this.options = this.config.getConfig('directionsSources.osrm') || {};\r\n    this.directionsUrl = this.options.url || this.directionsUrl;\r\n  }\r\n\r\n  getName(): string {\r\n    return OsrmDirectionsSource._name;\r\n  }\r\n\r\n  route(coordinates: [number, number][], directionsOptions: DirectionsOptions = {}): Observable<Directions[]> {\r\n    const directionsParams = this.getRouteParams(directionsOptions);\r\n    return this.http\r\n      .get<JSON[]>(this.directionsUrl + coordinates.join(';'), {\r\n        params: directionsParams\r\n      })\r\n      .pipe(map(res => this.extractRoutesData(res)));\r\n  }\r\n\r\n  private extractRoutesData(response): Directions[] {\r\n    const routeResponse = [];\r\n    response.routes.forEach(route => {\r\n      routeResponse.push(this.formatRoute(route, response.waypoints));\r\n    });\r\n    return routeResponse;\r\n  }\r\n\r\n  private getRouteParams(directionsOptions: DirectionsOptions = {}): HttpParams {\r\n\r\n    directionsOptions.alternatives = directionsOptions.alternatives !== undefined ? directionsOptions.alternatives : true;\r\n    directionsOptions.steps = directionsOptions.steps !== undefined  ? directionsOptions.steps : true;\r\n    directionsOptions.geometries = directionsOptions.geometries !== undefined  ? directionsOptions.geometries : 'geojson';\r\n    directionsOptions.overview = directionsOptions.overview !== undefined  ? directionsOptions.overview : false;\r\n\r\n    return new HttpParams({\r\n      fromObject: {\r\n        alternatives: directionsOptions.alternatives ? 'true' : 'false',\r\n        overview: directionsOptions.overview ? 'simplified' : 'full',\r\n        steps: directionsOptions.steps ? 'true' : 'false',\r\n        geometries: directionsOptions.geometries ? directionsOptions.geometries : 'geojson',\r\n      }\r\n    });\r\n  }\r\n\r\n  private formatRoute(roadNetworkRoute: any, waypoints: any): Directions {\r\n    const stepsUI = [];\r\n    roadNetworkRoute.legs.forEach(leg => {\r\n      leg.steps.forEach(step => {\r\n        stepsUI.push(step);\r\n      });\r\n    });\r\n    return {\r\n      id: uuid(),\r\n      title: roadNetworkRoute.legs[0].summary,\r\n      source: OsrmDirectionsSource._name,\r\n      sourceType: SourceDirectionsType.Route,\r\n      order: 1,\r\n      format: DirectionsFormat.GeoJSON,\r\n      icon: 'directions',\r\n      projection: 'EPSG:4326',\r\n      waypoints,\r\n      distance: roadNetworkRoute.distance,\r\n      duration: roadNetworkRoute.duration,\r\n      geometry: roadNetworkRoute.geometry,\r\n      legs: roadNetworkRoute.legs,\r\n      steps: stepsUI,\r\n      weight: roadNetworkRoute.weight,\r\n      weight_name: roadNetworkRoute.weight_name\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { DirectionsSource } from './directions-source';\r\nimport { OsrmDirectionsSource } from './osrm-directions-source';\r\n\r\nexport function osrmDirectionsSourcesFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new OsrmDirectionsSource(http, config);\r\n}\r\n\r\nexport function provideOsrmDirectionsSource() {\r\n  return {\r\n    provide: DirectionsSource,\r\n    useFactory: osrmDirectionsSourcesFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n"]}