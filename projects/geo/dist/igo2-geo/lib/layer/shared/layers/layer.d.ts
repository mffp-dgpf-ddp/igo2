import { BehaviorSubject, Observable, Subject } from 'rxjs';
import olLayer from 'ol/layer/Layer';
import { AuthInterceptor } from '@igo2/auth';
import { SubjectStatus } from '@igo2/utils';
import { DataSource, Legend } from '../../../datasource';
import { IgoMap } from '../../../map/shared/map';
import { LayerOptions } from './layer.interface';
export declare abstract class Layer {
    options: LayerOptions;
    protected authInterceptor?: AuthInterceptor;
    collapsed: boolean;
    dataSource: DataSource;
    legend: Legend[];
    legendCollapsed: boolean;
    firstLoadComponent: boolean;
    map: IgoMap;
    ol: olLayer;
    status$: Subject<SubjectStatus>;
    private resolution$$;
    readonly id: string;
    readonly alias: string;
    title: string;
    zIndex: number;
    baseLayer: boolean;
    opacity: number;
    isInResolutionsRange: boolean;
    readonly isInResolutionsRange$: BehaviorSubject<boolean>;
    maxResolution: number;
    minResolution: number;
    visible: boolean;
    readonly visible$: BehaviorSubject<boolean>;
    readonly displayed: boolean;
    readonly displayed$: Observable<boolean>;
    readonly showInLayerList: boolean;
    constructor(options: LayerOptions, authInterceptor?: AuthInterceptor);
    protected abstract createOlLayer(): olLayer;
    setMap(igoMap: IgoMap | undefined): void;
    private observeResolution;
    private unobserveResolution;
    private updateInResolutionsRange;
}
