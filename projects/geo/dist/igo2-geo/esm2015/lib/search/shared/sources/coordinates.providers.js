/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ConfigService, LanguageService } from '@igo2/core';
import { SearchSource } from './source';
import { CoordinatesReverseSearchSource, CoordinatesSearchResultFormatter } from './coordinates';
/**
 * ICherche search result formatter factory
 * @ignore
 * @param {?} languageService
 * @return {?}
 */
export function defaultCoordinatesSearchResultFormatterFactory(languageService) {
    return new CoordinatesSearchResultFormatter(languageService);
}
/**
 * Function that returns a provider for the ICherche search result formatter
 * @return {?}
 */
export function provideDefaultCoordinatesSearchResultFormatter() {
    return {
        provide: CoordinatesSearchResultFormatter,
        useFactory: defaultCoordinatesSearchResultFormatterFactory,
        deps: [LanguageService]
    };
}
/**
 * CoordinatesReverse search source factory
 * @ignore
 * @param {?} config
 * @param {?} languageService
 * @return {?}
 */
export function CoordinatesReverseSearchSourceFactory(config, languageService) {
    return new CoordinatesReverseSearchSource(config.getConfig(`searchSources.${CoordinatesReverseSearchSource.id}`), languageService, (/** @type {?} */ (config.getConfig('projections'))) || []);
}
/**
 * Function that returns a provider for the IChercheReverse search source
 * @return {?}
 */
export function provideCoordinatesReverseSearchSource() {
    return {
        provide: SearchSource,
        useFactory: CoordinatesReverseSearchSourceFactory,
        multi: true,
        deps: [ConfigService, LanguageService]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29vcmRpbmF0ZXMucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGlnbzIvZ2VvLyIsInNvdXJjZXMiOlsibGliL3NlYXJjaC9zaGFyZWQvc291cmNlcy9jb29yZGluYXRlcy5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDeEMsT0FBTyxFQUNMLDhCQUE4QixFQUM5QixnQ0FBZ0MsRUFDakMsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7QUFPdkIsTUFBTSxVQUFVLDhDQUE4QyxDQUM1RCxlQUFnQztJQUVoQyxPQUFPLElBQUksZ0NBQWdDLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDL0QsQ0FBQzs7Ozs7QUFLRCxNQUFNLFVBQVUsOENBQThDO0lBQzVELE9BQU87UUFDTCxPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDLFVBQVUsRUFBRSw4Q0FBOEM7UUFDMUQsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDO0tBQ3hCLENBQUM7QUFDSixDQUFDOzs7Ozs7OztBQU1ELE1BQU0sVUFBVSxxQ0FBcUMsQ0FDbkQsTUFBcUIsRUFDckIsZUFBZ0M7SUFFaEMsT0FBTyxJQUFJLDhCQUE4QixDQUN2QyxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQiw4QkFBOEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUN0RSxlQUFlLEVBQ2YsbUJBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBZ0IsSUFBSSxFQUFFLENBQ3RELENBQUM7QUFDSixDQUFDOzs7OztBQUtELE1BQU0sVUFBVSxxQ0FBcUM7SUFDbkQsT0FBTztRQUNMLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLFVBQVUsRUFBRSxxQ0FBcUM7UUFDakQsS0FBSyxFQUFFLElBQUk7UUFDWCxJQUFJLEVBQUUsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDO0tBQ3ZDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuXHJcbmltcG9ydCB7IENvbmZpZ1NlcnZpY2UsIExhbmd1YWdlU2VydmljZSB9IGZyb20gJ0BpZ28yL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU2VhcmNoU291cmNlIH0gZnJvbSAnLi9zb3VyY2UnO1xyXG5pbXBvcnQge1xyXG4gIENvb3JkaW5hdGVzUmV2ZXJzZVNlYXJjaFNvdXJjZSxcclxuICBDb29yZGluYXRlc1NlYXJjaFJlc3VsdEZvcm1hdHRlclxyXG59IGZyb20gJy4vY29vcmRpbmF0ZXMnO1xyXG5pbXBvcnQgeyBQcm9qZWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vbWFwL3NoYXJlZC9wcm9qZWN0aW9uLmludGVyZmFjZXMnO1xyXG5cclxuLyoqXHJcbiAqIElDaGVyY2hlIHNlYXJjaCByZXN1bHQgZm9ybWF0dGVyIGZhY3RvcnlcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb29yZGluYXRlc1NlYXJjaFJlc3VsdEZvcm1hdHRlckZhY3RvcnkoXHJcbiAgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2VcclxuKSB7XHJcbiAgcmV0dXJuIG5ldyBDb29yZGluYXRlc1NlYXJjaFJlc3VsdEZvcm1hdHRlcihsYW5ndWFnZVNlcnZpY2UpO1xyXG59XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcHJvdmlkZXIgZm9yIHRoZSBJQ2hlcmNoZSBzZWFyY2ggcmVzdWx0IGZvcm1hdHRlclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVEZWZhdWx0Q29vcmRpbmF0ZXNTZWFyY2hSZXN1bHRGb3JtYXR0ZXIoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHByb3ZpZGU6IENvb3JkaW5hdGVzU2VhcmNoUmVzdWx0Rm9ybWF0dGVyLFxyXG4gICAgdXNlRmFjdG9yeTogZGVmYXVsdENvb3JkaW5hdGVzU2VhcmNoUmVzdWx0Rm9ybWF0dGVyRmFjdG9yeSxcclxuICAgIGRlcHM6IFtMYW5ndWFnZVNlcnZpY2VdXHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvb3JkaW5hdGVzUmV2ZXJzZSBzZWFyY2ggc291cmNlIGZhY3RvcnlcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIENvb3JkaW5hdGVzUmV2ZXJzZVNlYXJjaFNvdXJjZUZhY3RvcnkoXHJcbiAgY29uZmlnOiBDb25maWdTZXJ2aWNlLFxyXG4gIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlXHJcbikge1xyXG4gIHJldHVybiBuZXcgQ29vcmRpbmF0ZXNSZXZlcnNlU2VhcmNoU291cmNlKFxyXG4gICAgY29uZmlnLmdldENvbmZpZyhgc2VhcmNoU291cmNlcy4ke0Nvb3JkaW5hdGVzUmV2ZXJzZVNlYXJjaFNvdXJjZS5pZH1gKSxcclxuICAgIGxhbmd1YWdlU2VydmljZSxcclxuICAgIGNvbmZpZy5nZXRDb25maWcoJ3Byb2plY3Rpb25zJykgYXMgUHJvamVjdGlvbltdIHx8IFtdXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHByb3ZpZGVyIGZvciB0aGUgSUNoZXJjaGVSZXZlcnNlIHNlYXJjaCBzb3VyY2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQ29vcmRpbmF0ZXNSZXZlcnNlU2VhcmNoU291cmNlKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBwcm92aWRlOiBTZWFyY2hTb3VyY2UsXHJcbiAgICB1c2VGYWN0b3J5OiBDb29yZGluYXRlc1JldmVyc2VTZWFyY2hTb3VyY2VGYWN0b3J5LFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgICBkZXBzOiBbQ29uZmlnU2VydmljZSwgTGFuZ3VhZ2VTZXJ2aWNlXVxyXG4gIH07XHJcbn1cclxuIl19