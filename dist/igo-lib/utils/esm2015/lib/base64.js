/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable */
/** @type {?} */
const ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
export class Base64 {
    /**
     * @private
     * @param {?} s
     * @param {?} i
     * @return {?}
     */
    static getByte(s, i) {
        /** @type {?} */
        const x = s.charCodeAt(i);
        return x;
    }
    /**
     * @private
     * @param {?} s
     * @param {?} i
     * @return {?}
     */
    static getByte64(s, i) {
        /** @type {?} */
        const idx = this.ALPHA.indexOf(s.charAt(i));
        return idx;
    }
    /**
     * @param {?} s
     * @return {?}
     */
    static decode(s) {
        /** @type {?} */
        let pads = 0;
        /** @type {?} */
        let i;
        /** @type {?} */
        let b10;
        /** @type {?} */
        let imax = s.length;
        /** @type {?} */
        let x = [];
        s = String(s);
        if (imax === 0) {
            return s;
        }
        if (s.charAt(imax - 1) === this.PADCHAR) {
            pads = 1;
            if (s.charAt(imax - 2) === this.PADCHAR) {
                pads = 2;
            }
            imax -= 4;
        }
        for (i = 0; i < imax; i += 4) {
            b10 =
                (this.getByte64(s, i) << 18) |
                    (this.getByte64(s, i + 1) << 12) |
                    (this.getByte64(s, i + 2) << 6) |
                    this.getByte64(s, i + 3);
            x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 255, b10 & 255));
        }
        switch (pads) {
            case 1:
                b10 =
                    (this.getByte64(s, i) << 18) |
                        (this.getByte64(s, i + 1) << 12) |
                        (this.getByte64(s, i + 2) << 6);
                x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 255));
                break;
            case 2:
                b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12);
                x.push(String.fromCharCode(b10 >> 16));
                break;
        }
        return x.join('');
    }
    /**
     * @param {?} s
     * @return {?}
     */
    static encode(s) {
        s = String(s);
        /** @type {?} */
        let i;
        /** @type {?} */
        let b10;
        /** @type {?} */
        let x = [];
        /** @type {?} */
        let imax = s.length - s.length % 3;
        if (s.length === 0) {
            return s;
        }
        for (i = 0; i < imax; i += 3) {
            b10 =
                (this.getByte(s, i) << 16) |
                    (this.getByte(s, i + 1) << 8) |
                    this.getByte(s, i + 2);
            x.push(this.ALPHA.charAt(b10 >> 18));
            x.push(this.ALPHA.charAt((b10 >> 12) & 63));
            x.push(this.ALPHA.charAt((b10 >> 6) & 63));
            x.push(this.ALPHA.charAt(b10 & 63));
        }
        switch (s.length - imax) {
            case 1:
                b10 = this.getByte(s, i) << 16;
                x.push(this.ALPHA.charAt(b10 >> 18) +
                    this.ALPHA.charAt((b10 >> 12) & 63) +
                    this.PADCHAR +
                    this.PADCHAR);
                break;
            case 2:
                b10 = (this.getByte(s, i) << 16) | (this.getByte(s, i + 1) << 8);
                x.push(this.ALPHA.charAt(b10 >> 18) +
                    this.ALPHA.charAt((b10 >> 12) & 63) +
                    this.ALPHA.charAt((b10 >> 6) & 63) +
                    this.PADCHAR);
                break;
        }
        return x.join('');
    }
}
Base64.PADCHAR = '=';
Base64.ALPHA = ALPHA;
if (false) {
    /**
     * @type {?}
     * @private
     */
    Base64.PADCHAR;
    /**
     * @type {?}
     * @private
     */
    Base64.ALPHA;
}
//# sourceMappingURL=data:application/json;base64,