{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@igo2/geo/lib/datasource/shared/datasources/data.service.ts","ng://@igo2/geo/lib/datasource/utils/id-generator.ts","ng://@igo2/geo/lib/datasource/shared/datasources/datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/feature-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/osm-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/xyz-datasource.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs.service.ts","ng://@igo2/geo/lib/query/shared/query.enums.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-datasource.ts","ng://@igo2/geo/lib/datasource/utils/tilegrid.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wmts-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/carto-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/arcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/tilearcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/websocket-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/mvt-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/cluster-datasource.ts","ng://@igo2/geo/lib/feature/shared/feature.enums.ts","ng://@igo2/geo/lib/layer/shared/layer.enums.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.interface.ts","ng://@igo2/geo/lib/layer/utils/image-watcher.ts","ng://@igo2/geo/lib/layer/utils/tile-watcher.ts","ng://@igo2/geo/lib/layer/utils/legend.ts","ng://@igo2/geo/lib/layer/shared/layers/image-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/tile-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vector-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vectortile-layer.ts","ng://@igo2/geo/lib/layer/shared/style.service.ts","ng://@igo2/geo/lib/query/shared/query.utils.ts","ng://@igo2/geo/lib/layer/layer-item/layer-item.component.ts","ng://@igo2/geo/lib/layer/layer-legend/layer-legend.component.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.enum.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.component.ts","ng://@igo2/geo/lib/map/shared/map.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list-binding.directive.ts","ng://@igo2/geo/lib/feature/shared/strategies/strategy.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading-layer.ts","ng://@igo2/geo/lib/feature/shared/store.ts","ng://@igo2/geo/lib/feature/shared/strategies/selection.ts","ng://@igo2/geo/lib/feature/shared/feature.utils.ts","ng://@igo2/geo/lib/overlay/shared/overlay.utils.ts","ng://@igo2/geo/lib/overlay/shared/overlay.ts","ng://@igo2/geo/lib/map/utils/layer-watcher.ts","ng://@igo2/geo/lib/map/shared/map.enums.ts","ng://@igo2/geo/lib/map/shared/map.utils.ts","ng://@igo2/geo/lib/map/shared/controllers/controller.ts","ng://@igo2/geo/lib/map/shared/controllers/view.ts","ng://@igo2/geo/lib/map/shared/map.ts","ng://@igo2/geo/lib/map/shared/projection.service.ts","ng://@igo2/geo/lib/map/map-browser/map-browser.component.ts","ng://@igo2/geo/lib/map/zoom-button/zoom-button.component.ts","ng://@igo2/geo/lib/map/geolocate-button/geolocate-button.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.animation.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/mini-basemap.component.ts","ng://@igo2/geo/lib/map/rotation-button/rotation-button.component.ts","ng://@igo2/geo/lib/datasource/utils/esri-style-generator.ts","ng://@igo2/geo/lib/datasource/shared/capabilities.service.ts","ng://@igo2/geo/lib/datasource/shared/datasource.service.ts","ng://@igo2/geo/lib/layer/shared/layer.service.ts","ng://@igo2/geo/lib/catalog/shared/catalog.enum.ts","ng://@igo2/geo/lib/query/shared/query.service.ts","ng://@igo2/geo/lib/query/shared/query.directive.ts","ng://@igo2/geo/lib/search/shared/sources/source.ts","ng://@igo2/geo/lib/query/shared/query-search-source.ts","ng://@igo2/geo/lib/catalog/shared/catalog.service.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-layer.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-group.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.module.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library-item.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.module.ts","ng://@igo2/geo/lib/catalog/catalog.module.ts","ng://@igo2/geo/lib/datasource/datasource.module.ts","ng://@igo2/geo/lib/filter/shared/filterable-datasource.pipe.ts","ng://@igo2/geo/lib/filter/shared/time-filter.service.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.service.ts","ng://@igo2/geo/lib/download/shared/download.service.ts","ng://@igo2/geo/lib/download/download-button/download-button.component.ts","ng://@igo2/geo/lib/download/download.module.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.component.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.module.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.component.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.module.ts","ng://@igo2/geo/lib/feature/feature.module.ts","ng://@igo2/geo/lib/filter/time-filter-form/time-filter-form.component.ts","ng://@igo2/geo/lib/filter/time-filter-item/time-filter-item.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list-binding.directive.ts","ng://@igo2/geo/lib/wkt/shared/wkt.service.ts","ng://@igo2/geo/lib/filter/ogc-filter-form/ogc-filter-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-form/ogc-filterable-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-item/ogc-filterable-item.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list-binding.directive.ts","ng://@igo2/geo/lib/filter/ogc-filter-button/ogc-filter-button.component.ts","ng://@igo2/geo/lib/filter/filter.module.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.component.ts","ng://@igo2/geo/lib/measure/shared/measure.enum.ts","ng://@igo2/geo/lib/measure/shared/measure.utils.ts","ng://@igo2/geo/lib/geometry/shared/geometry.errors.ts","ng://@igo2/geo/lib/geometry/shared/geometry.utils.ts","ng://@igo2/geo/lib/geometry/shared/controls/draw.ts","ng://@igo2/geo/lib/geometry/shared/controls/modify.ts","ng://@igo2/geo/lib/geometry/shared/controls/slice.ts","ng://@igo2/geo/lib/measure/measurer/measurer-dialog.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.component.ts","ng://@igo2/geo/lib/measure/measurer/measure-format.pipe.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field-input.component.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.module.ts","ng://@igo2/geo/lib/geometry/geometry.module.ts","ng://@igo2/geo/lib/import-export/shared/export.errors.ts","ng://@igo2/geo/lib/import-export/shared/export.utils.ts","ng://@igo2/geo/lib/import-export/shared/export.type.ts","ng://@igo2/geo/lib/import-export/shared/export.service.ts","ng://@igo2/geo/lib/import-export/shared/import.errors.ts","ng://@igo2/geo/lib/import-export/shared/import.utils.ts","ng://@igo2/geo/lib/import-export/shared/import.service.ts","ng://@igo2/geo/lib/import-export/import-export/import-export.component.ts","ng://@igo2/geo/lib/import-export/shared/drop-geo-file.directive.ts","ng://@igo2/geo/lib/import-export/import-export.module.ts","ng://@igo2/geo/lib/layer/layer.module.ts","ng://@igo2/geo/lib/map/shared/mapLayer.directive.ts","ng://@igo2/geo/lib/map/map.module.ts","ng://@igo2/geo/lib/measure/measurer/measurer-item.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.module.ts","ng://@igo2/geo/lib/measure/measure.module.ts","ng://@igo2/geo/lib/metadata/shared/metadata.service.ts","ng://@igo2/geo/lib/metadata/metadata-button/metadata-button.component.ts","ng://@igo2/geo/lib/metadata/metadata.module.ts","ng://@igo2/geo/lib/overlay/shared/overlay.enum.ts","ng://@igo2/geo/lib/overlay/shared/overlay.service.ts","ng://@igo2/geo/lib/overlay/shared/overlay.directive.ts","ng://@igo2/geo/lib/overlay/overlay.module.ts","ng://@igo2/geo/lib/print/shared/print.service.ts","ng://@igo2/geo/lib/print/print/print.component.ts","ng://@igo2/geo/lib/print/shared/print.type.ts","ng://@igo2/geo/lib/print/print-form/print-form.component.ts","ng://@igo2/geo/lib/print/print.module.ts","ng://@igo2/geo/lib/query/shared/query-search-source.providers.ts","ng://@igo2/geo/lib/query/query.module.ts","ng://@igo2/geo/lib/search/shared/search-source.service.ts","ng://@igo2/geo/lib/search/shared/search.utils.ts","ng://@igo2/geo/lib/search/shared/search.service.ts","ng://@igo2/geo/lib/routing/routing-sources/routing-source.ts","ng://@igo2/geo/lib/routing/shared/routing-source.service.ts","ng://@igo2/geo/lib/routing/shared/routing.service.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form.service.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form.component.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form-binding.directive.ts","ng://@igo2/geo/lib/routing/routing.module.ts","ng://@igo2/geo/lib/search/shared/search-source-service.providers.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.providers.ts","ng://@igo2/geo/lib/utils/googleLinks.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.providers.ts","ng://@igo2/geo/lib/search/shared/search.enums.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.component.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.module.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.component.ts","ng://@igo2/geo/lib/search/search-bar/search-url-param.directive.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.module.ts","ng://@igo2/geo/lib/search/search-results/search-results.component.ts","ng://@igo2/geo/lib/search/search-results/search-results-item.component.ts","ng://@igo2/geo/lib/search/search-results/search-results.module.ts","ng://@igo2/geo/lib/search/search.module.ts","ng://@igo2/geo/lib/toast/toast.component.ts","ng://@igo2/geo/lib/toast/toast.module.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.component.ts","ng://@igo2/geo/lib/workspace/widgets/widgets.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.module.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.service.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.service.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.directive.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.module.ts","ng://@igo2/geo/lib/workspace/workspace.module.ts","ng://@igo2/geo/lib/wkt/wkt.module.ts","ng://@igo2/geo/lib/geo.module.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.providers.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.providers.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.providers.ts","ng://@igo2/geo/lib/routing/shared/routing.enum.ts","ng://@igo2/geo/lib/routing/routing-sources/osrm-routing-source.ts","ng://@igo2/geo/lib/routing/routing-sources/routing-source.provider.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","generateIdFromSourceOptions","options","wms","generateWMSIdFromSourceOptions","wmts","generateWMTSIdFromSourceOptions","xyz","generateXYZIdFromSourceOptions","feature","generateFeatureIdFromSourceOptions","osm","_options","type","generateId","layers","params","chain","url","Md5","hashStr","layer","uuid","DataSource","networkService","dataService","id","ol","createOlSource","getLegend","scale","legend","onLayerStatusChange","status","FeatureDataSource","tslib_1.__extends","sourceOptions","format","getSourceFormatFromOptions","olSourceVector","olFormatCls","formatType","olformat","undefined","Error","olformat.GeoJSON","formatOptions","OSMDataSource","olSourceOSM","XYZDataSource","olSourceXYZ","OgcFilterWriter","filterSequence","operators","PropertyIsEqualTo","spatial","fieldRestrict","PropertyIsNotEqualTo","PropertyIsLike","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsBetween","During","PropertyIsNull","Intersects","Within","Contains","buildFilter","filters","extent","proj","fieldNameGeometry","ourBboxFilter","enableBbox","test","JSON","stringify","geometryName","olfilter.bbox","getCode","join","checkIgoFiltersProperties","wfsOptions","srsName","featureNS","featurePrefix","featureTypes","filter","olfilter.and","bundleFilter","outputFormat","query","olFormatWFS","writeGetFeature","XMLSerializer","serializeToString","split","filterObject","_this","logicalArray_1","forEach","element","createFilter","operator","logical","logicalArray","filterOptions","geometry","wfsPropertyName","propertyName","wfsPattern","pattern","wfsMatchCase","matchCase","wfsWildCard","wildCard","wfsSingleChar","singleChar","wfsEscapeChar","escapeChar","wfsLowerBoundary","lowerBoundary","wfsUpperBoundary","upperBoundary","wfsGeometryName","wfsExtent","wfsWktGeometry","wkt_geometry","wfsSrsName","wfsBegin","begin","wfsEnd","end","wfsExpression","expression","olFormatWKT","readGeometry","dataProjection","featureProjection","olfilter.between","olfilter.contains","olfilter.during","olfilter.equalTo","olfilter.greaterThan","olfilter.greaterThanOrEqualTo","olfilter.intersects","olfilter.isNull","olfilter.lessThan","olfilter.lessThanOrEqualTo","olfilter.like","replace","olfilter.notEqualTo","olfilter.within","olfilter.or","olfilter.not","defineInterfaceFilterSequence","level","addInterfaceFilter","igoOgcFilterObject","parentLogical","f","active","filterid","igoSpatialSelector","filterArray","addFilterProperties","rebuiltIgoOgcFilterObjectFromSequence","sequence","nextElement_1","lastProcessedFilter_1","lastParentLogical_1","logicalArray_2","uiFilter","index","indexOf","console","log","WFSDataSource","wfsService","_super","checkWfsOptions","ogcFilterWriter","getSourceFieldsFromWFS","paramsWFS","urlWfs","version","ogcFilters","enabled","editable","baseWfsQuery","wfsVersion","paramTypename","paramMaxFeatures","maxFeatures","downloadBaseUrl","download","dynamicUrl","getFormatFromOptions","overlaps","resolution","srsname","xmlFilter","baseUrl","strategy","OlLoadingStrategy.bbox","toLowerCase","patternGml3","RegExp","OlFormat.GeoJSON","OlFormat.WFS","WFSService","http","getData","datasource","sourceFields","keys","wfsGetCapabilities","subscribe","wfsCapabilities","xmlBody","body","GetPropertyValue","defineFieldAndValuefromWFS","sourcefield","alias","name","field","values","getValueFromWfsGetPropertyValues","rep","wfsDataSourceOptions","buildBaseWfsUrl","wfsQuery","wfsTypeName","wfsGetFeature","nb","epsgCode","propertyname","wfspropertyname","get","responseType","startIndex","retry","Observable","valueList","wfsGetPropertyValue","str","valueReferenceRegex","exec","lastIndex","complete","err","wfsGcUrl","observe","fieldList","fieldListWoGeom","fieldListWoGeomStr","olFormats","match","olformat.WFS","oneFeature","features","readFeatures","getKeys","getGeometryName","manyFeatures","mfeatures","built_properties_value","wfsValueReference","gfvUrl","kv","getProperties","boundedBy","property","fieldType","every","featureProperties","v","Injectable","args","providedIn","HttpClient","DataService","GML2","GML3","GEOJSON","ESRIJSON","TEXT","HTML","IFRAME","BLANK","WMSDataSource","sourceParams","VERSION","SRS","srs","INFO_FORMAT","info_format","refreshIntervalSec","setInterval","refresh","wfsCheckup","buildDynamicDownloadUrlFromParamsWFS","initOgcFilters","rebuildFilter","appliedFilter","formatProcessedOgcFilter","wmsFilterValue","updateParams","queryTitle","queryHtmlTarget","QueryHtmlTarget","igoRefresh","Math","random","processedFilter","layerName","asWFSDataSourceOptions","olSourceImageWMS","map","title","createDefaultTileGrid","epsg","projectionExtent","olproj.get","getExtent","size","extentGetWidth","resolutions","matrixIds","z","pow","olTileGridWMTS","origin","extentGetTopLeft","WMTSDataSource","tileGrid","olSourceWMTS","CartoDataSource","crossOrigin","olSourceCarto","htmlString","config","items","visible","html","layerOptions","types_1","tslib_1.__values","types_1_1","oneType","cartocss","includes","pop","color","substr","colors","data","j","layer_name","ArcGISRestDataSource","esrijsonFormat","olFormatEsriJSON","attributions","encodeURIComponent","timeFilter","time","timeExtent","customParams","bind","olloadingstrategy.bbox","legendInfo","parseInt","lyr","_b","_c","lyrLegend","layerId","label","TileArcGISRestDataSource","olSourceTileArcGISRest","WebSocketDataSource","createWebSocket","ws","WebSocket","onmessage","onMessage","onclose","onClose","onerror","onError","onopen","onOpen","event","featureAdded","readFeature","featureToRemove","getFeatureById","getId","removeFeature","addFeature","clear","MVTDataSource","mvtFormat","olFormatMVT","featureClass","olSourceVectorTile","ClusterDataSource","source","olSourceCluster","FEATURE","None","Move","Zoom","Default","LAYER","Layer","dataSource","createOlLayer","zIndex","baseLayer","opacity","set","getZIndex","setZIndex","visibility","setVisible","setOpacity","viewController","getResolution","minResolution","getMinResolution","maxResolution","getMaxResolution","showInLayerList","setMap","TITLE","ABSTRACT","CUSTOM","ImageWatcher","loaded","loading","watch","on","handleLoadStart","handleLoadEnd","unwatch","un","image","__watchers__","SubjectStatus","Working","watcherIndex","splice","Done","Watcher","TileWatcher","tile","getLayersLegends","legends","newContext","document","createElement","getContext","font","heightPos","layers_1","layers_1_1","legendUrls","legendUrl","legendImage","Image","src","onload","fillText","drawImage","height","legendUrls_1","legendUrls_1_1","ImageLayer","watcher","status$","olOptions","olLayerImage","token","getSource","setImageLoadFunction","customLoader","unsubscribe","xhr","XMLHttpRequest","open","setRequestHeader","arrayBufferView","Uint8Array","response","blob","Blob","imageUrl","window","URL","createObjectURL","getImage","send","TileLayer","olLayerTile","VectorLayer","browsable","exportable","animation","flash","olLayerVector","start","Date","getTime","listenerKey","vectorContext","frameState","flashGeom","getGeometry","clone","elapsed","elapsedRatio","duration","easeOut","newColor","ColorAsArray","styleClone","getStyleFunction","getType","radius","getRadius","setRadius","getStroke","setColor","setWidth","getWidth","getFill","setStyle","drawGeometry","unByKey","render","VectorTileLayer","olLayerVectorTile","StyleService","createStyle","parseStyle","styleOptions","olCls","getOlCls","_key","olKey","getOlKey","olstyle","charAt","toUpperCase","slice","olstyle.RegularShape","createStyleByAttribute","styleByAttribute","attribute","stroke","width","fill","icon","baseStyle","olstyle.Style","olstyle.Icon","olstyle.Circle","olstyle.Stroke","olstyle.Fill","getStyle","text","olstyle.Text","createClusterStyle","clusterParam","style","range","clusterRange","clusterIcon","iconScale","clusterScale","toString","layerIsQueryable","queryable","olLayerIsQueryable","olLayer","LayerItemComponent","cdRef","showLegend$","BehaviorSubject","inResolutionRange$","queryBadgeHidden$","toggleLegendOnVisibilityChange","expandLegendIfVisible","updateLegendOnResolutionChange","orderable","queryBadge","removable","ngOnInit","legendCollapsed","collapsed","toggleLegend","updateQueryBadge","resolution$","resolution$$","onResolutionChange","tooltipText","computeTooltip","ngOnDestroy","toggleVisibility","tooltip","layerTooltip","layerMetadata","TooltipType","abstract","inResolutionRange","isInResolutionsRange","hidden","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","LayerLegendComponent","capabilitiesService","legendItems$","updateLegend","computeItemTitle","layerLegend","of","localLayerOptions","parse","find","getWMSOptions","pipe","wmsDataSourceOptions","_layerOptionsFromCapabilities","getScale","legendItems","CapabilitiesService","always","never","default","LayerListService","sortedAlpha","onlyVisible","onlyInRange","keywordInitialized","sortedAlphaInitialized","onlyVisibleInitialized","onlyInRangeInitialized","LayerListComponent","layerListService","hasLayerNotVisible","hasLayerOutOfRange","thresholdToFilterAndSort","layers$","change$","ReplaySubject","showToolbar$","placeholder","floatLabel","layerFilterAndSortOptions","excludeBaseLayers","expandLegendOfVisibleLayers","_layers","setLayers","keyword","change$$","debounce","EMPTY","timer","computeShowToolbar","computeLayers","initLayerFilterAndSortOptions","toggleOnlyVisible","toggleOnlyInRange","toggleSort","sortAlpha","clearKeyword","layersOut","filterLayers","sortLayersByTitle","sortLayersByZindex","showToolbar","LayerListControlsEnum","keepLayerIds","dataSourceOptions","layerKeywords","keywordList","kw","normalize","localKeyword","layerTitle","dataSourceType","keywordRegex_1","keywordInList","sort","layer1","layer2","a","computeOrderable","toolbarThreshold","l","ContentChild","MapService","getMap","LayerListBindingDirective","component","mapService","route","layers$$","ngAfterViewInit","initRoutes","llcKKey","llcAKey","llcVKey","queryParams","keywordFromUrl","sortedAplhaFromUrl","onlyVisibleFromUrl","onlyInRangeFromUrl","Directive","Self","RouteService","Optional","FeatureStoreStrategy","stores","isActive","activate","doDeactivate","doActivate","deactivate","bindStore","store","unbindStore","FeatureStoreLoadingStrategy","stores$$","Map","watchStore","unwatchStore","unwatchAll","has","subscription","view","all$","onFeaturesChange","delete","from","entries","clearLayer","setLayerFeatures","selectMotion","viewScale","areaRatio","getFeatureId","motion","pristine","FeatureMotion","count","FeatureStoreLoadingLayerStrategy","onSourceChanges","olFeatures","getFeatures","setStoreOlFeatures","FeatureStore","entities","strategies","bindLayer","addStrategy","_strategy","removeStrategy","getStrategyOfType","activateStrategyOfType","deactivateStrategyOfType","getEntityId","checkLayer","featureToOl","projection","setLayerOlFeatures","olFeature","featureFromOl","load","olFeaturesMap","olFeaturesToRemove","forEachFeature","newOlFeature","olFeaturesToAddIds","olFeaturesToAdd","removeOlFeaturesFromLayer","addOlFeaturesToLayer","moveToOlFeatures","addFeatures","EntityStore","OlDragSelectInteraction","OlDragBoxInteraction","FeatureStoreSelectionStrategy","overlayStore","createOverlayStore","unselectAll","state","updateAll","selected","addOverlayLayer","listenToMapClick","dragBox","addDragBoxInteraction","watchAll","unlistenToMapClick","removeDragBoxInteraction","removeOverlayLayer","stores$","stateView","manyBy$","record","records","entity","combineLatest","debounceTime","skip","reduce","onSelectFromStore","mapClickListener","onMapClick","listener","exclusive","ctrlKeyDown","reverse","getFeaturesAtPixel","pixel","hitTolerance","layerFilter","onSelectFromMap","olDragSelectInteraction","olInteractions","getInteractions","getArray","olInteractions_1","olInteractions_1_1","olInteraction","condition","addInteraction","olDragSelectInteractionEndKey","onDragBoxEnd","removeInteraction","mapBrowserEvent","acc","olSource","getFeaturesInExtent","overlayFeaturesKeys","featuresKeys","getKey","doMotion","groupedFeatures","groupFeaturesByStore","unselectAllFeaturesFromStore","selectFeaturesFromStore","reverseMany","updateMany","overlayLayer","createOverlayLayer","addLayer","removeLayer","projectionOut","OlFormatGeoJSON","setId","getEntityTitle","mapTitle","getEntityProperty","getEntityRevision","projectionIn","typeSource","olFormat","properties","startsWith","writeGeometryObject","meta","revision","getRevision","computeOlFeatureExtent","olExtent","olextent.createEmpty","olFeatureExtent","olFeatureProjection","olproj.transformExtent","olGeometry","computeOlFeaturesExtent","featureExtent","olextent.extend","scaleExtent","_a","olextent","getSize","featuresAreOutOfView","featuresExtent","mapExtent","viewExtent","x","olextent.containsExtent","featuresAreTooDeepInView","mapExtentArea","olextent.getArea","zoomToExtent","moveToExtent","tryBindStoreLayer","tryAddLoadingStrategy","tryAddSelectionStrategy","overlayDataSource","defaultStyle","overflow","markerStyle","createOverlayMarkerStyle","createBufferStyle","geometryType","getText","setText","createOverlayLayerStyle","iconColor","color$$1","imgSize","anchor","strokeRGBA","strokeWidth","fillRGBA","Overlay","setFeatures","addOlFeatures","addOlFeature","LayerWatcher","subscriptions","unwatchLayer","watchLayer","layer$$","distinctUntilChanged","status_1","Waiting","stringToLonLat","projectionPattern","lonLatStr","lonStr","latStr","parseFloat","viewStatesAreEqual","state1","state2","zoom","trunc","center","formatScale","round","getResolutionFromScale","dpi","getScaleFromResolution","unit","olproj.METERS_PER_UNIT","originalEvent","altKey","MAC","metaKey","ctrlKey","shiftKey","MapController","observerKeys","getOlMap","olMap","setOlMap","teardownObservers","MapViewController","state$","extent$","Subject","states","stateIndex","stateHistory","getView","setupObservers","onMoveEnd","extent$$","setExtent","action","getOlProjection","olView","getProjection","getCenter","olproj.transform","calculateExtent","getUnits","getZoom","zoomIn","zoomTo","zoomOut","animate","easing","oleasing.easeOut","MapViewAction","getRotation","resetRotation","setRotation","hasPreviousState","hasNextState","previousState","setStateIndex","nextState","clearStateHistory","setInitialState","fit","maxZoom","setState","IgoMap","geolocation$","defaultOptions","controls","attribution","layerWatcher","olproj4.register","proj4","init","attributionOpt","olControlAttribution","scaleLine","scaleLineOpt","olControlScaleLine","interactions","altShiftDragRotate","doubleClickZoom","keyboard","mouseWheelZoom","shiftDragZoom","dragPan","pinchRotate","pinchZoom","olinteraction.defaults","setView","overlay","buffer","setTarget","updateView","currentView","viewOptions","unsubscribeGeolocate","olproj.fromLonLat","setCenter","geolocate","changeBaseLayer","getBaseLayers","getLayerById","getLayerByAlias","addLayers","addedLayers","doAddLayer","addBuffer","bufferDataSource","removeLayers","newLayers","layersToRemove","getLayerIndex","doRemoveLayer","removeAllLayers","raiseLayer","moveLayer","lowerLayer","to","layerTo","zIndexTo","zIndexFrom","existingLayer","offset","sortLayersByZIndex","findIndex","_layer","track","first","geolocation$$","geolocation","getTracking","startGeolocation","getAccuracy","getAccuracyGeometry","geolocationFeature","options_","bufferRadius","coordinates","getPosition","bufferGeom","olCircle","bufferStroke","bufferFill","bufferText","showBufferRadius","bufferFeature","setZoom","stopGeolocation","setTracking","olGeolocation","tracking","evt","ProjectionService","getConfig","registerProjection","defs","code","def","ConfigService","MapBrowserComponent","activityService","_view","status$$","handleStatusChange","unregister","activityId","register","ActivityService","ZoomButtonComponent","GeolocateButtonComponent","_map","_color","baseLayersSwitcherSlideInOut","trigger","transition","BaseLayersSwitcherComponent","mediaService","_baseLayers","expand","showButton","media$","Media","Mobile","useStaticIcon","_useStaticIcon","arrayLayers","collapseOrExpand","baseLayers","mapResolution","bl","blHidden","animations","MediaService","MiniBaseMapComponent","layerService","basemap","handleMoveEnd","_baseLayer","handleBaseLayerChanged","_disabled","_display","disabled","baselayer","createLayer","LayerService","RotationButtonComponent","rotationStyle","radians","transform","EsriStyleGenerator","_converters","esriPMS","_convertEsriPMS","esriSFS","_convertEsriSFS","esriSLS","_convertEsriSLS","esriSMS","_convertEsriSMS","esriTS","_convertEsriTS","_renderers","uniqueValue","_renderUniqueValue","simple","_renderSimple","classBreaks","_renderClassBreaks","_convertPointToPixel","point","_transformColor","_getResolutionForScale","units","mpu","symbol","rotation","_transformAngle","angle","weight","family","textBaseline","verticalAlignment","textAlign","horizontalAlignment","offsetX","xoffset","offsetY","yoffset","contentType","imageData","outline","_convertOutline","lineDash","ol3Rad","PI","points","radius2","_convertLabelingInfo","labelingInfo","mapUnits","styles","ii","labelExpression","maxScale","minScale","renderer","defaultSymbol","classes","classBreakInfos","classBreakInfo","min","classMinValue","minValue","classMaxValue","max","field1","infos","uniqueValueInfos","me","hash","info","generateStyle","layerInfo","drawingInfo","styleFunctions","drawingInfoStyle","labelingInfoStyleFunctions","result","capabilitiesStore","parsers","WMSCapabilities","WMTSCapabilities","baseOptions","getCapabilities","capabilities","parseWMSOptions","getWMTSOptions","parseWMTSOptions","getCartoOptions","account","mapId","jsonp","cartoOptions","parseCartoOptions","getArcgisOptions","arcgisOptions","res","catchError","forkJoin","parseArcgisOptions","getTileArcgisOptions","parseTileArcgisOptions","service","HttpParams","fromObject","request","read","findDataSourceInCapabilities","Capability","DataURL","Abstract","KeywordList","getTimeFilter","timeFilterable","ObjectUtils","removeUndefined","Title","MaxScaleDenominator","Infinity","MinScaleDenominator","OnlineResource","extern","mergeDeep","optionsFromCapabilities","layer_definition","styleGenerator","olAttribution","copyrightText","timeInfo","setTime","toUTCString","layerArray","layer_1","isArray","Name","dimension","Dimension","minMaxDim","step","tslib_1.__decorate","Cacheable","DataSourceService","wfsDataSourceService","datasources$","createAsyncDataSource","context","createOSMDataSource","createFeatureDataSource","createWFSDataSource","createWMSDataSource","createWMTSDataSource","createXYZDataSource","createCartoDataSource","createArcGISRestDataSource","createWebSocketDataSource","createMVTDataSource","createTileArcGISRestDataSource","createClusterDataSource","NetworkService","styleService","dataSourceService","tokenKey","createTileLayer","createVectorLayer","createImageLayer","createVectorTileLayer","createAsyncLayer","localStorage","getItem","serviceStyle_1","serviceStyle_2","layerOptionsOl","serviceStyle_3","Group","QueryService","queryEnabled","queryLayer","getQueryUrl","extractData","allowedFieldsAndAlias","queryDataSource","sourceField","queryFormat","QueryFormat","extractGML3Data","extractGeoJSONData","extractEsriJSONData","extractTextData","extractHtmlData","extractGML2Data","sourceTitle","order","parser","olFormatGML2","olformat.WMSGetFeatureInfo","featureToResult","olFormatGML3","warn","htmlTarget","searchParams","getQueryParams","bboxRaw","bbox","xPosition","yPosition","y","crs","threshold","abs","clickx","clicky","clickx1","clicky1","wktPoly","olformat.WKT","bodyTagStart","bodyTagEnd","lastIndexOf","getCoordinates","queryString","pairs","pair","decodeURIComponent","featureOL","featureGeometry","shape","SHAPE","the_geom","wmsDatasource","getGetFeatureInfoUrl","getMimeInfoFormat","QUERY_LAYERS","FEATURE_COUNT","feature_count","cartoDatasource","sql","metres","queryPrecision","tileArcGISRestDatasource","olextent.boundingExtent","olextent.buffer","mime","QueryDirective","queryService","queries$$","queryFeatures","queryFeaturesHitTolerance","waitForAllQueries","EventEmitter","cancelOngoingQueries","onMapEvent","queries$","doQueryFeatures","queryLayers","coordinate","zip","results","emit","query$","featuresTileCoverage","clickedFeatures","forEachFeatureAtPixel","layerOL","sameDataTileFeatures","sameDataTilesFeature","sameDataTileFeatures_1","sameDataTileFeatures_1_1","sameDataTileFeature","queryFeaturesCondition","clickedFeature","shift","sub","getTiles","tileCacheEntries","list","tileCoord","features_","values_","tileCache","entries_","value_","sourceTiles_","Output","SearchSource","getDefaultOptions","available","searchUrl","QuerySearchSource","Inject","CatalogService","languageService","loadCatalogs","contextConfig","catalogConfig","apiUrl","catalogsFromConfig","sources","observables$","baseLayersCatalog","translate","instant","catalogsFromApi$","loadCatalogItems","catalog","loadCatalogBaseLayerItems","loadCatalogWMTSLayerItems","loadCatalogWMSLayerItems","getCatalogBaseLayersOptions","layersOptions","CatalogItemType","getCatalogWMSCapabilities","includeRecursiveItems","getCatalogWMTSCapabilities","getWMTSItems","layerList","regexes","regFilters","group","this_1","catalogTooltipType","retrieveTooltipType","layersQueryFormat","findCatalogInfoFormat","groupItem","configuredQueryFormat","retriveLayerInfoFormat","testLayerRegexes","Contents","Identifier","matrixSet","requestEncoding","item","regex","layerNameFromCatalog","currentLayerInfoFormat","baseInfoFormat","tooltipType","configuredInfoFormat","specific","LanguageService","CatalogBrowserComponent","currentItems","added","sortDirection","direction","valueAccessor","EntityStoreWatcher","destroy","isGroup","isLayer","onLayerAddedChange","update","addLayerToMap","removeLayerFromMap","onGroupAddedChange","addGroupToMap","removeGroupFromMap","addLayersToMap","removeLayersFromMap","oLayers","oLayer","CatalogBrowserLayerComponent","addedChange","getEntityIcon","onToggleClick","remove","add","CatalogBrowserGroupComponent","added$","layerAddedChange","evaluateAdded","tryToggleGroup","all","IgoCatalogBrowserModule","NgModule","imports","CommonModule","MatButtonModule","MatIconModule","MatListModule","MatTooltipModule","IgoLanguageModule","IgoListModule","IgoCollapsibleModule","exports","declarations","CatalogLibaryComponent","catalogSelectChange","onCatalogSelect","focused","CatalogLibaryItemComponent","IgoCatalogLibraryModule","IgoCatalogModule","IgoDataSourceModule","forRoot","ngModule","providers","FilterableDataSourcePipe","arg","isTimeFilterable","isOgcFilterable","Pipe","TimeFilterService","filterByDate","date","newdateformStart","newdateformEnd","dates","reformatDateTime","filterByYear","year","years","getFullYear","month","getMonth","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","Number","OGCFilterService","filterByOgc","filterString","setOgcWFSFiltersOptions","wfsDatasource","interfaceOgcFilters","setOgcWMSFiltersOptions","filtered","DownloadService","messageService","success","DSOptions","outputFormatDownload","baseurl","olProjection","MessageService","DownloadButtonComponent","downloadService","openDownload","IgoDownloadModule","FeatureDetailsComponent","sanitizer","_feature","detectChanges","htmlSanitizer","bypassSecurityTrustResourceUrl","isObject","isUrl","filterFeatureProperties","excludeAttribute","excludeAttributeOffline","DomSanitizer","IgoFeatureDetailsModule","IgoKeyValueModule","FeatureFormComponent","feature$","submitForm","ngOnChanges","changes","currentValue","previousValue","setStore","onSubmit","formDataToFeature","propertyPrefix","entry","activateStoreSelection","deactivateStoreSelection","selectionStrategy","IgoFeatureFormModule","IgoFormModule","IgoFeatureModule","TimeFilterFormComponent","listYears","startListYears","endListYears","playIcon","change","yearChange","valueArray","startDate","endDate","isNaN","valueOf","getStepDefinition","timeInterval","utcmin","getTimezoneOffset","utcmax","startYear","initStartYear","endYear","initEndYear","isRange","handleDateChange","setupDateOutput","applyTypeChange","handleYearChange","handleListYearChange","handleListYearStartChange","dateToNumber","setSliderThumbLabel","thumbLabel","findThumbLabel","mySlider","_elementRef","nativeElement","childNodes","textContent","className","children","playFilter","interval","stopFilter","that","newMinDateNumber","maxDateNumber","clearInterval","handleSliderDateChange","handleSliderTooltip","handleSliderValue","current","currentDate","getRoundedDate","toDateString","toTimeString","setSeconds","setHours","setMinutes","getDay","selectedHour","getHours","selectedMinute","getMinutes","getRangeMinDate","getRangeMaxDate","atMinute","coeff","moment.duration","asMilliseconds","ViewChild","MatSlider","TimeFilterItemComponent","timeFilterService","TimeFilterListComponent","TimeFilterListBindingDirective","WktService","wktToFeature","wkt","wktProj","featureProj","olWKT","extentToWkt","epsgTO","extentProj","currentExtent","roundCoordinateArray","wktLine","wktMultiPoints","coordinateArray","decimal","roundArray","array","toFixed","snrcToWkt","snrc","snrc250kIndex","snrc50kIndex","snrc1m","snrc250k","snrc50k","ar1m","part1m","part250k_1","part50k_1","separator","partEW","substring","partSN","index250kEW_1","index250kSN_1","index50kEW_1","index50kSN_1","increment250kEW","increment250kSN","increment50kEW","increment50kSN","unitPerTypeEW","unitPerTypeSN","coord","ul","1","2","3","4","5","6","7","8","9","10","lr","ur","ll","OgcFilterFormComponent","wktService","_currentFilter","baseOverlayName","igoSpatialSelectors","_dataSource","_showFeatureOnMap","updateField","ngAfterContentChecked","activeFilters","af","activeFilterSpatial","addWktAsOverlay","fields","currentFilter","wktAsFeature","showFeatureOnMap","toggleFilterState","mapProjection","checked","removeOverlayByID","refreshFilters","deleteFilter","changeNumericProperty","changeProperty","overlayId","changeOperator","changeGeometry","checkSNRC50k","checkSNRC250k","checkSNRC1m","OgcFilterableFormComponent","OgcFilterableItemComponent","ogcFilterService","defaultLogicalParent","hasActiveSpatialFilter","filtersAreEditable","filtersCollapsed","_ogcFiltersHeaderShown","lastRunOgcFilter","getOverlayByID","toggleShowFeatureOnMap","drawnFeature","drawnStrokeColor","drawStrokeWidth","drawnFillColor","olStyle","addFilterToSequence","arr","lastLevel","firstFieldName","datasourceOptions","ogcLayer","ogcDataSource","writer","OgcFilterableListComponent","OgcFilterableListBindingDirective","OgcFilterButtonComponent","ogcFilterCollapse","_ogcFiltersInLayers","toggleOgcFilter","IgoFilterModule","provide","MAT_DATE_LOCALE","useValue","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatSliderModule","MatSlideToggleModule","MatFormFieldModule","MatInputModule","MatOptionModule","MatSelectModule","MatDatepickerModule","MatNativeDateModule","GeometryFormFieldComponent","geometryType$","drawGuide$","value$","geometryTypeField","geometryTypes","drawGuideField","drawGuide","drawGuidePlaceholder","measure","formControl","value$$","valueChanges","onGeometryTypeChange","onDrawGuideChange","FormFieldComponent","Length","Area","Meters","Kilometers","Miles","Feet","MeasureLengthUnitAbbreviation","MeasureLengthUnit","SquareMeters","SquareKilometers","SquareMiles","SquareFeet","Hectares","Acres","MeasureAreaUnitAbbreviation","MeasureAreaUnit","metersToKilometers","metersToFeet","metersToMiles","squareMetersToSquareKilometers","squareMetersToSquareMiles","squareMetersToSquareFeet","squareMetersToHectares","squareMetersToAcres","metersToUnit","conversion","val","squareMetersToUnit","formatMeasure","parts","locale","toLocaleString","minimumFractionDigits","maximumFractionDigits","unitAbbr","computeBestLengthUnit","converted","possibleUnits","computeBestAreaUnit","createMeasureInteractionStyle","createMeasureLayerStyle","measureOlGeometryLength","OlPoint","getFlatCoordinates","olGetLength","measureOlGeometryArea","OlLineString","olGetArea","measureOlGeometry","area","lengths","flatCoordinates","coordinatesLength","olSegment","updateOlGeometryMidpoints","olMidpoints","getOlGeometryMidpoints","midpointsLength","midpointCoordinate","getCoordinateAt","olMidpoint","setCoordinates","expectedNumber","clearOlMidpointTooltip","olTooltip","removeOverlay","updateOlTooltipsAtMidpoints","createOlTooltipAtPoint","setPosition","getOlTooltipsAtMidpoints","updateOlGeometryCenter","olCenter","centerCoordinate","olGetCenter","updateOlTooltipAtCenter","getOlTooltipAtCenter","getTooltipsOfOlGeometry","olTooltips","olCenterTooltip","olPoint","OlOverlay","stopEvent","GeometrySliceError","GeometrySliceMultiPolygonError","GeometrySliceLineStringError","GeometrySliceTooManyIntersectionError","createDrawInteractionStyle","createDrawHoleInteractionStyle","sliceOlGeometry","olSlicer","OlPolygon","sliceOlPolygon","sliceOlLineString","olLineString","olPolygon","getLinearRingCount","slicer","OlGeoJSON","outerCoordinates","getLinearRing","totalIntersectionCount","segmentCoordinates","segment","lineString","intersections","lineIntersect","intersectionCount","intersection","addLinearRingToOlPolygon","olLinearRing","appendLinearRing","DrawControl","start$","end$","changes$","olOverlayLayer","createOlInnerOverlayLayer","clearOlInnerOverlaySource","removeOlInnerOverlayLayer","removeOlDrawInteraction","addOlInnerOverlayLayer","addOlDrawInteraction","olOverlaySource","OlVectorLayer","OlVectorSource","layerStyle","olDrawInteraction","OlDraw","stopClick","drawStyle","maxPoints","freehand","freehandCondition","onDrawStartKey","onDrawStart","onDrawEndKey","onDrawEnd","unsubscribeToKeyDown","onChangesKey","olGeometryEvent","subscribeToKeyDown","keyDown$$","fromEvent","keyCode","removeLastPoint","ModifyControl","olModifyInteractionIsActive","olTranslateInteractionIsActive","olDrawInteractionIsActive","removedOlInteractions","olLinearRingsLayer","createOlLinearRingsLayer","removeOlModifyInteraction","removeOlTranslateInteraction","addOlTranslateInteraction","activateTranslateInteraction","addOlModifyInteraction","activateModifyInteraction","setOlGeometry","OlFeature","addOlLinearRingsLayer","removeOlLinearRingsLayer","clearOlLinearRingsSource","olLinearRingsSource","olModifyInteraction","OlModify","deactivateModifyInteraction","onModifyStartKey","onModifyStart","onModifyEndKey","onModifyEnd","onModifyKey","olTranslateInteraction","OlTranslate","deactivateTranslateInteraction","onTranslateStartKey","onTranslateStart","onTranslateEndKey","onTranslateEnd","onTranslateKey","getOlGeometry","intersectsCoordinate","subscribeToDrawKeyDown","drawKeyDown$$","unsubscribeToDrawKeyDown","subscribeToDrawKeyUp","activateDrawInteraction","drawKeyUp$$","unsubscribeToDrawKeyUp","deactivateDrawInteraction","linearRingCoordinates","addLinearRingToOlGeometry","onDrawKey","_linearRingCoordinates","updateLinearRingOfOlGeometry","OlLinearRing","newCoordinates","getLinearRings","SliceControl","error$","removeDrawLineControl","addDrawLineControl","drawLineControl","drawLineStart$$","olLine","onDrawLineStart","drawLineEnd$$","onDrawLineEnd","olSlicedGeometries","lineExtent","forEachFeatureInExtent","olParts","MeasurerDialogComponent","dialogRef","measureAreaUnit","measureLengthUnit","onNoClick","close","MatDialogRef","MAT_DIALOG_DATA","MeasurerComponent","dialog","tableTemplate","selection","selectMany","selectionCheckbox","columns","activeLengthUnit","activeAreaUnit","measureType","MeasureType","measureUnitsAuto","measure$","selectedFeatures$","showTooltips","olDrawSource","_activeMeasureType","minSegmentLength","setActiveMeasureType","activeDrawControl","initStore","createDrawLineControl","createDrawPolygonControl","createModifyControl","toggleDrawControl","onToggleTooltips","updateTooltipsOfOlSource","deactivateModifyControl","freezeStore","onMeasureTypeChange","activeMeasureType","onToggleDrawControl","toggle","deactivateDrawControl","showTooltipsOfOlSource","clearTooltipsOfOlSource","onToggleMeasureUnitsAuto","onLengthUnitChange","table","activeOlGeometry","updateTooltipsOfOlGeometry","onAreaUnitChange","onCalculateClick","sum","perimeter","openDialog","onDeleteClick","deleteMany","onModifyClick","modifyControl","feature_1","_olFeature","activateModifyControl","clearTooltipsOfOlGeometry","many","onFeatureAddedKey","updateMeasureOfOlGeometry","onFeatureRemovedKey","selectedFeatures$$","OlStyle","drawPolygonControl","activateDrawControl","drawControl","drawStart$$","drawEnd$$","drawChanges$$","onDrawChanges","clearMeasures","finalizeMeasureOfOlGeometry","addFeatureToStore","modifyStart$$","modifyEnd$$","modifyChanges$$","onModifyChanges","setProperties","_measure","featureId","olMidpointsTooltips","length_1","updateOlTooltip","showTooltipsOfOlGeometry","shouldShowTooltip","addOverlay","_unit","_type","getElement","innerHTML","computeTooltipInnerHTML","MatDialog","MeasureFormatPipe","out","GeometryFormFieldInputComponent","ngControl","olGeoJSON","ready","onChange","onTouched","_geometryType","deactivateControl","createDrawControl","toggleControl","_value","addGeoJSONToOverlay","addOlOverlayLayer","createMeasureTooltip","drawInteractionStyle","defaultDrawStyleRadius","registerOnChange","fn","registerOnTouched","writeValue","updateDrawStyleWithDrawGuide","activateControl","control","activeControl","olGeometryEnds$$","onOlGeometryEnds","olGeometryChanges$$","onOlGeometryChanges","removeMeasureTooltip","updateMeasureTooltip","lastLength","olLastMidpoint","innerHtml","NgControl","IgoGeometryFormFieldModule","MatButtonToggleModule","IgoGeometryModule","entryComponents","ExportError","ExportInvalidFileError","ExportNothingToExportError","downloadContent","content","mimeType","fileName","setAttribute","display","appendChild","click","removeChild","handleFileExportError","handleNothingToExportError","message","ExportFormat","strEnum","ExportService","ogreUrl","export","exportOlFeatures","exportAsync","observer","nothingToExport","ogreFormats","noOgreFallbacks","exportToFile","exportWithOgre","writeFeatures","featureType","featuresText","form","geojsonField","outputNameField","outputName","ogreFormat","outputFormatField","submit","GML","GPX","KML","Shapefile","ImportError","ImportInvalidFileError","ImportUnreadableFileError","ImportNothingToImportError","addLayerAndFeaturesToMap","floor","g","olStyle.Stroke","olStyle.Fill","olStyle.Style","olStyle.Circle","handleFileImportSuccess","file","computeLayerTitleFromFile","messageTitle","handleNothingToImportError","handleFileImportError","getFileExtension","ImportService","import","importAsync","getFileImporter","extension","allowedMimeTypes","allowedZipMimeTypes","allowedExtensions","importFile","importFileWithOgre","importer","reader","FileReader","parseFeaturesFromFile","readAsText","formData","FormData","append","post","headers","HttpHeaders","errors","parseFeaturesFromGeoJSON","GeoJSON","olformat.KML","olformat.GML","olformat.GPX","writeFeatureObject","ImportExportComponent","importService","exportService","formBuilder","formats","inputProj","buildForm","importFiles","files","onFileImportSuccess","onFileImportError","files_1","files_1_1","handleExportFormSubmit","onFileExportError","Validators","required","FormBuilder","DropGeoFileDirective","filesDropped","filesInvalid","filesDropped$$","onFilesDropped","onDragOver","onDragLeave","onDrop","HostListener","DragAndDropDirective","IgoImportExportModule","MatTabsModule","IgoDrapDropModule","IgoLayerModule","MatBadgeModule","IgoImageModule","MapLayerDirective","currentState","changeLayer","pathOffline","connection","excludeAttributeBackUp","setUrl","IgoMapModule","IgoConfirmDialogModule","MeasurerItemComponent","_auto","measureUnitChange","toggleAutoUnit","onMeasureUnitChange","measureUnit","measure$$","computeBestMeasureUnit","IgoMeasurerModule","IgoEntityTableModule","IgoMeasureModule","MetadataService","MetadataButtonComponent","metadataService","openMetadata","IgoMetadataModule","ZoomIfOutMapExtent","OverlayService","features$","OverlayAction","OverlayDirective","overlayService","olFormatGeoJSON","features$$","handleFeatures","IgoOverlayModule","html2canvas","_html2canvas","PrintService","print","paperFormat","orientation","doc","jsPDF","dimensions","internal","pageSize","margins","addTitle","showProjection","showScale","addProjScale","comment","addComment","addMap","showLegend","addLegend","saveDoc","getLayersLegendHtml","getLayersLegendImage","doZipFile","div","setTimeout","useCORS","then","canvas","generateCanvaFileToZip","saveCanvasImageAsFile","parentNode","pageWidth","titleMarginLeft","titleWidth","setFont","setFontSize","heightPixels","textProjScale","imgData","toDataURL","addPage","imageSize","getImageSizeToFitPdf","addImage","addCanvas","rect","timeout","mapSize","widthPixels","once","mapStatus$$","mapStatus","clearTimeout","renderMap","defineNbFileToProcess","nbFileToProcess","downloadMapImage","newCanvas","positionHCanvas","positionWProjScale","commentWidth","measureText","positionHProjScale","commentNbLine","ceil","positionHComment","fillStyle","fillRect","projText","scaleText","mapScale","nbCommentChar","CommentLengthToCut","commentCurrentLine","positionFirstCutChar","positionLastBlank","tiwContent","getWorldFileInformation","addFileToZip","saveAs","saveFileProcessing","renderSync","save","pageHeight","getHeight","canHeight","canWidth","heightRatio","widthRatio","maxRatio","currentResolution","blobFormat","navigator","msSaveBlob","msToBlob","toBlob","zipFile","JSZip","getZipFile","generateAsync","PrintComponent","printService","_outputFormat","_paperFormat","_orientation","_imageFormat","_resolution","handleFormSubmit","isPrintService","imageFormat","PrintOutputFormat","PrintPaperFormat","PrintOrientation","PrintResolution","PrintSaveImageFormat","PrintFormComponent","outputFormats","paperFormats","orientations","imageFormats","imageFormatField","setValue","Jpeg","onlySelf","Pdf","paperFormatField","Letter","orientationField","landscape","resolutionField","titleField","commentField","showProjectionField","showScaleField","showLegendField","doZipFileField","isValid","submitted","toggleImageSaveProp","IgoPrintModule","querySearchSourceFactory","provideQuerySearchSource","useFactory","multi","deps","IgoQueryModule","SearchSourceService","getSources","getEnabledSources","enableSourcesByType","sourceCanSearch","search","sourceCanReverseSearch","reverseSearch","SearchService","searchSourceService","term","termIsValid","lonLat","searchSources","reverseSearchSources","RoutingSourceService","routingSourceServiceFactory","provideRoutingSourceService","RoutingSource","RoutingService","routingSourceService","routeSource","RoutingFormService","mapWaitingForRoutingClick","getStopsCoordinates","stopsCoordinates","setStopsCoordinates","isMapWaitingForRoutingClick","setMapWaitingForRoutingClick","unsetMapWaitingForRoutingClick","RoutingFormComponent","routingService","searchService","routingFormService","invalidKeys","routesQueries$$","stream$","focusOnStop","focusKey","_term","_debounce","_length","changeRoute","selectedRoute","showRouteGeometry","unsubscribeRoutesQueries","unlistenSingleClick","stopCoordinates","stops","stop","routingRoutesOverlayDataSource","routingStopsOverlayDataSource","browserLanguage","getLanguage","stopsForm","routingType","routingMode","stopOrderPriority","routingFixedStartEnd","createStop","selectedStopFeature","stopsLayer","routesLayer","selectStops","olinteraction.Select","olcondition.pointerMove","translateStop","olinteraction.Translate","selectRouteHover","selectRoute","getLength","selectCoordinates","addStop","pos","at","patchValue","handleLocationProposals","addStopOverlay","statusChanges","onFormChange","translatedPos","translationEndCoordinates","stopProposals","handleTermChanged","stopIndex","groupedLocations","resultPos","stopPoint","routingText","raiseStop","moveStop","lowerStop","diff","fromValue","removeStop","insert","insertIndex","routingPos","removeAt","cnt","resetForm","routesResults","nbStops","deleteRoutingOverlaybyID","valid","coords","getRoutes","formatStep","formatInstruction","maneuver","modifier","bearing_after","exit","activeRoute","steps","stepPosition","lastStep","directiveFr","directiveEn","directive","cssClass","translatedDirection","translateBearing","translatedModifier","translateModifier","frAggregatedDirection","enAggregatedDirection","coma","instruction","bearing","formatDistance","distance","formatDuration","summary","showSegment","showRouteSegmentGeometry","lastPoint","olgeom.LineString","olgeom.Point","zoomRoute","geom","geometry3857","routingFeature","stopsArrayCoordinates","routeResponse","olobservable.unByKey","copyLinkToClipboard","Clipboard","copy","getUrl","msg","copyDirectionsToClipboard","indent","activeRouteDirective","wayPointList","wayPointsCnt","localCnt","directionsBody","searchProposals_1","currentStopIndex","setTerm","keyIsValid","keyup","handleMapClick","clearStop","getStopOverlayID","chooseProposal","proposal","geomCoord","coordArray","polygonExtent","proposalExtent","olextent.intersects","focus","indexPos","clickCoordinates","geolocateStop","geolocateCoordinates","stopColor","stopID","routingKey","routingCoordKey","routingUrl","location","pathname","RoutingFormBindingDirective","storedStopsCoordinates","routingParams","stopsCoordinatesFromURL","routingCoordUrl_1","cnt_1","stopCoordinatesFromURL","IgoRoutingModule","MatDividerModule","searchSourceServiceFactory","provideSearchSourceService","IChercheSearchResultFormatter","formatResult","IChercheSearchSource","formatter","computeRequestParams","extractResults","q","geometries","dataToResult","computeProperties","_id","recherche","dataType","titleHtml","highlight","removeKeys","propertiesBlacklist","doc_type","IChercheReverseSearchSource","loc","String","computeExtent","nom","defaultIChercheSearchResultFormatterFactory","provideDefaultIChercheSearchResultFormatter","ichercheSearchSourceFactory","ichercheReverseSearchSourceFactory","GoogleLinks","getGoogleMapsLink","lon","lat","getGoogleStreetViewLink","CoordinatesSearchResultFormatter","CoordinatesReverseSearchSource","coordonnees","systemeCoordonnees","GoogleMaps","GoogleStreetView","defaultCoordinatesSearchResultFormatterFactory","provideDefaultCoordinatesSearchResultFormatter","CoordinatesReverseSearchSourceFactory","SEARCH_TYPES","SearchSelectorComponent","searchTypes","initial","enableSearchType","onSearchTypeChange","searchType","getSearchTypeTitle","IgoSearchSelectorModule","MatMenuModule","MatRadioModule","SearchBarComponent","minLength","searchTypeChange","_placeholder","empty","stream$$","onTermChange","onKeyup","onClearButtonClick","doSearch","input","softClear","research","onResearchCompleted","newResults","entities$","HostBinding","SearchUrlParamDirective","ref","searchKey","IgoSearchBarModule","Grouped","Flat","SearchResultsComponent","searchResultMode","SearchResultMode","mode","resultFocus","resultSelect","_results$","liftResults","onResultFocus","computeGroupTitle","onResultSelect","groupResults","sortByOrder","r1","r2","displayOrder","grouped","sourceResults","SearchResultsItemComponent","getEntityTitleHtml","IgoSearchResultsModule","IgoSearchModule","ToastComponent","opened","_expanded","expanded","zoomToFeatureExtent","swipe","SWIPE_ACTION","UP","DOWN","IgoToastModule","IgoPanelModule","IgoFlexibleModule","OgcFilterComponent","cancel","onUpdateInputs","OgcFilterWidget","InjectionToken","ogcFilterWidgetFactory","widgetService","provideOgcFilterWidget","WidgetService","IgoOgcFilterModule","WfsWorkspace","Workspace","WfsWorkspaceService","createWorkspace","entityStore","createFeatureStore","actionStore","ActionStore","createTableTemplate","loadingStrategy","WmsWorkspace","WmsWorkspaceService","WorkspaceSelectorDirective","wfsWorkspaceService","wmsWorkspaceService","onLayersChange","editableLayers","layerIsEditable","editableLayersIds","workspacesToAdd","getOrCreateWorkspace","workspace","workspacesToRemove","workspaceStore","insertMany","WorkspaceSelectorComponent","IgoWorkspaceSelectorModule","IgoGeoWorkspaceModule","IgoWidgetModule","IgoWktModule","IgoGeoModule","ILayerSearchSource","computeSearchRequestParams","computeLayerOptions","extractQueryParamsFromSourceUrl","formatOpt","urls","urlOpt","ilayerSearchSourceFactory","NominatimSearchSource","computeGeometry","place_id","display_name","osm_type","class","boundingbox","nominatimSearchSourceFactory","StoredQueriesSearchSource","storedQueriesOptions","storedquery_id","outputformat","multipleFieldsQuery","splitPrefix","defaultValue","resultTitle","storedqueriesParams","termSplitter","extractWFSData","geojson","wfsfeatures","splittedTerm","remainingTerm","splitterRegex","tslib_1.__spread","trim","wfsversion","StoredQueriesReverseSearchSource","longField","latField","longLatParams","storedqueriesSearchSourceFactory","storedqueriesReverseSearchSourceFactory","Route","Trip","OsrmRoutingSource","getName","_name","getRouteParams","extractRoutesData","routes","formatRoute","waypoints","overview","alternatives","roadNetworkRoute","stepsUI","legs","leg","sourceType","SourceRoutingType","RoutingFormat","weight_name","osrmRoutingSourcesFactory","rows","row","column","EntityTableColumnRenderer"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export abstract class DataService {\r\n    abstract getData(): string;\r\n}\r\n","import { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { AnyDataSourceOptions } from '../shared/datasources/any-datasource.interface';\r\nimport { DataSourceOptions } from '../shared/datasources/datasource.interface';\r\nimport { WMSDataSourceOptions } from '../shared/datasources/wms-datasource.interface';\r\nimport { WMTSDataSourceOptions } from '../shared/datasources/wmts-datasource.interface';\r\n\r\n/**\r\n * Generate a id from it's datasource options.\r\n * @param options Data source options\r\n * @returns A id\r\n */\r\nexport function generateIdFromSourceOptions(options: DataSourceOptions): string {\r\n  const generators = {\r\n    wms: generateWMSIdFromSourceOptions,\r\n    wmts: generateWMTSIdFromSourceOptions,\r\n    xyz: generateXYZIdFromSourceOptions,\r\n    feature: generateFeatureIdFromSourceOptions,\r\n    osm: (_options: AnyDataSourceOptions) => 'OSM'\r\n  };\r\n  const generator = generators[options.type] || generateId;\r\n  return generator(options);\r\n}\r\n\r\n/**\r\n * Generate a id from WMS data source options\r\n * @param options WMS data source options\r\n * @returns A md5 hash of the the url and layers\r\n */\r\nexport function generateWMSIdFromSourceOptions(options: WMSDataSourceOptions) {\r\n  const layers = options.params.layers;\r\n  const chain = 'wms' + options.url + layers;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from WMTS data source options\r\n * @param options WMTS data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateWMTSIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const layer = options.layer;\r\n  const chain = 'wmts' + options.url + layer;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from XYZ data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateXYZIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const chain = 'xyz' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from feature data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateFeatureIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  if (! options.url) { return generateId(options); }\r\n  const chain = 'feature' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a unique id\r\n * @returns A uuid\r\n */\r\nexport function generateId(options: AnyDataSourceOptions) {\r\n  return uuid();\r\n}\r\n","import olSource from 'ol/source/Source';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport {\r\n  DataSourceOptions,\r\n  DataSourceLegendOptions\r\n} from './datasource.interface';\r\n\r\nimport { DataService } from './data.service';\r\nimport { generateIdFromSourceOptions } from '../../utils/id-generator';\r\n\r\nimport { NetworkService } from '@igo2/core';\r\nimport { MVTDataSource } from './mvt-datasource';\r\nimport { ViewChild } from '@angular/core';\r\n\r\nexport abstract class DataSource {\r\n  // @ViewChild(MVTDataSource) child: MVTDataSource;\r\n\r\n  public id: string;\r\n  public ol: olSource;\r\n\r\n  constructor(\r\n    public options: DataSourceOptions = {},\r\n    protected networkService?: NetworkService,\r\n    protected dataService?: DataService\r\n  ) {\r\n    this.options = options;\r\n    this.id = this.generateId();\r\n    this.ol = this.createOlSource();\r\n  }\r\n\r\n  protected abstract createOlSource(): olSource;\r\n\r\n  protected generateId(): string {\r\n    return generateIdFromSourceOptions(this.options);\r\n  }\r\n\r\n  getLegend(scale?: number): DataSourceLegendOptions[] {\r\n    return this.options.legend ? [this.options.legend] : [];\r\n  }\r\n\r\n  onLayerStatusChange(status: SubjectStatus): void {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { FeatureDataSourceOptions } from './feature-datasource.interface';\r\n\r\nexport class FeatureDataSource extends DataSource {\r\n  public options: FeatureDataSourceOptions;\r\n  public ol: olSourceVector;\r\n  protected createOlSource(): olSourceVector {\r\n    const sourceOptions = {\r\n      format: this.getSourceFormatFromOptions(this.options)\r\n    };\r\n\r\n    return new olSourceVector(Object.assign(sourceOptions, this.options));\r\n  }\r\n\r\n  protected getSourceFormatFromOptions(options: FeatureDataSourceOptions) {\r\n    if (options.format) {\r\n      return options.format;\r\n    }\r\n    let olFormatCls;\r\n    const formatType = options.formatType;\r\n    if (!formatType) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    } else {\r\n      olFormatCls = olformat[formatType];\r\n      if (olFormatCls === undefined) {\r\n        throw new Error('Invalid vector source format ${formatType}.');\r\n      }\r\n    }\r\n\r\n    const formatOptions = options.formatOptions;\r\n    let format;\r\n    if (formatOptions) {\r\n      format = new olFormatCls(formatOptions);\r\n    } else {\r\n      format = new olFormatCls();\r\n    }\r\n\r\n    return format;\r\n  }\r\n}\r\n","import olSourceOSM from 'ol/source/OSM';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { OSMDataSourceOptions } from './osm-datasource.interface';\r\n\r\nexport class OSMDataSource extends DataSource {\r\n  public options: OSMDataSourceOptions;\r\n  public ol: olSourceOSM;\r\n\r\n  protected createOlSource(): olSourceOSM {\r\n    this.options.url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\r\n    return new olSourceOSM(this.options);\r\n  }\r\n}\r\n","import olSourceXYZ from 'ol/source/XYZ';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { XYZDataSourceOptions } from './xyz-datasource.interface';\r\n\r\nexport class XYZDataSource extends DataSource {\r\n  public options: XYZDataSourceOptions;\r\n  public ol: olSourceXYZ;\r\n\r\n  protected createOlSource(): olSourceXYZ {\r\n    return new olSourceXYZ(this.options);\r\n  }\r\n\r\n}\r\n","import * as olfilter from 'ol/format/filter';\r\nimport olFormatWKT from 'ol/format/WKT';\r\nimport olFormatWFS from 'ol/format/WFS';\r\nimport olGeometry from 'ol/geom/Geometry';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport {\r\n  OgcFilter,\r\n  IgoOgcFilterObject,\r\n  WFSWriteGetFeatureOptions,\r\n  AnyBaseOgcFilterOptions,\r\n  OgcInterfaceFilterOptions\r\n} from './ogc-filter.interface';\r\n\r\nexport class OgcFilterWriter {\r\n  private filterSequence: OgcInterfaceFilterOptions[] = [];\r\n  public operators = {\r\n    PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsLike: { spatial: false, fieldRestrict: ['string'] },\r\n    PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsGreaterThanOrEqualTo: {\r\n      spatial: false,\r\n      fieldRestrict: ['number']\r\n    },\r\n    PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsBetween: { spatial: false, fieldRestrict: ['number'] },\r\n    During: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNull: { spatial: false, fieldRestrict: [] },\r\n    Intersects: { spatial: true, fieldRestrict: [] },\r\n    Within: { spatial: true, fieldRestrict: [] },\r\n    Contains: { spatial: true, fieldRestrict: [] }\r\n  };\r\n\r\n  public buildFilter(\r\n    filters: IgoOgcFilterObject,\r\n    extent?: [number, number, number, number],\r\n    proj?,\r\n    fieldNameGeometry?: string\r\n  ): string {\r\n    let ourBboxFilter;\r\n    let enableBbox: boolean;\r\n    if (/intersects|contains|within/gi.test(JSON.stringify(filters))) {\r\n      enableBbox = false;\r\n    } else {\r\n      enableBbox = true;\r\n    }\r\n    if (filters) {\r\n      fieldNameGeometry =\r\n        (filters as any).geometryName !== undefined\r\n          ? (filters as any).geometryName\r\n          : fieldNameGeometry;\r\n    }\r\n    if (extent && filters) {\r\n      ourBboxFilter = olfilter.bbox(fieldNameGeometry, extent, proj.getCode());\r\n    }\r\n    let filterAssembly: OgcFilter;\r\n    if (filters) {\r\n      filters = this.checkIgoFiltersProperties(filters, fieldNameGeometry);\r\n      if (extent && enableBbox) {\r\n        filterAssembly = olfilter.and(\r\n          ourBboxFilter,\r\n          this.bundleFilter(filters)\r\n        );\r\n      } else {\r\n        filterAssembly = this.bundleFilter(filters);\r\n      }\r\n    } else {\r\n      return 'bbox=' + extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    const wfsOptions: WFSWriteGetFeatureOptions = {\r\n      srsName: '',\r\n      featureNS: '',\r\n      featurePrefix: '',\r\n      featureTypes: ['featureTypes'],\r\n      filter: filterAssembly,\r\n      outputFormat: '',\r\n      geometryName: fieldNameGeometry\r\n    };\r\n\r\n    const query = new olFormatWFS().writeGetFeature(wfsOptions);\r\n    const str = new XMLSerializer().serializeToString(query);\r\n    const regexp1 = /typenames *=|typename *=\\\"featureTypes\\\" *>/gi;\r\n    const regexp2 = /<\\/Query><\\/GetFeature>/gi;\r\n\r\n    return 'filter=' + str.split(regexp1)[1].split(regexp2)[0];\r\n  }\r\n\r\n  private bundleFilter(filterObject: any) {\r\n    if (filterObject instanceof Array) {\r\n      const logicalArray = [];\r\n      filterObject.forEach(element => {\r\n        logicalArray.push(this.bundleFilter(element));\r\n      });\r\n      return logicalArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return this.createFilter({\r\n          operator: filterObject.logical,\r\n          logicalArray: this.bundleFilter(filterObject.filters)\r\n        });\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.createFilter(filterObject as AnyBaseOgcFilterOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createFilter(filterOptions): OgcFilter {\r\n    const operator = filterOptions.operator;\r\n    const logicalArray = filterOptions.logicalArray;\r\n\r\n    const wfsPropertyName = filterOptions.propertyName;\r\n    const wfsPattern = filterOptions.pattern;\r\n    const wfsMatchCase = filterOptions.matchCase\r\n      ? filterOptions.matchCase\r\n      : true;\r\n    const wfsWildCard = filterOptions.wildCard ? filterOptions.wildCard : '*';\r\n    const wfsSingleChar = filterOptions.singleChar\r\n      ? filterOptions.singleChar\r\n      : '.';\r\n    const wfsEscapeChar = filterOptions.escapeChar\r\n      ? filterOptions.escapeChar\r\n      : '!';\r\n\r\n    const wfsLowerBoundary = filterOptions.lowerBoundary;\r\n    const wfsUpperBoundary = filterOptions.upperBoundary;\r\n\r\n    const wfsGeometryName = filterOptions.geometryName;\r\n    const wfsExtent = filterOptions.extent;\r\n    const wfsWktGeometry = filterOptions.wkt_geometry;\r\n    const wfsSrsName = filterOptions.srsName\r\n      ? filterOptions.srsName\r\n      : 'EPSG:3857';\r\n\r\n    const wfsBegin = filterOptions.begin;\r\n    const wfsEnd = filterOptions.end;\r\n\r\n    const wfsExpression = filterOptions.expression;\r\n\r\n    let geometry: olGeometry;\r\n    if (wfsWktGeometry) {\r\n      const wkt = new olFormatWKT();\r\n      geometry = wkt.readGeometry(wfsWktGeometry, {\r\n        dataProjection: wfsSrsName,\r\n        featureProjection: 'EPSG:3857'\r\n      });\r\n    }\r\n\r\n    switch (operator) {\r\n      case 'BBOX':\r\n        return olfilter.bbox(wfsGeometryName, wfsExtent, wfsSrsName);\r\n      case 'PropertyIsBetween':\r\n        return olfilter.between(\r\n          wfsPropertyName,\r\n          wfsLowerBoundary,\r\n          wfsUpperBoundary\r\n        );\r\n      case 'Contains':\r\n        return olfilter.contains(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'During':\r\n        return olfilter.during(wfsPropertyName, wfsBegin, wfsEnd);\r\n      case 'PropertyIsEqualTo':\r\n        return olfilter.equalTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsGreaterThan':\r\n        return olfilter.greaterThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsGreaterThanOrEqualTo':\r\n        return olfilter.greaterThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'Intersects':\r\n        return olfilter.intersects(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'PropertyIsNull':\r\n        return olfilter.isNull(wfsPropertyName);\r\n      case 'PropertyIsLessThan':\r\n        return olfilter.lessThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLessThanOrEqualTo':\r\n        return olfilter.lessThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLike':\r\n        return olfilter.like(\r\n          wfsPropertyName,\r\n          wfsPattern.replace(/[()_]/gi, wfsSingleChar),\r\n          wfsWildCard,\r\n          wfsSingleChar,\r\n          wfsEscapeChar,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsNotEqualTo':\r\n        return olfilter.notEqualTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'Within':\r\n        return olfilter.within(wfsGeometryName, geometry, wfsSrsName);\r\n      // LOGICAL\r\n      case 'And':\r\n        return olfilter.and.apply(null, logicalArray);\r\n      case 'Or':\r\n        return olfilter.or.apply(null, logicalArray);\r\n      case 'Not':\r\n        return olfilter.not.apply(null, logicalArray);\r\n\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  public defineInterfaceFilterSequence(\r\n    filterObject: any,\r\n    geometryName,\r\n    logical = '',\r\n    level = -1\r\n  ): OgcInterfaceFilterOptions[] {\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            element,\r\n            geometryName,\r\n            logical,\r\n            level\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        level = level + 1;\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            filterObject.filters,\r\n            geometryName,\r\n            filterObject.logical,\r\n            level\r\n          )\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        this.filterSequence.push(\r\n          this.addInterfaceFilter(filterObject, geometryName, level, logical)\r\n        );\r\n      }\r\n    }\r\n    return this.filterSequence;\r\n  }\r\n\r\n  public addInterfaceFilter(\r\n    igoOgcFilterObject = { operator: 'PropertyIsEqualTo' },\r\n    geometryName?,\r\n    level = 0,\r\n    parentLogical = 'Or'\r\n  ): OgcInterfaceFilterOptions {\r\n    const f = {\r\n      propertyName: '',\r\n      operator: '',\r\n      active: '',\r\n      filterid: uuid(),\r\n      begin: '',\r\n      end: '',\r\n      lowerBoundary: '',\r\n      upperBoundary: '',\r\n      expression: '',\r\n      pattern: '',\r\n      wildCard: '*',\r\n      singleChar: '.',\r\n      escapeChar: '!',\r\n      matchCase: true,\r\n      igoSpatialSelector: '',\r\n      geometryName: '',\r\n      geometry: '',\r\n      wkt_geometry: '',\r\n      extent: '',\r\n      srsName: '',\r\n      parentLogical: '',\r\n      level: 0\r\n    };\r\n\r\n    return Object.assign(\r\n      f,\r\n      {\r\n        parentLogical,\r\n        level,\r\n        geometryName\r\n      },\r\n      igoOgcFilterObject\r\n    );\r\n  }\r\n\r\n  public checkIgoFiltersProperties(\r\n    filterObject: any,\r\n    fieldNameGeometry,\r\n    active = false\r\n  ) {\r\n    const filterArray = [];\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        filterArray.push(\r\n          this.checkIgoFiltersProperties(element, fieldNameGeometry, active)\r\n        );\r\n      });\r\n      return filterArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return Object.assign(\r\n          {},\r\n          {\r\n            logical: filterObject.logical,\r\n            filters: this.checkIgoFiltersProperties(\r\n              filterObject.filters,\r\n              fieldNameGeometry,\r\n              active\r\n            )\r\n          }\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.addFilterProperties(\r\n          filterObject as OgcInterfaceFilterOptions,\r\n          fieldNameGeometry,\r\n          active\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private addFilterProperties(\r\n    igoOgcFilterObject: OgcInterfaceFilterOptions,\r\n    fieldNameGeometry,\r\n    active = false\r\n  ) {\r\n    const filterid = igoOgcFilterObject.hasOwnProperty('filterid')\r\n      ? igoOgcFilterObject.filterid\r\n      : uuid();\r\n    const status = igoOgcFilterObject.hasOwnProperty('active')\r\n      ? igoOgcFilterObject.active\r\n      : active;\r\n\r\n    return Object.assign(\r\n      {},\r\n      {\r\n        filterid,\r\n        active: status,\r\n        igoSpatialSelector: 'fixedExtent'\r\n      },\r\n      igoOgcFilterObject,\r\n      { geometryName: fieldNameGeometry }\r\n    );\r\n  }\r\n\r\n  public rebuiltIgoOgcFilterObjectFromSequence(\r\n    sequence: OgcInterfaceFilterOptions[]\r\n  ): IgoOgcFilterObject {\r\n    if (sequence instanceof Array) {\r\n      if (sequence.length >= 1) {\r\n        let lastParentLogical = sequence[0].parentLogical;\r\n        let nextElement: any;\r\n        let logicalArray = [];\r\n        let lastProcessedFilter;\r\n        sequence.forEach(uiFilter => {\r\n          const element = Object.assign({}, uiFilter);\r\n          const index = sequence.indexOf(uiFilter);\r\n          if (index >= 0 && index < sequence.length - 1) {\r\n            nextElement = sequence[index + 1];\r\n          } else {\r\n            nextElement = element;\r\n          }\r\n          delete element.active;\r\n          delete element.filterid;\r\n          delete element.parentLogical;\r\n          logicalArray.push(element);\r\n\r\n          if (sequence.length === 1) {\r\n            lastProcessedFilter = element;\r\n          } else if (lastParentLogical !== nextElement.parentLogical) {\r\n            if (logicalArray.length === 1) {\r\n              console.log(\r\n                'You must set at ' +\r\n                  'least two operator in a logical (' +\r\n                  lastParentLogical +\r\n                  ')'\r\n              );\r\n            } else {\r\n              lastProcessedFilter = Object.assign(\r\n                {},\r\n                { logical: lastParentLogical, filters: logicalArray }\r\n              );\r\n              logicalArray = [lastProcessedFilter];\r\n              lastParentLogical = nextElement.parentLogical;\r\n            }\r\n          }\r\n        });\r\n        return lastProcessedFilter;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as OlLoadingStrategy from 'ol/loadingstrategy';\r\nimport * as OlFormat from 'ol/format';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\n\r\nimport { NetworkService } from '@igo2/core';\r\n\r\nexport class WFSDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n  public ogcFilterWriter: OgcFilterWriter;\r\n\r\n  constructor(\r\n    public options: WFSDataSourceOptions,\r\n    public networkService: NetworkService,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(options, networkService);\r\n    this.options = this.wfsService.checkWfsOptions(options);\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n    this.wfsService.getSourceFieldsFromWFS(this.options);\r\n  }\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    // reassignation of params to paramsWFS and url to urlWFS to have a common interface with wms-wfs datasources\r\n    this.options.paramsWFS = this.options.params;\r\n    this.options.urlWfs = this.options.url;\r\n    // default wfs version\r\n    this.options.paramsWFS.version = this.options.paramsWFS.version\r\n      ? this.options.paramsWFS.version\r\n      : '2.0.0';\r\n    const ogcFiltersDefaultValue = true; // default values for wfs.\r\n    (this.options as OgcFilterableDataSourceOptions).ogcFilters =\r\n      (this.options as OgcFilterableDataSourceOptions).ogcFilters === undefined\r\n        ? {}\r\n        : (this.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    (this.options as OgcFilterableDataSourceOptions).ogcFilters.enabled =\r\n      (this.options as OgcFilterableDataSourceOptions).ogcFilters.enabled ===\r\n      undefined\r\n        ? ogcFiltersDefaultValue\r\n        : (this.options as OgcFilterableDataSourceOptions).ogcFilters.enabled;\r\n    (this.options as OgcFilterableDataSourceOptions).ogcFilters.editable =\r\n      (this.options as OgcFilterableDataSourceOptions).ogcFilters.editable ===\r\n      undefined\r\n        ? ogcFiltersDefaultValue\r\n        : (this.options as OgcFilterableDataSourceOptions).ogcFilters.editable;\r\n\r\n    const baseWfsQuery = 'service=WFS&request=GetFeature';\r\n    // Mandatory\r\n    const url = this.options.urlWfs;\r\n    // Optional\r\n    const outputFormat = this.options.paramsWFS.outputFormat\r\n      ? 'outputFormat=' + this.options.paramsWFS.outputFormat\r\n      : '';\r\n    const wfsVersion = this.options.paramsWFS.version\r\n      ? 'version=' + this.options.paramsWFS.version\r\n      : 'version=' + '2.0.0';\r\n\r\n    let paramTypename = 'typename';\r\n    let paramMaxFeatures = 'maxFeatures';\r\n    if (\r\n      this.options.paramsWFS.version === '2.0.0' ||\r\n      !this.options.paramsWFS.version\r\n    ) {\r\n      paramTypename = 'typenames';\r\n      paramMaxFeatures = 'count';\r\n    }\r\n\r\n    const featureTypes =\r\n      paramTypename + '=' + this.options.paramsWFS.featureTypes;\r\n\r\n    const maxFeatures = this.options.paramsWFS.maxFeatures\r\n      ? paramMaxFeatures + '=' + this.options.paramsWFS.maxFeatures\r\n      : paramMaxFeatures + '=5000';\r\n\r\n    let downloadBaseUrl = `${url}?${baseWfsQuery}&${wfsVersion}&${featureTypes}&`;\r\n    downloadBaseUrl += `${outputFormat}&${maxFeatures}`;\r\n\r\n    this.options.download = Object.assign({}, this.options.download, {\r\n      dynamicUrl: downloadBaseUrl\r\n    });\r\n\r\n    return new olSourceVector({\r\n      format: this.getFormatFromOptions(),\r\n      overlaps: false,\r\n      url: (extent, resolution, proj) => {\r\n        const srsname = this.options.paramsWFS.srsName\r\n          ? 'srsname=' + this.options.paramsWFS.srsName\r\n          : 'srsname=' + proj.getCode();\r\n\r\n        let filters;\r\n        if (\r\n          (this.options as OgcFilterableDataSourceOptions).ogcFilters &&\r\n          (this.options as OgcFilterableDataSourceOptions).ogcFilters.enabled\r\n        ) {\r\n          filters = (this.options as OgcFilterableDataSourceOptions).ogcFilters.filters;\r\n        }\r\n        this.options.paramsWFS.xmlFilter = this.ogcFilterWriter.buildFilter(\r\n          filters,\r\n          extent,\r\n          proj,\r\n          this.options.paramsWFS.fieldNameGeometry\r\n        );\r\n\r\n        let baseUrl = `${url}?${baseWfsQuery}&${wfsVersion}&${featureTypes}&`;\r\n        baseUrl += `${outputFormat}&${srsname}&${maxFeatures}`;\r\n\r\n        const patternFilter = /(filter|bbox)=.*/gi;\r\n        if (patternFilter.test(this.options.paramsWFS.xmlFilter)) {\r\n          baseUrl += `&${this.options.paramsWFS.xmlFilter}`;\r\n        }\r\n\r\n        this.options.download = Object.assign({}, this.options.download, {\r\n          dynamicUrl: baseUrl\r\n        });\r\n\r\n        return baseUrl;\r\n      },\r\n      strategy: OlLoadingStrategy.bbox\r\n    });\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.options.paramsWFS.outputFormat.toLowerCase();\r\n    const patternGml3 = new RegExp('.*?gml.*?');\r\n    const patternGeojson = new RegExp('.*?json.*?');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = OlFormat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = OlFormat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport * as olformat from 'ol/format';\r\n\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { DataService } from './data.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WFSService extends DataService {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getData() {\r\n    console.log('This is defining a data service.');\r\n    return 'This is defining a data service.';\r\n  }\r\n\r\n  public getSourceFieldsFromWFS(datasource) {\r\n    if (\r\n      datasource.sourceFields === undefined ||\r\n      Object.keys(datasource.sourceFields).length === 0\r\n    ) {\r\n      datasource.sourceFields = [];\r\n      this.wfsGetCapabilities(datasource).subscribe(wfsCapabilities => {\r\n        datasource.paramsWFS.wfsCapabilities = {\r\n          xmlBody: wfsCapabilities.body,\r\n          GetPropertyValue: /GetPropertyValue/gi.test(wfsCapabilities.body)\r\n            ? true\r\n            : false\r\n        };\r\n\r\n        this.defineFieldAndValuefromWFS(datasource).subscribe(sourceFields => {\r\n          datasource.sourceFields = sourceFields;\r\n        });\r\n      });\r\n    } else {\r\n      datasource.sourceFields.forEach(sourcefield => {\r\n        if (sourcefield.alias === undefined) {\r\n          sourcefield.alias = sourcefield.name; // to allow only a list of sourcefield with names\r\n        }\r\n      });\r\n\r\n      datasource.sourceFields\r\n        .filter(\r\n          field => field.values === undefined || field.values.length === 0\r\n        )\r\n        .forEach(f => {\r\n          this.getValueFromWfsGetPropertyValues(\r\n            datasource,\r\n            f.name,\r\n            200,\r\n            0,\r\n            0\r\n          ).subscribe(rep => (f.values = rep));\r\n        });\r\n    }\r\n  }\r\n\r\n  public checkWfsOptions(wfsDataSourceOptions) {\r\n    // Look at https://github.com/openlayers/openlayers/pull/6400\r\n    const patternGml = new RegExp(/.*?gml.*?/gi);\r\n\r\n    if (patternGml.test(wfsDataSourceOptions.paramsWFS.outputFormat)) {\r\n      wfsDataSourceOptions.paramsWFS.version = '1.1.0';\r\n    }\r\n    return Object.assign({}, wfsDataSourceOptions, {\r\n      wfsCapabilities: { xmlBody: '', GetPropertyValue: false }\r\n    });\r\n  }\r\n\r\n  public buildBaseWfsUrl(\r\n    wfsDataSourceOptions: WFSDataSourceOptions,\r\n    wfsQuery: string\r\n  ): string {\r\n    let paramTypename = 'typename';\r\n    if (\r\n      wfsDataSourceOptions.paramsWFS.version === '2.0.0' ||\r\n      !wfsDataSourceOptions.paramsWFS.version\r\n    ) {\r\n      paramTypename = 'typenames';\r\n    }\r\n    const baseWfsQuery = 'service=wfs&request=' + wfsQuery;\r\n    const wfsTypeName =\r\n      paramTypename + '=' + wfsDataSourceOptions.paramsWFS.featureTypes;\r\n    const wfsVersion = wfsDataSourceOptions.paramsWFS.version\r\n      ? 'version=' + wfsDataSourceOptions.paramsWFS.version\r\n      : 'version=' + '2.0.0';\r\n\r\n    return `${\r\n      wfsDataSourceOptions.urlWfs\r\n    }?${baseWfsQuery}&${wfsVersion}&${wfsTypeName}`;\r\n  }\r\n\r\n  public wfsGetFeature(\r\n    wfsDataSourceOptions: WFSDataSourceOptions,\r\n    nb = 5000,\r\n    epsgCode = 3857,\r\n    propertyname = ''\r\n  ): Observable<any> {\r\n    const baseUrl = this.buildBaseWfsUrl(wfsDataSourceOptions, 'GetFeature');\r\n    const outputFormat = wfsDataSourceOptions.paramsWFS.outputFormat\r\n      ? 'outputFormat=' + wfsDataSourceOptions.paramsWFS.outputFormat\r\n      : '';\r\n    const srsname = wfsDataSourceOptions.paramsWFS.srsName\r\n      ? 'srsname=' + wfsDataSourceOptions.paramsWFS.srsName\r\n      : 'srsname=EPSG:' + epsgCode;\r\n    const wfspropertyname =\r\n      propertyname === '' ? propertyname : '&propertyname=' + propertyname;\r\n    let paramMaxFeatures = 'maxFeatures';\r\n    if (\r\n      wfsDataSourceOptions.paramsWFS.version === '2.0.0' ||\r\n      !wfsDataSourceOptions.paramsWFS.version\r\n    ) {\r\n      paramMaxFeatures = 'count';\r\n    }\r\n\r\n    let maxFeatures;\r\n    if (nb !== 5000) {\r\n      maxFeatures = paramMaxFeatures + '=' + nb;\r\n    } else {\r\n      maxFeatures = wfsDataSourceOptions.paramsWFS.maxFeatures\r\n        ? paramMaxFeatures + '=' + wfsDataSourceOptions.paramsWFS.maxFeatures\r\n        : paramMaxFeatures + '=' + nb;\r\n    }\r\n    const urlWfs = `${baseUrl}&${outputFormat}&${srsname}&${maxFeatures}${wfspropertyname}`;\r\n    const patternGml = new RegExp('.*?gml.*?');\r\n    if (\r\n      patternGml.test(wfsDataSourceOptions.paramsWFS.outputFormat.toLowerCase())\r\n    ) {\r\n      return this.http.get(urlWfs, { responseType: 'text' });\r\n    } else {\r\n      return this.http.get(urlWfs);\r\n    }\r\n  }\r\n\r\n  public getValueFromWfsGetPropertyValues(\r\n    wfsDataSourceOptions: WFSDataSourceOptions,\r\n    field,\r\n    maxFeatures = 30,\r\n    startIndex = 0,\r\n    retry = 0\r\n  ): Observable<any> {\r\n    return new Observable(d => {\r\n      const nbRetry = 2;\r\n      const valueList = [];\r\n\r\n      this.wfsGetPropertyValue(\r\n        wfsDataSourceOptions,\r\n        field,\r\n        maxFeatures,\r\n        startIndex\r\n      ).subscribe(\r\n        str => {\r\n          str = str.replace(/&#39;/gi, \"'\"); // tslint:disable-line\r\n          const regexExcp = /exception/gi;\r\n          if (regexExcp.test(str)) {\r\n            retry++;\r\n            if (retry < nbRetry) {\r\n              this.getValueFromWfsGetPropertyValues(\r\n                wfsDataSourceOptions,\r\n                field,\r\n                maxFeatures,\r\n                startIndex,\r\n                retry\r\n              ).subscribe(rep => d.next(rep));\r\n            }\r\n          } else {\r\n            const valueReferenceRegex = new RegExp(\r\n              '<(.+?)' + field + '>(.+?)</(.+?)' + field + '>',\r\n              'gi'\r\n            );\r\n            let n = valueReferenceRegex.exec(str);\r\n            while (n !== null) {\r\n              if (n.index === valueReferenceRegex.lastIndex) {\r\n                valueReferenceRegex.lastIndex++;\r\n              }\r\n              if (valueList.indexOf(n[2]) === -1) {\r\n                valueList.push(n[2]);\r\n              }\r\n              n = valueReferenceRegex.exec(str);\r\n            }\r\n            d.next(valueList);\r\n            d.complete();\r\n          }\r\n        },\r\n        err => {\r\n          if (retry < nbRetry) {\r\n            retry++;\r\n            this.getValueFromWfsGetPropertyValues(\r\n              wfsDataSourceOptions,\r\n              field,\r\n              maxFeatures,\r\n              startIndex,\r\n              retry\r\n            ).subscribe(rep => d.next(rep));\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  wfsGetCapabilities(options): Observable<any> {\r\n    const baseWfsQuery = 'service=wfs&request=GetCapabilities';\r\n    const wfsVersion = options.version\r\n      ? 'version=' + options.version\r\n      : 'version=' + '2.0.0';\r\n    const wfsGcUrl = `${options.urlWfs}?${baseWfsQuery}&${wfsVersion}`;\r\n    return this.http.get(wfsGcUrl, {\r\n      observe: 'response',\r\n      responseType: 'text'\r\n    });\r\n  }\r\n\r\n  defineFieldAndValuefromWFS(\r\n    wfsDataSourceOptions: WFSDataSourceOptions\r\n  ): Observable<any> {\r\n    return new Observable(d => {\r\n      const sourceFields = [];\r\n      let fieldList;\r\n      let fieldListWoGeom;\r\n      let fieldListWoGeomStr;\r\n      let olFormats;\r\n      const patternGml3 = /gml/gi;\r\n      if (wfsDataSourceOptions.paramsWFS.outputFormat.match(patternGml3)) {\r\n        olFormats = olformat.WFS;\r\n      } else {\r\n        olFormats = olformat.GeoJSON;\r\n      }\r\n\r\n      if (wfsDataSourceOptions.paramsWFS.wfsCapabilities.GetPropertyValue) {\r\n        this.wfsGetFeature(wfsDataSourceOptions, 1).subscribe(oneFeature => {\r\n          const features = new olFormats().readFeatures(oneFeature);\r\n          fieldList = features[0].getKeys();\r\n          fieldListWoGeom = fieldList.filter(\r\n            field =>\r\n              field !== features[0].getGeometryName() &&\r\n              !field.match(/boundedby/gi)\r\n          );\r\n          fieldListWoGeomStr = fieldListWoGeom.join(',');\r\n          fieldListWoGeom.forEach(element => {\r\n            const fieldType =\r\n              typeof features[0].get(element) === 'object'\r\n                ? undefined\r\n                : typeof features[0].get(element);\r\n            this.getValueFromWfsGetPropertyValues(\r\n              wfsDataSourceOptions,\r\n              element,\r\n              200\r\n            ).subscribe(valueList => {\r\n              sourceFields.push({\r\n                name: element,\r\n                alias: element,\r\n                values: valueList\r\n              });\r\n              d.next(sourceFields);\r\n            });\r\n          });\r\n        });\r\n      } else {\r\n        this.wfsGetFeature(wfsDataSourceOptions, 1).subscribe(oneFeature => {\r\n          const features = new olFormats().readFeatures(oneFeature);\r\n          fieldList = features[0].getKeys();\r\n          fieldListWoGeom = fieldList.filter(\r\n            field =>\r\n              field !== features[0].getGeometryName() &&\r\n              !field.match(/boundedby/gi)\r\n          );\r\n          fieldListWoGeomStr = fieldListWoGeom.join(',');\r\n          this.wfsGetFeature(\r\n            wfsDataSourceOptions,\r\n            200,\r\n            3857,\r\n            fieldListWoGeomStr\r\n          ).subscribe(manyFeatures => {\r\n            const mfeatures = new olFormats().readFeatures(manyFeatures);\r\n            this.built_properties_value(mfeatures).forEach(element => {\r\n              sourceFields.push(element);\r\n            });\r\n            d.next(sourceFields);\r\n            d.complete();\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public wfsGetPropertyValue(\r\n    wfsDataSourceOptions: WFSDataSourceOptions,\r\n    field,\r\n    maxFeatures = 30,\r\n    startIndex = 0\r\n  ): Observable<any> {\r\n    const baseWfsQuery =\r\n      'service=wfs&request=GetPropertyValue&count=' + maxFeatures;\r\n    const wfsTypeName =\r\n      'typenames=' + wfsDataSourceOptions.paramsWFS.featureTypes;\r\n    const wfsValueReference = 'valueReference=' + field;\r\n    const wfsVersion = 'version=' + '2.0.0';\r\n    const gfvUrl = `${\r\n      wfsDataSourceOptions.urlWfs\r\n    }?${baseWfsQuery}&${wfsVersion}&${wfsTypeName}&${wfsValueReference}`;\r\n    return this.http.get(gfvUrl, { responseType: 'text' });\r\n  }\r\n\r\n  private built_properties_value(features: olFeature[]): string[] {\r\n    const kv = Object.assign({}, features[0].getProperties());\r\n    delete kv[features[0].getGeometryName()];\r\n    delete kv.boundedBy;\r\n    const sourceFields = [];\r\n    for (const property in kv) {\r\n      if (kv.hasOwnProperty(property)) {\r\n        const fieldType =\r\n          typeof features[0].get(property) === 'object'\r\n            ? undefined\r\n            : typeof features[0].get(property);\r\n        sourceFields.push({\r\n          name: property,\r\n          alias: property,\r\n          type: fieldType,\r\n          values: [kv[property]]\r\n        });\r\n      }\r\n    }\r\n    features.every((element) => {\r\n      const featureProperties = element.getProperties();\r\n      for (const key in featureProperties) {\r\n        if (featureProperties.hasOwnProperty(key) && key in kv) {\r\n          sourceFields.filter(f => f.name === key).forEach(v => {\r\n            if (v.values.indexOf(featureProperties[key]) === -1) {\r\n              v.values.push(featureProperties[key]);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    return sourceFields;\r\n  }\r\n}\r\n","export enum QueryFormat {\r\n  GML2 = 'gml2',\r\n  GML3 = 'gml3',\r\n  JSON = 'json',\r\n  GEOJSON = 'geojson',\r\n  ESRIJSON = 'esrijson',\r\n  TEXT = 'text',\r\n  HTML = 'html'\r\n}\r\n\r\nexport enum QueryHtmlTarget {\r\n  IFRAME = 'iframe',\r\n  BLANK = '_blank'\r\n}\r\n","import olSourceImageWMS from 'ol/source/ImageWMS';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nimport { NetworkService } from '@igo2/core';\r\n\r\nexport class WMSDataSource extends DataSource {\r\n  public ol: olSourceImageWMS;\r\n  public ogcFilterWriter: OgcFilterWriter;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  constructor(\r\n    public options: WMSDataSourceOptions,\r\n    public networkService: NetworkService,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(options, networkService);\r\n    // Important: To use wms versions smaller than 1.3.0, SRS\r\n    // needs to be supplied in the source \"params\"\r\n\r\n    // We need to do this to override the default version\r\n    // of openlayers which is uppercase\r\n    const sourceParams: any = options.params;\r\n    if (sourceParams && sourceParams.version) {\r\n      sourceParams.VERSION = sourceParams.version;\r\n    }\r\n\r\n    if (sourceParams && sourceParams.VERSION) {\r\n      if (sourceParams.version !== '1.3.0') {\r\n        if (!sourceParams.SRS && !sourceParams.srs) {\r\n          throw new Error(`You must set a SRS (or srs) param for your WMS\r\n           (layer =  ` + sourceParams.layers + `) because your want to use a WMS version under 1.3.0\r\n        Ex: \"srs\": \"EPSG:3857\" `);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (sourceParams && sourceParams.INFO_FORMAT) {\r\n      sourceParams.info_format = sourceParams.INFO_FORMAT;\r\n    }\r\n\r\n    if (options.refreshIntervalSec && options.refreshIntervalSec > 0) {\r\n      setInterval(() => {\r\n        this.refresh();\r\n      }, options.refreshIntervalSec * 1000); // Convert seconds to MS\r\n    }\r\n\r\n    // ####   START if paramsWFS\r\n    if (options.paramsWFS) {\r\n      const wfsCheckup = this.wfsService.checkWfsOptions(options);\r\n      options.paramsWFS.version = wfsCheckup.paramsWFS.version;\r\n      options.paramsWFS.wfsCapabilities = wfsCheckup.params.wfsCapabilities;\r\n\r\n      this.wfsService.getSourceFieldsFromWFS(options);\r\n\r\n      this.options.download = Object.assign({}, this.options.download, {\r\n        dynamicUrl: this.buildDynamicDownloadUrlFromParamsWFS(this.options)\r\n      });\r\n    } //  ####   END  if paramsWFS\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n    if (!options.sourceFields || options.sourceFields.length === 0) {\r\n      options.sourceFields = [];\r\n    }\r\n    const initOgcFilters = (this.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    if (sourceParams.layers.split(',').length > 1 && this.options && initOgcFilters && initOgcFilters.enabled) {\r\n      console.log('*******************************');\r\n      console.log('BE CAREFULL, YOUR WMS LAYERS (' + sourceParams.layers\r\n      + ') MUST SHARE THE SAME FIELDS TO ALLOW ogcFilters TO WORK !! ');\r\n      console.log('*******************************');\r\n  }\r\n\r\n    if (this.options && initOgcFilters && initOgcFilters.enabled && initOgcFilters.filters) {\r\n        const filters = initOgcFilters.filters;\r\n        const rebuildFilter = this.ogcFilterWriter.buildFilter(filters);\r\n        const appliedFilter = this.formatProcessedOgcFilter(rebuildFilter, sourceParams.layers);\r\n        const wmsFilterValue = appliedFilter.length > 0\r\n        ? appliedFilter.replace('filter=', '')\r\n        : undefined;\r\n        this.ol.updateParams({ filter: wmsFilterValue });\r\n      }\r\n\r\n  }\r\n\r\n  refresh() {\r\n    this.ol.updateParams({ igoRefresh: Math.random() });\r\n  }\r\n\r\n  public formatProcessedOgcFilter(processedFilter, layers): string {\r\n    let appliedFilter = '';\r\n    if (processedFilter.length === 0 && layers.indexOf(',') === -1) {\r\n      appliedFilter = processedFilter;\r\n    } else {\r\n      layers.split(',').forEach(layerName => {\r\n        appliedFilter = `${appliedFilter}(${processedFilter.replace('filter=', '')})`;\r\n      });\r\n    }\r\n    return `filter=${appliedFilter}`;\r\n  }\r\n\r\n  private buildDynamicDownloadUrlFromParamsWFS(asWFSDataSourceOptions) {\r\n    const outputFormat =\r\n      asWFSDataSourceOptions.paramsWFS.outputFormat !== undefined\r\n        ? 'outputFormat=' + asWFSDataSourceOptions.paramsWFS.outputFormat\r\n        : '';\r\n\r\n    let paramMaxFeatures = 'maxFeatures';\r\n    if (\r\n      asWFSDataSourceOptions.paramsWFS.version === '2.0.0' ||\r\n      !asWFSDataSourceOptions.paramsWFS.version\r\n    ) {\r\n      paramMaxFeatures = 'count';\r\n    }\r\n    const maxFeatures = asWFSDataSourceOptions.paramsWFS.maxFeatures\r\n      ? paramMaxFeatures + '=' + asWFSDataSourceOptions.paramsWFS.maxFeatures\r\n      : paramMaxFeatures + '=5000';\r\n    const srsname = asWFSDataSourceOptions.paramsWFS.srsName\r\n      ? 'srsname=' + asWFSDataSourceOptions.paramsWFS.srsName\r\n      : 'srsname=EPSG:3857';\r\n    const baseWfsQuery = this.wfsService.buildBaseWfsUrl(\r\n      asWFSDataSourceOptions,\r\n      'GetFeature'\r\n    );\r\n    return `${baseWfsQuery}&${outputFormat}&${srsname}&${maxFeatures}`;\r\n  }\r\n\r\n  protected createOlSource(): olSourceImageWMS {\r\n    if (this.options.paramsWFS) {\r\n      this.options.urlWfs = this.options.urlWfs\r\n        ? this.options.urlWfs\r\n        : this.options.url;\r\n      this.options.paramsWFS.version = this.options.paramsWFS.version\r\n        ? this.options.paramsWFS.version\r\n        : '2.0.0';\r\n    }\r\n    let initOgcFilters = (this.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    const ogcFiltersDefaultValue = false; // default values for wms.\r\n    initOgcFilters = initOgcFilters === undefined ? {} : initOgcFilters;\r\n    initOgcFilters.enabled = initOgcFilters.enabled === undefined ? ogcFiltersDefaultValue : initOgcFilters.enabled;\r\n    initOgcFilters.editable = initOgcFilters.editable === undefined ? ogcFiltersDefaultValue : initOgcFilters.editable;\r\n    return new olSourceImageWMS(this.options);\r\n  }\r\n\r\n  getLegend(scale?: number): DataSourceLegendOptions[] {\r\n    let legend = super.getLegend();\r\n    if (legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    const sourceParams = this.params;\r\n\r\n    let layers = [];\r\n    if (sourceParams.layers !== undefined) {\r\n      layers = sourceParams.layers.split(',');\r\n    }\r\n\r\n    const baseUrl = this.options.url.replace(/\\?$/, '');\r\n    const params = [\r\n      'REQUEST=GetLegendGraphic',\r\n      'SERVICE=wms',\r\n      'FORMAT=image/png',\r\n      'LEGEND_OPTIONS=forceLabels:on',\r\n      'SLD_VERSION=1.1.0',\r\n      `VERSION=${sourceParams.version || '1.3.0'}`\r\n    ];\r\n    if (scale !== undefined) {\r\n      params.push(`SCALE=${scale}`);\r\n    }\r\n\r\n    legend = layers.map((layer: string) => {\r\n      return {\r\n        url: `${baseUrl}?${params.join('&')}&LAYER=${layer}`,\r\n        title: layers.length > 1 ? layer : undefined\r\n      };\r\n    });\r\n\r\n    return legend;\r\n  }\r\n}\r\n","import olTileGridWMTS from 'ol/tilegrid/WMTS';\r\nimport * as olproj from 'ol/proj';\r\nimport {\r\n  getTopLeft as extentGetTopLeft,\r\n  getWidth as extentGetWidth\r\n} from 'ol/extent.js';\r\n\r\nexport function createDefaultTileGrid(epsg?: string): olTileGridWMTS {\r\n  const projection = epsg ? olproj.get(epsg) : olproj.get('EPSG:3857');\r\n  const projectionExtent = projection.getExtent();\r\n  const size = extentGetWidth(projectionExtent) / 256;\r\n  const resolutions = new Array(20);\r\n  const matrixIds = new Array(20);\r\n  for (let z = 0; z < 20; ++z) {\r\n    resolutions[z] = size / Math.pow(2, z);\r\n    matrixIds[z] = z;\r\n  }\r\n\r\n  return new olTileGridWMTS({\r\n    origin: extentGetTopLeft(projectionExtent),\r\n    resolutions,\r\n    matrixIds\r\n  });\r\n}\r\n","import olSourceWMTS from 'ol/source/WMTS';\r\n\r\nimport { createDefaultTileGrid } from '../../utils/tilegrid';\r\nimport { DataSource } from './datasource';\r\nimport { WMTSDataSourceOptions } from './wmts-datasource.interface';\r\n\r\nimport { NetworkService } from '@igo2/core/igo2-core';\r\n\r\nexport class WMTSDataSource extends DataSource {\r\n  public options: WMTSDataSourceOptions;\r\n  public ol: olSourceWMTS;\r\n\r\n  constructor(\r\n    options: WMTSDataSourceOptions,\r\n    networkService: NetworkService\r\n    ) {\r\n    super(options, networkService);\r\n  }\r\n\r\n  protected createOlSource(): olSourceWMTS {\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        tileGrid: createDefaultTileGrid(this.options.projection as string)\r\n      },\r\n      this.options\r\n    );\r\n\r\n    return new olSourceWMTS(sourceOptions);\r\n  }\r\n\r\n}\r\n","import olSourceCarto from 'ol/source/CartoDB';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { CartoDataSourceOptions } from './carto-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class CartoDataSource extends DataSource {\r\n  public ol: olSourceCarto;\r\n  public options: CartoDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceCarto {\r\n    const crossOrigin = this.options.crossOrigin\r\n      ? this.options.crossOrigin\r\n      : 'Anonymous';\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        crossOrigin\r\n      },\r\n      this.options\r\n    );\r\n    return new olSourceCarto(sourceOptions);\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legend = super.getLegend();\r\n    if (legend.length > 0) {\r\n      return legend;\r\n    }\r\n    let htmlString = '<table>';\r\n    if (this.options.config.layers[0].legend != null) {\r\n      this.options.config.layers[0].legend.items.forEach(f => {\r\n        if (f.visible === true) {\r\n          htmlString +=\r\n            '<tr><td>' +\r\n            '<p><font size=\"5\" color=\"' +\r\n            f.value +\r\n            '\"> &#9679</font></p></td>' +\r\n            '<td>' +\r\n            f.name +\r\n            '</td></tr>';\r\n        }\r\n      });\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    } else {\r\n      // Try to build the legend from the cartocss options\r\n      const layerOptions = this.options.config.layers[0].options;\r\n      // All available cartocss style options\r\n      const types = [\r\n        'polygon-fill:',\r\n        'marker-fill:',\r\n        'shield-fill:',\r\n        'building-fill:',\r\n        'line-color:'\r\n      ];\r\n      for (const oneType of types) {\r\n        if (layerOptions.cartocss.includes(oneType)) {\r\n          const type = layerOptions.cartocss.split(oneType).pop();\r\n          const color = type.substr(0, type.indexOf(';'));\r\n          if (color.includes('ramp')) {\r\n            const colors = color.split(', (')[1].split(',');\r\n            const data = color.split(', (')[2].split(',');\r\n            for (let j = 0; j < colors.length; j++) {\r\n              colors[j] = colors[j].replace(/(\"|\\))/g, '');\r\n              data[j] = data[j].replace(/(\"|\\))/g, '');\r\n              if (data[j].replace(/\\s+/g, '') === '=') {\r\n                data[j] = 'Autres';\r\n              }\r\n              htmlString +=\r\n                '<tr><td>' +\r\n                '<p><font size=\"5\" color=\"' +\r\n                colors[j] +\r\n                '\"> &#9679</font></p></td>' +\r\n                '<td>' +\r\n                data[j] +\r\n                '</td></tr>';\r\n            }\r\n            break;\r\n          } else {\r\n            const title = layerOptions.layer_name\r\n              ? layerOptions.layer_name\r\n              : '';\r\n            htmlString +=\r\n              '<tr><td>' +\r\n              '<p><font size=\"5\" color=\"' +\r\n              color +\r\n              '\"> &#9679</font></p>' +\r\n              '</td><td>' +\r\n              title +\r\n              '</td></tr>';\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    }\r\n  }\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport * as olloadingstrategy from 'ol/loadingstrategy';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { ArcGISRestDataSourceOptions } from './arcgisrest-datasource.interface';\r\n\r\nexport class ArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n  public options: ArcGISRestDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    const esrijsonFormat = new olFormatEsriJSON();\r\n    return new olSourceVector({\r\n      attributions: this.options.params.attributions,\r\n      overlaps: false,\r\n      format: esrijsonFormat,\r\n      url: function(extent, resolution, proj) {\r\n        const baseUrl = this.options.url + '/' + this.options.layer + '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        if (this.options.params.timeFilter) {\r\n          const time = `time=${this.options.params.timeExtent}`;\r\n          params.push(time);\r\n        }\r\n        if (this.options.params.customParams) {\r\n          this.options.params.customParams.forEach(element => {\r\n            params.push(element);\r\n          });\r\n        }\r\n        return `${baseUrl}?${params.join('&')}`;\r\n      }.bind(this),\r\n      strategy: olloadingstrategy.bbox\r\n    });\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legendInfo = this.options.params.legendInfo;\r\n    const legend = super.getLegend();\r\n    if (legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const modifiedUrl = this.options.url.replace(\r\n        'FeatureServer',\r\n        'MapServer'\r\n      );\r\n      const src = `${modifiedUrl}/${lyr.layerId}/images/${lyrLegend.url}`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n}\r\n","import olSourceTileArcGISRest from 'ol/source/TileArcGISRest';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { TileArcGISRestDataSourceOptions } from './tilearcgisrest-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class TileArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceTileArcGISRest;\r\n  public options: TileArcGISRestDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceTileArcGISRest {\r\n    return new olSourceTileArcGISRest(this.options);\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legend = super.getLegend();\r\n    if (this.options.legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = this.options.legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const src = `${this.options.url}/${lyr.layerId}/images/${\r\n        lyrLegend.url\r\n      }`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { WebSocketDataSourceOptions } from './websocket-datasource.interface';\r\n\r\nexport class WebSocketDataSource extends FeatureDataSource {\r\n  public ws: WebSocket;\r\n  public options: WebSocketDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    this.createWebSocket();\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    return super.createOlSource();\r\n  }\r\n\r\n  private createWebSocket() {\r\n    this.ws = new WebSocket(this.options.url);\r\n    this.ws.onmessage = this.onMessage.bind(this);\r\n\r\n    if (this.options.onclose) {\r\n      this.ws.onclose = this.onClose.bind(this);\r\n    }\r\n\r\n    if (this.options.onerror) {\r\n      this.ws.onerror = this.onError.bind(this);\r\n    }\r\n\r\n    if (this.options.onopen) {\r\n      this.ws.onopen = this.onOpen.bind(this);\r\n    }\r\n  }\r\n\r\n  onMessage(event) {\r\n    const featureAdded = this.options.format.readFeature(event.data);\r\n\r\n    switch (this.options.onmessage) {\r\n      case 'update':\r\n        // ol don't add if same ID\r\n        const featureToRemove = this.ol.getFeatureById(featureAdded.getId());\r\n        if (featureToRemove) {\r\n          this.ol.removeFeature(featureToRemove);\r\n        }\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'delete':\r\n        this.ol.clear(true);\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'add':\r\n      default:\r\n        this.ol.addFeature(featureAdded);\r\n    }\r\n  }\r\n\r\n  onClose(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onError(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onOpen(event) {\r\n    // thrown message to user ?\r\n  }\r\n}\r\n","import { Md5 } from 'ts-md5';\r\nimport feature from 'ol/Feature';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\nimport olFormatMVT from 'ol/format/MVT';\r\n\r\nimport { uuid, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { MVTDataSourceOptions } from './mvt-datasource.interface';\r\n\r\nexport class MVTDataSource extends DataSource {\r\n  public ol: olSourceVectorTile;\r\n  public options: MVTDataSourceOptions;\r\n  public status: boolean;\r\n\r\n  protected createOlSource(): olSourceVectorTile {\r\n    const mvtFormat = new olFormatMVT({featureClass: feature});\r\n    this.options.format = mvtFormat;\r\n    return new olSourceVectorTile(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    if (!this.options.url) {\r\n        return uuid();\r\n    }\r\n    const chain = 'mvt' + this.options.url;\r\n    return Md5.hashStr(chain) as string;\r\n  }\r\n  onLayerStatusChange(status: SubjectStatus): void {}\r\n}\r\n","import olSourceCluster from 'ol/source/Cluster';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { ClusterDataSourceOptions } from './cluster-datasource.interface';\r\n\r\nexport class ClusterDataSource extends FeatureDataSource {\r\n  public options: ClusterDataSourceOptions;\r\n  public ol: olSourceCluster;\r\n\r\n  protected createOlSource(): olSourceCluster {\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    this.options.source = super.createOlSource();\r\n    return new olSourceCluster(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    return uuid();\r\n  }\r\n}\r\n","export const FEATURE = 'Feature';\r\n\r\nexport enum FeatureMotion {\r\n  None,\r\n  Move,\r\n  Zoom,\r\n  Default\r\n}\r\n","export const LAYER = 'Layer';\r\n","import { Subject } from 'rxjs';\r\n\r\nimport olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource } from '../../../datasource';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { LayerOptions } from './layer.interface';\r\n\r\nexport abstract class Layer {\r\n  public collapsed: boolean;\r\n  public dataSource: DataSource;\r\n  public map: IgoMap;\r\n  public ol: olLayer;\r\n  public options: LayerOptions;\r\n  public status$: Subject<SubjectStatus>;\r\n\r\n  get id(): string {\r\n    return this.options.id || this.dataSource.id;\r\n  }\r\n\r\n  get alias(): string {\r\n    return this.options.alias;\r\n  }\r\n\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  set title(title: string) {\r\n    this.options.title = title;\r\n  }\r\n\r\n  get zIndex(): number {\r\n    return this.ol.getZIndex();\r\n  }\r\n\r\n  set zIndex(zIndex: number) {\r\n    this.ol.setZIndex(zIndex);\r\n  }\r\n\r\n  get baseLayer(): boolean {\r\n    return this.options.baseLayer;\r\n  }\r\n\r\n  set baseLayer(baseLayer: boolean) {\r\n    this.options.baseLayer = baseLayer;\r\n  }\r\n\r\n  get visible(): boolean {\r\n    return this.ol.get('visible');\r\n  }\r\n\r\n  set visible(visibility: boolean) {\r\n    this.ol.setVisible(visibility);\r\n  }\r\n\r\n  get opacity(): number {\r\n    return this.ol.get('opacity');\r\n  }\r\n\r\n  set opacity(opacity: number) {\r\n    this.ol.setOpacity(opacity);\r\n  }\r\n\r\n  get isInResolutionsRange(): boolean {\r\n    if (!this.map) {\r\n      return false;\r\n    }\r\n\r\n    const resolution = this.map.viewController.getResolution();\r\n    const minResolution = this.ol.getMinResolution();\r\n    const maxResolution = this.ol.getMaxResolution();\r\n\r\n    return resolution >= minResolution && resolution <= maxResolution;\r\n  }\r\n\r\n  get showInLayerList(): boolean { return this.options.showInLayerList !== false; }\r\n\r\n  constructor(options: LayerOptions) {\r\n    this.options = options;\r\n    this.dataSource = this.options.source;\r\n\r\n    this.ol = this.createOlLayer();\r\n    if (this.options.zIndex !== undefined) {\r\n      this.zIndex = this.options.zIndex;\r\n    }\r\n\r\n    if (this.options.baseLayer && this.options.visible === undefined) {\r\n      this.options.visible = false;\r\n    }\r\n    this.visible =\r\n      this.options.visible === undefined ? true : this.options.visible;\r\n    this.opacity =\r\n      this.options.opacity === undefined ? 1 : this.options.opacity;\r\n\r\n    this.ol.set('_layer', this, true);\r\n  }\r\n\r\n  protected abstract createOlLayer(): olLayer;\r\n\r\n  setMap(map: IgoMap | undefined) {\r\n    this.map = map;\r\n  }\r\n}\r\n","import olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource } from '../../../datasource/shared/datasources/datasource';\r\nimport { DataSourceOptions } from '../../../datasource/shared/datasources/datasource.interface';\r\n\r\nexport interface LayerOptions {\r\n  source?: DataSource;\r\n  sourceOptions?: DataSourceOptions;\r\n  title?: string;\r\n  id?: string;\r\n  alias?: string;\r\n  baseLayer?: boolean;\r\n  opacity?: number;\r\n  visible?: boolean;\r\n  extent?: [number, number, number, number];\r\n  zIndex?: number;\r\n  minResolution?: number;\r\n  maxResolution?: number;\r\n  showInLayerList?: boolean;\r\n  removable?: boolean;\r\n  ol?: olLayer;\r\n  tooltip?: TooltipContent;\r\n}\r\n\r\nexport interface GroupLayers {\r\n  title: string;\r\n  layers?: LayerOptions;\r\n  collapsed?: boolean;\r\n}\r\n\r\nexport interface LayerLegend {\r\n  title: string;\r\n  url: string;\r\n  image: string;\r\n}\r\n\r\nexport interface TooltipContent {\r\n  type?: TooltipType;\r\n  text?: string;\r\n}\r\nexport enum TooltipType {\r\n  TITLE = 'title',\r\n  ABSTRACT = 'abstract',\r\n  CUSTOM = 'custom'\r\n}\r\n","import olSourceImage from 'ol/source/Image';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { ImageLayer } from '../shared/layers/image-layer';\r\n\r\nexport class ImageWatcher extends Watcher {\r\n  protected id: string;\r\n  protected loaded = 0;\r\n  protected loading = 0;\r\n\r\n  private source: olSourceImage;\r\n\r\n  constructor(layer: ImageLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    if (!event.image.__watchers__) {\r\n      event.image.__watchers__ = [];\r\n    }\r\n    event.image.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.image.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.image.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.image.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import olSourceTile from 'ol/source/Tile';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { TileLayer } from '../shared/layers/tile-layer';\r\n\r\nexport class TileWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private source: olSourceTile;\r\n\r\n  constructor(layer: TileLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    // This is to avoid increasing\r\n    // the number of loaded tiles if a tile was loading\r\n    // before subscribing to this watcher\r\n    if (!event.tile.__watchers__) {\r\n      event.tile.__watchers__ = [];\r\n    }\r\n    event.tile.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.tile.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.tile.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.tile.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Layer } from '../shared/layers/layer';\r\nimport { LayerLegend } from '../shared/layers/layer.interface';\r\n\r\n/**\r\n * Get all the layers legend\r\n * @return Array of legend\r\n */\r\nexport function getLayersLegends(layers: Layer[], scale?: number): LayerLegend[] {\r\n  const legends = [];\r\n  const newCanvas = document.createElement('canvas');\r\n  const newContext = newCanvas.getContext('2d');\r\n  newContext.font = '20px Calibri';\r\n\r\n  let heightPos = 0;\r\n  for (const layer of layers) {\r\n    if (layer.visible === false) { continue; }\r\n\r\n    const legendUrls = layer.dataSource.getLegend(scale) || [];\r\n    for (const legendUrl of legendUrls) {\r\n      if (legendUrl.url === undefined) { continue; }\r\n\r\n      const title = layer.title;\r\n      // Create an image for the legend\r\n      const legendImage = new Image();\r\n      legendImage.crossOrigin = 'Anonymous';\r\n      legendImage.src = legendUrl.url;\r\n      legendImage.onload = () => {\r\n        newContext.fillText(title, 0, heightPos);\r\n        newContext.drawImage(legendImage, 0, heightPos + 20);\r\n        heightPos += legendImage.height + 5;\r\n      };\r\n      // Add legend info to the list\r\n      legends.push({\r\n        title,\r\n        url: legendUrl.url,\r\n        image: legendImage\r\n      });\r\n    }\r\n  }\r\n\r\n  return legends;\r\n}\r\n","import olLayerImage from 'ol/layer/Image';\r\nimport olSourceImage from 'ol/source/Image';\r\n\r\nimport { ImageWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { WMSDataSource } from '../../../datasource/shared/datasources/wms-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { ImageLayerOptions } from './image-layer.interface';\r\n\r\nexport class ImageLayer extends Layer {\r\n  public dataSource: WMSDataSource;\r\n  public options: ImageLayerOptions;\r\n  public ol: olLayerImage;\r\n\r\n  private watcher: ImageWatcher;\r\n\r\n  constructor(options: ImageLayerOptions) {\r\n    super(options);\r\n\r\n    this.watcher = new ImageWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerImage {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceImage\r\n    });\r\n\r\n    const image = new olLayerImage(olOptions);\r\n    const token = this.options.token;\r\n    if (token) {\r\n      (image.getSource() as any).setImageLoadFunction((tile, src) => {\r\n        this.customLoader(tile, src, token);\r\n      });\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  private customLoader(tile, src, token?) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', src);\r\n\r\n    xhr.setRequestHeader('Authorization', 'Bearer ' + token);\r\n    xhr.responseType = 'arraybuffer';\r\n\r\n    xhr.onload = function() {\r\n      const arrayBufferView = new Uint8Array((this as any).response);\r\n      const blob = new Blob([arrayBufferView], { type: 'image/png' });\r\n      const urlCreator = window.URL;\r\n      const imageUrl = urlCreator.createObjectURL(blob);\r\n      tile.getImage().src = imageUrl;\r\n    };\r\n    xhr.send();\r\n  }\r\n}\r\n","import olLayerTile from 'ol/layer/Tile';\r\nimport olSourceTile from 'ol/source/Tile';\r\n\r\nimport { TileWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { OSMDataSource } from '../../../datasource/shared/datasources/osm-datasource';\r\nimport { WMTSDataSource } from '../../../datasource/shared/datasources/wmts-datasource';\r\nimport { XYZDataSource } from '../../../datasource/shared/datasources/xyz-datasource';\r\nimport { CartoDataSource } from '../../../datasource/shared/datasources/carto-datasource';\r\nimport { TileArcGISRestDataSource } from '../../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { TileLayerOptions } from './tile-layer.interface';\r\n\r\nexport class TileLayer extends Layer {\r\n  public dataSource:\r\n    | OSMDataSource\r\n    | WMTSDataSource\r\n    | XYZDataSource\r\n    | CartoDataSource\r\n    | TileArcGISRestDataSource;\r\n  public options: TileLayerOptions;\r\n  public ol: olLayerTile;\r\n\r\n  private watcher: TileWatcher;\r\n\r\n  constructor(options: TileLayerOptions) {\r\n    super(options);\r\n\r\n    this.watcher = new TileWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceTile\r\n    });\r\n\r\n    return new olLayerTile(olOptions);\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n}\r\n","import olLayerVector from 'ol/layer/Vector';\r\nimport olSourceVector from 'ol/source/Vector';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { asArray as ColorAsArray } from 'ol/color';\r\n\r\nimport { FeatureDataSource } from '../../../datasource/shared/datasources/feature-datasource';\r\nimport { WFSDataSource } from '../../../datasource/shared/datasources/wfs-datasource';\r\nimport { ArcGISRestDataSource } from '../../../datasource/shared/datasources/arcgisrest-datasource';\r\nimport { WebSocketDataSource } from '../../../datasource/shared/datasources/websocket-datasource';\r\nimport { ClusterDataSource } from '../../../datasource/shared/datasources/cluster-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { VectorLayerOptions } from './vector-layer.interface';\r\n\r\nexport class VectorLayer extends Layer {\r\n  public dataSource:\r\n    | FeatureDataSource\r\n    | WFSDataSource\r\n    | ArcGISRestDataSource\r\n    | WebSocketDataSource\r\n    | ClusterDataSource;\r\n  public options: VectorLayerOptions;\r\n  public ol: olLayerVector;\r\n\r\n  get browsable(): boolean {\r\n    return this.options.browsable !== false;\r\n  }\r\n\r\n  get exportable(): boolean {\r\n    return this.options.exportable !== false;\r\n  }\r\n\r\n  constructor(options: VectorLayerOptions) {\r\n    super(options);\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVector {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVector\r\n    });\r\n\r\n    if (this.options.animation) {\r\n      this.dataSource.ol.on(\r\n        'addfeature',\r\n        function(e) {\r\n          this.flash(e.feature);\r\n        }.bind(this)\r\n      );\r\n    }\r\n\r\n    return new olLayerVector(olOptions);\r\n  }\r\n\r\n  protected flash(feature) {\r\n    const start = new Date().getTime();\r\n    const listenerKey = this.map.ol.on('postcompose', animate.bind(this));\r\n\r\n    function animate(event) {\r\n      const vectorContext = event.vectorContext;\r\n      const frameState = event.frameState;\r\n      const flashGeom = feature.getGeometry().clone();\r\n      const elapsed = frameState.time - start;\r\n      const elapsedRatio = elapsed / this.options.animation.duration;\r\n      const opacity = easeOut(1 - elapsedRatio);\r\n      const newColor = ColorAsArray(this.options.animation.color || 'red');\r\n      newColor[3] = opacity;\r\n      const style = this.ol.getStyleFunction().call(this, feature)[0];\r\n      const styleClone = style.clone();\r\n\r\n      switch (feature.getGeometry().getType()) {\r\n        case 'Point':\r\n          const radius =\r\n            easeOut(elapsedRatio) * (styleClone.getImage().getRadius() * 3);\r\n          styleClone.getImage().setRadius(radius);\r\n          styleClone.getImage().setOpacity(opacity);\r\n          break;\r\n        case 'LineString':\r\n          // TODO\r\n          if (styleClone.getImage().getStroke()) {\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setColor(newColor);\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) *\r\n                  (styleClone\r\n                    .getImage()\r\n                    .getStroke()\r\n                    .getWidth() *\r\n                    3)\r\n              );\r\n          }\r\n          if (styleClone.getStroke()) {\r\n            styleClone.getStroke().setColor(newColor);\r\n            styleClone\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) * (styleClone.getStroke().getWidth() * 3)\r\n              );\r\n          }\r\n          break;\r\n        case 'Polygon':\r\n          // TODO\r\n          if (styleClone.getImage().getFill()) {\r\n            styleClone\r\n              .getImage()\r\n              .getFill()\r\n              .setColor(newColor);\r\n          }\r\n          if (styleClone.getFill()) {\r\n            styleClone.getFill().setColor(newColor);\r\n          }\r\n          break;\r\n      }\r\n\r\n      vectorContext.setStyle(styleClone);\r\n      vectorContext.drawGeometry(flashGeom);\r\n\r\n      if (elapsed > this.options.animation.duration) {\r\n        unByKey(listenerKey);\r\n        // remove last geometry\r\n        // there is a little flash before feature disappear, better solution ?\r\n        this.map.ol.render();\r\n        return;\r\n      }\r\n      // tell OpenLayers to continue postcompose animation\r\n      this.map.ol.render();\r\n    }\r\n  }\r\n}\r\n","import olLayerVectorTile from 'ol/layer/VectorTile';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\n\r\nimport { MVTDataSource } from '../../../datasource/shared/datasources/mvt-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { VectorTileLayerOptions } from './vectortile-layer.interface';\r\n\r\nexport class VectorTileLayer extends Layer {\r\n  public dataSource:\r\n    | MVTDataSource;\r\n  public options: VectorTileLayerOptions;\r\n  public ol: olLayerVectorTile;\r\n\r\n  constructor(options: VectorTileLayerOptions) {\r\n    super(options);\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVectorTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVectorTile\r\n\r\n    });\r\n\r\n    return new olLayerVectorTile(olOptions);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\nimport { StyleByAttribute } from './stylebyattribute';\r\nimport { ClusterParam } from './clusterParam';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleService {\r\n  constructor() {}\r\n\r\n  createStyle(options: { [key: string]: any }) {\r\n    return this.parseStyle('style', options);\r\n  }\r\n\r\n  private parseStyle(key: string, value: any): olstyle {\r\n    const styleOptions = {};\r\n    const olCls = this.getOlCls(key);\r\n\r\n    if (olCls && value instanceof Object) {\r\n      Object.keys(value).forEach(_key => {\r\n        const olKey = this.getOlKey(_key);\r\n        styleOptions[olKey] = this.parseStyle(_key, value[_key]);\r\n      });\r\n      return new olCls(styleOptions);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  private getOlKey(key: any) {\r\n    let olKey = key.toLowerCase();\r\n    switch (olKey) {\r\n      case 'circle':\r\n      case 'regularshape':\r\n      case 'icon':\r\n        olKey = 'image';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return olKey;\r\n  }\r\n\r\n  private getOlCls(key: any) {\r\n    let olCls = olstyle[key.charAt(0).toUpperCase() + key.slice(1)];\r\n    if (key === 'regularshape') {\r\n      olCls = olstyle.RegularShape;\r\n    }\r\n\r\n    return olCls;\r\n  }\r\n\r\n  createStyleByAttribute(feature, styleByAttribute: StyleByAttribute) {\r\n    let style;\r\n    const type = styleByAttribute.type;\r\n    const attribute = styleByAttribute.attribute;\r\n    const data = styleByAttribute.data;\r\n    const stroke = styleByAttribute.stroke;\r\n    const width = styleByAttribute.width;\r\n    const fill = styleByAttribute.fill;\r\n    const radius = styleByAttribute.radius;\r\n    const icon = styleByAttribute.icon;\r\n    const scale = styleByAttribute.scale;\r\n    const size = data.length;\r\n    const label = styleByAttribute.label;\r\n    const baseStyle = styleByAttribute.baseStyle;\r\n    if (type === 'circle') {\r\n      for (let i = 0; i < size; i++) {\r\n        if (feature.get(attribute) === data[i]) {\r\n          if (icon) {\r\n           style = [new olstyle.Style({\r\n             image: new olstyle.Icon({\r\n               src: icon[i],\r\n               scale: scale ? scale[i] : 1\r\n             })\r\n           })];\r\n           return style;\r\n          }\r\n          style = [new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: radius ? radius[i] : 4,\r\n              stroke: new olstyle.Stroke({\r\n                color: stroke ? stroke[i] : 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: fill ? fill[i] : 'black'\r\n              })\r\n            })\r\n          })];\r\n          return style;\r\n        }\r\n      }\r\n      if (!feature.getStyle()) {\r\n       style = [new olstyle.Style({\r\n         image: new olstyle.Circle({\r\n           radius: 4,\r\n           stroke: new olstyle.Stroke({\r\n             color: 'black'\r\n           }),\r\n           fill: new olstyle.Fill({\r\n             color: '#bbbbf2'\r\n           })\r\n         })\r\n       })];\r\n       return style;\r\n     }\r\n     } else if (type === 'regular') {\r\n        for (let i = 0; i < size; i++) {\r\n          if (feature.get(attribute) === data[i]) {\r\n            style = [new olstyle.Style({\r\n              stroke: new olstyle.Stroke({\r\n                color: stroke ? stroke[i] : 'black',\r\n                width: width ? width[i] : 1\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: fill ? fill[i] : 'rgba(255,255,255,0.4)'\r\n              }),\r\n              text: new olstyle.Text({\r\n                text: feature.get(label),\r\n                stroke: new olstyle.Stroke({\r\n                  color: 'black'\r\n                })\r\n              })\r\n            })];\r\n            return style;\r\n           }\r\n         }\r\n        if (!feature.getStyle()) {\r\n          if (baseStyle) {\r\n            style = this.createStyle(baseStyle);\r\n            return style;\r\n          }\r\n          style = [new olstyle.Style({\r\n            stroke: new olstyle.Stroke({\r\n              color: 'black'\r\n            }),\r\n            fill: new olstyle.Fill({\r\n              color: '#bbbbf2'\r\n            })\r\n          })];\r\n          return style;\r\n        }\r\n       }\r\n   }\r\n\r\n   createClusterStyle(feature, clusterParam: ClusterParam) {\r\n    let style;\r\n    const range = clusterParam.clusterRange;\r\n    const icon = clusterParam.clusterIcon;\r\n    const iconScale = clusterParam.clusterScale;\r\n    const size = feature.get('features').length;\r\n    let color;\r\n    if (size !== 1) {\r\n      if (range) {\r\n        if (size >= range[1]) {\r\n            color = 'red';\r\n        } else if (size < range[1] && size >= range[0]) {\r\n            color = 'orange';\r\n        } else if (size < range[0]) {\r\n            color = 'green';\r\n        }\r\n      }\r\n      style = [new olstyle.Style({\r\n        image: new olstyle.Circle({\r\n            radius: 2 * size + 3.4,\r\n            stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n            }),\r\n            fill: new olstyle.Fill({\r\n                color: range ? color : 'blue'\r\n            })\r\n        }),\r\n        text: new olstyle.Text({\r\n            text: size.toString(),\r\n            fill: new olstyle.Fill({\r\n                color: '#fff'\r\n            })\r\n        })\r\n      })];\r\n    } else {\r\n      if (icon) {\r\n        style = [new olstyle.Style({\r\n          image: new olstyle.Icon({\r\n            src: icon,\r\n            scale: iconScale\r\n          })\r\n        })];\r\n      } else {\r\n        style = [new olstyle.Style({\r\n          image: new olstyle.Circle({\r\n              radius: 2 * size + 3.4,\r\n              stroke: new olstyle.Stroke({\r\n                  color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                  color: 'blue'\r\n              })\r\n          })\r\n        })];\r\n      }\r\n    }\r\n    return style;\r\n  }\r\n}\r\n","import OlLayer from 'ol/layer/Layer';\r\n\r\nimport { AnyLayer } from '../../layer/shared/layers/any-layer';\r\nimport { QueryableDataSource } from './query.interfaces';\r\n\r\n/**\r\n * Whether a layer is queryable\r\n * @param layer Layer\r\n * @returns True if the layer s squeryable\r\n */\r\nexport function layerIsQueryable(layer: AnyLayer): boolean {\r\n  const dataSource = layer.dataSource as QueryableDataSource;\r\n  return dataSource.options.queryable === true;\r\n}\r\n\r\n/**\r\n * Whether an OL layer is queryable\r\n * @param layer Layer\r\n * @returns True if the ol layer is queryable\r\n */\r\nexport function olLayerIsQueryable(olLayer: OlLayer): boolean {\r\n  const layer = olLayer.get('_layer');\r\n  return layer === undefined ? false : layerIsQueryable(layer);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\nimport { layerIsQueryable } from '../../query/shared/query.utils';\r\nimport { Layer, TooltipType } from '../shared/layers';\r\n\r\n@Component({\r\n  selector: 'igo-layer-item',\r\n  templateUrl: './layer-item.component.html',\r\n  styleUrls: ['./layer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerItemComponent implements OnInit, OnDestroy {\r\n\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  inResolutionRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  queryBadgeHidden$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  tooltipText: string;\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendIfVisible: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() orderable: boolean = true;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  get removable(): boolean { return this.layer.options.removable !== false; }\r\n\r\n  get opacity() { return this.layer.opacity * 100; }\r\n  set opacity(opacity: number) { this.layer.opacity = opacity / 100; }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    const legend = this.layer.dataSource.options.legend || {};\r\n    let legendCollapsed = legend.collapsed === false ? false : true;\r\n    if (this.layer.visible && this.expandLegendIfVisible) {\r\n      legendCollapsed = false;\r\n    }\r\n    this.toggleLegend(legendCollapsed);\r\n    this.updateQueryBadge();\r\n\r\n    const resolution$ = this.layer.map.viewController.resolution$;\r\n    this.resolution$$ = resolution$.subscribe((resolution: number) => {\r\n      this.onResolutionChange(resolution);\r\n    });\r\n    this.tooltipText = this.computeTooltip();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.resolution$$.unsubscribe();\r\n  }\r\n\r\n  toggleLegend(collapsed: boolean) {\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleVisibility() {\r\n    this.layer.visible = !this.layer.visible;\r\n    if (this.toggleLegendOnVisibilityChange) {\r\n      this.toggleLegend(!this.layer.visible);\r\n    }\r\n    this.updateQueryBadge();\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    const layerOptions = this.layer.options;\r\n    if (!layerOptions.tooltip) {\r\n      return this.layer.title;\r\n    }\r\n    const layerTooltip = layerOptions.tooltip;\r\n    const layerMetadata = (layerOptions as MetadataLayerOptions).metadata;\r\n    switch (layerOptions.tooltip.type) {\r\n      case TooltipType.TITLE:\r\n        return this.layer.title;\r\n      case TooltipType.ABSTRACT:\r\n        if (layerMetadata && layerMetadata.abstract) {\r\n          return layerMetadata.abstract;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      case TooltipType.CUSTOM:\r\n        if (layerTooltip && layerTooltip.text) {\r\n          return layerTooltip.text;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      default:\r\n        return this.layer.title;\r\n    }\r\n  }\r\n\r\n  private onResolutionChange(resolution: number) {\r\n    const inResolutionRange = this.layer.isInResolutionsRange;\r\n    if (inResolutionRange === false && this.updateLegendOnResolutionChange === true) {\r\n      this.toggleLegend(true);\r\n    }\r\n    this.inResolutionRange$.next(inResolutionRange);\r\n  }\r\n\r\n  private updateQueryBadge() {\r\n    const hidden = this.queryBadge === false ||\r\n      this.layer.visible === false ||\r\n      !layerIsQueryable(this.layer);\r\n    this.queryBadgeHidden$.next(hidden);\r\n  }\r\n}\r\n","import { Component, Input, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Subscription, BehaviorSubject, of, Observable } from 'rxjs';\r\n\r\nimport { DataSourceLegendOptions } from '../../datasource/shared/datasources/datasource.interface';\r\nimport { Layer } from '../shared/layers';\r\nimport { CapabilitiesService } from '../../datasource/shared/capabilities.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'igo-layer-legend',\r\n  templateUrl: './layer-legend.component.html',\r\n  styleUrls: ['./layer-legend.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerLegendComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  /**\r\n   * Observable of the legend items\r\n   */\r\n  legendItems$: BehaviorSubject<DataSourceLegendOptions[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Subscription to the map's resolution\r\n   */\r\n  private resolution$$: Subscription;\r\n  /**\r\n   * Layer\r\n   */\r\n  @Input() layer: Layer;\r\n\r\n  constructor(private capabilitiesService: CapabilitiesService) {}\r\n\r\n  /**\r\n   * On init, subscribe to the map's resolution and update the legend accordingly\r\n   */\r\n  ngOnInit() {\r\n    if (this.updateLegendOnResolutionChange === true) {\r\n      const resolution$ = this.layer.map.viewController.resolution$;\r\n      this.resolution$$ = resolution$.subscribe((resolution: number) => this.onResolutionChange(resolution));\r\n    } else {\r\n      this.updateLegend(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On destroy, unsubscribe to the map,s resolution\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.resolution$$ !== undefined) {\r\n      this.resolution$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  computeItemTitle(layerLegend): Observable<string> {\r\n    const layerOptions = this.layer.dataSource.options as any;\r\n    if (layerOptions.type !== 'wms') {\r\n      return of(layerLegend.title);\r\n    }\r\n\r\n    const layers = layerOptions.params.layers.split(',');\r\n    const localLayerOptions = JSON.parse(JSON.stringify(layerOptions)); // to avoid to alter the original options.\r\n    localLayerOptions.params.layers = layers.find(layer => layer === layerLegend.title);\r\n    return this.capabilitiesService\r\n      .getWMSOptions(localLayerOptions)\r\n      .pipe(map(wmsDataSourceOptions => {\r\n        return wmsDataSourceOptions._layerOptionsFromCapabilities.title;\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * On resolution change, compute the effective scale level and update the\r\n   * legend accordingly.\r\n   * @param resolutione Map resolution\r\n   */\r\n  private onResolutionChange(resolution: number) {\r\n    const scale = this.layer.map.viewController.getScale();\r\n    this.updateLegend(scale);\r\n  }\r\n\r\n  /**\r\n   * Update the legend according the scale level\r\n   * @param scale Map scale level\r\n   */\r\n  private updateLegend(scale: number | undefined) {\r\n    const legendItems = this.layer.dataSource.getLegend(scale);\r\n    if (legendItems.length === 0 && this.legendItems$.value.length === 0) {\r\n      return;\r\n    }\r\n    this.legendItems$.next(legendItems);\r\n  }\r\n}\r\n","export enum LayerListControlsEnum {\r\n  always = 'always',\r\n  never = 'never',\r\n  default = 'default'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerListService {\r\n  public keyword: string;\r\n  public sortedAlpha = false;\r\n  public onlyVisible = false;\r\n  public onlyInRange = false;\r\n  public keywordInitialized = false;\r\n  public sortedAlphaInitialized = false;\r\n  public onlyVisibleInitialized = false;\r\n  public onlyInRangeInitialized = false;\r\n\r\n  constructor() {}\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  TemplateRef,\r\n  ContentChild,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { Layer } from '../shared';\r\nimport { LayerListControlsEnum } from './layer-list.enum';\r\nimport { LayerListService } from './layer-list.service';\r\nimport { BehaviorSubject, ReplaySubject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce } from 'rxjs/operators';\r\nimport { MetadataOptions, MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\n\r\n// TODO: This class could use a clean up. Also, some methods could be moved ealsewhere\r\n@Component({\r\n  selector: 'igo-layer-list',\r\n  templateUrl: './layer-list.component.html',\r\n  styleUrls: ['./layer-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerListComponent implements OnInit, OnDestroy {\r\n\r\n  hasLayerNotVisible = false;\r\n  hasLayerOutOfRange = false;\r\n  orderable = true;\r\n  thresholdToFilterAndSort = 5;\r\n\r\n  layers$: BehaviorSubject<Layer[]> = new BehaviorSubject([]);\r\n\r\n  change$ = new ReplaySubject<void>(1);\r\n\r\n  showToolbar$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private change$$: Subscription;\r\n\r\n  @ContentChild('igoLayerItemToolbar') templateLayerToolbar: TemplateRef<any>;\r\n\r\n  @Input()\r\n  set layers(value: Layer[]) {\r\n    this.setLayers(value);\r\n    this.next();\r\n  }\r\n  get layers(): Layer[] { return this._layers; }\r\n  private _layers: Layer[];\r\n\r\n  @Input() placeholder: string = '';\r\n\r\n  @Input() floatLabel: FloatLabelType = 'auto';\r\n\r\n  @Input() layerFilterAndSortOptions: any = {};\r\n\r\n  @Input() excludeBaseLayers: boolean = false;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendOfVisibleLayers: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  get keyword(): string { return this.layerListService.keyword; }\r\n  set keyword(value: string) {\r\n    this.layerListService.keyword = value;\r\n    this.next();\r\n  }\r\n\r\n  get keywordInitialized(): boolean { return this.layerListService.keywordInitialized; }\r\n  set keywordInitialized(value: boolean) { this.layerListService.keywordInitialized = value; }\r\n\r\n  get onlyVisible(): boolean { return this.layerListService.onlyVisible; }\r\n  set onlyVisible(value: boolean) {\r\n    this.layerListService.onlyVisible = value;\r\n    this.next();\r\n  }\r\n\r\n  get onlyVisibleInitialized(): boolean { return this.layerListService.onlyVisibleInitialized; }\r\n  set onlyVisibleInitialized(value: boolean) { this.layerListService.onlyVisibleInitialized = value; }\r\n\r\n  get onlyInRange(): boolean { return this.layerListService.onlyInRange; }\r\n  set onlyInRange(value: boolean) {\r\n    this.layerListService.onlyInRange = value;\r\n    this.next();\r\n  }\r\n\r\n  get onlyInRangeInitialized(): boolean { return this.layerListService.onlyInRangeInitialized; }\r\n  set onlyInRangeInitialized(value: boolean) { this.layerListService.onlyInRangeInitialized = value; }\r\n\r\n  get sortedAlpha(): boolean { return this.layerListService.sortedAlpha; }\r\n  set sortedAlpha(value: boolean) {\r\n    this.layerListService.sortedAlpha = value;\r\n    this.next();\r\n  }\r\n\r\n  get sortedAlphaInitialized(): boolean { return this.layerListService.sortedAlphaInitialized; }\r\n  set sortedAlphaInitialized(value: boolean) { this.layerListService.sortedAlphaInitialized = value; }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private layerListService: LayerListService\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.change$$ = this.change$\r\n      .pipe(\r\n        debounce(() => {\r\n          return this.layers.length === 0 ? EMPTY : timer(50);\r\n        })\r\n      ).subscribe(() => {\r\n        this.showToolbar$.next(this.computeShowToolbar());\r\n        this.layers$.next(this.computeLayers(this.layers.slice(0)));\r\n      });\r\n\r\n    this.initLayerFilterAndSortOptions();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change$$.unsubscribe();\r\n  }\r\n\r\n  toggleOnlyVisible() {\r\n    this.onlyVisible = !this.onlyVisible;\r\n  }\r\n\r\n  toggleOnlyInRange() {\r\n    this.onlyInRange = !this.onlyInRange;\r\n  }\r\n\r\n  toggleSort(sortAlpha: boolean) {\r\n    this.sortedAlpha = sortAlpha;\r\n  }\r\n\r\n  clearKeyword() {\r\n    this.keyword = undefined;\r\n  }\r\n\r\n  private next() {\r\n    this.change$.next();\r\n  }\r\n\r\n  private computeLayers(layers: Layer[]): Layer[] {\r\n    let layersOut = this.filterLayers(layers);\r\n    if (this.sortedAlpha) {\r\n      layersOut = this.sortLayersByTitle(layersOut);\r\n    } else {\r\n      layersOut = this.sortLayersByZindex(layersOut);\r\n    }\r\n    return layersOut;\r\n  }\r\n\r\n  private filterLayers(layers: Layer[]): Layer[] {\r\n    const keyword = this.keyword;\r\n    if (this.layerFilterAndSortOptions.showToolbar === LayerListControlsEnum.never) {\r\n      return layers;\r\n    }\r\n    if (!keyword && !this.onlyInRange && !this.onlyVisible) {\r\n      return layers;\r\n    }\r\n\r\n    const keepLayerIds = layers.map((layer: Layer) => layer.id);\r\n\r\n    layers.forEach((layer: Layer) => {\r\n      const layerOptions = layer.options as MetadataLayerOptions || {};\r\n      const dataSourceOptions = layer.dataSource.options || {};\r\n      const metadata = layerOptions.metadata || {} as MetadataOptions;\r\n      const keywords = metadata.keywordList || [] ;\r\n      const layerKeywords = keywords.map((kw: string) => {\r\n        return kw.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      });\r\n\r\n      if (keyword) {\r\n        const localKeyword = keyword.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n        const layerTitle = layer.title.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n        const dataSourceType = dataSourceOptions.type || '';\r\n        const keywordRegex = new RegExp(localKeyword, 'gi');\r\n        const keywordInList = layerKeywords.find((kw: string) => keywordRegex.test(kw)) !== undefined;\r\n        if (\r\n          !keywordRegex.test(layerTitle) &&\r\n          !(keyword.toLowerCase() === dataSourceType.toLowerCase()) &&\r\n          !keywordInList\r\n        ) {\r\n          const index = keepLayerIds.indexOf(layer.id);\r\n          if (index > -1) {\r\n            keepLayerIds.splice(index, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.onlyVisible && layer.visible === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (this.onlyInRange && layer.isInResolutionsRange === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n    });\r\n\r\n    return layers.filter((layer: Layer) => keepLayerIds.indexOf(layer.id) !== -1);\r\n  }\r\n\r\n  private sortLayersByZindex(layers: Layer[]) {\r\n    return layers.sort((layer1, layer2) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  private sortLayersByTitle(layers: Layer[]) {\r\n    return layers.sort((a, b) => {\r\n      if (a.title < b.title) {\r\n        return -1;\r\n      }\r\n      if (a.title > b.title) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  private computeOrderable(): boolean {\r\n    if (this.onlyInRange || this.onlyVisible ||\r\n      this.sortedAlpha || this.keyword) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private computeShowToolbar(): boolean {\r\n    switch (this.layerFilterAndSortOptions.showToolbar) {\r\n      case LayerListControlsEnum.always:\r\n        return true;\r\n      case LayerListControlsEnum.never:\r\n        return false;\r\n      default:\r\n        if (this.layers.length >= this.thresholdToFilterAndSort ||\r\n          this.keyword ||\r\n          this.onlyInRange ||\r\n          this.onlyVisible) {\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private initLayerFilterAndSortOptions() {\r\n    if (this.layerFilterAndSortOptions.toolbarThreshold) {\r\n      this.thresholdToFilterAndSort = this.layerFilterAndSortOptions.toolbarThreshold;\r\n    }\r\n\r\n    if (this.layerFilterAndSortOptions.keyword && !this.keywordInitialized) {\r\n      this.keyword = this.layerFilterAndSortOptions.keyword;\r\n      this.keywordInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.sortedAlpha && !this.sortedAlphaInitialized) {\r\n      this.sortedAlpha = this.layerFilterAndSortOptions.sortedAlpha;\r\n      this.sortedAlphaInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.onlyVisible && !this.onlyVisibleInitialized &&\r\n      this.hasLayerNotVisible) {\r\n      this.onlyVisible = this.layerFilterAndSortOptions.onlyVisible;\r\n      this.onlyVisibleInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.onlyInRange && !this.onlyInRangeInitialized &&\r\n      this.hasLayerOutOfRange) {\r\n      this.onlyInRange = this.layerFilterAndSortOptions.onlyInRange;\r\n      this.onlyInRangeInitialized = true;\r\n    }\r\n  }\r\n\r\n  private setLayers(layers: Layer[]) {\r\n    this._layers = layers;\r\n\r\n    this.orderable = this.computeOrderable();\r\n\r\n    if (this.excludeBaseLayers) {\r\n      this.hasLayerNotVisible = layers.find(l => l.visible === false && !l.baseLayer) !== undefined;\r\n      this.hasLayerOutOfRange = layers.find(l => l.isInResolutionsRange === false && !l.baseLayer) !== undefined;\r\n    } else {\r\n      this.hasLayerNotVisible = layers.find(l => l.visible === false) !== undefined;\r\n      this.hasLayerOutOfRange = layers.find(l => l.isInResolutionsRange === false) !== undefined;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IgoMap } from './map';\r\n\r\n/**\r\n * MapService\r\n *\r\n * This service tracks the IgoMap instance, if any.\r\n * Currently, only one map instance is supported\r\n * but support for multiple maps may be added in the future.\r\n * This will impact other services such as the OverlayService\r\n * because these maps won't be sharing overlayed features.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MapService {\r\n  private map: IgoMap;\r\n\r\n  constructor() {}\r\n\r\n  getMap(): IgoMap {\r\n    return this.map;\r\n  }\r\n\r\n  setMap(map: IgoMap) {\r\n    this.map = map;\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy, AfterViewInit, Optional } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { RouteService } from '@igo2/core';\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { LayerListComponent } from './layer-list.component';\r\nimport { LayerListService } from './layer-list.service';\r\nimport { Layer } from '../shared/layers/layer';\r\n\r\n@Directive({\r\n  selector: '[igoLayerListBinding]'\r\n})\r\nexport class LayerListBindingDirective implements OnInit, AfterViewInit, OnDestroy {\r\n  private component: LayerListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: LayerListComponent,\r\n    private mapService: MapService,\r\n    private layerListService: LayerListService,\r\n    @Optional() private route: RouteService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService\r\n      .getMap()\r\n      .layers$.subscribe((layers: Layer[]) => {\r\n        this.component.layers = layers.filter((layer: Layer) => {\r\n          return layer.showInLayerList === true;\r\n        });\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.initRoutes();\r\n  }\r\n\r\n  private initRoutes() {\r\n    if (\r\n      this.route &&\r\n      (this.route.options.llcKKey || this.route.options.llcAKey ||\r\n        this.route.options.llcVKey || this.route.options.llcVKey)) {\r\n      this.route.queryParams.subscribe(params => {\r\n\r\n        const keywordFromUrl = params[this.route.options.llcKKey as string];\r\n        const sortedAplhaFromUrl = params[this.route.options.llcAKey as string];\r\n        const onlyVisibleFromUrl = params[this.route.options.llcVKey as string];\r\n        const onlyInRangeFromUrl = params[this.route.options.llcRKey as string];\r\n        if (keywordFromUrl && !this.layerListService.keywordInitialized) {\r\n          this.layerListService.keyword = keywordFromUrl;\r\n          this.layerListService.keywordInitialized = true;\r\n        }\r\n        if (sortedAplhaFromUrl && !this.layerListService.sortedAlphaInitialized) {\r\n          this.layerListService.sortedAlpha = sortedAplhaFromUrl === '1' ? true : false;\r\n          this.layerListService.sortedAlphaInitialized = true;\r\n        }\r\n        if (onlyVisibleFromUrl &&\r\n          !this.layerListService.onlyVisibleInitialized &&\r\n          this.component.hasLayerNotVisible) {\r\n          this.layerListService.onlyVisible = onlyVisibleFromUrl === '1' ? true : false;\r\n          this.layerListService.onlyVisibleInitialized = true;\r\n        }\r\n        if (onlyInRangeFromUrl &&\r\n          !this.layerListService.onlyInRangeInitialized &&\r\n          this.component.hasLayerOutOfRange) {\r\n          this.layerListService.onlyInRange = onlyInRangeFromUrl === '1' ? true : false;\r\n          this.layerListService.onlyInRangeInitialized = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { FeatureStoreStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\n\r\n/**\r\n * Strategies or responsible of synchronizing a feature store and a layer.\r\n * A strategy can be shared among multiple stores. Sharing a strategy\r\n * is a good idea when multiple strategies would have on cancelling effect\r\n * on each other.\r\n *\r\n * At creation, strategy is inactive and needs to be manually activated.\r\n */\r\nexport class FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Feature store\r\n   * @internal\r\n   */\r\n  protected stores: FeatureStore[] = [];\r\n\r\n  /**\r\n   * Whether this strategy is active\r\n   * @internal\r\n   */\r\n  protected active = false;\r\n\r\n  constructor(protected options: FeatureStoreStrategyOptions = {}) {\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Whether this strategy is active\r\n   */\r\n  isActive(): boolean { return this.active; }\r\n\r\n  /**\r\n   * Activate the strategy. If it's already active, it'll be deactivated\r\n   * and activated again.\r\n   */\r\n  activate() {\r\n    if (this.active === true) {\r\n      this.doDeactivate();\r\n    }\r\n    this.active = true;\r\n    this.doActivate();\r\n  }\r\n\r\n  /**\r\n   * Activate the strategy. If it's already active, it'll be deactivated\r\n   * and activated again.\r\n   */\r\n  deactivate() {\r\n    this.active = false;\r\n    this.doDeactivate();\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    if (this.stores.indexOf(store) < 0) {\r\n      this.stores.push(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from store\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    const index = this.stores.indexOf(store);\r\n    if (index >= 0) {\r\n      this.stores.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Do the stataegy activation\r\n   * @internal\r\n   */\r\n  protected doActivate() {}\r\n\r\n  /**\r\n   * Do the strategy deactivation\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {}\r\n\r\n}\r\n","import { Subscription } from 'rxjs';\r\n\r\nimport { FeatureMotion } from '../feature.enums';\r\nimport { Feature, FeatureStoreLoadingStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreStrategy } from './strategy';\r\n\r\n/**\r\n * This strategy loads a store's features into it's layer counterpart.\r\n * The store -> layer binding is a one-way binding. That means any entity\r\n * added to the store will be added to the layer but the opposite is false.\r\n *\r\n * Important: This strategy observes filtered entities, not raw entities. This\r\n * is not configurable yet.\r\n */\r\nexport class FeatureStoreLoadingStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's features\r\n   */\r\n  private stores$$ = new Map<FeatureStore, Subscription>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for entities changes in a store.\r\n   * Important: Never observe a store's sorted entities. It makes no sense\r\n   * to display sorted entities (instead of unsorted) on a layer and it\r\n   * would potentially result in a lot of useless computation.\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    const subscription = store.view.all$()\r\n      .subscribe((features: Feature[]) => this.onFeaturesChange(features, store));\r\n    this.stores$$.set(store, subscription);\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in a store.\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const subscription = this.stores$$.get(store);\r\n    if (subscription !== undefined) {\r\n      subscription.unsubscribe();\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, Subscription]) => {\r\n      entries[1].unsubscribe();\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features into a layer or clear the layer if the array of features is empty.\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onFeaturesChange(features: Feature[], store: FeatureStore) {\r\n    if (features.length === 0) {\r\n      store.clearLayer();\r\n    } else {\r\n      store.setLayerFeatures(\r\n        features,\r\n        this.selectMotion(store),\r\n        this.options.viewScale,\r\n        this.options.areaRatio,\r\n        this.options.getFeatureId\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the best motion\r\n   * @param store A FeatureStore to apply the motion\r\n   * @returns The motion selected\r\n   */\r\n  private selectMotion(store: FeatureStore) {\r\n    if (this.options.motion !== undefined) { return this.options.motion; }\r\n\r\n    if (store.pristine === true) {\r\n      // If features have just been loaded into the store, move/zoom on them\r\n      return FeatureMotion.Default;\r\n    } else if (store.count > store.view.count) {\r\n      // If features have been filtered, move/zoom on the remaining ones\r\n      return FeatureMotion.Default;\r\n    } else {\r\n      // On insert, update or delete, do nothing\r\n      return FeatureMotion.None;\r\n    }\r\n  }\r\n}\r\n","import { unByKey } from 'ol/Observable';\r\nimport { OlEvent } from 'ol/events/Event';\r\n\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreLoadingLayerStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStoreStrategy } from './strategy';\r\n\r\n/**\r\n * This strategy loads a layer's features into it's store counterpart.\r\n * The layer -> store binding is a one-way binding. That means any OL feature\r\n * added to the layer will be added to the store but the opposite is false.\r\n *\r\n * Important: In it's current state, this strategy is to meant to be combined\r\n * with a standard Loading strategy and it would probably cause recursion issues.\r\n */\r\nexport class FeatureStoreLoadingLayerStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's OL source changes\r\n   */\r\n  private stores$$ = new Map<FeatureStore, string>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingLayerStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for a store's  OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    this.onSourceChanges(store);\r\n    const olSource = store.layer.ol.getSource();\r\n    olSource.on('change', (event: OlEvent) => {\r\n      this.onSourceChanges(store);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop watching for a store's OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const key = this.stores$$.get(store);\r\n    if (key !== undefined) {\r\n      unByKey(key);\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for OL source changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, string]) => {\r\n      unByKey(entries[1]);\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features from an OL source into a  store or clear the store if the source is empty\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onSourceChanges(store: FeatureStore) {\r\n    const olFeatures = store.layer.ol.getSource().getFeatures();\r\n    if (olFeatures.length === 0) {\r\n      store.clear();\r\n    } else {\r\n      store.setStoreOlFeatures(olFeatures);\r\n    }\r\n  }\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  getEntityId,\r\n  EntityKey,\r\n  EntityStore\r\n} from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { FeatureMotion } from './feature.enums';\r\nimport { Feature, FeatureStoreOptions } from './feature.interfaces';\r\nimport { featureFromOl, featureToOl, moveToOlFeatures } from './feature.utils';\r\nimport { FeatureStoreStrategy } from './strategies/strategy';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * features and the map layer to display them on. Synchronization\r\n * between the store and the layer is handled by strategies.\r\n */\r\nexport class FeatureStore<T extends Feature = Feature> extends EntityStore<T> {\r\n\r\n  /**\r\n   * Feature store strategies responsible of synchronizing the store\r\n   * and the layer\r\n   */\r\n  strategies: FeatureStoreStrategy[] = [];\r\n\r\n  /**\r\n   * Vector layer to display the features on\r\n   */\r\n  layer: VectorLayer;\r\n\r\n  /**\r\n   * The map the layer is bound to\r\n   */\r\n  readonly map: IgoMap;\r\n\r\n  /**\r\n   * The layer's data source\r\n   */\r\n  get source(): FeatureDataSource {\r\n    return this.layer ? this.layer.dataSource as FeatureDataSource : undefined;\r\n  }\r\n\r\n  constructor(entities: T[], options: FeatureStoreOptions) {\r\n    super(entities, options);\r\n    this.map = options.map;\r\n  }\r\n\r\n  /**\r\n   * Bind this store to a vector layer\r\n   * @param layer Vector layer\r\n   * @returns Feature store\r\n   */\r\n  bindLayer(layer: VectorLayer): FeatureStore {\r\n    this.layer = layer;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add a strategy to this store\r\n   * @param strategy Feature store strategy\r\n   * @returns Feature store\r\n   */\r\n  addStrategy(strategy: FeatureStoreStrategy, activate: boolean = false): FeatureStore {\r\n    const existingStrategy = this.strategies.find((_strategy: FeatureStoreStrategy) => {\r\n      return strategy.constructor === _strategy.constructor;\r\n    });\r\n    if (existingStrategy !== undefined) {\r\n      throw new Error('A strategy of this type already exists on that FeatureStore.');\r\n    }\r\n\r\n    this.strategies.push(strategy);\r\n    strategy.bindStore(this);\r\n\r\n    if (activate === true) {\r\n      strategy.activate();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove a strategy from this store\r\n   * @param strategy Feature store strategy\r\n   * @returns Feature store\r\n   */\r\n  removeStrategy(strategy: FeatureStoreStrategy): FeatureStore {\r\n    const index = this.strategies.indexOf(strategy);\r\n    if (index >= 0) {\r\n      this.strategies.splice(index, 1);\r\n      strategy.unbindStore(this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return strategies of a given type\r\n   * @param type Feature store strategy class\r\n   * @returns Strategies\r\n   */\r\n  getStrategyOfType(type: typeof FeatureStoreStrategy): FeatureStoreStrategy {\r\n    return this.strategies.find((strategy: FeatureStoreStrategy) => {\r\n      return strategy instanceof type;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate strategies of a given type\r\n   * @param type Feature store strategy class\r\n   */\r\n  activateStrategyOfType(type: typeof FeatureStoreStrategy) {\r\n    const strategy = this.getStrategyOfType(type);\r\n    if (strategy !== undefined) {\r\n      strategy.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate strategies of a given type\r\n   * @param type Feature store strategy class\r\n   */\r\n  deactivateStrategyOfType(type: typeof FeatureStoreStrategy) {\r\n    const strategy = this.getStrategyOfType(type);\r\n    if (strategy !== undefined) {\r\n      strategy.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible. Strategies\r\n   * make extensive use of that method.\r\n   * @param features Features\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  setLayerFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number,\r\n    getId?: (Feature) => EntityKey\r\n  ) {\r\n    getId = getId ? getId : getEntityId;\r\n    this.checkLayer();\r\n\r\n    const olFeatures = features\r\n      .map((feature: Feature) => featureToOl(feature, this.map.projection, getId));\r\n    this.setLayerOlFeatures(olFeatures, motion, viewScale, areaRatio);\r\n  }\r\n\r\n  /**\r\n   * Set the store's features from an array of OL features.\r\n   * @param olFeatures Ol features\r\n   */\r\n  setStoreOlFeatures(olFeatures: OlFeature[]) {\r\n    this.checkLayer();\r\n\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n      return featureFromOl(olFeature, this.layer.map.projection);\r\n    });\r\n    this.load(features as T[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the layer\r\n   */\r\n  clearLayer() {\r\n    this.checkLayer();\r\n    this.source.ol.clear();\r\n  }\r\n\r\n  /**\r\n   * Check wether a layer is bound or not and throw an error if not.\r\n   */\r\n  private checkLayer() {\r\n    if (this.layer === undefined) {\r\n      throw new Error('This FeatureStore is not bound to a layer.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible.\r\n   * @param features Openlayers feature objects\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  private setLayerOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number\r\n  ) {\r\n    const olFeaturesMap = new Map();\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      olFeaturesMap.set(olFeature.getId(), olFeature);\r\n    });\r\n\r\n    const olFeaturesToRemove = [];\r\n    this.source.ol.forEachFeature((olFeature: OlFeature) => {\r\n      const newOlFeature = olFeaturesMap.get(olFeature.getId());\r\n      if (newOlFeature === undefined) {\r\n        olFeaturesToRemove.push(olFeature);\r\n      } else if (newOlFeature.get('_entityRevision') !== olFeature.get('_entityRevision')) {\r\n        olFeaturesToRemove.push(olFeature);\r\n      } else {\r\n        olFeaturesMap.delete(newOlFeature.getId());\r\n      }\r\n    });\r\n\r\n    const olFeaturesToAddIds = Array.from(olFeaturesMap.keys());\r\n    const olFeaturesToAdd = olFeatures.filter((olFeature: OlFeature) => {\r\n      return olFeaturesToAddIds.indexOf(olFeature.getId()) >= 0;\r\n    });\r\n\r\n    if (olFeaturesToRemove.length > 0) {\r\n      this.removeOlFeaturesFromLayer(olFeaturesToRemove);\r\n    }\r\n    if (olFeaturesToAdd.length > 0) {\r\n      this.addOlFeaturesToLayer(olFeaturesToAdd);\r\n    }\r\n\r\n    if (olFeaturesToAdd.length > 0) {\r\n      // If features are added, do a motion toward the newly added features\r\n      moveToOlFeatures(this.map, olFeaturesToAdd, motion, viewScale, areaRatio);\r\n    } else if (olFeatures.length > 0) {\r\n      // Else, do a motion toward all the features\r\n      moveToOlFeatures(this.map, olFeatures, motion, viewScale, areaRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add features to the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private addOlFeaturesToLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n    });\r\n    this.source.ol.addFeatures(olFeatures);\r\n  }\r\n\r\n  /**\r\n   * Remove features from the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private removeOlFeaturesFromLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      this.source.ol.removeFeature(olFeature);\r\n    });\r\n  }\r\n\r\n}\r\n","import OlFeature from 'ol/Feature';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { DragBoxEvent as OlDragBoxEvent } from 'ol/interaction/DragBox';\r\nimport { ListenerFunction } from 'ol/events';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subscription, combineLatest } from 'rxjs';\r\nimport { map, debounceTime, skip } from 'rxjs/operators';\r\n\r\nimport { EntityKey, EntityRecord } from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../../datasource';\r\nimport { VectorLayer } from '../../../layer';\r\nimport { IgoMap, ctrlKeyDown } from '../../../map';\r\n\r\nimport { Feature, FeatureStoreSelectionStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreStrategy } from './strategy';\r\nimport { FeatureMotion } from '../feature.enums';\r\n\r\nclass OlDragSelectInteraction extends OlDragBoxInteraction {\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n}\r\n\r\n/**\r\n * This strategy synchronizes a store and a layer selected entities.\r\n * The store <-> layer binding is a two-way binding.\r\n *\r\n * In many cases, a single strategy bound to multiple stores\r\n * will yield better results that multiple strategies with each their\r\n * own store. In the latter scenario, a click on overlapping features\r\n * would trigger the strategy of each layer and they would cancel\r\n * each other as well as move the map view around needlessly.\r\n */\r\nexport class FeatureStoreSelectionStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Listener to the map click event that allows selecting a feature\r\n   * by clicking on the map\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  private olDragSelectInteraction: OlDragSelectInteraction;\r\n\r\n  private olDragSelectInteractionEndKey: string;\r\n\r\n  /**\r\n   * A feature store that'll contain the selected features. It has it's own\r\n   * layer, shared by all the stores this staretgy is bound to.\r\n   */\r\n  private overlayStore: FeatureStore;\r\n\r\n  /**\r\n   * Subscription to all stores selected entities\r\n   */\r\n  private stores$$: Subscription;\r\n\r\n  /**\r\n   * The map the layers belong to\r\n   */\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: FeatureStoreSelectionStrategyOptions) {\r\n    super(options);\r\n    this.overlayStore = this.createOverlayStore();\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all entities, from all stores\r\n   */\r\n  unselectAll() {\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      store.state.updateAll({selected: false});\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.overlayStore.clear();\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer, setup the map click lsitener and\r\n   * start watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.addOverlayLayer();\r\n    this.listenToMapClick();\r\n    if (this.options.dragBox === true) {\r\n      this.addDragBoxInteraction();\r\n    }\r\n    this.watchAll();\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer, remove the map click lsitener and\r\n   * stop watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unlistenToMapClick();\r\n    this.removeDragBoxInteraction();\r\n    this.unwatchAll();\r\n    this.removeOverlayLayer();\r\n  }\r\n\r\n  /**\r\n   * Create a single observable of all the stores. With a single observable,\r\n   * features can be added all at once to the overlay layer and a single\r\n   * motion can be performed. Multiple observable would have\r\n   * a cancelling effect on each other.\r\n   */\r\n  private watchAll() {\r\n    this.unwatchAll();\r\n\r\n    const stores$ = this.stores.map((store: FeatureStore) => {\r\n      return store.stateView.manyBy$((record: EntityRecord<Feature>) => {\r\n        return record.state.selected === true;\r\n      }).pipe(\r\n        map((records: EntityRecord<Feature>[]) => records.map(record => record.entity))\r\n      );\r\n    });\r\n    this.stores$$ = combineLatest(...stores$)\r\n      .pipe(\r\n        debounceTime(25),\r\n        skip(1), // Skip intial selection\r\n        map((features: Array<Feature[]>) => features.reduce((a, b) => a.concat(b)))\r\n      ).subscribe((features: Feature[]) => this.onSelectFromStore(features));\r\n  }\r\n\r\n  /**\r\n   * Stop watching for selection in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    if (this.stores$$ !== undefined) {\r\n      this.stores$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a 'singleclick' listener to the map that'll allow selecting\r\n   * features by clicking on the map. The selection will be performed\r\n   * only on the layers bound to this strategy.\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on('singleclick', (event: OlMapBrowserPointerEvent) => {\r\n      this.onMapClick(event);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the map click listener\r\n   */\r\n  private unlistenToMapClick() {\r\n    if (this.mapClickListener !== undefined) {\r\n      this.map.ol.un(\r\n        this.mapClickListener.type,\r\n        this.mapClickListener.listener\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On map click, select feature at pixel\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onMapClick(event: OlMapBrowserPointerEvent) {\r\n    const exclusive = !ctrlKeyDown(event);\r\n    const reverse = !exclusive;\r\n    const olFeatures = event.map.getFeaturesAtPixel(event.pixel, {\r\n      hitTolerance: this.options.hitTolerance || 0,\r\n      layerFilter: (olLayer) => {\r\n        const storeOlLayer = this.stores.find((store: FeatureStore) => {\r\n          return store.layer.ol === olLayer;\r\n        });\r\n        return storeOlLayer !== undefined;\r\n      }\r\n    });\r\n    this.onSelectFromMap(olFeatures, exclusive, reverse);\r\n  }\r\n\r\n  /**\r\n   * Add a drag box interaction and, on drag box end, select features\r\n   */\r\n  private addDragBoxInteraction() {\r\n    let olDragSelectInteraction;\r\n    const olInteractions = this.map.ol.getInteractions().getArray();\r\n\r\n    // There can only be one dragbox interaction, so find the current one, if any\r\n    // Don't keep a reference to the current dragbox because we don't want\r\n    // to remove it when this startegy is deactivated\r\n    for (const olInteraction of olInteractions) {\r\n      if (olInteraction instanceof OlDragSelectInteraction) {\r\n        olDragSelectInteraction = olInteraction;\r\n        break;\r\n      }\r\n    }\r\n    // If no drag box interaction is found, create a new one and add it to the map\r\n    if (olDragSelectInteraction === undefined) {\r\n      olDragSelectInteraction = new OlDragSelectInteraction({\r\n        condition: ctrlKeyDown\r\n      });\r\n      this.map.ol.addInteraction(olDragSelectInteraction);\r\n      this.olDragSelectInteraction = olDragSelectInteraction;\r\n    }\r\n\r\n    this.olDragSelectInteractionEndKey = olDragSelectInteraction.on(\r\n      'boxend',\r\n      (event: OlMapBrowserPointerEvent) => this.onDragBoxEnd(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove drag box interaction\r\n   */\r\n  private removeDragBoxInteraction() {\r\n    if (this.olDragSelectInteractionEndKey !== undefined) {\r\n      unByKey(this.olDragSelectInteractionEndKey);\r\n    }\r\n    if (this.olDragSelectInteraction !== undefined) {\r\n      this.map.ol.removeInteraction(this.olDragSelectInteraction);\r\n    }\r\n    this.olDragSelectInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * On dragbox end, select features in drag box\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onDragBoxEnd(event: OlDragBoxEvent) {\r\n    const exclusive = !ctrlKeyDown(event.mapBrowserEvent);\r\n    const extent = event.target.getGeometry().getExtent();\r\n    const olFeatures = this.stores.reduce((acc: OlFeature[], store: FeatureStore) => {\r\n      const olSource = store.layer.ol.getSource();\r\n      acc.push(...olSource.getFeaturesInExtent(extent));\r\n      return acc;\r\n    }, []);\r\n    this.onSelectFromMap(olFeatures, exclusive, false);\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the store, add\r\n   * them to this startegy's overlay layer (select on map)\r\n   * @param features Store features\r\n   */\r\n  private onSelectFromStore(features: Feature[]) {\r\n    const motion = this.options ? this.options.motion : undefined;\r\n    const olOverlayFeatures = this.overlayStore.layer.ol.getSource().getFeatures();\r\n    const overlayFeaturesKeys = olOverlayFeatures.map((olFeature: OlFeature) => olFeature.getId());\r\n    const featuresKeys = features.map(this.overlayStore.getKey);\r\n    const doMotion = overlayFeaturesKeys.length !== featuresKeys.length ||\r\n      !overlayFeaturesKeys.every((key: EntityKey) => featuresKeys.indexOf(key) >= 0);\r\n\r\n    this.overlayStore.setLayerFeatures(\r\n      features,\r\n      doMotion ? motion : FeatureMotion.None,\r\n      this.options.viewScale,\r\n      this.options.areaRatio,\r\n      this.options.getFeatureId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the map, also select them\r\n   * in their store.\r\n   * @param olFeatures OL feature objects\r\n   */\r\n  private onSelectFromMap(olFeatures: OlFeature[], exclusive: boolean, reverse: boolean) {\r\n    const groupedFeatures = this.groupFeaturesByStore(olFeatures);\r\n\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      const features = groupedFeatures.get(store);\r\n      if (features === undefined && exclusive === true) {\r\n        this.unselectAllFeaturesFromStore(store);\r\n      } else if (features === undefined && exclusive === false) {\r\n        // Do nothing\r\n      } else {\r\n        this.selectFeaturesFromStore(store, features, exclusive, reverse);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select features in store\r\n   * @param store: Feature store\r\n   * @param features Features\r\n   */\r\n  private selectFeaturesFromStore(store: FeatureStore, features: Feature[], exclusive: boolean, reverse: boolean) {\r\n    if (reverse === true) {\r\n      store.state.reverseMany(features, ['selected']);\r\n    } else {\r\n      store.state.updateMany(features, {selected: true}, exclusive);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all features from store\r\n   * @param store: Feature store\r\n   */\r\n  private unselectAllFeaturesFromStore(store: FeatureStore) {\r\n    store.state.updateAll({selected: false});\r\n  }\r\n\r\n  /**\r\n   * This method returns a store -> features mapping from a list\r\n   * of OL selected features. OL features keep a reference to the store\r\n   * they are from.\r\n   * @param olFeatures: OL feature objects\r\n   * @returns Store -> features mapping\r\n   */\r\n  private groupFeaturesByStore(olFeatures: OlFeature[]): Map<FeatureStore, Feature[]> {\r\n    const groupedFeatures = new Map<FeatureStore, Feature[]>();\r\n    if (olFeatures === null || olFeatures === undefined) {\r\n      return groupedFeatures;\r\n    }\r\n\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      const store = olFeature.get('_featureStore');\r\n      if (store === undefined) { return; }\r\n\r\n      let features = groupedFeatures.get(store);\r\n      if (features === undefined) {\r\n        features = [];\r\n        groupedFeatures.set(store, features);\r\n      }\r\n\r\n      const feature = store.get(olFeature.getId());\r\n      if (feature !== undefined) {\r\n        features.push(feature);\r\n      }\r\n    });\r\n\r\n    return groupedFeatures;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay store\r\n   */\r\n  private createOverlayStore(): FeatureStore {\r\n    const overlayLayer = this.options.layer\r\n      ? this.options.layer\r\n      : this.createOverlayLayer();\r\n    return new FeatureStore([], {map: this.map}).bindLayer(overlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay layer\r\n   */\r\n  private createOverlayLayer(): VectorLayer {\r\n    return new VectorLayer({\r\n      zIndex: 300,\r\n      source: new FeatureDataSource(),\r\n      style: undefined,\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay store's layer to the map to display the selected\r\n   * features.\r\n   */\r\n  private addOverlayLayer() {\r\n    if (this.overlayStore.layer.map === undefined) {\r\n      this.map.addLayer(this.overlayStore.layer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer from the map\r\n   */\r\n  private removeOverlayLayer() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.map.removeLayer(this.overlayStore.layer);\r\n  }\r\n}\r\n","import * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport OlLayer from 'ol/layer/Layer';\r\n\r\nimport {\r\n  EntityKey,\r\n  getEntityId,\r\n  getEntityTitle,\r\n  getEntityRevision,\r\n  getEntityProperty\r\n} from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { VectorLayer } from '../../layer';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { FEATURE, FeatureMotion } from './feature.enums';\r\nimport { Feature } from './feature.interfaces';\r\nimport { FeatureStore } from './store';\r\nimport {\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from './strategies';\r\n\r\n/**\r\n * Create an Openlayers feature object out of a feature definition.\r\n * The output object has a reference to the feature id.\r\n * @param feature Feature definition\r\n * @param projectionOut Feature object projection\r\n * @returns OpenLayers feature object\r\n */\r\nexport function featureToOl(\r\n  feature: Feature,\r\n  projectionOut: string,\r\n  getId?: (Feature) => EntityKey\r\n): OlFeature {\r\n  getId = getId ? getId : getEntityId;\r\n\r\n  const olFormat = new OlFormatGeoJSON();\r\n  const olFeature = olFormat.readFeature(feature, {\r\n    dataProjection: feature.projection,\r\n    featureProjection: projectionOut\r\n  });\r\n\r\n  olFeature.setId(getId(feature));\r\n\r\n  const title = getEntityTitle(feature);\r\n  if (title !== undefined) {\r\n    olFeature.set('_title', title, true);\r\n  }\r\n\r\n  if (feature.extent !== undefined) {\r\n    olFeature.set('_extent', feature.extent, true);\r\n  }\r\n\r\n  if (feature.projection !== undefined) {\r\n    olFeature.set('_projection', feature.projection, true);\r\n  }\r\n\r\n  if (feature.extent !== undefined) {\r\n    olFeature.set('_extent', feature.extent, true);\r\n  }\r\n\r\n  const mapTitle = getEntityProperty(feature, 'meta.mapTitle');\r\n  if (mapTitle !== undefined) {\r\n    olFeature.set('_mapTitle', mapTitle, true);\r\n  }\r\n\r\n  olFeature.set('_entityRevision', getEntityRevision(feature), true);\r\n\r\n  return olFeature;\r\n}\r\n\r\n/**\r\n * Create a feature object out of an OL feature\r\n * The output object has a reference to the feature id.\r\n * @param olFeature OL Feature\r\n * @param projectionIn OL feature projection\r\n * @param projectionOut Feature projection\r\n * @returns Feature\r\n */\r\nexport function featureFromOl(\r\n  olFeature: OlFeature,\r\n  projectionIn: string,\r\n  olLayer?: OlLayer,\r\n  projectionOut = 'EPSG:4326'\r\n): Feature {\r\n  let title;\r\n  let typeSource;\r\n  const olFormat = new OlFormatGeoJSON();\r\n\r\n  const keys = olFeature.getKeys().filter((key: string) => {\r\n    return !key.startsWith('_') && key !== 'geometry';\r\n  });\r\n  const properties = keys.reduce((acc: object, key: string) => {\r\n    acc[key] = olFeature.get(key);\r\n    return acc;\r\n  }, {});\r\n\r\n  const geometry = olFormat.writeGeometryObject(olFeature.getGeometry(), {\r\n    dataProjection: projectionOut,\r\n    featureProjection: projectionIn\r\n  });\r\n\r\n  if (olLayer) {\r\n    title = olLayer.get('title');\r\n    typeSource = olLayer.get('sourceOptions').type;\r\n  } else {\r\n    title = olFeature.get('_title');\r\n  }\r\n\r\n  const mapTitle = olFeature.get('_mapTitle');\r\n  const id = olFeature.getId();\r\n\r\n  return {\r\n    type: FEATURE,\r\n    projection: projectionOut,\r\n    extent: olFeature.get('_extent'),\r\n    meta: {\r\n      id,\r\n      title: title ? title : (mapTitle ? mapTitle : id),\r\n      mapTitle,\r\n      typeSource,\r\n      revision: olFeature.getRevision()\r\n    },\r\n    properties,\r\n    geometry\r\n  };\r\n}\r\n\r\n/**\r\n * Compute an OL feature extent in it's map projection\r\n * @param map Map\r\n * @param olFeature OL feature\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeatureExtent(\r\n  map: IgoMap,\r\n  olFeature: OlFeature\r\n): [number, number, number, number] {\r\n  let olExtent = olextent.createEmpty();\r\n\r\n  const olFeatureExtent = olFeature.get('_extent');\r\n  const olFeatureProjection = olFeature.get('_projection');\r\n  if (olFeatureExtent !== undefined && olFeatureProjection !== undefined) {\r\n    olExtent = olproj.transformExtent(\r\n      olFeatureExtent,\r\n      olFeatureProjection,\r\n      map.projection\r\n    );\r\n  } else {\r\n    const olGeometry = olFeature.getGeometry();\r\n    if (olGeometry !== null) {\r\n      olExtent = olGeometry.getExtent();\r\n    }\r\n  }\r\n\r\n  return olExtent;\r\n}\r\n\r\n/**\r\n * Compute a multiple OL features extent in their map projection\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeaturesExtent(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[]\r\n): [number, number, number, number] {\r\n  const extent = olextent.createEmpty();\r\n\r\n  olFeatures.forEach((olFeature: OlFeature) => {\r\n    const featureExtent = computeOlFeatureExtent(map, olFeature);\r\n    olextent.extend(extent, featureExtent);\r\n  });\r\n\r\n  return extent;\r\n}\r\n\r\n/**\r\n * Scale an extent.\r\n * @param extent Extent\r\n * @param Scaling factors for top, right, bottom and left directions, in that order\r\n * @returns Scaled extent\r\n */\r\nexport function scaleExtent(\r\n  extent: [number, number, number, number],\r\n  scale: [number, number, number, number]\r\n): [number, number, number, number] {\r\n  const [width, height] = olextent.getSize(extent);\r\n  return [\r\n    scale[3] ? extent[0] - width * scale[3] : extent[0],\r\n    scale[2] ? extent[1] - height * scale[2] : extent[1],\r\n    scale[1] ? extent[2] + width * scale[1] : extent[2],\r\n    scale[0] ? extent[3] + height * scale[0] : extent[3]\r\n  ];\r\n}\r\n\r\n/**\r\n * Return true if features are out of view.\r\n * If features are too close to the edge, they are considered out of view.\r\n * We define the edge as 5% of the extent size.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @returns Return true if features are out of view\r\n */\r\nexport function featuresAreOutOfView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number]\r\n) {\r\n  const mapExtent = map.getExtent();\r\n  const edgeRatio = 0.05;\r\n  const scale = [-1, -1, -1, -1].map(x => x * edgeRatio);\r\n  const viewExtent = scaleExtent(mapExtent, scale as [number, number, number, number]);\r\n\r\n  return !olextent.containsExtent(viewExtent, featuresExtent);\r\n}\r\n\r\n/**\r\n * Return true if features are too deep into the view. This results\r\n * in features being too small.\r\n * Features are considered too small if their extent occupies less than\r\n * 1% of the map extent.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @param areaRatio The features extent to view extent acceptable ratio\r\n * @returns Return true if features are too deep in the view\r\n */\r\nexport function featuresAreTooDeepInView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  // An area ratio of 0.004 means that the feature extent's width and height\r\n  // should be about 1/16 of the map extent's width and height\r\n  areaRatio = areaRatio ? areaRatio : 0.004;\r\n  const mapExtent = map.getExtent();\r\n  const mapExtentArea = olextent.getArea(mapExtent);\r\n  const featuresExtentArea = olextent.getArea(featuresExtent);\r\n\r\n  return featuresExtentArea / mapExtentArea < areaRatio;\r\n}\r\n\r\n/**\r\n * Fit view to include the features extent.\r\n * By default, this method will let the features occupy about 50% of the viewport.\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @param motion To motion to the new map view\r\n * @param scale If this is defined, the original view will be scaled\r\n *  by that factor before any logic is applied.\r\n */\r\nexport function moveToOlFeatures(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[],\r\n  motion: FeatureMotion = FeatureMotion.Default,\r\n  scale?: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  const featuresExtent = computeOlFeaturesExtent(map, olFeatures);\r\n  let viewExtent = featuresExtent;\r\n  if (scale !== undefined) {\r\n    viewExtent = scaleExtent(viewExtent, scale);\r\n  }\r\n\r\n  if (motion === FeatureMotion.Zoom) {\r\n    map.viewController.zoomToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Move) {\r\n    map.viewController.moveToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Default) {\r\n    if (\r\n      featuresAreOutOfView(map, featuresExtent) ||\r\n      featuresAreTooDeepInView(map, featuresExtent, areaRatio)\r\n    ) {\r\n      map.viewController.zoomToExtent(viewExtent);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Hide an OL feature\r\n * @param olFeature OL feature\r\n */\r\nexport function hideOlFeature(olFeature: OlFeature) {\r\n  olFeature.setStyle(new olstyle.Style({}));\r\n}\r\n\r\n/**\r\n * Try to bind a layer to a store if none is bound already.\r\n * The layer will also be added to the store's map.\r\n * If no layer is given to that function, a basic one will be created.\r\n * @param store The store to bind the layer\r\n * @param layer An optional VectorLayer\r\n */\r\nexport function tryBindStoreLayer(store: FeatureStore, layer?: VectorLayer) {\r\n  if (store.layer !== undefined) {\r\n    if (store.layer.map === undefined) {\r\n      store.map.addLayer(store.layer);\r\n    }\r\n    return;\r\n  }\r\n\r\n  layer = layer ? layer : new VectorLayer({\r\n    source: new FeatureDataSource()\r\n  });\r\n  store.bindLayer(layer);\r\n  if (store.layer.map === undefined) {\r\n    store.map.addLayer(store.layer);\r\n  }\r\n}\r\n\r\n/**\r\n * Try to add a loading strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the loading strategy\r\n * @param strategy An optional loading strategy\r\n */\r\nexport function tryAddLoadingStrategy(store: FeatureStore, strategy?: FeatureStoreLoadingStrategy) {\r\n  if (store.getStrategyOfType(FeatureStoreLoadingStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    return;\r\n  }\r\n\r\n  strategy = strategy ? strategy : new FeatureStoreLoadingStrategy({});\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n\r\n/**\r\n * Try to add a selection strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the selection strategy\r\n * @param [strategy] An optional selection strategy\r\n */\r\nexport function tryAddSelectionStrategy(store: FeatureStore, strategy?: FeatureStoreSelectionStrategy) {\r\n  if (store.getStrategyOfType(FeatureStoreSelectionStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n    return;\r\n  }\r\n  strategy = strategy ? strategy : new FeatureStoreSelectionStrategy({\r\n    map: store.map\r\n  });\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\n\r\n/**\r\n * Create an overlay layer and it's source\r\n * @returns Overlay layer\r\n */\r\nexport function createOverlayLayer(): VectorLayer {\r\n  const overlayDataSource = new FeatureDataSource();\r\n  return new VectorLayer({\r\n    title: 'Overlay',\r\n    zIndex: 300,\r\n    source: overlayDataSource,\r\n    style: createOverlayLayerStyle()\r\n  });\r\n}\r\n\r\n/**\r\n * Create an overlay style with markers for points and a basic stroke/fill\r\n * combination for lines and polygons\r\n * @returns Style function\r\n */\r\nfunction createOverlayLayerStyle(): (olFeature: OlFeature) => olstyle.Style {\r\n  const defaultStyle = createOverlayDefaultStyle();\r\n  const markerStyle = createOverlayMarkerStyle();\r\n  const bufferStyle = createBufferStyle();\r\n  let style;\r\n\r\n  return (olFeature: OlFeature) => {\r\n    console.log(olFeature.getId());\r\n    if (olFeature.getId() === 'bufferFeature') {\r\n      style = createBufferStyle(olFeature.get('bufferStroke'), 2, olFeature.get('bufferFill'), olFeature.get('bufferText'));\r\n      console.log(style);\r\n    } else {\r\n      const geometryType = olFeature.getGeometry().getType();\r\n      style = geometryType === 'Point' ? markerStyle : defaultStyle;\r\n      style.getText().setText(olFeature.get('_mapTitle'));\r\n      return style;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Create a basic style for lines and polygons\r\n * @returns Style\r\n */\r\nfunction createOverlayDefaultStyle(): olstyle.Style {\r\n  const stroke = new olstyle.Stroke({\r\n    width: 2,\r\n    color: [0, 161, 222, 1]\r\n  });\r\n\r\n  const fill = new olstyle.Stroke({\r\n    color: [0, 161, 222, 0.15]\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke,\r\n    fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke,\r\n      fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a marker style for points\r\n * @returns Style\r\n */\r\nexport function createOverlayMarkerStyle(color = 'blue'): olstyle.Style {\r\n  let iconColor;\r\n  switch (color) {\r\n    case 'blue':\r\n    case 'red':\r\n    case 'yellow':\r\n    case 'green':\r\n      iconColor = color;\r\n      break;\r\n    default:\r\n      iconColor = 'blue';\r\n      break;\r\n  }\r\n  return new olstyle.Style({\r\n    image: new olstyle.Icon({\r\n      src: './assets/igo2/geo/icons/place_' + iconColor + '_36px.svg',\r\n      imgSize: [36, 36], // for ie\r\n      anchor: [0.5, 1]\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n\r\nfunction createBufferStyle(\r\n  strokeRGBA: [number, number, number, number] = [0, 161, 222, 1],\r\n  strokeWidth: number = 2,\r\n  fillRGBA: [number, number, number, number] = [0, 161, 222, 0.15],\r\n  text?\r\n): olstyle.Style {\r\n  const stroke = new olstyle.Stroke({\r\n    color: strokeRGBA,\r\n    width: strokeWidth\r\n  });\r\n\r\n  const fill = new olstyle.Fill({\r\n    color: fillRGBA\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke: stroke,\r\n    fill: fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke: stroke,\r\n      fill: fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      text: text,\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 })\r\n    })\r\n  });\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  Feature,\r\n  FeatureMotion,\r\n  featureToOl,\r\n  moveToOlFeatures\r\n} from '../../feature';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { createOverlayLayer } from './overlay.utils';\r\n\r\n/**\r\n * This class is simply a shortcut for adding features to a map.\r\n * It does nothing more than a standard layer but it's shipped with\r\n * a defautl style based on the geometry type of the features it contains.\r\n * @todo Enhance that by using a FeatureStore and strategies.\r\n */\r\nexport class Overlay {\r\n  /**\r\n   * The map to add the layer to\r\n   */\r\n  private map: IgoMap;\r\n\r\n  /**\r\n   * Overlay layer\r\n   */\r\n  private layer: VectorLayer;\r\n\r\n  /**\r\n   * Overlay layer's data source\r\n   */\r\n  get dataSource(): FeatureDataSource {\r\n    return this.layer.dataSource as FeatureDataSource;\r\n  }\r\n\r\n  constructor(map?: IgoMap) {\r\n    this.layer = createOverlayLayer();\r\n    this.setMap(map);\r\n  }\r\n\r\n  /**\r\n   * Bind this to a map and add the overlay layer to that map\r\n   * @param map Map\r\n   */\r\n  setMap(map: IgoMap) {\r\n    if (map === undefined) {\r\n      if (this.map !== undefined) {\r\n        this.map.ol.removeLayer(this.layer.ol);\r\n      }\r\n    } else {\r\n      map.ol.addLayer(this.layer.ol);\r\n    }\r\n    this.map = map;\r\n  }\r\n\r\n  /**\r\n   * Set the overlay features and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  setFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.clear();\r\n    this.addFeatures(features, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a feature to the  overlay and, optionally, move to it\r\n   * @param feature Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeature(feature: Feature, motion: FeatureMotion = FeatureMotion.Default) {\r\n    this.addFeatures([feature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add features to the  overlay and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    const olFeatures = [];\r\n    features.forEach((feature: Feature) => {\r\n      const olFeature = featureToOl(feature, this.map.projection);\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry === null) {\r\n        return;\r\n      }\r\n      olFeatures.push(olFeature);\r\n    });\r\n\r\n    this.addOlFeatures(olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a OpenLayers feature to the  overlay and, optionally, move to it\r\n   * @param olFeature OpenLayers Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeature(\r\n    olFeature: OlFeature,\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.addOlFeatures([olFeature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add OpenLayers features to the overlay and, optionally, move to them\r\n   * @param olFeatures OpenLayers Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.dataSource.ol.addFeatures(olFeatures);\r\n    moveToOlFeatures(this.map, olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay\r\n   */\r\n  clear() {\r\n    this.dataSource.ol.clear();\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { Watcher, SubjectStatus } from '@igo2/utils';\r\nimport { Layer } from '../../layer/shared/layers';\r\n\r\nexport class LayerWatcher extends Watcher {\r\n  private loaded = 0;\r\n  private loading = 0;\r\n  private layers: Layer[] = [];\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  watch() {}\r\n\r\n  unwatch() {\r\n    this.layers.forEach(layer => this.unwatchLayer(layer), this);\r\n  }\r\n\r\n  watchLayer(layer: Layer) {\r\n    if (layer.status$ === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.layers.push(layer);\r\n\r\n    const layer$$ = layer.status$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe(status => {\r\n        if (status === SubjectStatus.Working) {\r\n          this.loading += 1;\r\n        } else if (status === SubjectStatus.Done) {\r\n          this.loaded += 1;\r\n        }\r\n\r\n        if (this.loaded >= this.loading) {\r\n          this.loading = this.loaded = 0;\r\n          this.status = SubjectStatus.Done;\r\n        } else if (this.loading > 0) {\r\n          this.status = SubjectStatus.Working;\r\n        }\r\n      });\r\n\r\n    this.subscriptions.push(layer$$);\r\n  }\r\n\r\n  unwatchLayer(layer: Layer) {\r\n    const index = this.layers.indexOf(layer);\r\n    if (index >= 0) {\r\n      const status = (layer as any).watcher.status;\r\n      if (\r\n        [SubjectStatus.Working, SubjectStatus.Waiting].indexOf(status) !== -1\r\n      ) {\r\n        this.loaded += 1;\r\n      }\r\n      this.subscriptions[index].unsubscribe();\r\n      this.subscriptions.splice(index, 1);\r\n      this.layers.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","export enum MapViewAction {\r\n  Move,\r\n  Zoom\r\n}\r\n","import * as olproj from 'ol/proj';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { MAC } from 'ol/has';\r\n\r\nimport { MapViewState } from './map.interface';\r\n\r\n/**\r\n * This method extracts a [lon, lat] tuple from a string.\r\n * @param str Any string\r\n * @returns A [lon, lat] tuple if one is found in the string\r\n * @todo Reproject coordinates\r\n */\r\nexport function stringToLonLat(str: string): [number, number] | undefined {\r\n  const coordPattern =  '[-+]?[\\\\d]{1,8}(\\\\.)?(\\\\d+)?';\r\n  const projectionPattern = '(;[\\\\d]{4,5})';\r\n  const lonLatPattern = `^${coordPattern},(\\\\s)*${coordPattern}${projectionPattern}?`;\r\n  const lonLatRegex = new RegExp(lonLatPattern, 'g');\r\n\r\n  if (!lonLatRegex.test(str)) {\r\n    return undefined;\r\n  }\r\n\r\n  let lonLatStr = str;\r\n  let projectionStr;\r\n\r\n  const projectionRegex = new RegExp(projectionPattern, 'g');\r\n  if (projectionRegex.test(str)) {\r\n    [lonLatStr, projectionStr] = str.split(';');\r\n  }\r\n\r\n  const [lonStr, latStr] = lonLatStr.split(',');\r\n  const lonLat = [parseFloat(lonStr), parseFloat(latStr)] as [number, number];\r\n\r\n  if (projectionStr !== undefined) {\r\n    // TODO Reproject coordinates\r\n  }\r\n\r\n  return lonLat;\r\n}\r\n\r\n/**\r\n * Return true of two view states are equal.\r\n * @param state1 View state\r\n * @param state2 View state\r\n * @returns True if the view states are equal\r\n */\r\nexport function viewStatesAreEqual(state1: MapViewState, state2: MapViewState): boolean {\r\n  if (state1 === undefined || state2 === undefined) {\r\n    return false;\r\n  }\r\n\r\n  const tolerance = 1 / 10000;\r\n  return state1.zoom === state2.zoom &&\r\n    Math.trunc(state1.center[0] / tolerance) === Math.trunc(state2.center[0] / tolerance) &&\r\n    Math.trunc(state1.center[1] / tolerance) === Math.trunc(state2.center[1] / tolerance);\r\n}\r\n\r\n/**\r\n * Format the scale to a human readable text\r\n * @param Scale of the map\r\n * @returns Human readable scale text\r\n */\r\nexport function formatScale(scale) {\r\n  scale = Math.round(scale);\r\n  if (scale < 10000) { return scale + ''; }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  if (scale < 1000) { return scale + 'K'; }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  return scale + 'M';\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param scale Scale denom\r\n * @param dpi DPI\r\n * @returns Resolution\r\n */\r\nexport function getResolutionFromScale(scale: number, dpi: number = 72): number {\r\n  return scale / (39.37 * dpi);\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param Scale denom\r\n * @returns Resolution\r\n */\r\nexport function getScaleFromResolution(resolution: number, unit: string = 'm', dpi: number = 72): number {\r\n  return resolution * olproj.METERS_PER_UNIT[unit] * 39.37 * dpi;\r\n}\r\n\r\n/**\r\n * Returns true if the CTRL key is pushed during an Ol MapBrowserPointerEvent\r\n * @param event OL MapBrowserPointerEvent\r\n * @returns Whether the CTRL key is pushed\r\n */\r\nexport function ctrlKeyDown(event: OlMapBrowserPointerEvent): boolean {\r\n  const originalEvent = event.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\n/**\r\n * Base map controller\r\n */\r\nexport class MapController {\r\n\r\n  /**\r\n   * OL Map\r\n   */\r\n  protected olMap: OlMap;\r\n\r\n  /**\r\n   * Array of observer keys\r\n   */\r\n  protected observerKeys: string[] = [];\r\n\r\n  /**\r\n   * Return the OL map this controller is bound to\r\n   * @returns OL Map\r\n   */\r\n  getOlMap(): OlMap {\r\n    return this.olMap;\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap !== undefined && this.getOlMap() !== undefined) {\r\n      throw new Error('This controller is already bound to a map.');\r\n    }\r\n\r\n    if (olMap === undefined) {\r\n      this.teardownObservers();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    this.observerKeys.forEach((key: string) => unByKey(key));\r\n    this.observerKeys = [];\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlMapEvent from 'ol/MapEvent';\r\n\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport * as oleasing from 'ol/easing';\r\nimport * as olproj from 'ol/proj';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlView from 'ol/View';\r\n\r\nimport { MapViewAction } from '../map.enums';\r\nimport { MapExtent, MapViewState } from '../map.interface';\r\nimport { getScaleFromResolution, viewStatesAreEqual } from '../map.utils';\r\nimport { MapController } from './controller';\r\n\r\nexport interface MapViewControllerOptions {\r\n  stateHistory: boolean;\r\n}\r\n\r\n/**\r\n * Controller to handle map view interactions\r\n */\r\nexport class MapViewController extends MapController {\r\n\r\n  /**\r\n   * Observable of the current resolution\r\n   */\r\n  resolution$ = new BehaviorSubject<number>(undefined);\r\n\r\n  /**\r\n   * Observable of the current state\r\n   */\r\n  state$ = new BehaviorSubject<MapViewState>(undefined);\r\n\r\n  /**\r\n   * Extent stream\r\n   */\r\n  private extent$ = new Subject<{extent: MapExtent, action: MapViewAction}>();\r\n\r\n  /**\r\n   * Subscription to the movement stream\r\n   */\r\n  private extent$$: Subscription;\r\n\r\n  /**\r\n   * History of states\r\n   */\r\n  private states: MapViewState[] = [];\r\n\r\n  /**\r\n   * Current state index\r\n   */\r\n  private stateIndex: number = 0;\r\n\r\n  /**\r\n   * Whether the view controller should keep the view's state history\r\n   */\r\n  get stateHistory(): boolean {\r\n    return this.options ? this.options.stateHistory === true : false;\r\n  }\r\n\r\n  /**\r\n   * OL View\r\n   */\r\n  get olView(): OlView { return this.olMap.getView(); }\r\n\r\n  constructor(private options?: MapViewControllerOptions) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    super.setOlMap(olMap);\r\n    this.setupObservers();\r\n  }\r\n\r\n  /**\r\n   * Observe move moveend and subscribe to the extent stream\r\n   */\r\n  setupObservers() {\r\n    if (this.stateHistory === true) {\r\n      this.observerKeys.push(\r\n        this.olMap.on('moveend', (event: OlMapEvent) => this.onMoveEnd(event))\r\n      );\r\n    }\r\n\r\n    this.extent$$ = this.extent$\r\n      .pipe(debounceTime(25))\r\n      .subscribe((value: {extent: MapExtent, action: MapViewAction}) => {\r\n        this.setExtent(value.extent, value.action);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    super.teardownObservers();\r\n    if (this.extent$$ !== undefined) {\r\n      this.extent$$.unsubscribe();\r\n      this.extent$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the view's OL projection\r\n   * @returns OL projection\r\n   */\r\n  getOlProjection(): OlProjection {\r\n    return this.olView.getProjection();\r\n  }\r\n\r\n  /**\r\n   * Get the current map view center\r\n   * @param projection Output projection\r\n   * @returns Center\r\n   */\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    let center = this.olView.getCenter();\r\n    if (projection && center) {\r\n      center = olproj.transform(center, this.getOlProjection(), projection);\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * Get the current view extent\r\n   * @param projection Output projection\r\n   * @returns Extent\r\n   */\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    let extent = this.olView.calculateExtent(this.olMap.getSize());\r\n    if (projection && extent) {\r\n      extent = olproj.transformExtent(extent, this.getOlProjection(), projection);\r\n    }\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * Get the current scale\r\n   * @param dpi Dot per inches\r\n   * @returns View scale\r\n   */\r\n  getScale(dpi = 72) {\r\n    return getScaleFromResolution(\r\n      this.getResolution(),\r\n      this.getOlProjection().getUnits(),\r\n      dpi\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current resolution\r\n   * @returns Projection denominator\r\n   */\r\n  getResolution(): number {\r\n    return this.olView.getResolution();\r\n  }\r\n\r\n  /**\r\n   * Get the current zoom level\r\n   * @returns Zoom level\r\n   */\r\n  getZoom(): number {\r\n    return Math.round(this.olView.getZoom());\r\n  }\r\n\r\n  /**\r\n   * Zoom in\r\n   */\r\n  zoomIn() {\r\n    this.zoomTo(this.olView.getZoom() + 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom out\r\n   */\r\n  zoomOut() {\r\n    this.zoomTo(this.olView.getZoom() - 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom to specific zoom level\r\n   * @param zoom Zoom level\r\n   */\r\n  zoomTo(zoom: number) {\r\n    this.olView.animate({\r\n      zoom,\r\n      duration: 250,\r\n      easing: oleasing.easeOut\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Move to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to move to\r\n   */\r\n  moveToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({extent, action: MapViewAction.Move});\r\n  }\r\n\r\n  /**\r\n   * Zoom to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to zoom to\r\n   */\r\n  zoomToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({extent, action: MapViewAction.Zoom});\r\n  }\r\n\r\n  /**\r\n   * Return the current view rotation\r\n   * @returns Rotation angle in degrees\r\n   */\r\n  getRotation(): number {\r\n    return this.olView.getRotation();\r\n  }\r\n\r\n  /**\r\n   * Reset the view rotation to 0\r\n   */\r\n  resetRotation() {\r\n    this.olView.setRotation(0);\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a previous state\r\n   * @returns True if the view has a previous state\r\n   */\r\n  hasPreviousState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex > 0;\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a next state\r\n   * @returns True if the view has a next state\r\n   */\r\n  hasNextState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex < this.states.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Restore the previous view state\r\n   */\r\n  previousState() {\r\n    if (this.hasPreviousState()) {\r\n      this.setStateIndex(this.stateIndex - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore the next view state\r\n   */\r\n  nextState() {\r\n    if (this.hasNextState()) {\r\n      this.setStateIndex(this.stateIndex + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the state history\r\n   */\r\n  clearStateHistory() {\r\n    this.states = [];\r\n    this.stateIndex = 0;\r\n  }\r\n\r\n  /**\r\n   * Update the the view to it's intial state\r\n   */\r\n  setInitialState() {\r\n    if (this.states.length > 0) {\r\n      this.setStateIndex(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move to the extent retrieved from the stream\r\n   * @param extent Extent\r\n   * @param action Either zoom or move\r\n   */\r\n  private setExtent(extent: MapExtent, action: MapViewAction) {\r\n    const olView = this.olView;\r\n    if (action === MapViewAction.Zoom) {\r\n      olView.fit(extent, {maxZoom: 17});\r\n    } else if (action === MapViewAction.Move) {\r\n      olView.fit(extent, {maxZoom: olView.getZoom()});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the view state index\r\n   * @param index State index\r\n   */\r\n  private setStateIndex(index: number) {\r\n    this.stateIndex = index;\r\n    this.setState(this.states[index]);\r\n  }\r\n\r\n  /**\r\n   * Set the view state\r\n   * @param state View state\r\n   */\r\n  private setState(state: MapViewState) {\r\n    this.olView.animate({\r\n      resolution: state.resolution,\r\n      center: state.center,\r\n      duration: 0\r\n    });\r\n  }\r\n\r\n  /**\r\n   * On move end, get the view state and record it.\r\n   * @param event Map event\r\n   */\r\n  private onMoveEnd(event: OlMapEvent) {\r\n    const resolution = this.getResolution();\r\n    if (this.resolution$.value !== resolution) {\r\n      this.resolution$.next(resolution);\r\n    }\r\n\r\n    const state = {\r\n      resolution,\r\n      center: this.getCenter(),\r\n      zoom: this.getZoom()\r\n    };\r\n\r\n    if (this.stateHistory === true) {\r\n      const stateIndex = this.stateIndex;\r\n      const stateAtIndex = this.states.length === 0 ? undefined : this.states[stateIndex];\r\n      if (!viewStatesAreEqual(state, stateAtIndex)) {\r\n        this.states = this.states.slice(0, stateIndex + 1).concat([state]);\r\n        this.stateIndex = this.states.length - 1;\r\n      }\r\n    }\r\n\r\n    this.state$.next(state);\r\n  }\r\n}\r\n","import olMap from 'ol/Map';\r\nimport olView from 'ol/View';\r\nimport olFeature from 'ol/Feature';\r\nimport olGeolocation from 'ol/Geolocation';\r\nimport olControlAttribution from 'ol/control/Attribution';\r\nimport olControlScaleLine from 'ol/control/ScaleLine';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport olCircle from 'ol/geom/Circle';\r\nimport * as olstyle from 'ol/style';\r\n\r\nimport proj4 from 'proj4';\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\n\r\nimport { Layer, VectorLayer } from '../../layer/shared/layers';\r\nimport { Overlay } from '../../overlay/shared/overlay';\r\n\r\nimport { LayerWatcher } from '../utils/layer-watcher';\r\nimport {\r\n  MapViewOptions,\r\n  MapOptions,\r\n  MapAttributionOptions,\r\n  MapScaleLineOptions,\r\n  MapExtent\r\n} from './map.interface';\r\nimport { MapViewController } from './controllers/view';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\n\r\n// TODO: This class is messy. Clearly define it's scope and the map browser's.\r\n// Move some stuff into controllers.\r\nexport class IgoMap {\r\n  public ol: olMap;\r\n  public layers$ = new BehaviorSubject<Layer[]>([]);\r\n  public status$: Subject<SubjectStatus>;\r\n  public geolocation$ = new BehaviorSubject<olGeolocation>(undefined);\r\n  public geolocationFeature: olFeature;\r\n  public bufferGeom: olCircle;\r\n  public bufferFeature: olFeature;\r\n  public buffer: Overlay;\r\n  public overlay: Overlay;\r\n  public viewController: MapViewController;\r\n\r\n  public bufferStyle: olstyle.Style;\r\n  public bufferDataSource: FeatureDataSource;\r\n\r\n  private layerWatcher: LayerWatcher;\r\n  private geolocation: olGeolocation;\r\n  private geolocation$$: Subscription;\r\n\r\n  private options: MapOptions;\r\n  private defaultOptions: Partial<MapOptions> = {\r\n    controls: { attribution: false }\r\n  };\r\n\r\n  get layers(): Layer[] {\r\n    return this.layers$.value;\r\n  }\r\n\r\n  get projection(): string {\r\n    return this.viewController.getOlProjection().getCode();\r\n  }\r\n\r\n  constructor(options?: MapOptions) {\r\n    this.options = Object.assign({}, this.defaultOptions, options);\r\n    this.layerWatcher = new LayerWatcher();\r\n    this.status$ = this.layerWatcher.status$;\r\n    olproj4.register(proj4);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    const controls = [];\r\n    if (this.options.controls) {\r\n      if (this.options.controls.attribution) {\r\n        const attributionOpt = (this.options.controls.attribution === true\r\n          ? {}\r\n          : this.options.controls.attribution) as MapAttributionOptions;\r\n        controls.push(new olControlAttribution(attributionOpt));\r\n      }\r\n      if (this.options.controls.scaleLine) {\r\n        const scaleLineOpt = (this.options.controls.scaleLine === true\r\n          ? {}\r\n          : this.options.controls.scaleLine) as MapScaleLineOptions;\r\n        controls.push(new olControlScaleLine(scaleLineOpt));\r\n      }\r\n    }\r\n    let interactions = {};\r\n    if (this.options.interactions === false) {\r\n      interactions = {\r\n        altShiftDragRotate: false,\r\n        doubleClickZoom: false,\r\n        keyboard: false,\r\n        mouseWheelZoom: false,\r\n        shiftDragZoom: false,\r\n        dragPan: false,\r\n        pinchRotate: false,\r\n        pinchZoom: false\r\n      };\r\n    }\r\n\r\n    this.ol = new olMap({\r\n      interactions: olinteraction.defaults(interactions),\r\n      controls\r\n    });\r\n\r\n    this.setView(this.options.view || {});\r\n    this.viewController = new MapViewController({\r\n      stateHistory: true\r\n    });\r\n    this.viewController.setOlMap(this.ol);\r\n    this.overlay = new Overlay(this);\r\n    this.buffer = new Overlay(this);\r\n  }\r\n\r\n  setTarget(id: string) {\r\n    this.ol.setTarget(id);\r\n    if (id !== undefined) {\r\n      this.layerWatcher.subscribe(() => {}, null);\r\n    } else {\r\n      this.layerWatcher.unsubscribe();\r\n    }\r\n  }\r\n\r\n  updateView(options: MapViewOptions) {\r\n    const currentView = this.ol.getView();\r\n    const viewOptions = Object.assign(\r\n      {\r\n        zoom: currentView.getZoom()\r\n      },\r\n      currentView.getProperties()\r\n    );\r\n\r\n    this.setView(Object.assign(viewOptions, options));\r\n  }\r\n\r\n  /**\r\n   * Set the map view\r\n   * @param options Map view options\r\n   */\r\n  setView(options: MapViewOptions) {\r\n    if (this.viewController !== undefined) {\r\n      this.viewController.clearStateHistory();\r\n    }\r\n\r\n    const view = new olView(options);\r\n    this.ol.setView(view);\r\n\r\n    this.unsubscribeGeolocate();\r\n    if (options) {\r\n      if (options.center) {\r\n        const projection = view.getProjection().getCode();\r\n        const center = olproj.fromLonLat(options.center, projection);\r\n        view.setCenter(center);\r\n      }\r\n\r\n      if (options.geolocate) {\r\n        this.geolocate(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    return this.viewController.getCenter();\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    return this.viewController.getExtent();\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getZoom(): number {\r\n    return this.viewController.getZoom();\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (!baseLayer) {\r\n      return;\r\n    }\r\n\r\n    for (const bl of this.getBaseLayers()) {\r\n      bl.visible = false;\r\n    }\r\n\r\n    baseLayer.visible = true;\r\n  }\r\n\r\n  getBaseLayers(): Layer[] {\r\n    return this.layers.filter((layer: Layer) => layer.baseLayer === true);\r\n  }\r\n\r\n  getLayerById(id: string): Layer {\r\n    return this.layers.find((layer: Layer) => layer.id && layer.id === id);\r\n  }\r\n\r\n  getLayerByAlias(alias: string): Layer {\r\n    return this.layers.find((layer: Layer) => layer.alias && layer.alias === alias);\r\n  }\r\n\r\n  /**\r\n   * Add a single layer\r\n   * @param layer Layer to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayer(layer: Layer, push = true) {\r\n    this.addLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add many layers\r\n   * @param layers Layers to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayers(layers: Layer[], push = true) {\r\n    const addedLayers = layers\r\n      .map((layer: Layer) => this.doAddLayer(layer))\r\n      .filter((layer: Layer | undefined) => layer !== undefined);\r\n    this.setLayers([].concat(this.layers, addedLayers));\r\n  }\r\n\r\n  addBuffer(feature: olFeature) {\r\n    const geometry = feature.getGeometry();\r\n    if (geometry === null) {\r\n      return;\r\n    }\r\n\r\n    this.bufferDataSource.ol.addFeature(feature);\r\n  }\r\n\r\n  /**\r\n   * Remove a single layer\r\n   * @param layer Layer to remove\r\n   */\r\n  removeLayer(layer: Layer) {\r\n    this.removeLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove many layers\r\n   * @param layers Layers to remove\r\n   */\r\n  removeLayers(layers: Layer[]) {\r\n    const newLayers = this.layers$.value.slice(0);\r\n    const layersToRemove = [];\r\n    layers.forEach((layer: Layer) => {\r\n      const index = this.getLayerIndex(layer);\r\n      if (index >= 0) {\r\n        layersToRemove.push(layer);\r\n        newLayers.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    layersToRemove.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.setLayers(newLayers);\r\n  }\r\n\r\n  /**\r\n   * Remove all layers\r\n   */\r\n  removeAllLayers() {\r\n    this.layers.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.layers$.next([]);\r\n  }\r\n\r\n  raiseLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index > 0) {\r\n      this.moveLayer(layer, index, index - 1);\r\n    }\r\n  }\r\n\r\n  lowerLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index < this.layers.length - 1) {\r\n      this.moveLayer(layer, index, index + 1);\r\n    }\r\n  }\r\n\r\n  moveLayer(layer: Layer, from: number, to: number) {\r\n    const layerTo = this.layers[to];\r\n    const zIndexTo = layerTo.zIndex;\r\n    const zIndexFrom = layer.zIndex;\r\n\r\n    layer.zIndex = zIndexTo;\r\n    layerTo.zIndex = zIndexFrom;\r\n\r\n    this.layers[to] = layer;\r\n    this.layers[from] = layerTo;\r\n    this.layers$.next(this.layers.slice(0));\r\n  }\r\n\r\n  /**\r\n   * Add a layer to the OL map and start watching. If the layer is already\r\n   * added to this map, make it visible but don't add it one again.\r\n   * @param layer Layer\r\n   * @returns The layer added, if any\r\n   */\r\n  private doAddLayer(layer: Layer) {\r\n    if (layer.baseLayer && layer.visible) {\r\n      this.changeBaseLayer(layer);\r\n    }\r\n\r\n    const existingLayer = this.getLayerById(layer.id);\r\n    if (existingLayer !== undefined) {\r\n      existingLayer.visible = true;\r\n      return;\r\n    }\r\n\r\n    if (layer.zIndex === undefined || layer.zIndex === 0) {\r\n      const offset = layer.baseLayer ? 1 : 10;\r\n      layer.zIndex = this.layers.length + offset;\r\n    }\r\n\r\n    layer.setMap(this);\r\n    this.layerWatcher.watchLayer(layer);\r\n    this.ol.addLayer(layer.ol);\r\n\r\n    return layer;\r\n  }\r\n\r\n  /**\r\n   * Remove a layer from the OL map and stop watching\r\n   * @param layer Layer\r\n   */\r\n  private doRemoveLayer(layer: Layer) {\r\n    this.layerWatcher.unwatchLayer(layer);\r\n    this.ol.removeLayer(layer.ol);\r\n    layer.setMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Update the layers observable\r\n   * @param layers Layers\r\n   */\r\n  private setLayers(layers: Layer[]) {\r\n    this.layers$.next(this.sortLayersByZIndex(layers).slice(0));\r\n  }\r\n\r\n  /**\r\n   * Sort layers by descending zIndex\r\n   * @param layers Array of layers\r\n   * @returns The original array, sorted by zIndex\r\n   */\r\n  private sortLayersByZIndex(layers: Layer[]) {\r\n    // Sort by descending zIndex\r\n    return layers.sort((layer1: Layer, layer2: Layer) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  /**\r\n   * Get layer index in the map's inenr array of layers\r\n   * @param layer Layer\r\n   * @returns The layer index\r\n   */\r\n  private getLayerIndex(layer: Layer) {\r\n    return this.layers.findIndex((_layer: Layer) => _layer === layer);\r\n  }\r\n\r\n  // TODO: Create a GeolocationController with everything below\r\n  geolocate(track = false) {\r\n    let first = true;\r\n    if (this.geolocation$$) {\r\n      track = this.geolocation.getTracking();\r\n      this.unsubscribeGeolocate();\r\n    }\r\n    this.startGeolocation();\r\n\r\n    this.geolocation$$ = this.geolocation$.subscribe(geolocation => {\r\n      if (!geolocation) {\r\n        return;\r\n      }\r\n      const accuracy = geolocation.getAccuracy();\r\n      if (accuracy < 4140000) {\r\n        const geometry = geolocation.getAccuracyGeometry();\r\n        const extent = geometry.getExtent();\r\n        if (\r\n          this.geolocationFeature &&\r\n          this.overlay.dataSource.ol.getFeatureById(\r\n            this.geolocationFeature.getId()\r\n          )\r\n        ) {\r\n          this.overlay.dataSource.ol.removeFeature(this.geolocationFeature);\r\n        }\r\n        this.geolocationFeature = new olFeature({ geometry });\r\n        this.geolocationFeature.setId('geolocationFeature');\r\n        this.overlay.addOlFeature(this.geolocationFeature);\r\n\r\n        if (this.ol.getView().options_.buffer) {\r\n          const bufferRadius = this.ol.getView().options_.buffer.bufferRadius;\r\n          const coordinates = geolocation.getPosition();\r\n          this.bufferGeom = new olCircle(coordinates, bufferRadius);\r\n          const bufferStroke = this.ol.getView().options_.buffer.bufferStroke;\r\n          const bufferFill = this.ol.getView().options_.buffer.bufferFill;\r\n\r\n          let bufferText;\r\n          if (this.ol.getView().options_.buffer.showBufferRadius) {\r\n            bufferText = bufferRadius.toString() + 'm';\r\n          } else {\r\n            bufferText = '';\r\n          }\r\n\r\n          this.bufferFeature = new olFeature(this.bufferGeom);\r\n          this.bufferFeature.setId('bufferFeature');\r\n          this.bufferFeature.set('bufferStroke', bufferStroke);\r\n          this.bufferFeature.set('bufferFill', bufferFill);\r\n          this.bufferFeature.set('bufferText', bufferText);\r\n          console.log(this.bufferFeature);\r\n          this.buffer.addOlFeature(this.bufferFeature);\r\n        }\r\n\r\n        if (first) {\r\n          this.viewController.zoomToExtent(extent);\r\n        }\r\n      } else if (first) {\r\n        const view = this.ol.getView();\r\n        const coordinates = geolocation.getPosition();\r\n        view.setCenter(coordinates);\r\n        view.setZoom(14);\r\n      }\r\n      if (track) {\r\n        this.unsubscribeGeolocate();\r\n      }\r\n      first = false;\r\n    });\r\n  }\r\n\r\n  unsubscribeGeolocate() {\r\n    this.stopGeolocation();\r\n    if (this.geolocation$$) {\r\n      this.geolocation$$.unsubscribe();\r\n      this.geolocation$$ = undefined;\r\n    }\r\n  }\r\n\r\n  private startGeolocation() {\r\n    if (!this.geolocation) {\r\n      this.geolocation = new olGeolocation({\r\n        projection: this.projection,\r\n        tracking: true\r\n      });\r\n\r\n      this.geolocation.on('change', evt => {\r\n        this.geolocation$.next(this.geolocation);\r\n      });\r\n    } else {\r\n      this.geolocation.setTracking(true);\r\n    }\r\n  }\r\n\r\n  private stopGeolocation() {\r\n    if (this.geolocation) {\r\n      this.geolocation.setTracking(false);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport proj4 from 'proj4';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Projection } from './projection.interfaces';\r\n\r\n/**\r\n * When injected, this service automatically registers and\r\n * projection defined in the application config. A custom projection\r\n * needs to be registered to be usable by OL.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectionService {\r\n\r\n  constructor(private config: ConfigService) {\r\n    const projections = this.config.getConfig('projections') || [];\r\n    projections.forEach((projection: Projection) => {\r\n      this.registerProjection(projection);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Define a proj4 projection and register it in OL\r\n   * @param projection Projection\r\n   */\r\n  registerProjection(projection: Projection) {\r\n    proj4.defs(projection.code, projection.def);\r\n    olproj4.register(proj4);\r\n    olproj.get(projection.code).setExtent(projection.extent);\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { ActivityService } from '@igo2/core';\r\n\r\nimport { IgoMap, MapViewOptions } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-map-browser',\r\n  templateUrl: './map-browser.component.html',\r\n  styleUrls: ['./map-browser.component.scss']\r\n})\r\nexport class MapBrowserComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  private activityId: string;\r\n  private status$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get view(): MapViewOptions { return this._view; }\r\n  set view(value: MapViewOptions) {\r\n    this._view = value;\r\n    if (this.map !== undefined) {\r\n      this.map.updateView(value);\r\n    }\r\n  }\r\n  private _view: MapViewOptions;\r\n\r\n  public id = `igo-map-target-${new Date().getTime()}`;\r\n\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  ngOnInit() {\r\n    this.status$$ = this.map.status$.subscribe(status =>\r\n      this.handleStatusChange(status)\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.map.setTarget(this.id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.setTarget(undefined);\r\n    this.activityService.unregister(this.activityId);\r\n    this.status$$.unsubscribe();\r\n  }\r\n\r\n  private handleStatusChange(status: SubjectStatus) {\r\n    if (status === SubjectStatus.Working && this.activityId === undefined) {\r\n      this.activityId = this.activityService.register();\r\n    } else if (status === SubjectStatus.Done && this.activityId !== undefined) {\r\n      this.activityService.unregister(this.activityId);\r\n      this.activityId = undefined;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-zoom-button',\r\n  templateUrl: './zoom-button.component.html',\r\n  styleUrls: ['./zoom-button.component.scss']\r\n})\r\nexport class ZoomButtonComponent {\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string;\r\n\r\n  get zoom(): number { return this.map.viewController.getZoom(); }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-geolocate-button',\r\n  templateUrl: './geolocate-button.component.html',\r\n  styleUrls: ['./geolocate-button.component.scss']\r\n})\r\nexport class GeolocateButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  constructor() {}\r\n}\r\n","import {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationTriggerMetadata\r\n} from '@angular/animations';\r\n\r\nexport function baseLayersSwitcherSlideInOut(): AnimationTriggerMetadata {\r\n  return trigger('baseLayerSwitcherState', [\r\n    state(\r\n      'collapseIcon',\r\n      style({\r\n        height: '40px',\r\n        width: '40px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'collapseMap',\r\n      style({\r\n        height: '85px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'expand',\r\n      style({\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    transition('collapse => expand', animate('200ms')),\r\n    transition('expand => collapse', animate('200ms'))\r\n  ]);\r\n}\r\n","import { Component, Input, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MediaService, Media } from '@igo2/core';\r\nimport { Layer } from '../../layer';\r\nimport { IgoMap } from '../shared';\r\nimport { baseLayersSwitcherSlideInOut } from './baselayers-switcher.animation';\r\n\r\n@Component({\r\n  selector: 'igo-baselayers-switcher',\r\n  templateUrl: './baselayers-switcher.component.html',\r\n  styleUrls: ['./baselayers-switcher.component.scss'],\r\n  animations: [baseLayersSwitcherSlideInOut()]\r\n})\r\nexport class BaseLayersSwitcherComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get useStaticIcon(): boolean {\r\n    return this._useStaticIcon;\r\n  }\r\n  set useStaticIcon(value: boolean) {\r\n    this._useStaticIcon = value;\r\n  }\r\n  private _useStaticIcon: boolean;\r\n\r\n  public _baseLayers: Layer[] = [];\r\n  public expand = false;\r\n  public showButton = true;\r\n\r\n  private layers$$: Subscription;\r\n\r\n  constructor(private mediaService: MediaService) {\r\n    const media = this.mediaService.media$.value;\r\n    if (media === Media.Mobile && this.useStaticIcon === undefined) {\r\n      this.useStaticIcon = true;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(arrayLayers => {\r\n      this._baseLayers = arrayLayers.filter(l => l.baseLayer);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  collapseOrExpand() {\r\n    if (this.baseLayers.length > 1 || this.useStaticIcon) {\r\n      this.expand = !this.expand;\r\n    } else {\r\n      this.expand = false;\r\n    }\r\n  }\r\n\r\n  get baseLayers(): Layer[] {\r\n    const mapResolution = this.map.viewController.getResolution();\r\n\r\n    const bl = this._baseLayers.filter(l => {\r\n      return (\r\n        (!l.options.maxResolution ||\r\n          mapResolution <= l.options.maxResolution) &&\r\n        (!l.options.minResolution || mapResolution >= l.options.minResolution)\r\n      );\r\n    });\r\n\r\n    const blHidden = bl.filter(l => !l.visible);\r\n    return blHidden.length + 1 === bl.length ? blHidden : bl;\r\n  }\r\n}\r\n","import { Component, Input, AfterViewInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-mini-basemap',\r\n  templateUrl: './mini-basemap.component.html',\r\n  styleUrls: ['./mini-basemap.component.scss']\r\n})\r\nexport class MiniBaseMapComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n    this.handleMoveEnd();\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get baseLayer(): Layer {\r\n    return this._baseLayer;\r\n  }\r\n  set baseLayer(value: Layer) {\r\n    this._baseLayer = value;\r\n    this.handleBaseLayerChanged(value);\r\n  }\r\n  private _baseLayer: Layer;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  @Input()\r\n  get display(): boolean {\r\n    return this._display;\r\n  }\r\n  set display(value: boolean) {\r\n    this._display = value;\r\n  }\r\n  private _display: boolean;\r\n\r\n  public basemap = new IgoMap({\r\n    controls: {},\r\n    interactions: false\r\n  });\r\n\r\n  constructor(private layerService: LayerService) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.map.ol.on('moveend', () => this.handleMoveEnd());\r\n    this.handleMoveEnd();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.ol.un('moveend', () => this.handleMoveEnd());\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.map.changeBaseLayer(baseLayer);\r\n  }\r\n\r\n  private handleMoveEnd() {\r\n    this.basemap.ol.setView(this.map.ol.getView());\r\n  }\r\n\r\n  private handleBaseLayerChanged(baselayer) {\r\n    this.basemap.removeAllLayers();\r\n\r\n    const options: any = Object.assign(\r\n      Object.create(baselayer.options),\r\n      baselayer.options\r\n    );\r\n    options.visible = true;\r\n\r\n    const layer = this.layerService.createLayer(options);\r\n    this.basemap.addLayer(layer);\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-rotation-button',\r\n  templateUrl: './rotation-button.component.html',\r\n  styleUrls: ['./rotation-button.component.scss']\r\n})\r\nexport class RotationButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  constructor() {}\r\n\r\n  rotationStyle(radians): {} {\r\n    const rotation = 'rotate(' + radians + 'rad)';\r\n    return {\r\n      transform: rotation\r\n    };\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport * as olproj from 'ol/proj';\r\n\r\nexport class EsriStyleGenerator {\r\n  public _converters: any;\r\n  public _renderers: any;\r\n\r\n  constructor() {\r\n    this._converters = {};\r\n    this._converters.esriPMS = EsriStyleGenerator._convertEsriPMS;\r\n    this._converters.esriSFS = EsriStyleGenerator._convertEsriSFS;\r\n    this._converters.esriSLS = EsriStyleGenerator._convertEsriSLS;\r\n    this._converters.esriSMS = EsriStyleGenerator._convertEsriSMS;\r\n    this._converters.esriTS = EsriStyleGenerator._convertEsriTS;\r\n    this._renderers = {};\r\n    this._renderers.uniqueValue = this._renderUniqueValue;\r\n    this._renderers.simple = this._renderSimple;\r\n    this._renderers.classBreaks = this._renderClassBreaks;\r\n  }\r\n  static _convertPointToPixel(point) {\r\n    return point / 0.75;\r\n  }\r\n  static _transformColor(color): [number, number, number, number] {\r\n    // alpha channel is different, runs from 0-255 but in ol3 from 0-1\r\n    return [color[0], color[1], color[2], color[3] / 255];\r\n  }\r\n\r\n  static _getResolutionForScale(scale, units) {\r\n    const dpi = 25.4 / 0.28;\r\n    const mpu = olproj.METERS_PER_UNIT[units];\r\n    const inchesPerMeter = 39.37;\r\n    return parseFloat(scale) / (mpu * inchesPerMeter * dpi);\r\n  }\r\n\r\n  /* convert an Esri Text Symbol */\r\n  static _convertEsriTS(symbol) {\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    const text = symbol.text !== undefined ? symbol.text : undefined;\r\n    return new olstyle.Style({\r\n      text: new olstyle.Text({\r\n        fill: new olstyle.Fill({\r\n          color: EsriStyleGenerator._transformColor(symbol.color)\r\n        }),\r\n        font:\r\n          symbol.font.style +\r\n          ' ' +\r\n          symbol.font.weight +\r\n          ' ' +\r\n          symbol.font.size +\r\n          ' px ' +\r\n          symbol.font.family,\r\n        textBaseline: symbol.verticalAlignment,\r\n        textAlign: symbol.horizontalAlignment,\r\n        offsetX: EsriStyleGenerator._convertPointToPixel(symbol.xoffset),\r\n        offsetY: EsriStyleGenerator._convertPointToPixel(symbol.yoffset),\r\n        rotation,\r\n        text\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Picture Marker Symbol */\r\n  static _convertEsriPMS(symbol) {\r\n    const src = 'data:' + symbol.contentType + ';base64, ' + symbol.imageData;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n\r\n    return new olstyle.Style({\r\n      image: new olstyle.Icon({\r\n        src,\r\n        rotation\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Simple Fill Symbol */\r\n  static _convertEsriSFS(symbol) {\r\n    // there is no support in openlayers currently for fill patterns, so style is not interpreted\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    return new olstyle.Style({\r\n      fill,\r\n      stroke\r\n    });\r\n  }\r\n  static _convertOutline(outline) {\r\n    let lineDash;\r\n    const color = EsriStyleGenerator._transformColor(outline.color);\r\n    if (outline.style === 'esriSLSDash') {\r\n      lineDash = [5];\r\n    } else if (outline.style === 'esriSLSDashDot') {\r\n      lineDash = [5, 5, 1, 2];\r\n    } else if (outline.style === 'esriSLSDashDotDot') {\r\n      lineDash = [5, 5, 1, 2, 1, 2];\r\n    } else if (outline.style === 'esriSLSDot') {\r\n      lineDash = [1, 2];\r\n    } else if (outline.style === 'esriSLSNull') {\r\n      // line not visible, make color fully transparent\r\n      color[3] = 0;\r\n    }\r\n    return new olstyle.Stroke({\r\n      color,\r\n      lineDash,\r\n      width: EsriStyleGenerator._convertPointToPixel(outline.width)\r\n    });\r\n  }\r\n  /* convert an Esri Simple Line Symbol */\r\n  static _convertEsriSLS(symbol) {\r\n    return new olstyle.Style({\r\n      stroke: EsriStyleGenerator._convertOutline(symbol)\r\n    });\r\n  }\r\n  static _transformAngle(angle) {\r\n    if (angle === 0 || angle === undefined) {\r\n      return undefined;\r\n    }\r\n    const normalRad = (angle * Math.PI) / 180;\r\n    const ol3Rad = -normalRad + Math.PI / 2;\r\n    if (ol3Rad < 0) {\r\n      return 2 * Math.PI + ol3Rad;\r\n    } else {\r\n      return ol3Rad;\r\n    }\r\n  }\r\n  /* convert an Esri Simple Marker Symbol */\r\n  static _convertEsriSMS(symbol) {\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    const radius = EsriStyleGenerator._convertPointToPixel(symbol.size) / 2;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    if (symbol.style === 'esriSMSCircle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.Circle({\r\n          radius,\r\n          fill,\r\n          stroke\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSCross') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSDiamond') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSSquare') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSX') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSTriangle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 3,\r\n          radius,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  _convertLabelingInfo(labelingInfo, mapUnits) {\r\n    const styles = [];\r\n    for (let i = 0, ii = labelingInfo.length; i < ii; ++i) {\r\n      const labelExpression = labelingInfo[i].labelExpression;\r\n      // only limited support for label expressions\r\n      const field = labelExpression.substr(\r\n        labelExpression.indexOf('[') + 1,\r\n        labelExpression.indexOf(']') - 1\r\n      );\r\n      const symbol = labelingInfo[i].symbol;\r\n      const maxScale = labelingInfo[i].maxScale;\r\n      const minScale = labelingInfo[i].minScale;\r\n      let minResolution = null;\r\n      if (maxScale !== 0) {\r\n        minResolution = EsriStyleGenerator._getResolutionForScale(\r\n          maxScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      let maxResolution = null;\r\n      if (minScale !== 0) {\r\n        maxResolution = EsriStyleGenerator._getResolutionForScale(\r\n          minScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      styles.push(\r\n        (() => {\r\n          return function(feature, resolution) {\r\n            let visible = true;\r\n            if (this.minResolution !== null && this.maxResolution !== null) {\r\n              visible =\r\n                resolution < this.maxResolution &&\r\n                resolution >= this.minResolution;\r\n            } else if (this.minResolution !== null) {\r\n              visible = resolution >= this.minResolution;\r\n            } else if (this.maxResolution !== null) {\r\n              visible = resolution < this.maxResolution;\r\n            }\r\n            if (visible) {\r\n              const value = feature.get(this.field);\r\n              this.style.getText().setText(value);\r\n              return [this.style];\r\n            }\r\n          };\r\n        })().bind({\r\n          minResolution,\r\n          maxResolution,\r\n          field,\r\n          style\r\n        })\r\n      );\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  _renderSimple(renderer) {\r\n    const style = this._converters[renderer.symbol.type].call(\r\n      this,\r\n      renderer.symbol\r\n    );\r\n    return (() => {\r\n      return () => {\r\n        return [style];\r\n      };\r\n    })();\r\n  }\r\n  _renderClassBreaks(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    const defaultStyle = this._converters[defaultSymbol.type].call(\r\n      this,\r\n      defaultSymbol\r\n    );\r\n    const field = renderer.field;\r\n    const classes = [];\r\n    for (let i = 0, ii = renderer.classBreakInfos.length; i < ii; ++i) {\r\n      const classBreakInfo = renderer.classBreakInfos[i];\r\n      let min;\r\n      if (\r\n        classBreakInfo.classMinValue === null ||\r\n        classBreakInfo.classMinValue === undefined\r\n      ) {\r\n        if (i === 0) {\r\n          min = renderer.minValue;\r\n        } else {\r\n          min = renderer.classBreakInfos[i - 1].classMaxValue;\r\n        }\r\n      } else {\r\n        min = classBreakInfo.classMinValue;\r\n      }\r\n      const max = classBreakInfo.classMaxValue;\r\n      const symbol = classBreakInfo.symbol;\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      classes.push({ min, max, style });\r\n    }\r\n    return (() => {\r\n      return (feature) => {\r\n        const value = feature.get(field);\r\n        for (let i = 0, ii = classes.length; i < ii; ++i) {\r\n          let condition;\r\n          if (i === 0) {\r\n            condition = value >= classes[i].min && value <= classes[i].max;\r\n          } else {\r\n            condition = value > classes[i].min && value <= classes[i].max;\r\n          }\r\n          if (condition) {\r\n            return [classes[i].style];\r\n          }\r\n        }\r\n        return [defaultStyle];\r\n      };\r\n    })();\r\n  }\r\n  _renderUniqueValue(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    let defaultStyle = [];\r\n    if (defaultSymbol) {\r\n      defaultStyle = [\r\n        this._converters[defaultSymbol.type].call(this, defaultSymbol)\r\n      ];\r\n    }\r\n    const field = renderer.field1;\r\n    const infos = renderer.uniqueValueInfos;\r\n    const me = this;\r\n    return (() => {\r\n      const hash = {};\r\n      for (let i = 0, ii = infos.length; i < ii; ++i) {\r\n        const info = infos[i];\r\n        const symbol = info.symbol;\r\n        hash[info.value] = [me._converters[symbol.type].call(me, symbol)];\r\n      }\r\n\r\n      return (feature) => {\r\n        const style = hash[feature.get(field)];\r\n        return style ? style : defaultStyle;\r\n      };\r\n    })();\r\n  }\r\n  generateStyle(layerInfo, mapUnits) {\r\n    const drawingInfo = layerInfo.drawingInfo;\r\n    let styleFunctions = [];\r\n    const drawingInfoStyle = this._renderers[drawingInfo.renderer.type].call(\r\n      this,\r\n      drawingInfo.renderer\r\n    );\r\n    if (drawingInfoStyle !== undefined) {\r\n      styleFunctions.push(drawingInfoStyle);\r\n    }\r\n    if (layerInfo.labelingInfo) {\r\n      const labelingInfoStyleFunctions = this._convertLabelingInfo(\r\n        layerInfo.labelingInfo,\r\n        mapUnits\r\n      );\r\n      styleFunctions = styleFunctions.concat(labelingInfoStyleFunctions);\r\n    }\r\n    if (styleFunctions.length === 1) {\r\n      return styleFunctions[0];\r\n    } else {\r\n      return (() => {\r\n        return (feature, resolution) => {\r\n          let styles = [];\r\n          for (let i = 0, ii = styleFunctions.length; i < ii; ++i) {\r\n            const result = styleFunctions[i].call(null, feature, resolution);\r\n            if (result) {\r\n              styles = styles.concat(result);\r\n            }\r\n          }\r\n          return styles;\r\n        };\r\n      })();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Cacheable } from 'ngx-cacheable';\r\n\r\nimport { WMSCapabilities, WMTSCapabilities } from 'ol/format';\r\nimport { optionsFromCapabilities } from 'ol/source/WMTS.js';\r\nimport olAttribution from 'ol/control/Attribution';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { getResolutionFromScale } from '../../map';\r\nimport { EsriStyleGenerator } from '../utils/esri-style-generator';\r\n\r\nimport {\r\n  WMTSDataSourceOptions,\r\n  WMSDataSourceOptions,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSourceOptions\r\n} from './datasources';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CapabilitiesService {\r\n  private capabilitiesStore: any[] = [];\r\n  private parsers = {\r\n    wms: new WMSCapabilities(),\r\n    wmts: new WMTSCapabilities()\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getWMSOptions(\r\n    baseOptions: WMSDataSourceOptions\r\n  ): Observable<WMSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = (baseOptions.params as any).version;\r\n\r\n    return this.getCapabilities('wms', url, version).pipe(\r\n      map((capabilities: any) =>\r\n        this.parseWMSOptions(baseOptions, capabilities)\r\n      )\r\n    );\r\n  }\r\n\r\n  getWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = baseOptions.version;\r\n\r\n    const options = this.getCapabilities('wmts', url, version).pipe(\r\n      map((capabilities: any) =>\r\n        this.parseWMTSOptions(baseOptions, capabilities)\r\n      )\r\n    );\r\n\r\n    return options;\r\n  }\r\n\r\n  getCartoOptions(\r\n    baseOptions: CartoDataSourceOptions\r\n  ): Observable<CartoDataSourceOptions> {\r\n    const baseUrl =\r\n      'https://' +\r\n      baseOptions.account +\r\n      '.carto.com/api/v2/viz/' +\r\n      baseOptions.mapId +\r\n      '/viz.json';\r\n\r\n    return this.http\r\n      .jsonp(baseUrl, 'callback')\r\n      .pipe(\r\n        map((cartoOptions: any) =>\r\n          this.parseCartoOptions(baseOptions, cartoOptions)\r\n        )\r\n      );\r\n  }\r\n\r\n  getArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const modifiedUrl = baseOptions.url.replace('FeatureServer', 'MapServer');\r\n    const legendUrl = modifiedUrl + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legend = this.http.get(legendUrl).pipe(\r\n      map((res: any) => res),\r\n      catchError(err => {\r\n        console.log('No legend associated with this Feature Service');\r\n        return of(err);\r\n      })\r\n    );\r\n    return forkJoin([arcgisOptions, legend]).pipe(\r\n      map((res: any) => {\r\n        return this.parseArcgisOptions(baseOptions, res[0], res[1]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const legendUrl = baseOptions.url + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legendInfo = this.http.get(legendUrl);\r\n\r\n    return forkJoin([arcgisOptions, legendInfo]).pipe(\r\n      map((res: any) =>\r\n        this.parseTileArcgisOptions(baseOptions, res[0], res[1])\r\n      )\r\n    );\r\n  }\r\n\r\n  @Cacheable()\r\n  getCapabilities(\r\n    service: 'wms' | 'wmts',\r\n    baseUrl: string,\r\n    version?: string\r\n  ): Observable<any> {\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        request: 'GetCapabilities',\r\n        service,\r\n        version: version || '1.3.0'\r\n      }\r\n    });\r\n\r\n    const request = this.http.get(baseUrl, {\r\n      params,\r\n      responseType: 'text'\r\n    });\r\n\r\n    return request.pipe(\r\n      map(res => {\r\n        const capabilities = this.parsers[service].read(res);\r\n        return capabilities;\r\n      })\r\n    );\r\n  }\r\n\r\n  private parseWMSOptions(\r\n    baseOptions: WMSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMSDataSourceOptions {\r\n    const layers = (baseOptions.params as any).layers;\r\n    const layer = this.findDataSourceInCapabilities(\r\n      capabilities.Capability.Layer,\r\n      layers\r\n    );\r\n\r\n    if (!layer) {\r\n      return baseOptions;\r\n    }\r\n    const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n    const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n    const keywordList = layer.KeywordList ? layer.KeywordList : undefined;\r\n    const queryable = layer.queryable;\r\n    const timeFilter = this.getTimeFilter(layer);\r\n    const timeFilterable = timeFilter && Object.keys(timeFilter).length > 0;\r\n\r\n    const options: WMSDataSourceOptions = ObjectUtils.removeUndefined({\r\n      _layerOptionsFromCapabilities: {\r\n        title: layer.Title,\r\n        maxResolution:\r\n          getResolutionFromScale(layer.MaxScaleDenominator) || Infinity,\r\n        minResolution:\r\n          getResolutionFromScale(layer.MinScaleDenominator) || 0,\r\n        metadata: {\r\n          url: metadata ? metadata.OnlineResource : undefined,\r\n          extern: metadata ? true : undefined,\r\n          abstract,\r\n          keywordList\r\n        }\r\n      },\r\n      queryable,\r\n      timeFilter: timeFilterable ? timeFilter : undefined,\r\n      timeFilterable: timeFilterable ? true : undefined\r\n    });\r\n\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMTSDataSourceOptions {\r\n    const options = optionsFromCapabilities(capabilities, baseOptions);\r\n    return Object.assign(options, baseOptions);\r\n  }\r\n\r\n  private parseCartoOptions(\r\n    baseOptions: CartoDataSourceOptions,\r\n    cartoOptions: any\r\n  ): CartoDataSourceOptions {\r\n    const layers = [];\r\n    const params = cartoOptions.layers[1].options.layer_definition;\r\n    params.layers.forEach(element => {\r\n      layers.push({\r\n        type: element.type.toLowerCase(),\r\n        options: element.options,\r\n        legend: element.legend\r\n      });\r\n    });\r\n    const options = ObjectUtils.removeUndefined({\r\n      config: {\r\n        version: params.version,\r\n        layers\r\n      }\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend?: any\r\n  ): ArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const styleGenerator = new EsriStyleGenerator();\r\n    const units = arcgisOptions.units === 'esriMeters' ? 'm' : 'degrees';\r\n    const style = styleGenerator.generateStyle(arcgisOptions, units);\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: 'datetime',\r\n        style: 'calendar'\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        legendInfo,\r\n        style,\r\n        timeFilter,\r\n        timeExtent,\r\n        attributions\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend: any\r\n  ): TileArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: 'datetime',\r\n        style: 'calendar'\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        layers: 'show:' + baseOptions.layer,\r\n        time: timeExtent\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params,\r\n      legendInfo,\r\n      timeFilter,\r\n      attributions\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private findDataSourceInCapabilities(layerArray, name): any {\r\n    if (Array.isArray(layerArray)) {\r\n      let layer;\r\n      layerArray.find(value => {\r\n        layer = this.findDataSourceInCapabilities(value, name);\r\n        return layer !== undefined;\r\n      }, this);\r\n\r\n      return layer;\r\n    } else if (layerArray.Layer) {\r\n      return this.findDataSourceInCapabilities(layerArray.Layer, name);\r\n    } else {\r\n      if (layerArray.Name && layerArray.Name === name) {\r\n        return layerArray;\r\n      }\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getTimeFilter(layer) {\r\n    let dimension;\r\n\r\n    if (layer.Dimension) {\r\n      const timeFilter: any = {};\r\n      dimension = layer.Dimension[0];\r\n\r\n      if (dimension.values) {\r\n        const minMaxDim = dimension.values.split('/');\r\n        timeFilter.min = minMaxDim[0] !== undefined ? minMaxDim[0] : undefined;\r\n        timeFilter.max = minMaxDim[1] !== undefined ? minMaxDim[1] : undefined;\r\n        timeFilter.step = minMaxDim[2] !== undefined ? minMaxDim[2] : undefined;\r\n      }\r\n\r\n      if (dimension.default) {\r\n        timeFilter.value = dimension.default;\r\n      }\r\n      return timeFilter;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { CapabilitiesService } from './capabilities.service';\r\nimport { WFSService } from './datasources/wfs.service';\r\nimport { NetworkService } from '@igo2/core';\r\nimport {\r\n  DataSource,\r\n  OSMDataSource,\r\n  OSMDataSourceOptions,\r\n  FeatureDataSource,\r\n  FeatureDataSourceOptions,\r\n  XYZDataSource,\r\n  XYZDataSourceOptions,\r\n  WFSDataSource,\r\n  WFSDataSourceOptions,\r\n  WMTSDataSource,\r\n  WMTSDataSourceOptions,\r\n  WMSDataSource,\r\n  WMSDataSourceOptions,\r\n  CartoDataSource,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSource,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSource,\r\n  TileArcGISRestDataSourceOptions,\r\n  WebSocketDataSource,\r\n  AnyDataSourceOptions,\r\n  MVTDataSource,\r\n  MVTDataSourceOptions,\r\n  ClusterDataSource,\r\n  ClusterDataSourceOptions\r\n} from './datasources';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSourceService {\r\n  public datasources$ = new BehaviorSubject<DataSource[]>([]);\r\n\r\n  constructor(\r\n    private capabilitiesService: CapabilitiesService,\r\n    private wfsDataSourceService: WFSService,\r\n    public networkService: NetworkService\r\n  ) {}\r\n\r\n  createAsyncDataSource(context: AnyDataSourceOptions): Observable<DataSource> {\r\n    if (!context.type) {\r\n      console.error(context);\r\n      throw new Error('Datasource needs a type');\r\n    }\r\n    let dataSource;\r\n    switch (context.type.toLowerCase()) {\r\n      case 'osm':\r\n        dataSource = this.createOSMDataSource(context as OSMDataSourceOptions);\r\n        break;\r\n      case 'vector':\r\n        dataSource = this.createFeatureDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'wfs':\r\n        dataSource = this.createWFSDataSource(context as WFSDataSourceOptions);\r\n        break;\r\n      case 'wms':\r\n        dataSource = this.createWMSDataSource(context as WMSDataSourceOptions);\r\n        break;\r\n      case 'wmts':\r\n        dataSource = this.createWMTSDataSource(\r\n          context as WMTSDataSourceOptions\r\n        );\r\n        break;\r\n      case 'xyz':\r\n        dataSource = this.createXYZDataSource(context as XYZDataSourceOptions);\r\n        break;\r\n      case 'carto':\r\n        dataSource = this.createCartoDataSource(\r\n          context as CartoDataSourceOptions\r\n        );\r\n        break;\r\n      case 'arcgisrest':\r\n        dataSource = this.createArcGISRestDataSource(\r\n          context as ArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'websocket':\r\n        dataSource = this.createWebSocketDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'mvt':\r\n        dataSource = this.createMVTDataSource(\r\n          context as MVTDataSourceOptions\r\n        );\r\n        break;\r\n      case 'tilearcgisrest':\r\n        dataSource = this.createTileArcGISRestDataSource(\r\n          context as TileArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'cluster':\r\n        dataSource = this.createClusterDataSource(\r\n          context as ClusterDataSourceOptions\r\n        );\r\n        break;\r\n      default:\r\n        console.error(context);\r\n        throw new Error('Invalid datasource type');\r\n    }\r\n\r\n    this.datasources$.next(this.datasources$.value.concat([dataSource]));\r\n\r\n    return dataSource;\r\n  }\r\n\r\n  private createOSMDataSource(\r\n    context: OSMDataSourceOptions\r\n  ): Observable<OSMDataSource> {\r\n    return new Observable(d => d.next(new OSMDataSource(context, this.networkService)));\r\n  }\r\n\r\n  private createFeatureDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<FeatureDataSource> {\r\n    return new Observable(d => d.next(new FeatureDataSource(context, this.networkService)));\r\n  }\r\n\r\n  private createWebSocketDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<WebSocketDataSource> {\r\n    return new Observable(d => d.next(new WebSocketDataSource(context, this.networkService)));\r\n  }\r\n\r\n  private createWFSDataSource(\r\n    context: WFSDataSourceOptions\r\n  ): Observable<WFSDataSource> {\r\n    return new Observable(d =>\r\n      d.next(new WFSDataSource(context, this.networkService, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMSDataSource(\r\n    context: WMSDataSourceOptions\r\n  ): Observable<WMSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService\r\n        .getWMSOptions(context)\r\n        .pipe(\r\n          map(\r\n            (options: WMSDataSourceOptions) =>\r\n              new WMSDataSource(context, this.networkService, this.wfsDataSourceService)\r\n          )\r\n        );\r\n    }\r\n\r\n    return new Observable(d =>\r\n      d.next(new WMSDataSource(context, this.networkService, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMTSDataSource(\r\n    context: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService\r\n        .getWMTSOptions(context)\r\n        .pipe(\r\n          map((options: WMTSDataSourceOptions) => new WMTSDataSource(options, this.networkService))\r\n        );\r\n    }\r\n\r\n    return new Observable(d => d.next(new WMTSDataSource(context, this.networkService)));\r\n  }\r\n\r\n  private createXYZDataSource(\r\n    context: XYZDataSourceOptions\r\n  ): Observable<XYZDataSource> {\r\n    return new Observable(d => d.next(new XYZDataSource(context, this.networkService)));\r\n  }\r\n\r\n  private createCartoDataSource(\r\n    context: CartoDataSourceOptions\r\n  ): Observable<CartoDataSource> {\r\n    if (context.mapId) {\r\n      return this.capabilitiesService\r\n        .getCartoOptions(context)\r\n        .pipe(\r\n          map((options: CartoDataSourceOptions) => new CartoDataSource(options, this.networkService))\r\n        );\r\n    }\r\n    return new Observable(d => d.next(new CartoDataSource(context, this.networkService)));\r\n  }\r\n\r\n  private createArcGISRestDataSource(\r\n    context: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: ArcGISRestDataSourceOptions) =>\r\n            new ArcGISRestDataSource(options, this.networkService)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createTileArcGISRestDataSource(\r\n    context: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getTileArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: TileArcGISRestDataSourceOptions) =>\r\n            new TileArcGISRestDataSource(options, this.networkService)\r\n        )\r\n      );\r\n  }\r\n  private createMVTDataSource(\r\n    context: MVTDataSourceOptions\r\n  ): Observable<MVTDataSource> {\r\n    return new Observable(d => d.next(new MVTDataSource(context, this.networkService)));\r\n  }\r\n\r\n  private createClusterDataSource(\r\n    context: ClusterDataSourceOptions\r\n  ): Observable<ClusterDataSource> {\r\n    return new Observable(d => d.next(new ClusterDataSource(context, this.networkService)));\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport {\r\n  OSMDataSource,\r\n  FeatureDataSource,\r\n  XYZDataSource,\r\n  WFSDataSource,\r\n  WMTSDataSource,\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  ArcGISRestDataSource,\r\n  TileArcGISRestDataSource,\r\n  WebSocketDataSource,\r\n  MVTDataSource,\r\n  ClusterDataSource\r\n} from '../../datasource';\r\n\r\nimport { DataSourceService } from '../../datasource/shared/datasource.service';\r\n\r\nimport {\r\n  Layer,\r\n  ImageLayer,\r\n  ImageLayerOptions,\r\n  TileLayer,\r\n  TileLayerOptions,\r\n  VectorLayer,\r\n  VectorLayerOptions,\r\n  AnyLayerOptions,\r\n  VectorTileLayer,\r\n  VectorTileLayerOptions\r\n} from './layers';\r\n\r\nimport { StyleService } from './style.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerService {\r\n  private tokenKey: string;\r\n\r\n  constructor(\r\n    private styleService: StyleService,\r\n    private dataSourceService: DataSourceService,\r\n    @Optional() private config: ConfigService\r\n  ) {\r\n    if (this.config) {\r\n      this.tokenKey = this.config.getConfig('auth.tokenKey');\r\n    }\r\n  }\r\n\r\n  createLayer(layerOptions: AnyLayerOptions): Layer {\r\n    if (!layerOptions.source) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      layerOptions.source.options &&\r\n      layerOptions.source.options.optionsFromCapabilities\r\n    ) {\r\n      layerOptions = ObjectUtils.mergeDeep(\r\n        (layerOptions.source.options as any)._layerOptionsFromCapabilities || {},\r\n        layerOptions || {}\r\n      );\r\n    }\r\n\r\n    let layer;\r\n    switch (layerOptions.source.constructor) {\r\n      case OSMDataSource:\r\n      case WMTSDataSource:\r\n      case XYZDataSource:\r\n      case CartoDataSource:\r\n      case TileArcGISRestDataSource:\r\n        layer = this.createTileLayer(layerOptions as TileLayerOptions);\r\n        break;\r\n      case FeatureDataSource:\r\n      case WFSDataSource:\r\n      case ArcGISRestDataSource:\r\n      case WebSocketDataSource:\r\n      case ClusterDataSource:\r\n        layer = this.createVectorLayer(layerOptions as VectorLayerOptions);\r\n        break;\r\n      case WMSDataSource:\r\n        layer = this.createImageLayer(layerOptions as ImageLayerOptions);\r\n        break;\r\n      case MVTDataSource:\r\n        layer = this.createVectorTileLayer(layerOptions as VectorTileLayerOptions);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return layer;\r\n  }\r\n\r\n  createAsyncLayer(layerOptions: AnyLayerOptions): Observable<Layer> {\r\n    if (layerOptions.source) {\r\n      return new Observable(d => d.next(this.createLayer(layerOptions)));\r\n    }\r\n\r\n    return this.dataSourceService\r\n      .createAsyncDataSource(layerOptions.sourceOptions)\r\n      .pipe(\r\n        map(source => {\r\n          layerOptions.source = source;\r\n          return this.createLayer(layerOptions);\r\n        })\r\n      );\r\n  }\r\n\r\n  private createImageLayer(layerOptions: ImageLayerOptions): ImageLayer {\r\n    if (this.tokenKey) {\r\n      layerOptions.token = localStorage.getItem(this.tokenKey);\r\n    }\r\n\r\n    return new ImageLayer(layerOptions);\r\n  }\r\n\r\n  private createTileLayer(layerOptions: TileLayerOptions): TileLayer {\r\n    return new TileLayer(layerOptions);\r\n  }\r\n\r\n  private createVectorLayer(layerOptions: VectorLayerOptions): VectorLayer {\r\n    let style;\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ArcGISRestDataSource) {\r\n      const source = layerOptions.source as ArcGISRestDataSource;\r\n      style = source.options.params.style;\r\n    }\r\n\r\n    if (layerOptions.source instanceof ClusterDataSource) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = (feature) => {\r\n        return serviceStyle.createClusterStyle(feature, layerOptions.clusterParam);\r\n      };\r\n      return new VectorLayer(layerOptions);\r\n    }\r\n\r\n    if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = (feature) => {\r\n        return serviceStyle.createStyleByAttribute(feature, layerOptions.styleByAttribute);\r\n      };\r\n      return new VectorLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n\r\n    return new VectorLayer(layerOptionsOl);\r\n  }\r\n\r\n  private createVectorTileLayer(layerOptions: VectorTileLayerOptions): VectorTileLayer {\r\n    let style;\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = (feature) => {\r\n        return serviceStyle.createStyleByAttribute(feature, layerOptions.styleByAttribute);\r\n      };\r\n      return new VectorTileLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n    return new VectorTileLayer(layerOptionsOl);\r\n  }\r\n}\r\n","export enum CatalogItemType {\r\n  Layer = 'layer',\r\n  Group = 'group'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport * as olextent from 'ol/extent';\r\nimport olFormatGML2 from 'ol/format/GML2';\r\nimport olFormatGML3 from 'ol/format/GML3';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport olFeature from 'ol/Feature';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport {\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  TileArcGISRestDataSource\r\n} from '../../datasource';\r\n\r\nimport { QueryFormat, QueryHtmlTarget } from './query.enums';\r\nimport { QueryOptions, QueryableDataSource } from './query.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QueryService {\r\n  public queryEnabled = true;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  query(layers: Layer[], options: QueryOptions): Observable<Feature[]>[] {\r\n    return layers\r\n      .filter((layer: Layer) => layer.visible && layer.isInResolutionsRange)\r\n      .map((layer: Layer) => this.queryLayer(layer, options));\r\n  }\r\n\r\n  queryLayer(layer: Layer, options: QueryOptions): Observable<Feature[]> {\r\n    const url = this.getQueryUrl(layer.dataSource, options);\r\n    if (!url) {\r\n      return of([]);\r\n    }\r\n\r\n    const request = this.http.get(url, { responseType: 'text' });\r\n    return request.pipe(map(res => this.extractData(res, layer, options, url)));\r\n  }\r\n\r\n  private extractData(\r\n    res,\r\n    layer: Layer,\r\n    options: QueryOptions,\r\n    url: string\r\n  ): Feature[] {\r\n    const queryDataSource = layer.dataSource as QueryableDataSource;\r\n\r\n    let allowedFieldsAndAlias;\r\n    if (\r\n      layer.options &&\r\n      layer.options.sourceOptions &&\r\n      layer.options.sourceOptions.sourceFields &&\r\n      layer.options.sourceOptions.sourceFields.length >= 1\r\n    ) {\r\n      allowedFieldsAndAlias = {};\r\n      layer.options.sourceOptions.sourceFields.forEach(sourceField => {\r\n        const alias = sourceField.alias ? sourceField.alias : sourceField.name;\r\n        allowedFieldsAndAlias[sourceField.name] = alias;\r\n      });\r\n    }\r\n    let features = [];\r\n    switch (queryDataSource.options.queryFormat) {\r\n      case QueryFormat.GML3:\r\n        features = this.extractGML3Data(\r\n          res,\r\n          layer.zIndex,\r\n          allowedFieldsAndAlias\r\n        );\r\n        break;\r\n      case QueryFormat.JSON:\r\n      case QueryFormat.GEOJSON:\r\n        features = this.extractGeoJSONData(res);\r\n        break;\r\n      case QueryFormat.ESRIJSON:\r\n        features = this.extractEsriJSONData(res, layer.zIndex);\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        features = this.extractTextData(res);\r\n        break;\r\n      case QueryFormat.HTML:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url\r\n        );\r\n        break;\r\n      case QueryFormat.GML2:\r\n      default:\r\n        features = this.extractGML2Data(res, layer, allowedFieldsAndAlias);\r\n        break;\r\n    }\r\n\r\n    return features.map((feature: Feature, index: number) => {\r\n      let title = feature.properties[queryDataSource.queryTitle];\r\n      if (!title && features.length > 1) {\r\n        title = `${layer.title} (${index + 1})`;\r\n      } else if (!title) {\r\n        title = layer.title;\r\n      }\r\n      const meta = Object.assign({}, feature.meta || {}, {\r\n        id: uuid(),\r\n        title,\r\n        mapTitle: title,\r\n        sourceTitle: layer.title,\r\n        order: 1000 - layer.zIndex\r\n      });\r\n\r\n      return Object.assign(feature, {\r\n        meta,\r\n        projection:\r\n          queryDataSource.options.type === 'carto'\r\n            ? 'EPSG:4326'\r\n            : options.projection\r\n      });\r\n    });\r\n  }\r\n\r\n  private extractGML2Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(res);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      features = parser.readFeatures(res);\r\n    }\r\n\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGML3Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    const parser = new olFormatGML3();\r\n    const features = parser.readFeatures(res);\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGeoJSONData(res) {\r\n    let features = [];\r\n    try {\r\n      features = JSON.parse(res).features;\r\n    } catch (e) {\r\n      console.warn('query.service: Unable to parse geojson', '\\n', res);\r\n    }\r\n    return features;\r\n  }\r\n\r\n  private extractEsriJSONData(res, zIndex) {\r\n    const parser = new olFormatEsriJSON();\r\n    const features = parser.readFeatures(res);\r\n\r\n    return features.map(feature => this.featureToResult(feature, zIndex));\r\n  }\r\n\r\n  private extractTextData(res) {\r\n    // TODO\r\n    return [];\r\n  }\r\n\r\n  private extractHtmlData(res, htmlTarget: QueryHtmlTarget, url) {\r\n    // _blank , iframe or undefined\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const width = parseInt(searchParams.width, 10);\r\n    const height = parseInt(searchParams.height, 10);\r\n    const xPosition = parseInt(searchParams.i || searchParams.x, 10);\r\n    const yPosition = parseInt(searchParams.j || searchParams.y, 10);\r\n    const projection = searchParams.crs || searchParams.srs || 'EPSG:3857';\r\n\r\n    const bbox = bboxRaw.split(',');\r\n    let threshold =\r\n      (Math.abs(parseFloat(bbox[0])) - Math.abs(parseFloat(bbox[2]))) * 0.05;\r\n\r\n    // for context in degree (EPSG:4326,4269...)\r\n    if (Math.abs(parseFloat(bbox[0])) < 180) {\r\n      threshold = 0.045;\r\n    }\r\n\r\n    const clickx =\r\n      parseFloat(bbox[0]) +\r\n      (Math.abs(parseFloat(bbox[0]) - parseFloat(bbox[2])) * xPosition) /\r\n        width -\r\n      threshold;\r\n    const clicky =\r\n      parseFloat(bbox[1]) +\r\n      (Math.abs(parseFloat(bbox[1]) - parseFloat(bbox[3])) * yPosition) /\r\n        height -\r\n      threshold;\r\n    const clickx1 = clickx + threshold * 2;\r\n    const clicky1 = clicky + threshold * 2;\r\n\r\n    const wktPoly =\r\n      'POLYGON((' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      '))';\r\n\r\n    const format = new olformat.WKT();\r\n    const tenPercentWidthGeom = format.readFeature(wktPoly);\r\n    const f = tenPercentWidthGeom.getGeometry() as any;\r\n\r\n    if (\r\n      htmlTarget !== QueryHtmlTarget.BLANK &&\r\n      htmlTarget !== QueryHtmlTarget.IFRAME\r\n    ) {\r\n      htmlTarget = QueryHtmlTarget.IFRAME;\r\n    }\r\n\r\n    const bodyTagStart = res.toLowerCase().indexOf('<body>');\r\n    const bodyTagEnd = res.toLowerCase().lastIndexOf('</body>') + 7;\r\n    // replace \\r \\n  and ' ' with '' to validate if the body is really empty.\r\n    const body = res.slice(bodyTagStart, bodyTagEnd).replace(/(\\r|\\n|\\s)/g, '');\r\n    if (body === '<body></body>' || res === '') {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      {\r\n        type: FEATURE,\r\n        projection,\r\n        properties: { target: htmlTarget, body: res, url },\r\n        geometry: { type: f.getType(), coordinates: f.getCoordinates() }\r\n      }\r\n    ];\r\n  }\r\n\r\n  private getQueryParams(url) {\r\n    const queryString = url.split('?');\r\n    if (!queryString[1]) {\r\n      return;\r\n    }\r\n    const pairs = queryString[1].split('&');\r\n\r\n    const result = {};\r\n    pairs.forEach(pair => {\r\n      pair = pair.split('=');\r\n      result[pair[0]] = decodeURIComponent(pair[1] || '');\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private featureToResult(\r\n    featureOL: olFeature,\r\n    zIndex: number,\r\n    allowedFieldsAndAlias?\r\n  ): Feature {\r\n    const featureGeometry = featureOL.getGeometry() as any;\r\n    const properties: any = Object.assign({}, featureOL.getProperties());\r\n    delete properties.geometry;\r\n    delete properties.boundedBy;\r\n    delete properties.shape;\r\n    delete properties.SHAPE;\r\n    delete properties.the_geom;\r\n\r\n    let geometry;\r\n    if (featureGeometry !== undefined) {\r\n      geometry = {\r\n        type: featureGeometry.getType(),\r\n        coordinates: featureGeometry.getCoordinates()\r\n      };\r\n    }\r\n\r\n    return {\r\n      type: FEATURE,\r\n      projection: undefined,\r\n      properties,\r\n      geometry,\r\n      meta: {\r\n        id: uuid(),\r\n        order: 1000 - zIndex,\r\n        alias: allowedFieldsAndAlias\r\n      }\r\n    };\r\n  }\r\n\r\n  private getQueryUrl(\r\n    datasource: QueryableDataSource,\r\n    options: QueryOptions\r\n  ): string {\r\n    let url;\r\n    switch (datasource.constructor) {\r\n      case WMSDataSource:\r\n        const wmsDatasource = datasource as WMSDataSource;\r\n        url = wmsDatasource.ol.getGetFeatureInfoUrl(\r\n          options.coordinates,\r\n          options.resolution,\r\n          options.projection,\r\n          {\r\n            INFO_FORMAT:\r\n              wmsDatasource.params.info_format ||\r\n              this.getMimeInfoFormat(datasource.options.queryFormat),\r\n            QUERY_LAYERS: wmsDatasource.params.layers,\r\n            FEATURE_COUNT: wmsDatasource.params.feature_count || '5'\r\n          }\r\n        );\r\n        if (wmsDatasource.params.version !== '1.3.0') {\r\n          url = url.replace('&I=', '&X=');\r\n          url = url.replace('&J=', '&Y=');\r\n        }\r\n        break;\r\n      case CartoDataSource:\r\n        const cartoDatasource = datasource as CartoDataSource;\r\n        const baseUrl =\r\n          'https://' +\r\n          cartoDatasource.options.account +\r\n          '.carto.com/api/v2/sql?';\r\n        const format = 'format=GeoJSON';\r\n        const sql =\r\n          '&q=' + cartoDatasource.options.config.layers[0].options.sql;\r\n        const clause =\r\n          ' WHERE ST_Intersects(the_geom_webmercator,ST_BUFFER(ST_SetSRID(ST_POINT(';\r\n        const metres = cartoDatasource.options.queryPrecision\r\n          ? cartoDatasource.options.queryPrecision\r\n          : '1000';\r\n        const coordinates =\r\n          options.coordinates[0] +\r\n          ',' +\r\n          options.coordinates[1] +\r\n          '),3857),' +\r\n          metres +\r\n          '))';\r\n\r\n        url = `${baseUrl}${format}${sql}${clause}${coordinates}`;\r\n        break;\r\n      case TileArcGISRestDataSource:\r\n        const tileArcGISRestDatasource = datasource as TileArcGISRestDataSource;\r\n        let extent = olextent.boundingExtent([options.coordinates]);\r\n        if (tileArcGISRestDatasource.options.queryPrecision) {\r\n          extent = olextent.buffer(\r\n            extent,\r\n            tileArcGISRestDatasource.options.queryPrecision\r\n          );\r\n        }\r\n        const serviceUrl =\r\n          tileArcGISRestDatasource.options.url +\r\n          '/' +\r\n          tileArcGISRestDatasource.options.layer +\r\n          '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        url = `${serviceUrl}?${params.join('&')}`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  private getMimeInfoFormat(queryFormat) {\r\n    let mime;\r\n    switch (queryFormat) {\r\n      case QueryFormat.GML2:\r\n        mime = 'application/vnd.ogc.gml';\r\n        break;\r\n      case QueryFormat.GML3:\r\n        mime = 'application/vnd.ogc.gml/3.1.1';\r\n        break;\r\n      case QueryFormat.JSON:\r\n        mime = 'application/json';\r\n        break;\r\n      case QueryFormat.GEOJSON:\r\n        mime = 'application/geojson';\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        mime = 'text/plain';\r\n        break;\r\n      case QueryFormat.HTML:\r\n        mime = 'text/html';\r\n        break;\r\n      default:\r\n        mime = 'application/vnd.ogc.gml';\r\n        break;\r\n    }\r\n\r\n    return mime;\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Self\r\n} from '@angular/core';\r\n\r\nimport { Subscription, Observable, of, zip } from 'rxjs';\r\n\r\nimport OlFeature from 'ol/Feature';\r\nimport OlLayer from 'ol/layer/Layer';\r\n\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { featureFromOl } from '../../feature/shared/feature.utils';\r\nimport { QueryService } from './query.service';\r\nimport { layerIsQueryable, olLayerIsQueryable } from './query.utils';\r\n\r\n/**\r\n * This directive makes a map queryable with a click of with a drag box.\r\n * By default, all layers are queryable but this cna ben controlled at\r\n * the layer level.\r\n */\r\n@Directive({\r\n  selector: '[igoQuery]'\r\n})\r\nexport class QueryDirective implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * Subscriptions to ongoing queries\r\n   */\r\n  private queries$$: Subscription[] = [];\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * OL drag box interaction\r\n   */\r\n  private olDragBoxInteraction: OlDragBoxInteraction;\r\n\r\n  /**\r\n   * Ol drag box \"end\" event key\r\n   */\r\n  private olDragBoxInteractionEndKey: string;\r\n\r\n  /**\r\n   * Whter to query features or not\r\n   */\r\n  @Input() queryFeatures: boolean = true;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesHitTolerance: number = 0;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesCondition: (olLayer: OlLayer) => true;\r\n\r\n  /**\r\n   * Whether all query should complete before emitting an event\r\n   */\r\n  @Input() waitForAllQueries: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when a query (or all queries) complete\r\n   */\r\n  @Output() query = new EventEmitter<{\r\n    features: Feature[] | Feature[][];\r\n    event: OlMapBrowserPointerEvent;\r\n  }>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return (this.component.map as any) as IgoMap;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private queryService: QueryService\r\n  ) {}\r\n\r\n  /**\r\n   * Start listening to click and drag box events\r\n   * @internal\r\n   */\r\n  ngAfterViewInit() {\r\n    this.listenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to click and drag box events and cancel ongoind requests\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.cancelOngoingQueries();\r\n    this.unlistenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * On map click, issue queries\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onMapEvent(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stop listenig for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Issue queries from a map event and emit events with the results\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onMapEvent(event: OlMapBrowserPointerEvent) {\r\n    this.cancelOngoingQueries();\r\n    if (!this.queryService.queryEnabled) {\r\n      return;\r\n    }\r\n\r\n    const queries$ = [];\r\n    if (this.queryFeatures) {\r\n      queries$.push(this.doQueryFeatures(event));\r\n    }\r\n    console.log(queries$);\r\n\r\n    const resolution = this.map.ol.getView().getResolution();\r\n    const queryLayers = this.map.layers.filter(layerIsQueryable);\r\n    queries$.push(...this.queryService.query(queryLayers, {\r\n      coordinates: event.coordinate,\r\n      projection: this.map.projection,\r\n      resolution\r\n    }));\r\n\r\n    if (queries$.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.waitForAllQueries) {\r\n      this.queries$$.push(\r\n        zip(...queries$).subscribe((results: Feature[][]) => {\r\n          const features = [].concat(...results);\r\n          console.log(results);\r\n          console.log(features);\r\n          this.query.emit({ features, event });\r\n        })\r\n      );\r\n    } else {\r\n      this.queries$$ = queries$.map((query$: Observable<Feature[]>) => {\r\n        return query$.subscribe((features: Feature[]) => {\r\n          console.log(features);\r\n          this.query.emit({ features, event });\r\n        });\r\n      });\r\n    }\r\n    console.log(this.queries$$);\r\n    console.log(this.query);\r\n  }\r\n\r\n  /**\r\n   * Query features already present on the map\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private doQueryFeatures(event: OlMapBrowserPointerEvent): Observable<Feature[]> {\r\n\r\n    let feature;\r\n    let featuresTileCoverage;\r\n    const clickedFeatures = [];\r\n\r\n    this.map.ol.forEachFeatureAtPixel(\r\n      event.pixel,\r\n      (featureOL: OlFeature, layerOL: OlLayer) => {\r\n        if (featureOL) {\r\n          if (featureOL.get('features')) {\r\n            featureOL = featureOL.get('features')[0];\r\n            console.log(featureOL);\r\n            if (featureOL.length > 1) {\r\n              return;\r\n            }\r\n          }\r\n          feature = featureFromOl(featureOL, this.map.projection, layerOL);\r\n          clickedFeatures.push(feature);\r\n          console.log(layerOL);\r\n\r\n          if (feature.meta.typeSource === 'mvt') {\r\n            const sameDataTileFeatures = this.sameDataTilesFeature(feature, layerOL);\r\n            for (const sameDataTileFeature of sameDataTileFeatures) {\r\n              featuresTileCoverage = featureFromOl(sameDataTileFeature, this.map.projection);\r\n              clickedFeatures.push(featuresTileCoverage);\r\n            }\r\n          }\r\n\r\n        } else {\r\n          feature = featureFromOl(featureOL, this.map.projection, layerOL);\r\n          clickedFeatures.push(feature);\r\n        }\r\n        console.log(layerOL);\r\n        console.log(feature);\r\n      },\r\n    {\r\n      hitTolerance: this.queryFeaturesHitTolerance || 0,\r\n      layerFilter: this.queryFeaturesCondition ? this.queryFeaturesCondition : olLayerIsQueryable\r\n    });\r\n\r\n    const clickedFeature = clickedFeatures.shift();\r\n    clickedFeatures.shift();\r\n    clickedFeatures.push(clickedFeature);\r\n\r\n    console.log(clickedFeatures);\r\n    return of(clickedFeatures);\r\n  }\r\n\r\n  /**\r\n   * Cancel ongoing requests, if any\r\n   */\r\n  private cancelOngoingQueries() {\r\n    this.queries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.queries$$ = [];\r\n  }\r\n\r\n  private getTiles(tileCacheEntries, olFeature, data): Feature[] {\r\n    let tile;\r\n    const list = [];\r\n    Object.keys(tileCacheEntries).forEach(tileCoord => {\r\n      tile = tileCacheEntries[tileCoord];\r\n      if (tile.features_ !== null) {\r\n        tile.features_.forEach(feature => {\r\n          if (feature.get(data) === olFeature.properties[data]) {\r\n            list.push(feature);\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return list;\r\n  }\r\n\r\n  private sameDataTilesFeature(feature: Feature, layer: any): Feature[] {\r\n    let sameDataTilesFeature;\r\n    let tileCacheEntries;\r\n    const data = layer.values_.sourceOptions.key;\r\n    tileCacheEntries = layer.values_.source.tileCache.entries_;\r\n    const tile = Object.keys(tileCacheEntries)[0];\r\n    tileCacheEntries = tileCacheEntries[tile].value_.sourceTiles_;\r\n    sameDataTilesFeature = this.getTiles(tileCacheEntries, feature, data);\r\n\r\n    console.log(sameDataTilesFeature);\r\n    return sameDataTilesFeature;\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\n\r\n/**\r\n * Base search source class\r\n */\r\nexport class SearchSource {\r\n  /**\r\n   * Search source ID\r\n   * @internal\r\n   */\r\n  static id = '';\r\n\r\n  /**\r\n   * Search source type\r\n   * @internal\r\n   */\r\n  static type = '';\r\n\r\n  /**\r\n   * Search source options\r\n   * @internal\r\n   */\r\n  protected options: SearchSourceOptions;\r\n\r\n  /**\r\n   * Get search source's id\r\n   * @returns Search source's id\r\n   */\r\n  getId(): string {\r\n    throw new Error('You have to implement the method \"getId\".');\r\n  }\r\n\r\n  /**\r\n   * Get search source's default options\r\n   * @returns Search source default options\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    throw new Error('You have to implement the method \"getDefaultOptions\".');\r\n  }\r\n\r\n  /**\r\n   * Search source's title\r\n   */\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is available\r\n   */\r\n  get available(): boolean {\r\n    return this.options.available !== false;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is enabled\r\n   */\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  get enabled(): boolean {\r\n    return this.available && this.options.enabled !== false;\r\n  }\r\n\r\n  /**\r\n   * Search url\r\n   */\r\n  get searchUrl(): string {\r\n    return this.options.searchUrl;\r\n  }\r\n\r\n  /**\r\n   * Search query params\r\n   */\r\n  get params(): { [key: string]: string } {\r\n    return this.options.params === undefined ? {} : this.options.params;\r\n  }\r\n\r\n  /**\r\n   * Search results display order\r\n   */\r\n  get displayOrder(): number {\r\n    return this.options.order === undefined ? 99 : this.options.order;\r\n  }\r\n\r\n  constructor(options: SearchSourceOptions) {\r\n    this.options = Object.assign({}, this.getDefaultOptions(), options);\r\n  }\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by text implement this class\r\n */\r\nexport interface TextSearch {\r\n  /**\r\n   * Search by text\r\n   * @param term Text\r\n   * @returns Observable or search results\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by coordinates implement this class\r\n */\r\nexport interface ReverseSearch {\r\n  /**\r\n   * Search by text\r\n   * @param lonLat Coordinates\r\n   * @param distance Optional: Search radius arounf lonLat\r\n   * @returns Observable or search results\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\nimport { SearchSourceOptions } from '../../search/shared/sources/source.interfaces';\r\n/**\r\n * Map search source. For now it has no search capability. All it does\r\n * is act as a placeholder for the map query results' \"search source\".\r\n */\r\n@Injectable()\r\nexport class QuerySearchSource extends SearchSource {\r\n  static id = 'map';\r\n  static type = FEATURE;\r\n\r\n  constructor(@Inject('options') options: SearchSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return QuerySearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Carte'\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { EMPTY, Observable, of, concat } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { LanguageService, ConfigService } from '@igo2/core';\r\nimport {\r\n  CapabilitiesService,\r\n  WMSDataSourceOptions,\r\n  WMTSDataSourceOptions,\r\n  generateIdFromSourceOptions\r\n} from '../../datasource';\r\nimport { LayerOptions, ImageLayerOptions, TooltipContent, TooltipType } from '../../layer';\r\nimport { getResolutionFromScale } from '../../map';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup\r\n} from './catalog.interface';\r\nimport { CatalogItemType } from './catalog.enum';\r\nimport { QueryHtmlTarget, QueryFormat } from '../../query';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CatalogService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private config: ConfigService,\r\n    private languageService: LanguageService,\r\n    private capabilitiesService: CapabilitiesService\r\n  ) {}\r\n\r\n  loadCatalogs(): Observable<Catalog[]> {\r\n    const contextConfig = this.config.getConfig('context') || {};\r\n    const catalogConfig = this.config.getConfig('catalog') || {};\r\n    const apiUrl = catalogConfig.url || contextConfig.url;\r\n    const catalogsFromConfig = catalogConfig.sources || [];\r\n\r\n    if (apiUrl === undefined) {\r\n      return of(catalogsFromConfig);\r\n    }\r\n\r\n    const observables$ = [];\r\n\r\n    // Base layers catalog\r\n    if (catalogConfig.baseLayers) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.catalog.baseLayers');\r\n      const baseLayersCatalog = {\r\n        id: 'catalog.baselayers',\r\n        title,\r\n        url: `${apiUrl}/baselayers`,\r\n        type: 'baselayers'\r\n      };\r\n      observables$.push(of(baseLayersCatalog));\r\n    }\r\n\r\n    // Catalogs from API\r\n    const catalogsFromApi$ = this.http\r\n      .get<Catalog[]>(`${apiUrl}/catalogs`)\r\n      .pipe(\r\n        catchError((response: HttpErrorResponse) => EMPTY)\r\n      );\r\n    observables$.push(catalogsFromApi$);\r\n\r\n    // Catalogs from config\r\n    if (catalogsFromConfig.length > 0) {\r\n      observables$.push(of(catalogsFromConfig));\r\n    }\r\n\r\n    return concat(...observables$) as Observable<Catalog[]>;\r\n  }\r\n\r\n  loadCatalogItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    if (catalog.type === 'baselayers') {\r\n      return this.loadCatalogBaseLayerItems(catalog);\r\n    } else if (catalog.type === 'wmts') {\r\n      return this.loadCatalogWMTSLayerItems(catalog);\r\n    }\r\n    return this.loadCatalogWMSLayerItems(catalog);\r\n  }\r\n\r\n  private loadCatalogBaseLayerItems(catalog: Catalog): Observable<CatalogItemGroup[]> {\r\n    // TODO: I'm not sure this works\r\n    return this.getCatalogBaseLayersOptions(catalog)\r\n      .pipe(\r\n        map((layersOptions: LayerOptions[]) => {\r\n          const items = layersOptions.map((layerOptions: LayerOptions) => {\r\n            return {\r\n              id: generateIdFromSourceOptions(layerOptions.sourceOptions),\r\n              title: layerOptions.title,\r\n              type: CatalogItemType.Layer,\r\n              options: layerOptions\r\n            } as CatalogItemLayer;\r\n          });\r\n          return [{\r\n            id: 'catalog.group.baselayers',\r\n            type: CatalogItemType.Group,\r\n            title: catalog.title,\r\n            items\r\n          }];\r\n        })\r\n      );\r\n  }\r\n\r\n  private getCatalogBaseLayersOptions(catalog: Catalog): Observable<LayerOptions[]> {\r\n    return this.http.get<LayerOptions[]>(catalog.url);\r\n  }\r\n\r\n  private loadCatalogWMSLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    return this.getCatalogWMSCapabilities(catalog)\r\n      .pipe(\r\n        map((capabilities: any) => {\r\n          const items = [];\r\n          this.includeRecursiveItems(catalog, capabilities.Capability.Layer, items);\r\n          return items;\r\n        })\r\n      );\r\n  }\r\n\r\n  private loadCatalogWMTSLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    return this.getCatalogWMTSCapabilities(catalog)\r\n      .pipe(\r\n        map((capabilities: any) => this.getWMTSItems(catalog, capabilities))\r\n      );\r\n  }\r\n\r\n  private getCatalogWMSCapabilities(catalog: Catalog): Observable<any> {\r\n    return this.capabilitiesService.getCapabilities('wms', catalog.url, catalog.version);\r\n  }\r\n\r\n  private getCatalogWMTSCapabilities(catalog: Catalog): Observable<any> {\r\n    return this.capabilitiesService.getCapabilities('wmts', catalog.url, catalog.version);\r\n  }\r\n\r\n  private includeRecursiveItems(catalog: Catalog, layerList: any, items: CatalogItem[]) {\r\n    // Dig all levels until last level (layer object are not defined on last level)\r\n    const regexes = (catalog.regFilters || []).map((pattern: string) => new RegExp(pattern));\r\n\r\n    for (const group of layerList.Layer) {\r\n      if (group.Layer !== undefined) {\r\n        // recursive, check next level\r\n        this.includeRecursiveItems(catalog, group, items);\r\n        continue;\r\n      }\r\n      const catalogTooltipType = this.retrieveTooltipType(catalog);\r\n      const layersQueryFormat = this.findCatalogInfoFormat(catalog);\r\n      // TODO: Slice that into multiple methods\r\n      // Define object of group layer\r\n      const groupItem = {\r\n        id: `catalog.group.${layerList.Name}`,\r\n        type: CatalogItemType.Group,\r\n        title: layerList.Title,\r\n        items: layerList.Layer.reduce((layers: CatalogItemLayer<ImageLayerOptions>[], layer: any) => {\r\n          const configuredQueryFormat = this.retriveLayerInfoFormat(layer.Name, layersQueryFormat);\r\n\r\n          if (this.testLayerRegexes(layer.Name, regexes) === false) {\r\n            return layers;\r\n          }\r\n\r\n          const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n          const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n          const keywordList = layer.KeywordList ? layer.KeywordList : undefined;\r\n          const timeFilter = this.capabilitiesService.getTimeFilter(layer);\r\n          const timeFilterable = timeFilter && Object.keys(timeFilter).length > 0 ? true : false;\r\n\r\n          const sourceOptions = {\r\n            type: 'wms',\r\n            url: catalog.url,\r\n            params: {\r\n              layers: layer.Name,\r\n              feature_count:  catalog.count\r\n            },\r\n            timeFilter: { ...timeFilter, ...catalog.timeFilter },\r\n            timeFilterable: timeFilterable ? true : false,\r\n            queryable: layer.queryable,\r\n            queryFormat: configuredQueryFormat,\r\n            queryHtmlTarget: catalog.queryHtmlTarget || QueryHtmlTarget.IFRAME\r\n          } as WMSDataSourceOptions;\r\n\r\n          layers.push({\r\n            id: generateIdFromSourceOptions(sourceOptions),\r\n            type: CatalogItemType.Layer,\r\n            title: layer.Title,\r\n            options: {\r\n              title: layer.Title,\r\n              maxResolution:\r\n                getResolutionFromScale(layer.MaxScaleDenominator) || Infinity,\r\n              minResolution:\r\n                getResolutionFromScale(layer.MinScaleDenominator) || 0,\r\n              metadata: {\r\n                url: metadata ? metadata.OnlineResource : undefined,\r\n                extern: metadata ? true : undefined,\r\n                abstract,\r\n                keywordList\r\n              },\r\n              tooltip: { type: catalogTooltipType } as TooltipContent,\r\n              sourceOptions\r\n            }\r\n          });\r\n          return layers;\r\n\r\n        }, [])\r\n\r\n      };\r\n\r\n      if (groupItem.items.length !== 0) {\r\n        items.push(groupItem);\r\n      }\r\n\r\n      // Break the group (don't add a group of layer for each of their layer!)\r\n      break;\r\n    }\r\n  }\r\n\r\n  private getWMTSItems(catalog: Catalog, capabilities: {[key: string]: any}): CatalogItemLayer[] {\r\n    const layers = capabilities.Contents.Layer;\r\n    const regexes = (catalog.regFilters || []).map((pattern: string) => new RegExp(pattern));\r\n\r\n    return layers.map((layer: any) => {\r\n      if (this.testLayerRegexes(layer.Identifier, regexes) === false) {\r\n        return undefined;\r\n      }\r\n\r\n      const sourceOptions = {\r\n        type: 'wmts',\r\n        url: catalog.url,\r\n        layer: layer.Identifier,\r\n        matrixSet: catalog.matrixSet,\r\n        optionsFromCapabilities: true,\r\n        requestEncoding: catalog.requestEncoding || 'KVP',\r\n        style: 'default',\r\n        params: {\r\n          version: '1.0.0'\r\n        }\r\n      } as WMTSDataSourceOptions;\r\n\r\n      return {\r\n        id: generateIdFromSourceOptions(sourceOptions),\r\n        type: CatalogItemType.Layer,\r\n        title: layer.Title,\r\n        options: {\r\n          title: layer.Title,\r\n          sourceOptions\r\n        }\r\n      };\r\n    })\r\n    .filter((item: CatalogItemLayer | undefined) => item !== undefined);\r\n  }\r\n\r\n  private testLayerRegexes(layerName, regexes): boolean {\r\n    if (regexes.length === 0) {\r\n      return true;\r\n    }\r\n    return regexes.find((regex: RegExp) => regex.test(layerName)) !== undefined;\r\n  }\r\n\r\n  private retriveLayerInfoFormat(\r\n    layerNameFromCatalog: string,\r\n    layersQueryFormat: { layer: string, queryFormat: QueryFormat }[]\r\n  ): QueryFormat {\r\n\r\n    const currentLayerInfoFormat = layersQueryFormat.find(f => f.layer === layerNameFromCatalog);\r\n    const baseInfoFormat = layersQueryFormat.find(f => f.layer === '*');\r\n    let queryFormat: QueryFormat;\r\n    if (currentLayerInfoFormat) {\r\n      queryFormat = currentLayerInfoFormat.queryFormat;\r\n    } else if (baseInfoFormat) {\r\n      queryFormat = baseInfoFormat.queryFormat;\r\n    }\r\n    return queryFormat;\r\n  }\r\n\r\n  private retrieveTooltipType(catalog: Catalog): TooltipType {\r\n    if (!catalog.tooltipType) {\r\n      return TooltipType.TITLE;\r\n    }\r\n    return catalog.tooltipType;\r\n  }\r\n\r\n  private findCatalogInfoFormat(catalog: Catalog): {layer: string, queryFormat: QueryFormat}[] {\r\n    const layersQueryFormat: {layer: string, queryFormat: QueryFormat}[] = [];\r\n    if (!catalog.queryFormat) {\r\n      return layersQueryFormat;\r\n    }\r\n    Object.keys(catalog.queryFormat).forEach(configuredInfoFormat => {\r\n      if (catalog.queryFormat[configuredInfoFormat] instanceof Array) {\r\n        catalog.queryFormat[configuredInfoFormat].forEach(layerName => {\r\n          if (!layersQueryFormat.find(specific => specific.layer === layerName)) {\r\n            layersQueryFormat.push({ layer: layerName, queryFormat: configuredInfoFormat as QueryFormat });\r\n          }\r\n        });\r\n      } else {\r\n        if (!layersQueryFormat.find(specific => specific.layer === catalog.queryFormat[configuredInfoFormat])) {\r\n          layersQueryFormat.push({ layer: catalog.queryFormat[configuredInfoFormat], queryFormat: configuredInfoFormat as QueryFormat });\r\n        }\r\n      }\r\n    });\r\n    return layersQueryFormat;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { zip } from 'rxjs';\r\n\r\nimport { EntityStore, EntityStoreWatcher } from '@igo2/common';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Component to browse a catalog's groups and layers and display them on a map.\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser',\r\n  templateUrl: './catalog-browser.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Catalog items store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<CatalogItem>;\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Store holding the catalog's items\r\n   */\r\n  @Input() store: EntityStore<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  constructor(\r\n    private layerService: LayerService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    const currentItems = this.map.layers.map((layer: Layer) => {\r\n      return {\r\n        id: layer.id,\r\n        title: layer.title,\r\n        type: CatalogItemType.Layer\r\n      };\r\n    });\r\n    this.store.state.updateMany(currentItems, { added: true }, true);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Layer added event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const layer = event.layer;\r\n    this.store.state.update(layer, { added: event.added }, false);\r\n    event.added ? this.addLayerToMap(layer) : this.removeLayerFromMap(layer);\r\n  }\r\n\r\n  /**\r\n   * When a froup is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Group added event\r\n   */\r\n  onGroupAddedChange(event: { added: boolean; group: CatalogItemGroup }) {\r\n    const group = event.group;\r\n    this.store.state.update(group, { added: event.added }, false);\r\n    event.added ? this.addGroupToMap(group) : this.removeGroupFromMap(group);\r\n  }\r\n\r\n  /**\r\n   * Add layer to map\r\n   * @param layer Catalog layer\r\n   */\r\n  private addLayerToMap(layer: CatalogItemLayer) {\r\n    this.addLayersToMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove layer from map\r\n   * @param layer Catalog layer\r\n   */\r\n  private removeLayerFromMap(layer: CatalogItemLayer) {\r\n    this.removeLayersFromMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add multiple layers to map\r\n   * @param layers Catalog layers\r\n   */\r\n  private addLayersToMap(layers: CatalogItemLayer[]) {\r\n    const layers$ = layers.map((layer: CatalogItemLayer) => {\r\n      return this.layerService.createAsyncLayer(layer.options);\r\n    });\r\n\r\n    zip(...layers$).subscribe((oLayers: Layer[]) => {\r\n      this.store.state.updateMany(layers, { added: true });\r\n      this.map.addLayers(oLayers);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove multiple layers from map\r\n   * @param layers Catalog layers\r\n   */\r\n  private removeLayersFromMap(layers: CatalogItemLayer[]) {\r\n    layers.forEach((layer: CatalogItemLayer) => {\r\n      this.store.state.update(layer, { added: false });\r\n      const oLayer = this.map.getLayerById(layer.id);\r\n      if (oLayer !== undefined) {\r\n        this.map.removeLayer(oLayer);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add all the layers of a group to map\r\n   * @param group Catalog group\r\n   */\r\n  private addGroupToMap(group: CatalogItemGroup) {\r\n    const layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === false;\r\n    });\r\n    this.addLayersToMap(layers as CatalogItemLayer[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all the layers of a groufrom map\r\n   * @param group Catalog group\r\n   */\r\n  private removeGroupFromMap(group: CatalogItemGroup) {\r\n    const layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === true;\r\n    });\r\n    this.removeLayersFromMap(layers as CatalogItemLayer[]);\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { CatalogItemLayer } from '../shared';\r\n\r\n/**\r\n * Catalog browser layer item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-layer',\r\n  templateUrl: './catalog-browser-layer.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserLayerComponent {\r\n\r\n  /**\r\n   * Catalog layer\r\n   */\r\n  @Input() layer: CatalogItemLayer;\r\n\r\n  /**\r\n   * Whether the layer is already added to the map\r\n   */\r\n  @Input() added: boolean;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.layer); }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string { return getEntityIcon(this.layer) || 'layers'; }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added ? this.remove() : this.add();\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    this.added = true;\r\n    this.addedChange.emit({added: true, layer: this.layer});\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = false\r\n   */\r\n  private remove() {\r\n    this.added = false;\r\n    this.addedChange.emit({added: false, layer: this.layer});\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStateManager, EntityStore } from '@igo2/common';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemGroup,\r\n  CatalogItemLayer,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Catalog browser group item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-group',\r\n  templateUrl: './catalog-browser-group.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserGroupComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Group's items store\r\n   * @internal\r\n   */\r\n  store = new EntityStore<CatalogItem, CatalogItemState>([]);\r\n\r\n  /**\r\n   * Whether all the layers of the group are added\r\n   * @internal\r\n   */\r\n  added$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Catalog group\r\n   */\r\n  @Input() group: CatalogItemGroup;\r\n\r\n  /**\r\n   * Parent catalog's items store state. Groups share a unique\r\n   * EntityState that tracks the group and it's layers state (whether they are added or not).\r\n   * Sharing a unique state would also allow us to expand this component to allow\r\n   * the selection of a layer while unselecting any layer already selected in another group.\r\n   * This could be useful to display some layer info before adding it, for example.\r\n   */\r\n  @Input() state: EntityStateManager<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of the group is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    group: CatalogItemGroup;\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of a layer is clicked\r\n   */\r\n  @Output() layerAddedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return this.group.title;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.load(this.group.items);\r\n    this.evaluateAdded();\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.store.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added$.value ? this.remove() : this.add();\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, evaluate if all the layers of the group\r\n   * are now added or removed. If so, consider that the group itself is added\r\n   * or removed.\r\n   * @internal\r\n   * @param event Layer added change event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    this.layerAddedChange.emit(event);\r\n    this.tryToggleGroup(event);\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    this.added$.next(true);\r\n    this.addedChange.emit({\r\n      added: true,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private remove() {\r\n    this.added$.next(false);\r\n    this.addedChange.emit({\r\n      added: false,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If all the layers of the group added or removed, add or remove the group itself.\r\n   * @param event The last layer added change event to occur\r\n   */\r\n  private tryToggleGroup(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const added = event.added;\r\n    const layer = event.layer;\r\n\r\n    const layersAdded = this.store.view\r\n      .all()\r\n      .filter((item: CatalogItem) => item.id !== layer.id)\r\n      .map((item: CatalogItem) => this.state.get(item).added || false);\r\n\r\n    if (layersAdded.every(value => value === added)) {\r\n      added ? this.add() : this.remove();\r\n    } else if (this.added$.value === true) {\r\n      this.added$.next(false);\r\n    }\r\n  }\r\n\r\n  private evaluateAdded() {\r\n    const added = this.store.all().every((item: CatalogItem) => {\r\n      return (this.state.get(item).added || false) === true;\r\n    });\r\n    this.added$.next(added);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule\r\n} from '@igo2/common';\r\n\r\nimport { CatalogBrowserComponent } from './catalog-browser.component';\r\nimport { CatalogBrowserLayerComponent } from './catalog-browser-layer.component';\r\nimport { CatalogBrowserGroupComponent } from './catalog-browser-group.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule\r\n  ],\r\n  exports: [\r\n    CatalogBrowserComponent\r\n  ],\r\n  declarations: [\r\n    CatalogBrowserComponent,\r\n    CatalogBrowserGroupComponent,\r\n    CatalogBrowserLayerComponent\r\n  ]\r\n})\r\nexport class IgoCatalogBrowserModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { EntityStore } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\nimport { Catalog } from '../shared/catalog.interface';\r\n\r\n/**\r\n * Component to browse a list of available catalogs\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library',\r\n  templateUrl: './catalog-library.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryComponent implements OnInit {\r\n\r\n  /**\r\n   * Store holding the catalogs\r\n   */\r\n  @Input() store: EntityStore<Catalog>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted a catalog is selected or unselected\r\n   */\r\n  @Output() catalogSelectChange = new EventEmitter<{\r\n    selected: boolean;\r\n    catalog: Catalog;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.state.clear();\r\n  }\r\n\r\n  /**\r\n   * When a catalog is selected, update it's state in the store\r\n   * and emit the catalog select change event\r\n   * @internal\r\n   */\r\n  onCatalogSelect(catalog: Catalog) {\r\n    this.store.state.update(catalog, {\r\n      selected: true,\r\n      focused: true\r\n    }, true);\r\n    this.catalogSelectChange.emit({selected: true, catalog});\r\n  }\r\n\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { Catalog } from '../shared/catalog.interface';\r\n\r\n/**\r\n * Catalog library item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library-item',\r\n  templateUrl: './catalog-library-item.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryItemComponent {\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.catalog); }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string { return getEntityIcon(this.catalog) || 'image-multiple'; }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule } from '@igo2/common';\r\n\r\nimport { CatalogLibaryComponent, } from './catalog-library.component';\r\nimport { CatalogLibaryItemComponent } from './catalog-library-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoListModule\r\n  ],\r\n  exports: [\r\n    CatalogLibaryComponent\r\n  ],\r\n  declarations: [\r\n    CatalogLibaryComponent,\r\n    CatalogLibaryItemComponent\r\n  ]\r\n})\r\nexport class IgoCatalogLibraryModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule, IgoCollapsibleModule } from '@igo2/common';\r\n\r\nimport { IgoCatalogBrowserModule } from './catalog-browser/catalog-browser.module';\r\nimport { IgoCatalogLibraryModule } from './catalog-library/catalog-library.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule\r\n  ],\r\n  exports: [\r\n    IgoCatalogBrowserModule,\r\n    IgoCatalogLibraryModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoCatalogModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoDataSourceModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDataSourceModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DataSource } from '../../datasource/shared/datasources/datasource';\r\n\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\nimport { TimeFilterableDataSource } from './time-filter.interface';\r\n\r\n@Pipe({\r\n  name: 'filterableDataSource'\r\n})\r\nexport class FilterableDataSourcePipe implements PipeTransform {\r\n  transform(value: Layer[], arg: string): Layer[] {\r\n    let layers;\r\n\r\n    if (arg === 'time') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as TimeFilterableDataSource;\r\n        return (\r\n          this.isTimeFilterable(datasource) &&\r\n          datasource.options.timeFilter !== undefined &&\r\n          Object.keys(datasource.options.timeFilter).length\r\n        );\r\n      });\r\n    }\r\n    if (arg === 'ogc') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as OgcFilterableDataSource;\r\n        return this.isOgcFilterable(datasource);\r\n      });\r\n    }\r\n    return layers;\r\n  }\r\n\r\n  private isTimeFilterable(dataSource: TimeFilterableDataSource) {\r\n    if (dataSource.options.type !== 'wms') {\r\n      return false;\r\n    }\r\n    return dataSource.options.timeFilterable;\r\n  }\r\n\r\n  private isOgcFilterable(dataSource: OgcFilterableDataSource) {\r\n    if (\r\n      dataSource.options.ogcFilters &&\r\n      dataSource.options.ogcFilters.enabled\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { TileArcGISRestDataSource } from '../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\n@Injectable()\r\nexport class TimeFilterService {\r\n  constructor() {}\r\n\r\n  filterByDate(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    date: Date | [Date, Date]\r\n  ) {\r\n    let time;\r\n    let newdateform;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(date)) {\r\n      const dates = [];\r\n      if (date[0]) {\r\n        newdateformStart = this.reformatDateTime(date[0]);\r\n        dates.push(date[0]);\r\n      }\r\n      if (date[1]) {\r\n        newdateformEnd = this.reformatDateTime(date[1]);\r\n        dates.push(date[1]);\r\n      }\r\n      if (dates.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else if (date) {\r\n      newdateform = this.reformatDateTime(date);\r\n      time = newdateform;\r\n    }\r\n\r\n    const params = { time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  filterByYear(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    year: string | [string, string]\r\n  ) {\r\n    let time;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(year)) {\r\n      const years = [];\r\n      if (year[0]) {\r\n        newdateformStart = year[0];\r\n        years.push(year[0]);\r\n      }\r\n      if (year[1]) {\r\n        newdateformEnd = year[1];\r\n        years.push(year[1]);\r\n      }\r\n      if (years.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else if (year) {\r\n      time = year;\r\n    }\r\n\r\n    const params = { time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  private reformatDateTime(value) {\r\n    const year = value.getFullYear();\r\n    let month = value.getMonth() + 1;\r\n    let day = value.getUTCDate();\r\n    let hour = value.getUTCHours();\r\n    let minute = value.getUTCMinutes();\r\n\r\n    if (Number(month) < 10) {\r\n      month = '0' + month;\r\n    }\r\n\r\n    if (Number(day) < 10) {\r\n      day = '0' + day;\r\n    }\r\n\r\n    if (Number(hour) < 10) {\r\n      hour = '0' + hour;\r\n    }\r\n\r\n    if (Number(minute) < 10) {\r\n      minute = '0' + minute;\r\n    }\r\n\r\n    return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':00Z';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { WFSDataSourceOptions } from '../../datasource/shared/datasources/wfs-datasource.interface';\r\nimport { OgcFilterWriter } from './ogc-filter';\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\n\r\n@Injectable()\r\nexport class OGCFilterService {\r\n  constructor() {}\r\n\r\n  public filterByOgc(wmsDatasource: WMSDataSource, filterString: string) {\r\n    const appliedFilter = wmsDatasource.formatProcessedOgcFilter(filterString, wmsDatasource.options.params.layers);\r\n    const wmsFilterValue = appliedFilter.length > 0\r\n        ? appliedFilter.replace('filter=', '')\r\n        : undefined;\r\n    wmsDatasource.ol.updateParams({ filter: wmsFilterValue });\r\n  }\r\n\r\n  public setOgcWFSFiltersOptions(wfsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wfsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.paramsWFS.fieldNameGeometry,\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          options.ogcFilters.filters,\r\n          options.paramsWFS.fieldNameGeometry\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public setOgcWMSFiltersOptions(wmsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wmsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.fieldNameGeometry,\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          // With some wms server, this param must be set to make spatials call.\r\n          options.ogcFilters.filters,\r\n          options.fieldNameGeometry\r\n        );\r\n      }\r\n      this.filterByOgc(\r\n        wmsDatasource as WMSDataSource,\r\n        ogcFilterWriter.buildFilter(options.ogcFilters.filters)\r\n      );\r\n      options.filtered = true;\r\n    } else {\r\n      options.ogcFilters.filters = undefined;\r\n      options.ogcFilters.interfaceOgcFilters = [];\r\n      options.filtered = false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { OgcFilterWriter } from '../../filter/shared';\r\n\r\nimport { DataSourceOptions } from '../../datasource/shared/datasources/datasource.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DownloadService {\r\n  private ogcFilterWriter: OgcFilterWriter;\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService\r\n  ) {\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n  }\r\n\r\n  open(layer: Layer) {\r\n    const translate = this.languageService.translate;\r\n    const title = translate.instant('igo.geo.download.title');\r\n    this.messageService.success(\r\n      translate.instant('igo.geo.download.start'),\r\n      title\r\n    );\r\n\r\n    const DSOptions: DataSourceOptions = layer.dataSource.options;\r\n    if (Object.keys(DSOptions.download).length > 0) {\r\n      if (\r\n        DSOptions.download.dynamicUrl &&\r\n        DSOptions.download.url === undefined\r\n      ) {\r\n        let wfsOptions;\r\n        if (\r\n          (layer.dataSource.options as any).paramsWFS &&\r\n          Object.keys((layer.dataSource.options as any).paramsWFS).length > 0\r\n        ) {\r\n          wfsOptions = (layer.dataSource.options as any).paramsWFS;\r\n        } else {\r\n          wfsOptions = (layer.dataSource.options as any).params;\r\n        }\r\n\r\n        const outputFormatDownload =\r\n          wfsOptions.outputFormatDownload === undefined\r\n            ? 'outputformat=' + wfsOptions.outputFormat\r\n            : 'outputformat=' + wfsOptions.outputFormatDownload;\r\n\r\n        const baseurl = DSOptions.download.dynamicUrl\r\n          .replace(/&?outputformat=[^&]*/gi, '')\r\n          .replace(/&?filter=[^&]*/gi, '')\r\n          .replace(/&?bbox=[^&]*/gi, '');\r\n\r\n        const rebuildFilter = this.ogcFilterWriter.buildFilter(\r\n          (layer.dataSource.options as any).ogcFilters.filters,\r\n          layer.map.getExtent(),\r\n          new olProjection({ code: layer.map.projection }),\r\n          wfsOptions.fieldNameGeometry\r\n        );\r\n        window.open(\r\n          `${baseurl}&${rebuildFilter}&${outputFormatDownload}`,\r\n          '_blank'\r\n        );\r\n      } else if (DSOptions.download) {\r\n        window.open(DSOptions.download.url, '_blank');\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport { DownloadDataSourceOptions } from '../shared/download.interface';\r\nimport { DownloadService } from '../shared/download.service';\r\n\r\n@Component({\r\n  selector: 'igo-download-button',\r\n  templateUrl: './download-button.component.html',\r\n  styleUrls: ['./download-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DownloadButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private downloadService: DownloadService) {}\r\n\r\n  openDownload(layer: Layer) {\r\n    this.downloadService.open(layer);\r\n  }\r\n\r\n  get options(): DownloadDataSourceOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { DownloadButtonComponent } from './download-button/download-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [DownloadButtonComponent],\r\n  declarations: [DownloadButtonComponent]\r\n})\r\nexport class IgoDownloadModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDownloadModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { Feature } from '../shared';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\n\r\n@Component({\r\n  selector: 'igo-feature-details',\r\n  templateUrl: './feature-details.component.html',\r\n  styleUrls: ['./feature-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureDetailsComponent {\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  private _feature: Feature;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.feature);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.feature) || 'link';\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private sanitizer: DomSanitizer,\r\n    private mapService: MapService\r\n  ) {}\r\n\r\n  htmlSanitizer(value): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n  }\r\n\r\n  isObject(value) {\r\n    return typeof value === 'object';\r\n  }\r\n\r\n  isUrl(value) {\r\n    if (typeof value === 'string') {\r\n      return (\r\n        value.slice(0, 8) === 'https://' || value.slice(0, 7) === 'http://'\r\n      );\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  filterFeatureProperties(feature) {\r\n    const allowedFieldsAndAlias = feature.meta ? feature.meta.alias : undefined;\r\n    const properties = Object.assign({}, feature.properties);\r\n    const layerName = feature.meta.title;\r\n    const layers = this.mapService.getMap().layers$.value;\r\n\r\n    if (allowedFieldsAndAlias) {\r\n      Object.keys(properties).forEach(property => {\r\n        if (Object.keys(allowedFieldsAndAlias).indexOf(property) === -1) {\r\n          delete properties[property];\r\n        } else {\r\n          properties[allowedFieldsAndAlias[property]] = properties[property];\r\n          if (allowedFieldsAndAlias[property] !== property) {\r\n            delete properties[property];\r\n          }\r\n        }\r\n      });\r\n      return properties;\r\n    } else {\r\n      layers.forEach(layer => {\r\n        if (layer.dataSource.options.excludeAttribute) {\r\n          const exclude = layer.dataSource.options.excludeAttribute;\r\n          exclude.forEach(attribute => {\r\n            if (layerName === layer.title) {\r\n                delete feature.properties[attribute];\r\n            }\r\n          });\r\n        } else if (layer.dataSource.options.excludeAttributeOffline) {\r\n          const excludeAttributeOffline = layer.dataSource.options.excludeAttributeOffline;\r\n          excludeAttributeOffline.forEach(attribute => {\r\n            if (layerName === layer.title) {\r\n                delete feature.properties[attribute];\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return feature.properties;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { FeatureDetailsComponent } from './feature-details.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [FeatureDetailsComponent],\r\n  declarations: [FeatureDetailsComponent]\r\n})\r\nexport class IgoFeatureDetailsModule {}\r\n","import * as olstyle from 'ol/style';\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Form, getEntityRevision } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FEATURE } from '../shared/feature.enums';\r\nimport { Feature, FeatureMeta } from '../shared/feature.interfaces';\r\nimport { FeatureStore } from '../shared/store';\r\nimport { FeatureStoreSelectionStrategy } from '../shared/strategies/selection';\r\n\r\n/**\r\n * A configurable form, optionnally bound to a feature.\r\n * This component creates an entity form and, on submit,\r\n * returns a feature made out of the submitted data. It also\r\n * does things like managing the feature visibility while it's being updated\r\n * as well as disabling the selection of another feature.\r\n */\r\n@Component({\r\n  selector: 'igo-feature-form',\r\n  templateUrl: './feature-form.component.html',\r\n  styleUrls: ['./feature-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureFormComponent implements OnChanges, OnDestroy {\r\n  public feature$: BehaviorSubject<Feature> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Form\r\n   */\r\n  @Input() form: Form;\r\n\r\n  /**\r\n   * Feature to update\r\n   */\r\n  @Input() feature: Feature | undefined;\r\n\r\n  /**\r\n   * The store the feature belongs to. Required to manage the\r\n   * visiblity and selection.\r\n   */\r\n  @Input() store: FeatureStore | undefined;\r\n\r\n  /**\r\n   * Event emitted when the form is submitted\r\n   */\r\n  @Output() submitForm = new EventEmitter<Feature>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const store = changes.store;\r\n    if (store && store.currentValue !== store.previousValue) {\r\n      this.setStore(store.currentValue);\r\n    }\r\n\r\n    const feature = changes.feature;\r\n    if (feature && feature.currentValue !== feature.previousValue) {\r\n      this.feature$.next(feature.currentValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the original feature and reactivate the selection\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.setStore(undefined);\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature and emit an event\r\n   * @param event Form submit event\r\n   * @internal\r\n   */\r\n  onSubmit(data: { [key: string]: any }) {\r\n    const feature = this.formDataToFeature(data);\r\n    this.submitForm.emit(feature);\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature\r\n   * @param data Form data\r\n   * @returns A feature\r\n   */\r\n  private formDataToFeature(data: { [key: string]: any }): Feature {\r\n    const properties = {};\r\n    const meta = {};\r\n    if (this.feature === undefined) {\r\n      (meta as any).id = uuid();\r\n    } else {\r\n      Object.assign(properties, this.feature.properties);\r\n      Object.assign(meta, this.feature.meta, {\r\n        revision: getEntityRevision(this.feature) + 1\r\n      });\r\n    }\r\n\r\n    const propertyPrefix = 'properties.';\r\n    Object.entries(data).forEach((entry: [string, any]) => {\r\n      const [key, value] = entry;\r\n      if (key.startsWith(propertyPrefix)) {\r\n        const property = key.substr(propertyPrefix.length);\r\n        properties[property] = value;\r\n      }\r\n    });\r\n\r\n    let geometry = data.geometry;\r\n    if (geometry === undefined && this.feature !== undefined) {\r\n      geometry = this.feature.geometry;\r\n    }\r\n\r\n    return {\r\n      meta: meta as FeatureMeta,\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: 'EPSG:4326',\r\n      properties\r\n    };\r\n  }\r\n\r\n  private setStore(store: FeatureStore) {\r\n    if (this.store !== undefined) {\r\n      this.activateStoreSelection(this.store);\r\n    }\r\n    if (store !== undefined) {\r\n      this.deactivateStoreSelection(store);\r\n    }\r\n    this.store = store;\r\n  }\r\n\r\n  /**\r\n   * Deactivate feature selection from the store and from the map\r\n   */\r\n  private deactivateStoreSelection(store: FeatureStore) {\r\n    const selectionStrategy = store.getStrategyOfType(\r\n      FeatureStoreSelectionStrategy\r\n    );\r\n    if (selectionStrategy !== undefined) {\r\n      selectionStrategy.deactivate();\r\n      (selectionStrategy as FeatureStoreSelectionStrategy).unselectAll();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reactivate feature selection from the store and from the map\r\n   */\r\n  private activateStoreSelection(store: FeatureStore) {\r\n    // TODO: maybe we should recativate the strategies only if they\r\n    // were active in the first place\r\n    store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFormModule } from '@igo2/common';\r\n\r\nimport { FeatureFormComponent } from './feature-form.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoFormModule\r\n  ],\r\n  exports: [\r\n    IgoFormModule,\r\n    FeatureFormComponent\r\n  ],\r\n  declarations: [\r\n    FeatureFormComponent\r\n  ]\r\n})\r\nexport class IgoFeatureFormModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFeatureDetailsModule } from './feature-details/feature-details.module';\r\nimport { IgoFeatureFormModule } from './feature-form/feature-form.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoFeatureDetailsModule,\r\n    IgoFeatureFormModule\r\n  ],\r\n  declarations: [],\r\n  providers: []\r\n})\r\nexport class IgoFeatureModule {}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatSlider } from '@angular/material';\r\nimport * as moment from 'moment';\r\n\r\nimport { TimeFilterOptions } from '../shared/time-filter.interface';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-form',\r\n  templateUrl: './time-filter-form.component.html',\r\n  styleUrls: ['./time-filter-form.component.scss']\r\n})\r\nexport class TimeFilterFormComponent implements OnInit {\r\n  @Input()\r\n  get options(): TimeFilterOptions {\r\n    return this._options;\r\n  }\r\n  set options(value: TimeFilterOptions) {\r\n    this._options = value;\r\n  }\r\n  private _options: TimeFilterOptions;\r\n\r\n  public date: Date;\r\n  public startDate: Date;\r\n  public endDate: Date;\r\n  public year: any;\r\n  public startYear: any;\r\n  public endYear: any;\r\n  public initStartYear: any;\r\n  public initEndYear: any;\r\n  public listYears: Array<string> = [];\r\n  public startListYears: Array<string> = [];\r\n  public endListYears: Array<string> = [];\r\n\r\n  @Input()\r\n  set currentValue(value: string) {\r\n    if (value) {\r\n      if (this.type !== 'year') {\r\n        const valueArray = value.split('/');\r\n        if (valueArray.length > 0) {\r\n          const startDate = new Date(valueArray[0]);\r\n          const endDate = new Date(valueArray[1]);\r\n          if (!isNaN(startDate.valueOf())) {\r\n            this.startDate = startDate;\r\n          }\r\n          if (!isNaN(endDate.valueOf())) {\r\n            this.endDate = endDate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public interval: any;\r\n  public playIcon = 'play_circle_filled';\r\n\r\n  @Output() change: EventEmitter<Date | [Date, Date]> = new EventEmitter();\r\n  @Output()\r\n  yearChange: EventEmitter<string | [string, string]> = new EventEmitter();\r\n  @ViewChild(MatSlider) mySlider;\r\n\r\n  get type(): 'date' | 'time' | 'datetime' | 'year' {\r\n    return this.options.type === undefined ? 'date' : this.options.type;\r\n  }\r\n\r\n  get isRange(): boolean {\r\n    return this.options.range === undefined || this.options.style === 'slider'\r\n      ? false\r\n      : this.options.range;\r\n  }\r\n\r\n  get style(): string {\r\n    return this.options.style === undefined ? 'slider' : this.options.style;\r\n  }\r\n\r\n  get step(): number {\r\n    let step = 10800000;\r\n    if (this.options.step === undefined) {\r\n      switch (this.type) {\r\n        case 'date':\r\n        case 'datetime':\r\n          step = 10800000;\r\n          break;\r\n        case 'time':\r\n          step = 3600000;\r\n          break;\r\n        case 'year':\r\n          step = 31536000000;\r\n          break;\r\n        default:\r\n          step = 10800000;\r\n      }\r\n    } else {\r\n      step = this.getStepDefinition(this.options.step);\r\n    }\r\n\r\n    return step;\r\n  }\r\n\r\n  get timeInterval(): number {\r\n    return this.options.timeInterval === undefined\r\n      ? 2000\r\n      : this.options.timeInterval;\r\n  }\r\n\r\n  get min(): Date {\r\n    return this.options.min === undefined\r\n      ? undefined\r\n      : new Date(this.options.min);\r\n  }\r\n\r\n  get max(): Date {\r\n    return this.options.max === undefined\r\n      ? undefined\r\n      : new Date(this.options.max);\r\n  }\r\n\r\n  get is(): boolean {\r\n    return this.options.range === undefined ? false : this.options.range;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    if (this.startDate === undefined) {\r\n      const utcmin = new Date(this.min);\r\n      this.startDate = new Date(\r\n        utcmin.getTime() + utcmin.getTimezoneOffset() * 60000\r\n      );\r\n    }\r\n    if (this.endDate === undefined) {\r\n      const utcmax = new Date(this.max);\r\n      this.endDate = new Date(\r\n        utcmax.getTime() + utcmax.getTimezoneOffset() * 60000\r\n      );\r\n    }\r\n    if (this.startYear === undefined) {\r\n      this.startYear = new Date(this.startDate).getFullYear();\r\n      this.initStartYear = this.startYear;\r\n    }\r\n    if (this.endYear === undefined) {\r\n      this.endYear = new Date(this.endDate).getFullYear();\r\n      this.initEndYear = this.endYear;\r\n    }\r\n\r\n    if (!this.isRange) {\r\n      for (let i = this.startYear; i <= this.endYear + 1; i++) {\r\n        this.listYears.push(i);\r\n      }\r\n    } else {\r\n      for (let i = this.startYear; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      for (let i = this.startYear + 1; i <= this.endYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleDateChange(event: any) {\r\n    this.setupDateOutput();\r\n    this.applyTypeChange();\r\n\r\n    // Only if is range, use 2 dates to make the range\r\n    if (this.isRange) {\r\n      this.change.emit([this.startDate, this.endDate]);\r\n    } else {\r\n      this.change.emit(this.startDate);\r\n    }\r\n  }\r\n\r\n  handleYearChange(event: any) {\r\n    if (this.isRange) {\r\n      this.endListYears = [];\r\n      for (let i = this.startYear + 1; i <= this.initEndYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n      this.startListYears = [];\r\n      for (let i = this.initStartYear + 1; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      this.yearChange.emit([this.startYear, this.endYear]);\r\n    } else {\r\n      this.yearChange.emit(this.year);\r\n    }\r\n  }\r\n\r\n  handleListYearChange(event: any) {\r\n    this.handleYearChange([this.startYear, this.endYear]);\r\n  }\r\n\r\n  handleListYearStartChange(event: any) {\r\n    this.change.emit([this.startDate, this.endDate]);\r\n  }\r\n\r\n  dateToNumber(date: Date): number {\r\n    let newDate;\r\n    if (date) {\r\n      newDate = new Date(date);\r\n    } else {\r\n      newDate = new Date(this.min);\r\n    }\r\n\r\n    return newDate.getTime();\r\n  }\r\n\r\n  setSliderThumbLabel(label: string) {\r\n    const thumbLabel = this.findThumbLabel(\r\n      this.mySlider._elementRef.nativeElement.childNodes\r\n    );\r\n    if (thumbLabel) {\r\n      thumbLabel.textContent = label;\r\n    }\r\n  }\r\n\r\n  findThumbLabel(test: any[]): any {\r\n    let thumbLabel;\r\n\r\n    test.forEach(value => {\r\n      if (value.className === 'mat-slider-thumb-label-text') {\r\n        thumbLabel = value;\r\n      }\r\n\r\n      if (value.children.length > 0 && !thumbLabel) {\r\n        thumbLabel = this.findThumbLabel(value.childNodes);\r\n      }\r\n    }, this);\r\n    return thumbLabel;\r\n  }\r\n\r\n  playFilter(event: any) {\r\n    if (this.interval) {\r\n      this.stopFilter();\r\n    } else {\r\n      this.playIcon = 'pause_circle_filled';\r\n      this.interval = setInterval(\r\n        (that) => {\r\n          let newMinDateNumber;\r\n          const maxDateNumber = new Date(that.max);\r\n\r\n          newMinDateNumber =\r\n            that.date === undefined ? that.min.getTime() : that.date.getTime();\r\n          newMinDateNumber += that.mySlider.step;\r\n          that.date = new Date(newMinDateNumber);\r\n\r\n          if (newMinDateNumber > maxDateNumber.getTime()) {\r\n            that.stopFilter();\r\n          }\r\n\r\n          that.handleDateChange({ value: that.date, date: that.date });\r\n        },\r\n        this.timeInterval,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  stopFilter() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n    this.interval = undefined;\r\n    this.playIcon = 'play_circle_filled';\r\n  }\r\n\r\n  handleSliderDateChange(event: any) {\r\n    this.date = new Date(event.value);\r\n    this.setSliderThumbLabel(this.handleSliderTooltip());\r\n    this.handleDateChange(event);\r\n  }\r\n\r\n  handleSliderValue(): number {\r\n    if (this.options.current === true || !this.min) {\r\n      const currentDate = new Date();\r\n      this.date = this.getRoundedDate(currentDate);\r\n    }\r\n    return this.date === undefined ? this.min.getTime() : this.date.getTime();\r\n  }\r\n\r\n  handleSliderTooltip() {\r\n    let label: string;\r\n\r\n    switch (this.type) {\r\n      case 'date':\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toDateString()\r\n            : this.date.toDateString();\r\n        break;\r\n      case 'time':\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toTimeString()\r\n            : this.date.toTimeString();\r\n        break;\r\n      // datetime\r\n      default:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toUTCString()\r\n            : this.date.toUTCString();\r\n        break;\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  setupDateOutput() {\r\n    if (this.style === 'slider') {\r\n      this.startDate = new Date(this.date);\r\n      this.startDate.setSeconds(-(this.step / 1000));\r\n      this.endDate = new Date(this.startDate);\r\n      this.endDate.setSeconds(this.step / 1000);\r\n    } else if (!this.isRange && !!this.date) {\r\n      this.endDate = new Date(this.date);\r\n      this.startDate = new Date(this.date);\r\n    } else if (this.isRange && (!!this.date || !this.date)) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    } else if (!this.date) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    }\r\n  }\r\n\r\n  applyTypeChange() {\r\n    switch (this.type) {\r\n      case 'date':\r\n        if (this.startDate !== undefined || this.endDate !== undefined) {\r\n          this.startDate.setHours(0);\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setHours(23);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      case 'time':\r\n        if (this.style === 'calendar') {\r\n          if (this.startDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.startDate.getHours();\r\n            const selectedMinute = this.startDate.getMinutes();\r\n            this.startDate = this.min;\r\n            this.startDate.setHours(selectedHour);\r\n            this.startDate.setMinutes(selectedMinute);\r\n          }\r\n\r\n          if (this.endDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.endDate.getHours();\r\n            const selectedMinute = this.endDate.getMinutes();\r\n            this.endDate = this.min;\r\n            this.endDate.setHours(selectedHour);\r\n            this.endDate.setMinutes(selectedMinute);\r\n          }\r\n        }\r\n\r\n        if (!this.isRange && this.step > 60 * 60 * 1000) {\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      // datetime\r\n      default:\r\n      // do nothing\r\n    }\r\n  }\r\n\r\n  getRangeMinDate(): Date {\r\n    return this.startDate === undefined ? this.min : this.startDate;\r\n  }\r\n\r\n  getRangeMaxDate(): Date {\r\n    return this.endDate === undefined ? this.max : this.endDate;\r\n  }\r\n\r\n  /**\r\n   * Round date at a certain time, 10 minutes by Default\r\n   * @param date - Date to Round\r\n   * @param atMinute - round to closest 'atMinute' minute, rounded 10 by default\r\n   * @return the rounded date\r\n   */\r\n  getRoundedDate(date, atMinute = 10) {\r\n    const coeff = 1000 * 60 * atMinute;\r\n    return new Date(Math.round(date.getTime() / coeff) * coeff);\r\n  }\r\n\r\n  /**\r\n   * Get the step (period) definition from the layer dimension tag\r\n   * @param step The step as ISO 8601 example: PT10M for 10 Minutes\r\n   * @return the duration in milliseconds\r\n   */\r\n  getStepDefinition(step) {\r\n    return moment.duration(step).asMilliseconds();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { TimeFilterableDataSource } from '../shared/time-filter.interface';\r\nimport { TimeFilterService } from '../shared/time-filter.service';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-item',\r\n  templateUrl: './time-filter-item.component.html',\r\n  styleUrls: ['./time-filter-item.component.scss']\r\n})\r\nexport class TimeFilterItemComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  get datasource(): TimeFilterableDataSource {\r\n    return this.layer.dataSource as TimeFilterableDataSource;\r\n  }\r\n  constructor(private timeFilterService: TimeFilterService) {}\r\n\r\n  handleYearChange(year: string | [string, string]) {\r\n    this.timeFilterService.filterByYear(this.datasource, year);\r\n  }\r\n\r\n  handleDateChange(date: Date | [Date, Date]) {\r\n    this.timeFilterService.filterByDate(this.datasource, date);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-list',\r\n  templateUrl: './time-filter-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TimeFilterListComponent {\r\n  @Input()\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  private _layers: Layer[] = [];\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { TimeFilterListComponent } from './time-filter-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoTimeFilterListBinding]'\r\n})\r\nexport class TimeFilterListBindingDirective implements OnInit, OnDestroy {\r\n  private component: TimeFilterListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: TimeFilterListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olproj from 'ol/proj';\r\nimport olWKT from 'ol/format/WKT';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WktService {\r\n  constructor() {}\r\n\r\n  public wktToFeature(wkt, wktProj, featureProj = 'EPSG:3857') {\r\n    return new olWKT().readFeature(wkt, {\r\n      dataProjection: wktProj,\r\n      featureProjection: featureProj\r\n    });\r\n  }\r\n  public extentToWkt(epsgTO, extent, extentProj) {\r\n    let currentExtent = olproj.transformExtent(extent, extentProj, epsgTO);\r\n    currentExtent = this.roundCoordinateArray(currentExtent, epsgTO, 0);\r\n    const wktPoly = `POLYGON((\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]}))`;\r\n    const wktLine = `LINESTRING(\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]})`;\r\n    const wktMultiPoints = `MULTIPOINT(\r\n        ${extent[0]} ${extent[1]},\r\n        ${extent[0]} ${extent[3]},\r\n        ${extent[2]} ${extent[3]},\r\n        ${extent[2]} ${extent[1]})`;\r\n    return {\r\n      wktPoly,\r\n      wktLine,\r\n      wktMultiPoints\r\n    };\r\n  }\r\n\r\n  private roundCoordinateArray(coordinateArray, projection, decimal = 0) {\r\n    const lproj = olproj.get(projection);\r\n    const units = lproj.getUnits();\r\n    const olUnits = ['ft', 'm', 'us-ft'];\r\n    if (olUnits.indexOf(units) !== -1) {\r\n      coordinateArray = this.roundArray(coordinateArray, decimal);\r\n    }\r\n    return coordinateArray;\r\n  }\r\n\r\n  private roundArray(array, decimal = 0) {\r\n    let x = 0;\r\n    while (x < array.length) {\r\n      array[x] = array[x].toFixed(decimal);\r\n      x++;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  public snrcToWkt(snrc, epsgTO = 'EPSG:3857') {\r\n    snrc = snrc.toLowerCase();\r\n    let wktPoly;\r\n    const ew = {\r\n      1: { from: -56, to: -64 },\r\n      2: { from: -64, to: -72 },\r\n      3: { from: -72, to: -80 },\r\n      4: { from: -80, to: -88 },\r\n      5: { from: -88, to: -96 },\r\n      6: { from: -96, to: -104 },\r\n      7: { from: -104, to: -112 },\r\n      8: { from: -112, to: -120 },\r\n      9: { from: -120, to: -128 },\r\n      10: { from: -128, to: -136 }\r\n    };\r\n    const sn = {\r\n      1: { from: 44, to: 48 },\r\n      2: { from: 48, to: 52 },\r\n      3: { from: 52, to: 56 },\r\n      4: { from: 56, to: 60 },\r\n      5: { from: 60, to: 64 },\r\n      6: { from: 64, to: 68 },\r\n      7: { from: 68, to: 72 },\r\n      8: { from: 72, to: 76 },\r\n      9: { from: 76, to: -128 }\r\n    };\r\n    const snrc250kIndex = [\r\n      ['m', 'n', 'o', 'p'],\r\n      ['l', 'k', 'j', 'i'],\r\n      ['e', 'f', 'g', 'h'],\r\n      ['d', 'c', 'b', 'a']\r\n    ];\r\n\r\n    const snrc50kIndex = [\r\n      ['13', '14', '15', '16'],\r\n      ['12', '11', '10', '09'],\r\n      ['05', '06', '07', '08'],\r\n      ['04', '03', '02', '01']\r\n    ];\r\n    const checkSNRC50k = /\\d{2,3}[a-p][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n\r\n    let snrc1m = false;\r\n    let snrc250k = false;\r\n    let snrc50k = false;\r\n\r\n    if (checkSNRC50k.test(snrc)) {\r\n      snrc50k = true;\r\n    } else {\r\n      if (checkSNRC250k.test(snrc)) {\r\n        snrc250k = true;\r\n      } else {\r\n        if (checkSNRC1m.test(snrc)) {\r\n          snrc1m = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (snrc1m) {\r\n      snrc += 'a01';\r\n    } else if (snrc250k) {\r\n      snrc += '01';\r\n    }\r\n    if (/\\d{2,3}[a-p][0,1][0-9]/gi.test(snrc)) {\r\n      const regex1m = /(?=[a-p])/gi;\r\n      const ar1m = snrc.split(regex1m);\r\n      const part1m = ar1m[0];\r\n      const part250k = ar1m[1][0];\r\n      const part50k = ar1m[1].split(part250k)[1];\r\n      let separator = 1;\r\n      if (part1m.length === 3) {\r\n        separator = 2;\r\n      }\r\n      const partEW = part1m.substring(0, separator);\r\n      const partSN = part1m.substring(separator);\r\n      const unit1mEW = 8;\r\n      const unit1mSN = 4;\r\n      const unit250kEW = 2;\r\n      const unit250kSN = 1;\r\n      const unit50kEW = 0.5;\r\n      const unit50kSN = 0.25;\r\n      let index250kEW = 0;\r\n      let index250kSN = 0;\r\n      let index50kEW = 0;\r\n      let index50kSN = 0;\r\n      snrc250kIndex.forEach(element => {\r\n        if (element.indexOf(part250k) !== -1) {\r\n          index250kSN = snrc250kIndex.indexOf(element);\r\n          index250kEW = element.indexOf(part250k);\r\n        }\r\n      });\r\n      snrc50kIndex.forEach(element => {\r\n        if (element.indexOf(part50k) !== -1) {\r\n          index50kSN = snrc50kIndex.indexOf(element);\r\n          index50kEW = element.indexOf(part50k);\r\n        }\r\n      });\r\n\r\n      let increment250kEW = 0;\r\n      let increment250kSN = 0;\r\n      let increment50kEW = 0;\r\n      let increment50kSN = 0;\r\n      let unitPerTypeEW = unit1mEW;\r\n      let unitPerTypeSN = unit1mSN;\r\n      if (snrc250k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = 0;\r\n        increment50kSN = 0;\r\n        unitPerTypeEW = unit250kEW;\r\n        unitPerTypeSN = unit250kSN;\r\n      } else if (snrc50k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = index50kEW * unit50kEW;\r\n        increment50kSN = index50kSN * unit50kSN;\r\n        unitPerTypeEW = unit50kEW;\r\n        unitPerTypeSN = unit50kSN;\r\n      }\r\n\r\n      const coord: {ul?: any, lr?: any, ur?: any, ll?: any} = {\r\n        ul: [\r\n          ew[partEW].to + increment250kEW + increment50kEW,\r\n          sn[partSN].to - increment250kSN - increment50kSN\r\n        ]\r\n      };\r\n\r\n      coord.lr = [\r\n        coord.ul[0] + unitPerTypeEW,\r\n        coord.ul[1] - unitPerTypeSN\r\n      ];\r\n      coord.ur = [coord.ul[0], coord.ul[1] - unitPerTypeSN];\r\n      coord.ll = [coord.ul[0] + unitPerTypeEW, coord.ul[1]];\r\n\r\n      coord.ul = olproj.transform(\r\n        [coord.ul[0], coord.ul[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.lr = olproj.transform(\r\n        [coord.lr[0], coord.lr[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ur = olproj.transform(\r\n        [coord.ur[0], coord.ur[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ll = olproj.transform(\r\n        [coord.ll[0], coord.ll[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n\r\n      // Rounded coordinate to shorten url in get\r\n      coord.ul = this.roundCoordinateArray(coord.ul, epsgTO, 0);\r\n      coord.lr = this.roundCoordinateArray(coord.lr, epsgTO, 0);\r\n      coord.ur = this.roundCoordinateArray(coord.ur, epsgTO, 0);\r\n      coord.ll = this.roundCoordinateArray(coord.ll, epsgTO, 0);\r\n\r\n      wktPoly =\r\n        'POLYGON((' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        '))';\r\n      const wktLine =\r\n        'LINESTRING(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n\r\n      const wktMultiPoints =\r\n        'MULTIPOINT(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n      return {\r\n        wktPoly,\r\n        wktLine,\r\n        wktMultiPoints\r\n      };\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectorRef,\r\n  AfterContentChecked\r\n} from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\n\r\nimport {\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { WktService } from '../../wkt/shared/wkt.service';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-form',\r\n  templateUrl: './ogc-filter-form.component.html',\r\n  styleUrls: ['./ogc-filter-form.component.scss']\r\n})\r\nexport class OgcFilterFormComponent implements AfterContentChecked {\r\n  private ogcFilterWriter: OgcFilterWriter;\r\n  private _dataSource: OgcFilterableDataSource;\r\n  private _currentFilter: any = {};\r\n  public operators;\r\n  public igoSpatialSelectors;\r\n  public value = '';\r\n  public inputOperator;\r\n  public fields: any[];\r\n  public values: any[];\r\n  public color = 'primary';\r\n  public snrc = '';\r\n  public disabled;\r\n  private _map: IgoMap;\r\n  public baseOverlayName = 'ogcFilterOverlay_';\r\n  private _showFeatureOnMap: boolean;\r\n\r\n  // tslint:disable-next-line:ban-types\r\n  @Input() refreshFilters: Function;\r\n\r\n  @Input()\r\n  get datasource(): OgcFilterableDataSource {\r\n    return this._dataSource;\r\n  }\r\n  set datasource(value: OgcFilterableDataSource) {\r\n    this._dataSource = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  @Input()\r\n  get showFeatureOnMap(): boolean {\r\n    return this._showFeatureOnMap;\r\n  }\r\n  set showFeatureOnMap(value: boolean) {\r\n    this._showFeatureOnMap = value;\r\n  }\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n\r\n  @Input()\r\n  get currentFilter(): any {\r\n    return this._currentFilter;\r\n  }\r\n  set currentFilter(value: any) {\r\n    this._currentFilter = value;\r\n  }\r\n\r\n  get activeFilters() {\r\n    this.updateField();\r\n    return this.datasource.options.ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private wktService: WktService\r\n  ) {\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n    // TODO: Filter permitted operator based on wfscapabilities\r\n    // Need to work on regex on XML capabilities because\r\n    // comaparison operator's name varies between WFS servers...\r\n    // Ex: IsNull vs PropertyIsNull vs IsNil ...\r\n    this.operators = this.ogcFilterWriter.operators;\r\n    this.igoSpatialSelectors = [\r\n      {\r\n        type: 'fixedExtent'\r\n      },\r\n      {\r\n        type: 'snrc'\r\n      }\r\n    ];\r\n    // TODO: selectFeature & drawFeature\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    if (this.map) {\r\n      this.activeFilters\r\n        .filter(\r\n          af => ['Contains', 'Intersects', 'Within'].indexOf(af.operator) !== -1\r\n        )\r\n        .forEach(activeFilterSpatial => {\r\n          if (activeFilterSpatial.wkt_geometry) {\r\n            this.addWktAsOverlay(\r\n              activeFilterSpatial.wkt_geometry,\r\n              activeFilterSpatial.filterid,\r\n              this.map.projection\r\n            );\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  updateField(init = true) {\r\n    if (!this.datasource.options.sourceFields) {\r\n      return;\r\n    }\r\n    this.fields = this.datasource.options.sourceFields.sort((a, b) => {\r\n      if (a.name < b.name) {\r\n        return -1;\r\n      } else if (a.name > b.name) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    this.datasource.options.sourceFields\r\n      .filter(f => f.name === this.currentFilter.propertyName)\r\n      .forEach(element => {\r\n        this.values = element.values !== undefined ? element.values.sort() : [];\r\n      });\r\n  }\r\n\r\n  private addWktAsOverlay(wkt, filterid, projection) {\r\n    const wktAsFeature = this.wktService.wktToFeature(wkt, projection);\r\n    wktAsFeature.setId(this.baseOverlayName + filterid);\r\n    let opacity = 0;\r\n    if (this.showFeatureOnMap) {\r\n      opacity = 0.5;\r\n    }\r\n\r\n    const stroke = new olstyle.Stroke({\r\n      width: 2,\r\n      color: [125, 136, 140, opacity]\r\n    });\r\n\r\n    return new olstyle.Style({\r\n      stroke,\r\n      image: new olstyle.Circle({\r\n        radius: 5,\r\n        stroke\r\n      })\r\n    });\r\n\r\n    this.map.overlay.addOlFeature(wktAsFeature);\r\n  }\r\n\r\n  toggleFilterState(event, filter: OgcInterfaceFilterOptions, property) {\r\n    this.updateField();\r\n    const mapProjection = this.map.projection;\r\n    if (event.checked) {\r\n      if (filter.wkt_geometry !== '') {\r\n        this.addWktAsOverlay(\r\n          filter.wkt_geometry,\r\n          filter.filterid,\r\n          mapProjection\r\n        );\r\n      }\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = true;\r\n        });\r\n    } else {\r\n      this.removeOverlayByID(filter.filterid);\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = false;\r\n        });\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  deleteFilter(filter: OgcInterfaceFilterOptions) {\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    ogcFilters.interfaceOgcFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.filterid !== filter.filterid\r\n    );\r\n    this.removeOverlayByID(filter.filterid);\r\n\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeNumericProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.changeProperty(filter, property, parseFloat(value));\r\n    this.refreshFilters();\r\n  }\r\n\r\n  private removeOverlayByID(id) {\r\n    const overlayId = this.baseOverlayName + id;\r\n    if (this.map.overlay.dataSource.ol.getFeatureById(overlayId)) {\r\n      this.map.overlay.dataSource.ol.removeFeature(\r\n        this.map.overlay.dataSource.ol.getFeatureById(overlayId)\r\n      );\r\n    }\r\n  }\r\n\r\n  changeOperator(filter) {\r\n    if (this.operators[filter.operator].spatial === false) {\r\n      this.removeOverlayByID(filter.filterid);\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        element[property] = value;\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeGeometry(filter, value?) {\r\n    const checkSNRC50k = /\\d{2,3}[a-l][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n    const mapProjection = this.map.projection;\r\n    this.removeOverlayByID(filter.filterid);\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        let wktPoly;\r\n        if (filter.igoSpatialSelector === 'snrc') {\r\n          if (value === '' && this.snrc !== '') {\r\n            wktPoly = this.wktService.snrcToWkt(this.snrc).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          } else if (\r\n            value !== '' &&\r\n            (checkSNRC1m.test(value) ||\r\n              checkSNRC250k.test(value) ||\r\n              checkSNRC50k.test(value))\r\n          ) {\r\n            wktPoly = this.wktService.snrcToWkt(value).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          }\r\n        } else if (filter.igoSpatialSelector === 'fixedExtent') {\r\n          wktPoly = this.wktService.extentToWkt(\r\n            mapProjection,\r\n            this.map.getExtent(),\r\n            mapProjection\r\n          ).wktPoly;\r\n          element.wkt_geometry = wktPoly;\r\n        }\r\n        if (wktPoly) {\r\n          this.addWktAsOverlay(wktPoly, filter.filterid, mapProjection);\r\n        }\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { OgcFilterableDataSource } from '../shared/ogc-filter.interface';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-form',\r\n  templateUrl: './ogc-filterable-form.component.html'\r\n})\r\nexport class OgcFilterableFormComponent {\r\n  @Input()\r\n  get datasource(): OgcFilterableDataSource {\r\n    return this._dataSource;\r\n  }\r\n  set datasource(value: OgcFilterableDataSource) {\r\n    this._dataSource = value;\r\n  }\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n\r\n  // tslint:disable-next-line:ban-types\r\n  @Input() refreshFilters: Function;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters;\r\n  }\r\n  @Input()\r\n  get showFeatureOnMap(): boolean {\r\n    return this._showFeatureOnMap;\r\n  }\r\n  set showFeatureOnMap(value: boolean) {\r\n    this._showFeatureOnMap = value;\r\n  }\r\n\r\n  private _showFeatureOnMap: boolean;\r\n  private _map: IgoMap;\r\n  private _dataSource: OgcFilterableDataSource;\r\n\r\n  public color = 'primary';\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { DownloadService } from '../../download/shared/download.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { WFSDataSourceOptionsParams } from '../../datasource/shared/datasources/wfs-datasource.interface';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions,\r\n  OgcInterfaceFilterOptions\r\n} from '../shared/ogc-filter.interface';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-item',\r\n  templateUrl: './ogc-filterable-item.component.html',\r\n  styleUrls: ['./ogc-filterable-item.component.scss']\r\n})\r\nexport class OgcFilterableItemComponent implements OnInit {\r\n  public color = 'primary';\r\n  private lastRunOgcFilter;\r\n  private defaultLogicalParent = 'And';\r\n  public hasActiveSpatialFilter = false;\r\n  public filtersAreEditable = true;\r\n  public filtersCollapsed = true;\r\n\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters.bind(this);\r\n  }\r\n  @Input()\r\n  get showFeatureOnMap(): boolean {\r\n    return this._showFeatureOnMap;\r\n  }\r\n  set showFeatureOnMap(value: boolean) {\r\n    this._showFeatureOnMap = value;\r\n  }\r\n\r\n  public _showFeatureOnMap = false;\r\n  private _map: IgoMap;\r\n  private _layer: Layer;\r\n\r\n  get datasource(): OgcFilterableDataSource {\r\n    return this.layer.dataSource as OgcFilterableDataSource;\r\n  }\r\n\r\n  @Input()\r\n  get ogcFiltersHeaderShown(): boolean {\r\n    return this._ogcFiltersHeaderShown;\r\n  }\r\n  set ogcFiltersHeaderShown(value: boolean) {\r\n    this._ogcFiltersHeaderShown = value;\r\n  }\r\n  private _ogcFiltersHeaderShown: boolean;\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService,\r\n    private downloadService: DownloadService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    switch (this.datasource.options.type) {\r\n      case 'wms':\r\n        this.ogcFilterService.setOgcWMSFiltersOptions(this.datasource);\r\n        break;\r\n      case 'wfs':\r\n        this.ogcFilterService.setOgcWFSFiltersOptions(this.datasource);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (this.datasource.options.ogcFilters) {\r\n      if (this.datasource.options.ogcFilters.interfaceOgcFilters) {\r\n        this.lastRunOgcFilter = JSON.parse(\r\n          JSON.stringify(this.datasource.options.ogcFilters.interfaceOgcFilters)\r\n        );\r\n        if (\r\n          this.datasource.options.ogcFilters.interfaceOgcFilters.filter(\r\n            f => f.wkt_geometry\r\n          ).length >= 1\r\n        ) {\r\n          this.hasActiveSpatialFilter = true;\r\n        }\r\n      }\r\n\r\n      this.filtersAreEditable = this.datasource.options.ogcFilters.editable\r\n        ? this.datasource.options.ogcFilters.editable\r\n        : false;\r\n    }\r\n  }\r\n\r\n  private getOverlayByID(id) {\r\n    this.map.overlay.dataSource.ol.getFeatureById(id);\r\n  }\r\n\r\n  toggleShowFeatureOnMap() {\r\n    this.showFeatureOnMap = !this.showFeatureOnMap;\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters.forEach(filter => {\r\n      let drawnFeature;\r\n      let drawnStrokeColor = [125, 136, 140, 0] as [\r\n        number,\r\n        number,\r\n        number,\r\n        number\r\n      ];\r\n      let drawStrokeWidth = 2;\r\n      let drawnFillColor = [125, 136, 140, 0] as [\r\n        number,\r\n        number,\r\n        number,\r\n        number\r\n      ];\r\n\r\n      drawnFeature = this.getOverlayByID('ogcFilterOverlay_' + filter.filterid);\r\n      if (this.showFeatureOnMap !== false) {\r\n        drawnStrokeColor = [125, 136, 140, 0.5];\r\n        drawStrokeWidth = 2;\r\n        drawnFillColor = [125, 136, 140, 0];\r\n      }\r\n\r\n      const stroke = new olstyle.Stroke({\r\n        width: drawStrokeWidth,\r\n        color: drawnStrokeColor\r\n      });\r\n\r\n      const fill = new olstyle.Stroke({\r\n        color: drawnFillColor\r\n      });\r\n\r\n      const olStyle = new olstyle.Style({\r\n        stroke,\r\n        fill,\r\n        image: new olstyle.Circle({\r\n          radius: 5,\r\n          stroke,\r\n          fill\r\n        })\r\n      });\r\n\r\n      if (drawnFeature) {\r\n        drawnFeature.setStyle(olStyle);\r\n      }\r\n    });\r\n  }\r\n\r\n  addFilterToSequence() {\r\n    this.filtersCollapsed = false;\r\n    const interfaceOgcFilters: OgcInterfaceFilterOptions[] = this.datasource.options.ogcFilters.interfaceOgcFilters;\r\n    const arr = interfaceOgcFilters || [];\r\n    const lastLevel = arr.length === 0 ? 0 : arr[arr.length - 1].level;\r\n    let firstFieldName = '';\r\n    if (this.datasource.options.sourceFields.length > 0) {\r\n      firstFieldName =\r\n        this.datasource.options.sourceFields[0].name === undefined\r\n          ? ''\r\n          : this.datasource.options.sourceFields[0].name;\r\n    }\r\n    let fieldNameGeometry;\r\n    const datasourceOptions = this.datasource\r\n      .options as WFSDataSourceOptionsParams;\r\n    if (datasourceOptions.fieldNameGeometry) {\r\n      fieldNameGeometry = datasourceOptions.fieldNameGeometry;\r\n    } else if (\r\n      (this.datasource.options as any).paramsWFS &&\r\n      (this.datasource.options as any).paramsWFS.fieldNameGeometry\r\n    ) {\r\n      fieldNameGeometry = (this.datasource.options as any).paramsWFS\r\n        .fieldNameGeometry;\r\n    }\r\n    const status = arr.length === 0 ? true : false;\r\n    arr.push(\r\n      (this.datasource as any).ogcFilterWriter.addInterfaceFilter(\r\n        {\r\n          propertyName: firstFieldName,\r\n          operator: 'PropertyIsEqualTo',\r\n          active: status,\r\n          igoSpatialSelector: 'fixedExtent'\r\n        },\r\n        fieldNameGeometry,\r\n        lastLevel,\r\n        this.defaultLogicalParent\r\n      )\r\n    );\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters = arr;\r\n  }\r\n\r\n  openDownload() {\r\n    this.downloadService.open(this.layer);\r\n  }\r\n\r\n  refreshFilters() {\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    const activeFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n    if (activeFilters.length === 0) {\r\n      ogcFilters.filters = undefined;\r\n      ogcFilters.filtered = false;\r\n    }\r\n    if (activeFilters.length > 1) {\r\n      activeFilters[0].parentLogical = activeFilters[1].parentLogical;\r\n    }\r\n    if (\r\n      activeFilters.filter(\r\n        af => ['Contains', 'Intersects', 'Within'].indexOf(af.operator) !== -1\r\n      ).length === 0\r\n    ) {\r\n      this.hasActiveSpatialFilter = false;\r\n    } else {\r\n      this.hasActiveSpatialFilter = true;\r\n    }\r\n\r\n    if (\r\n      !(JSON.stringify(this.lastRunOgcFilter) === JSON.stringify(activeFilters))\r\n    ) {\r\n      if (this.layer.dataSource.options.type === 'wfs') {\r\n        const ogcDataSource: any = this.layer.dataSource;\r\n        const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n        const writer = ogcDataSource.ogcFilterWriter;\r\n        ogcLayer.filters = writer.rebuiltIgoOgcFilterObjectFromSequence(\r\n          activeFilters\r\n        );\r\n        this.layer.dataSource.ol.clear();\r\n      } else if (\r\n        this.layer.dataSource.options.type === 'wms' &&\r\n        ogcFilters.enabled\r\n      ) {\r\n        let rebuildFilter = '';\r\n        if (activeFilters.length >= 1) {\r\n          const ogcDataSource: any = this.layer.dataSource;\r\n          const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n          const writer = ogcDataSource.ogcFilterWriter;\r\n          ogcLayer.filters = writer.rebuiltIgoOgcFilterObjectFromSequence(\r\n            activeFilters\r\n          );\r\n          rebuildFilter = (this.layer\r\n            .dataSource as any).ogcFilterWriter.buildFilter(\r\n            ogcLayer.filters,\r\n            undefined,\r\n            undefined,\r\n            (this.layer.dataSource.options as any).fieldNameGeometry\r\n          );\r\n        }\r\n        this.ogcFilterService.filterByOgc(\r\n          this.datasource as WMSDataSource,\r\n          rebuildFilter\r\n        );\r\n        this.datasource.options.ogcFilters.filtered =\r\n          activeFilters.length === 0 ? false : true;\r\n      }\r\n\r\n      this.lastRunOgcFilter = JSON.parse(JSON.stringify(activeFilters));\r\n    } else {\r\n      // identical filter. Nothing triggered\r\n    }\r\n  }\r\n\r\n  get downloadable() {\r\n    return (this.datasource.options as any).download;\r\n  }\r\n\r\n  public setVisible() {\r\n    this.layer.visible = true;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-list',\r\n  templateUrl: './ogc-filterable-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterableListComponent {\r\n  @Input()\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n\r\n  private _map: IgoMap;\r\n  private _layers: Layer[] = [];\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoOgcFilterableListBinding]'\r\n})\r\nexport class OgcFilterableListBindingDirective implements OnInit, OnDestroy {\r\n  private component: OgcFilterableListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: OgcFilterableListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterableDataSourceOptions } from '../shared/ogc-filter.interface';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-button',\r\n  templateUrl: './ogc-filter-button.component.html',\r\n  styleUrls: ['./ogc-filter-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  public ogcFilterCollapse = false;\r\n\r\n  @Input()\r\n  get ogcFiltersInLayers(): boolean {\r\n    return this._ogcFiltersInLayers;\r\n  }\r\n  set ogcFiltersInLayers(value: boolean) {\r\n    this._ogcFiltersInLayers = value;\r\n  }\r\n  private _ogcFiltersInLayers = false;\r\n\r\n  constructor() {}\r\n\r\n  toggleOgcFilter() {\r\n    if (this.layer.isInResolutionsRange) {\r\n      this.ogcFilterCollapse = !this.ogcFilterCollapse;\r\n    }\r\n  }\r\n\r\n  get options(): OgcFilterableDataSourceOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MAT_DATE_LOCALE\r\n} from '@angular/material';\r\n\r\n// import {\r\n//   MatDatetimepickerModule,\r\n//   MatNativeDatetimeModule\r\n// } from '@mat-datetimepicker/core';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule,\r\n  IgoKeyValueModule\r\n} from '@igo2/common';\r\n\r\nimport { FilterableDataSourcePipe } from './shared/filterable-datasource.pipe';\r\nimport { TimeFilterFormComponent } from './time-filter-form/time-filter-form.component';\r\nimport { TimeFilterItemComponent } from './time-filter-item/time-filter-item.component';\r\nimport { TimeFilterListBindingDirective } from './time-filter-list/time-filter-list-binding.directive';\r\nimport { TimeFilterListComponent } from './time-filter-list/time-filter-list.component';\r\nimport { TimeFilterService } from './shared/time-filter.service';\r\n\r\nimport { OgcFilterFormComponent } from './ogc-filter-form/ogc-filter-form.component';\r\nimport { OgcFilterableFormComponent } from './ogc-filterable-form/ogc-filterable-form.component';\r\nimport { OgcFilterableItemComponent } from './ogc-filterable-item/ogc-filterable-item.component';\r\nimport { OgcFilterableListBindingDirective } from './ogc-filterable-list/ogc-filterable-list-binding.directive';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list/ogc-filterable-list.component';\r\nimport { OgcFilterButtonComponent } from './ogc-filter-button/ogc-filter-button.component';\r\nimport { OGCFilterService } from './shared/ogc-filter.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    // MatDatetimepickerModule,\r\n    // MatNativeDatetimeModule,\r\n    IgoLanguageModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective\r\n  ],\r\n  declarations: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective\r\n  ],\r\n  providers: [TimeFilterService, OGCFilterService]\r\n})\r\nexport class IgoFilterModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoFilterModule,\r\n      providers: [\r\n        {\r\n          provide: MAT_DATE_LOCALE,\r\n          useValue: 'fr'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\n\r\nimport { FormFieldComponent } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map.\r\n */\r\n@FormFieldComponent('geometry')\r\n@Component({\r\n  selector: 'igo-geometry-form-field',\r\n  templateUrl: './geometry-form-field.component.html',\r\n  styleUrls: ['./geometry-form-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldComponent implements OnInit, OnDestroy {\r\n\r\n  geometryType$: BehaviorSubject<OlGeometryType> = new BehaviorSubject(undefined);\r\n  drawGuide$: BehaviorSubject<number> = new BehaviorSubject(0);\r\n  value$: BehaviorSubject<GeoJSONGeometry> = new BehaviorSubject(undefined);\r\n\r\n  private value$$: Subscription;\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The geometry type\r\n   */\r\n  @Input() geometryType: OlGeometryType;\r\n\r\n  /**\r\n   * Whether a geometry type toggle should be displayed\r\n   */\r\n  @Input() geometryTypeField: boolean = false;\r\n\r\n  /**\r\n   * Available geometry types\r\n   */\r\n  @Input() geometryTypes: string[] = ['Point', 'LineString', 'Polygon'];\r\n\r\n  /**\r\n   * Whether a draw guide field should be displayed\r\n   */\r\n  @Input() drawGuideField: boolean = false;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input() drawGuide: number = 0;\r\n\r\n  /**\r\n   * Draw guide placeholder\r\n   */\r\n  @Input() drawGuidePlaceholder: string = '';\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * The geometry type model\r\n   */\r\n  set geometryTypeModel(value: OlGeometryType) {this.geometryType$.next(value); }\r\n  get geometryTypeModel(): OlGeometryType { return this.geometryType$.value; }\r\n\r\n  /**\r\n   * The draw guide model\r\n   */\r\n  set drawGuideModel(value: number) {this.drawGuide$.next(value); }\r\n  get drawGuideModel(): number { return this.drawGuide$.value; }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Set up a value stream\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.geometryType$.next(this.geometryType);\r\n    this.drawGuide$.next(this.drawGuide);\r\n    this.value$.next(this.formControl.value ? this.formControl.value : undefined);\r\n    this.value$$ = this.formControl.valueChanges.subscribe((value: GeoJSONGeometry) => {\r\n      this.value$.next(value ? value : undefined);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the value stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.value$$.unsubscribe();\r\n  }\r\n\r\n  onGeometryTypeChange(geometryType: OlGeometryType) {\r\n    if (this.value$.value !== undefined) {\r\n      return;\r\n    }\r\n    this.geometryType$.next(geometryType);\r\n  }\r\n\r\n  onDrawGuideChange(value: number) {\r\n    this.drawGuide$.next(value);\r\n  }\r\n\r\n}\r\n","\r\nexport const MEASURE_UNIT_AUTO = 'auto';\r\n\r\nexport enum MeasureType {\r\n  Length = 'length',\r\n  Area = 'area'\r\n}\r\n\r\nexport enum MeasureLengthUnit {\r\n  Meters = 'meters',\r\n  Kilometers = 'kilometers',\r\n  Miles = 'miles',\r\n  Feet = 'feet'\r\n}\r\n\r\nexport const MeasureLengthUnitAbbreviation = {\r\n  [MeasureLengthUnit.Meters]: 'm',\r\n  [MeasureLengthUnit.Kilometers]: 'km',\r\n  [MeasureLengthUnit.Miles]: 'mi',\r\n  [MeasureLengthUnit.Feet]: 'ft'\r\n};\r\n\r\nexport enum MeasureAreaUnit {\r\n  SquareMeters = 'squareMeters',\r\n  SquareKilometers = 'squareKilometers',\r\n  SquareMiles = 'squareMiles',\r\n  SquareFeet = 'squareFeet',\r\n  Hectares = 'hectares',\r\n  Acres = 'acres'\r\n}\r\n\r\nexport const MeasureAreaUnitAbbreviation = {\r\n  [MeasureAreaUnit.SquareMeters]: 'mÂ²',\r\n  [MeasureAreaUnit.SquareKilometers]: 'kmÂ²',\r\n  [MeasureAreaUnit.SquareMiles]: 'miÂ²',\r\n  [MeasureAreaUnit.SquareFeet]: 'ftÂ²',\r\n  [MeasureAreaUnit.Hectares]: 'ha',\r\n  [MeasureAreaUnit.Acres]: 'ac'\r\n};\r\n","import * as olstyle from 'ol/style';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlPoint from 'ol/geom/Point';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { getCenter as olGetCenter } from 'ol/extent';\r\nimport {\r\n  getLength as olGetLength,\r\n  getArea as olGetArea\r\n} from 'ol/sphere';\r\n\r\nimport { Measure } from './measure.interfaces';\r\nimport {\r\n  MeasureAreaUnit,\r\n  MeasureAreaUnitAbbreviation,\r\n  MeasureLengthUnit,\r\n  MeasureLengthUnitAbbreviation\r\n} from './measure.enum';\r\n\r\n/**\r\n * Convert value from meters to kilometers\r\n * @param value Value in meters\r\n * @returns Value in kilometers\r\n */\r\nexport function metersToKilometers(value: number): number {\r\n  return value * 0.001;\r\n}\r\n\r\n/**\r\n * Convert value from meters to feet\r\n * @param value Value in meters\r\n * @returns Value in feet\r\n */\r\nexport function metersToFeet(value: number): number {\r\n  return value * 3.2808;\r\n}\r\n\r\n/**\r\n * Convert value from meters to miles\r\n * @param value Value in meters\r\n * @returns Value in miles\r\n */\r\nexport function metersToMiles(value: number): number {\r\n  return value * 0.000621;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square kilometers\r\n * @param value Value in square meters\r\n * @returns Value in square kilometers\r\n */\r\nexport function squareMetersToSquareKilometers(value: number): number {\r\n  return value * 0.000001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square miles\r\n * @param value Value in square meters\r\n * @returns Value in square miles\r\n */\r\nexport function squareMetersToSquareMiles(value: number): number {\r\n  return value * 0.0000003861;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square feet\r\n * @param value Value in square meters\r\n * @returns Value in square feet\r\n */\r\nexport function squareMetersToSquareFeet(value: number): number {\r\n  return value * 10.764;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to hectares\r\n * @param value Value in square meters\r\n * @returns Value in hectares\r\n */\r\nexport function squareMetersToHectares(value: number): number {\r\n  return value * 0.0001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to acres\r\n * @param value Value in square meters\r\n * @returns Value in acres\r\n */\r\nexport function squareMetersToAcres(value: number): number {\r\n  return value * 0.00024711;\r\n}\r\n\r\n/**\r\n * Convert value from meters to the specified length unit\r\n * @param value Value in meters\r\n * @param unit Length unit\r\n * @returns Value in unit\r\n */\r\nexport function metersToUnit(value: number, unit: MeasureLengthUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureLengthUnit.Meters, (val: number) => val],\r\n    [MeasureLengthUnit.Kilometers, metersToKilometers],\r\n    [MeasureLengthUnit.Miles, metersToMiles],\r\n    [MeasureLengthUnit.Feet, metersToFeet],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to the specified area unit\r\n * @param value Value in meters\r\n * @param unit Area unit\r\n * @returns Value in unit\r\n */\r\nexport function squareMetersToUnit(value: number, unit: MeasureAreaUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureAreaUnit.SquareMeters, (val: number) => val],\r\n    [MeasureAreaUnit.SquareKilometers, squareMetersToSquareKilometers],\r\n    [MeasureAreaUnit.SquareMiles, squareMetersToSquareMiles],\r\n    [MeasureAreaUnit.SquareFeet, squareMetersToSquareFeet],\r\n    [MeasureAreaUnit.Hectares, squareMetersToHectares],\r\n    [MeasureAreaUnit.Acres, squareMetersToAcres],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * This method format a measure to a readable format\r\n * @param measure Measure\r\n * @param options Formatting options\r\n * @returns Formatted measure\r\n */\r\nexport function formatMeasure(measure: number, options?: {\r\n  decimal?: number;\r\n  unit?: MeasureAreaUnit | MeasureLengthUnit;\r\n  unitAbbr?: boolean;\r\n  locale?: string;\r\n}) {\r\n  let decimal = options.decimal;\r\n  if (decimal === undefined || decimal < 0) {\r\n    decimal = 1;\r\n  }\r\n\r\n  const parts = [];\r\n  if (options.locale !== undefined) {\r\n    parts.push(measure.toLocaleString(options.locale, {\r\n      minimumFractionDigits: decimal,\r\n      maximumFractionDigits: decimal\r\n    }));\r\n  } else {\r\n    parts.push(measure.toFixed(decimal).toString());\r\n  }\r\n\r\n  if (options.unit !== undefined && options.unitAbbr === true) {\r\n    parts.push(\r\n      MeasureLengthUnitAbbreviation[options.unit] ||\r\n      MeasureAreaUnitAbbreviation[options.unit]\r\n    );\r\n  }\r\n\r\n  return parts.filter(p => p !== undefined).join(' ');\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestLengthUnit(value: number): MeasureLengthUnit {\r\n  let unit = MeasureLengthUnit.Meters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureLengthUnit.Kilometers];\r\n  while (converted > 1000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = metersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in square meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestAreaUnit(value: number): MeasureAreaUnit {\r\n  let unit = MeasureAreaUnit.SquareMeters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureAreaUnit.SquareKilometers];\r\n  while (converted > 1000000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = squareMetersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Create a default style for a measure interaction\r\n * @returns OL style\r\n */\r\nexport function createMeasureInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      lineDash: [10, 10],\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke: new olstyle.Stroke({\r\n        color: '#ffcc33',\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: 'rgba(255, 255, 255, 0.2)'\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for a measure layer\r\n * @returns OL style\r\n */\r\nexport function createMeasureLayerStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Compute the length in meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Length in meters\r\n */\r\nexport function measureOlGeometryLength(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetLength(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area in square meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Area in square meters\r\n */\r\nexport function measureOlGeometryArea(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint || olGeometry instanceof OlLineString) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetArea(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area (square meters), length (meters) and last length (meters)\r\n * of an OL geometry with a given projection.\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Computed measure\r\n */\r\nexport function measureOlGeometry(olGeometry: OlGeometry, projection: string): Measure {\r\n  const length = measureOlGeometryLength(olGeometry, projection);\r\n  const area = measureOlGeometryArea(olGeometry, projection);\r\n\r\n  const lengths = [];\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const coordinatesLength = coordinates.length;\r\n  for (let i = 0; i <= coordinatesLength - 4; i += 2) {\r\n    const olSegment = new OlLineString([\r\n      [coordinates[i], coordinates[i + 1]],\r\n      [coordinates[i + 2], coordinates[i + 3]]\r\n    ]);\r\n\r\n    lengths.push(measureOlGeometryLength(olSegment, projection));\r\n  }\r\n\r\n  return {\r\n    area,\r\n    length,\r\n    lengths\r\n  };\r\n}\r\n\r\n/**\r\n * Update an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nexport function updateOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n\r\n  // TODO: handle multi geometries\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const j = i * 2;\r\n    const olSegment = new OlLineString([\r\n      [coordinates[j], coordinates[j + 1]],\r\n      [coordinates[j + 2], coordinates[j + 3]]\r\n    ]);\r\n\r\n    const midpointCoordinate = olSegment.getCoordinateAt(0.5);\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      olMidpoint.setCoordinates(midpointCoordinate);\r\n    } else {\r\n      olMidpoints[i] = new OlPoint(midpointCoordinate);\r\n    }\r\n  }\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Clear an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n */\r\nexport function clearOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon) {\r\n  const olMidpoints = olGeometry.get('_midpoints') || [];\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      if (olMidpoint !== undefined) {\r\n        clearOlMidpointTooltip(olMidpoint);\r\n      }\r\n    }\r\n  }\r\n\r\n  olGeometry.set('_midpoints', undefined, true);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Return an array of  OL geometry midpoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nfunction getOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const expectedNumber = Math.max((olGeometry.flatCoordinates.length / 2) - 1, 0);\r\n\r\n  // TODO: This works but it's quite messy. If time permits,\r\n  // clean this. Maybe a Tooltip class could handle that\r\n  let olMidpoints = olGeometry.get('_midpoints');\r\n  if (olMidpoints === undefined) {\r\n    olMidpoints = new Array(expectedNumber);\r\n    olGeometry.set('_midpoints', olMidpoints, true);\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber === olMidpoints.length) {\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber > olMidpoints.length) {\r\n    olMidpoints.push(...new Array(expectedNumber - olMidpoints.length));\r\n    return olMidpoints;\r\n  }\r\n\r\n  for (let i = expectedNumber; i < olMidpoints.length; i++) {\r\n    const olMidpoint = olMidpoints[expectedNumber];\r\n    if (olMidpoint !== undefined) {\r\n      clearOlMidpointTooltip(olMidpoint);\r\n    }\r\n  }\r\n  olMidpoints.splice(expectedNumber);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Remove an OL midpoint's tooltip from the map\r\n * @param olMidpoint OL Point\r\n */\r\nfunction clearOlMidpointTooltip(olMidpoint: OlPoint) {\r\n  const olTooltip = olMidpoint.get('_tooltip');\r\n  if (olTooltip !== undefined) {\r\n    const olMap = olTooltip.getMap();\r\n    if (olMap !== undefined) {\r\n      olMap.removeOverlay(olTooltip);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add an OL overlay at each midpoint and return an array of those overlays\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function updateOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n  const olTooltips = olMidpoints.map((olMidpoint: OlPoint) => {\r\n    let olTooltip = olMidpoint.get('_tooltip');\r\n    if (olTooltip === undefined) {\r\n      olTooltip = createOlTooltipAtPoint(olMidpoint);\r\n    } else {\r\n      olTooltip.setPosition(olMidpoint.flatCoordinates);\r\n    }\r\n    return olTooltip;\r\n  });\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n  return olMidpoints.map((olMidpoint: OlPoint) => {\r\n    return olMidpoint ? olMidpoint.get('_tooltip') : undefined;\r\n  });\r\n}\r\n\r\n/**\r\n * Update an OL geometry center and return it\r\n * @param olGeometry OL Geometry\r\n * @returns OL point\r\n */\r\nexport function updateOlGeometryCenter(olGeometry: OlLineString | OlPolygon): OlPoint {\r\n  let olCenter = olGeometry.get('_center');\r\n  const centerCoordinate = olGetCenter(olGeometry.getExtent());\r\n  if (olCenter !== undefined) {\r\n    olCenter.setCoordinates(centerCoordinate);\r\n  } else {\r\n    olCenter = new OlPoint(centerCoordinate);\r\n    olGeometry.set('_center', olCenter);\r\n  }\r\n\r\n  return olCenter;\r\n}\r\n\r\n/**\r\n * Add an OL overlay at the center of a geometry and return that overlay\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlay\r\n */\r\nexport function updateOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = updateOlGeometryCenter(olGeometry);\r\n  let olTooltip = olCenter.get('_tooltip');\r\n  if (olTooltip === undefined) {\r\n    olTooltip = createOlTooltipAtPoint(olCenter);\r\n  } else {\r\n    olTooltip.setPosition(olCenter.flatCoordinates);\r\n  }\r\n  return olTooltip;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = olGeometry.get('_center');\r\n  return olCenter ? olCenter.get('_tooltip') : undefined;\r\n}\r\n\r\n/**\r\n * Get all the tooltips of an OL geometry\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olTooltips = [].concat(getOlTooltipsAtMidpoints(olGeometry) || []);\r\n  const olCenterTooltip = getOlTooltipAtCenter(olGeometry);\r\n  if (olCenterTooltip !== undefined) {\r\n    olTooltips.push(olCenterTooltip);\r\n  }\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Create an OL overlay at a point and bind the overlay to the point\r\n * @param olPoint OL Point\r\n * @returns OL overlay\r\n */\r\nexport function createOlTooltipAtPoint(olPoint: OlPoint): OlOverlay {\r\n  const olTooltip = new OlOverlay({\r\n    element: document.createElement('div'),\r\n    offset: [-30, -10],\r\n    className: [\r\n      'igo-map-tooltip',\r\n      'igo-map-tooltip-measure'\r\n    ].join(' '),\r\n    stopEvent: false\r\n  });\r\n  olTooltip.setPosition(olPoint.flatCoordinates);\r\n  olPoint.set('_tooltip', olTooltip);\r\n\r\n  return olTooltip;\r\n}\r\n","/* tslint:disable */\r\n// See this issue: https://github.com/Microsoft/TypeScript/issues/13965\r\n// And the solution: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n// for an explanation as to why the prototype is set manually\r\n/* tslint:enable */\r\n\r\nexport class GeometrySliceError extends Error {}\r\n\r\nexport class GeometrySliceMultiPolygonError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice a MultiPolygon.');\r\n    Object.setPrototypeOf(this, GeometrySliceMultiPolygonError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceLineStringError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice with a line that has more than 2 points.');\r\n    Object.setPrototypeOf(this, GeometrySliceLineStringError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceTooManyIntersectionError extends GeometrySliceError {\r\n  constructor() {\r\n    super('More than 2 intersections found between the target polygon and the slicing line.');\r\n    Object.setPrototypeOf(this, GeometrySliceTooManyIntersectionError.prototype);\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport lineIntersect from '@turf/line-intersect';\r\nimport { lineString } from '@turf/helpers';\r\n\r\nimport {\r\n  GeometrySliceMultiPolygonError,\r\n  GeometrySliceLineStringError,\r\n  GeometrySliceTooManyIntersectionError\r\n } from './geometry.errors';\r\n\r\n/**\r\n * Create a default style for draw and modify interactions\r\n * @returns OL style\r\n */\r\nexport function createDrawInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color:  [0, 153, 255, 1],\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color:  [0, 153, 255, 0.2]\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke: new olstyle.Stroke({\r\n        color: [0, 153, 255, 1],\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color:  [0, 153, 255, 0.2]\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for drawing a hole\r\n * @returns OL style\r\n */\r\nexport function createDrawHoleInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color:  [0, 153, 255, 1],\r\n      width: 2\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Slice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function sliceOlGeometry(\r\n  olGeometry: OlLineString | OlPolygon,\r\n  olSlicer: OlLineString\r\n): Array<OlLineString | OlPolygon> {\r\n  if (olGeometry instanceof OlPolygon) {\r\n    return sliceOlPolygon(olGeometry, olSlicer);\r\n  } else if (olGeometry instanceof OlLineString) {\r\n    return sliceOlLineString(olGeometry, olSlicer);\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL LineString into one or more lines\r\n * @param olLineString OL line string\r\n * @param olSlicer Slicing line\r\n * @returns New OL line strings\r\n */\r\nexport function sliceOlLineString(olLineString: OlLineString, olSlicer: OlLineString): OlLineString[] {\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL Polygon into one or more polygons\r\n * @param olPolygon OL polygon\r\n * @param olSlicer Slicing line\r\n * @returns New OL polygons\r\n */\r\nexport function sliceOlPolygon(olPolygon: OlPolygon, olSlicer: OlLineString): OlPolygon[] {\r\n  if (olPolygon.getLinearRingCount() > 1) {\r\n    throw new GeometrySliceMultiPolygonError();\r\n  }\r\n\r\n  if (olSlicer.getCoordinates().length > 2) {\r\n    throw new GeometrySliceLineStringError();\r\n  }\r\n\r\n  const olGeoJSON = new OlGeoJSON();\r\n  const slicer = olGeoJSON.writeGeometryObject(olSlicer);\r\n  const outerCoordinates = olPolygon.getLinearRing(0).getCoordinates();\r\n\r\n  const parts = [[], []];\r\n  let totalIntersectionCount = 0;\r\n  for (let i = 0, ii = outerCoordinates.length - 1; i < ii; i++) {\r\n    const segmentCoordinates = [outerCoordinates[i], outerCoordinates[i + 1]];\r\n    const segment = lineString(segmentCoordinates);\r\n    const intersections = lineIntersect(segment, slicer).features;\r\n\r\n    const intersectionCount = intersections.length;\r\n    totalIntersectionCount += intersectionCount;\r\n    if (intersectionCount > 1 || totalIntersectionCount > 2) {\r\n      throw new GeometrySliceTooManyIntersectionError();\r\n    }\r\n\r\n    parts[0].push(segmentCoordinates[0]);\r\n    if (intersectionCount === 1) {\r\n      const intersection = intersections[0].geometry.coordinates;\r\n      parts[0].push(intersection);\r\n      parts[1].push(intersection);\r\n      parts.reverse();\r\n    }\r\n  }\r\n\r\n  if (totalIntersectionCount <= 1) {\r\n    return [];\r\n  }\r\n\r\n  parts[0].push(parts[0][0]);\r\n  parts[1].push(parts[1][0]);\r\n\r\n  return [new OlPolygon([parts[0]]), new OlPolygon([parts[1]])];\r\n}\r\n\r\n/**\r\n * Splice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function addLinearRingToOlPolygon(olPolygon: OlPolygon, olLinearRing: OlLinearRing ): OlPolygon {\r\n  // TODO: make some validation and support updating an existing linear ring\r\n  olPolygon.appendLinearRing(olLinearRing);\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { MapBrowserEvent as OlMapBrowserEvent } from 'ol/MapBrowserEvent';\r\nimport { shiftKeyOnly } from 'ol/events/condition';\r\n\r\nimport { Subject, Subscription, fromEvent } from 'rxjs';\r\n\r\nexport interface DrawControlOptions {\r\n  geometryType: OlGeometryType;\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  maxPoints?: number;\r\n}\r\n\r\n/**\r\n * Control to draw geometries\r\n */\r\nexport class DrawControl {\r\n\r\n  /**\r\n   * Draw start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Draw end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olDrawInteraction: OlDraw;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onChangesKey: string;\r\n\r\n  private keyDown$$: Subscription;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Geometry type\r\n   * @internal\r\n   */\r\n  get geometryType(): OlGeometryType {\r\n    return this.options.geometryType;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: DrawControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  private addOlDrawInteraction() {\r\n    const olDrawInteraction = new OlDraw({\r\n      type: this.geometryType,\r\n      source: this.getSource(),\r\n      stopClick: true,\r\n      style: this.options.drawStyle,\r\n      maxPoints: this.options.maxPoints,\r\n      freehand: false,\r\n      freehandCondition: () => false\r\n    });\r\n\r\n    this.onDrawStartKey = olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(olDrawInteraction);\r\n    this.olDrawInteraction = olDrawInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * When drawing starts, clear the overlay and start watching from changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.clearOlInnerOverlaySource();\r\n    this.onChangesKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, update the geometry observable and start watching from changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    this.unsubscribeToKeyDown();\r\n    if (this.onChangesKey !== undefined) {\r\n      unByKey(this.onChangesKey);\r\n    }\r\n    this.end$.next(event.feature.getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.unsubscribeToKeyDown();\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      // On ESC key down, remove the last vertex\r\n      if (event.keyCode === 27) {\r\n        this.olDrawInteraction.removeLastPoint();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n      this.keyDown$$ = undefined;\r\n    }\r\n  }\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlModify from 'ol/interaction/Modify';\r\nimport OlTranslate from 'ol/interaction/Translate';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlInteraction from 'ol/interaction/Interaction';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserEvent as OlMapBrowserEvent } from 'ol/MapBrowserEvent';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { ModifyEvent as OlModifyEvent } from 'ol/interaction/Modify';\r\nimport { TranslateEvent as OlTranslateEvent } from 'ol/interaction/Translate';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subject, Subscription, fromEvent } from 'rxjs';\r\n\r\nimport { addLinearRingToOlPolygon, createDrawHoleInteractionStyle } from '../geometry.utils';\r\n\r\nexport interface ModifyControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class ModifyControl {\r\n\r\n  /**\r\n   * Modify start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Modify end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olModifyInteraction: OlModify;\r\n  private onModifyStartKey: string;\r\n  private onModifyEndKey: string;\r\n  private onModifyKey: string;\r\n  private olModifyInteractionIsActive: boolean = false;\r\n  private olTranslateInteraction: OlTranslate;\r\n  private onTranslateStartKey: string;\r\n  private onTranslateEndKey: string;\r\n  private onTranslateKey: string;\r\n  private olTranslateInteractionIsActive: boolean = false;\r\n  private olDrawInteraction: OlTranslate;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onDrawKey: string;\r\n  private olDrawInteractionIsActive: boolean = false;\r\n\r\n  private keyDown$$: Subscription;\r\n  private drawKeyUp$$: Subscription;\r\n  private drawKeyDown$$: Subscription;\r\n\r\n  private removedOlInteractions: OlInteraction[] = [];\r\n  private olLinearRingsLayer: OlVectorLayer;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  /**\r\n   * OL linear rings source\r\n   * @internal\r\n   */\r\n  get olLinearRingsSource(): OlVectorSource {\r\n    return this.olLinearRingsLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: ModifyControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n    this.olLinearRingsLayer = this.createOlLinearRingsLayer();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlModifyInteraction();\r\n      this.removeOlTranslateInteraction();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n    this.addOlTranslateInteraction();\r\n    this.activateTranslateInteraction();\r\n    this.addOlModifyInteraction();\r\n    this.activateModifyInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay and start modifying it\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  private createOlLinearRingsLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      style: createDrawHoleInteractionStyle(),\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the linear rings layer\r\n   */\r\n  private addOlLinearRingsLayer() {\r\n    this.olMap.addLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings layer\r\n   */\r\n  private removeOlLinearRingsLayer() {\r\n    this.olMap.removeLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings source\r\n   */\r\n  private clearOlLinearRingsSource() {\r\n    this.olLinearRingsSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Add a modify interaction to the map an set up some listeners\r\n   */\r\n  private addOlModifyInteraction() {\r\n    const olModifyInteraction = new OlModify({\r\n      source: this.olOverlaySource,\r\n      style: this.options.drawStyle\r\n    });\r\n    this.olModifyInteraction = olModifyInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the modify interaction\r\n   */\r\n  private removeOlModifyInteraction() {\r\n    if (this.olModifyInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateModifyInteraction();\r\n    this.olModifyInteraction = undefined;\r\n  }\r\n\r\n  private activateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = true;\r\n    this.onModifyStartKey = this.olModifyInteraction\r\n      .on('modifystart', (event: OlModifyEvent) => this.onModifyStart(event));\r\n    this.onModifyEndKey = this.olModifyInteraction\r\n      .on('modifyend', (event: OlModifyEvent) => this.onModifyEnd(event));\r\n    this.olMap.addInteraction(this.olModifyInteraction);\r\n  }\r\n\r\n  private deactivateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = false;\r\n    unByKey(this.onModifyStartKey);\r\n    unByKey(this.onModifyEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olModifyInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When modifying starts, clear the overlay and start watching for changes\r\n   * @param event Modify start event\r\n   */\r\n  private onModifyStart(event: OlModifyEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onModifyKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When modifying ends, update the geometry observable and stop watching for changes\r\n   * @param event Modify end event\r\n   */\r\n  private onModifyEnd(event: OlModifyEvent) {\r\n    if (this.onModifyKey !== undefined) {\r\n      unByKey(this.onModifyKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      // On ESC key down, remove the last vertex\r\n      if (event.keyCode === 27 && this.olDrawInteractionIsActive === true) {\r\n        this.olDrawInteraction.removeLastPoint();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a translate interaction to the map an set up some listeners\r\n   */\r\n  private addOlTranslateInteraction() {\r\n    const olTranslateInteraction = new OlTranslate({\r\n      layers: [this.olOverlayLayer]\r\n    });\r\n    this.olTranslateInteraction = olTranslateInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the translate interaction\r\n   */\r\n  private removeOlTranslateInteraction() {\r\n    if (this.olTranslateInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateTranslateInteraction();\r\n    this.olTranslateInteraction = undefined;\r\n  }\r\n\r\n  private activateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = true;\r\n    this.onTranslateStartKey = this.olTranslateInteraction\r\n      .on('translatestart', (event: OlTranslateEvent) => this.onTranslateStart(event));\r\n    this.onTranslateEndKey = this.olTranslateInteraction\r\n      .on('translateend', (event: OlTranslateEvent) => this.onTranslateEnd(event));\r\n    this.olMap.addInteraction(this.olTranslateInteraction);\r\n  }\r\n\r\n  private deactivateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = false;\r\n    unByKey(this.onTranslateStartKey);\r\n    unByKey(this.onTranslateEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olTranslateInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When translation starts, clear the overlay and start watching for changes\r\n   * @param event Translate start event\r\n   */\r\n  private onTranslateStart(event: OlTranslateEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onTranslateKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Translate end event\r\n   */\r\n  private onTranslateEnd(event: OlTranslateEvent) {\r\n    if (this.onTranslateKey !== undefined) {\r\n      unByKey(this.onTranslateKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  private addOlDrawInteraction() {\r\n    const olDrawInteraction = new OlDraw({\r\n      type: 'Polygon',\r\n      source: this.olLinearRingsSource,\r\n      stopClick: true,\r\n      style: createDrawHoleInteractionStyle(),\r\n      condition: (event: OlMapBrowserEvent) => {\r\n        return this.getOlGeometry().intersectsCoordinate(event.coordinate);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteraction = olDrawInteraction;\r\n    this.subscribeToDrawKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToDrawKeyDown() {\r\n    this.drawKeyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode !== 17) { return; }\r\n\r\n      this.unsubscribeToDrawKeyDown();\r\n\r\n      const olGeometry = this.getOlGeometry();\r\n      if (!olGeometry || !(olGeometry instanceof OlPolygon)) { return; }\r\n\r\n      this.subscribeToDrawKeyUp();\r\n\r\n      this.deactivateModifyInteraction();\r\n      this.deactivateTranslateInteraction();\r\n      this.activateDrawInteraction();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key up to deactivate the draw control\r\n   */\r\n  private subscribeToDrawKeyUp() {\r\n    this.drawKeyUp$$ = fromEvent(document, 'keyup').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode !== 17) { return; }\r\n\r\n      this.unsubscribeToDrawKeyUp();\r\n      this.subscribeToDrawKeyDown();\r\n\r\n      this.deactivateDrawInteraction();\r\n      this.activateModifyInteraction();\r\n      this.activateTranslateInteraction();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to draw key down\r\n   */\r\n  private unsubscribeToDrawKeyDown() {\r\n    if (this.drawKeyDown$$ !== undefined) {\r\n      this.drawKeyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key up\r\n   */\r\n  private unsubscribeToDrawKeyUp() {\r\n    if (this.drawKeyUp$$ !== undefined) {\r\n      this.drawKeyUp$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    this.unsubscribeToDrawKeyUp();\r\n    this.unsubscribeToDrawKeyDown();\r\n    this.deactivateDrawInteraction();\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * Activate the draw interaction\r\n   */\r\n  private activateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.clearOlLinearRingsSource();\r\n    this.addOlLinearRingsLayer();\r\n\r\n    this.olMap.getInteractions().forEach((olInteraction: OlInteraction) => {\r\n      if (olInteraction instanceof OlDragBoxInteraction) {\r\n        this.olMap.removeInteraction(olInteraction);\r\n        this.removedOlInteractions.push(olInteraction);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = true;\r\n    this.onDrawStartKey = this.olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = this.olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(this.olDrawInteraction);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the draw interaction\r\n   */\r\n  private deactivateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.removeOlLinearRingsLayer();\r\n\r\n    this.removedOlInteractions.forEach((olInteraction: OlInteraction) => {\r\n      this.olMap.addInteraction(olInteraction);\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = false;\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When draw start, add a new linerar ring to the geometrty and start watching for changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    const linearRingCoordinates = olGeometry.getLinearRing().getCoordinates();\r\n    this.addLinearRingToOlGeometry(linearRingCoordinates);\r\n    this.start$.next(this.getOlGeometry());\r\n\r\n    this.onDrawKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      const _linearRingCoordinates = olGeometryEvent.target.getLinearRing().getCoordinates();\r\n      this.updateLinearRingOfOlGeometry(_linearRingCoordinates);\r\n      this.changes$.next(this.getOlGeometry());\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    if (this.onDrawKey !== undefined) {\r\n      unByKey(this.onDrawKey);\r\n    }\r\n    const linearRingCoordinates = event.feature.getGeometry().getLinearRing().getCoordinates();\r\n    this.updateLinearRingOfOlGeometry(linearRingCoordinates);\r\n    this.clearOlLinearRingsSource();\r\n    this.end$.next(this.getOlGeometry());\r\n    this.unsubscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Add a linear ring to the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private addLinearRingToOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    const olLinearRing = new OlLinearRing(coordinates);\r\n    addLinearRingToOlPolygon(olGeometry, olLinearRing);\r\n  }\r\n\r\n  /**\r\n   * Update the last linear ring of the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private updateLinearRingOfOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    // Remove the last linear ring (the one we are updating)\r\n    const olLinearRings = olGeometry.getLinearRings().slice(0, -1);\r\n    const newCoordinates = olLinearRings.map((olLinearRing: OlLinearRing) => {\r\n      return olLinearRing.getCoordinates();\r\n    });\r\n    newCoordinates.push(coordinates);\r\n    olGeometry.setCoordinates(newCoordinates);\r\n  }\r\n\r\n  /**\r\n   * Get the geometry being modified\r\n   * @returns OL Geometry\r\n   */\r\n  private getOlGeometry(): OlGeometry {\r\n    const olFeatures = this.olOverlaySource.getFeatures();\r\n    return olFeatures.length > 0 ? olFeatures[0].getGeometry() : undefined;\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlLineString from 'ol/geom/LineString';\r\n\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\nimport { GeometrySliceError } from '../geometry.errors';\r\nimport { sliceOlGeometry } from '../geometry.utils';\r\nimport { DrawControl } from './draw';\r\n\r\nexport interface SliceControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class SliceControl {\r\n\r\n  /**\r\n   * Slice end observable\r\n   */\r\n  public end$: Subject<OlGeometry[]> = new Subject();\r\n\r\n  /**\r\n   * Slice error, if any\r\n   */\r\n  public error$: Subject<GeometrySliceError> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawLineStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawLineEnd$$: Subscription;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: SliceControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeDrawLineControl();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addDrawLineControl();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay for slicing\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control and add it to the map\r\n   */\r\n  private addDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      drawStyle: this.options.drawStyle,\r\n      maxPoints: 2\r\n    });\r\n    this.drawLineStart$$ = this.drawLineControl.start$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineStart(olLine));\r\n    this.drawLineEnd$$ = this.drawLineControl.end$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineEnd(olLine));\r\n    this.drawLineControl.setOlMap(this.olMap);\r\n  }\r\n\r\n  /**\r\n   * Remove draw line control\r\n   */\r\n  private removeDrawLineControl() {\r\n    if (this.drawLineControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.drawLineStart$$.unsubscribe();\r\n    this.drawLineEnd$$.unsubscribe();\r\n    this.drawLineControl.getSource().clear();\r\n    this.drawLineControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olLine Ol linestring or polygon\r\n   */\r\n  private onDrawLineStart(olLine: OlLineString) {\r\n    this.drawLineControl.getSource().clear();\r\n  }\r\n\r\n  /**\r\n   * Slice the first geometry encountered with the drawn line\r\n   * @param olLine Ol linestring\r\n   */\r\n  private onDrawLineEnd(olLine: OlLineString) {\r\n    const olSlicedGeometries = [];\r\n    const lineExtent = olLine.getExtent();\r\n\r\n    const olFeaturesToRemove = [];\r\n    try {\r\n      this.olOverlaySource.forEachFeatureInExtent(lineExtent, (olFeature: OlFeature) => {\r\n        const olGeometry = olFeature.getGeometry();\r\n        const olParts = sliceOlGeometry(olGeometry, olLine);\r\n        if (olParts.length > 0) {\r\n          olSlicedGeometries.push(...olParts);\r\n          olFeaturesToRemove.push(olFeature);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (e instanceof GeometrySliceError) {\r\n        this.error$.next(e);\r\n        return;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    this.drawLineControl.getSource().clear();\r\n\r\n    this.olOverlaySource.addFeatures(\r\n      olSlicedGeometries.map((olGeometry: OlGeometry) => new OlFeature(olGeometry))\r\n    );\r\n    olFeaturesToRemove.forEach((olFeature: OlFeature) => {\r\n      this.olOverlaySource.removeFeature(olFeature);\r\n    });\r\n\r\n    this.error$.next(undefined);\r\n    this.end$.next(olSlicedGeometries);\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nimport { MeasurerDialogData } from '../shared/measure.interfaces';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit} from '../shared/measure.enum';\r\n\r\n@Component({\r\n  selector: 'igo-measurer-dialog',\r\n  templateUrl: 'measurer-dialog.component.html',\r\n  styleUrls: ['./measurer-dialog.component.scss']\r\n})\r\nexport class MeasurerDialogComponent {\r\n\r\n  measureAreaUnit = MeasureAreaUnit;\r\n\r\n  measureLengthUnit = MeasureLengthUnit;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MeasurerDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: MeasurerDialogData\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\n\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlStyle from 'ol/style/Style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport { VectorSourceEvent as OlVectorSourceEvent } from 'ol/source/Vector';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { EntityRecord, EntityTableTemplate, EntityTableComponent } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport {\r\n  FEATURE,\r\n  FeatureStore,\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy,\r\n  tryBindStoreLayer,\r\n  tryAddLoadingStrategy,\r\n  tryAddSelectionStrategy\r\n} from '../../feature';\r\nimport { DrawControl, ModifyControl } from '../../geometry';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { Measure, MeasurerDialogData, FeatureWithMeasure } from '../shared/measure.interfaces';\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit,\r\n} from '../shared/measure.enum';\r\nimport {\r\n  measureOlGeometry,\r\n  createMeasureInteractionStyle,\r\n  createMeasureLayerStyle,\r\n  updateOlTooltipsAtMidpoints,\r\n  updateOlTooltipAtCenter,\r\n  getTooltipsOfOlGeometry,\r\n  squareMetersToUnit,\r\n  metersToUnit,\r\n  formatMeasure\r\n} from '../shared/measure.utils';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * Tool to measure lengths and areas\r\n */\r\n@Component({\r\n  selector: 'igo-measurer',\r\n  templateUrl: './measurer.component.html',\r\n  styleUrls: ['./measurer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Table template\r\n   * @internal\r\n   */\r\n  public tableTemplate: EntityTableTemplate = {\r\n    selection: true,\r\n    selectMany: true,\r\n    selectionCheckbox: true,\r\n    sort: true,\r\n    columns: [\r\n      {\r\n        name: 'length',\r\n        title: this.languageService.translate.instant('igo.geo.measure.lengthHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeLengthUnit;\r\n          const measure = metersToUnit(feature.properties.measure.length, unit);\r\n          return formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          });\r\n        }\r\n      },\r\n      {\r\n        name: 'area',\r\n        title: this.languageService.translate.instant('igo.geo.measure.areaHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeAreaUnit;\r\n          const measure = squareMetersToUnit(feature.properties.measure.area, unit);\r\n          return measure ? formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          }) : '';\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  /**\r\n   * Reference to the MeasureType enum\r\n   * @internal\r\n   */\r\n  public measureType = MeasureType;\r\n\r\n  /**\r\n   * Reference to the AreaMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureAreaUnit = MeasureAreaUnit;\r\n\r\n  /**\r\n   * Reference to the LengthMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureLengthUnit = MeasureLengthUnit;\r\n\r\n  /**\r\n   * Whether measure units should be automatically determined\r\n   * @internal\r\n   */\r\n  public measureUnitsAuto: boolean = false;\r\n\r\n  /**\r\n   * Observable of area\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<Measure> = new BehaviorSubject({});\r\n\r\n  /**\r\n   * Observable of selected features\r\n   * @internal\r\n   */\r\n  public selectedFeatures$: BehaviorSubject<FeatureWithMeasure[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * OL draw source\r\n   * @internal\r\n   */\r\n  public showTooltips: boolean = true;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Draw polygon control\r\n   */\r\n  private drawPolygonControl: DrawControl;\r\n\r\n  /**\r\n   * Modify control\r\n   */\r\n  private modifyControl: ModifyControl;\r\n\r\n  /**\r\n   * Active OL geometry\r\n   */\r\n  private activeOlGeometry: OlLineString | OlPolygon;\r\n\r\n  /**\r\n   * Active mlength unit\r\n   */\r\n  private activeLengthUnit: MeasureLengthUnit = MeasureLengthUnit.Meters;\r\n\r\n  /**\r\n   * Active area unit\r\n   */\r\n  private activeAreaUnit: MeasureAreaUnit = MeasureAreaUnit.SquareMeters;\r\n\r\n  /**\r\n   * Feature added listener key\r\n   */\r\n  private onFeatureAddedKey: string;\r\n\r\n  /**\r\n   * Feature removed listener key\r\n   */\r\n  private onFeatureRemovedKey: string;\r\n\r\n  /**\r\n   * Active draw control\r\n   * @internal\r\n   */\r\n  private activeDrawControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private drawChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify start\r\n   */\r\n  private modifyStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify end\r\n   */\r\n  private modifyEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private modifyChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to measures selection\r\n   */\r\n  private selectedFeatures$$: Subscription;\r\n\r\n  /**\r\n   * OL draw source\r\n   */\r\n  private olDrawSource = new OlVectorSource();\r\n\r\n  /**\r\n   * The map to measure on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The measures store\r\n   */\r\n  @Input() store: FeatureStore<FeatureWithMeasure>;\r\n\r\n  /**\r\n   * Measure type\r\n   * @internal\r\n   */\r\n  @Input()\r\n  set activeMeasureType(value: MeasureType) { this.setActiveMeasureType(value); }\r\n  get activeMeasureType(): MeasureType { return this._activeMeasureType; }\r\n  private _activeMeasureType: MeasureType = MeasureType.Length;\r\n\r\n  /**\r\n   * The minimum length a segment must have to display a tooltip.\r\n   * It also applies to area tooltips.\r\n   */\r\n  @Input() minSegmentLength: number = 10;\r\n\r\n  @ViewChild('table') table: EntityTableComponent;\r\n\r\n  /**\r\n   * Wheter one of the draw control is active\r\n   * @internal\r\n   */\r\n  get drawControlIsActive(): boolean {\r\n    return this.activeDrawControl !== undefined;\r\n  }\r\n\r\n  get projection(): OlProjection {\r\n    return this.map.ol.getView().getProjection();\r\n  }\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  /**\r\n   * Add draw controls and activate one\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.initStore();\r\n    this.createDrawLineControl();\r\n    this.createDrawPolygonControl();\r\n    this.createModifyControl();\r\n    this.toggleDrawControl();\r\n    this.onToggleTooltips(this.showTooltips);\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.setActiveMeasureType(undefined);\r\n    this.deactivateModifyControl();\r\n    this.freezeStore();\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onMeasureTypeChange(measureType: MeasureType) {\r\n    this.activeMeasureType = measureType;\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleDrawControl(toggle: boolean) {\r\n    if (toggle === true) {\r\n      this.toggleDrawControl();\r\n    } else {\r\n      this.deactivateDrawControl();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleTooltips(toggle: boolean) {\r\n    this.showTooltips = toggle;\r\n    if (toggle === true) {\r\n      this.showTooltipsOfOlSource(this.store.source.ol);\r\n    } else {\r\n      this.clearTooltipsOfOlSource(this.store.source.ol);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleMeasureUnitsAuto(toggle: boolean) {\r\n    this.measureUnitsAuto = toggle;\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onLengthUnitChange(unit: MeasureLengthUnit) {\r\n    this.activeLengthUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onAreaUnitChange(unit: MeasureAreaUnit) {\r\n    this.activeAreaUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  onCalculateClick() {\r\n    const features = this.selectedFeatures$.value;\r\n    const area = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      return sum + feature.properties.measure.area || 0;\r\n    }, 0);\r\n    const length = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'Polygon') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n    const perimeter = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'LineString') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n\r\n    this.openDialog({\r\n      area,\r\n      length,\r\n      perimeter\r\n    });\r\n  }\r\n\r\n  onDeleteClick() {\r\n    this.store.deleteMany(this.selectedFeatures$.value);\r\n  }\r\n\r\n  onModifyClick() {\r\n    if (this.selectedFeatures$.value.length !== 1) { return; }\r\n\r\n    if (this.modifyControl.active === true) {\r\n      this.deactivateModifyControl();\r\n      this.toggleDrawControl();\r\n    } else {\r\n      const feature = this.selectedFeatures$.value[0];\r\n      const olFeatures = this.store.layer.ol.getSource().getFeatures();\r\n      const olFeature = olFeatures.find((_olFeature: OlFeature) => {\r\n        return _olFeature.get('id') === feature.properties.id;\r\n      });\r\n\r\n      if (olFeature !== undefined) {\r\n        this.deactivateDrawControl();\r\n        this.activateModifyControl();\r\n\r\n        const olGeometry = olFeature.getGeometry();\r\n        this.clearTooltipsOfOlGeometry(olGeometry);\r\n        this.modifyControl.setOlGeometry(olGeometry);\r\n      }\r\n    }\r\n  }\r\n\r\n  private openDialog(data: MeasurerDialogData): void {\r\n    this.dialog.open(MeasurerDialogComponent, {data});\r\n  }\r\n\r\n  /**\r\n   * Initialize the measure store and set up some listeners\r\n   * @internal\r\n   */\r\n  private initStore() {\r\n    const store = this.store;\r\n\r\n    const layer = new VectorLayer({\r\n      title: 'Measures',\r\n      zIndex: 200,\r\n      source: new FeatureDataSource(),\r\n      style: createMeasureLayerStyle(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n    tryBindStoreLayer(store, layer);\r\n\r\n    tryAddLoadingStrategy(store);\r\n\r\n    tryAddSelectionStrategy(store, new FeatureStoreSelectionStrategy({\r\n      map: this.map,\r\n      many: true\r\n    }));\r\n\r\n    this.onFeatureAddedKey = store.source.ol.on('addfeature', (event: OlVectorSourceEvent) => {\r\n      const feature = event.feature;\r\n      const olGeometry = feature.getGeometry();\r\n      this.updateMeasureOfOlGeometry(olGeometry, feature.get('measure'));\r\n    });\r\n\r\n    this.onFeatureRemovedKey = store.source.ol.on('removefeature', (event: OlVectorSourceEvent) => {\r\n      const olGeometry = event.feature.getGeometry();\r\n      this.clearTooltipsOfOlGeometry(olGeometry);\r\n    });\r\n\r\n    this.selectedFeatures$$ = store.stateView.manyBy$((record: EntityRecord<FeatureWithMeasure>) => {\r\n      return record.state.selected === true;\r\n    }).pipe(\r\n      skip(1)  // Skip initial emission\r\n    )\r\n    .subscribe((records: EntityRecord<FeatureWithMeasure>[]) => {\r\n      if (this.modifyControl.active === true) {\r\n        this.deactivateModifyControl();\r\n      }\r\n      this.selectedFeatures$.next(records.map(record => record.entity));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Freeze any store, meaning the layer is removed, strategies are deactivated\r\n   * and some listener removed\r\n   * @internal\r\n   */\r\n  private freezeStore() {\r\n    const store = this.store;\r\n    this.selectedFeatures$$.unsubscribe();\r\n    unByKey(this.onFeatureAddedKey);\r\n    unByKey(this.onFeatureRemovedKey);\r\n    this.clearTooltipsOfOlSource(store.source.ol);\r\n    this.map.removeLayer(store.layer);\r\n    store.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    store.deactivateStrategyOfType(FeatureStoreSelectionStrategy);\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control\r\n   */\r\n  private createDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createDrawPolygonControl() {\r\n    this.drawPolygonControl = new DrawControl({\r\n      geometryType: 'Polygon',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate the right control\r\n   */\r\n  private toggleDrawControl() {\r\n    this.deactivateDrawControl();\r\n    // this.deactivateModifyControl();\r\n    if (this.activeMeasureType === MeasureType.Length) {\r\n      this.activateDrawControl(this.drawLineControl);\r\n    } else if (this.activeMeasureType === MeasureType.Area) {\r\n      this.activateDrawControl(this.drawPolygonControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param drawControl Draw control\r\n   */\r\n  private activateDrawControl(drawControl: DrawControl) {\r\n    this.activeDrawControl = drawControl;\r\n    this.drawStart$$ = drawControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawStart(olGeometry));\r\n    this.drawEnd$$ = drawControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawEnd(olGeometry));\r\n    this.drawChanges$$ = drawControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawChanges(olGeometry));\r\n\r\n    drawControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active draw control\r\n   */\r\n  private deactivateDrawControl() {\r\n    if (this.activeDrawControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n    if (this.drawStart$$ !== undefined ) { this.drawStart$$.unsubscribe(); }\r\n    if (this.drawEnd$$ !== undefined ) { this.drawEnd$$.unsubscribe(); }\r\n    if (this.drawChanges$$ !== undefined ) { this.drawChanges$$.unsubscribe(); }\r\n\r\n    this.clearTooltipsOfOlSource(this.olDrawSource);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.clearTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n    this.activeDrawControl.setOlMap(undefined);\r\n    this.activeDrawControl = undefined;\r\n    this.activeOlGeometry = undefined;\r\n  }\r\n\r\n  private setActiveMeasureType(measureType: MeasureType) {\r\n    this._activeMeasureType = measureType;\r\n    this.clearMeasures();\r\n    this.toggleDrawControl();\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = olGeometry;\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = undefined;\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n    this.addFeatureToStore(olGeometry);\r\n    this.clearTooltipsOfOlGeometry(olGeometry);\r\n    this.olDrawSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawChanges(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = measureOlGeometry(olGeometry, this.projection);\r\n    this.updateMeasureOfOlGeometry(olGeometry, Object.assign({}, measure, {\r\n      area: undefined  // We don't want to display an area tooltip while drawing.\r\n    }));\r\n    this.measure$.next(measure);\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param modifyControl Modify control\r\n   */\r\n  private activateModifyControl() {\r\n    const selection = this.store.getStrategyOfType(FeatureStoreSelectionStrategy) as FeatureStoreSelectionStrategy;\r\n    selection.deactivate();\r\n    selection.clear();\r\n\r\n    this.modifyStart$$ = this.modifyControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyStart(olGeometry));\r\n    this.modifyEnd$$ = this.modifyControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyEnd(olGeometry));\r\n    this.modifyChanges$$ = this.modifyControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyChanges(olGeometry));\r\n    this.modifyControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active modify control\r\n   */\r\n  private deactivateModifyControl() {\r\n    if (this.modifyStart$$ !== undefined ) { this.modifyStart$$.unsubscribe(); }\r\n    if (this.modifyEnd$$ !== undefined ) { this.modifyEnd$$.unsubscribe(); }\r\n    if (this.modifyChanges$$ !== undefined ) { this.modifyChanges$$.unsubscribe(); }\r\n\r\n    if (this.activeOlGeometry !== undefined) {\r\n      if (this.selectedFeatures$.value.length === 1) {\r\n        const feature = this.selectedFeatures$.value[0];\r\n        this.addFeatureToStore(this.activeOlGeometry, feature);\r\n      }\r\n      this.finalizeMeasureOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n\r\n    this.store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n\r\n    this.activeOlGeometry = undefined;\r\n    this.modifyControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawStart(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyChanges(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawChanges(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  private finalizeMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    let measure = measureOlGeometry(olGeometry, this.projection);\r\n    if (olGeometry instanceof OlPolygon) {\r\n      measure = Object.assign({}, measure, {\r\n        lengths: []  // We don't want to display an area tooltip while drawing.\r\n      });\r\n    }\r\n    this.updateMeasureOfOlGeometry(olGeometry, measure);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables\r\n   * @param olGeometry Ol linestring or polygon\r\n   * @param measure Measure\r\n   */\r\n  private updateMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon, measure: Measure) {\r\n    olGeometry.setProperties({_measure: measure}, true);\r\n    this.updateTooltipsOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the measures observables\r\n   */\r\n  private clearMeasures() {\r\n    this.measure$.next({});\r\n  }\r\n\r\n  /**\r\n   * Add a feature with measures to the store. The loading stragegy of the store\r\n   * will trigger and add the feature to the map.\r\n   * @internal\r\n   */\r\n  private addFeatureToStore(olGeometry: OlLineString | OlPolygon, feature?: FeatureWithMeasure) {\r\n    const featureId = feature ? feature.properties.id : uuid();\r\n    const projection = this.map.ol.getView().getProjection();\r\n    const geometry = new OlGeoJSON().writeGeometryObject(olGeometry, {\r\n      featureProjection: projection,\r\n      dataProjection: projection\r\n    });\r\n    this.store.update({\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: projection.getCode(),\r\n      properties: {\r\n        id: featureId,\r\n        measure: olGeometry.get('_measure')\r\n      },\r\n      meta: {\r\n        id: featureId\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update all the tooltips of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   * @param lengths Lengths of the OL geometry's segments\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = olGeometry.get('_measure');\r\n    const lengths = measure.lengths;\r\n    const area = measure.area;\r\n\r\n    const olMidpointsTooltips = updateOlTooltipsAtMidpoints(olGeometry);\r\n    if (lengths.length === olMidpointsTooltips.length) {\r\n      for (let i = 0; i < olMidpointsTooltips.length; i++) {\r\n        const length = lengths[i];\r\n        if (length !== undefined) {\r\n          this.updateOlTooltip(\r\n            olMidpointsTooltips[i],\r\n            metersToUnit(length, this.activeLengthUnit),\r\n            this.activeLengthUnit,\r\n            MeasureType.Length\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (area !== undefined) {\r\n      this.updateOlTooltip(\r\n        updateOlTooltipAtCenter(olGeometry),\r\n        squareMetersToUnit(area,  this.activeAreaUnit),\r\n        this.activeAreaUnit,\r\n        MeasureType.Area\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of a geoemtry\r\n   */\r\n  private showTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (this.shouldShowTooltip(olTooltip)) {\r\n        this.map.ol.addOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the tooltips of an OL geometrys\r\n   * @param olGeometry OL geometry with tooltips\r\n   */\r\n  private clearTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (olTooltip !== undefined && olTooltip.getMap() !== undefined) {\r\n        this.map.ol.removeOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private updateTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.updateTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private showTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.showTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the map tooltips\r\n   * @param olDrawSource OL vector source\r\n   */\r\n  private clearTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry !== undefined) {\r\n        this.clearTooltipsOfOlGeometry(olFeature.getGeometry());\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update an OL tooltip properties and inner HTML and add it to the map if possible\r\n   * @param olTooltip OL tooltip\r\n   * @param measure The measure valeu ti display\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateOlTooltip(\r\n    olTooltip: OlOverlay,\r\n    measure: number,\r\n    unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    type: MeasureType\r\n  ) {\r\n    olTooltip.setProperties({_measure: measure, _unit: unit, _type: type}, true);\r\n    olTooltip.getElement().innerHTML = this.computeTooltipInnerHTML(olTooltip);\r\n    if (this.shouldShowTooltip(olTooltip)) {\r\n      this.map.ol.addOverlay(olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute a tooltip's content\r\n   * @param olTooltip OL overlay\r\n   * @returns Inner HTML\r\n   */\r\n  private computeTooltipInnerHTML(olTooltip: OlOverlay): string {\r\n    const properties = olTooltip.getProperties() as any;\r\n    return formatMeasure(properties._measure, {\r\n      decimal: 1,\r\n      unit: properties._unit,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Whether a tooltip should be showned based on the length\r\n   * of the segment it is bound to.\r\n   * @param olTooltip OL overlay\r\n   * @returns True if the tooltip should be shown\r\n   */\r\n  private shouldShowTooltip(olTooltip: OlOverlay): boolean {\r\n    if (this.showTooltips === false) {\r\n      return false;\r\n    }\r\n\r\n    const properties = olTooltip.getProperties() as any;\r\n    const measure = properties._measure;\r\n    if (measure === undefined) {\r\n      return false;\r\n    }\r\n\r\n    if (properties._unit === MeasureType.Length) {\r\n      const minSegmentLength = metersToUnit(this.minSegmentLength, properties._unit) || 0;\r\n      return measure > Math.max(minSegmentLength, 0);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit } from '../shared/measure.enum';\r\nimport { metersToUnit, squareMetersToUnit, formatMeasure } from '../shared/measure.utils';\r\n\r\n/**\r\n * This pipe returns a measure converted from meters (or square meters)\r\n * to the specified unit. It also keeps a certain number of decimals.\r\n */\r\n@Pipe({\r\n  name: 'measureFormat'\r\n})\r\nexport class MeasureFormatPipe implements PipeTransform {\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  transform(\r\n    value: number, unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    unitAbbr: boolean = false,\r\n    decimal: number = 1\r\n  ): number {\r\n    let out;\r\n    if (Object.values(MeasureAreaUnit).indexOf(unit) >= 0) {\r\n      out = squareMetersToUnit(value, unit as MeasureAreaUnit);\r\n    } else if (Object.values(MeasureLengthUnit).indexOf(unit) >= 0) {\r\n      out = metersToUnit(value, unit as MeasureLengthUnit);\r\n    }\r\n\r\n    return out ? formatMeasure(out, {\r\n      decimal: 1,\r\n      unit,\r\n      unitAbbr,\r\n      locale: 'fr'\r\n    }) : out;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  Self,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { NgControl, ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Style as OlStyle } from 'ol/style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlOverlay from 'ol/Overlay';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport {\r\n  MeasureLengthUnit,\r\n  clearOlGeometryMidpoints,\r\n  updateOlGeometryMidpoints,\r\n  formatMeasure,\r\n  measureOlGeometry\r\n} from '../../measure';\r\nimport { DrawControl, ModifyControl } from '../shared/controls';\r\nimport { createDrawInteractionStyle } from '../shared/geometry.utils';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map. A text input is also displayed in the\r\n * form with some instructions.\r\n * This is still WIP.\r\n */\r\n@Component({\r\n  selector: 'igo-geometry-form-field-input',\r\n  templateUrl: './geometry-form-field-input.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldInputComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olGeoJSON = new OlGeoJSON();\r\n  private ready = false;\r\n\r\n  private drawControl: DrawControl;\r\n  private modifyControl: ModifyControl;\r\n  private drawInteractionStyle: OlStyle;\r\n  private defaultDrawStyleRadius: number;\r\n  private olGeometryEnds$$: Subscription;\r\n  private olGeometryChanges$$: Subscription;\r\n\r\n  private olTooltip = OlOverlay;\r\n\r\n  /**\r\n   * Active control\r\n   * @internal\r\n   */\r\n  public activeControl: DrawControl | ModifyControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The geometry type\r\n   */\r\n  @Input()\r\n  set geometryType(value: OlGeometryType) {\r\n    this._geometryType = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n    this.deactivateControl();\r\n    this.createDrawControl();\r\n    this.toggleControl();\r\n  }\r\n  get geometryType(): OlGeometryType { return this._geometryType; }\r\n  private _geometryType: OlGeometryType;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input() drawGuide = 0;\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * The geometry value (GeoJSON)\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  @Input()\r\n  set value(value: GeoJSONGeometry) {\r\n    if (this.ready === false) {\r\n      this._value = value;\r\n      return;\r\n    }\r\n\r\n    if (value) {\r\n      this.addGeoJSONToOverlay(value);\r\n    } else {\r\n      this.olOverlaySource.clear();\r\n    }\r\n\r\n    this._value = value;\r\n    this.onChange(value);\r\n    this.toggleControl();\r\n    this.cdRef.detectChanges();\r\n  }\r\n  get value(): GeoJSONGeometry { return this._value; }\r\n  private _value: GeoJSONGeometry;\r\n\r\n  /**\r\n   * The vector source to add the geometry to\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    @Optional() @Self() public ngControl: NgControl\r\n  ) {\r\n    if (this.ngControl !== undefined) {\r\n      // Setting the value accessor directly (instead of using\r\n      // the providers) to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an overlay layer, add the initial geometry to it (if any)\r\n   * and toggle the right interaction.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.addOlOverlayLayer();\r\n    this.createMeasureTooltip();\r\n    this.drawInteractionStyle = createDrawInteractionStyle();\r\n    this.defaultDrawStyleRadius = this.drawInteractionStyle.getImage().getRadius();\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n    if (this.value) {\r\n      this.addGeoJSONToOverlay(this.value);\r\n    }\r\n    this.toggleControl();\r\n    this.ready = true;\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.deactivateControl();\r\n    this.olOverlaySource.clear();\r\n    this.map.ol.removeLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnChange(fn: Function) {\r\n    this.onChange = fn;\r\n  }\r\n  private onChange: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n  private onTouched: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  writeValue(value: GeoJSONGeometry) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Add an overlay layer to the map\r\n   */\r\n  private addOlOverlayLayer(): OlVectorLayer {\r\n    this.olOverlayLayer = new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      zIndex: 500\r\n    });\r\n    this.map.ol.addLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create a draw control and subscribe to it's geometry\r\n   */\r\n  private createDrawControl() {\r\n    this.drawControl = new DrawControl({\r\n      geometryType: this.geometryType,\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawInteractionStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a modify control and subscribe to it's geometry\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawInteractionStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle the proper control (draw or modify)\r\n   */\r\n  private toggleControl() {\r\n    this.deactivateControl();\r\n    if (!this.value) {\r\n      this.activateControl(this.drawControl);\r\n    } else {\r\n      this.activateControl(this.modifyControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param control Control\r\n   */\r\n  private activateControl(control: DrawControl | ModifyControl) {\r\n    this.activeControl = control;\r\n    this.olGeometryEnds$$ = control.end$\r\n      .subscribe((olGeometry: OlGeometry) => this.onOlGeometryEnds(olGeometry));\r\n    if (this.measure === true && control === this.drawControl) {\r\n      this.olGeometryChanges$$ = control.changes$\r\n        .subscribe((olGeometry: OlGeometry) => this.onOlGeometryChanges(olGeometry));\r\n    }\r\n    control.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active control\r\n   */\r\n  private deactivateControl() {\r\n    this.removeMeasureTooltip();\r\n    if (this.activeControl !== undefined) {\r\n      this.activeControl.setOlMap(undefined);\r\n    }\r\n    if (this.olGeometryEnds$$ !== undefined) {\r\n      this.olGeometryEnds$$.unsubscribe();\r\n    }\r\n    if (this.olGeometryChanges$$ !== undefined) {\r\n      this.olGeometryChanges$$.unsubscribe();\r\n    }\r\n    this.activeControl = undefined;\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryEnds(olGeometry: OlGeometry | undefined) {\r\n    this.removeMeasureTooltip();\r\n    this.setOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryChanges(olGeometry: OlGeometry) {\r\n    if (olGeometry.getType() !== 'Point') {\r\n      this.updateMeasureTooltip(olGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, convert the output value to GeoJSON and keep it.\r\n   * Restore the double click interaction.\r\n   * @param olGeometry OL geometry\r\n   */\r\n  private setOlGeometry(olGeometry: OlGeometry | undefined) {\r\n    if (olGeometry === undefined) {\r\n      return;\r\n    }\r\n    const value = this.olGeoJSON.writeGeometryObject(olGeometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: 'EPSG:4326'\r\n    });\r\n    this.writeValue(value);\r\n  }\r\n\r\n  /**\r\n   * Add a GeoJSON geometry to the overlay\r\n   * @param geometry GeoJSON geometry\r\n   */\r\n  private addGeoJSONToOverlay(geometry: GeoJSONGeometry) {\r\n    const olGeometry = this.olGeoJSON.readGeometry(geometry, {\r\n      dataProjection: 'EPSG:4326',\r\n      featureProjection: this.map.projection\r\n    });\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create the measure tooltip\r\n   */\r\n  private createMeasureTooltip(): OlOverlay {\r\n    this.olTooltip = new OlOverlay({\r\n      element: document.createElement('div'),\r\n      offset: [-30, -10],\r\n      className: [\r\n        'igo-map-tooltip',\r\n        'igo-map-tooltip-measure'\r\n      ].join(' '),\r\n      stopEvent: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the measure tooltip of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   */\r\n  private updateMeasureTooltip(olGeometry: OlGeometry) {\r\n    const measure = measureOlGeometry(olGeometry, this.map.projection);\r\n    const lengths = measure.lengths;\r\n    const lastIndex = olGeometry.getType() === 'Polygon' ? lengths.length - 2 : lengths.length - 1;\r\n    const lastLength = lengths[lastIndex];\r\n\r\n    const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n    const olLastMidpoint = olMidpoints[lastIndex];\r\n    if (olMidpoints.length === 0 || olLastMidpoint === undefined) {\r\n      this.removeMeasureTooltip();\r\n      return;\r\n    }\r\n\r\n    this.olTooltip.setPosition(olLastMidpoint.flatCoordinates);\r\n\r\n    const innerHtml = formatMeasure(lastLength, {\r\n      decimal: 1,\r\n      unit: MeasureLengthUnit.Meters,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    });\r\n    this.olTooltip.getElement().innerHTML = innerHtml;\r\n    if (this.olTooltip.getMap() === undefined) {\r\n      this.map.ol.addOverlay(this.olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the measure tooltip from the map\r\n   */\r\n  private removeMeasureTooltip() {\r\n    if (this.olTooltip.getMap() !== undefined) {\r\n      this.map.ol.removeOverlay(this.olTooltip);\r\n      this.olTooltip.setMap(undefined);\r\n    }\r\n  }\r\n\r\n  private updateDrawStyleWithDrawGuide(olStyle: OlStyle, resolution: number) {\r\n    const drawGuide = this.drawGuide;\r\n    let radius;\r\n    if (drawGuide === undefined || drawGuide < 0) {\r\n      radius = this.defaultDrawStyleRadius;\r\n    } else {\r\n      radius = drawGuide > 0 ? drawGuide / resolution : drawGuide;\r\n    }\r\n    olStyle.getImage().setRadius(radius);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { GeometryFormFieldComponent } from './geometry-form-field.component';\r\nimport { GeometryFormFieldInputComponent } from './geometry-form-field-input.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ],\r\n  declarations: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ]\r\n})\r\nexport class IgoGeometryFormFieldModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoGeometryFormFieldModule } from './geometry-form-field/geometry-form-field.module';\r\nimport { GeometryFormFieldComponent } from './geometry-form-field/geometry-form-field.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  exports: [\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  declarations: [],\r\n  providers: [],\r\n  entryComponents: [\r\n    GeometryFormFieldComponent\r\n  ]\r\n})\r\nexport class IgoGeometryModule {}\r\n","export class ExportError extends Error {}\r\n\r\nexport class ExportInvalidFileError extends ExportError {\r\n  constructor() {\r\n    super('Invalid file.');\r\n    Object.setPrototypeOf(this, ExportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ExportNothingToExportError extends ExportError {\r\n  constructor() {\r\n    super('Nothing to export.');\r\n    Object.setPrototypeOf(this, ExportNothingToExportError.prototype);\r\n  }\r\n}\r\n","import { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport {\r\n  getEntityProperty,\r\n  EntityTableColumn,\r\n  EntityTableColumnRenderer\r\n} from '@igo2/common';\r\n\r\nimport { ExportNothingToExportError } from './export.errors';\r\n\r\n/**\r\n * Export array to CSV\r\n *\r\n * @param rows Array of arrays to export as CSV\r\n * @param separator Cell separator\r\n */\r\nexport function exportToCSV(rows: any[][], fileName: string, separator: string = ';') {\r\n  const lines = rows.map((row: any[][], index: number) => row.join(separator));\r\n  const csvContent = lines.join('\\n');\r\n  downloadContent(csvContent, 'text/csv;charset=utf-8', fileName);\r\n}\r\n\r\n/**\r\n * Return an array of values from an array of entities.\r\n *\r\n * @param entities Array of entities\r\n * @param scolumns Columns definition of the output data\r\n */\r\nexport function entitiesToRowData(entities: object[], columns: EntityTableColumn[]) {\r\n  return entities.map((entity: object) => {\r\n    return columns.map((column: EntityTableColumn) => {\r\n      let valueAccessor;\r\n      if (column.renderer === undefined || column.renderer === EntityTableColumnRenderer.Default) {\r\n        valueAccessor = column.valueAccessor;\r\n      }\r\n      valueAccessor = valueAccessor ? valueAccessor : getEntityProperty;\r\n      return valueAccessor(entity, column.name);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Trigger download of a file\r\n *\r\n * @param content File content\r\n * @param mimeType File mime type\r\n * @param fileName File name\r\n */\r\nexport function downloadContent(content: string, mimeType: string, fileName: string) {\r\n  const element = document.createElement('a');\r\n  element.setAttribute(\r\n    'href',\r\n    `data:${mimeType},${encodeURIComponent(content)}`\r\n  );\r\n  element.setAttribute('download', fileName);\r\n  element.style.display = 'none';\r\n  document.body.appendChild(element);\r\n\r\n  element.click();\r\n\r\n  document.body.removeChild(element);\r\n}\r\n\r\nexport function handleFileExportError(\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  if (error instanceof ExportNothingToExportError) {\r\n    handleNothingToExportError(messageService, languageService);\r\n    return;\r\n  }\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.failed.title');\r\n  const message = translate.instant('igo.geo.export.failed.text');\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToExportError(\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.nothing.title');\r\n  const message = translate.instant('igo.geo.export.nothing.text');\r\n  messageService.error(message, title);\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const ExportFormat = strEnum(['GeoJSON', 'GML', 'GPX', 'KML', 'Shapefile']);\r\nexport type ExportFormat = keyof typeof ExportFormat;\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { downloadContent } from './export.utils';\r\nimport { ExportFormat } from './export.type';\r\nimport { ExportInvalidFileError, ExportNothingToExportError } from './export.errors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportService {\r\n\r\n  static ogreFormats = {\r\n    GML: 'gml',\r\n    GPX: 'gpx',\r\n    KML: 'kml',\r\n    Shapefile: 'ESRI Shapefile'\r\n  };\r\n\r\n  static noOgreFallbacks = ['GML', 'GPX', 'KML'];\r\n\r\n  private ogreUrl: string;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n  }\r\n\r\n  export(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn = 'EPSG:4326',\r\n    projectionOut = 'EPSG:4326'\r\n  ): Observable<void> {\r\n    const exportOlFeatures = olFeatures.map((olFeature: OlFeature) => {\r\n      const keys = olFeature.getKeys().filter((key: string) => !key.startsWith('_'));\r\n      const properties = keys.reduce((acc: object, key: string) => {\r\n        acc[key] = olFeature.get(key);\r\n        return acc;\r\n      }, {geometry: olFeature.getGeometry()});\r\n      return new OlFeature(properties);\r\n    });\r\n\r\n    return this.exportAsync(exportOlFeatures, format, title, projectionIn, projectionOut);\r\n  }\r\n\r\n  private exportAsync(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Observable<void> {\r\n    const doExport = (observer: Observer<void>) => {\r\n      const nothingToExport = this.nothingToExport(olFeatures, format);\r\n      if (nothingToExport === true) {\r\n        observer.error(new ExportNothingToExportError());\r\n        return;\r\n      }\r\n\r\n      const ogreFormats = Object.keys(ExportService.ogreFormats);\r\n      if (ogreFormats.indexOf(format) >= 0) {\r\n        if (this.ogreUrl === undefined) {\r\n          if (ExportService.noOgreFallbacks.indexOf(format) >= 0) {\r\n            this.exportToFile(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n          } else {\r\n            observer.error(new ExportInvalidFileError());\r\n          }\r\n          return;\r\n        }\r\n        this.exportWithOgre(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n      } else {\r\n        this.exportToFile(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n      }\r\n    };\r\n\r\n    return new Observable(doExport);\r\n  }\r\n\r\n  private exportToFile(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const olFormat = new olformat[format]();\r\n    const featuresText = olFormat.writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const fileName = `${title}.${format.toLowerCase()}`;\r\n\r\n    downloadContent(featuresText, 'text/plain;charset=utf-8', fileName);\r\n    observer.complete();\r\n  }\r\n\r\n  private exportWithOgre(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: string,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const featuresText = new olformat.GeoJSON().writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const url = `${this.ogreUrl}/convert`;\r\n    const form = document.createElement('form');\r\n    form.setAttribute('method', 'post');\r\n    form.setAttribute('action', url);\r\n\r\n    const geojsonField = document.createElement('input');\r\n    geojsonField.setAttribute('type', 'hidden');\r\n    geojsonField.setAttribute('name', 'json');\r\n    geojsonField.setAttribute('value', featuresText);\r\n    form.appendChild(geojsonField);\r\n\r\n    const outputNameField = document.createElement('input');\r\n    const outputName = format === 'Shapefile' ? `${title}.zip` : title;\r\n    outputNameField.setAttribute('type', 'hidden');\r\n    outputNameField.setAttribute('name', 'outputName');\r\n    outputNameField.setAttribute('value', outputName);\r\n    form.appendChild(outputNameField);\r\n\r\n    const ogreFormat = ExportService.ogreFormats[format];\r\n    const outputFormatField = document.createElement('input');\r\n    outputFormatField.setAttribute('type', 'hidden');\r\n    outputFormatField.setAttribute('name', 'formatOutput');\r\n    outputFormatField.setAttribute('value', ogreFormat);\r\n    form.appendChild(outputFormatField);\r\n\r\n    document.body.appendChild(form);\r\n    form.submit();\r\n    document.body.removeChild(form);\r\n\r\n    observer.complete();\r\n  }\r\n\r\n  private nothingToExport(olFeatures: OlFeature[], format: string): boolean {\r\n    if (olFeatures.length === 0) { return true; }\r\n    if (format === 'GPX') {\r\n      const pointOrLine = olFeatures.find((olFeature) => {\r\n        return ['Point', 'LineString'].indexOf(olFeature.getGeometry().getType()) >= 0;\r\n      });\r\n      return pointOrLine === undefined;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","export class ImportError extends Error {}\r\n\r\nexport class ImportInvalidFileError extends ImportError {\r\n  constructor() {\r\n    super('Invalid file.');\r\n    Object.setPrototypeOf(this, ImportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportUnreadableFileError extends ImportError {\r\n  constructor() {\r\n      super('Failed to read file.');\r\n      Object.setPrototypeOf(this, ImportUnreadableFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportNothingToImportError extends ImportError {\r\n  constructor() {\r\n      super('Nothing to import.');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n","import * as olStyle from 'ol/style';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { FeatureDataSourceOptions } from '../../datasource/shared/datasources/feature-datasource.interface';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { featureToOl, moveToOlFeatures } from '../../feature/shared/feature.utils';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { QueryableDataSourceOptions } from '../../query/shared/query.interfaces';\r\n\r\nexport function addLayerAndFeaturesToMap(features: Feature[], map: IgoMap, layerTitle: string): VectorLayer {\r\n  const olFeatures = features.map((feature: Feature) => featureToOl(feature, map.projection));\r\n\r\n  const r = Math.floor(Math.random() * 255);\r\n  const g = Math.floor(Math.random() * 255);\r\n  const b = Math.floor(Math.random() * 255);\r\n  const stroke = new olStyle.Stroke({\r\n    color: [r, g, b, 1],\r\n    width: 2\r\n  });\r\n\r\n  const fill = new olStyle.Fill({\r\n    color: [r, g, b, 0.4]\r\n  });\r\n  const sourceOptions: FeatureDataSourceOptions & QueryableDataSourceOptions = {\r\n    queryable: true\r\n  };\r\n  const source = new FeatureDataSource(sourceOptions);\r\n  source.ol.addFeatures(olFeatures);\r\n  const layer = new VectorLayer({\r\n    title: layerTitle,\r\n    source,\r\n    style: new olStyle.Style({\r\n      stroke,\r\n      fill,\r\n      image: new olStyle.Circle({\r\n        radius: 5,\r\n        stroke,\r\n        fill\r\n      })\r\n    })\r\n  });\r\n  map.addLayer(layer);\r\n  moveToOlFeatures(map, olFeatures);\r\n\r\n  return layer;\r\n}\r\n\r\nexport function handleFileImportSuccess(\r\n  file: File,\r\n  features: Feature[],\r\n  map: IgoMap,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  if (features.length === 0) {\r\n    this.handleNothingToImportError(file, messageService, languageService);\r\n    return;\r\n  }\r\n\r\n  const layerTitle = computeLayerTitleFromFile(file);\r\n  addLayerAndFeaturesToMap(features, map, layerTitle);\r\n\r\n  const translate = languageService.translate;\r\n  const messageTitle = translate.instant('igo.geo.dropGeoFile.success.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.success.text', {\r\n      value: layerTitle\r\n  });\r\n  messageService.success(message, messageTitle);\r\n}\r\n\r\nexport function handleFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.invalid.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.invalid.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToImportError(\r\n  file: File,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.empty.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.empty.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function getFileExtension(file: File): string {\r\n  return file.name.split('.').pop().toLowerCase();\r\n}\r\n\r\nexport function computeLayerTitleFromFile(file: File): string {\r\n  return file.name.substr(0, file.name.lastIndexOf('.'));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { ImportInvalidFileError, ImportUnreadableFileError } from './import.errors';\r\nimport { computeLayerTitleFromFile, getFileExtension } from './import.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImportService {\r\n\r\n  static allowedMimeTypes = [\r\n    'application/gml+xml',\r\n    'application/vnd.google-earth.kml+xml',\r\n    'application/gpx+xml',\r\n    'application/json'\r\n  ];\r\n\r\n  static allowedZipMimeTypes = [\r\n    'application/zip',\r\n    'application/x-zip-compressed',\r\n    'application/x-zip'\r\n  ];\r\n\r\n  static allowedExtensions = [\r\n    'geojson',\r\n    'kml',\r\n    'gpx',\r\n    'json',\r\n    'gml'\r\n  ];\r\n\r\n  private ogreUrl: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private config: ConfigService\r\n  ) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n  }\r\n\r\n  import(file: File, projectionIn = 'EPSG:4326', projectionOut = 'EPSG:4326'): Observable<Feature[]> {\r\n    return this.importAsync(file, projectionIn, projectionOut);\r\n  }\r\n\r\n  private getFileImporter(file: File): (file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) => void {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n    const allowedMimeTypes = [...ImportService.allowedMimeTypes, ...ImportService.allowedZipMimeTypes];\r\n    const allowedExtensions = ImportService.allowedExtensions;\r\n\r\n    if (allowedMimeTypes.indexOf(mimeType) < 0 && allowedExtensions.indexOf(extension) < 0) {\r\n      return undefined;\r\n    } else if (mimeType === 'application/json' || ['json', 'geojson', 'kml'].indexOf(extension) >= 0) {\r\n      return this.importFile;\r\n    } else if (this.ogreUrl !== undefined) {\r\n      return this.importFileWithOgre;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private importAsync(file: File, projectionIn: string, projectionOut: string): Observable<Feature[]> {\r\n    const doImport = (observer: Observer<Feature[]>) => {\r\n      const importer = this.getFileImporter(file);\r\n      if (importer === undefined) {\r\n        observer.error(new ImportInvalidFileError());\r\n        return;\r\n      }\r\n\r\n      importer.call(this, file, observer, projectionIn, projectionOut);\r\n    };\r\n\r\n    return new Observable(doImport);\r\n  }\r\n\r\n  private importFile(file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event: any) => {\r\n      try {\r\n        const features = this.parseFeaturesFromFile(\r\n          file,\r\n          event.target.result,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n        observer.next(features);\r\n      } catch (e) {\r\n        observer.error(new ImportUnreadableFileError());\r\n      }\r\n\r\n      observer.complete();\r\n    };\r\n\r\n    reader.onerror = evt => {\r\n      observer.error(new ImportUnreadableFileError());\r\n    };\r\n\r\n    reader.readAsText(file, 'UTF-8');\r\n  }\r\n\r\n  private importFileWithOgre(file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) {\r\n    const url = `${this.ogreUrl}/convert`;\r\n    const formData = new FormData();\r\n    formData.append('upload', file);\r\n    formData.append('sourceSrs', projectionIn);\r\n    formData.append('targetSrs', projectionOut);\r\n    formData.append('formatOutput', 'GEOJSON');\r\n    formData.append('skipFailures', '');\r\n\r\n    this.http\r\n      .post(url, formData, {headers: new HttpHeaders()})\r\n      .subscribe(\r\n        (response: {errors?: string[]} | object | null) => {\r\n          if (response === null) {\r\n            observer.error(new ImportUnreadableFileError());\r\n            return;\r\n          }\r\n\r\n          const errors = (response as any).errors || [];\r\n          if (errors.length > 0) {\r\n            observer.error(new ImportUnreadableFileError());\r\n          } else {\r\n            const features = this.parseFeaturesFromGeoJSON(file, response, projectionOut);\r\n            observer.next(features);\r\n            observer.complete();\r\n          }\r\n        },\r\n        (error: Error) => {\r\n          observer.error(new ImportUnreadableFileError());\r\n        }\r\n      );\r\n  }\r\n\r\n  private parseFeaturesFromFile(file: File, data: string, projectionIn: string, projectionOut: string): Feature[] {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n\r\n    const GeoJSON = new olformat.GeoJSON();\r\n\r\n    let format;\r\n    if (mimeType === 'application/vnd.google-earth.kml+xml') {\r\n      format = new olformat.KML();\r\n    } else if (mimeType === 'application/gml+xml') {\r\n      format = new olformat.GML();\r\n    } else if (mimeType === 'application/gpx+xml') {\r\n      format = new olformat.GPX();\r\n    } else {\r\n      switch (extension) {\r\n        case 'kml':\r\n          format = new olformat.KML();\r\n          break;\r\n       case 'gpx':\r\n          format = new olformat.GPX();\r\n          break;\r\n        case 'gml':\r\n          format = new olformat.GML();\r\n          break;\r\n        default:\r\n          format = GeoJSON;\r\n          break;\r\n      }\r\n    }\r\n\r\n    const olFeatures = format.readFeatures(data, {\r\n      dataProjection: projectionIn,\r\n      featureProjection: projectionOut\r\n    });\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(GeoJSON.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n\r\n  private parseFeaturesFromGeoJSON(file: File, data: object, projectionOut: string): Feature[] {\r\n    const olFormat = new olformat.GeoJSON();\r\n    const olFeatures = olFormat.readFeatures(data);\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(olFormat.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n}\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\n\r\nimport { handleFileExportError } from '../shared/export.utils';\r\nimport { ExportOptions } from '../shared/export.interface';\r\nimport { ExportFormat } from '../shared/export.type';\r\nimport { ExportService } from '../shared/export.service';\r\nimport { ImportService } from '../shared/import.service';\r\nimport { handleFileImportSuccess, handleFileImportError } from '../shared/import.utils';\r\n\r\n@Component({\r\n  selector: 'igo-import-export',\r\n  templateUrl: './import-export.component.html',\r\n  styleUrls: ['./import-export.component.scss']\r\n})\r\nexport class ImportExportComponent implements OnDestroy, OnInit {\r\n\r\n  public form: FormGroup;\r\n  public formats = ExportFormat;\r\n  public layers: VectorLayer[];\r\n  public inputProj: string = 'EPSG:4326';\r\n\r\n  private layers$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  constructor(\r\n    private importService: ImportService,\r\n    private exportService: ExportService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(layers => {\r\n      this.layers = layers\r\n        .filter((layer: Layer) => {\r\n          return layer instanceof VectorLayer && layer.exportable === true;\r\n        }) as VectorLayer[];\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  importFiles(files: File[]) {\r\n    for (const file of files) {\r\n      this.importService\r\n        .import(file, this.inputProj)\r\n        .subscribe(\r\n          (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n          (error: Error) => this.onFileImportError(file, error)\r\n        );\r\n    }\r\n  }\r\n\r\n  handleExportFormSubmit(data: ExportOptions) {\r\n    const layer = this.map.getLayerById(data.layer);\r\n    const olFeatures = layer.dataSource.ol.getFeatures();\r\n    this.exportService\r\n      .export(olFeatures, data.format, layer.title, this.map.projection)\r\n      .subscribe(\r\n        () => {},\r\n        (error: Error) => this.onFileExportError(error)\r\n      );\r\n  }\r\n\r\n  private buildForm() {\r\n    this.form = this.formBuilder.group({\r\n      format: ['', [Validators.required]],\r\n      layer: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    handleFileImportError(file, error, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileExportError(error: Error) {\r\n    handleFileExportError(error, this.messageService, this.languageService);\r\n  }\r\n}\r\n","import { Directive, HostListener, EventEmitter, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\nimport { DragAndDropDirective } from '@igo2/common';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { ImportService } from './import.service';\r\nimport { handleFileImportSuccess, handleFileImportError } from '../shared/import.utils';\r\n\r\n@Directive({\r\n  selector: '[igoDropGeoFile]'\r\n})\r\nexport class DropGeoFileDirective extends DragAndDropDirective implements OnInit, OnDestroy {\r\n\r\n  protected filesDropped: EventEmitter<File[]> = new EventEmitter();\r\n  protected filesInvalid: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  private filesDropped$$: Subscription;\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    private component: MapBrowserComponent,\r\n    private importService: ImportService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filesDropped$$ = this.filesDropped.subscribe((files: File[]) => {\r\n      this.onFilesDropped(files);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.filesDropped$$.unsubscribe();\r\n  }\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(evt) {\r\n    super.onDragOver(evt);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(evt) {\r\n    super.onDragLeave(evt);\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(evt) {\r\n    super.onDrop(evt);\r\n  }\r\n\r\n  private onFilesDropped(files: File[]) {\r\n    for (const file of files) {\r\n      this.importService\r\n        .import(file)\r\n        .subscribe(\r\n          (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n          (error: Error) => this.onFileImportError(file, error)\r\n        );\r\n    }\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    handleFileImportError(file, error, this.messageService, this.languageService);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatButtonModule,\r\n  MatTabsModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule, IgoDrapDropModule } from '@igo2/common';\r\n\r\nimport { ImportExportComponent } from './import-export/import-export.component';\r\nimport { DropGeoFileDirective } from './shared/drop-geo-file.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule,\r\n    IgoDrapDropModule\r\n  ],\r\n  exports: [ImportExportComponent, DropGeoFileDirective],\r\n  declarations: [ImportExportComponent, DropGeoFileDirective]\r\n})\r\nexport class IgoImportExportModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoImportExportModule\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatSliderModule,\r\n  MatBadgeModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoListModule,\r\n  IgoCollapsibleModule,\r\n  IgoImageModule\r\n} from '@igo2/common';\r\n\r\nimport { LayerService } from './shared/layer.service';\r\nimport { StyleService } from './shared/style.service';\r\nimport { LayerListService } from './layer-list/layer-list.service';\r\nimport { LayerItemComponent } from './layer-item/layer-item.component';\r\nimport { LayerLegendComponent } from './layer-legend/layer-legend.component';\r\nimport { LayerListComponent } from './layer-list/layer-list.component';\r\nimport { LayerListBindingDirective } from './layer-list/layer-list-binding.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    MatListModule,\r\n    MatSliderModule,\r\n    MatBadgeModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoImageModule\r\n  ],\r\n  exports: [\r\n    LayerItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListBindingDirective\r\n  ],\r\n  declarations: [\r\n    LayerItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListBindingDirective\r\n  ]\r\n})\r\nexport class IgoLayerModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLayerModule,\r\n      providers: [LayerService, StyleService, LayerListService]\r\n    };\r\n  }\r\n}\r\n","import { Directive, AfterViewInit, OnDestroy, Self, OnInit, EventEmitter, Output } from '@angular/core';\r\nimport { IgoMap } from './map';\r\nimport { MapBrowserComponent } from '../map-browser/map-browser.component';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\n@Directive({\r\n    selector: '[igoMapLayer]'\r\n  })\r\nexport class MapLayerDirective implements AfterViewInit {\r\n\r\n  private context$$: Subscription;\r\n  private state: ConnectionState;\r\n  private component: MapBrowserComponent;\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    component: MapBrowserComponent,\r\n    private networkService: NetworkService\r\n    ) {\r\n      this.component = component;\r\n    }\r\n\r\n  ngAfterViewInit() {\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      console.log(state);\r\n      this.state = state;\r\n      this.changeLayer();\r\n    });\r\n\r\n    this.map.layers$.subscribe((layers: Layer[]) => {\r\n      this.changeLayer();\r\n    });\r\n  }\r\n\r\n  private changeLayer() {\r\n    const layerList = this.map.layers$.value;\r\n    layerList.forEach(layer => {\r\n      if (layer.options.sourceOptions) {\r\n        if (layer.options.sourceOptions.pathOffline  &&\r\n          this.state.connection === false) {\r\n            if (layer.options.sourceOptions.excludeAttributeOffline) {\r\n              layer.options.sourceOptions.excludeAttributeBackUp = layer.options.sourceOptions.excludeAttribute;\r\n              layer.options.sourceOptions.excludeAttribute = layer.options.sourceOptions.excludeAttributeOffline;\r\n            }\r\n            layer.ol.getSource().clear();\r\n            layer.ol.getSource().setUrl(layer.options.sourceOptions.pathOffline);\r\n        } else if (layer.options.sourceOptions.pathOffline &&\r\n          this.state.connection === true) {\r\n            if (layer.options.sourceOptions.excludeAttributeBackUp) {\r\n              layer.options.sourceOptions.excludeAttribute = layer.options.sourceOptions.excludeAttributeBackUp;\r\n            }\r\n            layer.ol.getSource().clear();\r\n            layer.ol.getSource().setUrl(layer.options.sourceOptions.url);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoConfirmDialogModule } from '@igo2/common';\r\n\r\nimport { MapBrowserComponent } from './map-browser/map-browser.component';\r\nimport { ZoomButtonComponent } from './zoom-button/zoom-button.component';\r\nimport { GeolocateButtonComponent } from './geolocate-button/geolocate-button.component';\r\nimport { RotationButtonComponent } from './rotation-button/rotation-button.component';\r\nimport { BaseLayersSwitcherComponent } from './baselayers-switcher/baselayers-switcher.component';\r\nimport { MiniBaseMapComponent } from './baselayers-switcher/mini-basemap.component';\r\nimport { MapLayerDirective } from './shared/mapLayer.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoLanguageModule,\r\n    IgoConfirmDialogModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule\r\n  ],\r\n  exports: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapLayerDirective\r\n  ],\r\n  declarations: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapLayerDirective\r\n  ]\r\n})\r\nexport class IgoMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit\r\n} from '../shared/measure.enum';\r\nimport { computeBestAreaUnit, computeBestLengthUnit } from '../shared/measure.utils';\r\n\r\n/**\r\n * Measurer item\r\n */\r\n@Component({\r\n  selector: 'igo-measurer-item',\r\n  templateUrl: './measurer-item.component.html',\r\n  styleUrls: ['./measurer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerItemComponent implements OnDestroy {\r\n\r\n  /**\r\n   * Measure observable\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<number> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the measure observable when the auto mode is on\r\n   * @internal\r\n   */\r\n  public measure$$: Subscription;\r\n\r\n  /**\r\n   * Measure type\r\n   */\r\n  @Input() measureType: MeasureType;\r\n\r\n  /**\r\n   * Measure unit\r\n   */\r\n  @Input() measureUnit: MeasureAreaUnit | MeasureLengthUnit;\r\n\r\n  /**\r\n   * Measure\r\n   */\r\n  @Input()\r\n  set measure(value: number) {\r\n    this.measure$.next(value);\r\n  }\r\n  get measure(): number { return this.measure$.value; }\r\n\r\n  /**\r\n   * Whther measure units should be automatically determined\r\n   */\r\n  @Input()\r\n  set auto(value: boolean) { this.toggleAutoUnit(value); }\r\n  get auto(): boolean { return this._auto; }\r\n  private _auto: boolean = false;\r\n\r\n  /**\r\n   * Placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Event emitted when the measure unit changes\r\n   */\r\n  @Output() measureUnitChange = new EventEmitter<MeasureAreaUnit | MeasureLengthUnit>();\r\n\r\n  /**\r\n   * Available measure units for the measure type given\r\n   * @internal\r\n   */\r\n  get measureUnits(): string[] {\r\n    if (this.measureType === MeasureType.Area) {\r\n      return Object.values(MeasureAreaUnit);\r\n    }\r\n    return Object.values(MeasureLengthUnit);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Toggle the auto unit off\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.toggleAutoUnit(false);\r\n  }\r\n\r\n  /**\r\n   * Set the measure unit\r\n   * @internal\r\n   */\r\n  onMeasureUnitChange(unit: MeasureAreaUnit | MeasureLengthUnit) {\r\n    this.measureUnit = unit;\r\n    this.measureUnitChange.emit(unit);\r\n  }\r\n\r\n  private toggleAutoUnit(toggle: boolean) {\r\n    if (this.measure$$ !== undefined) {\r\n      this.measure$$.unsubscribe();\r\n    }\r\n    if (toggle === true) {\r\n      this.measure$$ = this.measure$.subscribe((measure: number) => {\r\n        this.computeBestMeasureUnit(measure);\r\n      });\r\n    }\r\n    this._auto = toggle;\r\n  }\r\n\r\n  private computeBestMeasureUnit(measure: number) {\r\n    let measureUnit = this.measureUnit;\r\n    if (this.measureType === MeasureType.Area) {\r\n      measureUnit = computeBestAreaUnit(measure);\r\n    } else if (this.measureType === MeasureType.Length) {\r\n      measureUnit = computeBestLengthUnit(measure);\r\n    }\r\n    if (measureUnit !== this.measureUnit) {\r\n      this.onMeasureUnitChange(measureUnit);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSelectModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoEntityTableModule } from '@igo2/common';\r\n\r\nimport { MeasureFormatPipe } from './measure-format.pipe';\r\nimport { MeasurerItemComponent } from './measurer-item.component';\r\nimport { MeasurerComponent } from './measurer.component';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoEntityTableModule\r\n  ],\r\n  declarations: [\r\n    MeasureFormatPipe,\r\n    MeasurerItemComponent,\r\n    MeasurerComponent,\r\n    MeasurerDialogComponent\r\n  ],\r\n  exports: [\r\n    MeasureFormatPipe,\r\n    MeasurerComponent\r\n  ],\r\n  entryComponents: [\r\n    MeasurerDialogComponent\r\n  ]\r\n})\r\nexport class IgoMeasurerModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { IgoMeasurerModule } from './measurer/measurer.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoMeasurerModule\r\n  ]\r\n})\r\nexport class IgoMeasureModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { MetadataOptions } from './metadata.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MetadataService {\r\n  constructor() {}\r\n\r\n  open(metadata: MetadataOptions) {\r\n    if (metadata.extern) {\r\n      window.open(metadata.url, '_blank');\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport {\r\n  MetadataOptions,\r\n  MetadataLayerOptions\r\n} from '../shared/metadata.interface';\r\nimport { MetadataService } from '../shared/metadata.service';\r\n\r\n@Component({\r\n  selector: 'igo-metadata-button',\r\n  templateUrl: './metadata-button.component.html',\r\n  styleUrls: ['./metadata-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MetadataButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private metadataService: MetadataService) {}\r\n\r\n  openMetadata(metadata: MetadataOptions) {\r\n    this.metadataService.open(metadata);\r\n  }\r\n\r\n  get options(): MetadataLayerOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { MetadataButtonComponent } from './metadata-button/metadata-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [MetadataButtonComponent],\r\n  declarations: [MetadataButtonComponent]\r\n})\r\nexport class IgoMetadataModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMetadataModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","export enum OverlayAction {\r\n    None,\r\n    Move,\r\n    Zoom,\r\n    ZoomIfOutMapExtent\r\n  }\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayAction } from './overlay.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OverlayService {\r\n  public features$ = new BehaviorSubject<[Feature[], OverlayAction]>([\r\n    [],\r\n    undefined\r\n  ]);\r\n\r\n  constructor() {}\r\n\r\n  setFeatures(features: Feature[], action: OverlayAction = OverlayAction.None) {\r\n    this.features$.next([features, action]);\r\n  }\r\n\r\n  clear() {\r\n    this.features$.next([[], OverlayAction.None]);\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayService } from '../shared/overlay.service';\r\nimport { OverlayAction } from '../shared/overlay.enum';\r\n\r\n@Directive({\r\n  selector: '[igoOverlay]'\r\n})\r\nexport class OverlayDirective implements OnInit, OnDestroy {\r\n  private features$$: Subscription;\r\n  private format = new olFormatGeoJSON();\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private overlayService: OverlayService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.features$$ = this.overlayService.features$.subscribe(res =>\r\n      this.handleFeatures(res[0], res[1])\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.features$$.unsubscribe();\r\n  }\r\n\r\n  private handleFeatures(features: Feature[], action: OverlayAction) {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { OverlayDirective } from './shared/overlay.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [OverlayDirective],\r\n  declarations: [OverlayDirective]\r\n})\r\nexport class IgoOverlayModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoOverlayModule\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { saveAs } from 'file-saver';\r\nimport * as jsPDF from 'jspdf';\r\nimport * as _html2canvas from 'html2canvas';\r\nimport * as JSZip from 'jszip';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { MessageService, ActivityService, LanguageService } from '@igo2/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { formatScale } from '../../map/shared/map.utils';\r\nimport { LayerLegend } from '../../layer/shared/layers/layer.interface';\r\nimport { getLayersLegends } from '../../layer/utils/legend';\r\n\r\nimport { PrintOptions } from './print.interface';\r\n\r\nconst html2canvas = _html2canvas;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrintService {\r\n  zipFile: JSZip;\r\n  nbFileToProcess: number;\r\n  activityId: string;\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private activityService: ActivityService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  print(map: IgoMap, options: PrintOptions): Subject<any> {\r\n    const status$ = new Subject();\r\n\r\n    const paperFormat: string = options.paperFormat;\r\n    const resolution = +options.resolution;  // Default is 96\r\n    const orientation = options.orientation;\r\n\r\n    this.activityId = this.activityService.register();\r\n    const doc = new jsPDF({\r\n      orientation,\r\n      format: paperFormat.toLowerCase()\r\n    });\r\n\r\n    const dimensions = [\r\n      doc.internal.pageSize.width,\r\n      doc.internal.pageSize.height\r\n    ];\r\n\r\n    const margins = [20, 10, 20, 10];\r\n    const width = dimensions[0] - margins[3] - margins[1];\r\n    const height = dimensions[1] - margins[0] - margins[2];\r\n    const size = [width, height];\r\n\r\n    if (options.title !== undefined) {\r\n      this.addTitle(doc, options.title, dimensions[0]);\r\n    }\r\n\r\n    if (options.showProjection === true || options.showScale === true) {\r\n      this.addProjScale(\r\n        doc,\r\n        map,\r\n        resolution,\r\n        options.showProjection,\r\n        options.showScale\r\n      );\r\n    }\r\n    if (options.comment !== '') {\r\n      this.addComment(doc, options.comment);\r\n    }\r\n\r\n    this.addMap(doc, map, resolution, size, margins).subscribe(\r\n      (status: SubjectStatus) => {\r\n        if (status === SubjectStatus.Done) {\r\n          if (options.showLegend === true) {\r\n            this.addLegend(doc, map, margins, resolution);\r\n          } else {\r\n            this.saveDoc(doc);\r\n          }\r\n        }\r\n\r\n        if (status === SubjectStatus.Done || status === SubjectStatus.Error) {\r\n          this.activityService.unregister(this.activityId);\r\n          status$.next(SubjectStatus.Done);\r\n        }\r\n      }\r\n    );\r\n\r\n    return status$;\r\n  }\r\n\r\n  /**\r\n   * Get html code for all layers legend\r\n   * @param  map IgoMap\r\n   * @param  width The width that the legend need to be\r\n   * @return Html code for the legend\r\n   */\r\n  getLayersLegendHtml(map: IgoMap, width: number, resolution: number): string {\r\n    let html = '';\r\n    const legends = getLayersLegends(map.layers, map.viewController.getScale(resolution));\r\n    if (legends.length === 0) {\r\n      return html;\r\n    }\r\n\r\n    // Define important style to be sure that all container is convert\r\n    // to image not just visible part\r\n    html += '<style media=\"screen\" type=\"text/css\">';\r\n    html += '.html2canvas-container { width: ' + width;\r\n    html += 'mm !important; height: 2000px !important; }';\r\n    html += '</style>';\r\n    html += '<font size=\"2\" face=\"Courier New\" >';\r\n    html += '<div style=\"display:inline-block;max-width:' + width + 'mm\">';\r\n    // For each legend, define an html table cell\r\n    legends.forEach((legend: LayerLegend) => {\r\n      html +=\r\n        '<table border=1 style=\"display:inline-block;vertical-align:top\">';\r\n      html += '<tr><th width=\"170px\">' + legend.title + '</th>';\r\n      html += '<td><img class=\"printImageLegend\" src=\"' + legend.url + '\">';\r\n      html += '</td></tr></table>';\r\n    });\r\n    html += '</div>';\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Get all the legend in a single image\r\n   * * @param  format - Image format. default value to \"png\"\r\n   * @return The image of the legend\r\n   */\r\n  getLayersLegendImage(map, format: string = 'png', doZipFile: boolean, resolution: number) {\r\n    const status$ = new Subject();\r\n    // Get html code for the legend\r\n    const width = 200; // milimeters unit, originally define for document pdf\r\n    let html = this.getLayersLegendHtml(map, width, resolution);\r\n    const that = this;\r\n    format = format.toLowerCase();\r\n\r\n    // If no legend show No LEGEND in an image\r\n    if (html.length === 0) {\r\n      html = '<font size=\"12\" face=\"Courier New\" >';\r\n      html += '<div align=\"center\"><b>NO LEGEND</b></div>';\r\n    }\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n    // Define event to execute after all images are loaded to create the canvas\r\n    setTimeout(() => {\r\n      html2canvas(div, { useCORS: true }).then(canvas => {\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          if (!doZipFile) {\r\n            // Save the canvas as file\r\n            that.saveCanvasImageAsFile(canvas, 'legendImage', format);\r\n          } else {\r\n            // Add the canvas to zip\r\n            that.generateCanvaFileToZip(canvas, 'legendImage' + '.' + format);\r\n          }\r\n          div.parentNode.removeChild(div); // remove temp div (IE)\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n        }\r\n        status$.next(status);\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  private addTitle(doc: jsPDF, title: string, pageWidth: number) {\r\n    const pdfResolution = 96;\r\n    const titleSize = 32;\r\n    const titleWidth = ((titleSize * 25.4) / pdfResolution) * title.length;\r\n\r\n    let titleMarginLeft;\r\n    if (titleWidth > pageWidth) {\r\n      titleMarginLeft = 0;\r\n    } else {\r\n      titleMarginLeft = (pageWidth - titleWidth) / 2;\r\n    }\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(32);\r\n    doc.text(title, titleMarginLeft, 15);\r\n  }\r\n\r\n  /**\r\n   * Add comment to the document\r\n   * * @param  doc - pdf document\r\n   * * @param  comment - Comment to add in the document\r\n   * * @param  size - Size of the document\r\n   */\r\n  private addComment(doc: jsPDF, comment: string) {\r\n    const commentSize = 16;\r\n    const commentMarginLeft = 20;\r\n    const marginBottom = 5;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(commentSize);\r\n    doc.text(comment, commentMarginLeft, heightPixels);\r\n  }\r\n  /**\r\n   * Add projection and/or scale to the document\r\n   * @param  doc - pdf document\r\n   * @param  map - Map of the app\r\n   * @param  dpi - DPI resolution of the document\r\n   * @param  projection - Bool to indicate if projection need to be added\r\n   * @param  scale - Bool to indicate if scale need to be added\r\n   */\r\n  private addProjScale(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    dpi: number,\r\n    projection: boolean,\r\n    scale: boolean\r\n  ) {\r\n    const translate = this.languageService.translate;\r\n    const projScaleSize = 16;\r\n    const projScaleMarginLeft = 20;\r\n    const marginBottom = 15;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    let textProjScale: string;\r\n    if (projection === true) {\r\n      const projText = translate.instant('igo.geo.printForm.projection');\r\n      textProjScale = projText + ': ' + map.projection;\r\n    }\r\n    if (scale === true) {\r\n      if (projection === true) {\r\n        textProjScale += '   ';\r\n      }\r\n      const scaleText = translate.instant('igo.geo.printForm.scale');\r\n      const mapScale = map.viewController.getScale(dpi);\r\n      textProjScale += scaleText + ' ~ 1 ' + formatScale(mapScale);\r\n    }\r\n    doc.setFont('courier');\r\n    doc.setFontSize(projScaleSize);\r\n    doc.text(textProjScale, projScaleMarginLeft, heightPixels);\r\n  }\r\n\r\n  /**\r\n   * Add the legend to the document\r\n   * @param  doc - Pdf document where legend will be added\r\n   * @param  map - Map of the app\r\n   * @param  margins - Page margins\r\n   */\r\n  private addLegend(doc: jsPDF, map: IgoMap, margins: Array<number>, resolution: number) {\r\n    const that = this;\r\n    // Get html code for the legend\r\n    const width = doc.internal.pageSize.width;\r\n    const html = this.getLayersLegendHtml(map, width, resolution);\r\n    // If no legend, save the map directly\r\n    if (html === '') {\r\n      this.saveDoc(doc);\r\n      return true;\r\n    }\r\n\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n    html2canvas(div, { useCORS: true }).then(canvas => {\r\n      let imgData;\r\n      const position = 10;\r\n\r\n      imgData = canvas.toDataURL('image/png');\r\n      doc.addPage();\r\n      const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n      doc.addImage(imgData, 'PNG', 10, position, imageSize[0], imageSize[1]);\r\n      that.saveDoc(doc);\r\n      div.parentNode.removeChild(div); // remove temp div (IE style)\r\n    });\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n  }\r\n\r\n  private addCanvas(\r\n    doc: jsPDF,\r\n    canvas: HTMLCanvasElement,\r\n    margins: Array<number>\r\n  ) {\r\n    let image;\r\n\r\n    image = canvas.toDataURL('image/jpeg');\r\n\r\n    if (image !== undefined) {\r\n      const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n      doc.addImage(\r\n        image,\r\n        'JPEG',\r\n        margins[3],\r\n        margins[0],\r\n        imageSize[0],\r\n        imageSize[1]\r\n      );\r\n      doc.rect(margins[3], margins[0], imageSize[0], imageSize[1]);\r\n    }\r\n  }\r\n\r\n  // TODO fix printing with image resolution\r\n  private addMap(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    resolution: number,\r\n    size: Array<number>,\r\n    margins: Array<number>\r\n  ) {\r\n    const status$ = new Subject();\r\n\r\n    const mapSize = map.ol.getSize();\r\n    const extent = map.ol.getView().calculateExtent(mapSize);\r\n\r\n    const widthPixels = Math.round((size[0] * resolution) / 25.4);\r\n    const heightPixels = Math.round((size[1] * resolution) / 25.4);\r\n\r\n    let timeout;\r\n\r\n    map.ol.once('postcompose', (event: any) => {\r\n      const canvas = event.context.canvas;\r\n      const mapStatus$$ = map.status$.subscribe((mapStatus: SubjectStatus) => {\r\n        clearTimeout(timeout);\r\n\r\n        if (mapStatus !== SubjectStatus.Done) {\r\n          return;\r\n        }\r\n\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      });\r\n\r\n      // If no loading as started after 200ms, then probably no loading\r\n      // is required.\r\n      timeout = window.setTimeout(() => {\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      }, 200);\r\n    });\r\n\r\n    this.renderMap(map, [widthPixels, heightPixels], extent);\r\n\r\n    return status$;\r\n  }\r\n\r\n  defineNbFileToProcess(nbFileToProcess) {\r\n    this.nbFileToProcess = nbFileToProcess;\r\n  }\r\n\r\n  /**\r\n   * Download an image of the map with addition of informations\r\n   * @param  map - Map of the app\r\n   * @param  format - Image format. default value to \"png\"\r\n   * @param  projection - Indicate if projection need to be add. Default to false\r\n   * @param  scale - Indicate if scale need to be add. Default to false\r\n   * @param  legend - Indicate if the legend of layers need to be download. Default to false\r\n   * @param  title - Title to add for the map - Default to blank\r\n   * @param  comment - Comment to add for the map - Default to blank\r\n   * @param  doZipFile - Indicate if we do a zip with the file\r\n   * @return Image file of the map with extension format given as parameter\r\n   */\r\n  downloadMapImage(\r\n    map: IgoMap,\r\n    resolution: number,\r\n    format = 'png',\r\n    projection = false,\r\n    scale = false,\r\n    legend = false,\r\n    title = '',\r\n    comment = '',\r\n    doZipFile = true\r\n  ) {\r\n    const status$ = new Subject();\r\n    // const resolution = map.ol.getView().getResolution();\r\n    this.activityId = this.activityService.register();\r\n    const translate = this.languageService.translate;\r\n    map.ol.once('postcompose', (event: any) => {\r\n      format = format.toLowerCase();\r\n      const context = event.context;\r\n      const newCanvas = document.createElement('canvas');\r\n      const newContext = newCanvas.getContext('2d');\r\n      // Postion in height to set the canvas in new canvas\r\n      let positionHCanvas = 0;\r\n      // Position in width to set the Proj/Scale in new canvas\r\n      let positionWProjScale = 10;\r\n      // Get height/width of map canvas\r\n      const width = context.canvas.width;\r\n      let height = context.canvas.height;\r\n      // Set Font to calculate comment width\r\n      newContext.font = '20px Calibri';\r\n      const commentWidth = newContext.measureText(comment).width;\r\n      // Add height for title if defined\r\n      height = title !== '' ? height + 30 : height;\r\n      // Add height for projection or scale (same line) if defined\r\n      height = projection !== false || scale !== false ? height + 30 : height;\r\n      const positionHProjScale = height - 10;\r\n      // Define number of line depending of the comment length\r\n      const commentNbLine = Math.ceil(commentWidth / width);\r\n      // Add height for multiline comment if defined\r\n      height = comment !== '' ? height + commentNbLine * 30 : height;\r\n      let positionHComment = height - commentNbLine * 20 + 5;\r\n      // Set the new canvas with the new calculated size\r\n      newCanvas.width = width;\r\n      newCanvas.height = height;\r\n      // Patch Jpeg default black background to white\r\n      if (format === 'jpeg') {\r\n        newContext.fillStyle = '#ffffff';\r\n        newContext.fillRect(0, 0, width, height);\r\n        newContext.fillStyle = '#000000';\r\n      }\r\n      // If a title need to be added to canvas\r\n      if (title !== '') {\r\n        // Set font for title\r\n        newContext.font = '26px Calibri';\r\n        positionHCanvas = 30;\r\n        newContext.textAlign = 'center';\r\n        newContext.fillText(title, width / 2, 20);\r\n      }\r\n      // Set font for next section\r\n      newContext.font = '20px Calibri';\r\n      // If projection need to be added to canvas\r\n      if (projection !== false) {\r\n        const projText = translate.instant('igo.geo.printForm.projection');\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          projText + ': ' + map.projection,\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n        positionWProjScale += 200; // Width position change for scale position\r\n      }\r\n      // If scale need to be added to canvas\r\n      if (scale !== false) {\r\n        const scaleText = translate.instant('igo.geo.printForm.scale');\r\n        const mapScale = map.viewController.getScale(resolution);\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          scaleText + ' ~ 1 : ' + formatScale(mapScale),\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n      }\r\n      // If a comment need to be added to canvas\r\n      if (comment !== '') {\r\n        newContext.textAlign = 'center';\r\n        // If only one line, no need to multiline the comment\r\n        if (commentNbLine === 1) {\r\n          newContext.fillText(comment, width / 2, positionHComment);\r\n        } else {\r\n          // Separate the setenses to be approx. the same length\r\n          const nbCommentChar = comment.length;\r\n          const CommentLengthToCut = Math.floor(nbCommentChar / commentNbLine);\r\n          let commentCurrentLine = '';\r\n          let positionFirstCutChar = 0;\r\n          let positionLastBlank;\r\n          // Loop for the number of line calculated\r\n          for (let i = 0; i < commentNbLine; i++) {\r\n            // For all line except last\r\n            if (commentNbLine - 1 > i) {\r\n              // Get comment current line to find the right place tu cut comment\r\n              commentCurrentLine = comment.substr(\r\n                positionFirstCutChar,\r\n                CommentLengthToCut\r\n              );\r\n              // Cut the setence at blank\r\n              positionLastBlank = commentCurrentLine.lastIndexOf(' ');\r\n              newContext.fillText(\r\n                commentCurrentLine.substr(0, positionLastBlank),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n              positionFirstCutChar += positionLastBlank;\r\n              // Go to next line for insertion\r\n              positionHComment += 20;\r\n            } else {\r\n              // Don't cut last part\r\n              newContext.fillText(\r\n                comment.substr(positionFirstCutChar),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // Add map to new canvas\r\n      newContext.drawImage(context.canvas, 0, positionHCanvas);\r\n\r\n      let status = SubjectStatus.Done;\r\n      try {\r\n        // Save the canvas as file\r\n        if (!doZipFile) {\r\n          this.saveCanvasImageAsFile(newCanvas, 'map', format);\r\n        } else if (format.toLowerCase() === 'tiff') {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(\r\n            newCanvas,\r\n            'map' + map.projection.replace(':', '_') + '.' + format\r\n          );\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(newCanvas, 'map' + '.' + format);\r\n        }\r\n      } catch (err) {\r\n        status = SubjectStatus.Error;\r\n      }\r\n\r\n      status$.next(status);\r\n\r\n      if (format.toLowerCase() === 'tiff') {\r\n        const tiwContent = this.getWorldFileInformation(map);\r\n        const blob = new Blob([tiwContent], {\r\n          type: 'text/plain;charset=utf-8'\r\n        });\r\n        if (!doZipFile) {\r\n          // saveAs automaticly replace ':' for '_'\r\n          saveAs(blob, 'map' + map.projection + '.tfw');\r\n          this.saveFileProcessing();\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.addFileToZip(\r\n            'map' + map.projection.replace(':', '_') + '.tfw',\r\n            blob\r\n          );\r\n        }\r\n      }\r\n    });\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  private renderMap(map, size, extent) {\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  /**\r\n   * Save document\r\n   * @param  doc - Document to save\r\n   */\r\n  private saveDoc(doc: jsPDF) {\r\n    doc.save('map.pdf');\r\n  }\r\n\r\n  /**\r\n   * Calculate the best Image size to fit in pdf\r\n   * @param doc - Pdf Document\r\n   * @param canvas - Canvas of image\r\n   * @param margins - Page margins\r\n   */\r\n  private getImageSizeToFitPdf(doc, canvas, margins) {\r\n    // Define variable to calculate best size to fit in one page\r\n    const pageHeight =\r\n      doc.internal.pageSize.getHeight() - (margins[0] + margins[2]);\r\n    const pageWidth =\r\n      doc.internal.pageSize.getWidth() - (margins[1] + margins[3]);\r\n    const canHeight = canvas.height;\r\n    const canWidth = canvas.width;\r\n    const heightRatio = canHeight / pageHeight;\r\n    const widthRatio = canWidth / pageWidth;\r\n    const maxRatio = heightRatio > widthRatio ? heightRatio : widthRatio;\r\n    const imgHeigh = maxRatio > 1 ? canHeight / maxRatio : canHeight;\r\n    const imgWidth = maxRatio > 1 ? canWidth / maxRatio : canWidth;\r\n\r\n    return [imgWidth, imgHeigh];\r\n  }\r\n\r\n  /**\r\n   * Get a world file information for tiff\r\n   * @param  map - Map of the app\r\n   */\r\n  private getWorldFileInformation(map) {\r\n    const currentResolution = map.viewController.getResolution();\r\n    const currentExtent = map.getExtent(); // Return [minx, miny, maxx, maxy]\r\n    return [\r\n      currentResolution,\r\n      0,\r\n      0,\r\n      -currentResolution,\r\n      currentExtent[0] + currentResolution / 0.5,\r\n      currentExtent[3] - currentResolution / 0.5\r\n    ].join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Save canvas image as file\r\n   * @param canvas - Canvas to save\r\n   * @param name - Name of the file\r\n   * @param format - file format\r\n   */\r\n  private saveCanvasImageAsFile(canvas, name, format) {\r\n    const blobFormat = 'image/' + format;\r\n    const that = this;\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      // If navigator is Internet Explorer\r\n      if (navigator.msSaveBlob) {\r\n        navigator.msSaveBlob(canvas.msToBlob(), name + '.' + format);\r\n        this.saveFileProcessing();\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          // download image\r\n          saveAs(blob, name + '.' + format);\r\n          that.saveFileProcessing();\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to a zip\r\n   * @param canvas - File to add to the zip\r\n   * @param  name -Name of the fileoverview\r\n   */\r\n  private generateCanvaFileToZip(canvas, name) {\r\n    const blobFormat = 'image/' + 'jpeg';\r\n    const that = this;\r\n    if (\r\n      !this.hasOwnProperty('zipFile') ||\r\n      typeof this.zipFile === 'undefined'\r\n    ) {\r\n      this.zipFile = new JSZip();\r\n    }\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      if (navigator.msSaveBlob) {\r\n        this.addFileToZip(name, canvas.msToBlob());\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          that.addFileToZip(name, blob);\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to zip, if all file are zipped, download\r\n   * @param name - Name of the files\r\n   * @param blob - Contain of file\r\n   */\r\n  private addFileToZip(name, blob) {\r\n    // add file to zip\r\n    this.zipFile.file(name, blob);\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Download zip file\r\n      this.getZipFile();\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  private saveFileProcessing() {\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the zipped file\r\n   * @return Retun a zip file\r\n   */\r\n  private getZipFile() {\r\n    const that = this;\r\n    this.zipFile.generateAsync({ type: 'blob' }).then(blob => {\r\n      // 1) generate the zip file\r\n      saveAs(blob, 'map.zip');\r\n      delete that.zipFile;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\nimport { PrintService } from '../shared/print.service';\r\n\r\n@Component({\r\n  selector: 'igo-print',\r\n  templateUrl: './print.component.html'\r\n})\r\nexport class PrintComponent {\r\n  public disabled = false;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this._outputFormat;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this._outputFormat = value;\r\n  }\r\n  private _outputFormat: PrintOutputFormat;\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this._paperFormat;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this._paperFormat = value;\r\n  }\r\n  private _paperFormat: PrintPaperFormat;\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this._orientation;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this._orientation = value;\r\n  }\r\n  private _orientation: PrintOrientation;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this._imageFormat;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this._imageFormat = value;\r\n  }\r\n  private _imageFormat: PrintSaveImageFormat;\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this._resolution;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this._resolution = value;\r\n  }\r\n  private _resolution: PrintResolution;\r\n\r\n  constructor(private printService: PrintService) {}\r\n\r\n  handleFormSubmit(data: PrintOptions) {\r\n    this.disabled = true;\r\n\r\n    if (data.isPrintService === true) {\r\n      this.printService\r\n        .print(this.map, data)\r\n        .subscribe();\r\n    } else {\r\n      let nbFileToProcess = 1;\r\n\r\n      if (data.showLegend) {\r\n        nbFileToProcess++;\r\n      }\r\n      if (data.imageFormat.toLowerCase() === 'tiff') {\r\n        nbFileToProcess++;\r\n      }\r\n\r\n      this.printService.defineNbFileToProcess(nbFileToProcess);\r\n\r\n      const resolution = +data.resolution;\r\n      this.printService.downloadMapImage(\r\n        this.map,\r\n        resolution,\r\n        data.imageFormat,\r\n        data.showProjection,\r\n        data.showScale,\r\n        data.showLegend,\r\n        data.title,\r\n        data.comment,\r\n        data.doZipFile\r\n      );\r\n      if (data.showLegend) {\r\n        this.printService.getLayersLegendImage(\r\n          this.map,\r\n          data.imageFormat,\r\n          data.doZipFile,\r\n          +resolution\r\n        );\r\n      }\r\n    }\r\n    this.disabled = false;\r\n  }\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const PrintOutputFormat = strEnum(['Pdf', 'Image']);\r\n\r\nexport type PrintOutputFormat = keyof typeof PrintOutputFormat;\r\n\r\nexport const PrintPaperFormat = strEnum([\r\n  'A0',\r\n  'A1',\r\n  'A2',\r\n  'A3',\r\n  'A4',\r\n  'A5',\r\n  'Letter',\r\n  'Legal'\r\n]);\r\nexport type PrintPaperFormat = keyof typeof PrintPaperFormat;\r\n\r\nexport const PrintOrientation = strEnum(['landscape', 'portrait']);\r\nexport type PrintOrientation = keyof typeof PrintOrientation;\r\n\r\nexport const PrintResolution = strEnum(['72', '96', '150', '300']);\r\nexport type PrintResolution = keyof typeof PrintResolution;\r\n\r\nexport const PrintSaveImageFormat = strEnum([\r\n  'Bmp',\r\n  'Gif',\r\n  'Jpeg',\r\n  'Png',\r\n  'Tiff'\r\n]);\r\nexport type PrintSaveImageFormat = keyof typeof PrintSaveImageFormat;\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators\r\n} from '@angular/forms';\r\n\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\n@Component({\r\n  selector: 'igo-print-form',\r\n  templateUrl: './print-form.component.html',\r\n  styleUrls: ['./print-form.component.scss']\r\n})\r\nexport class PrintFormComponent implements OnInit {\r\n  public form: FormGroup;\r\n  public submitted: boolean;\r\n\r\n  public outputFormats = PrintOutputFormat;\r\n  public paperFormats = PrintPaperFormat;\r\n  public orientations = PrintOrientation;\r\n  public resolutions = PrintResolution;\r\n  public imageFormats = PrintSaveImageFormat;\r\n  public isPrintService = true;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this.imageFormatField.value;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this.imageFormatField.setValue(value || PrintSaveImageFormat.Jpeg, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this.outputFormatField.value;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this.outputFormatField.setValue(value || PrintOutputFormat.Pdf, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this.paperFormatField.value;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this.paperFormatField.setValue(value || PrintPaperFormat.Letter, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this.orientationField.value;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this.orientationField.setValue(value || PrintOrientation.landscape, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this.resolutionField.value;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this.resolutionField.setValue(value || PrintResolution['96'], {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get title(): string {\r\n    return this.titleField.value;\r\n  }\r\n  set title(value: string) {\r\n    this.titleField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get comment(): string {\r\n    return this.commentField.value;\r\n  }\r\n  set comment(value: string) {\r\n    this.commentField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showProjection(): boolean {\r\n    return this.showProjectionField.value;\r\n  }\r\n  set showProjection(value: boolean) {\r\n    this.showProjectionField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showScale(): boolean {\r\n    return this.showScaleField.value;\r\n  }\r\n  set showScale(value: boolean) {\r\n    this.showScaleField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showLegend(): boolean {\r\n    return this.showLegendField.value;\r\n  }\r\n  set showLegend(value: boolean) {\r\n    this.showLegendField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get doZipFile(): boolean {\r\n    return this.doZipFileField.value;\r\n  }\r\n  set doZipFile(value: boolean) {\r\n    this.doZipFileField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  get outputFormatField() {\r\n    return (this.form.controls as any).outputFormat as FormControl;\r\n  }\r\n\r\n  get paperFormatField() {\r\n    return (this.form.controls as any).paperFormat as FormControl;\r\n  }\r\n\r\n  get imageFormatField() {\r\n    return (this.form.controls as any).imageFormat as FormControl;\r\n  }\r\n\r\n  get orientationField() {\r\n    return (this.form.controls as any).orientation as FormControl;\r\n  }\r\n\r\n  get resolutionField() {\r\n    return (this.form.controls as any).resolution as FormControl;\r\n  }\r\n\r\n  get commentField() {\r\n    return (this.form.controls as any).comment as FormControl;\r\n  }\r\n\r\n  get showProjectionField() {\r\n    return (this.form.controls as any).showProjection as FormControl;\r\n  }\r\n\r\n  get showScaleField() {\r\n    return (this.form.controls as any).showScale as FormControl;\r\n  }\r\n\r\n  get showLegendField() {\r\n    return (this.form.controls as any).showLegend as FormControl;\r\n  }\r\n\r\n  get doZipFileField() {\r\n    return (this.form.controls as any).doZipFile as FormControl;\r\n  }\r\n\r\n  get titleField() {\r\n    return (this.form.controls as any).title as FormControl;\r\n  }\r\n\r\n  @Output() submit: EventEmitter<PrintOptions> = new EventEmitter();\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n    this.form = this.formBuilder.group({\r\n      title: ['', []],\r\n      comment: ['', []],\r\n      outputFormat: ['', [Validators.required]],\r\n      paperFormat: ['', [Validators.required]],\r\n      imageFormat: [ '', [Validators.required]],\r\n      resolution: ['', [Validators.required]],\r\n      orientation: ['', [Validators.required]],\r\n      showProjection: false,\r\n      showScale: false,\r\n      showLegend: false,\r\n      doZipFile: [{hidden: this.isPrintService }]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doZipFileField.setValue(false);\r\n  }\r\n\r\n  handleFormSubmit(data: PrintOptions, isValid: boolean) {\r\n    this.submitted = true;\r\n    data.isPrintService = this.isPrintService;\r\n    if (isValid) {\r\n      this.submit.emit(data);\r\n    }\r\n  }\r\n\r\n  toggleImageSaveProp() {\r\n    if (this.outputFormatField.value === 'Image') {\r\n      this.isPrintService = false;\r\n    } else {\r\n      this.isPrintService = true;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { PrintComponent } from './print/print.component';\r\nimport { PrintFormComponent } from './print-form/print-form.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [PrintComponent, PrintFormComponent],\r\n  declarations: [PrintComponent, PrintFormComponent]\r\n})\r\nexport class IgoPrintModule {}\r\n","import { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\n\r\nimport { QuerySearchSource } from './query-search-source';\r\n\r\n/**\r\n * Map search source factory\r\n * @ignore\r\n */\r\nexport function querySearchSourceFactory(config: ConfigService) {\r\n  return new QuerySearchSource(\r\n    config.getConfig(`searchSources.${QuerySearchSource.id}`) || {}\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the map search source\r\n */\r\nexport function provideQuerySearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: querySearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { QueryDirective } from './shared/query.directive';\r\nimport { QueryService } from './shared/query.service';\r\nimport { provideQuerySearchSource } from './shared/query-search-source.providers';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [QueryDirective],\r\n  declarations: [QueryDirective],\r\n  providers: [QueryService]\r\n})\r\nexport class IgoQueryModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoQueryModule,\r\n      providers: [provideQuerySearchSource()]\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\n\r\n/**\r\n * Service where all available search sources are registered.\r\n */\r\nexport class SearchSourceService {\r\n  constructor(private sources: SearchSource[]) {}\r\n\r\n  /**\r\n   * Return available search sources\r\n   * @returns Search sources\r\n   */\r\n  getSources(): SearchSource[] {\r\n    return this.sources;\r\n  }\r\n\r\n  /**\r\n   * Return enabled search sources\r\n   * @returns Search sources\r\n   */\r\n  getEnabledSources(): SearchSource[] {\r\n    return this.getSources().filter(\r\n      (source: SearchSource) => source.enabled === true\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Enable search sources of given type\r\n   * @param type Search type\r\n   * @todo It would be better to track the enabled search sources\r\n   *  without updating their 'enabled' property.\r\n   */\r\n  enableSourcesByType(type: string) {\r\n    this.getSources().forEach((source: SearchSource) => {\r\n      if ((source.constructor as typeof SearchSource).type === type) {\r\n        source.enabled = true;\r\n      } else {\r\n        source.enabled = false;\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { SearchSource } from './sources/source';\r\nimport { SearchResult } from './search.interfaces';\r\n\r\n/**\r\n * Function that checks whether a search source implements TextSearch\r\n * @param source Search source\r\n * @returns True if the search source implements TextSearch\r\n */\r\nexport function sourceCanSearch(source: SearchSource): boolean {\r\n  return (source as any).search !== undefined;\r\n}\r\n\r\n/**\r\n * Function that checks whether a search source implements ReverseSearch\r\n * @param source Search source\r\n * @returns True if the search source implements ReverseSearch\r\n */\r\nexport function sourceCanReverseSearch(source: SearchSource): boolean {\r\n  return (source as any).reverseSearch !== undefined;\r\n}\r\n\r\n/**\r\n * Return a search result out of an Feature. This is used to adapt\r\n * the IGO query module to the new Feature/SearchResult interfaces\r\n * @param feature feature\r\n * @param source Search source\r\n * @returns SearchResult\r\n */\r\nexport function featureToSearchResult(\r\n  feature: Feature,\r\n  source: SearchSource\r\n): SearchResult<Feature> {\r\n  return {\r\n    source,\r\n    data: feature,\r\n    meta: {\r\n      dataType: FEATURE,\r\n      id: feature.meta.id as string,\r\n      title: feature.meta.title,\r\n      icon: 'map-marker'\r\n    }\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { stringToLonLat } from '../../map';\r\n\r\nimport { SearchSource, TextSearch, ReverseSearch } from './sources/source';\r\nimport { TextSearchOptions, ReverseSearchOptions } from './sources/source.interfaces';\r\nimport { SearchSourceService } from './search-source.service';\r\nimport { Research } from './search.interfaces';\r\nimport { sourceCanSearch, sourceCanReverseSearch } from './search.utils';\r\n\r\n/**\r\n * This service perform researches in all the search sources enabled.\r\n * It returns Research objects who's 'request' property needs to be\r\n * subscribed to in order to trigger the research. This services has\r\n * keeps internal state of the researches it performed\r\n * and the results they yielded.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchService {\r\n\r\n  constructor(private searchSourceService: SearchSourceService) {}\r\n\r\n  /**\r\n   * Perform a research by text\r\n   * @param term Any text\r\n   * @returns Researches\r\n   */\r\n  search(term: string, options?: TextSearchOptions): Research[] {\r\n    if (!this.termIsValid(term)) {\r\n      return [];\r\n    }\r\n\r\n    const lonLat = stringToLonLat(term);\r\n    if (lonLat !== undefined) {\r\n      return this.reverseSearch(lonLat);\r\n    }\r\n\r\n    const sources = this.searchSourceService.getEnabledSources()\r\n      .filter(sourceCanSearch);\r\n    return this.searchSources(sources, term, options || {});\r\n  }\r\n\r\n  /**\r\n   * Perform a research by lon/lat\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Researches\r\n   */\r\n  reverseSearch(lonLat: [number, number], options?: ReverseSearchOptions) {\r\n    const sources = this.searchSourceService.getEnabledSources()\r\n      .filter(sourceCanReverseSearch);\r\n    return this.reverseSearchSources(sources, lonLat, options || {});\r\n  }\r\n\r\n  /**\r\n   * Create a text research out of all given search sources\r\n   * @param sources Search sources that implement TextSearch\r\n   * @param term Search term\r\n   * @returns Observable of Researches\r\n   */\r\n  private searchSources(sources: SearchSource[], term: string, options: TextSearchOptions): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: (source as any as TextSearch).search(term, options),\r\n        reverse: false,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a reverse research out of all given search sources\r\n   * @param sources Search sources that implement ReverseSearch\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Observable of Researches\r\n   */\r\n  private reverseSearchSources(\r\n    sources: SearchSource[],\r\n    lonLat: [number, number],\r\n    options: ReverseSearchOptions\r\n  ): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: (source as any as ReverseSearch).reverseSearch(lonLat, options),\r\n        reverse: true,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate that a search term is valid\r\n   * @param term Search term\r\n   * @returns True if the search term is valid\r\n   */\r\n  private termIsValid(term: string): boolean {\r\n    return typeof term === 'string' && term !== '';\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\n\r\nexport abstract class RoutingSource {\r\n  abstract enabled: boolean;\r\n  abstract getName(): string;\r\n  abstract route(coordinates: [number, number][]): Observable<Routing[]>;\r\n}\r\n","import { RoutingSource } from '../routing-sources/routing-source';\r\n\r\nexport class RoutingSourceService {\r\n  constructor(public sources: RoutingSource[]) {}\r\n}\r\n\r\nexport function routingSourceServiceFactory(sources: RoutingSource[]) {\r\n  return new RoutingSourceService(sources);\r\n}\r\n\r\nexport function provideRoutingSourceService() {\r\n  return {\r\n    provide: RoutingSourceService,\r\n    useFactory: routingSourceServiceFactory,\r\n    deps: [RoutingSource]\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingSource } from '../routing-sources/routing-source';\r\nimport { RoutingSourceService } from './routing-source.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoutingService {\r\n  constructor(private routingSourceService: RoutingSourceService) {}\r\n\r\n  route(coordinates: [number, number][]): Observable<Routing[]>[] {\r\n    if (coordinates.length === 0) {\r\n      return;\r\n    }\r\n    return this.routingSourceService.sources\r\n      .filter((source: RoutingSource) => source.enabled)\r\n      .map((source: RoutingSource) => this.routeSource(source, coordinates));\r\n  }\r\n\r\n  routeSource(\r\n    source: RoutingSource,\r\n    coordinates: [number, number][]\r\n  ): Observable<Routing[]> {\r\n    const request = source.route(coordinates);\r\n    return request;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class RoutingFormService {\r\n  private stopsCoordinates: [number, number][];\r\n  private mapWaitingForRoutingClick: boolean;\r\n\r\n  constructor() {\r\n    this.mapWaitingForRoutingClick = false;\r\n  }\r\n\r\n  getStopsCoordinates(): [number, number][] {\r\n    return this.stopsCoordinates;\r\n  }\r\n\r\n  setStopsCoordinates(stopsCoordinates) {\r\n    this.stopsCoordinates = stopsCoordinates;\r\n  }\r\n\r\n  isMapWaitingForRoutingClick(): boolean {\r\n    return this.mapWaitingForRoutingClick;\r\n  }\r\n\r\n  setMapWaitingForRoutingClick() {\r\n    this.mapWaitingForRoutingClick = true;\r\n  }\r\n\r\n  unsetMapWaitingForRoutingClick() {\r\n    this.mapWaitingForRoutingClick = false;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  Optional\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport * as olgeom from 'ol/geom';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olcondition from 'ol/events/condition';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport * as olextent from 'ol/extent';\r\nimport * as olobservable from 'ol/Observable';\r\n\r\nimport { Clipboard } from '@igo2/utils';\r\nimport {\r\n  Message,\r\n  LanguageService,\r\n  MessageService,\r\n  RouteService\r\n} from '@igo2/core';\r\nimport { getEntityTitle } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { SearchService } from '../../search/shared/search.service';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { createOverlayMarkerStyle } from '../../overlay/shared/overlay.utils';\r\nimport { FeatureMotion } from '../../feature/shared/feature.enums';\r\nimport { moveToOlFeatures } from '../../feature/shared/feature.utils';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingService } from '../shared/routing.service';\r\nimport { RoutingFormService } from './routing-form.service';\r\n\r\nimport { QueryService } from '../../query/shared/query.service';\r\n\r\n@Component({\r\n  selector: 'igo-routing-form',\r\n  templateUrl: './routing-form.component.html',\r\n  styleUrls: ['./routing-form.component.scss']\r\n})\r\nexport class RoutingFormComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  private readonly invalidKeys = ['Control', 'Shift', 'Alt'];\r\n\r\n  public stopsForm: FormGroup;\r\n  public projection = 'EPSG:4326';\r\n  public currentStopIndex: number;\r\n  private routesQueries$$: Subscription[] = [];\r\n\r\n  private stream$ = new Subject<string>();\r\n\r\n  public RoutingOverlayMarkerStyle: olstyle.Style;\r\n  public RoutingOverlayStyle: olstyle.Style;\r\n  public routingStopsOverlayDataSource: FeatureDataSource;\r\n  public routingRoutesOverlayDataSource: FeatureDataSource;\r\n\r\n  public routesResults: Routing[] | Message[];\r\n  public activeRoute: Routing;\r\n  private selectRoute;\r\n\r\n  private focusOnStop = false;\r\n  private focusKey = [];\r\n  public initialStopsCoords;\r\n  private browserLanguage;\r\n\r\n  // https://stackoverflow.com/questions/46364852/create-input-fields-dynamically-in-angular-2\r\n\r\n  @Input()\r\n  get term() {\r\n    return this._term;\r\n  }\r\n  set term(value: string) {\r\n    this._term = value;\r\n  }\r\n  private _term = '';\r\n\r\n  get debounce() {\r\n    return this._debounce;\r\n  }\r\n  set debounce(value: number) {\r\n    this._debounce = value;\r\n  }\r\n  private _debounce = 300;\r\n\r\n  @Input()\r\n  get length() {\r\n    return this._length;\r\n  }\r\n  set length(value: number) {\r\n    this._length = value;\r\n  }\r\n  private _length = 3;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Output() submit: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private routingService: RoutingService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private searchService: SearchService,\r\n    private queryService: QueryService,\r\n    private routingFormService: RoutingFormService,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  changeRoute(selectedRoute: Routing) {\r\n    this.showRouteGeometry();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribeRoutesQueries();\r\n    this.unlistenSingleClick();\r\n    this.queryService.queryEnabled = true;\r\n    const stopCoordinates = [];\r\n\r\n    this.stops.value.forEach(stop => {\r\n      stopCoordinates.push(stop.stopCoordinates);\r\n    });\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.routingFormService.setStopsCoordinates(stopCoordinates);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.browserLanguage = this.languageService.getLanguage();\r\n    this.stopsForm = this.formBuilder.group({\r\n      routingType: 'car',\r\n      routingMode: 'driving', // loop\r\n      stopOrderPriority: true,\r\n      routingFixedStartEnd: false,\r\n      stops: this.formBuilder.array([\r\n        this.createStop('start'),\r\n        this.createStop('end')\r\n      ])\r\n    });\r\n\r\n    this.routingStopsOverlayDataSource = new FeatureDataSource({});\r\n    this.routingRoutesOverlayDataSource = new FeatureDataSource({});\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.queryService.queryEnabled = false;\r\n    this.focusOnStop = false;\r\n    const stopsLayer = new VectorLayer({\r\n      title: 'routingStopOverlay',\r\n      zIndex: 999,\r\n      id: 'routingStops',\r\n      source: this.routingStopsOverlayDataSource,\r\n      showInLayerList: false\r\n    });\r\n    const routesLayer = new VectorLayer({\r\n      title: 'routingRoutesOverlay',\r\n      zIndex: 999,\r\n      id: 'routingRoutes',\r\n      opacity: 0.75,\r\n      source: this.routingRoutesOverlayDataSource,\r\n      showInLayerList: false\r\n    });\r\n\r\n    this.map.addLayer(routesLayer);\r\n    this.map.addLayer(stopsLayer);\r\n\r\n    let selectedStopFeature;\r\n\r\n    const selectStops = new olinteraction.Select({\r\n      layers: [stopsLayer.ol],\r\n      condition: olcondition.pointerMove,\r\n      hitTolerance: 7\r\n    });\r\n\r\n    const translateStop = new olinteraction.Translate({\r\n      layers: [stopsLayer.ol],\r\n      features: selectedStopFeature\r\n    });\r\n\r\n    // TODO: Check to disable pointermove IF a stop is already selected\r\n    const selectRouteHover = new olinteraction.Select({\r\n      layers: [routesLayer.ol],\r\n      condition: olcondition.pointerMove,\r\n      hitTolerance: 7\r\n    });\r\n\r\n    this.selectRoute = new olinteraction.Select({\r\n      layers: [routesLayer.ol],\r\n      hitTolerance: 7\r\n    });\r\n\r\n    this.map.ol.on('pointermove', evt => {\r\n      const selectRouteCnt = selectRouteHover.getFeatures().getLength();\r\n      if (selectRouteCnt === 0) {\r\n        this.routingFormService.unsetMapWaitingForRoutingClick();\r\n      } else {\r\n        this.routingFormService.setMapWaitingForRoutingClick();\r\n      }\r\n    });\r\n\r\n    selectStops.on('select', evt => {\r\n      selectedStopFeature = evt.target.getFeatures()[0];\r\n    });\r\n\r\n    this.selectRoute.on('select', evt => {\r\n      if (this.focusOnStop === false) {\r\n        const selectCoordinates = olproj.transform(\r\n          (evt as any).mapBrowserEvent.coordinate,\r\n          this.map.projection,\r\n          this.projection\r\n        );\r\n        this.addStop();\r\n        const pos = this.stops.length - 2;\r\n        this.stops.at(pos).patchValue({ stopCoordinates: selectCoordinates });\r\n        this.handleLocationProposals(selectCoordinates, pos);\r\n        this.addStopOverlay(selectCoordinates, pos);\r\n        this.selectRoute.getFeatures().clear();\r\n      }\r\n      this.selectRoute.getFeatures().clear();\r\n    });\r\n\r\n    this.routesQueries$$.push(\r\n      this.stopsForm.statusChanges\r\n        .pipe(debounceTime(this._debounce))\r\n        .subscribe(val => this.onFormChange())\r\n    );\r\n\r\n    translateStop.on('translateend', evt => {\r\n      const translatedID = evt.features.getArray()[0].getId();\r\n      const translatedPos = translatedID.split('_');\r\n      let p;\r\n      switch (translatedPos[1]) {\r\n        case 'start':\r\n          p = 0;\r\n          break;\r\n        case 'end':\r\n          p = this.stops.length - 1;\r\n          break;\r\n        default:\r\n          p = Number(translatedPos[1]);\r\n          break;\r\n      }\r\n      const translationEndCoordinates = olproj.transform(\r\n        evt.features\r\n          .getArray()[0]\r\n          .getGeometry()\r\n          .getCoordinates(),\r\n        this.map.projection,\r\n        this.projection\r\n      );\r\n      this.stops\r\n        .at(p)\r\n        .patchValue({ stopCoordinates: translationEndCoordinates });\r\n      this.stops.at(p).patchValue({ stopProposals: [] });\r\n      this.handleLocationProposals(translationEndCoordinates, p);\r\n    });\r\n\r\n    this.map.ol.addInteraction(selectStops);\r\n    this.map.ol.addInteraction(selectRouteHover);\r\n    this.map.ol.addInteraction(this.selectRoute);\r\n    this.map.ol.addInteraction(translateStop);\r\n\r\n    this.routesQueries$$.push(\r\n      this.stream$\r\n        .pipe(\r\n          debounceTime(this._debounce),\r\n          distinctUntilChanged()\r\n        )\r\n        .subscribe((term: string) => this.handleTermChanged(term))\r\n    );\r\n  }\r\n\r\n  handleLocationProposals(coordinates: [number, number], stopIndex: number) {\r\n    const groupedLocations = [];\r\n    this.searchService\r\n      .reverseSearch(coordinates, { zoom: this.map.getZoom() })\r\n      .map(res =>\r\n        this.routesQueries$$.push(\r\n          res.request.pipe(map(f => f)).subscribe(results => {\r\n            results.forEach(result => {\r\n              if (\r\n                groupedLocations.filter(f => f.source === result.source)\r\n                  .length === 0\r\n              ) {\r\n                groupedLocations.push({\r\n                  source: result.source,\r\n                  results: results.map(r => r.data)\r\n                });\r\n              }\r\n            });\r\n            this.stops\r\n              .at(stopIndex)\r\n              .patchValue({ stopProposals: groupedLocations });\r\n            // TODO: Prefer another source?\r\n            if (results[0]) {\r\n              if (results[0].source.getId() === 'icherchereverse') {\r\n                // prefer address type.\r\n                let resultPos = 0;\r\n                for (let i = 0; i < results.length; i++) {\r\n                  const feature: any = results[i].data;\r\n                  if (feature.properties.type === 'adresse') {\r\n                    resultPos = i;\r\n                    break;\r\n                  }\r\n                }\r\n                this.stops.at(stopIndex).patchValue({\r\n                  stopPoint: getEntityTitle(results[resultPos])\r\n                });\r\n                if (results[resultPos].data.geometry.type === 'Point') {\r\n                  this.stops.at(stopIndex).patchValue({\r\n                    stopCoordinates:\r\n                      results[resultPos].data.geometry.coordinates\r\n                  });\r\n                } else {\r\n                  // Not moving the translated point Only to suggest value into the UI.\r\n                }\r\n              }\r\n            } else {\r\n              this.stops.at(stopIndex).patchValue({ stopPoint: coordinates });\r\n              this.stops.at(stopIndex).patchValue({ stopProposals: [] });\r\n            }\r\n          })\r\n        )\r\n      );\r\n  }\r\n\r\n  routingText(index: number): string {\r\n    if (index === 0) {\r\n      return 'start';\r\n    } else if (index === this.stops.length - 1 || this.stops.length === 1) {\r\n      return 'end';\r\n    } else {\r\n      return 'intermediate';\r\n    }\r\n  }\r\n\r\n  raiseStop(index: number) {\r\n    if (index > 0) {\r\n      this.moveStop(index, -1);\r\n    }\r\n  }\r\n\r\n  lowerStop(index: number) {\r\n    if (index < this.stops.length - 1) {\r\n      this.moveStop(index, 1);\r\n    }\r\n  }\r\n\r\n  moveStop(index, diff) {\r\n    const fromValue = this.stops.at(index);\r\n    this.removeStop(index);\r\n    this.stops.insert(index + diff, fromValue);\r\n    this.stops.at(index).patchValue({ routingText: this.routingText(index) });\r\n    this.stops\r\n      .at(index + diff)\r\n      .patchValue({ routingText: this.routingText(index + diff) });\r\n    if (this.stops.at(index).value.stopCoordinates) {\r\n      this.addStopOverlay(this.stops.at(index).value.stopCoordinates, index);\r\n    }\r\n    if (this.stops.at(index + diff).value.stopCoordinates) {\r\n      this.addStopOverlay(\r\n        this.stops.at(index + diff).value.stopCoordinates,\r\n        index + diff\r\n      );\r\n    }\r\n  }\r\n\r\n  get stops(): FormArray {\r\n    return this.stopsForm.get('stops') as FormArray;\r\n  }\r\n\r\n  getStopsCoordinates(): [number, number][] {\r\n    const stopCoordinates = [];\r\n    this.stops.value.forEach(stop => {\r\n      if (stop.stopCoordinates instanceof Array) {\r\n        stopCoordinates.push(stop.stopCoordinates);\r\n      }\r\n    });\r\n    this.routingFormService.setStopsCoordinates(stopCoordinates);\r\n    return stopCoordinates;\r\n  }\r\n\r\n  addStop(): void {\r\n    const insertIndex = this.stops.length - 1;\r\n    this.stops.insert(insertIndex, this.createStop());\r\n  }\r\n\r\n  createStop(routingPos = 'intermediate'): FormGroup {\r\n    return this.formBuilder.group({\r\n      stopPoint: [''],\r\n      stopProposals: [[]],\r\n      routingText: routingPos,\r\n      stopCoordinates: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  removeStop(index: number): void {\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.stops.removeAt(index);\r\n    let cnt = 0;\r\n    this.stops.value.forEach(stop => {\r\n      this.stops.at(cnt).patchValue({ routingText: this.routingText(cnt) });\r\n      this.addStopOverlay(this.stops.at(cnt).value.stopCoordinates, cnt);\r\n      cnt++;\r\n    });\r\n  }\r\n\r\n  resetForm() {\r\n    this.routesResults = undefined;\r\n    const nbStops = this.stops.length;\r\n    for (let i = 0; i < nbStops; i++) {\r\n      this.stops.removeAt(0);\r\n    }\r\n    this.stops.insert(0, this.createStop('start'));\r\n    this.stops.insert(1, this.createStop('end'));\r\n    this.routingStopsOverlayDataSource.ol.getFeatures().forEach(element => {\r\n      this.deleteRoutingOverlaybyID(element.getId());\r\n    });\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.selectRoute.getFeatures().clear();\r\n  }\r\n\r\n  onFormChange() {\r\n    if (this.stopsForm.valid) {\r\n      this.routingRoutesOverlayDataSource.ol.clear();\r\n      const coords = this.getStopsCoordinates();\r\n      if (coords.length >= 2) {\r\n        this.getRoutes(coords);\r\n      } else {\r\n        this.routingRoutesOverlayDataSource.ol.clear();\r\n      }\r\n    }\r\n  }\r\n\r\n  formatStep(step, cnt) {\r\n    return this.formatInstruction(\r\n      step.maneuver.type,\r\n      step.maneuver.modifier,\r\n      step.name,\r\n      step.maneuver.bearing_after,\r\n      cnt,\r\n      step.maneuver.exit,\r\n      cnt === this.activeRoute.steps.length - 1\r\n    );\r\n  }\r\n\r\n  formatInstruction(\r\n    type,\r\n    modifier,\r\n    route,\r\n    direction,\r\n    stepPosition,\r\n    exit,\r\n    lastStep = false\r\n  ) {\r\n    let directiveFr;\r\n    let directiveEn;\r\n    let image = 'arrow_forward';\r\n    let cssClass = 'rotate-270';\r\n    const translatedDirection = this.translateBearing(direction);\r\n    const translatedModifier = this.translateModifier(modifier);\r\n    const enPrefix = modifier === 'straight' ? '' : 'on the ';\r\n    const frPrefix = modifier === 'straight' ? '' : 'Ã  ';\r\n\r\n    let frAggregatedDirection = frPrefix + translatedModifier;\r\n    let enAggregatedDirection = enPrefix + translatedModifier;\r\n\r\n    if (modifier && modifier.search('slight') >= 0) {\r\n      enAggregatedDirection = translatedModifier;\r\n    }\r\n\r\n    if (modifier === 'uturn') {\r\n      image = 'fast_forward';\r\n      cssClass = 'rotate-90';\r\n    } else if (modifier === 'sharp right') {\r\n      image = 'subdirectory_arrow_right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'right') {\r\n      image = 'subdirectory_arrow_right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'slight right') {\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-290';\r\n    } else if (modifier === 'straight') {\r\n      image = 'arrow_forward';\r\n    } else if (modifier === 'slight left') {\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-250';\r\n    } else if (modifier === 'left') {\r\n      image = 'subdirectory_arrow_left';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'sharp left') {\r\n      image = 'subdirectory_arrow_left';\r\n      cssClass = 'icon-flipped';\r\n    }\r\n\r\n    if (type === 'turn') {\r\n      if (modifier === 'straight') {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      } else if (modifier === 'uturn') {\r\n        directiveFr = 'Faire demi-tour sur ' + route;\r\n        directiveEn = 'Make u-turn on ' + route;\r\n      } else {\r\n        directiveFr = 'Tourner ' + frAggregatedDirection + ' sur ' + route;\r\n        directiveEn = 'Turn ' + translatedModifier + ' onto ' + route;\r\n      }\r\n    } else if (type === 'new name') {\r\n      directiveFr =\r\n        'Continuer en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'explore';\r\n      cssClass = '';\r\n    } else if (type === 'depart') {\r\n      directiveFr =\r\n        'Aller en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'explore';\r\n      cssClass = '';\r\n    } else if (type === 'arrive') {\r\n      if (lastStep) {\r\n        let coma = ', ';\r\n        if (!translatedModifier) {\r\n          frAggregatedDirection = '';\r\n          enAggregatedDirection = '';\r\n          coma = '';\r\n        }\r\n        directiveFr = 'Vous Ãªtes arrivÃ©' + coma + frAggregatedDirection;\r\n        directiveEn =\r\n          'You have reached your destination' + coma + enAggregatedDirection;\r\n      } else {\r\n        directiveFr = 'Vous atteignez le point intermÃ©diare sur ' + route;\r\n        directiveEn = 'You have reached the intermediate stop onto ' + route;\r\n        image = 'location_on';\r\n        cssClass = '';\r\n      }\r\n    } else if (type === 'merge') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'on ramp') {\r\n      directiveFr = \"Prendre l'entrÃ©e d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take the ramp ' + enAggregatedDirection;\r\n    } else if (type === 'off ramp') {\r\n      directiveFr = \"Prendre la sortie d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take exit ' + enAggregatedDirection;\r\n    } else if (type === 'fork') {\r\n      if (modifier.search('left') >= 0) {\r\n        directiveFr = 'Garder la gauche sur ' + route;\r\n        directiveEn = 'Merge left onto ' + route;\r\n      } else if (modifier.search('right') >= 0) {\r\n        directiveFr = 'Garder la droite sur ' + route;\r\n        directiveEn = 'Merge right onto ' + route;\r\n      } else {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      }\r\n    } else if (type === 'end of road') {\r\n      directiveFr =\r\n        'Ã la fin de la route, tourner ' + translatedModifier + ' sur ' + route;\r\n      directiveEn =\r\n        'At the end of the road, turn ' + translatedModifier + ' onto ' + route;\r\n    } else if (type === 'use lane') {\r\n      directiveFr = 'Prendre la voie de ... ';\r\n      directiveEn = 'Take the lane ...';\r\n    } else if (type === 'continue' && modifier !== 'uturn') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'roundabout') {\r\n      directiveFr = 'Au rond-point, prendre la ' + exit;\r\n      directiveFr += exit === 1 ? 're' : 'e';\r\n      directiveFr += ' sortie vers ' + route;\r\n      directiveEn = 'At the roundabout, take the ' + exit;\r\n      directiveEn += exit === 1 ? 'st' : 'rd';\r\n      directiveEn += ' exit towards ' + route;\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'rotary') {\r\n      directiveFr = 'Rond-point rotary....';\r\n      directiveEn = 'Roundabout rotary....';\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'roundabout turn') {\r\n      directiveFr = 'Rond-point, prendre la ...';\r\n      directiveEn = 'Roundabout, take the ...';\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'exit roundabout') {\r\n      directiveFr = 'Poursuivre vers ' + route;\r\n      directiveEn = 'Continue to ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'notification') {\r\n      directiveFr = 'notification ....';\r\n      directiveEn = 'notification ....';\r\n    } else if (modifier === 'uturn') {\r\n      directiveFr =\r\n        'Faire demi-tour et continuer en direction ' +\r\n        translatedDirection +\r\n        ' sur ' +\r\n        route;\r\n      directiveEn =\r\n        'Make u-turn and head ' + translatedDirection + ' on ' + route;\r\n    } else {\r\n      directiveFr = '???';\r\n      directiveEn = '???';\r\n    }\r\n\r\n    if (lastStep) {\r\n      image = 'flag';\r\n      cssClass = '';\r\n    }\r\n    if (stepPosition === 0) {\r\n      image = 'explore';\r\n      cssClass = '';\r\n    }\r\n\r\n    let directive;\r\n    if (this.browserLanguage === 'fr') {\r\n      directive = directiveFr;\r\n    } else if (this.browserLanguage === 'en') {\r\n      directive = directiveEn;\r\n    }\r\n\r\n    return { instruction: directive, image, cssClass };\r\n  }\r\n\r\n  translateModifier(modifier) {\r\n    if (modifier === 'uturn') {\r\n      return this.languageService.translate.instant('igo.geo.routing.uturn');\r\n    } else if (modifier === 'sharp right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.sharp right'\r\n      );\r\n    } else if (modifier === 'right') {\r\n      return this.languageService.translate.instant('igo.geo.routing.right');\r\n    } else if (modifier === 'slight right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.slight right'\r\n      );\r\n    } else if (modifier === 'sharp left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.sharp left'\r\n      );\r\n    } else if (modifier === 'left') {\r\n      return this.languageService.translate.instant('igo.geo.routing.left');\r\n    } else if (modifier === 'slight left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.slight left'\r\n      );\r\n    } else if (modifier === 'straight') {\r\n      return this.languageService.translate.instant('igo.geo.routing.straight');\r\n    } else {\r\n      return modifier;\r\n    }\r\n  }\r\n\r\n  translateBearing(bearing) {\r\n    if (bearing >= 337 || bearing < 23) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.n');\r\n    } else if (bearing < 67) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.ne'\r\n      );\r\n    } else if (bearing < 113) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.e');\r\n    } else if (bearing < 157) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.se'\r\n      );\r\n    } else if (bearing < 203) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.s');\r\n    } else if (bearing < 247) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.sw'\r\n      );\r\n    } else if (bearing < 293) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.w');\r\n    } else if (bearing < 337) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.nw'\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  formatDistance(distance) {\r\n    if (distance === 0) {\r\n      return;\r\n    }\r\n    if (distance >= 100000) {\r\n      return Math.round(distance / 1000) + ' km';\r\n    }\r\n    if (distance >= 10000) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    if (distance >= 100) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    return distance + ' m';\r\n  }\r\n\r\n  formatDuration(duration: number, summary = false) {\r\n    if (duration >= 3600) {\r\n      const hour = Math.floor(duration / 3600);\r\n      const minute = Math.round((duration / 3600 - hour) * 60);\r\n      if (minute === 60) {\r\n        return hour + 1 + ' h';\r\n      }\r\n      return hour + ' h ' + minute + ' min';\r\n    }\r\n\r\n    if (duration >= 60) {\r\n      return Math.round(duration / 60) + ' min';\r\n    }\r\n    return duration + ' s';\r\n  }\r\n\r\n  showSegment(step, zoomToExtent = false) {\r\n    this.showRouteSegmentGeometry(step.geometry.coordinates, zoomToExtent);\r\n  }\r\n\r\n  showRouteSegmentGeometry(coordinates, zoomToExtent = false) {\r\n    this.deleteRoutingOverlaybyID('endSegment');\r\n    const geometry4326 = new olgeom.LineString(coordinates);\r\n    const geometry3857 = geometry4326.transform('EPSG:4326', 'EPSG:3857');\r\n    const routeSegmentCoordinates = (geometry3857 as any).getCoordinates();\r\n    const lastPoint = routeSegmentCoordinates[0];\r\n\r\n    const geometry = new olgeom.Point(lastPoint);\r\n    const feature = new olFeature({ geometry });\r\n    feature.setId('endSegment');\r\n\r\n    if (geometry === null) {\r\n      return;\r\n    }\r\n    if (geometry.getType() === 'Point') {\r\n      feature.setStyle([\r\n        new olstyle.Style({\r\n          geometry,\r\n          image: new olstyle.Circle({\r\n            radius: 7,\r\n            stroke: new olstyle.Stroke({ color: '#FF0000', width: 3 })\r\n          })\r\n        })\r\n      ]);\r\n    }\r\n    if (zoomToExtent) {\r\n      this.map.viewController.zoomToExtent(feature.getGeometry().getExtent());\r\n    }\r\n    this.routingRoutesOverlayDataSource.ol.addFeature(feature);\r\n  }\r\n\r\n  zoomRoute() {\r\n    this.map.viewController.zoomToExtent(this.routingRoutesOverlayDataSource.ol.getExtent());\r\n  }\r\n\r\n  showRouteGeometry(moveToExtent = false) {\r\n    const geom = this.activeRoute.geometry.coordinates;\r\n    const geometry4326 = new olgeom.LineString(geom);\r\n    const geometry3857 = geometry4326.transform('EPSG:4326', 'EPSG:3857');\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    const routingFeature = new olFeature({ geometry: geometry3857 });\r\n    routingFeature.setStyle([\r\n      new olstyle.Style({\r\n        stroke: new olstyle.Stroke({ color: '#6a7982', width: 10 })\r\n      }),\r\n      new olstyle.Style({\r\n        stroke: new olstyle.Stroke({ color: '#4fa9dd', width: 6 })\r\n      })\r\n    ]);\r\n    this.routingRoutesOverlayDataSource.ol.addFeature(routingFeature);\r\n    if (moveToExtent) {\r\n      this.map.viewController.zoomToExtent(this.routingRoutesOverlayDataSource.ol.getExtent());\r\n    }\r\n  }\r\n\r\n  getRoutes(stopsArrayCoordinates, moveToExtent = false) {\r\n    const routeResponse = this.routingService.route(stopsArrayCoordinates);\r\n    if (routeResponse) {\r\n      routeResponse.map(res =>\r\n        this.routesQueries$$.push(\r\n          res.subscribe(route => {\r\n            this.routesResults = route;\r\n            this.activeRoute = this.routesResults[0] as Routing;\r\n            this.showRouteGeometry(moveToExtent);\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  private unlistenSingleClick() {\r\n    if (this.focusKey.length !== 0) {\r\n      this.focusKey.forEach(key => {\r\n        olobservable.unByKey(key);\r\n      });\r\n    }\r\n  }\r\n\r\n  private unsubscribeRoutesQueries() {\r\n    this.routesQueries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.routesQueries$$ = [];\r\n  }\r\n\r\n  copyLinkToClipboard() {\r\n    const successful = Clipboard.copy(this.getUrl());\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.routingForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.routingForm.dialog.copyMsgLink');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  copyDirectionsToClipboard() {\r\n    const indent = '\\t';\r\n    let activeRouteDirective =\r\n      this.languageService.translate.instant(\r\n        'igo.geo.routingForm.instructions'\r\n      ) + ':\\n';\r\n    let wayPointList = '';\r\n    const summary =\r\n      this.languageService.translate.instant('igo.geo.routingForm.summary') +\r\n      ': \\n' +\r\n      indent +\r\n      this.activeRoute.title +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDistance(this.activeRoute.distance) +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDuration(this.activeRoute.duration) +\r\n      '\\n\\n' +\r\n      this.languageService.translate.instant('igo.geo.routingForm.stopsList') +\r\n      ':\\n';\r\n\r\n    const url =\r\n      this.languageService.translate.instant('igo.geo.routingForm.link') +\r\n      ':\\n' +\r\n      indent +\r\n      this.getUrl();\r\n\r\n    let wayPointsCnt = 1;\r\n    this.stops.value.forEach(stop => {\r\n      let coord = '';\r\n      let stopPoint = '';\r\n      if (stop.stopPoint !== stop.stopCoordinates) {\r\n        stopPoint = stop.stopPoint;\r\n        coord =\r\n          ' (' +\r\n          [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(',') +\r\n          ')';\r\n      } else {\r\n        stopPoint = [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(\r\n          ','\r\n        );\r\n      }\r\n\r\n      wayPointList =\r\n        wayPointList +\r\n        indent +\r\n        wayPointsCnt.toLocaleString() +\r\n        '. ' +\r\n        stopPoint +\r\n        coord +\r\n        '\\n';\r\n      wayPointsCnt++;\r\n    });\r\n\r\n    // Directions\r\n    let localCnt = 0;\r\n    this.activeRoute.steps.forEach(step => {\r\n      const instruction = this.formatStep(step, localCnt).instruction;\r\n      const distance =\r\n        this.formatDistance(step.distance) === undefined\r\n          ? ''\r\n          : ' (' + this.formatDistance(step.distance) + ')';\r\n      activeRouteDirective =\r\n        activeRouteDirective +\r\n        indent +\r\n        (localCnt + 1).toLocaleString() +\r\n        '. ' +\r\n        instruction +\r\n        distance +\r\n        '\\n';\r\n      localCnt++;\r\n    });\r\n\r\n    const directionsBody =\r\n      summary + wayPointList + '\\n' + url + '\\n\\n' + activeRouteDirective;\r\n\r\n    const successful = Clipboard.copy(directionsBody);\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.routingForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.routingForm.dialog.copyMsg');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  private handleTermChanged(term: string) {\r\n    if (term !== undefined || term.length !== 0) {\r\n      const searchProposals = [];\r\n      const researches = this.searchService.search(term);\r\n      researches.map(res =>\r\n        this.routesQueries$$.push(\r\n          res.request.subscribe(results => {\r\n            results\r\n              .filter(r => r.data.geometry)\r\n              .forEach(element => {\r\n                if (\r\n                  searchProposals.filter(r => r.source === element.source)\r\n                    .length === 0\r\n                ) {\r\n                  searchProposals.push({\r\n                    source: element.source,\r\n                    results: results.map(r => r.data)\r\n                  });\r\n                }\r\n              });\r\n            this.stops\r\n              .at(this.currentStopIndex)\r\n              .patchValue({ stopProposals: searchProposals });\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  setTerm(term: string) {\r\n    this.term = term;\r\n    if (\r\n      this.keyIsValid(term) &&\r\n      (term.length >= this.length || term.length === 0)\r\n    ) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  private keyIsValid(key: string) {\r\n    return this.invalidKeys.find(value => value === key) === undefined;\r\n  }\r\n\r\n  keyup(i, event: KeyboardEvent) {\r\n    const term = (event.target as HTMLInputElement).value;\r\n    this.setTerm(term);\r\n    this.map.ol.un('singleclick', evt => {\r\n      this.handleMapClick(evt, i);\r\n    });\r\n  }\r\n\r\n  clearStop(stopIndex) {\r\n    this.deleteRoutingOverlaybyID(this.getStopOverlayID(stopIndex));\r\n    this.stops.removeAt(stopIndex);\r\n    this.stops.insert(stopIndex, this.createStop(this.routingText(stopIndex)));\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n  }\r\n\r\n  chooseProposal(proposal, i) {\r\n    if (proposal !== undefined) {\r\n      let geomCoord;\r\n      const geom = (proposal as any).geometry;\r\n      if (geom.type === 'Point') {\r\n        geomCoord = geom.coordinates;\r\n      } else if (geom.type.search('Line') >= 0) {\r\n        let coordArray = [];\r\n        if (geom.coordinates instanceof Array) {\r\n          // Middle segment of multilinestring\r\n          coordArray =\r\n            geom.coordinates[Math.floor(geom.coordinates.length / 2)];\r\n        } else {\r\n          coordArray = geom.coordinates;\r\n        }\r\n        // middle point of coords\r\n        geomCoord = coordArray[Math.floor(coordArray.length / 2)];\r\n      } else if (geom.type.search('Polygon') >= 0) {\r\n        const polygonExtent = proposal.extent;\r\n        const long =\r\n          polygonExtent[0] + (polygonExtent[2] - polygonExtent[0]) / 2;\r\n        const lat =\r\n          polygonExtent[1] + (polygonExtent[3] - polygonExtent[1]) / 2;\r\n        geomCoord = [long, lat];\r\n      }\r\n\r\n      if (geomCoord !== undefined) {\r\n        this.stops.at(i).patchValue({ stopCoordinates: geomCoord });\r\n        this.addStopOverlay(geomCoord, i);\r\n        const proposalExtent = this.routingStopsOverlayDataSource.ol\r\n          .getFeatureById(this.getStopOverlayID(i))\r\n          .getGeometry()\r\n          .getExtent();\r\n\r\n        if (!olextent.intersects(proposalExtent, this.map.getExtent())) {\r\n          this.map.viewController.moveToExtent(proposalExtent);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  focus(i) {\r\n    this.unlistenSingleClick();\r\n    this.currentStopIndex = i;\r\n    this.focusOnStop = true;\r\n    this.routingFormService.setMapWaitingForRoutingClick();\r\n    this.focusKey.push(\r\n      this.map.ol.once('singleclick', evt => {\r\n        this.handleMapClick(evt, i);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleMapClick(event: olcondition, indexPos?) {\r\n    this.stops.at(indexPos).patchValue({ stopProposals: [] });\r\n    if (this.currentStopIndex === undefined) {\r\n      this.addStop();\r\n      indexPos = this.stops.length - 2;\r\n      this.stops.at(indexPos).value.stopProposals = [];\r\n    } else {\r\n      indexPos = this.currentStopIndex;\r\n    }\r\n    const clickCoordinates = olproj.transform(\r\n      event.coordinate,\r\n      this.map.projection,\r\n      this.projection\r\n    );\r\n    this.stops.at(indexPos).patchValue({ stopCoordinates: clickCoordinates });\r\n\r\n    this.handleLocationProposals(clickCoordinates, indexPos);\r\n    this.addStopOverlay(clickCoordinates, indexPos);\r\n    setTimeout(() => {\r\n      this.focusOnStop = false; // prevent to trigger map click and Select on routes at same time.\r\n    }, 500);\r\n    this.routingFormService.unsetMapWaitingForRoutingClick();\r\n  }\r\n\r\n  geolocateStop(index: number) {\r\n    moveToOlFeatures(this.map, [this.map.geolocationFeature], FeatureMotion.Move);\r\n    const geolocateCoordinates = this.map.getCenter(this.projection);\r\n    this.stops.at(index).patchValue({ stopCoordinates: geolocateCoordinates });\r\n    this.addStopOverlay(geolocateCoordinates, index);\r\n    this.handleLocationProposals(geolocateCoordinates, index);\r\n  }\r\n\r\n  public addStopOverlay(coordinates: [number, number], index: number) {\r\n    const routingText = this.routingText(index);\r\n    let stopColor;\r\n    let stopText;\r\n    if (routingText === 'start') {\r\n      stopColor = 'green';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.routingForm.start'\r\n      );\r\n    } else if (routingText === 'end') {\r\n      stopColor = 'red';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.routingForm.end'\r\n      );\r\n    } else {\r\n      stopColor = 'yellow';\r\n      stopText =\r\n        this.languageService.translate.instant(\r\n          'igo.geo.routingForm.intermediate'\r\n        ) +\r\n        ' #' +\r\n        index;\r\n    }\r\n\r\n    const geometry = new olgeom.Point(\r\n      olproj.transform(coordinates, this.projection, this.map.projection)\r\n    );\r\n    const feature = new olFeature({ geometry });\r\n\r\n    const stopID = this.getStopOverlayID(index);\r\n    this.deleteRoutingOverlaybyID(stopID);\r\n    feature.setId(stopID);\r\n\r\n    if (geometry === null) {\r\n      return;\r\n    }\r\n    if (geometry.getType() === 'Point') {\r\n      const olStyle = createOverlayMarkerStyle(stopColor);\r\n      // stopText\r\n      feature.setStyle(olStyle);\r\n    }\r\n    this.routingStopsOverlayDataSource.ol.addFeature(feature);\r\n  }\r\n\r\n  public getStopOverlayID(index: number): string {\r\n    let txt;\r\n    if (index === 0) {\r\n      txt = 'start';\r\n    } else if (index === this.stops.length - 1) {\r\n      txt = 'end';\r\n    } else {\r\n      txt = index;\r\n    }\r\n    return 'routingStop_' + txt;\r\n  }\r\n\r\n  private deleteRoutingOverlaybyID(id) {\r\n    if (this.routingStopsOverlayDataSource.ol.getFeatureById(id)) {\r\n      this.routingStopsOverlayDataSource.ol.removeFeature(\r\n        this.routingStopsOverlayDataSource.ol.getFeatureById(id)\r\n      );\r\n    }\r\n    if (this.routingRoutesOverlayDataSource.ol.getFeatureById(id)) {\r\n      this.routingRoutesOverlayDataSource.ol.removeFeature(\r\n        this.routingRoutesOverlayDataSource.ol.getFeatureById(id)\r\n      );\r\n    }\r\n  }\r\n\r\n  private getUrl() {\r\n    if (!this.route) {\r\n      return;\r\n    }\r\n\r\n    const routingKey = this.route.options.routingCoordKey;\r\n    const stopsCoordinates = [];\r\n    if (\r\n      this.routingFormService &&\r\n      this.routingFormService.getStopsCoordinates() &&\r\n      this.routingFormService.getStopsCoordinates().length !== 0\r\n    ) {\r\n      this.routingFormService.getStopsCoordinates().forEach(coord => {\r\n        stopsCoordinates.push(coord);\r\n      });\r\n    }\r\n    let routingUrl = '';\r\n    if (stopsCoordinates.length >= 2) {\r\n      routingUrl = `${routingKey}=${stopsCoordinates.join(';')}`;\r\n    }\r\n\r\n    return `${location.origin}${\r\n      location.pathname\r\n    }?tool=directions&${routingUrl}`;\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  AfterViewInit,\r\n  Optional\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { RoutingFormComponent } from './routing-form.component';\r\nimport { RoutingFormService } from './routing-form.service';\r\n\r\n@Directive({\r\n  selector: '[igoRoutingFormBinding]'\r\n})\r\nexport class RoutingFormBindingDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    @Self() private component: RoutingFormComponent,\r\n    private routingFormService: RoutingFormService,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    const storedStopsCoordinates = this.routingFormService.getStopsCoordinates();\r\n    if (\r\n      !storedStopsCoordinates &&\r\n      this.route &&\r\n      this.route.options.routingCoordKey\r\n    ) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const routingParams =\r\n          params[this.route.options.routingCoordKey as string];\r\n        const stopsCoordinatesFromURL = [];\r\n        if (routingParams) {\r\n          const routingCoordUrl = routingParams.split(';');\r\n          if (routingCoordUrl.length >= 2) {\r\n            let cnt = 0;\r\n            routingCoordUrl.forEach(coord => {\r\n              if (cnt !== 0 && cnt !== routingCoordUrl.length - 1) {\r\n                this.component.stops.insert(cnt, this.component.createStop());\r\n              }\r\n\r\n              const stopCoordinatesFromURL = JSON.parse('[' + coord + ']');\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopCoordinates: stopCoordinatesFromURL });\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopPoint: stopCoordinatesFromURL });\r\n              this.component.handleLocationProposals(\r\n                stopCoordinatesFromURL,\r\n                cnt\r\n              );\r\n\r\n              stopsCoordinatesFromURL.push(stopCoordinatesFromURL);\r\n              this.component.addStopOverlay(stopCoordinatesFromURL, cnt);\r\n              cnt++;\r\n            });\r\n            this.component.getRoutes(stopsCoordinatesFromURL, true);\r\n          }\r\n        }\r\n      });\r\n    } else if (storedStopsCoordinates) {\r\n      for (let i = 0; i < storedStopsCoordinates.length; i++) {\r\n        if (i !== 0 && i !== storedStopsCoordinates.length - 1) {\r\n          this.component.stops.insert(i, this.component.createStop());\r\n        }\r\n        if (storedStopsCoordinates[i] instanceof Array) {\r\n          this.component.addStopOverlay(storedStopsCoordinates[i], i);\r\n          this.component.stops\r\n            .at(i)\r\n            .patchValue({ stopCoordinates: storedStopsCoordinates[i] });\r\n          this.component.stops\r\n            .at(i)\r\n            .patchValue({ stopPoint: storedStopsCoordinates[i] });\r\n          this.component.handleLocationProposals(storedStopsCoordinates[i], i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatListModule,\r\n  MatDividerModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatTooltipModule,\r\n  MatAutocompleteModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { RoutingFormComponent } from './routing-form/routing-form.component';\r\nimport { RoutingFormBindingDirective } from './routing-form/routing-form-binding.directive';\r\nimport { RoutingFormService } from './routing-form/routing-form.service';\r\nimport { provideRoutingSourceService } from './shared/routing-source.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatListModule,\r\n    MatDividerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [RoutingFormComponent, RoutingFormBindingDirective],\r\n  declarations: [RoutingFormComponent, RoutingFormBindingDirective],\r\n  providers: [RoutingFormService, provideRoutingSourceService()]\r\n})\r\nexport class IgoRoutingModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoRoutingModule\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceService } from './search-source.service';\r\n\r\n/**\r\n * Search source factory\r\n * @ignore\r\n */\r\nexport function searchSourceServiceFactory(sources: SearchSource[]) {\r\n  return new SearchSourceService(sources);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the SearchSource service\r\n */\r\nexport function provideSearchSourceService() {\r\n  return {\r\n    provide: SearchSourceService,\r\n    useFactory: searchSourceServiceFactory,\r\n    deps: [SearchSource]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  IChercheData,\r\n  IChercheResponse,\r\n  IChercheReverseData,\r\n  IChercheReverseResponse\r\n} from './icherche.interfaces';\r\n\r\n@Injectable()\r\nexport class IChercheSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * ICherche search source\r\n */\r\n@Injectable()\r\nexport class IChercheSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'icherche';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [\r\n    '@timestamp',\r\n    '@version',\r\n    'recherche',\r\n    'id',\r\n    'idrte',\r\n    'cote',\r\n    'geometry',\r\n    'bbox'\r\n  ];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions,\r\n    @Inject(IChercheSearchResultFormatter)\r\n    private formatter: IChercheSearchResultFormatter\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'ICherche QuÃ©bec',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/icherche/geocode'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response: IChercheResponse) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeRequestParams(term: string, options: TextSearchOptions): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          q: term,\r\n          geometries: 'geom',\r\n          type:\r\n            'adresse,code_postal,route,municipalite,mrc,region_administrative'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: IChercheResponse): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheData) => {\r\n      return this.formatter.formatResult(this.dataToResult(data));\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: IChercheData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data._id].join('.');\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.recherche\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.recherche,\r\n        titleHtml: data.highlight,\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheSearchSource.propertiesBlacklist\r\n    );\r\n    return Object.assign(properties, { type: data.doc_type });\r\n  }\r\n}\r\n\r\n/**\r\n * IChercheReverse search source\r\n */\r\n@Injectable()\r\nexport class IChercheReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'icherchereverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = ['doc_type'];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'ICherche QuÃ©bec',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/icherche/xy'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n    return this.http.get(this.searchUrl, { params }).pipe(\r\n      map((response: IChercheReverseResponse) => {\r\n        return this.extractResults(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    const distance = options.distance;\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          loc: lonLat.join(','),\r\n          distance: distance ? String(distance) : '',\r\n          geometries: 'geom',\r\n          type: 'adresse,municipalite,mrc,regadmin'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: IChercheReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: IChercheReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), properties.type, data._id].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheReverseData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return Object.assign(properties, { type: data.properties.doc_type });\r\n  }\r\n\r\n  private computeExtent(data: IChercheReverseData): [number, number, number, number] | undefined {\r\n    return data.bbox\r\n      ? [data.bbox[0], data.bbox[2], data.bbox[1], data.bbox[3]]\r\n      : undefined;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  IChercheSearchSource,\r\n  IChercheSearchResultFormatter,\r\n  IChercheReverseSearchSource\r\n} from './icherche';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultIChercheSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new IChercheSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultIChercheSearchResultFormatter() {\r\n  return {\r\n    provide: IChercheSearchResultFormatter,\r\n    useFactory: defaultIChercheSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * ICherche search source factory\r\n * @ignore\r\n */\r\nexport function ichercheSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService,\r\n  formatter: IChercheSearchResultFormatter\r\n) {\r\n  return new IChercheSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${IChercheSearchSource.id}`),\r\n    formatter\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search source\r\n */\r\nexport function provideIChercheSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService, IChercheSearchResultFormatter]\r\n  };\r\n}\r\n\r\n/**\r\n * IChercheReverse search source factory\r\n * @ignore\r\n */\r\nexport function ichercheReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new IChercheReverseSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${IChercheReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideIChercheReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","export class GoogleLinks {\r\n  static getGoogleMapsLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=' + lat + ',' + lon;\r\n  }\r\n\r\n  static getGoogleStreetViewLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon;\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, ReverseSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { GoogleLinks } from '../../../utils/googleLinks';\r\n\r\n@Injectable()\r\nexport class CoordinatesSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n/**\r\n * CoordinatesReverse search source\r\n */\r\n@Injectable()\r\nexport class CoordinatesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'coordinatesreverse';\r\n  static type = FEATURE;\r\n\r\n  constructor(@Inject('options') options: SearchSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return CoordinatesReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Coordinates'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    return of([this.dataToResult(lonLat)]);\r\n  }\r\n\r\n  private dataToResult(data: [number, number]): SearchResult<Feature> {\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [data[0], data[1]]\r\n        },\r\n        extent: undefined,\r\n        properties: {\r\n          type: 'point',\r\n          coordonnees: String(data[0]) + ', ' + String(data[1]),\r\n          format: 'degrÃ©s decimaux',\r\n          systemeCoordonnees: 'WGS84',\r\n          GoogleMaps: GoogleLinks.getGoogleMapsLink(data[0], data[1]),\r\n          GoogleStreetView: GoogleLinks.getGoogleStreetViewLink(\r\n            data[0],\r\n            data[1]\r\n          )\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id: '1',\r\n        title: String(data[0]) + ', ' + String(data[1]),\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  CoordinatesReverseSearchSource,\r\n  CoordinatesSearchResultFormatter\r\n} from './coordinates';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultCoordinatesSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new CoordinatesSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultCoordinatesSearchResultFormatter() {\r\n  return {\r\n    provide: CoordinatesSearchResultFormatter,\r\n    useFactory: defaultCoordinatesSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * CoordinatesReverse search source factory\r\n * @ignore\r\n */\r\nexport function CoordinatesReverseSearchSourceFactory(config: ConfigService) {\r\n  return new CoordinatesReverseSearchSource(\r\n    config.getConfig(`searchSources.${CoordinatesReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideCoordinatesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: CoordinatesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService]\r\n  };\r\n}\r\n","import { FEATURE } from '../../feature';\r\nimport { LAYER } from '../../layer';\r\n\r\nexport const SEARCH_TYPES = [FEATURE, LAYER];\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-selector',\r\n  templateUrl: './search-selector.component.html',\r\n  styleUrls: ['./search-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchSelectorComponent implements OnInit {\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * The search type enabled\r\n   */\r\n  @Input() enabled: string;\r\n\r\n  /**\r\n   * Event emitted when the enabled search type changes\r\n   */\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  constructor(private searchSourceService: SearchSourceService) {}\r\n\r\n  /**\r\n   * Enable the first search type if the enabled input is not defined\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    const initial = this.enabled || this.searchTypes[0];\r\n    this.enableSearchType(initial);\r\n  }\r\n\r\n  /**\r\n   * Enable the selected search type\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.enableSearchType(searchType);\r\n  }\r\n\r\n  /**\r\n   * Get a search type's title. The title\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  getSearchTypeTitle(searchType: string) {\r\n    return `search.${searchType.toLowerCase()}.title`;\r\n  }\r\n\r\n  /**\r\n   * Emit an event and enable the search sources of the given type.\r\n   * @param searchType Search type\r\n   */\r\n  private enableSearchType(searchType: string) {\r\n    this.enabled = searchType;\r\n    this.searchSourceService.enableSourcesByType(searchType);\r\n    this.change.emit(searchType);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { SearchSelectorComponent } from './search-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSelectorComponent],\r\n  declarations: [SearchSelectorComponent]\r\n})\r\nexport class IgoSearchSelectorModule {}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ElementRef,\r\n  HostBinding,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { Subject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { EntityStore } from '@igo2/common';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchResult, Research } from '../shared/search.interfaces';\r\nimport { SearchService } from '../shared/search.service';\r\n\r\n/**\r\n * Searchbar that triggers a research in all search sources enabled.\r\n * If the store input is defined, the search results will be loaded\r\n * into that store. An event is always emitted when a research is completed.\r\n */\r\n@Component({\r\n  selector: 'igo-search-bar',\r\n  templateUrl: './search-bar.component.html',\r\n  styleUrls: ['./search-bar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchBarComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Invalid keys\r\n   */\r\n  private readonly invalidKeys = ['Control', 'Shift', 'Alt'];\r\n\r\n  /**\r\n   * Search term stream\r\n   */\r\n  private stream$ = new Subject<string>();\r\n\r\n  /**\r\n   * Subscription to the search term stream\r\n   */\r\n  private stream$$: Subscription;\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input() term = '';\r\n\r\n  /**\r\n   * Whether a float label should be displayed\r\n   */\r\n  @Input() floatLabel: FloatLabelType = 'never';\r\n\r\n  /**\r\n   * Whether this component is disabled\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  /**\r\n   * Icons color (search and clear)\r\n   */\r\n  @Input() color = 'primary';\r\n\r\n  /**\r\n   * Debounce time between each keystroke\r\n   */\r\n  @Input() debounce = 300;\r\n\r\n  /**\r\n   * Minimum term length required to trigger a research\r\n   */\r\n  @Input() minLength = 2;\r\n\r\n  /**\r\n   * Search icon\r\n   */\r\n  @Input() searchIcon: string;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * Event emitted when the search term changes\r\n   */\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Event emitted when a research is completed\r\n   */\r\n  @Output() search = new EventEmitter<{\r\n    research: Research;\r\n    results: SearchResult[];\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the search type changes\r\n   */\r\n  @Output() searchTypeChange = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Input element\r\n   * @internal\r\n   */\r\n  @ViewChild('input') input: ElementRef;\r\n\r\n  /**\r\n   * Host's empty class\r\n   * @internal\r\n   */\r\n  @HostBinding('class.empty')\r\n  get emptyClass() {\r\n    return this.empty;\r\n  }\r\n\r\n  /**\r\n   * Whether the search bar is empty\r\n   * @internal\r\n   */\r\n  get empty(): boolean {\r\n    return this.term.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Search bar palceholder\r\n   * @internal\r\n   */\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n  }\r\n  get placeholder(): string {\r\n    return this.empty ? this._placeholder : '';\r\n  }\r\n  private _placeholder = '';\r\n\r\n  constructor(private searchService: SearchService) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.stream$$ = this.stream$\r\n      .pipe(\r\n        debounce((term: string) => {\r\n          return term === '' ? EMPTY : timer(300);\r\n        }),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe((term: string) => this.onTermChange(term));\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the search term stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.stream$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * When a user types, validates the key and send it into the\r\n   * stream if it's valid\r\n   * @param event Keyboard event\r\n   * @internal\r\n   */\r\n  onKeyup(event: KeyboardEvent) {\r\n    const key = (event.target as HTMLInputElement).value;\r\n    if (!this.keyIsValid(key)) {\r\n      return;\r\n    }\r\n    this.setTerm(key);\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   * @internal\r\n   */\r\n  onClearButtonClick() {\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Update the placeholder with the enabled search type. The placeholder\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Enabled search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.searchTypeChange.emit(searchType);\r\n    this.placeholder = `search.${searchType.toLowerCase()}.placeholder`;\r\n    this.doSearch(this.term);\r\n  }\r\n\r\n  /**\r\n   * Send the term into the stream only if this component is not disabled\r\n   * @param term Search term\r\n   */\r\n  setTerm(term: string) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.term = term;\r\n    if (term.length >= this.minLength || term.length === 0) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   */\r\n  private clear() {\r\n    this.term = '';\r\n    this.stream$.next(this.term);\r\n    this.input.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Validate if a given key stroke is a valid input\r\n   */\r\n  private keyIsValid(key: string) {\r\n    return this.invalidKeys.indexOf(key) === -1;\r\n  }\r\n\r\n  /**\r\n   * When the search term changes, emit an event and trigger a\r\n   * research in every enabled search sources.\r\n   * @param term Search term\r\n   */\r\n  private onTermChange(term: string | undefined) {\r\n    this.change.emit(term);\r\n    this.doSearch(term);\r\n  }\r\n\r\n  /**\r\n   * Execute the search\r\n   * @param term Search term\r\n   */\r\n  private doSearch(term: string | undefined) {\r\n    if (term === undefined || term === '') {\r\n      if (this.store !== undefined) {\r\n        this.store.clear();\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.store !== undefined) {\r\n      this.store.softClear();\r\n    }\r\n\r\n    const researches = this.searchService.search(term);\r\n    researches.map(research => {\r\n      research.request.subscribe((results: SearchResult[]) => {\r\n        this.onResearchCompleted(research, results);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When a research  is completed, emit an event and update\r\n   * the store's items.\r\n   * @param research Research\r\n   * @param results Research results\r\n   */\r\n  private onResearchCompleted(research: Research, results: SearchResult[]) {\r\n    this.search.emit({ research, results });\r\n\r\n    if (this.store !== undefined) {\r\n      const newResults = this.store.entities$.value\r\n        .filter(result => result.source !== research.source)\r\n        .concat(results);\r\n      this.store.load(newResults);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  OnInit,\r\n  Optional,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { SearchBarComponent } from './search-bar.component';\r\n\r\n@Directive({\r\n  selector: '[igoSearchUrlParam]'\r\n})\r\nexport class SearchUrlParamDirective implements OnInit {\r\n  constructor(\r\n    @Self() private component: SearchBarComponent,\r\n    private ref: ChangeDetectorRef,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.route && this.route.options.searchKey) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const searchParams = params[this.route.options.searchKey as string];\r\n        if (searchParams) {\r\n          this.component.setTerm(searchParams);\r\n          this.ref.detectChanges();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoSearchSelectorModule } from '../search-selector/search-selector.module';\r\nimport { SearchBarComponent } from './search-bar.component';\r\nimport { SearchUrlParamDirective } from './search-url-param.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoSearchSelectorModule\r\n  ],\r\n  exports: [\r\n    SearchBarComponent,\r\n    SearchBarComponent\r\n  ],\r\n  declarations: [\r\n    SearchBarComponent,\r\n    SearchUrlParamDirective\r\n  ]\r\n})\r\nexport class IgoSearchBarModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport {Observable, EMPTY, timer} from 'rxjs';\r\nimport {debounce, map} from 'rxjs/operators';\r\n\r\nimport {EntityStore, EntityStoreWatcher} from '@igo2/common';\r\n\r\nimport {SearchResult} from '../shared/search.interfaces';\r\nimport {SearchSource} from '../shared/sources/source';\r\n\r\nexport enum SearchResultMode {\r\n  Grouped = 'grouped',\r\n  Flat = 'flat'\r\n}\r\n\r\n/**\r\n * List of search results with focus and selection capabilities.\r\n * This component is dumb and only emits events.\r\n */\r\n@Component({\r\n  selector: 'igo-search-results',\r\n  templateUrl: './search-results.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Reference to the SearchResultMode enum\r\n   * @internal\r\n   */\r\n  public searchResultMode = SearchResultMode;\r\n\r\n  /**\r\n   * Search results store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<SearchResult>;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * Search results display mode\r\n   */\r\n  @Input() mode: SearchResultMode = SearchResultMode.Grouped;\r\n\r\n  /**\r\n   * Event emitted when a result is focused\r\n   */\r\n  @Output() resultFocus = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a result is selected\r\n   */\r\n  @Output() resultSelect = new EventEmitter<SearchResult>();\r\n\r\n  get results$(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    if (this._results$ === undefined) {\r\n      this._results$ = this.liftResults();\r\n    }\r\n    return this._results$;\r\n  }\r\n  private _results$: Observable<\r\n    {source: SearchSource; results: SearchResult[]}[]\r\n  >;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Bind the search results store to the watcher\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n  }\r\n\r\n  /**\r\n   * Unbind the search results store from the watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * When a result is focused, update it's state in the store and emit\r\n   * an event.\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultFocus(result: SearchResult) {\r\n    this.store.state.update(result, {focused: true}, true);\r\n    this.resultFocus.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Compute a group title\r\n   * @param group Search results group\r\n   * @returns Group title\r\n   * @internal\r\n   */\r\n  computeGroupTitle(group: {source: SearchSource; results: SearchResult[]}): string {\r\n    const parts = [group.source.title];\r\n    const count = group.results.length;\r\n    if (count > 1) {\r\n      parts.push(`(${count})`);\r\n    }\r\n    return parts.join(' ');\r\n  }\r\n\r\n  /**\r\n   * When a result is selected, update it's state in the store and emit\r\n   * an event. A selected result is also considered focused\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultSelect(result: SearchResult) {\r\n    this.store.state.update(\r\n      result,\r\n      {\r\n        focused: true,\r\n        selected: true\r\n      },\r\n      true\r\n    );\r\n    this.resultSelect.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Return an observable of the search results, grouped by search source\r\n   * @returns Observable of grouped search results\r\n   * @internal\r\n   */\r\n  private liftResults(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    return this.store.view.all$().pipe(\r\n      debounce((results: SearchResult[]) => {\r\n        return results.length === 0 ? EMPTY : timer(200);\r\n      }),\r\n      map((results: SearchResult[]) => {\r\n        return this.groupResults(results.sort(this.sortByOrder));\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sort the results by display order.\r\n   * @param r1 First result\r\n   * @param r2 Second result\r\n   */\r\n  private sortByOrder(r1: SearchResult, r2: SearchResult) {\r\n    return r1.source.displayOrder - r2.source.displayOrder;\r\n  }\r\n\r\n  /**\r\n   * Group results by search source\r\n   * @param results Search results from all sources\r\n   * @returns Search results grouped by source\r\n   */\r\n  private groupResults(results: SearchResult[]): {source: SearchSource; results: SearchResult[]}[] {\r\n    const grouped = new Map<SearchSource, SearchResult[]>();\r\n    results.forEach((result: SearchResult) => {\r\n      const source = result.source;\r\n      let sourceResults = grouped.get(source);\r\n      if (sourceResults === undefined) {\r\n        sourceResults = [];\r\n        grouped.set(source, sourceResults);\r\n      }\r\n      sourceResults.push(result);\r\n    });\r\n\r\n    return Array.from(grouped.keys()).map((source: SearchSource) => {\r\n      return {source, results: grouped.get(source)};\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityTitleHtml, getEntityIcon } from '@igo2/common';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\n\r\n/**\r\n * Search results list item\r\n */\r\n@Component({\r\n  selector: 'igo-search-results-item',\r\n  templateUrl: './search-results-item.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsItemComponent {\r\n\r\n  /**\r\n   * Search result\r\n   */\r\n  @Input() result: SearchResult;\r\n\r\n  /**\r\n   * Search result title\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.result); }\r\n\r\n  /**\r\n   * Search result HTML title\r\n   * @internal\r\n   */\r\n  get titleHtml(): string { return getEntityTitleHtml(this.result); }\r\n\r\n  /**\r\n   * Search result icon\r\n   * @internal\r\n   */\r\n  get icon(): string { return getEntityIcon(this.result); }\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule\r\n} from '@igo2/common';\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { SearchResultsComponent } from './search-results.component';\r\nimport { SearchResultsItemComponent } from './search-results-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [\r\n    SearchResultsComponent\r\n  ],\r\n  declarations: [\r\n    SearchResultsComponent,\r\n    SearchResultsItemComponent\r\n  ]\r\n})\r\nexport class IgoSearchResultsModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { provideSearchSourceService } from './shared/search-source-service.providers';\r\nimport { provideDefaultIChercheSearchResultFormatter } from './shared/sources/icherche.providers';\r\nimport { provideDefaultCoordinatesSearchResultFormatter } from './shared/sources/coordinates.providers';\r\n\r\nimport { IgoSearchBarModule } from './search-bar/search-bar.module';\r\nimport { IgoSearchSelectorModule } from './search-selector/search-selector.module';\r\nimport { IgoSearchResultsModule } from './search-results/search-results.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule\r\n  ],\r\n  exports: [\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoSearchModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoSearchModule,\r\n      providers: [\r\n        provideSearchSourceService(),\r\n        provideDefaultIChercheSearchResultFormatter(),\r\n        provideDefaultCoordinatesSearchResultFormatter()\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { FlexibleState, getEntityTitle } from '@igo2/common';\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport { Feature } from '../feature/shared/feature.interfaces';\r\nimport { FeatureMotion } from '../feature/shared/feature.enums';\r\nimport { moveToOlFeatures } from '../feature/shared/feature.utils';\r\nimport { IgoMap } from '../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-toast',\r\n  templateUrl: './toast.component.html',\r\n  styleUrls: ['./toast.component.scss']\r\n})\r\nexport class ToastComponent {\r\n  static SWIPE_ACTION = {\r\n    UP: 'swipeup',\r\n    DOWN: 'swipedown'\r\n  };\r\n  private format = new olFormatGeoJSON();\r\n\r\n  @Input()\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n  set expanded(value: boolean) {\r\n    this.state = value ? 'expanded' : 'collapsed';\r\n    this._expanded = value;\r\n  }\r\n  private _expanded: boolean;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n  }\r\n  private _feature: Feature;\r\n\r\n  @Output() opened = new EventEmitter<boolean>();\r\n\r\n  public state: FlexibleState;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.feature); }\r\n\r\n  constructor() {}\r\n\r\n  toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.opened.emit(this.expanded);\r\n  }\r\n\r\n  zoomToFeatureExtent() {\r\n    if (this.feature.geometry) {\r\n      const olFeature = this.format.readFeature(this.feature, {\r\n        dataProjection: this.feature.projection,\r\n        featureProjection: this.map.projection\r\n      });\r\n      moveToOlFeatures(this.map, [olFeature], FeatureMotion.Zoom);\r\n    }\r\n  }\r\n\r\n  swipe(action: string) {\r\n    if (action === ToastComponent.SWIPE_ACTION.UP) {\r\n      if (!this.expanded) {\r\n        this.toggle();\r\n      }\r\n    } else if (action === ToastComponent.SWIPE_ACTION.DOWN) {\r\n      if (this.expanded) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule, MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoPanelModule, IgoFlexibleModule } from '@igo2/common';\r\n\r\nimport { IgoFeatureModule } from '../feature/feature.module';\r\nimport { ToastComponent } from './toast.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    IgoPanelModule,\r\n    IgoFlexibleModule,\r\n    IgoFeatureModule\r\n  ],\r\n  exports: [ToastComponent],\r\n  declarations: [ToastComponent]\r\n})\r\nexport class IgoToastModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoToastModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { OnUpdateInputs, WidgetComponent } from '@igo2/common';\r\n\r\nimport { Layer } from '../../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter',\r\n  templateUrl: './ogc-filter.component.html',\r\n  styleUrls: ['./ogc-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterComponent implements OnUpdateInputs, WidgetComponent {\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() showFeatureOnMap: boolean = true;\r\n\r\n  /**\r\n   * Event emitted on complete\r\n   */\r\n  @Output() complete = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted on cancel\r\n   */\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Implemented as part of OnUpdateInputs\r\n   */\r\n  onUpdateInputs() {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * On close, emit the cancel event\r\n   */\r\n  onClose() {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nimport { Widget, WidgetService } from '@igo2/common';\r\n\r\nimport { OgcFilterComponent } from './ogc-filter/ogc-filter.component';\r\n\r\nexport const OgcFilterWidget = new InjectionToken<Widget>('OgcFilterWidget');\r\n\r\nexport function ogcFilterWidgetFactory(widgetService: WidgetService): Widget {\r\n  return widgetService.create(OgcFilterComponent);\r\n}\r\n\r\nexport function provideOgcFilterWidget() {\r\n  return {\r\n    provide: OgcFilterWidget,\r\n    useFactory: ogcFilterWidgetFactory,\r\n    deps: [WidgetService]\r\n  };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoFilterModule } from '../../../filter/filter.module';\r\nimport { OgcFilterComponent } from './ogc-filter.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule,\r\n    IgoFilterModule\r\n  ],\r\n  exports: [OgcFilterComponent],\r\n  declarations: [OgcFilterComponent],\r\n  entryComponents: [OgcFilterComponent]\r\n})\r\nexport class IgoOgcFilterModule {}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WfsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: VectorLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WfsWorkspace extends Workspace {\r\n\r\n  get layer(): VectorLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WfsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  ActionStore,\r\n  EntityTableTemplate\r\n} from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { SourceFieldsOptionsParams } from '../../datasource';\r\n\r\nimport { WfsWorkspace } from './wfs-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WfsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: VectorLayer, map: IgoMap): WfsWorkspace {\r\n    return new WfsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      entityStore: this.createFeatureStore(layer, map),\r\n      actionStore: new ActionStore([]),\r\n      meta: {\r\n        tableTemplate: this.createTableTemplate(layer)\r\n      }\r\n    });\r\n  }\r\n\r\n  private createFeatureStore(layer: VectorLayer, map: IgoMap): FeatureStore {\r\n    const store = new FeatureStore([], {map});\r\n    store.bindLayer(layer);\r\n\r\n    const loadingStrategy = new FeatureStoreLoadingLayerStrategy({});\r\n    const selectionStrategy = new FeatureStoreSelectionStrategy({\r\n      map,\r\n      hitTolerance: 5\r\n    });\r\n    store.addStrategy(loadingStrategy, true);\r\n    store.addStrategy(selectionStrategy, true);\r\n\r\n    return store;\r\n  }\r\n\r\n  private createTableTemplate(layer: VectorLayer): EntityTableTemplate {\r\n    const fields = layer.dataSource.options.sourceFields || [];\r\n    const columns = fields.map((field: SourceFieldsOptionsParams) => {\r\n      return {\r\n        name: `properties.${field.name}`,\r\n        title: field.alias ? field.alias : field.name\r\n      };\r\n    });\r\n\r\n    return {\r\n      selection: true,\r\n      sort: true,\r\n      columns\r\n    };\r\n  }\r\n\r\n}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WmsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: ImageLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WmsWorkspace extends Workspace {\r\n\r\n  get layer(): ImageLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WmsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ActionStore } from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { WmsWorkspace } from './wms-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WmsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: ImageLayer, map: IgoMap): WmsWorkspace {\r\n    return new WmsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      actionStore: new ActionStore([])\r\n    });\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { Workspace, WorkspaceStore, WorkspaceSelectorComponent } from '@igo2/common';\r\n\r\nimport { Layer, ImageLayer, VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { WFSDataSource, WMSDataSource } from '../../datasource';\r\nimport { OgcFilterableDataSourceOptions } from '../../filter';\r\n\r\nimport { WfsWorkspaceService } from '../shared/wfs-workspace.service';\r\nimport { WmsWorkspaceService } from '../shared/wms-workspace.service';\r\n\r\n@Directive({\r\n  selector: '[igoWorkspaceSelector]'\r\n})\r\nexport class WorkspaceSelectorDirective implements OnInit, OnDestroy {\r\n\r\n  private layers$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  get workspaceStore(): WorkspaceStore {\r\n    return this.component.store;\r\n  }\r\n\r\n  constructor(\r\n    private component: WorkspaceSelectorComponent,\r\n    private wfsWorkspaceService: WfsWorkspaceService,\r\n    private wmsWorkspaceService: WmsWorkspaceService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$\r\n      .pipe(debounceTime(50))\r\n      .subscribe((layers: Layer[]) =>\r\n        this.onLayersChange(layers)\r\n      );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  private onLayersChange(layers: Layer[]) {\r\n    const editableLayers = layers.filter((layer: Layer) =>\r\n      this.layerIsEditable(layer)\r\n    );\r\n    const editableLayersIds = editableLayers.map((layer: Layer) => layer.id);\r\n\r\n    const workspacesToAdd = editableLayers\r\n      .map((layer: VectorLayer) => this.getOrCreateWorkspace(layer))\r\n      .filter((workspace: Workspace | undefined) => workspace !== undefined);\r\n\r\n    const workspacesToRemove = this.workspaceStore.all()\r\n      .filter((workspace: Workspace) => {\r\n        return editableLayersIds.indexOf(workspace.id) < 0;\r\n      });\r\n\r\n    if (workspacesToRemove.length > 0) {\r\n      workspacesToRemove.forEach((workspace: Workspace) => {\r\n        workspace.deactivate();\r\n      });\r\n      this.workspaceStore.state.updateMany(workspacesToRemove, {active: false, selected: false});\r\n      this.workspaceStore.deleteMany(workspacesToRemove);\r\n    }\r\n\r\n    if (workspacesToAdd.length > 0) {\r\n      this.workspaceStore.insertMany(workspacesToAdd);\r\n    }\r\n  }\r\n\r\n  private getOrCreateWorkspace(layer: VectorLayer | ImageLayer): Workspace | undefined {\r\n    const workspace = this.workspaceStore.get(layer.id);\r\n    if (workspace !== undefined) {\r\n      return;\r\n    }\r\n    if (layer.dataSource instanceof WFSDataSource) {\r\n      return this.wfsWorkspaceService.createWorkspace(layer as VectorLayer, this.map);\r\n    } else if (layer.dataSource instanceof WMSDataSource) {\r\n      return this.wmsWorkspaceService.createWorkspace(layer as ImageLayer, this.map);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  private layerIsEditable(layer: Layer): boolean {\r\n    const dataSource = layer.dataSource;\r\n    if (dataSource instanceof WFSDataSource) {\r\n      return true;\r\n    }\r\n\r\n    if (dataSource instanceof WMSDataSource) {\r\n      const dataSourceOptions = (dataSource.options ||\r\n        {}) as OgcFilterableDataSourceOptions;\r\n      return (\r\n        dataSourceOptions.ogcFilters && dataSourceOptions.ogcFilters.enabled\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { WorkspaceSelectorDirective } from './workspace-selector.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n   WorkspaceSelectorDirective\r\n  ],\r\n  declarations: [\r\n    WorkspaceSelectorDirective\r\n  ]\r\n})\r\nexport class IgoWorkspaceSelectorModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IgoWidgetModule } from '@igo2/common';\r\n\r\nimport { provideOgcFilterWidget } from './widgets/widgets';\r\n\r\nimport { IgoOgcFilterModule } from './widgets/ogc-filter/ogc-filter.module';\r\nimport { IgoWorkspaceSelectorModule } from './workspace-selector/workspace-selector.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetModule,\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  exports: [\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    provideOgcFilterWidget()\r\n  ]\r\n})\r\nexport class IgoGeoWorkspaceModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoWktModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoWktModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { IgoCatalogModule } from './catalog/catalog.module';\r\nimport { IgoDataSourceModule } from './datasource/datasource.module';\r\nimport { IgoDownloadModule } from './download/download.module';\r\nimport { IgoFeatureModule } from './feature/feature.module';\r\nimport { IgoFilterModule } from './filter/filter.module';\r\nimport { IgoGeometryModule } from './geometry/geometry.module';\r\nimport { IgoImportExportModule } from './import-export/import-export.module';\r\nimport { IgoLayerModule } from './layer/layer.module';\r\nimport { IgoMapModule } from './map/map.module';\r\nimport { IgoMeasureModule } from './measure/measure.module';\r\nimport { IgoMetadataModule } from './metadata/metadata.module';\r\nimport { IgoOverlayModule } from './overlay/overlay.module';\r\nimport { IgoPrintModule } from './print/print.module';\r\nimport { IgoQueryModule } from './query/query.module';\r\nimport { IgoRoutingModule } from './routing/routing.module';\r\nimport { IgoSearchModule } from './search/search.module';\r\nimport { IgoToastModule } from './toast/toast.module';\r\nimport { IgoGeoWorkspaceModule } from './workspace/workspace.module';\r\nimport { IgoWktModule } from './wkt/wkt.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoCatalogModule,\r\n    IgoDataSourceModule,\r\n    IgoDownloadModule,\r\n    IgoFeatureModule,\r\n    IgoFilterModule,\r\n    IgoGeometryModule,\r\n    IgoImportExportModule,\r\n    IgoLayerModule,\r\n    IgoMapModule,\r\n    IgoMeasureModule,\r\n    IgoMetadataModule,\r\n    IgoOverlayModule,\r\n    IgoPrintModule,\r\n    IgoQueryModule,\r\n    IgoRoutingModule,\r\n    IgoSearchModule,\r\n    IgoToastModule,\r\n    IgoGeoWorkspaceModule,\r\n    IgoWktModule\r\n  ]\r\n})\r\nexport class IgoGeoModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoGeoModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\n\r\nimport { LAYER, AnyLayerOptions, LayerOptions } from '../../../layer';\r\nimport { QueryableDataSourceOptions, QueryFormat } from '../../../query';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { TextSearchOptions } from './source.interfaces';\r\nimport { ILayerSearchSourceOptions, ILayerData, ILayerResponse } from './ilayer.interfaces';\r\n\r\n/**\r\n * ILayer search source\r\n */\r\n@Injectable()\r\nexport class ILayerSearchSource extends SearchSource implements TextSearch {\r\n\r\n  static id = 'ilayer';\r\n  static type = LAYER;\r\n\r\n  get title(): string {\r\n    return this.languageService.translate.instant(this.options.title);\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: ILayerSearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return ILayerSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): ILayerSearchSourceOptions {\r\n    return {\r\n      title: 'igo.geo.search.dataSources.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/layers/search'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a layer by name or keyword\r\n   * @param term Layer name or keyword\r\n   * @returns Observable of <SearchResult<LayerOptions>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<LayerOptions>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(\r\n        map((response: ILayerResponse) => this.extractResults(response))\r\n      );\r\n  }\r\n\r\n  private computeSearchRequestParams(term: string, options: TextSearchOptions): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign({\r\n        q: term\r\n      }, this.params, options.params || {})\r\n    });\r\n  }\r\n\r\n  private extractResults(response: ILayerResponse): SearchResult<LayerOptions>[] {\r\n    return response.items.map((data: ILayerData) => this.dataToResult(data));\r\n  }\r\n\r\n  private dataToResult(data: ILayerData): SearchResult<LayerOptions> {\r\n    const layerOptions = this.computeLayerOptions(data);\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: LAYER,\r\n        id: [this.getId(), data.id].join('.'),\r\n        title: data.source.title,\r\n        titleHtml: data.highlight.title,\r\n        icon: data.source.type === 'Layer' ? 'layers' : 'map'\r\n      },\r\n      data: layerOptions\r\n    };\r\n  }\r\n\r\n  private computeLayerOptions(data: ILayerData): AnyLayerOptions {\r\n    const url = data.source.url;\r\n    const queryParams: any = this.extractQueryParamsFromSourceUrl(url);\r\n    return {\r\n      title: data.source.title,\r\n      sourceOptions: {\r\n        crossOrigin: 'anonymous',\r\n        type: data.source.format,\r\n        url,\r\n        queryable: (data.source as QueryableDataSourceOptions).queryable,\r\n        queryFormat: queryParams.format,\r\n        queryHtmlTarget: queryParams.htmlTarget,\r\n        params: {\r\n          layers: data.source.name\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private extractQueryParamsFromSourceUrl(url: string): {format: QueryFormat; htmlTarget: string; } {\r\n    let queryFormat = QueryFormat.GML2;\r\n    let htmlTarget;\r\n    const formatOpt = (this.options as ILayerSearchSourceOptions).queryFormat;\r\n    if (formatOpt) {\r\n      for (const key of Object.keys(formatOpt)) {\r\n        const value = formatOpt[key];\r\n        if (value === '*') {\r\n          queryFormat = QueryFormat[key.toUpperCase()];\r\n          break;\r\n        }\r\n\r\n        const urls = (value as any as {urls: string[]}).urls;\r\n        if (Array.isArray(urls)) {\r\n          urls.forEach((urlOpt) => {\r\n            if (url.indexOf(urlOpt) !== -1) {\r\n              queryFormat = QueryFormat[key.toUpperCase()];\r\n            }\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (queryFormat === QueryFormat.HTML) {\r\n      htmlTarget = 'iframe';\r\n    }\r\n\r\n    return {\r\n      format: queryFormat,\r\n      htmlTarget\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { ILayerSearchSource } from './ilayer';\r\n\r\n/**\r\n * ILayer search source factory\r\n * @ignore\r\n */\r\nexport function ilayerSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService\r\n) {\r\n  return new ILayerSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${ILayerSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ILayer search source\r\n */\r\nexport function provideILayerSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ilayerSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, LanguageService, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FEATURE, Feature, FeatureGeometry } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\nimport { NominatimData } from './nominatim.interfaces';\r\n\r\n/**\r\n * Nominatim search source\r\n */\r\n@Injectable()\r\nexport class NominatimSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'nominatim';\r\n  static type = FEATURE;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return NominatimSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Nominatim (OSM)',\r\n      searchUrl: 'https://nominatim.openstreetmap.org/search'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a place by name\r\n   * @param term Place name\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response: NominatimData[]) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          q: term,\r\n          format: 'json'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: NominatimData[]): SearchResult<Feature>[] {\r\n    return response.map((data: NominatimData) => this.dataToResult(data));\r\n  }\r\n\r\n  private dataToResult(data: NominatimData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const geometry = this.computeGeometry(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), 'place', data.place_id].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.display_name,\r\n        icon: 'map-marker'\r\n      },\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.display_name\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: NominatimData): { [key: string]: any } {\r\n    return {\r\n      display_name: data.display_name,\r\n      place_id: data.place_id,\r\n      osm_type: data.osm_type,\r\n      class: data.class,\r\n      type: data.type\r\n    };\r\n  }\r\n\r\n  private computeGeometry(data: NominatimData): FeatureGeometry {\r\n    return {\r\n      type: 'Point',\r\n      coordinates: [parseFloat(data.lon), parseFloat(data.lat)]\r\n    };\r\n  }\r\n\r\n  private computeExtent(data: NominatimData): [number, number, number, number] {\r\n    return [\r\n      parseFloat(data.boundingbox[2]),\r\n      parseFloat(data.boundingbox[0]),\r\n      parseFloat(data.boundingbox[3]),\r\n      parseFloat(data.boundingbox[1])\r\n    ];\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { NominatimSearchSource } from './nominatim';\r\n\r\n/**\r\n * Nominatim search source factory\r\n * @ignore\r\n */\r\nexport function nominatimSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new NominatimSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${NominatimSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the Nominatim search source\r\n */\r\nexport function provideNominatimSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: nominatimSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  StoredQueriesData,\r\n  StoredQueriesResponse,\r\n  StoredQueriesReverseData,\r\n  StoredQueriesReverseResponse,\r\n  StoredQueriesSearchSourceOptions,\r\n  StoredQueriesFields,\r\n  StoredQueriesReverseSearchSourceOptions\r\n} from './storedqueries.interfaces';\r\n\r\nimport * as olformat from 'ol/format';\r\n\r\n/**\r\n * StoredQueries search source\r\n */\r\n@Injectable()\r\nexport class StoredQueriesSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'storedqueries';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesSearchSourceOptions ;\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err = 'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.fields) {\r\n      throw new Error('Stored Queries :You have to set \"fields\" into options. ex: fields: {\"name\": \"rtss\", \"defaultValue\": \"-99\"}');\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat = this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname = this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n\r\n    const storedQueryId = this.storedQueriesOptions.storedquery_id.toLowerCase();\r\n    if (storedQueryId.includes('getfeaturebyid') && this.storedQueriesOptions.outputformat.toLowerCase().includes('getfeaturebyid') ) {\r\n      let err = 'You must set a geojson format for your stored query. This is due to an openlayers issue)';\r\n      err += ' (wfs 1.1.0 & gml 3.1.1 limitation)';\r\n      throw new Error(err);\r\n    }\r\n\r\n    if (!this.storedQueriesOptions.fields) {\r\n      throw new Error('Stored Queries :You must set a fields definition for your stored query');\r\n    }\r\n\r\n    if (!(this.storedQueriesOptions.fields instanceof Array)) {\r\n      this.storedQueriesOptions.fields = [this.storedQueriesOptions.fields];\r\n    }\r\n\r\n    this.multipleFieldsQuery  = this.storedQueriesOptions.fields.length > 1 ? true : false;\r\n\r\n    this.storedQueriesOptions.fields.forEach((field, index) => {\r\n      if (this.multipleFieldsQuery && !field.splitPrefix && index !== 0) {\r\n        throw new Error('Stored Queries :You must set a field spliter into your field definition (optional for the first one!)');\r\n      }\r\n      if (!field.defaultValue) {\r\n        throw new Error('Stored Queries :You must set a field default value into your field definition');\r\n      }\r\n    });\r\n\r\n    this.storedQueriesOptions.resultTitle = this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries',\r\n      searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'\r\n    };\r\n  }\r\n\r\n  // URL CALL EXAMPLES:\r\n  //  GetFeatureById (mandatory storedquery for wfs server) (outputformat must be in geojson)\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=2.0.0&request=GetFeature&storedquery_id=urn:ogc:def:query:OGC-WFS::GetFeatureById&srsname=epsg:4326&outputformat=geojson&ID=a_num_route.132\r\n  //  Custom StoredQuery\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=rtss&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&rtss=0013801110000c&chainage=12\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const storedqueriesParams = this.termSplitter(term, this.storedQueriesOptions.fields );\r\n    const params = this.computeRequestParams(options || {}, storedqueriesParams);\r\n\r\n    if (new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)) {\r\n      return this.http\r\n      .get(this.searchUrl, { params, responseType: 'text' })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    } else {\r\n      return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    }\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private termSplitter(term: string, fields: StoredQueriesFields[]): {} {\r\n    const splittedTerm = {};\r\n    let remainingTerm = term;\r\n    let cnt = 0;\r\n\r\n    // Used to build the default values\r\n    fields.forEach(field => {\r\n      splittedTerm[field.name] = field.defaultValue;\r\n      const splitterRegex = new RegExp(field.splitPrefix + '(.+)', 'i');\r\n      if (splitterRegex.test(remainingTerm)) {\r\n        cnt = field.splitPrefix ? cnt += 1 : cnt;\r\n        remainingTerm = remainingTerm.split(splitterRegex)[1];\r\n      }\r\n\r\n    });\r\n    if (cnt === 0) {\r\n      splittedTerm[fields[0].name] = term;\r\n      return splittedTerm;\r\n    }\r\n    remainingTerm = term;\r\n    const localFields = [...fields].reverse();\r\n    localFields.forEach((field) => {\r\n      const splitterRegex = new RegExp(field.splitPrefix || '' + '(.+)', 'i');\r\n      if (remainingTerm || remainingTerm !== '') {\r\n        const values = remainingTerm.split(splitterRegex);\r\n        remainingTerm = values[0];\r\n        if (values[1]) {\r\n          splittedTerm[field.name] = values[1].trim();\r\n        }\r\n      }\r\n    });\r\n    return splittedTerm;\r\n  }\r\n\r\n  private computeRequestParams(options: TextSearchOptions, queryParams): HttpParams {\r\n    const wfsversion = this.storedQueriesOptions.storedquery_id.toLowerCase().includes('getfeaturebyid') ? '2.0.0' : '1.1.0';\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'wfs',\r\n          version: wfsversion,\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat\r\n        },\r\n        queryParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: StoredQueriesResponse): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle] ? this.storedQueriesOptions.resultTitle : this.resultTitle;\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        // extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.title,\r\n        titleHtml: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: StoredQueriesData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source\r\n */\r\n\r\n // EXAMPLE CALLS\r\n // tslint:disable-next-line:max-line-length\r\n // https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=lim_adm&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&long=-71.292469&lat=46.748107\r\n //\r\n\r\n@Injectable()\r\nexport class StoredQueriesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'storedqueriesreverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesReverseSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesReverseSearchSourceOptions ;\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err = 'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.longField) {\r\n      throw new Error('Stored Queries :You have to set \"longField\" to map the longitude coordinate to the query params.');\r\n    }\r\n    if (!this.storedQueriesOptions.latField) {\r\n      throw new Error('Stored Queries :You have to set \"latField\" to map the latitude coordinate to the query params.');\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat = this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname = this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n    this.storedQueriesOptions.resultTitle = this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries (reverse)',\r\n      searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n\r\n    if (new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)) {\r\n      return this.http\r\n      .get(this.searchUrl, { params, responseType: 'text' })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    } else {\r\n      return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    }\r\n\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    const longLatParams =  {};\r\n    longLatParams[this.storedQueriesOptions.longField] = lonLat[0];\r\n    longLatParams[this.storedQueriesOptions.latField] = lonLat[1];\r\n\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'wfs',\r\n          version: '1.1.0',\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat,\r\n        },\r\n        longLatParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: StoredQueriesReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle] ? this.storedQueriesOptions.resultTitle : this.resultTitle;\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: StoredQueriesReverseData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return Object.assign(properties, { type: data.properties.doc_type });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  StoredQueriesSearchSource,\r\n  StoredQueriesReverseSearchSource\r\n} from './storedqueries';\r\n\r\n/**\r\n * StoredQueries search source factory\r\n * @ignore\r\n */\r\nexport function storedqueriesSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueries search source\r\n */\r\nexport function provideStoredQueriesSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source factory\r\n * @ignore\r\n */\r\n\r\nexport function storedqueriesReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesReverseSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueriesReverse search source\r\n */\r\nexport function provideStoredQueriesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","export enum RoutingFormat {\r\n  GeoJSON,\r\n  JSON\r\n}\r\nexport enum SourceRoutingType {\r\n  Route = 'Route',\r\n  Trip = 'Trip'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { ConfigService, Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingFormat, SourceRoutingType } from '../shared/routing.enum';\r\n\r\nimport { RoutingSource } from './routing-source';\r\nimport { RoutingSourceOptions } from './routing-source.interface';\r\n\r\n@Injectable()\r\nexport class OsrmRoutingSource extends RoutingSource {\r\n  get enabled(): boolean {\r\n    return this.options.enabled !== false;\r\n  }\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  static _name = 'OSRM QuÃ©bec';\r\n  private routingUrl =\r\n    'https://geoegl.msp.gouv.qc.ca/services/itineraire/route/v1/driving/';\r\n  private options: RoutingSourceOptions;\r\n\r\n  constructor(private http: HttpClient, private config: ConfigService) {\r\n    super();\r\n    this.options = this.config.getConfig('routingSources.osrm') || {};\r\n    this.routingUrl = this.options.url || this.routingUrl;\r\n  }\r\n\r\n  getName(): string {\r\n    return OsrmRoutingSource._name;\r\n  }\r\n\r\n  route(coordinates: [number, number][]): Observable<Routing[]> {\r\n    const routingParams = this.getRouteParams();\r\n    return this.http\r\n      .get<JSON[]>(this.routingUrl + coordinates.join(';'), {\r\n        params: routingParams\r\n      })\r\n      .pipe(map(res => this.extractRoutesData(res)));\r\n  }\r\n\r\n  private extractRoutesData(response): Routing[] {\r\n    const routeResponse = [];\r\n    response.routes.forEach(route => {\r\n      routeResponse.push(this.formatRoute(route, response.waypoints));\r\n    });\r\n    return routeResponse;\r\n  }\r\n\r\n  private getRouteParams(): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: {\r\n        overview: 'full',\r\n        steps: 'true',\r\n        geometries: 'geojson',\r\n        alternatives: 'true'\r\n      }\r\n    });\r\n  }\r\n\r\n  private formatRoute(roadNetworkRoute: any, waypoints: any): Routing {\r\n    const stepsUI = [];\r\n    roadNetworkRoute.legs.forEach(leg => {\r\n      leg.steps.forEach(step => {\r\n        stepsUI.push(step);\r\n      });\r\n    });\r\n    return {\r\n      id: uuid(),\r\n      title: roadNetworkRoute.legs[0].summary,\r\n      source: OsrmRoutingSource._name,\r\n      sourceType: SourceRoutingType.Route,\r\n      order: 1,\r\n      format: RoutingFormat.GeoJSON,\r\n      icon: 'directions',\r\n      projection: 'EPSG:4326',\r\n      waypoints,\r\n      distance: roadNetworkRoute.distance,\r\n      duration: roadNetworkRoute.duration,\r\n      geometry: roadNetworkRoute.geometry,\r\n      legs: roadNetworkRoute.legs,\r\n      steps: stepsUI,\r\n      weight: roadNetworkRoute.weight,\r\n      weight_name: roadNetworkRoute.weight_name\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { RoutingSource } from './routing-source';\r\nimport { OsrmRoutingSource } from './osrm-routing-source';\r\n\r\nexport function osrmRoutingSourcesFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new OsrmRoutingSource(http, config);\r\n}\r\n\r\nexport function provideOsrmRoutingSource() {\r\n  return {\r\n    provide: RoutingSource,\r\n    useFactory: osrmRoutingSourcesFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n"]}