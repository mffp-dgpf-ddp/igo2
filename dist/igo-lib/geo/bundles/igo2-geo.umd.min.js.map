{"version":3,"sources":["ng://@igo2/geo/lib/metadata/shared/metadata.service.ts","ng://@igo2/geo/lib/metadata/metadata-button/metadata-button.component.ts","ng://@igo2/geo/lib/metadata/metadata.module.ts","node_modules/tslib/tslib.es6.js","ng://@igo2/geo/lib/datasource/shared/datasources/data.service.ts","ng://@igo2/geo/lib/datasource/utils/id-generator.ts","ng://@igo2/geo/lib/datasource/shared/datasources/datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/feature-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/osm-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/xyz-datasource.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-wfs.utils.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs.service.ts","ng://@igo2/geo/lib/query/shared/query.enums.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-datasource.ts","ng://@igo2/geo/lib/datasource/utils/tilegrid.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wmts-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/carto-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/arcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/tilearcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/websocket-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/mvt-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/cluster-datasource.ts","ng://@igo2/geo/lib/feature/shared/feature.enums.ts","ng://@igo2/geo/lib/layer/shared/layer.enums.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.interface.ts","ng://@igo2/geo/lib/layer/utils/image-watcher.ts","ng://@igo2/geo/lib/layer/utils/tile-watcher.ts","ng://@igo2/geo/lib/layer/utils/vector-watcher.ts","ng://@igo2/geo/lib/layer/utils/legend.ts","ng://@igo2/geo/lib/layer/shared/layers/image-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/tile-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vector-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vectortile-layer.ts","ng://@igo2/geo/lib/layer/shared/style.service.ts","ng://@igo2/geo/lib/query/shared/query.utils.ts","ng://@igo2/geo/lib/layer/layer-item/layer-item.component.ts","ng://@igo2/geo/lib/layer/layer-legend/layer-legend.component.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.enum.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.component.ts","ng://@igo2/geo/lib/map/shared/map.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list-binding.directive.ts","ng://@igo2/geo/lib/feature/shared/strategies/strategy.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading-layer.ts","ng://@igo2/geo/lib/feature/shared/store.ts","ng://@igo2/geo/lib/feature/shared/strategies/selection.ts","ng://@igo2/geo/lib/feature/shared/feature.utils.ts","ng://@igo2/geo/lib/overlay/shared/overlay.utils.ts","ng://@igo2/geo/lib/overlay/shared/overlay.ts","ng://@igo2/geo/lib/map/utils/layer-watcher.ts","ng://@igo2/geo/lib/map/shared/map.enums.ts","ng://@igo2/geo/lib/map/shared/map.utils.ts","ng://@igo2/geo/lib/map/shared/controllers/controller.ts","ng://@igo2/geo/lib/map/shared/controllers/view.ts","ng://@igo2/geo/lib/map/shared/map.ts","ng://@igo2/geo/lib/map/map-browser/map-browser.component.ts","ng://@igo2/geo/lib/map/shared/mapOffline.directive.ts","ng://@igo2/geo/lib/map/shared/projection.service.ts","ng://@igo2/geo/lib/map/zoom-button/zoom-button.component.ts","ng://@igo2/geo/lib/map/geolocate-button/geolocate-button.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.animation.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/mini-basemap.component.ts","ng://@igo2/geo/lib/map/rotation-button/rotation-button.component.ts","ng://@igo2/geo/lib/datasource/utils/esri-style-generator.ts","ng://@igo2/geo/lib/datasource/shared/capabilities.service.ts","ng://@igo2/geo/lib/datasource/shared/datasource.service.ts","ng://@igo2/geo/lib/layer/shared/layer.service.ts","ng://@igo2/geo/lib/catalog/shared/catalog.enum.ts","ng://@igo2/geo/lib/query/shared/query.service.ts","ng://@igo2/geo/lib/query/shared/query.directive.ts","ng://@igo2/geo/lib/search/shared/sources/source.ts","ng://@igo2/geo/lib/query/shared/query-search-source.ts","ng://@igo2/geo/lib/catalog/shared/catalog.service.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-layer.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-group.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.module.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library-item.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.module.ts","ng://@igo2/geo/lib/catalog/catalog.module.ts","ng://@igo2/geo/lib/datasource/datasource.module.ts","ng://@igo2/geo/lib/filter/shared/filterable-datasource.pipe.ts","ng://@igo2/geo/lib/filter/shared/time-filter.service.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.enum.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.service.ts","ng://@igo2/geo/lib/download/shared/download.service.ts","ng://@igo2/geo/lib/download/download-button/download-button.component.ts","ng://@igo2/geo/lib/download/download.module.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.component.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.module.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.component.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.module.ts","ng://@igo2/geo/lib/feature/feature.module.ts","ng://@igo2/geo/lib/filter/time-filter-form/time-filter-form.component.ts","ng://@igo2/geo/lib/filter/time-filter-item/time-filter-item.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list-binding.directive.ts","ng://@igo2/geo/lib/wkt/shared/wkt.service.ts","ng://@igo2/geo/lib/filter/ogc-filter-form/ogc-filter-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-form/ogc-filterable-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-item/ogc-filterable-item.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list-binding.directive.ts","ng://@igo2/geo/lib/filter/ogc-filter-button/ogc-filter-button.component.ts","ng://@igo2/geo/lib/filter/ogc-filter-toggle-button/ogc-filter-toggle-button.component.ts","ng://@igo2/geo/lib/filter/filter.module.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.component.ts","ng://@igo2/geo/lib/measure/shared/measure.enum.ts","ng://@igo2/geo/lib/measure/shared/measure.utils.ts","ng://@igo2/geo/lib/geometry/shared/geometry.errors.ts","ng://@igo2/geo/lib/geometry/shared/geometry.utils.ts","ng://@igo2/geo/lib/geometry/shared/controls/draw.ts","ng://@igo2/geo/lib/geometry/shared/controls/modify.ts","ng://@igo2/geo/lib/geometry/shared/controls/slice.ts","ng://@igo2/geo/lib/measure/measurer/measurer-dialog.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.component.ts","ng://@igo2/geo/lib/measure/measurer/measure-format.pipe.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field-input.component.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.module.ts","ng://@igo2/geo/lib/geometry/geometry.module.ts","ng://@igo2/geo/lib/import-export/shared/export.errors.ts","ng://@igo2/geo/lib/import-export/shared/export.utils.ts","ng://@igo2/geo/lib/import-export/shared/export.type.ts","ng://@igo2/geo/lib/import-export/shared/export.service.ts","ng://@igo2/geo/lib/import-export/shared/import.errors.ts","ng://@igo2/geo/lib/import-export/shared/import.utils.ts","ng://@igo2/geo/lib/import-export/shared/import.service.ts","ng://@igo2/geo/lib/import-export/import-export/import-export.component.ts","ng://@igo2/geo/lib/import-export/shared/drop-geo-file.directive.ts","ng://@igo2/geo/lib/import-export/import-export.module.ts","ng://@igo2/geo/lib/layer/layer.module.ts","ng://@igo2/geo/lib/map/map.module.ts","ng://@igo2/geo/lib/measure/measurer/measurer-item.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.module.ts","ng://@igo2/geo/lib/measure/measure.module.ts","ng://@igo2/geo/lib/overlay/shared/overlay.enum.ts","ng://@igo2/geo/lib/overlay/shared/overlay.service.ts","ng://@igo2/geo/lib/overlay/shared/overlay.directive.ts","ng://@igo2/geo/lib/overlay/overlay.module.ts","ng://@igo2/geo/lib/print/shared/print.service.ts","ng://@igo2/geo/lib/print/print/print.component.ts","ng://@igo2/geo/lib/print/shared/print.type.ts","ng://@igo2/geo/lib/print/print-form/print-form.component.ts","ng://@igo2/geo/lib/print/print.module.ts","ng://@igo2/geo/lib/query/shared/query-search-source.providers.ts","ng://@igo2/geo/lib/query/query.module.ts","ng://@igo2/geo/lib/search/shared/search-source.service.ts","ng://@igo2/geo/lib/search/shared/search.utils.ts","ng://@igo2/geo/lib/search/shared/search.service.ts","ng://@igo2/geo/lib/routing/routing-sources/routing-source.ts","ng://@igo2/geo/lib/routing/shared/routing-source.service.ts","ng://@igo2/geo/lib/routing/shared/routing.service.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form.service.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form.component.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form-binding.directive.ts","ng://@igo2/geo/lib/routing/routing.module.ts","ng://@igo2/geo/lib/search/shared/search-source-service.providers.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.providers.ts","ng://@igo2/geo/lib/utils/googleLinks.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.providers.ts","ng://@igo2/geo/lib/search/shared/search.enums.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.component.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.module.ts","ng://@igo2/geo/lib/search/search-settings/search-settings.component.ts","ng://@igo2/geo/lib/search/search-settings/search-settings.module.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.component.ts","ng://@igo2/geo/lib/search/search-bar/search-url-param.directive.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.module.ts","ng://@igo2/geo/lib/search/search-results/search-results.component.ts","ng://@igo2/geo/lib/search/search-results/search-results-item.component.ts","ng://@igo2/geo/lib/search/search-results/search-results.module.ts","ng://@igo2/geo/lib/search/search.module.ts","ng://@igo2/geo/lib/toast/toast.component.ts","ng://@igo2/geo/lib/toast/toast.module.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.component.ts","ng://@igo2/geo/lib/workspace/widgets/widgets.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.module.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.service.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.service.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.directive.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.module.ts","ng://@igo2/geo/lib/workspace/workspace.module.ts","ng://@igo2/geo/lib/wkt/wkt.module.ts","ng://@igo2/geo/lib/geo.module.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.providers.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.providers.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.providers.ts","ng://@igo2/geo/lib/routing/shared/routing.enum.ts","ng://@igo2/geo/lib/routing/routing-sources/osrm-routing-source.ts","ng://@igo2/geo/lib/routing/routing-sources/routing-source.provider.ts"],"names":["MetadataService","prototype","open","metadata","extern","window","url","Injectable","args","providedIn","MetadataButtonComponent","metadataService","this","_color","Object","defineProperty","_layer","value","openMetadata","layer","options","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","IgoMetadataModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","MatIconModule","MatButtonModule","MatTooltipModule","IgoLanguageModule","exports","declarations","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadataKey","metadataValue","__values","o","m","Symbol","iterator","next","done","__read","e","ar","push","error","__spread","concat","generateIdFromSourceOptions","wms","generateWMSIdFromSourceOptions","wmts","generateWMTSIdFromSourceOptions","xyz","generateXYZIdFromSourceOptions","feature","generateFeatureIdFromSourceOptions","osm","_options","type","generateId","layers","params","chain","Md5","hashStr","uuid","DataSource","dataService","id","ol","createOlSource","getLegend","scale","legend","FeatureDataSource","tslib_1.__extends","sourceOptions","format","getSourceFormatFromOptions","olSourceVector","olFormatCls","formatType","olformat","undefined","Error","olformat.GeoJSON","formatOptions","onUnwatch","OSMDataSource","olSourceOSM","XYZDataSource","olSourceXYZ","OgcFilterWriter","filterSequence","operators","PropertyIsEqualTo","spatial","fieldRestrict","PropertyIsNotEqualTo","PropertyIsLike","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsBetween","During","PropertyIsNull","Intersects","Within","Contains","defineOgcFiltersDefaultOptions","ogcFiltersOptions","fieldNameGeometry","srcType","ogcFiltersDefaultValue","enabled","editable","geometryName","advancedOgcFilters","pushButtons","buildFilter","filters","extent","proj","ourBboxFilter","enableBbox","test","JSON","stringify","olfilter.bbox","getCode","join","checkIgoFiltersProperties","wfsOptions","srsName","featureNS","featurePrefix","featureTypes","filter","olfilter.and","bundleFilter","outputFormat","query","olFormatWFS","writeGetFeature","XMLSerializer","serializeToString","split","filterObject","_this","logicalArray_1","forEach","element","createFilter","operator","logical","logicalArray","filterOptions","geometry","wfsPropertyName","propertyName","wfsPattern","pattern","wfsMatchCase","matchCase","wfsWildCard","wildCard","wfsSingleChar","singleChar","wfsEscapeChar","escapeChar","wfsLowerBoundary","lowerBoundary","wfsUpperBoundary","upperBoundary","wfsGeometryName","wfsExtent","wfsWktGeometry","wkt_geometry","wfsSrsName","wfsBegin","begin","wfsEnd","end","wfsExpression","expression","olFormatWKT","readGeometry","dataProjection","featureProjection","olfilter.between","olfilter.contains","olfilter.during","olfilter.equalTo","olfilter.greaterThan","olfilter.greaterThanOrEqualTo","olfilter.intersects","olfilter.isNull","olfilter.lessThan","olfilter.lessThanOrEqualTo","olfilter.like","replace","olfilter.notEqualTo","olfilter.within","olfilter.or","olfilter.not","defineInterfaceFilterSequence","level","addInterfaceFilter","igoOgcFilterObject","parentLogical","f","active","filterid","igoSpatialSelector","filterArray","addFilterProperties","status","rebuiltIgoOgcFilterObjectFromSequence","sequence","nextElement_1","lastProcessedFilter_1","lastParentLogical_1","logicalArray_2","uiFilter","index","indexOf","console","log","handleOgcFiltersAppliedValue","ogcFilters","filterQueryStringPushButton","filterQueryStringAdvancedFilters","pushButtonBundle","conditions_1","map","buttonBundle","bundleCondition","ogcPushButtons","ogcpb","enabledPb","igoFilters","filterQueryString","formatProcessedOgcFilter","processedFilter","layersOrTypenames","appliedFilter","layerOrTypenames","defaultEpsg","defaultMaxFeatures","defaultWfsVersion","defaultFieldNameGeometry","gmlRegex","RegExp","jsonRegex","formatWFSQueryString","wfsDataSourceOptions","count","epsg","properties","versionWfs200","urlWfs","paramsWFS","effectiveCount","epsgCode","version","paramMaxFeatures","cnt","maxFeatures","srs","valueReference","sourceFields","fieldsNames_1","sourcefield","name","getFeature","getpropertyvalue","checkWfsParams","WFSDataSource","wfsService","_super","ogcFilterWriter","getSourceFieldsFromWFS","getFormatFromOptions","overlaps","resolution","buildUrl","strategy","OlLoadingStrategy.bbox","queryStringValues","filterOrBox","filterOrPush","prefix","xmlFilter","baseUrl","find","download","dynamicUrl","toLowerCase","OlFormat.GeoJSON","OlFormat.WFS","WFSService","http","getData","datasource","defineFieldAndValuefromWFS","subscribe","getfeatureSourceField","alias","values","sf","wfsGetFeature","nb","get","responseType","Observable","fieldList","fieldListWoGeom","fieldListWoGeomStr","olFormats","olformat.WFS","oneFeature","features","readFeatures","getKeys","field","getGeometryName","match","manyFeatures","mfeatures","built_properties_value","complete","kv","getProperties","boundedBy","property","fieldType","every","featureProperties","v","HttpClient","DataService","GML2","GML3","GEOJSON","ESRIJSON","TEXT","HTML","HTMLGML2","IFRAME","BLANK","WMSDataSource","sourceParams","VERSION","SRS","INFO_FORMAT","info_format","refreshIntervalSec","setInterval","refresh","wfsCheckup","ObjectUtils","mergeDeep","buildDynamicDownloadUrlFromParamsWFS","sourceField","initOgcFilters","updateParams","queryTitle","queryHtmlTarget","QueryHtmlTarget","igoRefresh","Math","random","asWFSDataSourceOptions","olSourceImageWMS","title","createDefaultTileGrid","projectionExtent","olproj.get","getExtent","size","extentGetWidth","resolutions","matrixIds","z","pow","olTileGridWMTS","origin","extentGetTopLeft","WMTSDataSource","tileGrid","olSourceWMTS","CartoDataSource","crossOrigin","olSourceCarto","htmlString","config","items","visible","html","layerOptions","types_1","tslib_1.__values","types_1_1","oneType","cartocss","includes","pop","color","substr","colors","data","j","layer_name","ArcGISRestDataSource","esrijsonFormat","olFormatEsriJSON","attributions","encodeURIComponent","timeFilter","time","timeExtent","customParams","bind","olloadingstrategy.bbox","legendInfo","parseInt","lyr","layerName","_b","_c","lyrLegend","layerId","label","TileArcGISRestDataSource","olSourceTileArcGISRest","WebSocketDataSource","createWebSocket","ws","WebSocket","onmessage","onMessage","onclose","onClose","onerror","onError","onopen","onOpen","event","featureAdded","readFeature","featureToRemove","getFeatureById","getId","removeFeature","addFeature","clear","close","MVTDataSource","mvtFormat","olFormatMVT","featureClass","olSourceVectorTile","ClusterDataSource","source","olSourceCluster","FEATURE","None","Move","Zoom","Default","LAYER","Layer","dataSource","createOlLayer","zIndex","baseLayer","opacity","set","getZIndex","setZIndex","visibility","setVisible","setOpacity","viewController","getResolution","minResolution","getMinResolution","maxResolution","getMaxResolution","showInLayerList","setMap","TITLE","ABSTRACT","CUSTOM","ImageWatcher","loaded","loading","watch","on","handleLoadStart","handleLoadEnd","unwatch","un","image","__watchers__","SubjectStatus","Working","watcherIndex","splice","Done","Watcher","TileWatcher","tile","VectorWatcher","getLayersLegends","legends","newContext","document","createElement","getContext","font","heightPos","layers_1","layers_1_1","legendUrls","legendUrl","legendImage","Image","src","onload","fillText","drawImage","height","legendUrls_1","legendUrls_1_1","ImageLayer","watcher","status$","olOptions","olLayerImage","token","getSource","setImageLoadFunction","customLoader","unsubscribe","xhr","XMLHttpRequest","setRequestHeader","arrayBufferView","Uint8Array","response","blob","Blob","imageUrl","URL","createObjectURL","getImage","send","TileLayer","olLayerTile","VectorLayer","browsable","exportable","animation","flash","olLayerVector","start","Date","getTime","listenerKey","vectorContext","frameState","flashGeom","getGeometry","clone","elapsed","elapsedRatio","duration","easeOut","newColor","ColorAsArray","styleClone","getStyleFunction","getType","radius","getRadius","setRadius","getStroke","setColor","setWidth","getWidth","getFill","setStyle","drawGeometry","unByKey","render","stopAnimation","VectorTileLayer","olLayerVectorTile","StyleService","createStyle","parseStyle","styleOptions","olCls","getOlCls","keys","_key","olKey","getOlKey","olstyle","charAt","toUpperCase","slice","olstyle.RegularShape","createStyleByAttribute","styleByAttribute","attribute","stroke","width","fill","icon","baseStyle","olstyle.Style","olstyle.Icon","olstyle.Circle","olstyle.Stroke","olstyle.Fill","getStyle","text","olstyle.Text","createClusterStyle","clusterParam","style","range","clusterRange","clusterIcon","clusterScale","toString","layerIsQueryable","queryable","olLayerIsQueryable","olLayer","LayerItemComponent","cdRef","showLegend$","BehaviorSubject","inResolutionRange$","queryBadgeHidden$","toggleLegendOnVisibilityChange","expandLegendIfVisible","updateLegendOnResolutionChange","orderable","queryBadge","removable","ngOnInit","legendCollapsed","collapsed","toggleLegend","updateQueryBadge","resolution$","resolution$$","onResolutionChange","tooltipText","computeTooltip","ngOnDestroy","toggleVisibility","tooltip","layerTooltip","layerMetadata","TooltipType","abstract","inResolutionRange","isInResolutionsRange","hidden","ChangeDetectorRef","LayerLegendComponent","capabilitiesService","legendItems$","updateLegend","computeItemTitle","layerLegend","of","localLayerOptions","parse","getWMSOptions","pipe","wmsDataSourceOptions","_layerOptionsFromCapabilities","getScale","legendItems","CapabilitiesService","always","never","default","LayerListService","sortedAlpha","onlyVisible","onlyInRange","keywordInitialized","sortedAlphaInitialized","onlyVisibleInitialized","onlyInRangeInitialized","LayerListComponent","layerListService","hasLayerNotVisible","hasLayerOutOfRange","thresholdToFilterAndSort","layers$","change$","ReplaySubject","showToolbar$","placeholder","floatLabel","layerFilterAndSortOptions","excludeBaseLayers","expandLegendOfVisibleLayers","_layers","setLayers","keyword","change$$","debounce","EMPTY","timer","computeShowToolbar","computeLayers","initLayerFilterAndSortOptions","toggleOnlyVisible","toggleOnlyInRange","toggleSort","sortAlpha","clearKeyword","layersOut","filterLayers","sortLayersByTitle","sortLayersByZindex","showToolbar","LayerListControlsEnum","keepLayerIds","dataSourceOptions","layerKeywords","keywordList","kw","normalize","localKeyword","layerTitle","dataSourceType","keywordRegex_1","keywordInList","sort","layer1","layer2","a","computeOrderable","toolbarThreshold","l","ContentChild","MapService","getMap","LayerListBindingDirective","component","mapService","route","layers$$","ngAfterViewInit","initRoutes","llcKKey","llcAKey","llcVKey","queryParams","keywordFromUrl","sortedAplhaFromUrl","onlyVisibleFromUrl","onlyInRangeFromUrl","Directive","Self","RouteService","Optional","FeatureStoreStrategy","stores","isActive","activate","doDeactivate","doActivate","deactivate","bindStore","store","unbindStore","FeatureStoreLoadingStrategy","stores$$","Map","watchStore","unwatchStore","unwatchAll","has","subscription","view","all$","onFeaturesChange","delete","from","entries","clearLayer","setLayerFeatures","selectMotion","viewScale","areaRatio","getFeatureId","motion","pristine","FeatureMotion","FeatureStoreLoadingLayerStrategy","onSourceChanges","olFeatures","getFeatures","setStoreOlFeatures","FeatureStore","entities","strategies","bindLayer","addStrategy","_strategy","removeStrategy","getStrategyOfType","activateStrategyOfType","deactivateStrategyOfType","getEntityId","checkLayer","featureToOl","projection","setLayerOlFeatures","olFeature","featureFromOl","load","olFeaturesMap","olFeaturesToRemove","forEachFeature","newOlFeature","olFeaturesToAddIds","olFeaturesToAdd","removeOlFeaturesFromLayer","addOlFeaturesToLayer","moveToOlFeatures","addFeatures","EntityStore","OlDragSelectInteraction","OlDragBoxInteraction","FeatureStoreSelectionStrategy","overlayStore","createOverlayStore","unselectAll","state","updateAll","selected","addOverlayLayer","listenToMapClick","dragBox","addDragBoxInteraction","watchAll","unlistenToMapClick","removeDragBoxInteraction","removeOverlayLayer","stores$","stateView","manyBy$","record","records","entity","combineLatest","debounceTime","skip","reduce","onSelectFromStore","mapClickListener","onMapClick","listener","exclusive","ctrlKeyDown","reverse","getFeaturesAtPixel","pixel","hitTolerance","layerFilter","onSelectFromMap","olDragSelectInteraction","olInteractions","getInteractions","getArray","olInteractions_1","olInteractions_1_1","olInteraction","condition","addInteraction","olDragSelectInteractionEndKey","onDragBoxEnd","removeInteraction","mapBrowserEvent","acc","olSource","getFeaturesInExtent","overlayFeaturesKeys","featuresKeys","getKey","doMotion","groupedFeatures","groupFeaturesByStore","unselectAllFeaturesFromStore","selectFeaturesFromStore","reverseMany","updateMany","overlayLayer","createOverlayLayer","addLayer","removeLayer","projectionOut","OlFormatGeoJSON","setId","getEntityTitle","mapTitle","getEntityProperty","getEntityRevision","projectionIn","olFormat","startsWith","writeGeometryObject","meta","revision","getRevision","computeOlFeatureExtent","olExtent","olextent.createEmpty","olFeatureExtent","olFeatureProjection","olproj.transformExtent","olGeometry","computeOlFeaturesExtent","featureExtent","olextent.extend","scaleExtent","_a","olextent","getSize","featuresAreOutOfView","featuresExtent","mapExtent","viewExtent","x","olextent.containsExtent","featuresAreTooDeepInView","mapExtentArea","olextent.getArea","zoomToExtent","moveToExtent","tryBindStoreLayer","tryAddLoadingStrategy","tryAddSelectionStrategy","defaultStyle","markerStyle","overlayDataSource","overflow","createOverlayMarkerStyle","geometryType","getText","setText","iconColor","color$$1","imgSize","anchor","Overlay","setFeatures","addOlFeatures","addOlFeature","LayerWatcher","subscriptions","unwatchLayer","watchLayer","layer$$","distinctUntilChanged","status_1","Waiting","stringToLonLat","str","mapProjection","lonLat","coordStr","negativeLon","degreesLon","minutesLon","secondsLon","directionLon","decimalLon","negativeLat","degreesLat","minutesLat","secondsLat","directionLat","decimalLat","timeZone","conf","lon","lat","projectionStr","projectionRegex","lonlatCoord","lonLatPattern","lonLatRegex","dmsCoord","dmsCoordPattern","dmsRegex","patternUtmMtm","utmMtmRegex","ddCoord","patternDd","ddRegex","dmdCoord","patternDmd","dmdRegex","patternBELL","bellRegex","mmCoord","mmPattern","mmRegex","toLocaleUpperCase","parseFloat","convertDMSToDD","_d","_e","proj4","toLocaleLowerCase","_f","_g","_h","message","_j","olproj.transform","degrees","minutes","seconds","direction","dd","viewStatesAreEqual","state1","state2","zoom","trunc","center","formatScale","round","getResolutionFromScale","dpi","getScaleFromResolution","unit","olproj.METERS_PER_UNIT","originalEvent","altKey","MAC","metaKey","ctrlKey","shiftKey","MapController","observerKeys","getOlMap","olMap","setOlMap","teardownObservers","MapViewController","state$","extent$","Subject","states","stateIndex","stateHistory","getView","setupObservers","onMoveEnd","extent$$","setExtent","action","getOlProjection","olView","getProjection","getCenter","calculateExtent","getUnits","getZoom","zoomIn","zoomTo","zoomOut","animate","easing","oleasing.easeOut","MapViewAction","getRotation","resetRotation","rotation","hasPreviousState","hasNextState","previousState","setStateIndex","nextState","clearStateHistory","setInitialState","fit","maxZoom","setState","IgoMap","geolocation$","defaultOptions","controls","attribution","layerWatcher","olproj4.register","init","attributionOpt","olControlAttribution","scaleLine","scaleLineOpt","olControlScaleLine","interactions","altShiftDragRotate","doubleClickZoom","keyboard","mouseWheelZoom","shiftDragZoom","dragPan","pinchRotate","pinchZoom","olinteraction.defaults","setView","overlay","setTarget","updateView","currentView","viewOptions","unsubscribeGeolocate","olproj.fromLonLat","setCenter","geolocate","changeBaseLayer","getBaseLayers","getLayerById","getLayerByAlias","addLayers","addedLayers","doAddLayer","removeLayers","newLayers","layersToRemove","getLayerIndex","doRemoveLayer","removeAllLayers","raiseLayer","moveLayer","lowerLayer","to","layerTo","zIndexTo","zIndexFrom","existingLayer","offset","sortLayersByZIndex","findIndex","track","first","geolocation$$","geolocation","getTracking","startGeolocation","getAccuracy","getAccuracyGeometry","geolocationFeature","coordinates","getPosition","setZoom","stopGeolocation","setTracking","olGeolocation","tracking","evt","MapBrowserComponent","activityService","_view","status$$","handleStatusChange","unregister","activityId","register","ActivityService","MapOfflineDirective","networkService","currentState","changeLayer","pathOffline","connection","excludeAttributeOffline","excludeAttributeBackUp","excludeAttribute","setUrl","NetworkService","ProjectionService","getConfig","registerProjection","defs","code","def","ConfigService","ZoomButtonComponent","GeolocateButtonComponent","_map","baseLayersSwitcherSlideInOut","trigger","transition","BaseLayersSwitcherComponent","mediaService","_baseLayers","expand","showButton","media$","Media","Mobile","useStaticIcon","_useStaticIcon","arrayLayers","collapseOrExpand","baseLayers","mapResolution","bl","blHidden","animations","MediaService","MiniBaseMapComponent","layerService","basemap","handleMoveEnd","_baseLayer","handleBaseLayerChanged","_disabled","_display","disabled","baselayer","createLayer","LayerService","RotationButtonComponent","_showIfNoRotation","rotationStyle","radians","transform","EsriStyleGenerator","_converters","esriPMS","_convertEsriPMS","esriSFS","_convertEsriSFS","esriSLS","_convertEsriSLS","esriSMS","_convertEsriSMS","esriTS","_convertEsriTS","_renderers","uniqueValue","_renderUniqueValue","simple","_renderSimple","classBreaks","_renderClassBreaks","_convertPointToPixel","point","_transformColor","_getResolutionForScale","units","mpu","symbol","_transformAngle","angle","weight","family","textBaseline","verticalAlignment","textAlign","horizontalAlignment","offsetX","xoffset","offsetY","yoffset","contentType","imageData","outline","_convertOutline","lineDash","ol3Rad","PI","points","radius2","_convertLabelingInfo","labelingInfo","mapUnits","styles","ii","labelExpression","maxScale","minScale","renderer","defaultSymbol","classes","classBreakInfos","classBreakInfo","min","classMinValue","minValue","classMaxValue","max","field1","infos","uniqueValueInfos","me","hash","info","generateStyle","layerInfo","drawingInfo","styleFunctions","drawingInfoStyle","labelingInfoStyleFunctions","result","capabilitiesStore","parsers","WMSCapabilities","WMTSCapabilities","baseOptions","getCapabilities","capabilities","parseWMSOptions","getWMTSOptions","parseWMTSOptions","getCartoOptions","account","mapId","jsonp","cartoOptions","parseCartoOptions","getArcgisOptions","arcgisOptions","res","catchError","err","forkJoin","parseArcgisOptions","getTileArcgisOptions","parseTileArcgisOptions","service","HttpParams","fromObject","request","read","findDataSourceInCapabilities","Capability","DataURL","Abstract","KeywordList","getTimeFilter","timeFilterable","removeUndefined","Title","MaxScaleDenominator","Infinity","MinScaleDenominator","OnlineResource","optionsFromCapabilities","layer_definition","styleGenerator","olAttribution","copyrightText","timeInfo","setTime","toUTCString","layerArray","layer_1","isArray","Name","dimension","Dimension","minMaxDim","step","tslib_1.__decorate","Cacheable","DataSourceService","wfsDataSourceService","datasources$","createAsyncDataSource","context","createOSMDataSource","createFeatureDataSource","createWFSDataSource","createWMSDataSource","createWMTSDataSource","createXYZDataSource","createCartoDataSource","createArcGISRestDataSource","createWebSocketDataSource","createMVTDataSource","createTileArcGISRestDataSource","createClusterDataSource","styleService","dataSourceService","tokenKey","createTileLayer","createVectorLayer","createImageLayer","createVectorTileLayer","createAsyncLayer","localStorage","getItem","serviceStyle_1","serviceStyle_2","layerOptionsOl","serviceStyle_3","Group","QueryService","queryEnabled","queryLayer","getQueryUrl","queryFormat","QueryFormat","urlGml","mergeMap","gmlRes","imposedGeom","mergeGML","extractData","parser","olFormatGML2","olformat.WMSGetFeatureInfo","pts","firstFeatureType","olmline","olgeom.MultiLineString","ptsArray","olmpoly","olgeom.MultiPolygon","nbFeatures","bbox","getQueryParams","bboxExtent","olmpts","featureGeometryCoordinates","getCoordinates","featureGeometryType","olgeom.Point","appendLineString","olgeom.LineString","appendPolygon","olgeom.Polygon","convexHull","cross","lower","points_1","points_1_1","upper","imposedGeometry","allowedFieldsAndAlias","queryDataSource","extractGML3Data","extractGeoJSONData","extractEsriJSONData","extractTextData","extractHtmlData","extractGML2Data","sourceTitle","order","featureToResult","olFormatGML3","warn","htmlTarget","searchParams","bboxRaw","xPosition","yPosition","y","crs","threshold","abs","clickx","clicky","clickx1","clicky1","wktPoly","olformat.WKT","bodyTagStart","bodyTagEnd","lastIndexOf","body","queryString","pairs","pair","decodeURIComponent","featureOL","featureGeometry","shape","SHAPE","the_geom","forceGML2","wmsDatasource","WMSGetFeatureInfoOptions","getMimeInfoFormat","QUERY_LAYERS","FEATURE_COUNT","feature_count","getGetFeatureInfoUrl","cartoDatasource","sql","meters","queryPrecision","tileArcGISRestDatasource","olextent.boundingExtent","olextent.buffer","mime","QueryDirective","queryService","queries$$","queryFeatures","queryFeaturesHitTolerance","waitForAllQueries","EventEmitter","cancelOngoingQueries","onMapEvent","queries$","doQueryFeatures","queryLayers","coordinate","zip","results","emit","query$","queryFeaturesCondition","sub","Output","SearchSource","getDefaultOptions","settings","setting","setParamFromSetting","available","searchUrl","confValue_1","hashtagValid","searchSourceSetting","hashtag","completeMatch","hashtagIsValid","re","substring","getSettingsValues","search","QuerySearchSource","Inject","CatalogService","languageService","loadCatalogs","contextConfig","catalogConfig","apiUrl","catalogsFromConfig","sources","observables$","baseLayersCatalog","translate","instant","catalogsFromApi$","loadCatalogItems","catalog","loadCatalogBaseLayerItems","loadCatalogWMTSLayerItems","loadCatalogWMSLayerItems","getCatalogBaseLayersOptions","layersOptions","CatalogItemType","getCatalogWMSCapabilities","includeRecursiveItems","getCatalogWMTSCapabilities","getWMTSItems","layerList","regexes","regFilters","catalogQueryParams","catalogSourceOptions","group","this_1","catalogTooltipType","retrieveTooltipType","layersQueryFormat","findCatalogInfoFormat","groupItem","configuredQueryFormat","retriveLayerInfoFormat","testLayerRegexes","baseSourceOptions","setCrossOriginAnonymous","Contents","Identifier","matrixSet","requestEncoding","item","regex","layerNameFromCatalog","currentLayerInfoFormat","baseInfoFormat","tooltipType","configuredInfoFormat","specific","LanguageService","CatalogBrowserComponent","toggleCollapsedGroup","currentItems","added","sortDirection","valueAccessor","EntityStoreWatcher","destroy","isGroup","isLayer","onLayerAddedChange","update","addLayerToMap","removeLayerFromMap","onGroupAddedChange","addGroupToMap","removeGroupFromMap","addLayersToMap","removeLayersFromMap","oLayers","oLayer","CatalogBrowserLayerComponent","addedChange","getEntityIcon","onToggleClick","remove","add","CatalogBrowserGroupComponent","added$","disabled$","toggleCollapsed","layerAddedChange","evaluateAdded","evaluateDisabled","onToggleCollapsed","tryToggleGroup","all","IgoCatalogBrowserModule","MatListModule","IgoListModule","IgoCollapsibleModule","CatalogLibaryComponent","catalogSelectChange","onCatalogSelect","focused","CatalogLibaryItemComponent","IgoCatalogLibraryModule","IgoCatalogModule","IgoDataSourceModule","FilterableDataSourcePipe","arg","isTimeFilterable","isOgcFilterable","Pipe","TimeFilterService","filterByDate","date","newdateformStart","newdateformEnd","dates","reformatDateTime","filterByYear","year","years","getFullYear","month","getMonth","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","Number","BasicNumericOperator","Basic","BasicAndSpatial","Spatial","All","OGCFilterService","filterByOgc","filterString","setOgcWFSFiltersOptions","wfsDatasource","interfaceOgcFilters","setOgcWMSFiltersOptions","filtered","DownloadService","messageService","success","DSOptions","outputFormatDownload","baseurl","olProjection","MessageService","DownloadButtonComponent","downloadService","openDownload","IgoDownloadModule","FeatureDetailsComponent","sanitizer","_feature","detectChanges","htmlSanitizer","bypassSecurityTrustResourceUrl","isObject","isUrl","filterFeatureProperties","DomSanitizer","IgoFeatureDetailsModule","IgoKeyValueModule","FeatureFormComponent","feature$","submitForm","ngOnChanges","changes","currentValue","previousValue","setStore","onSubmit","formDataToFeature","propertyPrefix","entry","activateStoreSelection","deactivateStoreSelection","selectionStrategy","IgoFeatureFormModule","IgoFormModule","IgoFeatureModule","TimeFilterFormComponent","listYears","startListYears","endListYears","playIcon","change","yearChange","valueArray","startDate","endDate","isNaN","valueOf","getStepDefinition","timeInterval","utcmin","getTimezoneOffset","utcmax","startYear","initStartYear","endYear","initEndYear","isRange","handleDateChange","setupDateOutput","applyTypeChange","handleYearChange","handleListYearChange","handleListYearStartChange","dateToNumber","setSliderThumbLabel","thumbLabel","findThumbLabel","mySlider","_elementRef","nativeElement","childNodes","textContent","className","children","playFilter","interval","stopFilter","that","newMinDateNumber","maxDateNumber","clearInterval","handleSliderDateChange","handleSliderTooltip","handleSliderValue","current","currentDate","getRoundedDate","toDateString","toTimeString","setSeconds","setHours","setMinutes","getDay","selectedHour","getHours","selectedMinute","getMinutes","getRangeMinDate","getRangeMaxDate","atMinute","coeff","moment.duration","asMilliseconds","ViewChild","MatSlider","TimeFilterItemComponent","timeFilterService","TimeFilterListComponent","TimeFilterListBindingDirective","WktService","wktToFeature","wkt","wktProj","featureProj","olWKT","extentToWkt","epsgTO","extentProj","currentExtent","roundCoordinateArray","wktLine","wktMultiPoints","coordinateArray","decimal","roundArray","array","toFixed","snrcToWkt","snrc","snrc250kIndex","snrc50kIndex","snrc1m","snrc250k","snrc50k","ar1m","part1m","part250k_1","part50k_1","separator","partEW","partSN","index250kEW_1","index250kSN_1","index50kEW_1","index50kSN_1","increment250kEW","increment250kSN","increment50kEW","increment50kSN","unitPerTypeEW","unitPerTypeSN","coord","ul","1","2","3","4","5","6","7","8","9","10","lr","ur","ll","OgcFilterFormComponent","wktService","baseOverlayName","ogcFilterOperators","igoSpatialSelectors","updateField","computeAllowedOperators","allowedOperators","allowedOperatorsType","effectiveOperators","OgcFilterOperatorType","fields","excludeFromOgcFilters","currentFilter","toggleFilterState","checked","removeOverlayByID","refreshFilters","deleteFilter","changeNumericProperty","changeProperty","overlayId","changeOperator","changeGeometry","checkSNRC50k","checkSNRC250k","checkSNRC1m","OgcFilterableFormComponent","OgcFilterableItemComponent","ogcFilterService","defaultLogicalParent","hasActiveSpatialFilter","filtersAreEditable","filtersCollapsed","hasPushButton","lastRunOgcFilter","addFilterToSequence","arr","lastLevel","firstFieldName","datasourceOptions","force","activeFilters","af","ogcLayer","rebuildFilter","isAdvancedOgcFilters","addFilterDisabled","changeOgcFiltersAdvancedOgcFilters","changeOgcFilterType","OgcFilterableListComponent","OgcFilterableListBindingDirective","OgcFilterButtonComponent","ogcFilterCollapse","toggleOgcFilter","OgcFilterToggleButtonComponent","applyFilters","getToolTip","pb","tt","getButtonColor","background-color","bundleIsVertical","bundle","vertical","currentOgcPushButton","conditions","IgoFilterModule","provide","MAT_DATE_LOCALE","useValue","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonToggleModule","MatCheckboxModule","MatSliderModule","MatSlideToggleModule","MatFormFieldModule","MatInputModule","MatOptionModule","MatSelectModule","MatDatepickerModule","MatNativeDateModule","GeometryFormFieldComponent","geometryType$","drawGuide$","value$","geometryTypeField","geometryTypes","drawGuideField","drawGuide","drawGuidePlaceholder","measure","formControl","value$$","valueChanges","onGeometryTypeChange","onDrawGuideChange","FormFieldComponent","Length","Area","Meters","Kilometers","Miles","Feet","MeasureLengthUnitAbbreviation","MeasureLengthUnit","SquareMeters","SquareKilometers","SquareMiles","SquareFeet","Hectares","Acres","MeasureAreaUnitAbbreviation","MeasureAreaUnit","metersToKilometers","metersToFeet","metersToMiles","squareMetersToSquareKilometers","squareMetersToSquareMiles","squareMetersToSquareFeet","squareMetersToHectares","squareMetersToAcres","metersToUnit","conversion","val","squareMetersToUnit","formatMeasure","parts","locale","toLocaleString","minimumFractionDigits","maximumFractionDigits","unitAbbr","computeBestLengthUnit","converted","possibleUnits","computeBestAreaUnit","createMeasureInteractionStyle","createMeasureLayerStyle","measureOlGeometryLength","OlPoint","getFlatCoordinates","olGetLength","measureOlGeometryArea","OlLineString","olGetArea","measureOlGeometry","area","lengths","flatCoordinates","coordinatesLength","olSegment","updateOlGeometryMidpoints","olMidpoints","getOlGeometryMidpoints","midpointsLength","midpointCoordinate","getCoordinateAt","olMidpoint","setCoordinates","expectedNumber","clearOlMidpointTooltip","olTooltip","removeOverlay","updateOlTooltipsAtMidpoints","createOlTooltipAtPoint","setPosition","getOlTooltipsAtMidpoints","updateOlGeometryCenter","olCenter","centerCoordinate","olGetCenter","updateOlTooltipAtCenter","getOlTooltipAtCenter","getTooltipsOfOlGeometry","olTooltips","olCenterTooltip","olPoint","OlOverlay","stopEvent","GeometrySliceError","GeometrySliceMultiPolygonError","GeometrySliceLineStringError","GeometrySliceTooManyIntersectionError","createDrawInteractionStyle","createDrawHoleInteractionStyle","sliceOlGeometry","olSlicer","OlPolygon","sliceOlPolygon","sliceOlLineString","olLineString","olPolygon","getLinearRingCount","slicer","OlGeoJSON","outerCoordinates","getLinearRing","totalIntersectionCount","segmentCoordinates","segment","lineString","intersections","lineIntersect","intersectionCount","intersection","addLinearRingToOlPolygon","olLinearRing","appendLinearRing","DrawControl","start$","end$","changes$","olOverlayLayer","createOlInnerOverlayLayer","clearOlInnerOverlaySource","removeOlInnerOverlayLayer","removeOlDrawInteraction","addOlInnerOverlayLayer","addOlDrawInteraction","olOverlaySource","OlVectorLayer","OlVectorSource","layerStyle","olDrawInteraction","OlDraw","stopClick","drawStyle","maxPoints","freehand","freehandCondition","onDrawStartKey","onDrawStart","onDrawEndKey","onDrawEnd","unsubscribeToKeyDown","onChangesKey","olGeometryEvent","subscribeToKeyDown","keyDown$$","fromEvent","keyCode","removeLastPoint","ModifyControl","olModifyInteractionIsActive","olTranslateInteractionIsActive","olDrawInteractionIsActive","removedOlInteractions","olLinearRingsLayer","createOlLinearRingsLayer","removeOlModifyInteraction","removeOlTranslateInteraction","addOlTranslateInteraction","activateTranslateInteraction","addOlModifyInteraction","activateModifyInteraction","setOlGeometry","OlFeature","addOlLinearRingsLayer","removeOlLinearRingsLayer","clearOlLinearRingsSource","olLinearRingsSource","olModifyInteraction","OlModify","deactivateModifyInteraction","onModifyStartKey","onModifyStart","onModifyEndKey","onModifyEnd","onModifyKey","olTranslateInteraction","OlTranslate","deactivateTranslateInteraction","onTranslateStartKey","onTranslateStart","onTranslateEndKey","onTranslateEnd","onTranslateKey","getOlGeometry","intersectsCoordinate","subscribeToDrawKeyDown","drawKeyDown$$","unsubscribeToDrawKeyDown","subscribeToDrawKeyUp","activateDrawInteraction","drawKeyUp$$","unsubscribeToDrawKeyUp","deactivateDrawInteraction","linearRingCoordinates","addLinearRingToOlGeometry","onDrawKey","_linearRingCoordinates","updateLinearRingOfOlGeometry","OlLinearRing","newCoordinates","getLinearRings","SliceControl","error$","removeDrawLineControl","addDrawLineControl","drawLineControl","drawLineStart$$","olLine","onDrawLineStart","drawLineEnd$$","onDrawLineEnd","olSlicedGeometries","lineExtent","forEachFeatureInExtent","olParts","MeasurerDialogComponent","dialogRef","measureAreaUnit","measureLengthUnit","onNoClick","MatDialogRef","MAT_DIALOG_DATA","MeasurerComponent","dialog","tableTemplate","selection","selectMany","selectionCheckbox","columns","activeLengthUnit","activeAreaUnit","measureType","MeasureType","measureUnitsAuto","measure$","selectedFeatures$","showTooltips","olDrawSource","_activeMeasureType","minSegmentLength","setActiveMeasureType","activeDrawControl","initStore","createDrawLineControl","createDrawPolygonControl","createModifyControl","toggleDrawControl","onToggleTooltips","updateTooltipsOfOlSource","deactivateModifyControl","freezeStore","onMeasureTypeChange","activeMeasureType","onToggleDrawControl","toggle","deactivateDrawControl","showTooltipsOfOlSource","clearTooltipsOfOlSource","onToggleMeasureUnitsAuto","onLengthUnitChange","table","activeOlGeometry","updateTooltipsOfOlGeometry","onAreaUnitChange","onCalculateClick","sum","perimeter","openDialog","onDeleteClick","deleteMany","onModifyClick","modifyControl","feature_1","_olFeature","activateModifyControl","clearTooltipsOfOlGeometry","many","onFeatureAddedKey","updateMeasureOfOlGeometry","onFeatureRemovedKey","selectedFeatures$$","OlStyle","drawPolygonControl","activateDrawControl","drawControl","drawStart$$","drawEnd$$","drawChanges$$","onDrawChanges","clearMeasures","finalizeMeasureOfOlGeometry","addFeatureToStore","modifyStart$$","modifyEnd$$","modifyChanges$$","onModifyChanges","setProperties","_measure","featureId","olMidpointsTooltips","length_1","updateOlTooltip","showTooltipsOfOlGeometry","shouldShowTooltip","addOverlay","_unit","_type","getElement","innerHTML","computeTooltipInnerHTML","MatDialog","MeasureFormatPipe","out","GeometryFormFieldInputComponent","ngControl","olGeoJSON","ready","onChange","onTouched","_geometryType","deactivateControl","createDrawControl","toggleControl","_drawStyle","isStyleWithRadius","defaultDrawStyleRadius","_overlayStyle","_value","addGeoJSONToOverlay","addOlOverlayLayer","createMeasureTooltip","registerOnChange","fn","registerOnTouched","writeValue","updateDrawStyleWithDrawGuide","activateControl","control","activeControl","olGeometryEnds$$","onOlGeometryEnds","olGeometryChanges$$","onOlGeometryChanges","removeMeasureTooltip","updateMeasureTooltip","overlayStyle","lastIndex","lastLength","olLastMidpoint","innerHtml","olStyle","NgControl","IgoGeometryFormFieldModule","IgoGeometryModule","entryComponents","ExportError","ExportInvalidFileError","ExportNothingToExportError","downloadContent","content","mimeType","fileName","setAttribute","display","appendChild","click","removeChild","handleFileExportError","handleNothingToExportError","ExportFormat","strEnum","ExportService","ogreUrl","export","exportOlFeatures","exportAsync","observer","nothingToExport","ogreFormats","noOgreFallbacks","exportToFile","exportWithOgre","writeFeatures","featureType","featuresText","form","geojsonField","outputNameField","outputName","ogreFormat","outputFormatField","submit","GML","GPX","KML","Shapefile","ImportError","ImportInvalidFileError","ImportUnreadableFileError","ImportNothingToImportError","addLayerAndFeaturesToMap","floor","g","olStyle.Stroke","olStyle.Fill","olStyle.Style","olStyle.Circle","handleFileImportSuccess","file","computeLayerTitleFromFile","messageTitle","handleNothingToImportError","handleFileImportError","getFileExtension","ImportService","import","importAsync","getFileImporter","extension","allowedMimeTypes","allowedZipMimeTypes","allowedExtensions","importFile","importFileWithOgre","importer","reader","FileReader","parseFeaturesFromFile","readAsText","formData","FormData","append","post","headers","HttpHeaders","errors","parseFeaturesFromGeoJSON","GeoJSON","olformat.KML","olformat.GML","olformat.GPX","writeFeatureObject","ImportExportComponent","importService","exportService","formBuilder","formats","inputProj","buildForm","importFiles","files","onFileImportSuccess","onFileImportError","files_1","files_1_1","handleExportFormSubmit","onFileExportError","Validators","required","FormBuilder","DropGeoFileDirective","filesDropped","filesInvalid","filesDropped$$","onFilesDropped","onDragOver","onDragLeave","onDrop","HostListener","DragAndDropDirective","IgoImportExportModule","MatTabsModule","IgoDrapDropModule","IgoLayerModule","MatBadgeModule","IgoImageModule","IgoMapModule","IgoConfirmDialogModule","MeasurerItemComponent","_auto","measureUnitChange","toggleAutoUnit","onMeasureUnitChange","measureUnit","measure$$","computeBestMeasureUnit","IgoMeasurerModule","IgoEntityTableModule","IgoMeasureModule","ZoomIfOutMapExtent","OverlayService","features$","OverlayAction","OverlayDirective","overlayService","olFormatGeoJSON","features$$","handleFeatures","IgoOverlayModule","html2canvas","_html2canvas","PrintService","print","paperFormat","orientation","doc","jsPDF","dimensions","internal","pageSize","margins","addTitle","showProjection","showScale","addProjScale","comment","addComment","addMap","showLegend","addLegend","saveDoc","getLayersLegendHtml","getLayersLegendImage","doZipFile","div","setTimeout","useCORS","then","canvas","generateCanvaFileToZip","saveCanvasImageAsFile","parentNode","pageWidth","titleMarginLeft","titleWidth","setFont","setFontSize","heightPixels","textProjScale","imgData","toDataURL","addPage","imageSize","getImageSizeToFitPdf","addImage","addCanvas","rect","timeout","mapSize","widthPixels","once","mapStatus$$","mapStatus","clearTimeout","renderMap","defineNbFileToProcess","nbFileToProcess","downloadMapImage","newCanvas","positionHCanvas","positionWProjScale","commentWidth","measureText","positionHProjScale","commentNbLine","ceil","positionHComment","fillStyle","fillRect","projText","scaleText","mapScale","nbCommentChar","CommentLengthToCut","commentCurrentLine","positionFirstCutChar","positionLastBlank","tiwContent","getWorldFileInformation","addFileToZip","saveAs","saveFileProcessing","renderSync","save","pageHeight","getHeight","canHeight","canWidth","heightRatio","widthRatio","maxRatio","currentResolution","blobFormat","navigator","msSaveBlob","msToBlob","toBlob","zipFile","JSZip","getZipFile","generateAsync","PrintComponent","printService","_outputFormat","_paperFormat","_orientation","_imageFormat","_resolution","handleFormSubmit","isPrintService","imageFormat","PrintOutputFormat","PrintPaperFormat","PrintOrientation","PrintResolution","PrintSaveImageFormat","PrintFormComponent","outputFormats","paperFormats","orientations","imageFormats","imageFormatField","setValue","Jpeg","onlySelf","Pdf","paperFormatField","Letter","orientationField","landscape","resolutionField","titleField","commentField","showProjectionField","showScaleField","showLegendField","doZipFileField","isValid","submitted","toggleImageSaveProp","IgoPrintModule","querySearchSourceFactory","provideQuerySearchSource","useFactory","multi","deps","IgoQueryModule","SearchSourceService","getSources","getEnabledSources","enableSourcesByType","sourceCanSearch","sourceCanReverseSearch","reverseSearch","SearchService","searchSourceService","term","termIsValid","searchSources","reverseSearchSources","RoutingSourceService","routingSourceServiceFactory","provideRoutingSourceService","RoutingSource","RoutingService","routingSourceService","routeSource","RoutingFormService","mapWaitingForRoutingClick","getStopsCoordinates","stopsCoordinates","setStopsCoordinates","isMapWaitingForRoutingClick","setMapWaitingForRoutingClick","unsetMapWaitingForRoutingClick","RoutingFormComponent","routingService","searchService","routingFormService","invalidKeys","routesQueries$$","stream$","focusOnStop","focusKey","_term","_debounce","_length","changeRoute","selectedRoute","showRouteGeometry","unsubscribeRoutesQueries","unlistenSingleClick","stopCoordinates","stops","stop","routingRoutesOverlayDataSource","routingStopsOverlayDataSource","browserLanguage","getLanguage","stopsForm","routingType","routingMode","stopOrderPriority","routingFixedStartEnd","createStop","selectedStopFeature","stopsLayer","routesLayer","selectStops","olinteraction.Select","olcondition.pointerMove","translateStop","olinteraction.Translate","selectRouteHover","selectRoute","getLength","selectCoordinates","addStop","pos","at","patchValue","handleLocationProposals","addStopOverlay","statusChanges","onFormChange","translatedPos","translationEndCoordinates","stopProposals","handleTermChanged","stopIndex","groupedLocations","resultPos","stopPoint","routingText","raiseStop","moveStop","lowerStop","diff","fromValue","removeStop","insert","insertIndex","routingPos","removeAt","resetForm","routesResults","nbStops","deleteRoutingOverlaybyID","valid","coords","getRoutes","formatStep","formatInstruction","maneuver","modifier","bearing_after","exit","activeRoute","steps","stepPosition","lastStep","directiveFr","directiveEn","directive","cssClass","translatedDirection","translateBearing","translatedModifier","translateModifier","frAggregatedDirection","enAggregatedDirection","coma","instruction","bearing","formatDistance","distance","formatDuration","summary","showSegment","showRouteSegmentGeometry","lastPoint","zoomRoute","geom","geometry3857","routingFeature","stopsArrayCoordinates","routeResponse","olobservable.unByKey","copyLinkToClipboard","Clipboard","copy","getUrl","msg","copyDirectionsToClipboard","indent","activeRouteDirective","wayPointList","wayPointsCnt","localCnt","directionsBody","searchProposals_1","currentStopIndex","setTerm","keyIsValid","keyup","handleMapClick","clearStop","getStopOverlayID","chooseProposal","proposal","geomCoord","coordArray","polygonExtent","proposalExtent","olextent.intersects","focus","indexPos","clickCoordinates","geolocateStop","geolocateCoordinates","stopColor","stopID","routingKey","routingCoordKey","routingUrl","location","pathname","RoutingFormBindingDirective","storedStopsCoordinates","routingParams","stopsCoordinatesFromURL","routingCoordUrl_1","cnt_1","stopCoordinatesFromURL","IgoRoutingModule","MatDividerModule","searchSourceServiceFactory","provideSearchSourceService","IChercheSearchResultFormatter","formatResult","IChercheSearchSource","formatter","computeRequestParams","extractResults","q","computeTerm","computeOptionsParam","dataToResult","computeProperties","subtitleHtml","highlight","title2","nom","dataType","titleHtml","removeKeys","propertiesBlacklist","tags","typeValue_1","hashtagToAdd_1","IChercheReverseSearchSource","loc","buffer","String","computeExtent","defaultIChercheSearchResultFormatterFactory","provideDefaultIChercheSearchResultFormatter","ichercheSearchSourceFactory","ichercheReverseSearchSourceFactory","GoogleLinks","getGoogleMapsLink","getGoogleStreetViewLink","CoordinatesSearchResultFormatter","CoordinatesReverseSearchSource","coordonnees","systemeCoordonnees","GoogleMaps","GoogleStreetView","defaultCoordinatesSearchResultFormatterFactory","provideDefaultCoordinatesSearchResultFormatter","CoordinatesReverseSearchSourceFactory","SEARCH_TYPES","SearchSelectorComponent","searchTypes","initial","enableSearchType","onSearchTypeChange","searchType","getSearchTypeTitle","IgoSearchSelectorModule","MatMenuModule","MatRadioModule","SearchSettingsComponent","getSearchSources","settingsValueCheckedCheckbox","settingValue","settingsValueCheckedRadioButton","onCheckSearchSource","IgoSearchSettingsModule","SearchBarComponent","minLength","searchTypeChange","_placeholder","empty","stream$$","onTermChange","onKeyup","onClearButtonClick","doSearch","trim","input","softClear","research","onResearchCompleted","newResults","entities$","HostBinding","SearchUrlParamDirective","ref","searchKey","IgoSearchBarModule","Grouped","Flat","SearchResultsComponent","searchResultMode","SearchResultMode","mode","resultFocus","resultSelect","_results$","liftResults","onResultFocus","computeGroupTitle","onResultSelect","groupResults","sortByOrder","r1","r2","displayOrder","grouped","sourceResults","SearchResultsItemComponent","getEntityTitleHtml","IgoSearchResultsModule","IgoSearchModule","ToastComponent","opened","_expanded","expanded","zoomToFeatureExtent","swipe","SWIPE_ACTION","UP","DOWN","IgoToastModule","IgoPanelModule","IgoFlexibleModule","OgcFilterComponent","cancel","onUpdateInputs","OgcFilterWidget","InjectionToken","ogcFilterWidgetFactory","widgetService","provideOgcFilterWidget","WidgetService","IgoOgcFilterModule","WfsWorkspace","Workspace","WfsWorkspaceService","createWorkspace","entityStore","createFeatureStore","actionStore","ActionStore","createTableTemplate","loadingStrategy","WmsWorkspace","WmsWorkspaceService","WorkspaceSelectorDirective","wfsWorkspaceService","wmsWorkspaceService","onLayersChange","editableLayers","layerIsEditable","editableLayersIds","workspacesToAdd","getOrCreateWorkspace","workspace","workspacesToRemove","workspaceStore","insertMany","WorkspaceSelectorComponent","IgoWorkspaceSelectorModule","IgoGeoWorkspaceModule","IgoWidgetModule","IgoWktModule","IgoGeoModule","ILayerSearchSource","title$","getValue","computeSearchRequestParams","computeLayerOptions","extractQueryParamsFromSourceUrl","formatOpt","urls","urlOpt","ilayerSearchSourceFactory","NominatimSearchSource","i1","place_id","display_name","osm_type","class","boundingbox","computeTermTags","addTagsFromSettings","computeTermSettings","nominatimSearchSourceFactory","StoredQueriesSearchSource","storedQueriesOptions","outputformat","storedquery_id","multipleFieldsQuery","splitPrefix","defaultValue","storedqueriesParams","extractWFSData","patternGml3","WFS","geojson","wfsfeatures","splitterRegex","remainingTerm","splittedTerm","wfsversion","srsname","resultTitle","utils","StoredQueriesReverseSearchSource","longField","latField","longLatParams","doc_type","storedqueriesSearchSourceFactory","storedqueriesReverseSearchSourceFactory","RoutingFormat","SourceRoutingType","Route","OsrmRoutingSource","configurable","_name","getRouteParams","extractRoutesData","formatRoute","waypoints","overview","geometries","alternatives","stepsUI","leg","roadNetworkRoute","legs","sourceType","weight_name","osrmRoutingSourcesFactory","i1$1","rows","row","column","EntityTableColumnRenderer"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { MetadataOptions } from './metadata.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MetadataService {\r\n  constructor() {}\r\n\r\n  open(metadata: MetadataOptions) {\r\n    if (metadata.extern) {\r\n      window.open(metadata.url, '_blank');\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport {\r\n  MetadataOptions,\r\n  MetadataLayerOptions\r\n} from '../shared/metadata.interface';\r\nimport { MetadataService } from '../shared/metadata.service';\r\n\r\n@Component({\r\n  selector: 'igo-metadata-button',\r\n  templateUrl: './metadata-button.component.html',\r\n  styleUrls: ['./metadata-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MetadataButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private metadataService: MetadataService) {}\r\n\r\n  openMetadata(metadata: MetadataOptions) {\r\n    this.metadataService.open(metadata);\r\n  }\r\n\r\n  get options(): MetadataLayerOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { MetadataButtonComponent } from './metadata-button/metadata-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [MetadataButtonComponent],\r\n  declarations: [MetadataButtonComponent]\r\n})\r\nexport class IgoMetadataModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMetadataModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export abstract class DataService {\r\n    abstract getData(): string;\r\n}\r\n","import { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { AnyDataSourceOptions } from '../shared/datasources/any-datasource.interface';\r\nimport { DataSourceOptions } from '../shared/datasources/datasource.interface';\r\nimport { WMSDataSourceOptions } from '../shared/datasources/wms-datasource.interface';\r\nimport { WMTSDataSourceOptions } from '../shared/datasources/wmts-datasource.interface';\r\n\r\n/**\r\n * Generate a id from it's datasource options.\r\n * @param options Data source options\r\n * @returns A id\r\n */\r\nexport function generateIdFromSourceOptions(options: DataSourceOptions): string {\r\n  const generators = {\r\n    wms: generateWMSIdFromSourceOptions,\r\n    wmts: generateWMTSIdFromSourceOptions,\r\n    xyz: generateXYZIdFromSourceOptions,\r\n    feature: generateFeatureIdFromSourceOptions,\r\n    osm: (_options: AnyDataSourceOptions) => 'OSM'\r\n  };\r\n  const generator = generators[options.type] || generateId;\r\n  return generator(options);\r\n}\r\n\r\n/**\r\n * Generate a id from WMS data source options\r\n * @param options WMS data source options\r\n * @returns A md5 hash of the the url and layers\r\n */\r\nexport function generateWMSIdFromSourceOptions(options: WMSDataSourceOptions) {\r\n  const layers = options.params.layers;\r\n  const chain = 'wms' + options.url + layers;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from WMTS data source options\r\n * @param options WMTS data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateWMTSIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const layer = options.layer;\r\n  const chain = 'wmts' + options.url + layer;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from XYZ data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateXYZIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const chain = 'xyz' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from feature data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateFeatureIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  if (! options.url) { return generateId(options); }\r\n  const chain = 'feature' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a unique id\r\n * @returns A uuid\r\n */\r\nexport function generateId(options: AnyDataSourceOptions) {\r\n  return uuid();\r\n}\r\n","import olSource from 'ol/source/Source';\r\n\r\nimport {\r\n  DataSourceOptions,\r\n  DataSourceLegendOptions\r\n} from './datasource.interface';\r\n\r\nimport { DataService } from './data.service';\r\nimport { generateIdFromSourceOptions } from '../../utils/id-generator';\r\n\r\nexport abstract class DataSource {\r\n\r\n  public id: string;\r\n  public ol: olSource;\r\n\r\n  constructor(\r\n    public options: DataSourceOptions = {},\r\n    protected dataService?: DataService\r\n  ) {\r\n    this.options = options;\r\n    this.id = this.generateId();\r\n    this.ol = this.createOlSource();\r\n  }\r\n\r\n  protected abstract createOlSource(): olSource;\r\n\r\n  protected generateId(): string {\r\n    return generateIdFromSourceOptions(this.options);\r\n  }\r\n\r\n  getLegend(scale?: number): DataSourceLegendOptions[] {\r\n    return this.options.legend ? [this.options.legend] : [];\r\n  }\r\n  protected abstract onUnwatch();\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { FeatureDataSourceOptions } from './feature-datasource.interface';\r\n\r\nexport class FeatureDataSource extends DataSource {\r\n  public options: FeatureDataSourceOptions;\r\n  public ol: olSourceVector;\r\n  protected createOlSource(): olSourceVector {\r\n    const sourceOptions = {\r\n      format: this.getSourceFormatFromOptions(this.options)\r\n    };\r\n\r\n    return new olSourceVector(Object.assign(sourceOptions, this.options));\r\n  }\r\n\r\n  protected getSourceFormatFromOptions(options: FeatureDataSourceOptions) {\r\n    if (options.format) {\r\n      return options.format;\r\n    }\r\n    let olFormatCls;\r\n    const formatType = options.formatType;\r\n    if (!formatType) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    } else {\r\n      olFormatCls = olformat[formatType];\r\n      if (olFormatCls === undefined) {\r\n        throw new Error('Invalid vector source format ${formatType}.');\r\n      }\r\n    }\r\n\r\n    const formatOptions = options.formatOptions;\r\n    let format;\r\n    if (formatOptions) {\r\n      format = new olFormatCls(formatOptions);\r\n    } else {\r\n      format = new olFormatCls();\r\n    }\r\n\r\n    return format;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceOSM from 'ol/source/OSM';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { OSMDataSourceOptions } from './osm-datasource.interface';\r\n\r\nexport class OSMDataSource extends DataSource {\r\n  public options: OSMDataSourceOptions;\r\n  public ol: olSourceOSM;\r\n\r\n  protected createOlSource(): olSourceOSM {\r\n    this.options.url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\r\n    return new olSourceOSM(this.options);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceXYZ from 'ol/source/XYZ';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { XYZDataSourceOptions } from './xyz-datasource.interface';\r\n\r\nexport class XYZDataSource extends DataSource {\r\n  public options: XYZDataSourceOptions;\r\n  public ol: olSourceXYZ;\r\n\r\n  protected createOlSource(): olSourceXYZ {\r\n    return new olSourceXYZ(this.options);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n}\r\n","import * as olfilter from 'ol/format/filter';\r\nimport olFormatWKT from 'ol/format/WKT';\r\nimport olFormatWFS from 'ol/format/WFS';\r\nimport olGeometry from 'ol/geom/Geometry';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport {\r\n  OgcFilter,\r\n  IgoOgcFilterObject,\r\n  WFSWriteGetFeatureOptions,\r\n  AnyBaseOgcFilterOptions,\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSourceOptions,\r\n  OgcFiltersOptions\r\n} from './ogc-filter.interface';\r\n\r\nexport class OgcFilterWriter {\r\n  private filterSequence: OgcInterfaceFilterOptions[] = [];\r\n  public operators = {\r\n    PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsLike: { spatial: false, fieldRestrict: ['string'] },\r\n    PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsGreaterThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsBetween: { spatial: false, fieldRestrict: ['number'] },\r\n    During: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNull: { spatial: false, fieldRestrict: [] },\r\n    Intersects: { spatial: true, fieldRestrict: [] },\r\n    Within: { spatial: true, fieldRestrict: [] },\r\n    Contains: { spatial: true, fieldRestrict: [] }\r\n  };\r\n\r\n  defineOgcFiltersDefaultOptions(\r\n    ogcFiltersOptions: OgcFiltersOptions,\r\n    fieldNameGeometry: string,\r\n    srcType?: string): OgcFiltersOptions  {\r\n    let ogcFiltersDefaultValue = true; // default values for wfs.\r\n    if (srcType && srcType === 'wms') {\r\n      ogcFiltersDefaultValue = false;\r\n    }\r\n\r\n    ogcFiltersOptions = ogcFiltersOptions || {};\r\n    ogcFiltersOptions.enabled = ogcFiltersOptions.enabled === undefined ? ogcFiltersDefaultValue : ogcFiltersOptions.enabled;\r\n    ogcFiltersOptions.editable = ogcFiltersOptions.editable === undefined ? ogcFiltersDefaultValue : ogcFiltersOptions.editable;\r\n    ogcFiltersOptions.geometryName = fieldNameGeometry;\r\n\r\n    ogcFiltersOptions.advancedOgcFilters = true;\r\n    if (ogcFiltersOptions.enabled && ogcFiltersOptions.pushButtons) {\r\n      ogcFiltersOptions.advancedOgcFilters = false;\r\n    }\r\n    return ogcFiltersOptions;\r\n  }\r\n\r\n  public buildFilter(\r\n    filters?: IgoOgcFilterObject,\r\n    extent?: [number, number, number, number],\r\n    proj?,\r\n    fieldNameGeometry?: string\r\n  ): string {\r\n    let ourBboxFilter;\r\n    let enableBbox: boolean;\r\n    if (/intersects|contains|within/gi.test(JSON.stringify(filters))) {\r\n      enableBbox = false;\r\n    } else {\r\n      enableBbox = true;\r\n    }\r\n    if (filters) {\r\n      fieldNameGeometry =\r\n        (filters as any).geometryName !== undefined\r\n          ? (filters as any).geometryName\r\n          : fieldNameGeometry;\r\n    }\r\n    if (extent && filters) {\r\n      ourBboxFilter = olfilter.bbox(fieldNameGeometry, extent, proj.getCode());\r\n    }\r\n    let filterAssembly: OgcFilter;\r\n    if (filters) {\r\n      filters = this.checkIgoFiltersProperties(filters, fieldNameGeometry);\r\n      if (extent && enableBbox) {\r\n        filterAssembly = olfilter.and(\r\n          ourBboxFilter,\r\n          this.bundleFilter(filters)\r\n        );\r\n      } else {\r\n        filterAssembly = this.bundleFilter(filters);\r\n      }\r\n    } else {\r\n      return 'bbox=' + extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    const wfsOptions: WFSWriteGetFeatureOptions = {\r\n      srsName: '',\r\n      featureNS: '',\r\n      featurePrefix: '',\r\n      featureTypes: ['featureTypes'],\r\n      filter: filterAssembly,\r\n      outputFormat: '',\r\n      geometryName: fieldNameGeometry\r\n    };\r\n\r\n    const query = new olFormatWFS().writeGetFeature(wfsOptions);\r\n    const str = new XMLSerializer().serializeToString(query);\r\n    const regexp1 = /typenames *=|typename *=\\\"featureTypes\\\" *>/gi;\r\n    const regexp2 = /<\\/Query><\\/GetFeature>/gi;\r\n\r\n    return 'filter=' + str.split(regexp1)[1].split(regexp2)[0];\r\n  }\r\n\r\n  private bundleFilter(filterObject: any) {\r\n    if (filterObject instanceof Array) {\r\n      const logicalArray = [];\r\n      filterObject.forEach(element => {\r\n        logicalArray.push(this.bundleFilter(element));\r\n      });\r\n      return logicalArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return this.createFilter({\r\n          operator: filterObject.logical,\r\n          logicalArray: this.bundleFilter(filterObject.filters)\r\n        });\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.createFilter(filterObject as AnyBaseOgcFilterOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createFilter(filterOptions): OgcFilter {\r\n    const operator = filterOptions.operator;\r\n    const logicalArray = filterOptions.logicalArray;\r\n\r\n    const wfsPropertyName = filterOptions.propertyName;\r\n    const wfsPattern = filterOptions.pattern;\r\n    const wfsMatchCase = filterOptions.matchCase\r\n      ? filterOptions.matchCase\r\n      : true;\r\n    const wfsWildCard = filterOptions.wildCard ? filterOptions.wildCard : '*';\r\n    const wfsSingleChar = filterOptions.singleChar\r\n      ? filterOptions.singleChar\r\n      : '.';\r\n    const wfsEscapeChar = filterOptions.escapeChar\r\n      ? filterOptions.escapeChar\r\n      : '!';\r\n\r\n    const wfsLowerBoundary = filterOptions.lowerBoundary;\r\n    const wfsUpperBoundary = filterOptions.upperBoundary;\r\n\r\n    const wfsGeometryName = filterOptions.geometryName;\r\n    const wfsExtent = filterOptions.extent;\r\n    const wfsWktGeometry = filterOptions.wkt_geometry;\r\n    const wfsSrsName = filterOptions.srsName\r\n      ? filterOptions.srsName\r\n      : 'EPSG:3857';\r\n\r\n    const wfsBegin = filterOptions.begin;\r\n    const wfsEnd = filterOptions.end;\r\n\r\n    const wfsExpression = filterOptions.expression;\r\n\r\n    let geometry: olGeometry;\r\n    if (wfsWktGeometry) {\r\n      const wkt = new olFormatWKT();\r\n      geometry = wkt.readGeometry(wfsWktGeometry, {\r\n        dataProjection: wfsSrsName,\r\n        featureProjection: 'EPSG:3857'\r\n      });\r\n    }\r\n\r\n    switch (operator) {\r\n      case 'BBOX':\r\n        return olfilter.bbox(wfsGeometryName, wfsExtent, wfsSrsName);\r\n      case 'PropertyIsBetween':\r\n        return olfilter.between(\r\n          wfsPropertyName,\r\n          wfsLowerBoundary,\r\n          wfsUpperBoundary\r\n        );\r\n      case 'Contains':\r\n        return olfilter.contains(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'During':\r\n        return olfilter.during(wfsPropertyName, wfsBegin, wfsEnd);\r\n      case 'PropertyIsEqualTo':\r\n        return olfilter.equalTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsGreaterThan':\r\n        return olfilter.greaterThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsGreaterThanOrEqualTo':\r\n        return olfilter.greaterThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'Intersects':\r\n        return olfilter.intersects(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'PropertyIsNull':\r\n        return olfilter.isNull(wfsPropertyName);\r\n      case 'PropertyIsLessThan':\r\n        return olfilter.lessThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLessThanOrEqualTo':\r\n        return olfilter.lessThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLike':\r\n        return olfilter.like(\r\n          wfsPropertyName,\r\n          wfsPattern.replace(/[()_]/gi, wfsSingleChar),\r\n          wfsWildCard,\r\n          wfsSingleChar,\r\n          wfsEscapeChar,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsNotEqualTo':\r\n        return olfilter.notEqualTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'Within':\r\n        return olfilter.within(wfsGeometryName, geometry, wfsSrsName);\r\n      // LOGICAL\r\n      case 'And':\r\n        return olfilter.and.apply(null, logicalArray);\r\n      case 'Or':\r\n        return olfilter.or.apply(null, logicalArray);\r\n      case 'Not':\r\n        return olfilter.not.apply(null, logicalArray);\r\n\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  public defineInterfaceFilterSequence(\r\n    filterObject: any,\r\n    geometryName,\r\n    logical = '',\r\n    level = -1\r\n  ): OgcInterfaceFilterOptions[] {\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            element,\r\n            geometryName,\r\n            logical,\r\n            level\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        level = level + 1;\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            filterObject.filters,\r\n            geometryName,\r\n            filterObject.logical,\r\n            level\r\n          )\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        this.filterSequence.push(\r\n          this.addInterfaceFilter(filterObject, geometryName, level, logical)\r\n        );\r\n      }\r\n    }\r\n    return this.filterSequence;\r\n  }\r\n\r\n  public addInterfaceFilter(\r\n    igoOgcFilterObject?,\r\n    geometryName?,\r\n    level = 0,\r\n    parentLogical = 'Or'\r\n  ): OgcInterfaceFilterOptions {\r\n    if (!igoOgcFilterObject) {\r\n      igoOgcFilterObject = { operator: 'PropertyIsEqualTo' };\r\n    }\r\n    const f = {\r\n      propertyName: '',\r\n      operator: '',\r\n      active: '',\r\n      filterid: uuid(),\r\n      begin: '',\r\n      end: '',\r\n      lowerBoundary: '',\r\n      upperBoundary: '',\r\n      expression: '',\r\n      pattern: '',\r\n      wildCard: '*',\r\n      singleChar: '.',\r\n      escapeChar: '!',\r\n      matchCase: true,\r\n      igoSpatialSelector: '',\r\n      geometryName: '',\r\n      geometry: '',\r\n      wkt_geometry: '',\r\n      extent: '',\r\n      srsName: '',\r\n      parentLogical: '',\r\n      level: 0\r\n    };\r\n\r\n    return Object.assign(\r\n      f,\r\n      {\r\n        parentLogical,\r\n        level,\r\n        geometryName\r\n      },\r\n      igoOgcFilterObject\r\n    );\r\n  }\r\n\r\n  public checkIgoFiltersProperties(\r\n    filterObject: any,\r\n    fieldNameGeometry,\r\n    active = false\r\n  ) {\r\n    const filterArray = [];\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        filterArray.push(\r\n          this.checkIgoFiltersProperties(element, fieldNameGeometry, active)\r\n        );\r\n      });\r\n      return filterArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return Object.assign(\r\n          {},\r\n          {\r\n            logical: filterObject.logical,\r\n            filters: this.checkIgoFiltersProperties(\r\n              filterObject.filters,\r\n              fieldNameGeometry,\r\n              active\r\n            )\r\n          }\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.addFilterProperties(\r\n          filterObject as OgcInterfaceFilterOptions,\r\n          fieldNameGeometry,\r\n          active\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private addFilterProperties(\r\n    igoOgcFilterObject: OgcInterfaceFilterOptions,\r\n    fieldNameGeometry,\r\n    active = false\r\n  ) {\r\n    const filterid = igoOgcFilterObject.hasOwnProperty('filterid')\r\n      ? igoOgcFilterObject.filterid\r\n      : uuid();\r\n    const status = igoOgcFilterObject.hasOwnProperty('active')\r\n      ? igoOgcFilterObject.active\r\n      : active;\r\n\r\n    return Object.assign(\r\n      {},\r\n      {\r\n        filterid,\r\n        active: status,\r\n        igoSpatialSelector: 'fixedExtent'\r\n      },\r\n      igoOgcFilterObject,\r\n      { geometryName: fieldNameGeometry }\r\n    );\r\n  }\r\n\r\n  public rebuiltIgoOgcFilterObjectFromSequence(\r\n    sequence: OgcInterfaceFilterOptions[]\r\n  ): IgoOgcFilterObject {\r\n    if (sequence instanceof Array) {\r\n      if (sequence.length >= 1) {\r\n        let lastParentLogical = sequence[0].parentLogical;\r\n        let nextElement: any;\r\n        let logicalArray = [];\r\n        let lastProcessedFilter;\r\n        sequence.forEach(uiFilter => {\r\n          const element = Object.assign({}, uiFilter);\r\n          const index = sequence.indexOf(uiFilter);\r\n          if (index >= 0 && index < sequence.length - 1) {\r\n            nextElement = sequence[index + 1];\r\n          } else {\r\n            nextElement = element;\r\n          }\r\n          delete element.active;\r\n          delete element.filterid;\r\n          delete element.parentLogical;\r\n          logicalArray.push(element);\r\n\r\n          if (sequence.length === 1) {\r\n            lastProcessedFilter = element;\r\n          } else if (lastParentLogical !== nextElement.parentLogical) {\r\n            if (logicalArray.length === 1) {\r\n              console.log(\r\n                'You must set at ' +\r\n                  'least two operator in a logical (' +\r\n                  lastParentLogical +\r\n                  ')'\r\n              );\r\n            } else {\r\n              lastProcessedFilter = Object.assign(\r\n                {},\r\n                { logical: lastParentLogical, filters: logicalArray }\r\n              );\r\n              logicalArray = [lastProcessedFilter];\r\n              lastParentLogical = nextElement.parentLogical;\r\n            }\r\n          }\r\n        });\r\n        return lastProcessedFilter;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public handleOgcFiltersAppliedValue(options: OgcFilterableDataSourceOptions, fieldNameGeometry: string) {\r\n    const ogcFilters = options.ogcFilters;\r\n    if (!ogcFilters) {\r\n      return;\r\n    }\r\n    let filterQueryStringPushButton = '';\r\n    let filterQueryStringAdvancedFilters = '';\r\n    if (ogcFilters.enabled && ogcFilters.pushButtons) {\r\n      const pushButtonBundle = ogcFilters.pushButtons;\r\n      const conditions = [];\r\n      pushButtonBundle.map(buttonBundle => {\r\n        const bundleCondition = [];\r\n        buttonBundle.ogcPushButtons\r\n          .filter(ogcpb => ogcpb.enabled === true)\r\n          .forEach(enabledPb => bundleCondition.push(enabledPb.filters));\r\n        if (bundleCondition.length === 1) {\r\n          conditions.push(bundleCondition[0]);\r\n        } else if (bundleCondition.length > 1) {\r\n          conditions.push({ logical: buttonBundle.logical, filters: bundleCondition });\r\n        }\r\n      });\r\n      if (conditions.length >= 1) {\r\n        filterQueryStringPushButton = this.buildFilter(\r\n            conditions.length === 1 ? conditions[0] : { logical: 'And', filters: conditions }\r\n          );\r\n      }\r\n    }\r\n\r\n    if (ogcFilters.enabled && ogcFilters.filters) {\r\n      ogcFilters.geometryName = ogcFilters.geometryName || fieldNameGeometry;\r\n      const igoFilters = ogcFilters.filters;\r\n      filterQueryStringAdvancedFilters = this.buildFilter(igoFilters);\r\n    }\r\n\r\n    let filterQueryString = ogcFilters.advancedOgcFilters ? filterQueryStringAdvancedFilters : filterQueryStringPushButton;\r\n    if (options.type === 'wms') {\r\n      filterQueryString = this.formatProcessedOgcFilter(filterQueryString, (options as any).params.layers);\r\n    }\r\n    if (options.type === 'wfs') {\r\n      filterQueryString = this.formatProcessedOgcFilter(filterQueryString, (options as any).params.featureTypes);\r\n    }\r\n\r\n    return filterQueryString;\r\n\r\n  }\r\n\r\n  public formatProcessedOgcFilter(\r\n    processedFilter: string,\r\n    layersOrTypenames: string): string {\r\n    let appliedFilter = '';\r\n    if (processedFilter.length === 0 && layersOrTypenames.indexOf(',') === -1) {\r\n      appliedFilter = processedFilter;\r\n    } else {\r\n      layersOrTypenames.split(',').forEach(layerOrTypenames => {\r\n        appliedFilter = `${appliedFilter}(${processedFilter.replace('filter=', '')})`;\r\n      });\r\n    }\r\n    const filterValue = appliedFilter.length > 0 ? appliedFilter.replace('filter=', '') : undefined;\r\n    return filterValue;\r\n  }\r\n}\r\n","import { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\n\r\nexport const defaultEpsg = 'EPSG:3857';\r\nexport const defaultMaxFeatures = 5000;\r\nexport const defaultWfsVersion = '2.0.0';\r\nexport const defaultFieldNameGeometry = 'geometry';\r\nexport const gmlRegex = new RegExp(/.*?gml.*?/gi);\r\nexport const jsonRegex = new RegExp(/.*?json.*?/gi);\r\n\r\n/**\r\n * This method build/standardize WFS call query params based on the layer property.\r\n * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface\r\n * @param count  Number: Used to control the number of feature. Used to bypass whe wfs datasource options interface (maxFeatures)\r\n * @param epsg  String: Used to control the EPSG code (es: 'EPSG3857'). Used to bypass whe wfs datasource options interface (srsName)\r\n * @param properties  String: Used to control the queried fields  (WFS service).\r\n * @returns An array array of {name: '', value: ''} of predefined query params.\r\n */\r\nexport function formatWFSQueryString(\r\n    wfsDataSourceOptions: WFSDataSourceOptions,\r\n    count?: number,\r\n    epsg?: string,\r\n    properties?: string): { name: string, value: string }[] {\r\n\r\n    const versionWfs200 = '2.0.0'; // not the same usage as defaultWfsVersion.\r\n    const url = wfsDataSourceOptions.urlWfs;\r\n    const paramsWFS = wfsDataSourceOptions.paramsWFS;\r\n    const effectiveCount = count || defaultMaxFeatures;\r\n    const epsgCode = epsg || defaultEpsg;\r\n    const outputFormat = paramsWFS.outputFormat ? `outputFormat=${paramsWFS.outputFormat}` : '';\r\n    const version = paramsWFS.version ? `version=${paramsWFS.version}` : `version=${defaultWfsVersion}`;\r\n    const paramTypename = paramsWFS.version === versionWfs200 ? 'typenames' : 'typename';\r\n    const featureTypes = `${paramTypename}=${paramsWFS.featureTypes}`;\r\n    const paramMaxFeatures = paramsWFS.version === versionWfs200 ? 'count' : 'maxFeatures';\r\n    const cnt = count ? `${paramMaxFeatures}=${effectiveCount}` :\r\n        paramsWFS.maxFeatures ? `${paramMaxFeatures}=${paramsWFS.maxFeatures}` : `${paramMaxFeatures}=${effectiveCount}`;\r\n    const srs = epsg ? `srsname=${epsgCode}` : paramsWFS.srsName ? 'srsname=' + paramsWFS.srsName : `srsname=${epsgCode}`;\r\n\r\n    let propertyName = '';\r\n    let valueReference = '';\r\n    if (properties) {\r\n        propertyName = `propertyName=${properties}`;\r\n        valueReference = `valueReference=${properties}`;\r\n    }\r\n    const sourceFields = wfsDataSourceOptions.sourceFields;\r\n    if (!propertyName && sourceFields && sourceFields.length > 0) {\r\n        const fieldsNames = [];\r\n        wfsDataSourceOptions.sourceFields.forEach(sourcefield => {\r\n            fieldsNames.push(sourcefield.name);\r\n        });\r\n        propertyName = `propertyName=${fieldsNames.join(',')},${paramsWFS.fieldNameGeometry}`;\r\n    }\r\n\r\n    const getCapabilities = `${url}?service=wfs&request=GetCapabilities&${version}`;\r\n    let getFeature = `${url}?service=wfs&request=GetFeature&${version}&${featureTypes}&`;\r\n    getFeature += `${outputFormat}&${srs}&${cnt}&${propertyName}`;\r\n\r\n    let getpropertyvalue = `${url}?service=wfs&request=GetPropertyValue&version=${versionWfs200}&${featureTypes}&`;\r\n    getpropertyvalue += `&${cnt}&${valueReference}`;\r\n\r\n    return [\r\n        { name: 'outputformat', value: outputFormat },\r\n        { name: 'version', value: version },\r\n        { name: 'typename', value: featureTypes },\r\n        { name: 'count', value: cnt },\r\n        { name: 'srsname', value: srs },\r\n        { name: 'propertyname', value: propertyName },\r\n        { name: 'valuereference', value: valueReference },\r\n        { name: 'getcapabilities', value: getCapabilities.replace(/&&/g, '&') },\r\n        { name: 'getfeature', value: getFeature.replace(/&&/g, '&') },\r\n        { name: 'getpropertyvalue', value: getpropertyvalue.replace(/&&/g, '&') }\r\n    ];\r\n}\r\n\r\n/**\r\n * Validate/Modify layer's wfs options based on :\r\n * 1- an Openlayers's issue with GML provided from WFS. Refer to\r\n * https://github.com/openlayers/openlayers/pull/6400\r\n * 2- Set default values for optionals parameters.\r\n * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface\r\n * @returns An array array of {name: '', value: ''} of predefined query params.\r\n */\r\nexport function checkWfsParams(wfsDataSourceOptions, srcType?: string) {\r\n\r\n  if (srcType && srcType === 'wfs') {\r\n    // reassignation of params to paramsWFS and url to urlWFS to have a common interface with wms-wfs datasources\r\n    wfsDataSourceOptions.paramsWFS = wfsDataSourceOptions.params;\r\n  }\r\n\r\n  const paramsWFS = wfsDataSourceOptions.paramsWFS;\r\n  wfsDataSourceOptions.urlWfs = wfsDataSourceOptions.urlWfs || wfsDataSourceOptions.url;\r\n\r\n  paramsWFS.version = paramsWFS.version || defaultWfsVersion;\r\n  paramsWFS.fieldNameGeometry = paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;\r\n  paramsWFS.maxFeatures = paramsWFS.maxFeatures || defaultMaxFeatures;\r\n\r\n  let outputFormat;\r\n  if (paramsWFS.outputFormat) {\r\n    outputFormat = paramsWFS.outputFormat;\r\n  }\r\n\r\n  if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n    paramsWFS.version = '1.1.0';\r\n  }\r\n  return Object.assign({}, wfsDataSourceOptions );\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as OlLoadingStrategy from 'ol/loadingstrategy';\r\nimport * as OlFormat from 'ol/format';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport {\r\n  formatWFSQueryString,\r\n  defaultFieldNameGeometry,\r\n  gmlRegex,\r\n  jsonRegex,\r\n  checkWfsParams\r\n} from './wms-wfs.utils';\r\n\r\nexport class WFSDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n\r\n  constructor(\r\n    public options: WFSDataSourceOptions,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(checkWfsParams(options, 'wfs'));\r\n\r\n    const ogcFilters = (this.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    const fieldNameGeometry = this.options.paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    (this.options as OgcFilterableDataSourceOptions).ogcFilters =\r\n      ogcFilterWriter.defineOgcFiltersDefaultOptions(ogcFilters, fieldNameGeometry);\r\n    if ((this.options as OgcFilterableDataSourceOptions).ogcFilters.enabled) {\r\n      this.wfsService.getSourceFieldsFromWFS(this.options);\r\n    }\r\n  }\r\n\r\n  protected createOlSource(): olSourceVector {\r\n\r\n    return new olSourceVector({\r\n      format: this.getFormatFromOptions(),\r\n      overlaps: false,\r\n      url: (extent, resolution, proj) => {\r\n        return this.buildUrl(\r\n          extent,\r\n          proj,\r\n          (this.options as OgcFilterableDataSourceOptions).ogcFilters);\r\n      },\r\n      strategy: OlLoadingStrategy.bbox\r\n    });\r\n  }\r\n\r\n  private buildUrl(extent, proj, ogcFilters): string {\r\n    const paramsWFS = this.options.paramsWFS;\r\n    const queryStringValues = formatWFSQueryString(this.options, undefined, proj.getCode());\r\n    let igoFilters;\r\n    if (ogcFilters && ogcFilters.enabled) {\r\n      igoFilters = ogcFilters.filters;\r\n    }\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    const filterOrBox = ogcFilterWriter.buildFilter(igoFilters, extent, proj, ogcFilters.geometryName);\r\n    let filterOrPush = ogcFilterWriter.handleOgcFiltersAppliedValue(this.options, ogcFilters.geometryName);\r\n\r\n    let prefix = 'filter';\r\n    if (!filterOrPush) {\r\n      prefix = 'bbox';\r\n      filterOrPush = extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    paramsWFS.xmlFilter = ogcFilters.advancedOgcFilters ? filterOrBox : `${prefix}=${filterOrPush}`;\r\n    let baseUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    const patternFilter = /(filter|bbox)=.*/gi;\r\n    baseUrl = patternFilter.test(paramsWFS.xmlFilter) ? `${baseUrl}&${paramsWFS.xmlFilter}` : baseUrl;\r\n    this.options.download = Object.assign({}, this.options.download, { dynamicUrl: baseUrl });\r\n    return baseUrl.replace(/&&/g, '&');\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    let outputFormat;\r\n    if (this.options.paramsWFS.outputFormat) {\r\n      outputFormat = this.options.paramsWFS.outputFormat.toLowerCase();\r\n    }\r\n\r\n    if (jsonRegex.test(outputFormat)) {\r\n      olFormatCls = OlFormat.GeoJSON;\r\n    }\r\n    if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n      olFormatCls = OlFormat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport * as olformat from 'ol/format';\r\n\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { DataService } from './data.service';\r\nimport { formatWFSQueryString, gmlRegex, defaultEpsg, defaultMaxFeatures} from './wms-wfs.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WFSService extends DataService {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getData() {\r\n    console.log('This is defining a data service.');\r\n    return 'This is defining a data service.';\r\n  }\r\n\r\n  public getSourceFieldsFromWFS(datasource) {\r\n    if (!datasource.sourceFields || datasource.sourceFields.length === 0 ) {\r\n      datasource.sourceFields = [];\r\n      this.defineFieldAndValuefromWFS(datasource).subscribe(getfeatureSourceField => {\r\n        datasource.sourceFields = getfeatureSourceField;\r\n      });\r\n\r\n    } else {\r\n      this.defineFieldAndValuefromWFS(datasource).subscribe(getfeatureSourceField => {\r\n        datasource.sourceFields.forEach(sourcefield => {\r\n          if (sourcefield.alias === undefined) {\r\n            sourcefield.alias = sourcefield.name; // to allow only a list of sourcefield with names\r\n          }\r\n          if (sourcefield.values === undefined || sourcefield.values.length === 0) {\r\n            sourcefield.values = getfeatureSourceField.find(sf => sf.name === sourcefield.name).values;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private wfsGetFeature(\r\n    wfsDataSourceOptions: WFSDataSourceOptions,\r\n    nb: number = defaultMaxFeatures,\r\n    epsgCode: string = defaultEpsg,\r\n    propertyName?: string\r\n  ): Observable<any> {\r\n    const queryStringValues = formatWFSQueryString(wfsDataSourceOptions, nb, epsgCode, propertyName);\r\n    const baseUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    const outputFormat = wfsDataSourceOptions.paramsWFS.outputFormat;\r\n    if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n      return this.http.get(baseUrl, { responseType: 'text' });\r\n    } else {\r\n      return this.http.get(baseUrl);\r\n    }\r\n  }\r\n\r\n  defineFieldAndValuefromWFS(\r\n    wfsDataSourceOptions: WFSDataSourceOptions\r\n  ): Observable<any> {\r\n    return new Observable(d => {\r\n      const sourceFields = [];\r\n      let fieldList;\r\n      let fieldListWoGeom;\r\n      let fieldListWoGeomStr;\r\n      let olFormats;\r\n      const outputFormat = wfsDataSourceOptions.paramsWFS.outputFormat;\r\n\r\n      if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n        olFormats = olformat.WFS;\r\n     } else {\r\n        olFormats = olformat.GeoJSON;\r\n      }\r\n\r\n      this.wfsGetFeature(wfsDataSourceOptions, 1).subscribe(oneFeature => {\r\n        const features = new olFormats().readFeatures(oneFeature);\r\n        fieldList = features[0].getKeys();\r\n        fieldListWoGeom = fieldList.filter(\r\n          field =>\r\n            field !== features[0].getGeometryName() &&\r\n            !field.match(/boundedby/gi)\r\n        );\r\n        fieldListWoGeomStr = fieldListWoGeom.join(',');\r\n        this.wfsGetFeature(\r\n          wfsDataSourceOptions,\r\n          wfsDataSourceOptions.paramsWFS.maxFeatures || defaultMaxFeatures,\r\n          undefined,\r\n          fieldListWoGeomStr\r\n        ).subscribe(manyFeatures => {\r\n          const mfeatures = new olFormats().readFeatures(manyFeatures);\r\n          this.built_properties_value(mfeatures).forEach(element => {\r\n            sourceFields.push(element);\r\n          });\r\n          d.next(sourceFields);\r\n          d.complete();\r\n        });\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  private built_properties_value(features: olFeature[]): string[] {\r\n    const kv = Object.assign({}, features[0].getProperties());\r\n    delete kv[features[0].getGeometryName()];\r\n    delete kv.boundedBy;\r\n    const sourceFields = [];\r\n    for (const property in kv) {\r\n      if (kv.hasOwnProperty(property)) {\r\n        const fieldType =\r\n          typeof features[0].get(property) === 'object'\r\n            ? undefined\r\n            : typeof features[0].get(property);\r\n        sourceFields.push({\r\n          name: property,\r\n          alias: property,\r\n          type: fieldType,\r\n          values: [kv[property]]\r\n        });\r\n      }\r\n    }\r\n    features.every((element) => {\r\n      const featureProperties = element.getProperties();\r\n      for (const key in featureProperties) {\r\n        if (featureProperties.hasOwnProperty(key) && key in kv) {\r\n          sourceFields.filter(f => f.name === key).forEach(v => {\r\n            if (v.values.indexOf(featureProperties[key]) === -1) {\r\n              v.values.push(featureProperties[key]);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    return sourceFields;\r\n  }\r\n}\r\n","export enum QueryFormat {\r\n  GML2 = 'gml2',\r\n  GML3 = 'gml3',\r\n  JSON = 'json',\r\n  GEOJSON = 'geojson',\r\n  ESRIJSON = 'esrijson',\r\n  TEXT = 'text',\r\n  HTML = 'html',\r\n  HTMLGML2 = 'htmlgml2'\r\n}\r\n\r\nexport enum QueryHtmlTarget {\r\n  IFRAME = 'iframe',\r\n  BLANK = '_blank'\r\n}\r\n","import olSourceImageWMS from 'ol/source/ImageWMS';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\nimport { formatWFSQueryString, defaultWfsVersion, checkWfsParams, defaultFieldNameGeometry } from './wms-wfs.utils';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nexport class WMSDataSource extends DataSource {\r\n  public ol: olSourceImageWMS;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  constructor(\r\n    public options: WMSDataSourceOptions,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(options);\r\n    // Important: To use wms versions smaller than 1.3.0, SRS\r\n    // needs to be supplied in the source \"params\"\r\n\r\n    // We need to do this to override the default version\r\n    // of openlayers which is uppercase\r\n    const sourceParams: any = options.params;\r\n    if (sourceParams && sourceParams.version) {\r\n      sourceParams.VERSION = sourceParams.version;\r\n    }\r\n\r\n    if (sourceParams && sourceParams.VERSION) {\r\n      if (sourceParams.version !== '1.3.0') {\r\n        if (!sourceParams.SRS && !sourceParams.srs) {\r\n          throw new Error(`You must set a SRS (or srs) param for your WMS\r\n           (layer =  ` + sourceParams.layers + `) because your want to use a WMS version under 1.3.0\r\n        Ex: \"srs\": \"EPSG:3857\" `);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (sourceParams && sourceParams.INFO_FORMAT) {\r\n      sourceParams.info_format = sourceParams.INFO_FORMAT;\r\n    }\r\n\r\n    if (options.refreshIntervalSec && options.refreshIntervalSec > 0) {\r\n      setInterval(() => {\r\n        this.refresh();\r\n      }, options.refreshIntervalSec * 1000); // Convert seconds to MS\r\n    }\r\n\r\n    let fieldNameGeometry = defaultFieldNameGeometry;\r\n\r\n    // ####   START if paramsWFS\r\n    if (options.paramsWFS) {\r\n      const wfsCheckup = checkWfsParams(options, 'wms');\r\n      ObjectUtils.mergeDeep(options.paramsWFS, wfsCheckup.paramsWFS);\r\n\r\n      fieldNameGeometry = options.paramsWFS.fieldNameGeometry || fieldNameGeometry;\r\n\r\n      options.download = Object.assign({}, options.download, {\r\n        dynamicUrl: this.buildDynamicDownloadUrlFromParamsWFS(options)\r\n      });\r\n    } //  ####   END  if paramsWFS\r\n    if (!options.sourceFields || options.sourceFields.length === 0) {\r\n      options.sourceFields = [];\r\n    } else {\r\n      options.sourceFields.forEach(sourceField => {\r\n        sourceField.alias = sourceField.alias ? sourceField.alias : sourceField.name;\r\n        // to allow only a list of sourcefield with names\r\n      });\r\n    }\r\n    const initOgcFilters = (options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (!initOgcFilters) {\r\n      (options as OgcFilterableDataSourceOptions).ogcFilters =\r\n        ogcFilterWriter.defineOgcFiltersDefaultOptions(initOgcFilters, fieldNameGeometry, 'wms');\r\n    } else {\r\n      initOgcFilters.advancedOgcFilters = initOgcFilters.pushButtons ? false : true;\r\n    }\r\n    if (sourceParams.layers.split(',').length > 1 && options && initOgcFilters.enabled) {\r\n      console.log('*******************************');\r\n      console.log('BE CAREFULL, YOUR WMS LAYERS (' + sourceParams.layers\r\n      + ') MUST SHARE THE SAME FIELDS TO ALLOW ogcFilters TO WORK !! ');\r\n      console.log('*******************************');\r\n  }\r\n\r\n    if (options.paramsWFS && initOgcFilters.enabled) {\r\n      this.wfsService.getSourceFieldsFromWFS(options);\r\n    }\r\n\r\n    const filterQueryString = ogcFilterWriter.handleOgcFiltersAppliedValue(options, fieldNameGeometry);\r\n    this.ol.updateParams({ filter: filterQueryString });\r\n  }\r\n\r\n  refresh() {\r\n    this.ol.updateParams({ igoRefresh: Math.random() });\r\n  }\r\n\r\n  private buildDynamicDownloadUrlFromParamsWFS(asWFSDataSourceOptions) {\r\n    const queryStringValues = formatWFSQueryString(asWFSDataSourceOptions);\r\n    const downloadUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    return downloadUrl;\r\n  }\r\n\r\n  protected createOlSource(): olSourceImageWMS {\r\n    return new olSourceImageWMS(this.options);\r\n  }\r\n\r\n  getLegend(scale?: number): DataSourceLegendOptions[] {\r\n    let legend = super.getLegend();\r\n    if (legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    const sourceParams = this.params;\r\n\r\n    let layers = [];\r\n    if (sourceParams.layers !== undefined) {\r\n      layers = sourceParams.layers.split(',');\r\n    }\r\n\r\n    const baseUrl = this.options.url.replace(/\\?$/, '');\r\n    const params = [\r\n      'REQUEST=GetLegendGraphic',\r\n      'SERVICE=wms',\r\n      'FORMAT=image/png',\r\n      'SLD_VERSION=1.1.0',\r\n      `VERSION=${sourceParams.version || '1.3.0'}`\r\n    ];\r\n    if (scale !== undefined) {\r\n      params.push(`SCALE=${scale}`);\r\n    }\r\n\r\n    legend = layers.map((layer: string) => {\r\n      return {\r\n        url: `${baseUrl}?${params.join('&')}&LAYER=${layer}`,\r\n        title: layers.length > 1 ? layer : undefined\r\n      };\r\n    });\r\n\r\n    return legend;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olTileGridWMTS from 'ol/tilegrid/WMTS';\r\nimport * as olproj from 'ol/proj';\r\nimport {\r\n  getTopLeft as extentGetTopLeft,\r\n  getWidth as extentGetWidth\r\n} from 'ol/extent.js';\r\n\r\nexport function createDefaultTileGrid(epsg?: string): olTileGridWMTS {\r\n  const projection = epsg ? olproj.get(epsg) : olproj.get('EPSG:3857');\r\n  const projectionExtent = projection.getExtent();\r\n  const size = extentGetWidth(projectionExtent) / 256;\r\n  const resolutions = new Array(20);\r\n  const matrixIds = new Array(20);\r\n  for (let z = 0; z < 20; ++z) {\r\n    resolutions[z] = size / Math.pow(2, z);\r\n    matrixIds[z] = z;\r\n  }\r\n\r\n  return new olTileGridWMTS({\r\n    origin: extentGetTopLeft(projectionExtent),\r\n    resolutions,\r\n    matrixIds\r\n  });\r\n}\r\n","import olSourceWMTS from 'ol/source/WMTS';\r\n\r\nimport { createDefaultTileGrid } from '../../utils/tilegrid';\r\nimport { DataSource } from './datasource';\r\nimport { WMTSDataSourceOptions } from './wmts-datasource.interface';\r\n\r\nexport class WMTSDataSource extends DataSource {\r\n  public options: WMTSDataSourceOptions;\r\n  public ol: olSourceWMTS;\r\n\r\n  constructor(options: WMTSDataSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  protected createOlSource(): olSourceWMTS {\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        tileGrid: createDefaultTileGrid(this.options.projection as string)\r\n      },\r\n      this.options\r\n    );\r\n\r\n    return new olSourceWMTS(sourceOptions);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n}\r\n","import olSourceCarto from 'ol/source/CartoDB';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { CartoDataSourceOptions } from './carto-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class CartoDataSource extends DataSource {\r\n  public ol: olSourceCarto;\r\n  public options: CartoDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceCarto {\r\n    const crossOrigin = this.options.crossOrigin\r\n      ? this.options.crossOrigin\r\n      : 'anonymous';\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        crossOrigin\r\n      },\r\n      this.options\r\n    );\r\n    return new olSourceCarto(sourceOptions);\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legend = super.getLegend();\r\n    if (legend.length > 0) {\r\n      return legend;\r\n    }\r\n    let htmlString = '<table>';\r\n    if (this.options.config.layers[0].legend != null) {\r\n      this.options.config.layers[0].legend.items.forEach(f => {\r\n        if (f.visible === true) {\r\n          htmlString +=\r\n            '<tr><td>' +\r\n            '<p><font size=\"5\" color=\"' +\r\n            f.value +\r\n            '\"> &#9679</font></p></td>' +\r\n            '<td>' +\r\n            f.name +\r\n            '</td></tr>';\r\n        }\r\n      });\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    } else {\r\n      // Try to build the legend from the cartocss options\r\n      const layerOptions = this.options.config.layers[0].options;\r\n      // All available cartocss style options\r\n      const types = [\r\n        'polygon-fill:',\r\n        'marker-fill:',\r\n        'shield-fill:',\r\n        'building-fill:',\r\n        'line-color:'\r\n      ];\r\n      for (const oneType of types) {\r\n        if (layerOptions.cartocss.includes(oneType)) {\r\n          const type = layerOptions.cartocss.split(oneType).pop();\r\n          const color = type.substr(0, type.indexOf(';'));\r\n          if (color.includes('ramp')) {\r\n            const colors = color.split(', (')[1].split(',');\r\n            const data = color.split(', (')[2].split(',');\r\n            for (let j = 0; j < colors.length; j++) {\r\n              colors[j] = colors[j].replace(/(\"|\\))/g, '');\r\n              data[j] = data[j].replace(/(\"|\\))/g, '');\r\n              if (data[j].replace(/\\s+/g, '') === '=') {\r\n                data[j] = 'Autres';\r\n              }\r\n              htmlString +=\r\n                '<tr><td>' +\r\n                '<p><font size=\"5\" color=\"' +\r\n                colors[j] +\r\n                '\"> &#9679</font></p></td>' +\r\n                '<td>' +\r\n                data[j] +\r\n                '</td></tr>';\r\n            }\r\n            break;\r\n          } else {\r\n            const title = layerOptions.layer_name\r\n              ? layerOptions.layer_name\r\n              : '';\r\n            htmlString +=\r\n              '<tr><td>' +\r\n              '<p><font size=\"5\" color=\"' +\r\n              color +\r\n              '\"> &#9679</font></p>' +\r\n              '</td><td>' +\r\n              title +\r\n              '</td></tr>';\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    }\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport * as olloadingstrategy from 'ol/loadingstrategy';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { ArcGISRestDataSourceOptions } from './arcgisrest-datasource.interface';\r\n\r\nexport class ArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n  public options: ArcGISRestDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    const esrijsonFormat = new olFormatEsriJSON();\r\n    return new olSourceVector({\r\n      attributions: this.options.params.attributions,\r\n      overlaps: false,\r\n      format: esrijsonFormat,\r\n      url: function(extent, resolution, proj) {\r\n        const baseUrl = this.options.url + '/' + this.options.layer + '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        if (this.options.params.timeFilter) {\r\n          const time = `time=${this.options.params.timeExtent}`;\r\n          params.push(time);\r\n        }\r\n        if (this.options.params.customParams) {\r\n          this.options.params.customParams.forEach(element => {\r\n            params.push(element);\r\n          });\r\n        }\r\n        return `${baseUrl}?${params.join('&')}`;\r\n      }.bind(this),\r\n      strategy: olloadingstrategy.bbox\r\n    });\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legendInfo = this.options.params.legendInfo;\r\n    const legend = super.getLegend();\r\n    if (legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const modifiedUrl = this.options.url.replace(\r\n        'FeatureServer',\r\n        'MapServer'\r\n      );\r\n      const src = `${modifiedUrl}/${lyr.layerId}/images/${lyrLegend.url}`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceTileArcGISRest from 'ol/source/TileArcGISRest';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { TileArcGISRestDataSourceOptions } from './tilearcgisrest-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class TileArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceTileArcGISRest;\r\n  public options: TileArcGISRestDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceTileArcGISRest {\r\n    return new olSourceTileArcGISRest(this.options);\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legend = super.getLegend();\r\n    if (this.options.legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = this.options.legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const src = `${this.options.url}/${lyr.layerId}/images/${\r\n        lyrLegend.url\r\n      }`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { WebSocketDataSourceOptions } from './websocket-datasource.interface';\r\n\r\nexport class WebSocketDataSource extends FeatureDataSource {\r\n  public ws: WebSocket;\r\n  public options: WebSocketDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    this.createWebSocket();\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    return super.createOlSource();\r\n  }\r\n\r\n  private createWebSocket() {\r\n    this.ws = new WebSocket(this.options.url);\r\n    this.ws.onmessage = this.onMessage.bind(this);\r\n\r\n    if (this.options.onclose) {\r\n      this.ws.onclose = this.onClose.bind(this);\r\n    }\r\n\r\n    if (this.options.onerror) {\r\n      this.ws.onerror = this.onError.bind(this);\r\n    }\r\n\r\n    if (this.options.onopen) {\r\n      this.ws.onopen = this.onOpen.bind(this);\r\n    }\r\n  }\r\n\r\n  onMessage(event) {\r\n    const featureAdded = this.options.format.readFeature(event.data);\r\n\r\n    switch (this.options.onmessage) {\r\n      case 'update':\r\n        // ol don't add if same ID\r\n        const featureToRemove = this.ol.getFeatureById(featureAdded.getId());\r\n        if (featureToRemove) {\r\n          this.ol.removeFeature(featureToRemove);\r\n        }\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'delete':\r\n        this.ol.clear(true);\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'add':\r\n      default:\r\n        this.ol.addFeature(featureAdded);\r\n    }\r\n  }\r\n\r\n  onClose(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onError(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onOpen(event) {\r\n    // thrown message to user ?\r\n  }\r\n\r\n  public onUnwatch() {\r\n    this.ws.close();\r\n  }\r\n}\r\n","import { Md5 } from 'ts-md5';\r\nimport feature from 'ol/Feature';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\nimport olFormatMVT from 'ol/format/MVT';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { MVTDataSourceOptions } from './mvt-datasource.interface';\r\n\r\nexport class MVTDataSource extends DataSource {\r\n  public options: MVTDataSourceOptions;\r\n  public ol: olSourceVectorTile;\r\n\r\n  protected createOlSource(): olSourceVectorTile {\r\n    const mvtFormat = new olFormatMVT({featureClass: feature});\r\n    this.options.format = mvtFormat;\r\n    return new olSourceVectorTile(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    if (!this.options.url) {\r\n        return uuid();\r\n    }\r\n    const chain = 'mvt' + this.options.url;\r\n    return Md5.hashStr(chain) as string;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceCluster from 'ol/source/Cluster';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { ClusterDataSourceOptions } from './cluster-datasource.interface';\r\n\r\nexport class ClusterDataSource extends FeatureDataSource {\r\n  public options: ClusterDataSourceOptions;\r\n  public ol: olSourceCluster;\r\n\r\n  protected createOlSource(): olSourceCluster {\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    this.options.source = super.createOlSource();\r\n    return new olSourceCluster(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    return uuid();\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","export const FEATURE = 'Feature';\r\n\r\nexport enum FeatureMotion {\r\n  None,\r\n  Move,\r\n  Zoom,\r\n  Default\r\n}\r\n","export const LAYER = 'Layer';\r\n","import { Subject } from 'rxjs';\r\n\r\nimport olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource } from '../../../datasource';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { LayerOptions } from './layer.interface';\r\n\r\nexport abstract class Layer {\r\n  public collapsed: boolean;\r\n  public dataSource: DataSource;\r\n  public map: IgoMap;\r\n  public ol: olLayer;\r\n  public options: LayerOptions;\r\n  public status$: Subject<SubjectStatus>;\r\n\r\n  get id(): string {\r\n    return this.options.id || this.dataSource.id;\r\n  }\r\n\r\n  get alias(): string {\r\n    return this.options.alias;\r\n  }\r\n\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  set title(title: string) {\r\n    this.options.title = title;\r\n  }\r\n\r\n  get zIndex(): number {\r\n    return this.ol.getZIndex();\r\n  }\r\n\r\n  set zIndex(zIndex: number) {\r\n    this.ol.setZIndex(zIndex);\r\n  }\r\n\r\n  get baseLayer(): boolean {\r\n    return this.options.baseLayer;\r\n  }\r\n\r\n  set baseLayer(baseLayer: boolean) {\r\n    this.options.baseLayer = baseLayer;\r\n  }\r\n\r\n  get visible(): boolean {\r\n    return this.ol.get('visible');\r\n  }\r\n\r\n  set visible(visibility: boolean) {\r\n    this.ol.setVisible(visibility);\r\n  }\r\n\r\n  get opacity(): number {\r\n    return this.ol.get('opacity');\r\n  }\r\n\r\n  set opacity(opacity: number) {\r\n    this.ol.setOpacity(opacity);\r\n  }\r\n\r\n  get isInResolutionsRange(): boolean {\r\n    if (!this.map) {\r\n      return false;\r\n    }\r\n\r\n    const resolution = this.map.viewController.getResolution();\r\n    const minResolution = this.ol.getMinResolution();\r\n    const maxResolution = this.ol.getMaxResolution();\r\n\r\n    return resolution >= minResolution && resolution <= maxResolution;\r\n  }\r\n\r\n  get showInLayerList(): boolean { return this.options.showInLayerList !== false; }\r\n\r\n  constructor(options: LayerOptions) {\r\n    this.options = options;\r\n    this.dataSource = this.options.source;\r\n\r\n    this.ol = this.createOlLayer();\r\n    if (this.options.zIndex !== undefined) {\r\n      this.zIndex = this.options.zIndex;\r\n    }\r\n\r\n    if (this.options.baseLayer && this.options.visible === undefined) {\r\n      this.options.visible = false;\r\n    }\r\n    this.visible =\r\n      this.options.visible === undefined ? true : this.options.visible;\r\n    this.opacity =\r\n      this.options.opacity === undefined ? 1 : this.options.opacity;\r\n\r\n    this.ol.set('_layer', this, true);\r\n  }\r\n\r\n  protected abstract createOlLayer(): olLayer;\r\n\r\n  setMap(map: IgoMap | undefined) {\r\n    this.map = map;\r\n  }\r\n}\r\n","import olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource } from '../../../datasource/shared/datasources/datasource';\r\nimport { DataSourceOptions } from '../../../datasource/shared/datasources/datasource.interface';\r\n\r\nexport interface LayerOptions {\r\n  source?: DataSource;\r\n  sourceOptions?: DataSourceOptions;\r\n  title?: string;\r\n  id?: string;\r\n  alias?: string;\r\n  baseLayer?: boolean;\r\n  opacity?: number;\r\n  visible?: boolean;\r\n  extent?: [number, number, number, number];\r\n  zIndex?: number;\r\n  minResolution?: number;\r\n  maxResolution?: number;\r\n  showInLayerList?: boolean;\r\n  removable?: boolean;\r\n  ol?: olLayer;\r\n  tooltip?: TooltipContent;\r\n}\r\n\r\nexport interface GroupLayers {\r\n  title: string;\r\n  layers?: LayerOptions;\r\n  collapsed?: boolean;\r\n}\r\n\r\nexport interface LayerLegend {\r\n  title: string;\r\n  url: string;\r\n  image: string;\r\n}\r\n\r\nexport interface TooltipContent {\r\n  type?: TooltipType;\r\n  text?: string;\r\n}\r\nexport enum TooltipType {\r\n  TITLE = 'title',\r\n  ABSTRACT = 'abstract',\r\n  CUSTOM = 'custom'\r\n}\r\n","import olSourceImage from 'ol/source/Image';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { ImageLayer } from '../shared/layers/image-layer';\r\n\r\nexport class ImageWatcher extends Watcher {\r\n  protected id: string;\r\n  protected loaded = 0;\r\n  protected loading = 0;\r\n\r\n  private source: olSourceImage;\r\n\r\n  constructor(layer: ImageLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    if (!event.image.__watchers__) {\r\n      event.image.__watchers__ = [];\r\n    }\r\n    event.image.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.image.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.image.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.image.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import olSourceTile from 'ol/source/Tile';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { TileLayer } from '../shared/layers/tile-layer';\r\n\r\nexport class TileWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private source: olSourceTile;\r\n\r\n  constructor(layer: TileLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    // This is to avoid increasing\r\n    // the number of loaded tiles if a tile was loading\r\n    // before subscribing to this watcher\r\n    if (!event.tile.__watchers__) {\r\n      event.tile.__watchers__ = [];\r\n    }\r\n    event.tile.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.tile.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.tile.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.tile.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { VectorLayer } from '../shared/layers/vector-layer';\r\n\r\nexport class VectorWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private layer: VectorLayer;\r\n\r\n  constructor(layer: VectorLayer) {\r\n    super();\r\n    this.layer = layer;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.layer.onUnwatch();\r\n  }\r\n}\r\n","import { Layer } from '../shared/layers/layer';\r\nimport { LayerLegend } from '../shared/layers/layer.interface';\r\n\r\n/**\r\n * Get all the layers legend\r\n * @return Array of legend\r\n */\r\nexport function getLayersLegends(layers: Layer[], scale?: number): LayerLegend[] {\r\n  const legends = [];\r\n  const newCanvas = document.createElement('canvas');\r\n  const newContext = newCanvas.getContext('2d');\r\n  newContext.font = '20px Calibri';\r\n\r\n  let heightPos = 0;\r\n  for (const layer of layers) {\r\n    if (layer.visible === false) { continue; }\r\n\r\n    const legendUrls = layer.dataSource.getLegend(scale) || [];\r\n    for (const legendUrl of legendUrls) {\r\n      if (legendUrl.url === undefined) { continue; }\r\n\r\n      const title = layer.title;\r\n      // Create an image for the legend\r\n      const legendImage = new Image();\r\n      legendImage.crossOrigin = 'anonymous';\r\n      legendImage.src = legendUrl.url;\r\n      legendImage.onload = () => {\r\n        newContext.fillText(title, 0, heightPos);\r\n        newContext.drawImage(legendImage, 0, heightPos + 20);\r\n        heightPos += legendImage.height + 5;\r\n      };\r\n      // Add legend info to the list\r\n      legends.push({\r\n        title,\r\n        url: legendUrl.url,\r\n        image: legendImage\r\n      });\r\n    }\r\n  }\r\n\r\n  return legends;\r\n}\r\n","import olLayerImage from 'ol/layer/Image';\r\nimport olSourceImage from 'ol/source/Image';\r\n\r\nimport { ImageWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { WMSDataSource } from '../../../datasource/shared/datasources/wms-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { ImageLayerOptions } from './image-layer.interface';\r\n\r\nexport class ImageLayer extends Layer {\r\n  public dataSource: WMSDataSource;\r\n  public options: ImageLayerOptions;\r\n  public ol: olLayerImage;\r\n\r\n  private watcher: ImageWatcher;\r\n\r\n  constructor(options: ImageLayerOptions) {\r\n    super(options);\r\n\r\n    this.watcher = new ImageWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerImage {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceImage\r\n    });\r\n\r\n    const image = new olLayerImage(olOptions);\r\n    const token = this.options.token;\r\n    if (token) {\r\n      (image.getSource() as any).setImageLoadFunction((tile, src) => {\r\n        this.customLoader(tile, src, token);\r\n      });\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  private customLoader(tile, src, token?) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', src);\r\n\r\n    xhr.setRequestHeader('Authorization', 'Bearer ' + token);\r\n    xhr.responseType = 'arraybuffer';\r\n\r\n    xhr.onload = function() {\r\n      const arrayBufferView = new Uint8Array((this as any).response);\r\n      const blob = new Blob([arrayBufferView], { type: 'image/png' });\r\n      const urlCreator = window.URL;\r\n      const imageUrl = urlCreator.createObjectURL(blob);\r\n      tile.getImage().src = imageUrl;\r\n    };\r\n    xhr.send();\r\n  }\r\n}\r\n","import olLayerTile from 'ol/layer/Tile';\r\nimport olSourceTile from 'ol/source/Tile';\r\n\r\nimport { TileWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { OSMDataSource } from '../../../datasource/shared/datasources/osm-datasource';\r\nimport { WMTSDataSource } from '../../../datasource/shared/datasources/wmts-datasource';\r\nimport { XYZDataSource } from '../../../datasource/shared/datasources/xyz-datasource';\r\nimport { CartoDataSource } from '../../../datasource/shared/datasources/carto-datasource';\r\nimport { TileArcGISRestDataSource } from '../../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { TileLayerOptions } from './tile-layer.interface';\r\n\r\nexport class TileLayer extends Layer {\r\n  public dataSource:\r\n    | OSMDataSource\r\n    | WMTSDataSource\r\n    | XYZDataSource\r\n    | CartoDataSource\r\n    | TileArcGISRestDataSource;\r\n  public options: TileLayerOptions;\r\n  public ol: olLayerTile;\r\n\r\n  private watcher: TileWatcher;\r\n\r\n  constructor(options: TileLayerOptions) {\r\n    super(options);\r\n\r\n    this.watcher = new TileWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceTile\r\n    });\r\n\r\n    return new olLayerTile(olOptions);\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n}\r\n","import olLayerVector from 'ol/layer/Vector';\r\nimport olSourceVector from 'ol/source/Vector';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { asArray as ColorAsArray } from 'ol/color';\r\n\r\nimport { FeatureDataSource } from '../../../datasource/shared/datasources/feature-datasource';\r\nimport { WFSDataSource } from '../../../datasource/shared/datasources/wfs-datasource';\r\nimport { ArcGISRestDataSource } from '../../../datasource/shared/datasources/arcgisrest-datasource';\r\nimport { WebSocketDataSource } from '../../../datasource/shared/datasources/websocket-datasource';\r\nimport { ClusterDataSource } from '../../../datasource/shared/datasources/cluster-datasource';\r\n\r\nimport { VectorWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\nimport { Layer } from './layer';\r\nimport { VectorLayerOptions } from './vector-layer.interface';\r\n\r\nexport class VectorLayer extends Layer {\r\n  public dataSource: FeatureDataSource | WFSDataSource | ArcGISRestDataSource | WebSocketDataSource | ClusterDataSource;\r\n  public options: VectorLayerOptions;\r\n  public ol: olLayerVector;\r\n  private watcher: VectorWatcher;\r\n\r\n  get browsable(): boolean {\r\n    return this.options.browsable !== false;\r\n  }\r\n\r\n  get exportable(): boolean {\r\n    return this.options.exportable !== false;\r\n  }\r\n\r\n  constructor(options: VectorLayerOptions) {\r\n    super(options);\r\n    this.watcher = new VectorWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVector {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVector\r\n    });\r\n\r\n    if (this.options.animation) {\r\n      this.dataSource.ol.on(\r\n        'addfeature',\r\n        function(e) {\r\n          this.flash(e.feature);\r\n        }.bind(this)\r\n      );\r\n    }\r\n\r\n    return new olLayerVector(olOptions);\r\n  }\r\n\r\n  protected flash(feature) {\r\n    const start = new Date().getTime();\r\n    const listenerKey = this.map.ol.on('postcompose', animate.bind(this));\r\n\r\n    function animate(event) {\r\n      const vectorContext = event.vectorContext;\r\n      const frameState = event.frameState;\r\n      const flashGeom = feature.getGeometry().clone();\r\n      const elapsed = frameState.time - start;\r\n      const elapsedRatio = elapsed / this.options.animation.duration;\r\n      const opacity = easeOut(1 - elapsedRatio);\r\n      const newColor = ColorAsArray(this.options.animation.color || 'red');\r\n      newColor[3] = opacity;\r\n      const style = this.ol.getStyleFunction().call(this, feature)[0];\r\n      const styleClone = style.clone();\r\n\r\n      switch (feature.getGeometry().getType()) {\r\n        case 'Point':\r\n          const radius =\r\n            easeOut(elapsedRatio) * (styleClone.getImage().getRadius() * 3);\r\n          styleClone.getImage().setRadius(radius);\r\n          styleClone.getImage().setOpacity(opacity);\r\n          break;\r\n        case 'LineString':\r\n          // TODO\r\n          if (styleClone.getImage().getStroke()) {\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setColor(newColor);\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) *\r\n                  (styleClone\r\n                    .getImage()\r\n                    .getStroke()\r\n                    .getWidth() *\r\n                    3)\r\n              );\r\n          }\r\n          if (styleClone.getStroke()) {\r\n            styleClone.getStroke().setColor(newColor);\r\n            styleClone\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) * (styleClone.getStroke().getWidth() * 3)\r\n              );\r\n          }\r\n          break;\r\n        case 'Polygon':\r\n          // TODO\r\n          if (styleClone.getImage().getFill()) {\r\n            styleClone\r\n              .getImage()\r\n              .getFill()\r\n              .setColor(newColor);\r\n          }\r\n          if (styleClone.getFill()) {\r\n            styleClone.getFill().setColor(newColor);\r\n          }\r\n          break;\r\n      }\r\n\r\n      vectorContext.setStyle(styleClone);\r\n      vectorContext.drawGeometry(flashGeom);\r\n\r\n      if (elapsed > this.options.animation.duration) {\r\n        unByKey(listenerKey);\r\n        // remove last geometry\r\n        // there is a little flash before feature disappear, better solution ?\r\n        this.map.ol.render();\r\n        return;\r\n      }\r\n      // tell OpenLayers to continue postcompose animation\r\n      this.map.ol.render();\r\n    }\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  public onUnwatch() {\r\n    this.dataSource.onUnwatch();\r\n    this.stopAnimation();\r\n  }\r\n\r\n  public stopAnimation() {\r\n    this.dataSource.ol.un(\r\n      'addfeature',\r\n      function(e) {\r\n        this.flash(e.feature);\r\n      }.bind(this)\r\n    );\r\n  }\r\n}\r\n","import olLayerVectorTile from 'ol/layer/VectorTile';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\n\r\nimport { MVTDataSource } from '../../../datasource/shared/datasources/mvt-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { VectorTileLayerOptions } from './vectortile-layer.interface';\r\n\r\nexport class VectorTileLayer extends Layer {\r\n  public dataSource: MVTDataSource;\r\n  public options: VectorTileLayerOptions;\r\n  public ol: olLayerVectorTile;\r\n\r\n  constructor(options: VectorTileLayerOptions) {\r\n    super(options);\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVectorTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVectorTile\r\n    });\r\n\r\n    return new olLayerVectorTile(olOptions);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\nimport { StyleByAttribute } from './stylebyattribute';\r\n\r\nimport { ClusterParam } from './clusterParam';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleService {\r\n  constructor() {}\r\n\r\n  createStyle(options: { [key: string]: any }) {\r\n    return this.parseStyle('style', options);\r\n  }\r\n\r\n  private parseStyle(key: string, value: any): olstyle {\r\n    const styleOptions = {};\r\n    const olCls = this.getOlCls(key);\r\n\r\n    if (olCls && value instanceof Object) {\r\n      Object.keys(value).forEach(_key => {\r\n        const olKey = this.getOlKey(_key);\r\n        styleOptions[olKey] = this.parseStyle(_key, value[_key]);\r\n      });\r\n      return new olCls(styleOptions);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  private getOlKey(key: any) {\r\n    let olKey = key.toLowerCase();\r\n    switch (olKey) {\r\n      case 'circle':\r\n      case 'regularshape':\r\n      case 'icon':\r\n        olKey = 'image';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return olKey;\r\n  }\r\n\r\n  private getOlCls(key: any) {\r\n    let olCls = olstyle[key.charAt(0).toUpperCase() + key.slice(1)];\r\n    if (key === 'regularshape') {\r\n      olCls = olstyle.RegularShape;\r\n    }\r\n\r\n    return olCls;\r\n  }\r\n  createStyleByAttribute(feature, styleByAttribute: StyleByAttribute) {\r\n    let style;\r\n    const type = styleByAttribute.type;\r\n    const attribute = styleByAttribute.attribute;\r\n    const data = styleByAttribute.data;\r\n    const stroke = styleByAttribute.stroke;\r\n    const width = styleByAttribute.width;\r\n    const fill = styleByAttribute.fill;\r\n    const radius = styleByAttribute.radius;\r\n    const icon = styleByAttribute.icon;\r\n    const scale = styleByAttribute.scale;\r\n    const size = data.length;\r\n    const label = styleByAttribute.label;\r\n    const baseStyle = styleByAttribute.baseStyle;\r\n    if (type === 'circle') {\r\n      for (let i = 0; i < size; i++) {\r\n        if (feature.get(attribute) === data[i]) {\r\n          if (icon) {\r\n            style = [\r\n              new olstyle.Style({\r\n                image: new olstyle.Icon({\r\n                  src: icon[i],\r\n                  scale: scale ? scale[i] : 1\r\n                })\r\n              })\r\n            ];\r\n            return style;\r\n          }\r\n          style = [\r\n            new olstyle.Style({\r\n              image: new olstyle.Circle({\r\n                radius: radius ? radius[i] : 4,\r\n                stroke: new olstyle.Stroke({\r\n                  color: stroke ? stroke[i] : 'black'\r\n                }),\r\n                fill: new olstyle.Fill({\r\n                  color: fill ? fill[i] : 'black'\r\n                })\r\n              })\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n      if (!feature.getStyle()) {\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: 4,\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: '#bbbbf2'\r\n              })\r\n            })\r\n          })\r\n        ];\r\n        return style;\r\n      }\r\n    } else if (type === 'regular') {\r\n      for (let i = 0; i < size; i++) {\r\n        if (feature.get(attribute) === data[i]) {\r\n          style = [\r\n            new olstyle.Style({\r\n              stroke: new olstyle.Stroke({\r\n                color: stroke ? stroke[i] : 'black',\r\n                width: width ? width[i] : 1\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: fill ? fill[i] : 'rgba(255,255,255,0.4)'\r\n              }),\r\n              text: new olstyle.Text({\r\n                text: feature.get(label),\r\n                stroke: new olstyle.Stroke({\r\n                  color: 'black'\r\n                })\r\n              })\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n      if (!feature.getStyle()) {\r\n        if (baseStyle) {\r\n          style = this.createStyle(baseStyle);\r\n          return style;\r\n        }\r\n        style = [\r\n          new olstyle.Style({\r\n            stroke: new olstyle.Stroke({\r\n              color: 'black'\r\n            }),\r\n            fill: new olstyle.Fill({\r\n              color: '#bbbbf2'\r\n            })\r\n          })\r\n        ];\r\n        return style;\r\n      }\r\n    }\r\n  }\r\n\r\n  createClusterStyle(feature, clusterParam: ClusterParam) {\r\n    let style;\r\n    const range = clusterParam.clusterRange;\r\n    const icon = clusterParam.clusterIcon;\r\n    const scale = clusterParam.clusterScale;\r\n    const size = feature.get('features').length;\r\n    let color;\r\n    if (size !== 1) {\r\n      if (range) {\r\n        if (size >= range[1]) {\r\n          color = 'red';\r\n        } else if (size < range[1] && size >= range[0]) {\r\n          color = 'orange';\r\n        } else if (size < range[0]) {\r\n          color = 'green';\r\n        }\r\n      }\r\n      style = [\r\n        new olstyle.Style({\r\n          image: new olstyle.Circle({\r\n            radius: 2 * size + 3.4,\r\n            stroke: new olstyle.Stroke({\r\n              color: 'black'\r\n            }),\r\n            fill: new olstyle.Fill({\r\n              color: range ? color : 'blue'\r\n            })\r\n          }),\r\n          text: new olstyle.Text({\r\n            text: size.toString(),\r\n            fill: new olstyle.Fill({\r\n              color: '#fff'\r\n            })\r\n          })\r\n        })\r\n      ];\r\n    } else {\r\n      if (icon) {\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Icon({\r\n              src: icon,\r\n              scale\r\n            })\r\n          })\r\n        ];\r\n      } else {\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: 2 * size + 3.4,\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: 'blue'\r\n              })\r\n            })\r\n          })\r\n        ];\r\n      }\r\n    }\r\n    return style;\r\n  }\r\n}\r\n","import OlLayer from 'ol/layer/Layer';\r\n\r\nimport { AnyLayer } from '../../layer/shared/layers/any-layer';\r\nimport { QueryableDataSource } from './query.interfaces';\r\n\r\n/**\r\n * Whether a layer is queryable\r\n * @param layer Layer\r\n * @returns True if the layer s squeryable\r\n */\r\nexport function layerIsQueryable(layer: AnyLayer): boolean {\r\n  const dataSource = layer.dataSource as QueryableDataSource;\r\n  return dataSource.options.queryable === true;\r\n}\r\n\r\n/**\r\n * Whether an OL layer is queryable\r\n * @param layer Layer\r\n * @returns True if the ol layer is queryable\r\n */\r\nexport function olLayerIsQueryable(olLayer: OlLayer): boolean {\r\n  const layer = olLayer.get('_layer');\r\n  return layer === undefined ? false : layerIsQueryable(layer);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\nimport { layerIsQueryable } from '../../query/shared/query.utils';\r\nimport { Layer, TooltipType } from '../shared/layers';\r\n\r\n@Component({\r\n  selector: 'igo-layer-item',\r\n  templateUrl: './layer-item.component.html',\r\n  styleUrls: ['./layer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerItemComponent implements OnInit, OnDestroy {\r\n\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  inResolutionRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  queryBadgeHidden$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  tooltipText: string;\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendIfVisible: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() orderable: boolean = true;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  get removable(): boolean { return this.layer.options.removable !== false; }\r\n\r\n  get opacity() { return this.layer.opacity * 100; }\r\n  set opacity(opacity: number) { this.layer.opacity = opacity / 100; }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    const legend = this.layer.dataSource.options.legend || {};\r\n    let legendCollapsed = legend.collapsed === false ? false : true;\r\n    if (this.layer.visible && this.expandLegendIfVisible) {\r\n      legendCollapsed = false;\r\n    }\r\n    this.toggleLegend(legendCollapsed);\r\n    this.updateQueryBadge();\r\n\r\n    const resolution$ = this.layer.map.viewController.resolution$;\r\n    this.resolution$$ = resolution$.subscribe((resolution: number) => {\r\n      this.onResolutionChange(resolution);\r\n    });\r\n    this.tooltipText = this.computeTooltip();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.resolution$$.unsubscribe();\r\n  }\r\n\r\n  toggleLegend(collapsed: boolean) {\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleVisibility() {\r\n    this.layer.visible = !this.layer.visible;\r\n    if (this.toggleLegendOnVisibilityChange) {\r\n      this.toggleLegend(!this.layer.visible);\r\n    }\r\n    this.updateQueryBadge();\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    const layerOptions = this.layer.options;\r\n    if (!layerOptions.tooltip) {\r\n      return this.layer.title;\r\n    }\r\n    const layerTooltip = layerOptions.tooltip;\r\n    const layerMetadata = (layerOptions as MetadataLayerOptions).metadata;\r\n    switch (layerOptions.tooltip.type) {\r\n      case TooltipType.TITLE:\r\n        return this.layer.title;\r\n      case TooltipType.ABSTRACT:\r\n        if (layerMetadata && layerMetadata.abstract) {\r\n          return layerMetadata.abstract;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      case TooltipType.CUSTOM:\r\n        if (layerTooltip && layerTooltip.text) {\r\n          return layerTooltip.text;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      default:\r\n        return this.layer.title;\r\n    }\r\n  }\r\n\r\n  private onResolutionChange(resolution: number) {\r\n    const inResolutionRange = this.layer.isInResolutionsRange;\r\n    if (inResolutionRange === false && this.updateLegendOnResolutionChange === true) {\r\n      this.toggleLegend(true);\r\n    }\r\n    this.inResolutionRange$.next(inResolutionRange);\r\n  }\r\n\r\n  private updateQueryBadge() {\r\n    const hidden = this.queryBadge === false ||\r\n      this.layer.visible === false ||\r\n      !layerIsQueryable(this.layer);\r\n    this.queryBadgeHidden$.next(hidden);\r\n  }\r\n}\r\n","import { Component, Input, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Subscription, BehaviorSubject, of, Observable } from 'rxjs';\r\n\r\nimport { DataSourceLegendOptions } from '../../datasource/shared/datasources/datasource.interface';\r\nimport { Layer } from '../shared/layers';\r\nimport { CapabilitiesService } from '../../datasource/shared/capabilities.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'igo-layer-legend',\r\n  templateUrl: './layer-legend.component.html',\r\n  styleUrls: ['./layer-legend.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerLegendComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  /**\r\n   * Observable of the legend items\r\n   */\r\n  legendItems$: BehaviorSubject<DataSourceLegendOptions[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Subscription to the map's resolution\r\n   */\r\n  private resolution$$: Subscription;\r\n  /**\r\n   * Layer\r\n   */\r\n  @Input() layer: Layer;\r\n\r\n  constructor(private capabilitiesService: CapabilitiesService) {}\r\n\r\n  /**\r\n   * On init, subscribe to the map's resolution and update the legend accordingly\r\n   */\r\n  ngOnInit() {\r\n    if (this.updateLegendOnResolutionChange === true) {\r\n      const resolution$ = this.layer.map.viewController.resolution$;\r\n      this.resolution$$ = resolution$.subscribe((resolution: number) => this.onResolutionChange(resolution));\r\n    } else {\r\n      this.updateLegend(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On destroy, unsubscribe to the map,s resolution\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.resolution$$ !== undefined) {\r\n      this.resolution$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  computeItemTitle(layerLegend): Observable<string> {\r\n    const layerOptions = this.layer.dataSource.options as any;\r\n    if (layerOptions.type !== 'wms') {\r\n      return of(layerLegend.title);\r\n    }\r\n\r\n    const layers = layerOptions.params.layers.split(',');\r\n    const localLayerOptions = JSON.parse(JSON.stringify(layerOptions)); // to avoid to alter the original options.\r\n    localLayerOptions.params.layers = layers.find(layer => layer === layerLegend.title);\r\n    return this.capabilitiesService\r\n      .getWMSOptions(localLayerOptions)\r\n      .pipe(map(wmsDataSourceOptions => {\r\n        return wmsDataSourceOptions._layerOptionsFromCapabilities.title;\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * On resolution change, compute the effective scale level and update the\r\n   * legend accordingly.\r\n   * @param resolutione Map resolution\r\n   */\r\n  private onResolutionChange(resolution: number) {\r\n    const scale = this.layer.map.viewController.getScale();\r\n    this.updateLegend(scale);\r\n  }\r\n\r\n  /**\r\n   * Update the legend according the scale level\r\n   * @param scale Map scale level\r\n   */\r\n  private updateLegend(scale: number | undefined) {\r\n    const legendItems = this.layer.dataSource.getLegend(scale);\r\n    if (legendItems.length === 0 && this.legendItems$.value.length === 0) {\r\n      return;\r\n    }\r\n    this.legendItems$.next(legendItems);\r\n  }\r\n}\r\n","export enum LayerListControlsEnum {\r\n  always = 'always',\r\n  never = 'never',\r\n  default = 'default'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerListService {\r\n  public keyword: string;\r\n  public sortedAlpha = false;\r\n  public onlyVisible = false;\r\n  public onlyInRange = false;\r\n  public keywordInitialized = false;\r\n  public sortedAlphaInitialized = false;\r\n  public onlyVisibleInitialized = false;\r\n  public onlyInRangeInitialized = false;\r\n\r\n  constructor() {}\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  TemplateRef,\r\n  ContentChild,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { Layer } from '../shared';\r\nimport { LayerListControlsEnum } from './layer-list.enum';\r\nimport { LayerListService } from './layer-list.service';\r\nimport { BehaviorSubject, ReplaySubject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce } from 'rxjs/operators';\r\nimport { MetadataOptions, MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\n\r\n// TODO: This class could use a clean up. Also, some methods could be moved ealsewhere\r\n@Component({\r\n  selector: 'igo-layer-list',\r\n  templateUrl: './layer-list.component.html',\r\n  styleUrls: ['./layer-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerListComponent implements OnInit, OnDestroy {\r\n\r\n  hasLayerNotVisible = false;\r\n  hasLayerOutOfRange = false;\r\n  orderable = true;\r\n  thresholdToFilterAndSort = 5;\r\n\r\n  layers$: BehaviorSubject<Layer[]> = new BehaviorSubject([]);\r\n\r\n  change$ = new ReplaySubject<void>(1);\r\n\r\n  showToolbar$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private change$$: Subscription;\r\n\r\n  @ContentChild('igoLayerItemToolbar') templateLayerToolbar: TemplateRef<any>;\r\n\r\n  @Input()\r\n  set layers(value: Layer[]) {\r\n    this.setLayers(value);\r\n    this.next();\r\n  }\r\n  get layers(): Layer[] { return this._layers; }\r\n  private _layers: Layer[];\r\n\r\n  @Input() placeholder: string = '';\r\n\r\n  @Input() floatLabel: FloatLabelType = 'auto';\r\n\r\n  @Input() layerFilterAndSortOptions: any = {};\r\n\r\n  @Input() excludeBaseLayers: boolean = false;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendOfVisibleLayers: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  get keyword(): string { return this.layerListService.keyword; }\r\n  set keyword(value: string) {\r\n    this.layerListService.keyword = value;\r\n    this.next();\r\n  }\r\n\r\n  get keywordInitialized(): boolean { return this.layerListService.keywordInitialized; }\r\n  set keywordInitialized(value: boolean) { this.layerListService.keywordInitialized = value; }\r\n\r\n  get onlyVisible(): boolean { return this.layerListService.onlyVisible; }\r\n  set onlyVisible(value: boolean) {\r\n    this.layerListService.onlyVisible = value;\r\n    this.next();\r\n  }\r\n\r\n  get onlyVisibleInitialized(): boolean { return this.layerListService.onlyVisibleInitialized; }\r\n  set onlyVisibleInitialized(value: boolean) { this.layerListService.onlyVisibleInitialized = value; }\r\n\r\n  get onlyInRange(): boolean { return this.layerListService.onlyInRange; }\r\n  set onlyInRange(value: boolean) {\r\n    this.layerListService.onlyInRange = value;\r\n    this.next();\r\n  }\r\n\r\n  get onlyInRangeInitialized(): boolean { return this.layerListService.onlyInRangeInitialized; }\r\n  set onlyInRangeInitialized(value: boolean) { this.layerListService.onlyInRangeInitialized = value; }\r\n\r\n  get sortedAlpha(): boolean { return this.layerListService.sortedAlpha; }\r\n  set sortedAlpha(value: boolean) {\r\n    this.layerListService.sortedAlpha = value;\r\n    this.next();\r\n  }\r\n\r\n  get sortedAlphaInitialized(): boolean { return this.layerListService.sortedAlphaInitialized; }\r\n  set sortedAlphaInitialized(value: boolean) { this.layerListService.sortedAlphaInitialized = value; }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private layerListService: LayerListService\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.change$$ = this.change$\r\n      .pipe(\r\n        debounce(() => {\r\n          return this.layers.length === 0 ? EMPTY : timer(50);\r\n        })\r\n      ).subscribe(() => {\r\n        this.showToolbar$.next(this.computeShowToolbar());\r\n        this.layers$.next(this.computeLayers(this.layers.slice(0)));\r\n      });\r\n\r\n    this.initLayerFilterAndSortOptions();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change$$.unsubscribe();\r\n  }\r\n\r\n  toggleOnlyVisible() {\r\n    this.onlyVisible = !this.onlyVisible;\r\n  }\r\n\r\n  toggleOnlyInRange() {\r\n    this.onlyInRange = !this.onlyInRange;\r\n  }\r\n\r\n  toggleSort(sortAlpha: boolean) {\r\n    this.sortedAlpha = sortAlpha;\r\n  }\r\n\r\n  clearKeyword() {\r\n    this.keyword = undefined;\r\n  }\r\n\r\n  private next() {\r\n    this.change$.next();\r\n  }\r\n\r\n  private computeLayers(layers: Layer[]): Layer[] {\r\n    let layersOut = this.filterLayers(layers);\r\n    if (this.sortedAlpha) {\r\n      layersOut = this.sortLayersByTitle(layersOut);\r\n    } else {\r\n      layersOut = this.sortLayersByZindex(layersOut);\r\n    }\r\n    return layersOut;\r\n  }\r\n\r\n  private filterLayers(layers: Layer[]): Layer[] {\r\n    const keyword = this.keyword;\r\n    if (this.layerFilterAndSortOptions.showToolbar === LayerListControlsEnum.never) {\r\n      return layers;\r\n    }\r\n    if (!keyword && !this.onlyInRange && !this.onlyVisible) {\r\n      return layers;\r\n    }\r\n\r\n    const keepLayerIds = layers.map((layer: Layer) => layer.id);\r\n\r\n    layers.forEach((layer: Layer) => {\r\n      const layerOptions = layer.options as MetadataLayerOptions || {};\r\n      const dataSourceOptions = layer.dataSource.options || {};\r\n      const metadata = layerOptions.metadata || {} as MetadataOptions;\r\n      const keywords = metadata.keywordList || [] ;\r\n      const layerKeywords = keywords.map((kw: string) => {\r\n        return kw.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      });\r\n\r\n      if (keyword) {\r\n        const localKeyword = keyword.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n        const layerTitle = layer.title.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n        const dataSourceType = dataSourceOptions.type || '';\r\n        const keywordRegex = new RegExp(localKeyword, 'gi');\r\n        const keywordInList = layerKeywords.find((kw: string) => keywordRegex.test(kw)) !== undefined;\r\n        if (\r\n          !keywordRegex.test(layerTitle) &&\r\n          !(keyword.toLowerCase() === dataSourceType.toLowerCase()) &&\r\n          !keywordInList\r\n        ) {\r\n          const index = keepLayerIds.indexOf(layer.id);\r\n          if (index > -1) {\r\n            keepLayerIds.splice(index, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.onlyVisible && layer.visible === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (this.onlyInRange && layer.isInResolutionsRange === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n    });\r\n\r\n    return layers.filter((layer: Layer) => keepLayerIds.indexOf(layer.id) !== -1);\r\n  }\r\n\r\n  private sortLayersByZindex(layers: Layer[]) {\r\n    return layers.sort((layer1, layer2) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  private sortLayersByTitle(layers: Layer[]) {\r\n    return layers.sort((a, b) => {\r\n      if (a.title < b.title) {\r\n        return -1;\r\n      }\r\n      if (a.title > b.title) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  private computeOrderable(): boolean {\r\n    if (this.onlyInRange || this.onlyVisible ||\r\n      this.sortedAlpha || this.keyword) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private computeShowToolbar(): boolean {\r\n    switch (this.layerFilterAndSortOptions.showToolbar) {\r\n      case LayerListControlsEnum.always:\r\n        return true;\r\n      case LayerListControlsEnum.never:\r\n        return false;\r\n      default:\r\n        if (this.layers.length >= this.thresholdToFilterAndSort ||\r\n          this.keyword ||\r\n          this.onlyInRange ||\r\n          this.onlyVisible) {\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private initLayerFilterAndSortOptions() {\r\n    if (this.layerFilterAndSortOptions.toolbarThreshold) {\r\n      this.thresholdToFilterAndSort = this.layerFilterAndSortOptions.toolbarThreshold;\r\n    }\r\n\r\n    if (this.layerFilterAndSortOptions.keyword && !this.keywordInitialized) {\r\n      this.keyword = this.layerFilterAndSortOptions.keyword;\r\n      this.keywordInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.sortedAlpha && !this.sortedAlphaInitialized) {\r\n      this.sortedAlpha = this.layerFilterAndSortOptions.sortedAlpha;\r\n      this.sortedAlphaInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.onlyVisible && !this.onlyVisibleInitialized &&\r\n      this.hasLayerNotVisible) {\r\n      this.onlyVisible = this.layerFilterAndSortOptions.onlyVisible;\r\n      this.onlyVisibleInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.onlyInRange && !this.onlyInRangeInitialized &&\r\n      this.hasLayerOutOfRange) {\r\n      this.onlyInRange = this.layerFilterAndSortOptions.onlyInRange;\r\n      this.onlyInRangeInitialized = true;\r\n    }\r\n  }\r\n\r\n  private setLayers(layers: Layer[]) {\r\n    this._layers = layers;\r\n\r\n    this.orderable = this.computeOrderable();\r\n\r\n    if (this.excludeBaseLayers) {\r\n      this.hasLayerNotVisible = layers.find(l => l.visible === false && !l.baseLayer) !== undefined;\r\n      this.hasLayerOutOfRange = layers.find(l => l.isInResolutionsRange === false && !l.baseLayer) !== undefined;\r\n    } else {\r\n      this.hasLayerNotVisible = layers.find(l => l.visible === false) !== undefined;\r\n      this.hasLayerOutOfRange = layers.find(l => l.isInResolutionsRange === false) !== undefined;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IgoMap } from './map';\r\n\r\n/**\r\n * MapService\r\n *\r\n * This service tracks the IgoMap instance, if any.\r\n * Currently, only one map instance is supported\r\n * but support for multiple maps may be added in the future.\r\n * This will impact other services such as the OverlayService\r\n * because these maps won't be sharing overlayed features.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MapService {\r\n  private map: IgoMap;\r\n\r\n  constructor() {}\r\n\r\n  getMap(): IgoMap {\r\n    return this.map;\r\n  }\r\n\r\n  setMap(map: IgoMap) {\r\n    this.map = map;\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy, AfterViewInit, Optional } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { RouteService } from '@igo2/core';\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { LayerListComponent } from './layer-list.component';\r\nimport { LayerListService } from './layer-list.service';\r\nimport { Layer } from '../shared/layers/layer';\r\n\r\n@Directive({\r\n  selector: '[igoLayerListBinding]'\r\n})\r\nexport class LayerListBindingDirective implements OnInit, AfterViewInit, OnDestroy {\r\n  private component: LayerListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: LayerListComponent,\r\n    private mapService: MapService,\r\n    private layerListService: LayerListService,\r\n    @Optional() private route: RouteService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService\r\n      .getMap()\r\n      .layers$.subscribe((layers: Layer[]) => {\r\n        this.component.layers = layers.filter((layer: Layer) => {\r\n          return layer.showInLayerList === true;\r\n        });\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.initRoutes();\r\n  }\r\n\r\n  private initRoutes() {\r\n    if (\r\n      this.route &&\r\n      (this.route.options.llcKKey || this.route.options.llcAKey ||\r\n        this.route.options.llcVKey || this.route.options.llcVKey)) {\r\n      this.route.queryParams.subscribe(params => {\r\n\r\n        const keywordFromUrl = params[this.route.options.llcKKey as string];\r\n        const sortedAplhaFromUrl = params[this.route.options.llcAKey as string];\r\n        const onlyVisibleFromUrl = params[this.route.options.llcVKey as string];\r\n        const onlyInRangeFromUrl = params[this.route.options.llcRKey as string];\r\n        if (keywordFromUrl && !this.layerListService.keywordInitialized) {\r\n          this.layerListService.keyword = keywordFromUrl;\r\n          this.layerListService.keywordInitialized = true;\r\n        }\r\n        if (sortedAplhaFromUrl && !this.layerListService.sortedAlphaInitialized) {\r\n          this.layerListService.sortedAlpha = sortedAplhaFromUrl === '1' ? true : false;\r\n          this.layerListService.sortedAlphaInitialized = true;\r\n        }\r\n        if (onlyVisibleFromUrl &&\r\n          !this.layerListService.onlyVisibleInitialized &&\r\n          this.component.hasLayerNotVisible) {\r\n          this.layerListService.onlyVisible = onlyVisibleFromUrl === '1' ? true : false;\r\n          this.layerListService.onlyVisibleInitialized = true;\r\n        }\r\n        if (onlyInRangeFromUrl &&\r\n          !this.layerListService.onlyInRangeInitialized &&\r\n          this.component.hasLayerOutOfRange) {\r\n          this.layerListService.onlyInRange = onlyInRangeFromUrl === '1' ? true : false;\r\n          this.layerListService.onlyInRangeInitialized = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { FeatureStoreStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\n\r\n/**\r\n * Strategies or responsible of synchronizing a feature store and a layer.\r\n * A strategy can be shared among multiple stores. Sharing a strategy\r\n * is a good idea when multiple strategies would have on cancelling effect\r\n * on each other.\r\n *\r\n * At creation, strategy is inactive and needs to be manually activated.\r\n */\r\nexport class FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Feature store\r\n   * @internal\r\n   */\r\n  protected stores: FeatureStore[] = [];\r\n\r\n  /**\r\n   * Whether this strategy is active\r\n   * @internal\r\n   */\r\n  protected active = false;\r\n\r\n  constructor(protected options: FeatureStoreStrategyOptions = {}) {\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Whether this strategy is active\r\n   */\r\n  isActive(): boolean { return this.active; }\r\n\r\n  /**\r\n   * Activate the strategy. If it's already active, it'll be deactivated\r\n   * and activated again.\r\n   */\r\n  activate() {\r\n    if (this.active === true) {\r\n      this.doDeactivate();\r\n    }\r\n    this.active = true;\r\n    this.doActivate();\r\n  }\r\n\r\n  /**\r\n   * Activate the strategy. If it's already active, it'll be deactivated\r\n   * and activated again.\r\n   */\r\n  deactivate() {\r\n    this.active = false;\r\n    this.doDeactivate();\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    if (this.stores.indexOf(store) < 0) {\r\n      this.stores.push(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from store\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    const index = this.stores.indexOf(store);\r\n    if (index >= 0) {\r\n      this.stores.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Do the stataegy activation\r\n   * @internal\r\n   */\r\n  protected doActivate() {}\r\n\r\n  /**\r\n   * Do the strategy deactivation\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {}\r\n\r\n}\r\n","import { Subscription } from 'rxjs';\r\n\r\nimport { FeatureMotion } from '../feature.enums';\r\nimport { Feature, FeatureStoreLoadingStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreStrategy } from './strategy';\r\n\r\n/**\r\n * This strategy loads a store's features into it's layer counterpart.\r\n * The store -> layer binding is a one-way binding. That means any entity\r\n * added to the store will be added to the layer but the opposite is false.\r\n *\r\n * Important: This strategy observes filtered entities, not raw entities. This\r\n * is not configurable yet.\r\n */\r\nexport class FeatureStoreLoadingStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's features\r\n   */\r\n  private stores$$ = new Map<FeatureStore, Subscription>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for entities changes in a store.\r\n   * Important: Never observe a store's sorted entities. It makes no sense\r\n   * to display sorted entities (instead of unsorted) on a layer and it\r\n   * would potentially result in a lot of useless computation.\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    const subscription = store.view.all$()\r\n      .subscribe((features: Feature[]) => this.onFeaturesChange(features, store));\r\n    this.stores$$.set(store, subscription);\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in a store.\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const subscription = this.stores$$.get(store);\r\n    if (subscription !== undefined) {\r\n      subscription.unsubscribe();\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, Subscription]) => {\r\n      entries[1].unsubscribe();\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features into a layer or clear the layer if the array of features is empty.\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onFeaturesChange(features: Feature[], store: FeatureStore) {\r\n    if (features.length === 0) {\r\n      store.clearLayer();\r\n    } else {\r\n      store.setLayerFeatures(\r\n        features,\r\n        this.selectMotion(store),\r\n        this.options.viewScale,\r\n        this.options.areaRatio,\r\n        this.options.getFeatureId\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the best motion\r\n   * @param store A FeatureStore to apply the motion\r\n   * @returns The motion selected\r\n   */\r\n  private selectMotion(store: FeatureStore) {\r\n    if (this.options.motion !== undefined) { return this.options.motion; }\r\n\r\n    if (store.pristine === true) {\r\n      // If features have just been loaded into the store, move/zoom on them\r\n      return FeatureMotion.Default;\r\n    } else if (store.count > store.view.count) {\r\n      // If features have been filtered, move/zoom on the remaining ones\r\n      return FeatureMotion.Default;\r\n    } else {\r\n      // On insert, update or delete, do nothing\r\n      return FeatureMotion.None;\r\n    }\r\n  }\r\n}\r\n","import { unByKey } from 'ol/Observable';\r\nimport { OlEvent } from 'ol/events/Event';\r\n\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreLoadingLayerStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStoreStrategy } from './strategy';\r\n\r\n/**\r\n * This strategy loads a layer's features into it's store counterpart.\r\n * The layer -> store binding is a one-way binding. That means any OL feature\r\n * added to the layer will be added to the store but the opposite is false.\r\n *\r\n * Important: In it's current state, this strategy is to meant to be combined\r\n * with a standard Loading strategy and it would probably cause recursion issues.\r\n */\r\nexport class FeatureStoreLoadingLayerStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's OL source changes\r\n   */\r\n  private stores$$ = new Map<FeatureStore, string>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingLayerStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for a store's  OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    this.onSourceChanges(store);\r\n    const olSource = store.layer.ol.getSource();\r\n    olSource.on('change', (event: OlEvent) => {\r\n      this.onSourceChanges(store);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop watching for a store's OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const key = this.stores$$.get(store);\r\n    if (key !== undefined) {\r\n      unByKey(key);\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for OL source changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, string]) => {\r\n      unByKey(entries[1]);\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features from an OL source into a  store or clear the store if the source is empty\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onSourceChanges(store: FeatureStore) {\r\n    const olFeatures = store.layer.ol.getSource().getFeatures();\r\n    if (olFeatures.length === 0) {\r\n      store.clear();\r\n    } else {\r\n      store.setStoreOlFeatures(olFeatures);\r\n    }\r\n  }\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  getEntityId,\r\n  EntityKey,\r\n  EntityStore\r\n} from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { FeatureMotion } from './feature.enums';\r\nimport { Feature, FeatureStoreOptions } from './feature.interfaces';\r\nimport { featureFromOl, featureToOl, moveToOlFeatures } from './feature.utils';\r\nimport { FeatureStoreStrategy } from './strategies/strategy';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * features and the map layer to display them on. Synchronization\r\n * between the store and the layer is handled by strategies.\r\n */\r\nexport class FeatureStore<T extends Feature = Feature> extends EntityStore<T> {\r\n\r\n  /**\r\n   * Feature store strategies responsible of synchronizing the store\r\n   * and the layer\r\n   */\r\n  strategies: FeatureStoreStrategy[] = [];\r\n\r\n  /**\r\n   * Vector layer to display the features on\r\n   */\r\n  layer: VectorLayer;\r\n\r\n  /**\r\n   * The map the layer is bound to\r\n   */\r\n  readonly map: IgoMap;\r\n\r\n  /**\r\n   * The layer's data source\r\n   */\r\n  get source(): FeatureDataSource {\r\n    return this.layer ? this.layer.dataSource as FeatureDataSource : undefined;\r\n  }\r\n\r\n  constructor(entities: T[], options: FeatureStoreOptions) {\r\n    super(entities, options);\r\n    this.map = options.map;\r\n  }\r\n\r\n  /**\r\n   * Bind this store to a vector layer\r\n   * @param layer Vector layer\r\n   * @returns Feature store\r\n   */\r\n  bindLayer(layer: VectorLayer): FeatureStore {\r\n    this.layer = layer;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add a strategy to this store\r\n   * @param strategy Feature store strategy\r\n   * @returns Feature store\r\n   */\r\n  addStrategy(strategy: FeatureStoreStrategy, activate: boolean = false): FeatureStore {\r\n    const existingStrategy = this.strategies.find((_strategy: FeatureStoreStrategy) => {\r\n      return strategy.constructor === _strategy.constructor;\r\n    });\r\n    if (existingStrategy !== undefined) {\r\n      throw new Error('A strategy of this type already exists on that FeatureStore.');\r\n    }\r\n\r\n    this.strategies.push(strategy);\r\n    strategy.bindStore(this);\r\n\r\n    if (activate === true) {\r\n      strategy.activate();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove a strategy from this store\r\n   * @param strategy Feature store strategy\r\n   * @returns Feature store\r\n   */\r\n  removeStrategy(strategy: FeatureStoreStrategy): FeatureStore {\r\n    const index = this.strategies.indexOf(strategy);\r\n    if (index >= 0) {\r\n      this.strategies.splice(index, 1);\r\n      strategy.unbindStore(this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return strategies of a given type\r\n   * @param type Feature store strategy class\r\n   * @returns Strategies\r\n   */\r\n  getStrategyOfType(type: typeof FeatureStoreStrategy): FeatureStoreStrategy {\r\n    return this.strategies.find((strategy: FeatureStoreStrategy) => {\r\n      return strategy instanceof type;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate strategies of a given type\r\n   * @param type Feature store strategy class\r\n   */\r\n  activateStrategyOfType(type: typeof FeatureStoreStrategy) {\r\n    const strategy = this.getStrategyOfType(type);\r\n    if (strategy !== undefined) {\r\n      strategy.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate strategies of a given type\r\n   * @param type Feature store strategy class\r\n   */\r\n  deactivateStrategyOfType(type: typeof FeatureStoreStrategy) {\r\n    const strategy = this.getStrategyOfType(type);\r\n    if (strategy !== undefined) {\r\n      strategy.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible. Strategies\r\n   * make extensive use of that method.\r\n   * @param features Features\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  setLayerFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number,\r\n    getId?: (Feature) => EntityKey\r\n  ) {\r\n    getId = getId ? getId : getEntityId;\r\n    this.checkLayer();\r\n\r\n    const olFeatures = features\r\n      .map((feature: Feature) => featureToOl(feature, this.map.projection, getId));\r\n    this.setLayerOlFeatures(olFeatures, motion, viewScale, areaRatio);\r\n  }\r\n\r\n  /**\r\n   * Set the store's features from an array of OL features.\r\n   * @param olFeatures Ol features\r\n   */\r\n  setStoreOlFeatures(olFeatures: OlFeature[]) {\r\n    this.checkLayer();\r\n\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n      return featureFromOl(olFeature, this.layer.map.projection);\r\n    });\r\n    this.load(features as T[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the layer\r\n   */\r\n  clearLayer() {\r\n    this.checkLayer();\r\n    this.source.ol.clear();\r\n  }\r\n\r\n  /**\r\n   * Check wether a layer is bound or not and throw an error if not.\r\n   */\r\n  private checkLayer() {\r\n    if (this.layer === undefined) {\r\n      throw new Error('This FeatureStore is not bound to a layer.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible.\r\n   * @param features Openlayers feature objects\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  private setLayerOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number\r\n  ) {\r\n    const olFeaturesMap = new Map();\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      olFeaturesMap.set(olFeature.getId(), olFeature);\r\n    });\r\n\r\n    const olFeaturesToRemove = [];\r\n    this.source.ol.forEachFeature((olFeature: OlFeature) => {\r\n      const newOlFeature = olFeaturesMap.get(olFeature.getId());\r\n      if (newOlFeature === undefined) {\r\n        olFeaturesToRemove.push(olFeature);\r\n      } else if (newOlFeature.get('_entityRevision') !== olFeature.get('_entityRevision')) {\r\n        olFeaturesToRemove.push(olFeature);\r\n      } else {\r\n        olFeaturesMap.delete(newOlFeature.getId());\r\n      }\r\n    });\r\n\r\n    const olFeaturesToAddIds = Array.from(olFeaturesMap.keys());\r\n    const olFeaturesToAdd = olFeatures.filter((olFeature: OlFeature) => {\r\n      return olFeaturesToAddIds.indexOf(olFeature.getId()) >= 0;\r\n    });\r\n\r\n    if (olFeaturesToRemove.length > 0) {\r\n      this.removeOlFeaturesFromLayer(olFeaturesToRemove);\r\n    }\r\n    if (olFeaturesToAdd.length > 0) {\r\n      this.addOlFeaturesToLayer(olFeaturesToAdd);\r\n    }\r\n\r\n    if (olFeaturesToAdd.length > 0) {\r\n      // If features are added, do a motion toward the newly added features\r\n      moveToOlFeatures(this.map, olFeaturesToAdd, motion, viewScale, areaRatio);\r\n    } else if (olFeatures.length > 0) {\r\n      // Else, do a motion toward all the features\r\n      moveToOlFeatures(this.map, olFeatures, motion, viewScale, areaRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add features to the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private addOlFeaturesToLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n    });\r\n    this.source.ol.addFeatures(olFeatures);\r\n  }\r\n\r\n  /**\r\n   * Remove features from the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private removeOlFeaturesFromLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      this.source.ol.removeFeature(olFeature);\r\n    });\r\n  }\r\n\r\n}\r\n","import OlFeature from 'ol/Feature';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { DragBoxEvent as OlDragBoxEvent } from 'ol/interaction/DragBox';\r\nimport { ListenerFunction } from 'ol/events';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subscription, combineLatest } from 'rxjs';\r\nimport { map, debounceTime, skip } from 'rxjs/operators';\r\n\r\nimport { EntityKey, EntityRecord } from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../../datasource';\r\nimport { VectorLayer } from '../../../layer';\r\nimport { IgoMap, ctrlKeyDown } from '../../../map';\r\n\r\nimport { Feature, FeatureStoreSelectionStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreStrategy } from './strategy';\r\nimport { FeatureMotion } from '../feature.enums';\r\n\r\nclass OlDragSelectInteraction extends OlDragBoxInteraction {\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n}\r\n\r\n/**\r\n * This strategy synchronizes a store and a layer selected entities.\r\n * The store <-> layer binding is a two-way binding.\r\n *\r\n * In many cases, a single strategy bound to multiple stores\r\n * will yield better results that multiple strategies with each their\r\n * own store. In the latter scenario, a click on overlapping features\r\n * would trigger the strategy of each layer and they would cancel\r\n * each other as well as move the map view around needlessly.\r\n */\r\nexport class FeatureStoreSelectionStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Listener to the map click event that allows selecting a feature\r\n   * by clicking on the map\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  private olDragSelectInteraction: OlDragSelectInteraction;\r\n\r\n  private olDragSelectInteractionEndKey: string;\r\n\r\n  /**\r\n   * A feature store that'll contain the selected features. It has it's own\r\n   * layer, shared by all the stores this staretgy is bound to.\r\n   */\r\n  private overlayStore: FeatureStore;\r\n\r\n  /**\r\n   * Subscription to all stores selected entities\r\n   */\r\n  private stores$$: Subscription;\r\n\r\n  /**\r\n   * The map the layers belong to\r\n   */\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: FeatureStoreSelectionStrategyOptions) {\r\n    super(options);\r\n    this.overlayStore = this.createOverlayStore();\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all entities, from all stores\r\n   */\r\n  unselectAll() {\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      store.state.updateAll({selected: false});\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.overlayStore.clear();\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer, setup the map click lsitener and\r\n   * start watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.addOverlayLayer();\r\n    this.listenToMapClick();\r\n    if (this.options.dragBox === true) {\r\n      this.addDragBoxInteraction();\r\n    }\r\n    this.watchAll();\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer, remove the map click lsitener and\r\n   * stop watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unlistenToMapClick();\r\n    this.removeDragBoxInteraction();\r\n    this.unwatchAll();\r\n    this.removeOverlayLayer();\r\n  }\r\n\r\n  /**\r\n   * Create a single observable of all the stores. With a single observable,\r\n   * features can be added all at once to the overlay layer and a single\r\n   * motion can be performed. Multiple observable would have\r\n   * a cancelling effect on each other.\r\n   */\r\n  private watchAll() {\r\n    this.unwatchAll();\r\n\r\n    const stores$ = this.stores.map((store: FeatureStore) => {\r\n      return store.stateView.manyBy$((record: EntityRecord<Feature>) => {\r\n        return record.state.selected === true;\r\n      }).pipe(\r\n        map((records: EntityRecord<Feature>[]) => records.map(record => record.entity))\r\n      );\r\n    });\r\n    this.stores$$ = combineLatest(...stores$)\r\n      .pipe(\r\n        debounceTime(25),\r\n        skip(1), // Skip intial selection\r\n        map((features: Array<Feature[]>) => features.reduce((a, b) => a.concat(b)))\r\n      ).subscribe((features: Feature[]) => this.onSelectFromStore(features));\r\n  }\r\n\r\n  /**\r\n   * Stop watching for selection in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    if (this.stores$$ !== undefined) {\r\n      this.stores$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a 'singleclick' listener to the map that'll allow selecting\r\n   * features by clicking on the map. The selection will be performed\r\n   * only on the layers bound to this strategy.\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on('singleclick', (event: OlMapBrowserPointerEvent) => {\r\n      this.onMapClick(event);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the map click listener\r\n   */\r\n  private unlistenToMapClick() {\r\n    if (this.mapClickListener !== undefined) {\r\n      this.map.ol.un(\r\n        this.mapClickListener.type,\r\n        this.mapClickListener.listener\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On map click, select feature at pixel\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onMapClick(event: OlMapBrowserPointerEvent) {\r\n    const exclusive = !ctrlKeyDown(event);\r\n    const reverse = !exclusive;\r\n    const olFeatures = event.map.getFeaturesAtPixel(event.pixel, {\r\n      hitTolerance: this.options.hitTolerance || 0,\r\n      layerFilter: (olLayer) => {\r\n        const storeOlLayer = this.stores.find((store: FeatureStore) => {\r\n          return store.layer.ol === olLayer;\r\n        });\r\n        return storeOlLayer !== undefined;\r\n      }\r\n    });\r\n    this.onSelectFromMap(olFeatures, exclusive, reverse);\r\n  }\r\n\r\n  /**\r\n   * Add a drag box interaction and, on drag box end, select features\r\n   */\r\n  private addDragBoxInteraction() {\r\n    let olDragSelectInteraction;\r\n    const olInteractions = this.map.ol.getInteractions().getArray();\r\n\r\n    // There can only be one dragbox interaction, so find the current one, if any\r\n    // Don't keep a reference to the current dragbox because we don't want\r\n    // to remove it when this startegy is deactivated\r\n    for (const olInteraction of olInteractions) {\r\n      if (olInteraction instanceof OlDragSelectInteraction) {\r\n        olDragSelectInteraction = olInteraction;\r\n        break;\r\n      }\r\n    }\r\n    // If no drag box interaction is found, create a new one and add it to the map\r\n    if (olDragSelectInteraction === undefined) {\r\n      olDragSelectInteraction = new OlDragSelectInteraction({\r\n        condition: ctrlKeyDown\r\n      });\r\n      this.map.ol.addInteraction(olDragSelectInteraction);\r\n      this.olDragSelectInteraction = olDragSelectInteraction;\r\n    }\r\n\r\n    this.olDragSelectInteractionEndKey = olDragSelectInteraction.on(\r\n      'boxend',\r\n      (event: OlMapBrowserPointerEvent) => this.onDragBoxEnd(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove drag box interaction\r\n   */\r\n  private removeDragBoxInteraction() {\r\n    if (this.olDragSelectInteractionEndKey !== undefined) {\r\n      unByKey(this.olDragSelectInteractionEndKey);\r\n    }\r\n    if (this.olDragSelectInteraction !== undefined) {\r\n      this.map.ol.removeInteraction(this.olDragSelectInteraction);\r\n    }\r\n    this.olDragSelectInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * On dragbox end, select features in drag box\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onDragBoxEnd(event: OlDragBoxEvent) {\r\n    const exclusive = !ctrlKeyDown(event.mapBrowserEvent);\r\n    const extent = event.target.getGeometry().getExtent();\r\n    const olFeatures = this.stores.reduce((acc: OlFeature[], store: FeatureStore) => {\r\n      const olSource = store.layer.ol.getSource();\r\n      acc.push(...olSource.getFeaturesInExtent(extent));\r\n      return acc;\r\n    }, []);\r\n    this.onSelectFromMap(olFeatures, exclusive, false);\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the store, add\r\n   * them to this startegy's overlay layer (select on map)\r\n   * @param features Store features\r\n   */\r\n  private onSelectFromStore(features: Feature[]) {\r\n    const motion = this.options ? this.options.motion : undefined;\r\n    const olOverlayFeatures = this.overlayStore.layer.ol.getSource().getFeatures();\r\n    const overlayFeaturesKeys = olOverlayFeatures.map((olFeature: OlFeature) => olFeature.getId());\r\n    const featuresKeys = features.map(this.overlayStore.getKey);\r\n    const doMotion = overlayFeaturesKeys.length !== featuresKeys.length ||\r\n      !overlayFeaturesKeys.every((key: EntityKey) => featuresKeys.indexOf(key) >= 0);\r\n\r\n    this.overlayStore.setLayerFeatures(\r\n      features,\r\n      doMotion ? motion : FeatureMotion.None,\r\n      this.options.viewScale,\r\n      this.options.areaRatio,\r\n      this.options.getFeatureId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the map, also select them\r\n   * in their store.\r\n   * @param olFeatures OL feature objects\r\n   */\r\n  private onSelectFromMap(olFeatures: OlFeature[], exclusive: boolean, reverse: boolean) {\r\n    const groupedFeatures = this.groupFeaturesByStore(olFeatures);\r\n\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      const features = groupedFeatures.get(store);\r\n      if (features === undefined && exclusive === true) {\r\n        this.unselectAllFeaturesFromStore(store);\r\n      } else if (features === undefined && exclusive === false) {\r\n        // Do nothing\r\n      } else {\r\n        this.selectFeaturesFromStore(store, features, exclusive, reverse);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select features in store\r\n   * @param store: Feature store\r\n   * @param features Features\r\n   */\r\n  private selectFeaturesFromStore(store: FeatureStore, features: Feature[], exclusive: boolean, reverse: boolean) {\r\n    if (reverse === true) {\r\n      store.state.reverseMany(features, ['selected']);\r\n    } else {\r\n      store.state.updateMany(features, {selected: true}, exclusive);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all features from store\r\n   * @param store: Feature store\r\n   */\r\n  private unselectAllFeaturesFromStore(store: FeatureStore) {\r\n    store.state.updateAll({selected: false});\r\n  }\r\n\r\n  /**\r\n   * This method returns a store -> features mapping from a list\r\n   * of OL selected features. OL features keep a reference to the store\r\n   * they are from.\r\n   * @param olFeatures: OL feature objects\r\n   * @returns Store -> features mapping\r\n   */\r\n  private groupFeaturesByStore(olFeatures: OlFeature[]): Map<FeatureStore, Feature[]> {\r\n    const groupedFeatures = new Map<FeatureStore, Feature[]>();\r\n    if (olFeatures === null || olFeatures === undefined) {\r\n      return groupedFeatures;\r\n    }\r\n\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      const store = olFeature.get('_featureStore');\r\n      if (store === undefined) { return; }\r\n\r\n      let features = groupedFeatures.get(store);\r\n      if (features === undefined) {\r\n        features = [];\r\n        groupedFeatures.set(store, features);\r\n      }\r\n\r\n      const feature = store.get(olFeature.getId());\r\n      if (feature !== undefined) {\r\n        features.push(feature);\r\n      }\r\n    });\r\n\r\n    return groupedFeatures;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay store\r\n   */\r\n  private createOverlayStore(): FeatureStore {\r\n    const overlayLayer = this.options.layer\r\n      ? this.options.layer\r\n      : this.createOverlayLayer();\r\n    return new FeatureStore([], {map: this.map}).bindLayer(overlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay layer\r\n   */\r\n  private createOverlayLayer(): VectorLayer {\r\n    return new VectorLayer({\r\n      zIndex: 300,\r\n      source: new FeatureDataSource(),\r\n      style: undefined,\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay store's layer to the map to display the selected\r\n   * features.\r\n   */\r\n  private addOverlayLayer() {\r\n    if (this.overlayStore.layer.map === undefined) {\r\n      this.map.addLayer(this.overlayStore.layer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer from the map\r\n   */\r\n  private removeOverlayLayer() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.map.removeLayer(this.overlayStore.layer);\r\n  }\r\n}\r\n","import * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\r\n\r\nimport {\r\n  EntityKey,\r\n  getEntityId,\r\n  getEntityTitle,\r\n  getEntityRevision,\r\n  getEntityProperty\r\n} from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { VectorLayer } from '../../layer';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { FEATURE, FeatureMotion } from './feature.enums';\r\nimport { Feature } from './feature.interfaces';\r\nimport { FeatureStore } from './store';\r\nimport {\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from './strategies';\r\n\r\n/**\r\n * Create an Openlayers feature object out of a feature definition.\r\n * The output object has a reference to the feature id.\r\n * @param feature Feature definition\r\n * @param projectionOut Feature object projection\r\n * @returns OpenLayers feature object\r\n */\r\nexport function featureToOl(\r\n  feature: Feature,\r\n  projectionOut: string,\r\n  getId?: (Feature) => EntityKey\r\n): OlFeature {\r\n  getId = getId ? getId : getEntityId;\r\n\r\n  const olFormat = new OlFormatGeoJSON();\r\n  const olFeature = olFormat.readFeature(feature, {\r\n    dataProjection: feature.projection,\r\n    featureProjection: projectionOut\r\n  });\r\n\r\n  olFeature.setId(getId(feature));\r\n\r\n  const title = getEntityTitle(feature);\r\n  if (title !== undefined) {\r\n    olFeature.set('_title', title, true);\r\n  }\r\n\r\n  if (feature.extent !== undefined) {\r\n    olFeature.set('_extent', feature.extent, true);\r\n  }\r\n\r\n  if (feature.projection !== undefined) {\r\n    olFeature.set('_projection', feature.projection, true);\r\n  }\r\n\r\n  if (feature.extent !== undefined) {\r\n    olFeature.set('_extent', feature.extent, true);\r\n  }\r\n\r\n  const mapTitle = getEntityProperty(feature, 'meta.mapTitle');\r\n  if (mapTitle !== undefined) {\r\n    olFeature.set('_mapTitle', mapTitle, true);\r\n  }\r\n\r\n  olFeature.set('_entityRevision', getEntityRevision(feature), true);\r\n\r\n  return olFeature;\r\n}\r\n\r\n/**\r\n * Create a feature object out of an OL feature\r\n * The output object has a reference to the feature id.\r\n * @param olFeature OL Feature\r\n * @param projectionIn OL feature projection\r\n * @param projectionOut Feature projection\r\n * @returns Feature\r\n */\r\nexport function featureFromOl(\r\n  olFeature: OlFeature,\r\n  projectionIn: string,\r\n  projectionOut = 'EPSG:4326'\r\n): Feature {\r\n  const olFormat = new OlFormatGeoJSON();\r\n\r\n  const keys = olFeature.getKeys().filter((key: string) => {\r\n    return !key.startsWith('_') && key !== 'geometry';\r\n  });\r\n  const properties = keys.reduce((acc: object, key: string) => {\r\n    acc[key] = olFeature.get(key);\r\n    return acc;\r\n  }, {});\r\n\r\n  const geometry = olFormat.writeGeometryObject(olFeature.getGeometry(), {\r\n    dataProjection: projectionOut,\r\n    featureProjection: projectionIn\r\n  });\r\n\r\n  const title = olFeature.get('_title');\r\n  const mapTitle = olFeature.get('_mapTitle');\r\n  const id = olFeature.getId();\r\n\r\n  return {\r\n    type: FEATURE,\r\n    projection: projectionOut,\r\n    extent: olFeature.get('_extent'),\r\n    meta: {\r\n      id,\r\n      title: title ? title : (mapTitle ? mapTitle : id),\r\n      mapTitle,\r\n      revision: olFeature.getRevision()\r\n    },\r\n    properties,\r\n    geometry\r\n  };\r\n}\r\n\r\n/**\r\n * Compute an OL feature extent in it's map projection\r\n * @param map Map\r\n * @param olFeature OL feature\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeatureExtent(\r\n  map: IgoMap,\r\n  olFeature: OlFeature\r\n): [number, number, number, number] {\r\n  let olExtent = olextent.createEmpty();\r\n\r\n  const olFeatureExtent = olFeature.get('_extent');\r\n  const olFeatureProjection = olFeature.get('_projection');\r\n  if (olFeatureExtent !== undefined && olFeatureProjection !== undefined) {\r\n    olExtent = olproj.transformExtent(\r\n      olFeatureExtent,\r\n      olFeatureProjection,\r\n      map.projection\r\n    );\r\n  } else {\r\n    const olGeometry = olFeature.getGeometry();\r\n    if (olGeometry !== null) {\r\n      olExtent = olGeometry.getExtent();\r\n    }\r\n  }\r\n\r\n  return olExtent;\r\n}\r\n\r\n/**\r\n * Compute a multiple OL features extent in their map projection\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeaturesExtent(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[]\r\n): [number, number, number, number] {\r\n  const extent = olextent.createEmpty();\r\n\r\n  olFeatures.forEach((olFeature: OlFeature) => {\r\n    const featureExtent = computeOlFeatureExtent(map, olFeature);\r\n    olextent.extend(extent, featureExtent);\r\n  });\r\n\r\n  return extent;\r\n}\r\n\r\n/**\r\n * Scale an extent.\r\n * @param extent Extent\r\n * @param Scaling factors for top, right, bottom and left directions, in that order\r\n * @returns Scaled extent\r\n */\r\nexport function scaleExtent(\r\n  extent: [number, number, number, number],\r\n  scale: [number, number, number, number]\r\n): [number, number, number, number] {\r\n  const [width, height] = olextent.getSize(extent);\r\n  return [\r\n    scale[3] ? extent[0] - width * scale[3] : extent[0],\r\n    scale[2] ? extent[1] - height * scale[2] : extent[1],\r\n    scale[1] ? extent[2] + width * scale[1] : extent[2],\r\n    scale[0] ? extent[3] + height * scale[0] : extent[3]\r\n  ];\r\n}\r\n\r\n/**\r\n * Return true if features are out of view.\r\n * If features are too close to the edge, they are considered out of view.\r\n * We define the edge as 5% of the extent size.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @returns Return true if features are out of view\r\n */\r\nexport function featuresAreOutOfView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number]\r\n) {\r\n  const mapExtent = map.getExtent();\r\n  const edgeRatio = 0.05;\r\n  const scale = [-1, -1, -1, -1].map(x => x * edgeRatio);\r\n  const viewExtent = scaleExtent(mapExtent, scale as [number, number, number, number]);\r\n\r\n  return !olextent.containsExtent(viewExtent, featuresExtent);\r\n}\r\n\r\n/**\r\n * Return true if features are too deep into the view. This results\r\n * in features being too small.\r\n * Features are considered too small if their extent occupies less than\r\n * 1% of the map extent.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @param areaRatio The features extent to view extent acceptable ratio\r\n * @returns Return true if features are too deep in the view\r\n */\r\nexport function featuresAreTooDeepInView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  // An area ratio of 0.004 means that the feature extent's width and height\r\n  // should be about 1/16 of the map extent's width and height\r\n  areaRatio = areaRatio ? areaRatio : 0.004;\r\n  const mapExtent = map.getExtent();\r\n  const mapExtentArea = olextent.getArea(mapExtent);\r\n  const featuresExtentArea = olextent.getArea(featuresExtent);\r\n\r\n  return featuresExtentArea / mapExtentArea < areaRatio;\r\n}\r\n\r\n/**\r\n * Fit view to include the features extent.\r\n * By default, this method will let the features occupy about 50% of the viewport.\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @param motion To motion to the new map view\r\n * @param scale If this is defined, the original view will be scaled\r\n *  by that factor before any logic is applied.\r\n */\r\nexport function moveToOlFeatures(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[],\r\n  motion: FeatureMotion = FeatureMotion.Default,\r\n  scale?: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  const featuresExtent = computeOlFeaturesExtent(map, olFeatures);\r\n  let viewExtent = featuresExtent;\r\n  if (scale !== undefined) {\r\n    viewExtent = scaleExtent(viewExtent, scale);\r\n  }\r\n\r\n  if (motion === FeatureMotion.Zoom) {\r\n    map.viewController.zoomToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Move) {\r\n    map.viewController.moveToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Default) {\r\n    if (\r\n      featuresAreOutOfView(map, featuresExtent) ||\r\n      featuresAreTooDeepInView(map, featuresExtent, areaRatio)\r\n    ) {\r\n      map.viewController.zoomToExtent(viewExtent);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Hide an OL feature\r\n * @param olFeature OL feature\r\n */\r\nexport function hideOlFeature(olFeature: OlFeature) {\r\n  olFeature.setStyle(new olstyle.Style({}));\r\n}\r\n\r\n/**\r\n * Try to bind a layer to a store if none is bound already.\r\n * The layer will also be added to the store's map.\r\n * If no layer is given to that function, a basic one will be created.\r\n * @param store The store to bind the layer\r\n * @param layer An optional VectorLayer\r\n */\r\nexport function tryBindStoreLayer(store: FeatureStore, layer?: VectorLayer) {\r\n  if (store.layer !== undefined) {\r\n    if (store.layer.map === undefined) {\r\n      store.map.addLayer(store.layer);\r\n    }\r\n    return;\r\n  }\r\n\r\n  layer = layer ? layer : new VectorLayer({\r\n    source: new FeatureDataSource()\r\n  });\r\n  store.bindLayer(layer);\r\n  if (store.layer.map === undefined) {\r\n    store.map.addLayer(store.layer);\r\n  }\r\n}\r\n\r\n/**\r\n * Try to add a loading strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the loading strategy\r\n * @param strategy An optional loading strategy\r\n */\r\nexport function tryAddLoadingStrategy(store: FeatureStore, strategy?: FeatureStoreLoadingStrategy) {\r\n  if (store.getStrategyOfType(FeatureStoreLoadingStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    return;\r\n  }\r\n\r\n  strategy = strategy ? strategy : new FeatureStoreLoadingStrategy({});\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n\r\n/**\r\n * Try to add a selection strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the selection strategy\r\n * @param [strategy] An optional selection strategy\r\n */\r\nexport function tryAddSelectionStrategy(store: FeatureStore, strategy?: FeatureStoreSelectionStrategy) {\r\n  if (store.getStrategyOfType(FeatureStoreSelectionStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n    return;\r\n  }\r\n  strategy = strategy ? strategy : new FeatureStoreSelectionStrategy({\r\n    map: store.map\r\n  });\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\n\r\n/**\r\n * Create an overlay layer and it's source\r\n * @returns Overlay layer\r\n */\r\nexport function createOverlayLayer(): VectorLayer {\r\n  const overlayDataSource = new FeatureDataSource();\r\n  return new VectorLayer({\r\n    title: 'Overlay',\r\n    zIndex: 300,\r\n    source: overlayDataSource,\r\n    style: createOverlayLayerStyle()\r\n  });\r\n}\r\n\r\n/**\r\n * Create an overlay style with markers for points and a basic stroke/fill\r\n * combination for lines and polygons\r\n * @returns Style function\r\n */\r\nfunction createOverlayLayerStyle(): (olFeature: OlFeature) => olstyle.Style {\r\n  const defaultStyle = createOverlayDefaultStyle();\r\n  const markerStyle = createOverlayMarkerStyle();\r\n\r\n  return (olFeature: OlFeature) => {\r\n    const geometryType = olFeature.getGeometry().getType();\r\n    const style = geometryType === 'Point' ? markerStyle : defaultStyle;\r\n    style.getText().setText(olFeature.get('_mapTitle'));\r\n    return style;\r\n  };\r\n}\r\n\r\n/**\r\n * Create a basic style for lines and polygons\r\n * @returns Style\r\n */\r\nfunction createOverlayDefaultStyle(): olstyle.Style {\r\n  const stroke = new olstyle.Stroke({\r\n    width: 2,\r\n    color: [0, 161, 222, 1]\r\n  });\r\n\r\n  const fill = new olstyle.Stroke({\r\n    color: [0, 161, 222, 0.15]\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke,\r\n    fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke,\r\n      fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a marker style for points\r\n * @returns Style\r\n */\r\nexport function createOverlayMarkerStyle(color = 'blue'): olstyle.Style {\r\n  let iconColor;\r\n  switch (color) {\r\n    case 'blue':\r\n    case 'red':\r\n    case 'yellow':\r\n    case 'green':\r\n      iconColor = color;\r\n      break;\r\n    default:\r\n      iconColor = 'blue';\r\n      break;\r\n  }\r\n  return new olstyle.Style({\r\n    image: new olstyle.Icon({\r\n      src: './assets/igo2/geo/icons/place_' + iconColor + '_36px.svg',\r\n      imgSize: [36, 36], // for ie\r\n      anchor: [0.5, 1]\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  Feature,\r\n  FeatureMotion,\r\n  featureToOl,\r\n  moveToOlFeatures\r\n} from '../../feature';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { createOverlayLayer } from './overlay.utils';\r\n\r\n/**\r\n * This class is simply a shortcut for adding features to a map.\r\n * It does nothing more than a standard layer but it's shipped with\r\n * a defautl style based on the geometry type of the features it contains.\r\n * @todo Enhance that by using a FeatureStore and strategies.\r\n */\r\nexport class Overlay {\r\n  /**\r\n   * The map to add the layer to\r\n   */\r\n  private map: IgoMap;\r\n\r\n  /**\r\n   * Overlay layer\r\n   */\r\n  private layer: VectorLayer;\r\n\r\n  /**\r\n   * Overlay layer's data source\r\n   */\r\n  get dataSource(): FeatureDataSource {\r\n    return this.layer.dataSource as FeatureDataSource;\r\n  }\r\n\r\n  constructor(map?: IgoMap) {\r\n    this.layer = createOverlayLayer();\r\n    this.setMap(map);\r\n  }\r\n\r\n  /**\r\n   * Bind this to a map and add the overlay layer to that map\r\n   * @param map Map\r\n   */\r\n  setMap(map: IgoMap) {\r\n    if (map === undefined) {\r\n      if (this.map !== undefined) {\r\n        this.map.ol.removeLayer(this.layer.ol);\r\n      }\r\n    } else {\r\n      map.ol.addLayer(this.layer.ol);\r\n    }\r\n    this.map = map;\r\n  }\r\n\r\n  /**\r\n   * Set the overlay features and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  setFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.clear();\r\n    this.addFeatures(features, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a feature to the  overlay and, optionally, move to it\r\n   * @param feature Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeature(feature: Feature, motion: FeatureMotion = FeatureMotion.Default) {\r\n    this.addFeatures([feature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add features to the  overlay and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    const olFeatures = [];\r\n    features.forEach((feature: Feature) => {\r\n      const olFeature = featureToOl(feature, this.map.projection);\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry === null) {\r\n        return;\r\n      }\r\n      olFeatures.push(olFeature);\r\n    });\r\n\r\n    this.addOlFeatures(olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a OpenLayers feature to the  overlay and, optionally, move to it\r\n   * @param olFeature OpenLayers Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeature(\r\n    olFeature: OlFeature,\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.addOlFeature([olFeature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add OpenLayers features to the overlay and, optionally, move to them\r\n   * @param olFeatures OpenLayers Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.dataSource.ol.addFeatures(olFeatures);\r\n    moveToOlFeatures(this.map, olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay\r\n   */\r\n  clear() {\r\n    this.dataSource.ol.clear();\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { Watcher, SubjectStatus } from '@igo2/utils';\r\nimport { Layer } from '../../layer/shared/layers';\r\n\r\nexport class LayerWatcher extends Watcher {\r\n  private loaded = 0;\r\n  private loading = 0;\r\n  private layers: Layer[] = [];\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  watch() {}\r\n\r\n  unwatch() {\r\n    this.layers.forEach(layer => this.unwatchLayer(layer), this);\r\n  }\r\n\r\n  watchLayer(layer: Layer) {\r\n    if (layer.status$ === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.layers.push(layer);\r\n\r\n    const layer$$ = layer.status$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe(status => {\r\n        if (status === SubjectStatus.Working) {\r\n          this.loading += 1;\r\n        } else if (status === SubjectStatus.Done) {\r\n          this.loaded += 1;\r\n        }\r\n\r\n        if (this.loaded >= this.loading) {\r\n          this.loading = this.loaded = 0;\r\n          this.status = SubjectStatus.Done;\r\n        } else if (this.loading > 0) {\r\n          this.status = SubjectStatus.Working;\r\n        }\r\n      });\r\n\r\n    this.subscriptions.push(layer$$);\r\n  }\r\n\r\n  unwatchLayer(layer: Layer) {\r\n    const index = this.layers.indexOf(layer);\r\n    if (index >= 0) {\r\n      const status = (layer as any).watcher.status;\r\n      if (\r\n        [SubjectStatus.Working, SubjectStatus.Waiting].indexOf(status) !== -1\r\n      ) {\r\n        this.loaded += 1;\r\n      }\r\n      this.subscriptions[index].unsubscribe();\r\n      this.subscriptions.splice(index, 1);\r\n      this.layers.splice(index, 1);\r\n      (layer as any).watcher.unwatch();\r\n    }\r\n  }\r\n}\r\n","export enum MapViewAction {\r\n  Move,\r\n  Zoom\r\n}\r\n","import * as olproj from 'ol/proj';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { MAC } from 'ol/has';\r\n\r\nimport { MapViewState } from './map.interface';\r\nimport proj4 from 'proj4';\r\n\r\n/**\r\n * This method extracts a coordinate tuple from a string.\r\n * @param str Any string\r\n * @param mapProjection string Map Projection\r\n * @returns object:\r\n *             lonLat: Coordinate,\r\n *             message: Message of error,\r\n *             radius: radius of the confience of coordinate,\r\n *             conf: confidence of the coordinate}\r\n */\r\nexport function stringToLonLat(str: string, mapProjection: string): {lonLat: [number, number] | undefined,\r\n                                                                     message: string,\r\n                                                                     radius: number | undefined,\r\n                                                                     conf: number | undefined} {\r\n\r\n  let lonLat: [number, number];\r\n  let coordStr: string;\r\n  let negativeLon: string;\r\n  let degreesLon: string;\r\n  let minutesLon: string;\r\n  let secondsLon: string;\r\n  let directionLon: string;\r\n  let decimalLon: string;\r\n  let negativeLat: string;\r\n  let degreesLat: string;\r\n  let minutesLat: string;\r\n  let secondsLat: string;\r\n  let directionLat: string;\r\n  let decimalLat: string;\r\n  let pattern: string;\r\n  let timeZone: string;\r\n  let radius: string;\r\n  let conf: string;\r\n  let lon: any;\r\n  let lat: any;\r\n\r\n  const projectionPattern = '(;[\\\\d]{4,6})';\r\n  const toProjection = '4326';\r\n  let projectionStr: string;\r\n  const projectionRegex = new RegExp(projectionPattern, 'g');\r\n\r\n  const lonlatCoord =  '([-+])?([\\\\d]{1,3})([,.](\\\\d+))?';\r\n  const lonLatPattern = `${lonlatCoord}[\\\\s,.]\\\\s*${lonlatCoord}`;\r\n  const lonLatRegex = new RegExp(`^${lonLatPattern}$`, 'g');\r\n\r\n  const dmsCoord = '([0-9]{1,2})[:|Â°]?\\\\s*([0-9]{1,2})?[:|\\'|â²|â]?\\\\s*([0-9]{1,2}(?:\\.[0-9]+){0,1})?\\\\s*[\"|â³|â]?\\\\s*';\r\n  const dmsCoordPattern = `${dmsCoord}([N|S]),?\\\\s*${dmsCoord}([E|W])`;\r\n  const dmsRegex = new RegExp(`^${dmsCoordPattern}`, 'gi');\r\n\r\n  const patternUtmMtm = '(UTM|MTM)\\-?(\\\\d{1,2})[\\\\s,.]*(\\\\d+[\\\\s.,]?\\\\d+)[\\\\s,.]+(\\\\d+[\\\\s.,]?\\\\d+)';\r\n  const utmMtmRegex =  new RegExp(`^${patternUtmMtm}`, 'gi');\r\n\r\n  const ddCoord = '([-+])?(\\\\d{1,3})[,.](\\\\d+)';\r\n  const patternDd = `${ddCoord}[,.]?\\\\s*${ddCoord}`;\r\n  const ddRegex =  new RegExp(`^${patternDd}`, 'g');\r\n\r\n  const dmdCoord = '([-+])?(\\\\d{1,3})[\\\\s,.]{1}(\\\\d{1,2})[\\\\s,.]{1}(\\\\d{1,2})[.,]?(\\\\d{1,5})?';\r\n  const patternDmd = `${dmdCoord}[,.]?\\\\s*${dmdCoord}`;\r\n  const dmdRegex =  new RegExp(`^${patternDmd}`, 'g');\r\n\r\n  // tslint:disable:max-line-length\r\n  const patternBELL = 'LAT\\\\s*[\\\\s:]*\\\\s*([-+])?(\\\\d{1,2})[\\\\s.,]?(\\\\d+)?[\\\\s.,]?\\\\s*(\\\\d{1,2}([.,]\\\\d+)?)?\\\\s*(N|S|E|W)?\\\\s*LONG\\\\s*[\\\\s:]*\\\\s*([-+])?(\\\\d{1,3})[\\\\s.,]?(\\\\d+)?[\\\\s.,]?\\\\s*(\\\\d{1,2}([.,]\\\\d+)?)?\\\\s*(N|S|E|W)?\\\\s*UNC\\\\s*[\\\\s:]?\\\\s*(\\\\d+)\\\\s*CONF\\\\s*[\\\\s:]?\\\\s*(\\\\d{1,3})';\r\n  const bellRegex =  new RegExp(`^${patternBELL}?`, 'gi');\r\n\r\n  const mmCoord = '([-+]?\\\\d+)[,.]?(\\\\d+)?';\r\n  const mmPattern = `${mmCoord}[\\\\s,.]\\\\s*${mmCoord}`;\r\n  const mmRegex =  new RegExp(`^${mmPattern}$`, 'g');\r\n\r\n  str = str.toLocaleUpperCase();\r\n\r\n  // Extract projection\r\n  if (projectionRegex.test(str)) {\r\n    [coordStr, projectionStr] = str.split(';');\r\n  } else {\r\n    coordStr = str;\r\n  }\r\n\r\n  if (lonLatRegex.test(coordStr)) {\r\n\r\n    [,\r\n     negativeLon,\r\n     lon,\r\n     ,\r\n     decimalLon,\r\n     negativeLat,\r\n     lat,\r\n     ,\r\n     decimalLat] = coordStr.match(lonLatPattern);\r\n\r\n    lon = parseFloat((negativeLon ? negativeLon : '') + lon + '.' + decimalLon);\r\n    lat = parseFloat((negativeLat ? negativeLat : '') + lat + '.' + decimalLat);\r\n\r\n  } else if (dmsRegex.test(coordStr)) {\r\n      [,\r\n       degreesLon,\r\n       minutesLon,\r\n       secondsLon,\r\n       directionLon,\r\n       degreesLat,\r\n       minutesLat,\r\n       secondsLat,\r\n       directionLat] = coordStr.match(dmsCoordPattern);\r\n\r\n      lon = convertDMSToDD(parseFloat(degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);\r\n      lat = convertDMSToDD(parseFloat(degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);\r\n\r\n  } else if (utmMtmRegex.test(coordStr)) {\r\n      [, pattern, timeZone, lon, lat] = coordStr.match(patternUtmMtm);\r\n      const utm = '+proj=' + pattern + ' +zone=' + timeZone;\r\n      const wgs84 = '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs';\r\n      [lon, lat] = proj4(utm.toLocaleLowerCase(), wgs84, [parseFloat(lon), parseFloat(lat)]);\r\n\r\n  } else if (dmdRegex.test(coordStr)) {\r\n    [,\r\n      negativeLon,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      decimalLon,\r\n      negativeLat,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      decimalLat] = coordStr.match(patternDmd);\r\n\r\n    lon = convertDMSToDD(parseFloat((negativeLon ? negativeLon : '') + degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);\r\n    lat = convertDMSToDD(parseFloat((negativeLat ? negativeLat : '') + degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);\r\n\r\n  } else if (ddRegex.test(coordStr)) {\r\n      [,\r\n        negativeLon,\r\n        degreesLon,\r\n        decimalLon,\r\n        negativeLat,\r\n        degreesLat,\r\n        decimalLat] = coordStr.match(patternDd);\r\n\r\n      lon = convertDMSToDD(parseFloat((negativeLon ? negativeLon : '') + degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);\r\n      lat = convertDMSToDD(parseFloat((negativeLat ? negativeLat : '') + degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);\r\n\r\n  } else if (bellRegex.test(coordStr)) {\r\n    [,\r\n      negativeLat,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      ,\r\n      directionLat,\r\n      negativeLon,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      ,\r\n      directionLon,\r\n      radius,\r\n      conf] = coordStr.match(patternBELL);\r\n\r\n    // Set default value for North America\r\n    if (!directionLon) {\r\n      directionLon = 'W';\r\n    }\r\n\r\n    // Check if real minutes or decimals\r\n    if (minutesLon && minutesLon.length > 2) {\r\n      lon = parseFloat((negativeLon ? negativeLon : '') + degreesLon + '.' + minutesLon);\r\n    } else {\r\n      lon = convertDMSToDD(parseFloat(degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);\r\n    }\r\n\r\n    if (minutesLat && minutesLat.length > 2) {\r\n      lat = parseFloat((negativeLat ? negativeLat : '') + degreesLat + '.' + minutesLat);\r\n    } else {\r\n      lat = convertDMSToDD(parseFloat(degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);\r\n    }\r\n\r\n  } else if (mmRegex.test(coordStr)) {\r\n      [, lon, decimalLon, lat, decimalLat] = coordStr.match(mmPattern);\r\n\r\n      if (decimalLon) {\r\n        lon = parseFloat(lon + '.' + decimalLon);\r\n      }\r\n\r\n      if (decimalLat) {\r\n        lat = parseFloat(lat + '.' + decimalLat);\r\n      }\r\n\r\n  } else {\r\n    return {lonLat: undefined, message: '', radius: undefined, conf: undefined};\r\n  }\r\n\r\n  // Set a negative coordinate for North America zone\r\n  if (lon > 0 && lat > 0) {\r\n    if (lon > lat) {\r\n      lon = -lon;\r\n    } else {\r\n      lat = -lat;\r\n    }\r\n  }\r\n\r\n  // Reverse coordinate to respect lonLat convention\r\n  if (lon < lat) {\r\n    lonLat = [lon, lat] as [number, number];\r\n  } else {\r\n    lonLat = [lat, lon] as [number, number];\r\n  }\r\n\r\n  // Reproject the coordinate if projection parameter have been set and coord is not 4326\r\n  if ((projectionStr !== undefined && projectionStr !== toProjection) || (lonLat[0] > 180 || lonLat[0] < -180)) {\r\n\r\n    const source = projectionStr ? 'EPSG:' + projectionStr : mapProjection;\r\n    const dest = 'EPSG:' + toProjection;\r\n\r\n    try {\r\n      lonLat = olproj.transform(lonLat, source, dest);\r\n    } catch (e) {\r\n      return {lonLat: undefined, message: 'Projection ' + source + ' not supported', radius: undefined, conf: undefined};\r\n    }\r\n  }\r\n\r\n  return {lonLat, message: '', radius: radius ? parseInt(radius, 10) : undefined, conf: conf ? parseInt(conf, 10) : undefined};\r\n}\r\n\r\n/**\r\n * Convert degrees minutes seconds to dd\r\n * @param degrees Degrees\r\n * @param minutes Minutes\r\n * @param seconds Seconds\r\n * @param direction Direction\r\n */\r\nfunction convertDMSToDD(degrees: number, minutes: number, seconds: number, direction: string) {\r\n  minutes = minutes || 0;\r\n  seconds = seconds || 0;\r\n  let dd = degrees + (minutes / 60) + (seconds / 3600);\r\n\r\n  if (direction === 'S' || direction === 'W') {\r\n      dd = -dd;\r\n  } // Don't do anything for N or E\r\n  return dd;\r\n}\r\n\r\n/**\r\n * Return true of two view states are equal.\r\n * @param state1 View state\r\n * @param state2 View state\r\n * @returns True if the view states are equal\r\n */\r\nexport function viewStatesAreEqual(state1: MapViewState, state2: MapViewState): boolean {\r\n  if (state1 === undefined || state2 === undefined) {\r\n    return false;\r\n  }\r\n\r\n  const tolerance = 1 / 10000;\r\n  return state1.zoom === state2.zoom &&\r\n    Math.trunc(state1.center[0] / tolerance) === Math.trunc(state2.center[0] / tolerance) &&\r\n    Math.trunc(state1.center[1] / tolerance) === Math.trunc(state2.center[1] / tolerance);\r\n}\r\n\r\n/**\r\n * Format the scale to a human readable text\r\n * @param Scale of the map\r\n * @returns Human readable scale text\r\n */\r\nexport function formatScale(scale) {\r\n  scale = Math.round(scale);\r\n  if (scale < 10000) { return scale + ''; }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  if (scale < 1000) { return scale + 'K'; }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  return scale + 'M';\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param scale Scale denom\r\n * @param dpi DPI\r\n * @returns Resolution\r\n */\r\nexport function getResolutionFromScale(scale: number, dpi: number = 72): number {\r\n  return scale / (39.37 * dpi);\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param Scale denom\r\n * @returns Resolution\r\n */\r\nexport function getScaleFromResolution(resolution: number, unit: string = 'm', dpi: number = 72): number {\r\n  return resolution * olproj.METERS_PER_UNIT[unit] * 39.37 * dpi;\r\n}\r\n\r\n/**\r\n * Returns true if the CTRL key is pushed during an Ol MapBrowserPointerEvent\r\n * @param event OL MapBrowserPointerEvent\r\n * @returns Whether the CTRL key is pushed\r\n */\r\nexport function ctrlKeyDown(event: OlMapBrowserPointerEvent): boolean {\r\n  const originalEvent = event.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\n/**\r\n * Base map controller\r\n */\r\nexport class MapController {\r\n\r\n  /**\r\n   * OL Map\r\n   */\r\n  protected olMap: OlMap;\r\n\r\n  /**\r\n   * Array of observer keys\r\n   */\r\n  protected observerKeys: string[] = [];\r\n\r\n  /**\r\n   * Return the OL map this controller is bound to\r\n   * @returns OL Map\r\n   */\r\n  getOlMap(): OlMap {\r\n    return this.olMap;\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap !== undefined && this.getOlMap() !== undefined) {\r\n      throw new Error('This controller is already bound to a map.');\r\n    }\r\n\r\n    if (olMap === undefined) {\r\n      this.teardownObservers();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    this.observerKeys.forEach((key: string) => unByKey(key));\r\n    this.observerKeys = [];\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlMapEvent from 'ol/MapEvent';\r\n\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport * as oleasing from 'ol/easing';\r\nimport * as olproj from 'ol/proj';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlView from 'ol/View';\r\n\r\nimport { MapViewAction } from '../map.enums';\r\nimport { MapExtent, MapViewState } from '../map.interface';\r\nimport { getScaleFromResolution, viewStatesAreEqual } from '../map.utils';\r\nimport { MapController } from './controller';\r\n\r\nexport interface MapViewControllerOptions {\r\n  stateHistory: boolean;\r\n}\r\n\r\n/**\r\n * Controller to handle map view interactions\r\n */\r\nexport class MapViewController extends MapController {\r\n\r\n  /**\r\n   * Observable of the current resolution\r\n   */\r\n  resolution$ = new BehaviorSubject<number>(undefined);\r\n\r\n  /**\r\n   * Observable of the current state\r\n   */\r\n  state$ = new BehaviorSubject<MapViewState>(undefined);\r\n\r\n  /**\r\n   * Extent stream\r\n   */\r\n  private extent$ = new Subject<{extent: MapExtent, action: MapViewAction}>();\r\n\r\n  /**\r\n   * Subscription to the movement stream\r\n   */\r\n  private extent$$: Subscription;\r\n\r\n  /**\r\n   * History of states\r\n   */\r\n  private states: MapViewState[] = [];\r\n\r\n  /**\r\n   * Current state index\r\n   */\r\n  private stateIndex: number = 0;\r\n\r\n  /**\r\n   * Whether the view controller should keep the view's state history\r\n   */\r\n  get stateHistory(): boolean {\r\n    return this.options ? this.options.stateHistory === true : false;\r\n  }\r\n\r\n  /**\r\n   * OL View\r\n   */\r\n  get olView(): OlView { return this.olMap.getView(); }\r\n\r\n  constructor(private options?: MapViewControllerOptions) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    super.setOlMap(olMap);\r\n    this.setupObservers();\r\n  }\r\n\r\n  /**\r\n   * Observe move moveend and subscribe to the extent stream\r\n   */\r\n  setupObservers() {\r\n    if (this.stateHistory === true) {\r\n      this.observerKeys.push(\r\n        this.olMap.on('moveend', (event: OlMapEvent) => this.onMoveEnd(event))\r\n      );\r\n    }\r\n\r\n    this.extent$$ = this.extent$\r\n      .pipe(debounceTime(25))\r\n      .subscribe((value: {extent: MapExtent, action: MapViewAction}) => {\r\n        this.setExtent(value.extent, value.action);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    super.teardownObservers();\r\n    if (this.extent$$ !== undefined) {\r\n      this.extent$$.unsubscribe();\r\n      this.extent$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the view's OL projection\r\n   * @returns OL projection\r\n   */\r\n  getOlProjection(): OlProjection {\r\n    return this.olView.getProjection();\r\n  }\r\n\r\n  /**\r\n   * Get the current map view center\r\n   * @param projection Output projection\r\n   * @returns Center\r\n   */\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    let center = this.olView.getCenter();\r\n    if (projection && center) {\r\n      center = olproj.transform(center, this.getOlProjection(), projection);\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * Get the current view extent\r\n   * @param projection Output projection\r\n   * @returns Extent\r\n   */\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    let extent = this.olView.calculateExtent(this.olMap.getSize());\r\n    if (projection && extent) {\r\n      extent = olproj.transformExtent(extent, this.getOlProjection(), projection);\r\n    }\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * Get the current scale\r\n   * @param dpi Dot per inches\r\n   * @returns View scale\r\n   */\r\n  getScale(dpi = 72) {\r\n    return getScaleFromResolution(\r\n      this.getResolution(),\r\n      this.getOlProjection().getUnits(),\r\n      dpi\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current resolution\r\n   * @returns Projection denominator\r\n   */\r\n  getResolution(): number {\r\n    return this.olView.getResolution();\r\n  }\r\n\r\n  /**\r\n   * Get the current zoom level\r\n   * @returns Zoom level\r\n   */\r\n  getZoom(): number {\r\n    return Math.round(this.olView.getZoom());\r\n  }\r\n\r\n  /**\r\n   * Zoom in\r\n   */\r\n  zoomIn() {\r\n    this.zoomTo(this.olView.getZoom() + 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom out\r\n   */\r\n  zoomOut() {\r\n    this.zoomTo(this.olView.getZoom() - 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom to specific zoom level\r\n   * @param zoom Zoom level\r\n   */\r\n  zoomTo(zoom: number) {\r\n    this.olView.animate({\r\n      zoom,\r\n      duration: 250,\r\n      easing: oleasing.easeOut\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Move to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to move to\r\n   */\r\n  moveToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({extent, action: MapViewAction.Move});\r\n  }\r\n\r\n  /**\r\n   * Zoom to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to zoom to\r\n   */\r\n  zoomToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({extent, action: MapViewAction.Zoom});\r\n  }\r\n\r\n  /**\r\n   * Return the current view rotation\r\n   * @returns Rotation angle in degrees\r\n   */\r\n  getRotation(): number {\r\n    return this.olView.getRotation();\r\n  }\r\n\r\n  /**\r\n   * Reset the view rotation to 0\r\n   */\r\n  resetRotation() {\r\n    this.olView.animate({rotation: 0});\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a previous state\r\n   * @returns True if the view has a previous state\r\n   */\r\n  hasPreviousState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex > 0;\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a next state\r\n   * @returns True if the view has a next state\r\n   */\r\n  hasNextState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex < this.states.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Restore the previous view state\r\n   */\r\n  previousState() {\r\n    if (this.hasPreviousState()) {\r\n      this.setStateIndex(this.stateIndex - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore the next view state\r\n   */\r\n  nextState() {\r\n    if (this.hasNextState()) {\r\n      this.setStateIndex(this.stateIndex + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the state history\r\n   */\r\n  clearStateHistory() {\r\n    this.states = [];\r\n    this.stateIndex = 0;\r\n  }\r\n\r\n  /**\r\n   * Update the the view to it's intial state\r\n   */\r\n  setInitialState() {\r\n    if (this.states.length > 0) {\r\n      this.setStateIndex(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move to the extent retrieved from the stream\r\n   * @param extent Extent\r\n   * @param action Either zoom or move\r\n   */\r\n  private setExtent(extent: MapExtent, action: MapViewAction) {\r\n    const olView = this.olView;\r\n    if (action === MapViewAction.Zoom) {\r\n      olView.fit(extent, {maxZoom: 17});\r\n    } else if (action === MapViewAction.Move) {\r\n      olView.fit(extent, {maxZoom: olView.getZoom()});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the view state index\r\n   * @param index State index\r\n   */\r\n  private setStateIndex(index: number) {\r\n    this.stateIndex = index;\r\n    this.setState(this.states[index]);\r\n  }\r\n\r\n  /**\r\n   * Set the view state\r\n   * @param state View state\r\n   */\r\n  private setState(state: MapViewState) {\r\n    this.olView.animate({\r\n      resolution: state.resolution,\r\n      center: state.center,\r\n      duration: 0\r\n    });\r\n  }\r\n\r\n  /**\r\n   * On move end, get the view state and record it.\r\n   * @param event Map event\r\n   */\r\n  private onMoveEnd(event: OlMapEvent) {\r\n    const resolution = this.getResolution();\r\n    if (this.resolution$.value !== resolution) {\r\n      this.resolution$.next(resolution);\r\n    }\r\n\r\n    const state = {\r\n      resolution,\r\n      center: this.getCenter(),\r\n      zoom: this.getZoom()\r\n    };\r\n\r\n    if (this.stateHistory === true) {\r\n      const stateIndex = this.stateIndex;\r\n      const stateAtIndex = this.states.length === 0 ? undefined : this.states[stateIndex];\r\n      if (!viewStatesAreEqual(state, stateAtIndex)) {\r\n        this.states = this.states.slice(0, stateIndex + 1).concat([state]);\r\n        this.stateIndex = this.states.length - 1;\r\n      }\r\n    }\r\n\r\n    this.state$.next(state);\r\n  }\r\n}\r\n","import olMap from 'ol/Map';\r\nimport olView from 'ol/View';\r\nimport olFeature from 'ol/Feature';\r\nimport olGeolocation from 'ol/Geolocation';\r\nimport olControlAttribution from 'ol/control/Attribution';\r\nimport olControlScaleLine from 'ol/control/ScaleLine';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport * as olinteraction from 'ol/interaction';\r\n\r\nimport proj4 from 'proj4';\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\n\r\nimport { Layer } from '../../layer/shared/layers';\r\nimport { Overlay } from '../../overlay/shared/overlay';\r\n\r\nimport { LayerWatcher } from '../utils/layer-watcher';\r\nimport {\r\n  MapViewOptions,\r\n  MapOptions,\r\n  MapAttributionOptions,\r\n  MapScaleLineOptions,\r\n  MapExtent\r\n} from './map.interface';\r\nimport { MapViewController } from './controllers/view';\r\n\r\n// TODO: This class is messy. Clearly define it's scope and the map browser's.\r\n// Move some stuff into controllers.\r\nexport class IgoMap {\r\n  public ol: olMap;\r\n  public layers$ = new BehaviorSubject<Layer[]>([]);\r\n  public status$: Subject<SubjectStatus>;\r\n  public geolocation$ = new BehaviorSubject<olGeolocation>(undefined);\r\n  public geolocationFeature: olFeature;\r\n  public overlay: Overlay;\r\n  public viewController: MapViewController;\r\n\r\n  private layerWatcher: LayerWatcher;\r\n  private geolocation: olGeolocation;\r\n  private geolocation$$: Subscription;\r\n\r\n  private options: MapOptions;\r\n  private defaultOptions: Partial<MapOptions> = {\r\n    controls: { attribution: false }\r\n  };\r\n\r\n  get layers(): Layer[] {\r\n    return this.layers$.value;\r\n  }\r\n\r\n  get projection(): string {\r\n    return this.viewController.getOlProjection().getCode();\r\n  }\r\n\r\n  constructor(options?: MapOptions) {\r\n    this.options = Object.assign({}, this.defaultOptions, options);\r\n    this.layerWatcher = new LayerWatcher();\r\n    this.status$ = this.layerWatcher.status$;\r\n    olproj4.register(proj4);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    const controls = [];\r\n    if (this.options.controls) {\r\n      if (this.options.controls.attribution) {\r\n        const attributionOpt = (this.options.controls.attribution === true\r\n          ? {}\r\n          : this.options.controls.attribution) as MapAttributionOptions;\r\n        controls.push(new olControlAttribution(attributionOpt));\r\n      }\r\n      if (this.options.controls.scaleLine) {\r\n        const scaleLineOpt = (this.options.controls.scaleLine === true\r\n          ? {}\r\n          : this.options.controls.scaleLine) as MapScaleLineOptions;\r\n        controls.push(new olControlScaleLine(scaleLineOpt));\r\n      }\r\n    }\r\n    let interactions = {};\r\n    if (this.options.interactions === false) {\r\n      interactions = {\r\n        altShiftDragRotate: false,\r\n        doubleClickZoom: false,\r\n        keyboard: false,\r\n        mouseWheelZoom: false,\r\n        shiftDragZoom: false,\r\n        dragPan: false,\r\n        pinchRotate: false,\r\n        pinchZoom: false\r\n      };\r\n    }\r\n\r\n    this.ol = new olMap({\r\n      interactions: olinteraction.defaults(interactions),\r\n      controls\r\n    });\r\n\r\n    this.setView(this.options.view || {});\r\n    this.viewController = new MapViewController({\r\n      stateHistory: true\r\n    });\r\n    this.viewController.setOlMap(this.ol);\r\n    this.overlay = new Overlay(this);\r\n  }\r\n\r\n  setTarget(id: string) {\r\n    this.ol.setTarget(id);\r\n    if (id !== undefined) {\r\n      this.layerWatcher.subscribe(() => {}, null);\r\n    } else {\r\n      this.layerWatcher.unsubscribe();\r\n    }\r\n  }\r\n\r\n  updateView(options: MapViewOptions) {\r\n    const currentView = this.ol.getView();\r\n    const viewOptions = Object.assign(\r\n      {\r\n        zoom: currentView.getZoom()\r\n      },\r\n      currentView.getProperties()\r\n    );\r\n\r\n    this.setView(Object.assign(viewOptions, options));\r\n  }\r\n\r\n  /**\r\n   * Set the map view\r\n   * @param options Map view options\r\n   */\r\n  setView(options: MapViewOptions) {\r\n    if (this.viewController !== undefined) {\r\n      this.viewController.clearStateHistory();\r\n    }\r\n\r\n    const view = new olView(options);\r\n    this.ol.setView(view);\r\n\r\n    this.unsubscribeGeolocate();\r\n    if (options) {\r\n      if (options.center) {\r\n        const projection = view.getProjection().getCode();\r\n        const center = olproj.fromLonLat(options.center, projection);\r\n        view.setCenter(center);\r\n      }\r\n\r\n      if (options.geolocate) {\r\n        this.geolocate(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    return this.viewController.getCenter();\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    return this.viewController.getExtent();\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getZoom(): number {\r\n    return this.viewController.getZoom();\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (!baseLayer) {\r\n      return;\r\n    }\r\n\r\n    for (const bl of this.getBaseLayers()) {\r\n      bl.visible = false;\r\n    }\r\n\r\n    baseLayer.visible = true;\r\n  }\r\n\r\n  getBaseLayers(): Layer[] {\r\n    return this.layers.filter((layer: Layer) => layer.baseLayer === true);\r\n  }\r\n\r\n  getLayerById(id: string): Layer {\r\n    return this.layers.find((layer: Layer) => layer.id && layer.id === id);\r\n  }\r\n\r\n  getLayerByAlias(alias: string): Layer {\r\n    return this.layers.find((layer: Layer) => layer.alias && layer.alias === alias);\r\n  }\r\n\r\n  /**\r\n   * Add a single layer\r\n   * @param layer Layer to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayer(layer: Layer, push = true) {\r\n    this.addLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add many layers\r\n   * @param layers Layers to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayers(layers: Layer[], push = true) {\r\n    const addedLayers = layers\r\n      .map((layer: Layer) => this.doAddLayer(layer))\r\n      .filter((layer: Layer | undefined) => layer !== undefined);\r\n    this.setLayers([].concat(this.layers, addedLayers));\r\n  }\r\n\r\n  /**\r\n   * Remove a single layer\r\n   * @param layer Layer to remove\r\n   */\r\n  removeLayer(layer: Layer) {\r\n    this.removeLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove many layers\r\n   * @param layers Layers to remove\r\n   */\r\n  removeLayers(layers: Layer[]) {\r\n    const newLayers = this.layers$.value.slice(0);\r\n    const layersToRemove = [];\r\n    layers.forEach((layer: Layer) => {\r\n      const index = this.getLayerIndex(layer);\r\n      if (index >= 0) {\r\n        layersToRemove.push(layer);\r\n        newLayers.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    layersToRemove.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.setLayers(newLayers);\r\n  }\r\n\r\n  /**\r\n   * Remove all layers\r\n   */\r\n  removeAllLayers() {\r\n    this.layers.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.layers$.next([]);\r\n  }\r\n\r\n  raiseLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index > 0) {\r\n      this.moveLayer(layer, index, index - 1);\r\n    }\r\n  }\r\n\r\n  lowerLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index < this.layers.length - 1) {\r\n      this.moveLayer(layer, index, index + 1);\r\n    }\r\n  }\r\n\r\n  moveLayer(layer: Layer, from: number, to: number) {\r\n    const layerTo = this.layers[to];\r\n    const zIndexTo = layerTo.zIndex;\r\n    const zIndexFrom = layer.zIndex;\r\n\r\n    layer.zIndex = zIndexTo;\r\n    layerTo.zIndex = zIndexFrom;\r\n\r\n    this.layers[to] = layer;\r\n    this.layers[from] = layerTo;\r\n    this.layers$.next(this.layers.slice(0));\r\n  }\r\n\r\n  /**\r\n   * Add a layer to the OL map and start watching. If the layer is already\r\n   * added to this map, make it visible but don't add it one again.\r\n   * @param layer Layer\r\n   * @returns The layer added, if any\r\n   */\r\n  private doAddLayer(layer: Layer) {\r\n    if (layer.baseLayer && layer.visible) {\r\n      this.changeBaseLayer(layer);\r\n    }\r\n\r\n    const existingLayer = this.getLayerById(layer.id);\r\n    if (existingLayer !== undefined) {\r\n      existingLayer.visible = true;\r\n      return;\r\n    }\r\n\r\n    if (layer.zIndex === undefined || layer.zIndex === 0) {\r\n      const offset = layer.baseLayer ? 1 : 10;\r\n      layer.zIndex = this.layers.length + offset;\r\n    }\r\n\r\n    layer.setMap(this);\r\n    this.layerWatcher.watchLayer(layer);\r\n    this.ol.addLayer(layer.ol);\r\n\r\n    return layer;\r\n  }\r\n\r\n  /**\r\n   * Remove a layer from the OL map and stop watching\r\n   * @param layer Layer\r\n   */\r\n  private doRemoveLayer(layer: Layer) {\r\n    this.layerWatcher.unwatchLayer(layer);\r\n    this.ol.removeLayer(layer.ol);\r\n    layer.setMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Update the layers observable\r\n   * @param layers Layers\r\n   */\r\n  private setLayers(layers: Layer[]) {\r\n    this.layers$.next(this.sortLayersByZIndex(layers).slice(0));\r\n  }\r\n\r\n  /**\r\n   * Sort layers by descending zIndex\r\n   * @param layers Array of layers\r\n   * @returns The original array, sorted by zIndex\r\n   */\r\n  private sortLayersByZIndex(layers: Layer[]) {\r\n    // Sort by descending zIndex\r\n    return layers.sort((layer1: Layer, layer2: Layer) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  /**\r\n   * Get layer index in the map's inenr array of layers\r\n   * @param layer Layer\r\n   * @returns The layer index\r\n   */\r\n  private getLayerIndex(layer: Layer) {\r\n    return this.layers.findIndex((_layer: Layer) => _layer === layer);\r\n  }\r\n\r\n  // TODO: Create a GeolocationController with everything below\r\n  geolocate(track = false) {\r\n    let first = true;\r\n    if (this.geolocation$$) {\r\n      track = this.geolocation.getTracking();\r\n      this.unsubscribeGeolocate();\r\n    }\r\n    this.startGeolocation();\r\n\r\n    this.geolocation$$ = this.geolocation$.subscribe(geolocation => {\r\n      if (!geolocation) {\r\n        return;\r\n      }\r\n      const accuracy = geolocation.getAccuracy();\r\n      if (accuracy < 10000) {\r\n        const geometry = geolocation.getAccuracyGeometry();\r\n        const extent = geometry.getExtent();\r\n        if (\r\n          this.geolocationFeature &&\r\n          this.overlay.dataSource.ol.getFeatureById(\r\n            this.geolocationFeature.getId()\r\n          )\r\n        ) {\r\n          this.overlay.dataSource.ol.removeFeature(this.geolocationFeature);\r\n        }\r\n        this.geolocationFeature = new olFeature({ geometry });\r\n        this.geolocationFeature.setId('geolocationFeature');\r\n        this.overlay.addFeature(this.geolocationFeature);\r\n        if (first) {\r\n          this.viewController.zoomToExtent(extent);\r\n        }\r\n      } else if (first) {\r\n        const view = this.ol.getView();\r\n        const coordinates = geolocation.getPosition();\r\n        view.setCenter(coordinates);\r\n        view.setZoom(14);\r\n      }\r\n      if (track) {\r\n        this.unsubscribeGeolocate();\r\n      }\r\n      first = false;\r\n    });\r\n  }\r\n\r\n  unsubscribeGeolocate() {\r\n    this.stopGeolocation();\r\n    if (this.geolocation$$) {\r\n      this.geolocation$$.unsubscribe();\r\n      this.geolocation$$ = undefined;\r\n    }\r\n  }\r\n\r\n  private startGeolocation() {\r\n    if (!this.geolocation) {\r\n      this.geolocation = new olGeolocation({\r\n        projection: this.projection,\r\n        tracking: true\r\n      });\r\n\r\n      this.geolocation.on('change', evt => {\r\n        this.geolocation$.next(this.geolocation);\r\n      });\r\n    } else {\r\n      this.geolocation.setTracking(true);\r\n    }\r\n  }\r\n\r\n  private stopGeolocation() {\r\n    if (this.geolocation) {\r\n      this.geolocation.setTracking(false);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { ActivityService } from '@igo2/core';\r\n\r\nimport { IgoMap, MapViewOptions } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-map-browser',\r\n  templateUrl: './map-browser.component.html',\r\n  styleUrls: ['./map-browser.component.scss']\r\n})\r\nexport class MapBrowserComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  private activityId: string;\r\n  private status$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get view(): MapViewOptions { return this._view; }\r\n  set view(value: MapViewOptions) {\r\n    this._view = value;\r\n    if (this.map !== undefined) {\r\n      this.map.updateView(value);\r\n    }\r\n  }\r\n  private _view: MapViewOptions;\r\n\r\n  public id = `igo-map-target-${new Date().getTime()}`;\r\n\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  ngOnInit() {\r\n    this.status$$ = this.map.status$.subscribe(status =>\r\n      this.handleStatusChange(status)\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.map.setTarget(this.id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.setTarget(undefined);\r\n    this.activityService.unregister(this.activityId);\r\n    this.status$$.unsubscribe();\r\n  }\r\n\r\n  private handleStatusChange(status: SubjectStatus) {\r\n    if (status === SubjectStatus.Working && this.activityId === undefined) {\r\n      this.activityId = this.activityService.register();\r\n    } else if (status === SubjectStatus.Done && this.activityId !== undefined) {\r\n      this.activityService.unregister(this.activityId);\r\n      this.activityId = undefined;\r\n    }\r\n  }\r\n}\r\n","import { Directive, AfterViewInit } from '@angular/core';\r\nimport { IgoMap } from './map';\r\nimport { MapBrowserComponent } from '../map-browser/map-browser.component';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { MVTDataSourceOptions, XYZDataSourceOptions, FeatureDataSourceOptions } from '../../datasource';\r\n\r\n@Directive({\r\n    selector: '[igoMapOffline]'\r\n  })\r\nexport class MapOfflineDirective implements AfterViewInit {\r\n\r\n  private context$$: Subscription;\r\n  private state: ConnectionState;\r\n  private component: MapBrowserComponent;\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    component: MapBrowserComponent,\r\n    private networkService: NetworkService\r\n    ) {\r\n      this.component = component;\r\n    }\r\n\r\n  ngAfterViewInit() {\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      console.log(state);\r\n      this.state = state;\r\n      this.changeLayer();\r\n    });\r\n\r\n    this.map.layers$.subscribe((layers: Layer[]) => {\r\n      this.changeLayer();\r\n    });\r\n  }\r\n\r\n  private changeLayer() {\r\n    let sourceOptions;\r\n    const layerList = this.map.layers$.value;\r\n    layerList.forEach(layer => {\r\n      if (layer.options.sourceOptions.type === 'mvt') {\r\n        sourceOptions = (layer.options.sourceOptions as MVTDataSourceOptions);\r\n        layer.ol.getSource().clear();\r\n      } else if (layer.options.sourceOptions.type === 'xyz') {\r\n        sourceOptions = (layer.options.sourceOptions as XYZDataSourceOptions);\r\n      } else if (layer.options.sourceOptions.type === 'vector') {\r\n        sourceOptions = (layer.options.sourceOptions as FeatureDataSourceOptions);\r\n      } else {\r\n        return;\r\n      }\r\n      if (sourceOptions.pathOffline  &&\r\n        this.state.connection === false) {\r\n          if (sourceOptions.excludeAttributeOffline) {\r\n            sourceOptions.excludeAttributeBackUp = sourceOptions.excludeAttribute;\r\n            sourceOptions.excludeAttribute = sourceOptions.excludeAttributeOffline;\r\n          }\r\n          layer.ol.getSource().setUrl(sourceOptions.pathOffline);\r\n      } else if (sourceOptions.pathOffline &&\r\n        this.state.connection === true) {\r\n          if (sourceOptions.excludeAttributeBackUp) {\r\n            sourceOptions.excludeAttribute = sourceOptions.excludeAttributeBackUp;\r\n          }\r\n          layer.ol.getSource().setUrl(sourceOptions.url);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport proj4 from 'proj4';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Projection } from './projection.interfaces';\r\n\r\n/**\r\n * When injected, this service automatically registers and\r\n * projection defined in the application config. A custom projection\r\n * needs to be registered to be usable by OL.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectionService {\r\n\r\n  constructor(private config: ConfigService) {\r\n    const projections = this.config.getConfig('projections') || [];\r\n    projections.forEach((projection: Projection) => {\r\n      this.registerProjection(projection);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Define a proj4 projection and register it in OL\r\n   * @param projection Projection\r\n   */\r\n  registerProjection(projection: Projection) {\r\n    proj4.defs(projection.code, projection.def);\r\n    olproj4.register(proj4);\r\n    olproj.get(projection.code).setExtent(projection.extent);\r\n  }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-zoom-button',\r\n  templateUrl: './zoom-button.component.html',\r\n  styleUrls: ['./zoom-button.component.scss']\r\n})\r\nexport class ZoomButtonComponent {\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string;\r\n\r\n  get zoom(): number { return this.map.viewController.getZoom(); }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-geolocate-button',\r\n  templateUrl: './geolocate-button.component.html',\r\n  styleUrls: ['./geolocate-button.component.scss']\r\n})\r\nexport class GeolocateButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  constructor() {}\r\n}\r\n","import {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationTriggerMetadata\r\n} from '@angular/animations';\r\n\r\nexport function baseLayersSwitcherSlideInOut(): AnimationTriggerMetadata {\r\n  return trigger('baseLayerSwitcherState', [\r\n    state(\r\n      'collapseIcon',\r\n      style({\r\n        height: '40px',\r\n        width: '40px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'collapseMap',\r\n      style({\r\n        height: '85px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'expand',\r\n      style({\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    transition('collapse => expand', animate('200ms')),\r\n    transition('expand => collapse', animate('200ms'))\r\n  ]);\r\n}\r\n","import { Component, Input, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MediaService, Media } from '@igo2/core';\r\nimport { Layer } from '../../layer';\r\nimport { IgoMap } from '../shared';\r\nimport { baseLayersSwitcherSlideInOut } from './baselayers-switcher.animation';\r\n\r\n@Component({\r\n  selector: 'igo-baselayers-switcher',\r\n  templateUrl: './baselayers-switcher.component.html',\r\n  styleUrls: ['./baselayers-switcher.component.scss'],\r\n  animations: [baseLayersSwitcherSlideInOut()]\r\n})\r\nexport class BaseLayersSwitcherComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get useStaticIcon(): boolean {\r\n    return this._useStaticIcon;\r\n  }\r\n  set useStaticIcon(value: boolean) {\r\n    this._useStaticIcon = value;\r\n  }\r\n  private _useStaticIcon: boolean;\r\n\r\n  public _baseLayers: Layer[] = [];\r\n  public expand = false;\r\n  public showButton = true;\r\n\r\n  private layers$$: Subscription;\r\n\r\n  constructor(private mediaService: MediaService) {\r\n    const media = this.mediaService.media$.value;\r\n    if (media === Media.Mobile && this.useStaticIcon === undefined) {\r\n      this.useStaticIcon = true;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(arrayLayers => {\r\n      this._baseLayers = arrayLayers.filter(l => l.baseLayer);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  collapseOrExpand() {\r\n    if (this.baseLayers.length > 1 || this.useStaticIcon) {\r\n      this.expand = !this.expand;\r\n    } else {\r\n      this.expand = false;\r\n    }\r\n  }\r\n\r\n  get baseLayers(): Layer[] {\r\n    const mapResolution = this.map.viewController.getResolution();\r\n\r\n    const bl = this._baseLayers.filter(l => {\r\n      return (\r\n        (!l.options.maxResolution ||\r\n          mapResolution <= l.options.maxResolution) &&\r\n        (!l.options.minResolution || mapResolution >= l.options.minResolution)\r\n      );\r\n    });\r\n\r\n    const blHidden = bl.filter(l => !l.visible);\r\n    return blHidden.length + 1 === bl.length ? blHidden : bl;\r\n  }\r\n}\r\n","import { Component, Input, AfterViewInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-mini-basemap',\r\n  templateUrl: './mini-basemap.component.html',\r\n  styleUrls: ['./mini-basemap.component.scss']\r\n})\r\nexport class MiniBaseMapComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n    this.handleMoveEnd();\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get baseLayer(): Layer {\r\n    return this._baseLayer;\r\n  }\r\n  set baseLayer(value: Layer) {\r\n    this._baseLayer = value;\r\n    this.handleBaseLayerChanged(value);\r\n  }\r\n  private _baseLayer: Layer;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  @Input()\r\n  get display(): boolean {\r\n    return this._display;\r\n  }\r\n  set display(value: boolean) {\r\n    this._display = value;\r\n  }\r\n  private _display: boolean;\r\n\r\n  public basemap = new IgoMap({\r\n    controls: {},\r\n    interactions: false\r\n  });\r\n\r\n  constructor(private layerService: LayerService) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.map.ol.on('moveend', () => this.handleMoveEnd());\r\n    this.handleMoveEnd();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.ol.un('moveend', () => this.handleMoveEnd());\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.map.changeBaseLayer(baseLayer);\r\n  }\r\n\r\n  private handleMoveEnd() {\r\n    this.basemap.ol.setView(this.map.ol.getView());\r\n  }\r\n\r\n  private handleBaseLayerChanged(baselayer) {\r\n    this.basemap.removeAllLayers();\r\n\r\n    const options: any = Object.assign(\r\n      Object.create(baselayer.options),\r\n      baselayer.options\r\n    );\r\n    options.visible = true;\r\n\r\n    const layer = this.layerService.createLayer(options);\r\n    this.basemap.addLayer(layer);\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-rotation-button',\r\n  templateUrl: './rotation-button.component.html',\r\n  styleUrls: ['./rotation-button.component.scss']\r\n})\r\nexport class RotationButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get showIfNoRotation(): boolean {\r\n    return this._showIfNoRotation;\r\n  }\r\n  set showIfNoRotation(value: boolean) {\r\n    this._showIfNoRotation = value;\r\n  }\r\n  private _showIfNoRotation: boolean;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  get rotated(): boolean {\r\n    return this.map.viewController.getRotation() !== 0;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  rotationStyle(radians): {} {\r\n    const rotation = 'rotate(' + radians + 'rad)';\r\n    return {\r\n      transform: rotation\r\n    };\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport * as olproj from 'ol/proj';\r\n\r\nexport class EsriStyleGenerator {\r\n  public _converters: any;\r\n  public _renderers: any;\r\n\r\n  constructor() {\r\n    this._converters = {};\r\n    this._converters.esriPMS = EsriStyleGenerator._convertEsriPMS;\r\n    this._converters.esriSFS = EsriStyleGenerator._convertEsriSFS;\r\n    this._converters.esriSLS = EsriStyleGenerator._convertEsriSLS;\r\n    this._converters.esriSMS = EsriStyleGenerator._convertEsriSMS;\r\n    this._converters.esriTS = EsriStyleGenerator._convertEsriTS;\r\n    this._renderers = {};\r\n    this._renderers.uniqueValue = this._renderUniqueValue;\r\n    this._renderers.simple = this._renderSimple;\r\n    this._renderers.classBreaks = this._renderClassBreaks;\r\n  }\r\n  static _convertPointToPixel(point) {\r\n    return point / 0.75;\r\n  }\r\n  static _transformColor(color): [number, number, number, number] {\r\n    // alpha channel is different, runs from 0-255 but in ol3 from 0-1\r\n    return [color[0], color[1], color[2], color[3] / 255];\r\n  }\r\n\r\n  static _getResolutionForScale(scale, units) {\r\n    const dpi = 25.4 / 0.28;\r\n    const mpu = olproj.METERS_PER_UNIT[units];\r\n    const inchesPerMeter = 39.37;\r\n    return parseFloat(scale) / (mpu * inchesPerMeter * dpi);\r\n  }\r\n\r\n  /* convert an Esri Text Symbol */\r\n  static _convertEsriTS(symbol) {\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    const text = symbol.text !== undefined ? symbol.text : undefined;\r\n    return new olstyle.Style({\r\n      text: new olstyle.Text({\r\n        fill: new olstyle.Fill({\r\n          color: EsriStyleGenerator._transformColor(symbol.color)\r\n        }),\r\n        font:\r\n          symbol.font.style +\r\n          ' ' +\r\n          symbol.font.weight +\r\n          ' ' +\r\n          symbol.font.size +\r\n          ' px ' +\r\n          symbol.font.family,\r\n        textBaseline: symbol.verticalAlignment,\r\n        textAlign: symbol.horizontalAlignment,\r\n        offsetX: EsriStyleGenerator._convertPointToPixel(symbol.xoffset),\r\n        offsetY: EsriStyleGenerator._convertPointToPixel(symbol.yoffset),\r\n        rotation,\r\n        text\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Picture Marker Symbol */\r\n  static _convertEsriPMS(symbol) {\r\n    const src = 'data:' + symbol.contentType + ';base64, ' + symbol.imageData;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n\r\n    return new olstyle.Style({\r\n      image: new olstyle.Icon({\r\n        src,\r\n        rotation\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Simple Fill Symbol */\r\n  static _convertEsriSFS(symbol) {\r\n    // there is no support in openlayers currently for fill patterns, so style is not interpreted\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    return new olstyle.Style({\r\n      fill,\r\n      stroke\r\n    });\r\n  }\r\n  static _convertOutline(outline) {\r\n    let lineDash;\r\n    const color = EsriStyleGenerator._transformColor(outline.color);\r\n    if (outline.style === 'esriSLSDash') {\r\n      lineDash = [5];\r\n    } else if (outline.style === 'esriSLSDashDot') {\r\n      lineDash = [5, 5, 1, 2];\r\n    } else if (outline.style === 'esriSLSDashDotDot') {\r\n      lineDash = [5, 5, 1, 2, 1, 2];\r\n    } else if (outline.style === 'esriSLSDot') {\r\n      lineDash = [1, 2];\r\n    } else if (outline.style === 'esriSLSNull') {\r\n      // line not visible, make color fully transparent\r\n      color[3] = 0;\r\n    }\r\n    return new olstyle.Stroke({\r\n      color,\r\n      lineDash,\r\n      width: EsriStyleGenerator._convertPointToPixel(outline.width)\r\n    });\r\n  }\r\n  /* convert an Esri Simple Line Symbol */\r\n  static _convertEsriSLS(symbol) {\r\n    return new olstyle.Style({\r\n      stroke: EsriStyleGenerator._convertOutline(symbol)\r\n    });\r\n  }\r\n  static _transformAngle(angle) {\r\n    if (angle === 0 || angle === undefined) {\r\n      return undefined;\r\n    }\r\n    const normalRad = (angle * Math.PI) / 180;\r\n    const ol3Rad = -normalRad + Math.PI / 2;\r\n    if (ol3Rad < 0) {\r\n      return 2 * Math.PI + ol3Rad;\r\n    } else {\r\n      return ol3Rad;\r\n    }\r\n  }\r\n  /* convert an Esri Simple Marker Symbol */\r\n  static _convertEsriSMS(symbol) {\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    const radius = EsriStyleGenerator._convertPointToPixel(symbol.size) / 2;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    if (symbol.style === 'esriSMSCircle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.Circle({\r\n          radius,\r\n          fill,\r\n          stroke\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSCross') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSDiamond') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSSquare') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSX') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSTriangle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 3,\r\n          radius,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  _convertLabelingInfo(labelingInfo, mapUnits) {\r\n    const styles = [];\r\n    for (let i = 0, ii = labelingInfo.length; i < ii; ++i) {\r\n      const labelExpression = labelingInfo[i].labelExpression;\r\n      // only limited support for label expressions\r\n      const field = labelExpression.substr(\r\n        labelExpression.indexOf('[') + 1,\r\n        labelExpression.indexOf(']') - 1\r\n      );\r\n      const symbol = labelingInfo[i].symbol;\r\n      const maxScale = labelingInfo[i].maxScale;\r\n      const minScale = labelingInfo[i].minScale;\r\n      let minResolution = null;\r\n      if (maxScale !== 0) {\r\n        minResolution = EsriStyleGenerator._getResolutionForScale(\r\n          maxScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      let maxResolution = null;\r\n      if (minScale !== 0) {\r\n        maxResolution = EsriStyleGenerator._getResolutionForScale(\r\n          minScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      styles.push(\r\n        (() => {\r\n          return function(feature, resolution) {\r\n            let visible = true;\r\n            if (this.minResolution !== null && this.maxResolution !== null) {\r\n              visible =\r\n                resolution < this.maxResolution &&\r\n                resolution >= this.minResolution;\r\n            } else if (this.minResolution !== null) {\r\n              visible = resolution >= this.minResolution;\r\n            } else if (this.maxResolution !== null) {\r\n              visible = resolution < this.maxResolution;\r\n            }\r\n            if (visible) {\r\n              const value = feature.get(this.field);\r\n              this.style.getText().setText(value);\r\n              return [this.style];\r\n            }\r\n          };\r\n        })().bind({\r\n          minResolution,\r\n          maxResolution,\r\n          field,\r\n          style\r\n        })\r\n      );\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  _renderSimple(renderer) {\r\n    const style = this._converters[renderer.symbol.type].call(\r\n      this,\r\n      renderer.symbol\r\n    );\r\n    return (() => {\r\n      return () => {\r\n        return [style];\r\n      };\r\n    })();\r\n  }\r\n  _renderClassBreaks(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    const defaultStyle = this._converters[defaultSymbol.type].call(\r\n      this,\r\n      defaultSymbol\r\n    );\r\n    const field = renderer.field;\r\n    const classes = [];\r\n    for (let i = 0, ii = renderer.classBreakInfos.length; i < ii; ++i) {\r\n      const classBreakInfo = renderer.classBreakInfos[i];\r\n      let min;\r\n      if (\r\n        classBreakInfo.classMinValue === null ||\r\n        classBreakInfo.classMinValue === undefined\r\n      ) {\r\n        if (i === 0) {\r\n          min = renderer.minValue;\r\n        } else {\r\n          min = renderer.classBreakInfos[i - 1].classMaxValue;\r\n        }\r\n      } else {\r\n        min = classBreakInfo.classMinValue;\r\n      }\r\n      const max = classBreakInfo.classMaxValue;\r\n      const symbol = classBreakInfo.symbol;\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      classes.push({ min, max, style });\r\n    }\r\n    return (() => {\r\n      return (feature) => {\r\n        const value = feature.get(field);\r\n        for (let i = 0, ii = classes.length; i < ii; ++i) {\r\n          let condition;\r\n          if (i === 0) {\r\n            condition = value >= classes[i].min && value <= classes[i].max;\r\n          } else {\r\n            condition = value > classes[i].min && value <= classes[i].max;\r\n          }\r\n          if (condition) {\r\n            return [classes[i].style];\r\n          }\r\n        }\r\n        return [defaultStyle];\r\n      };\r\n    })();\r\n  }\r\n  _renderUniqueValue(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    let defaultStyle = [];\r\n    if (defaultSymbol) {\r\n      defaultStyle = [\r\n        this._converters[defaultSymbol.type].call(this, defaultSymbol)\r\n      ];\r\n    }\r\n    const field = renderer.field1;\r\n    const infos = renderer.uniqueValueInfos;\r\n    const me = this;\r\n    return (() => {\r\n      const hash = {};\r\n      for (let i = 0, ii = infos.length; i < ii; ++i) {\r\n        const info = infos[i];\r\n        const symbol = info.symbol;\r\n        hash[info.value] = [me._converters[symbol.type].call(me, symbol)];\r\n      }\r\n\r\n      return (feature) => {\r\n        const style = hash[feature.get(field)];\r\n        return style ? style : defaultStyle;\r\n      };\r\n    })();\r\n  }\r\n  generateStyle(layerInfo, mapUnits) {\r\n    const drawingInfo = layerInfo.drawingInfo;\r\n    let styleFunctions = [];\r\n    const drawingInfoStyle = this._renderers[drawingInfo.renderer.type].call(\r\n      this,\r\n      drawingInfo.renderer\r\n    );\r\n    if (drawingInfoStyle !== undefined) {\r\n      styleFunctions.push(drawingInfoStyle);\r\n    }\r\n    if (layerInfo.labelingInfo) {\r\n      const labelingInfoStyleFunctions = this._convertLabelingInfo(\r\n        layerInfo.labelingInfo,\r\n        mapUnits\r\n      );\r\n      styleFunctions = styleFunctions.concat(labelingInfoStyleFunctions);\r\n    }\r\n    if (styleFunctions.length === 1) {\r\n      return styleFunctions[0];\r\n    } else {\r\n      return (() => {\r\n        return (feature, resolution) => {\r\n          let styles = [];\r\n          for (let i = 0, ii = styleFunctions.length; i < ii; ++i) {\r\n            const result = styleFunctions[i].call(null, feature, resolution);\r\n            if (result) {\r\n              styles = styles.concat(result);\r\n            }\r\n          }\r\n          return styles;\r\n        };\r\n      })();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Cacheable } from 'ngx-cacheable';\r\n\r\nimport { WMSCapabilities, WMTSCapabilities } from 'ol/format';\r\nimport { optionsFromCapabilities } from 'ol/source/WMTS.js';\r\nimport olAttribution from 'ol/control/Attribution';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { getResolutionFromScale } from '../../map';\r\nimport { EsriStyleGenerator } from '../utils/esri-style-generator';\r\n\r\nimport {\r\n  WMTSDataSourceOptions,\r\n  WMSDataSourceOptions,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSourceOptions\r\n} from './datasources';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CapabilitiesService {\r\n  private capabilitiesStore: any[] = [];\r\n  private parsers = {\r\n    wms: new WMSCapabilities(),\r\n    wmts: new WMTSCapabilities()\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getWMSOptions(\r\n    baseOptions: WMSDataSourceOptions\r\n  ): Observable<WMSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = (baseOptions.params as any).version;\r\n\r\n    return this.getCapabilities('wms', url, version).pipe(\r\n      map((capabilities: any) =>\r\n        this.parseWMSOptions(baseOptions, capabilities)\r\n      )\r\n    );\r\n  }\r\n\r\n  getWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = baseOptions.version;\r\n\r\n    const options = this.getCapabilities('wmts', url, version).pipe(\r\n      map((capabilities: any) =>\r\n        this.parseWMTSOptions(baseOptions, capabilities)\r\n      )\r\n    );\r\n\r\n    return options;\r\n  }\r\n\r\n  getCartoOptions(\r\n    baseOptions: CartoDataSourceOptions\r\n  ): Observable<CartoDataSourceOptions> {\r\n    const baseUrl =\r\n      'https://' +\r\n      baseOptions.account +\r\n      '.carto.com/api/v2/viz/' +\r\n      baseOptions.mapId +\r\n      '/viz.json';\r\n\r\n    return this.http\r\n      .jsonp(baseUrl, 'callback')\r\n      .pipe(\r\n        map((cartoOptions: any) =>\r\n          this.parseCartoOptions(baseOptions, cartoOptions)\r\n        )\r\n      );\r\n  }\r\n\r\n  getArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const modifiedUrl = baseOptions.url.replace('FeatureServer', 'MapServer');\r\n    const legendUrl = modifiedUrl + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legend = this.http.get(legendUrl).pipe(\r\n      map((res: any) => res),\r\n      catchError(err => {\r\n        console.log('No legend associated with this Feature Service');\r\n        return of(err);\r\n      })\r\n    );\r\n    return forkJoin([arcgisOptions, legend]).pipe(\r\n      map((res: any) => {\r\n        return this.parseArcgisOptions(baseOptions, res[0], res[1]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const legendUrl = baseOptions.url + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legendInfo = this.http.get(legendUrl);\r\n\r\n    return forkJoin([arcgisOptions, legendInfo]).pipe(\r\n      map((res: any) =>\r\n        this.parseTileArcgisOptions(baseOptions, res[0], res[1])\r\n      )\r\n    );\r\n  }\r\n\r\n  @Cacheable()\r\n  getCapabilities(\r\n    service: 'wms' | 'wmts',\r\n    baseUrl: string,\r\n    version?: string\r\n  ): Observable<any> {\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        request: 'GetCapabilities',\r\n        service,\r\n        version: version || '1.3.0'\r\n      }\r\n    });\r\n\r\n    const request = this.http.get(baseUrl, {\r\n      params,\r\n      responseType: 'text'\r\n    });\r\n\r\n    return request.pipe(\r\n      map(res => {\r\n        const capabilities = this.parsers[service].read(res);\r\n        return capabilities;\r\n      })\r\n    );\r\n  }\r\n\r\n  private parseWMSOptions(\r\n    baseOptions: WMSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMSDataSourceOptions {\r\n    const layers = (baseOptions.params as any).layers;\r\n    const layer = this.findDataSourceInCapabilities(\r\n      capabilities.Capability.Layer,\r\n      layers\r\n    );\r\n\r\n    if (!layer) {\r\n      return baseOptions;\r\n    }\r\n    const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n    const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n    const keywordList = layer.KeywordList ? layer.KeywordList : undefined;\r\n    const queryable = layer.queryable;\r\n    const timeFilter = this.getTimeFilter(layer);\r\n    const timeFilterable = timeFilter && Object.keys(timeFilter).length > 0;\r\n\r\n    const options: WMSDataSourceOptions = ObjectUtils.removeUndefined({\r\n      _layerOptionsFromCapabilities: {\r\n        title: layer.Title,\r\n        maxResolution:\r\n          getResolutionFromScale(layer.MaxScaleDenominator) || Infinity,\r\n        minResolution:\r\n          getResolutionFromScale(layer.MinScaleDenominator) || 0,\r\n        metadata: {\r\n          url: metadata ? metadata.OnlineResource : undefined,\r\n          extern: metadata ? true : undefined,\r\n          abstract,\r\n          keywordList\r\n        }\r\n      },\r\n      queryable,\r\n      timeFilter: timeFilterable ? timeFilter : undefined,\r\n      timeFilterable: timeFilterable ? true : undefined\r\n    });\r\n\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMTSDataSourceOptions {\r\n    const options = optionsFromCapabilities(capabilities, baseOptions);\r\n    return Object.assign(options, baseOptions);\r\n  }\r\n\r\n  private parseCartoOptions(\r\n    baseOptions: CartoDataSourceOptions,\r\n    cartoOptions: any\r\n  ): CartoDataSourceOptions {\r\n    const layers = [];\r\n    const params = cartoOptions.layers[1].options.layer_definition;\r\n    params.layers.forEach(element => {\r\n      layers.push({\r\n        type: element.type.toLowerCase(),\r\n        options: element.options,\r\n        legend: element.legend\r\n      });\r\n    });\r\n    const options = ObjectUtils.removeUndefined({\r\n      config: {\r\n        version: params.version,\r\n        layers\r\n      }\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend?: any\r\n  ): ArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const styleGenerator = new EsriStyleGenerator();\r\n    const units = arcgisOptions.units === 'esriMeters' ? 'm' : 'degrees';\r\n    const style = styleGenerator.generateStyle(arcgisOptions, units);\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: 'datetime',\r\n        style: 'calendar'\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        legendInfo,\r\n        style,\r\n        timeFilter,\r\n        timeExtent,\r\n        attributions\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend: any\r\n  ): TileArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: 'datetime',\r\n        style: 'calendar'\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        layers: 'show:' + baseOptions.layer,\r\n        time: timeExtent\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params,\r\n      legendInfo,\r\n      timeFilter,\r\n      attributions\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private findDataSourceInCapabilities(layerArray, name): any {\r\n    if (Array.isArray(layerArray)) {\r\n      let layer;\r\n      layerArray.find(value => {\r\n        layer = this.findDataSourceInCapabilities(value, name);\r\n        return layer !== undefined;\r\n      }, this);\r\n\r\n      return layer;\r\n    } else if (layerArray.Layer) {\r\n      return this.findDataSourceInCapabilities(layerArray.Layer, name);\r\n    } else {\r\n      if (layerArray.Name && layerArray.Name === name) {\r\n        return layerArray;\r\n      }\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getTimeFilter(layer) {\r\n    let dimension;\r\n\r\n    if (layer.Dimension) {\r\n      const timeFilter: any = {};\r\n      dimension = layer.Dimension[0];\r\n\r\n      if (dimension.values) {\r\n        const minMaxDim = dimension.values.split('/');\r\n        timeFilter.min = minMaxDim[0] !== undefined ? minMaxDim[0] : undefined;\r\n        timeFilter.max = minMaxDim[1] !== undefined ? minMaxDim[1] : undefined;\r\n        timeFilter.step = minMaxDim[2] !== undefined ? minMaxDim[2] : undefined;\r\n      }\r\n\r\n      if (dimension.default) {\r\n        timeFilter.value = dimension.default;\r\n      }\r\n      return timeFilter;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { CapabilitiesService } from './capabilities.service';\r\nimport { WFSService } from './datasources/wfs.service';\r\nimport {\r\n  DataSource,\r\n  OSMDataSource,\r\n  OSMDataSourceOptions,\r\n  FeatureDataSource,\r\n  FeatureDataSourceOptions,\r\n  XYZDataSource,\r\n  XYZDataSourceOptions,\r\n  WFSDataSource,\r\n  WFSDataSourceOptions,\r\n  WMTSDataSource,\r\n  WMTSDataSourceOptions,\r\n  WMSDataSource,\r\n  WMSDataSourceOptions,\r\n  CartoDataSource,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSource,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSource,\r\n  TileArcGISRestDataSourceOptions,\r\n  WebSocketDataSource,\r\n  AnyDataSourceOptions,\r\n  MVTDataSource,\r\n  MVTDataSourceOptions,\r\n  ClusterDataSource,\r\n  ClusterDataSourceOptions\r\n} from './datasources';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSourceService {\r\n  public datasources$ = new BehaviorSubject<DataSource[]>([]);\r\n\r\n  constructor(\r\n    private capabilitiesService: CapabilitiesService,\r\n    private wfsDataSourceService: WFSService\r\n  ) {}\r\n\r\n  createAsyncDataSource(context: AnyDataSourceOptions): Observable<DataSource> {\r\n    if (!context.type) {\r\n      console.error(context);\r\n      throw new Error('Datasource needs a type');\r\n    }\r\n    let dataSource;\r\n    switch (context.type.toLowerCase()) {\r\n      case 'osm':\r\n        dataSource = this.createOSMDataSource(context as OSMDataSourceOptions);\r\n        break;\r\n      case 'vector':\r\n        dataSource = this.createFeatureDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'wfs':\r\n        dataSource = this.createWFSDataSource(context as WFSDataSourceOptions);\r\n        break;\r\n      case 'wms':\r\n        dataSource = this.createWMSDataSource(context as WMSDataSourceOptions);\r\n        break;\r\n      case 'wmts':\r\n        dataSource = this.createWMTSDataSource(\r\n          context as WMTSDataSourceOptions\r\n        );\r\n        break;\r\n      case 'xyz':\r\n        dataSource = this.createXYZDataSource(context as XYZDataSourceOptions);\r\n        break;\r\n      case 'carto':\r\n        dataSource = this.createCartoDataSource(\r\n          context as CartoDataSourceOptions\r\n        );\r\n        break;\r\n      case 'arcgisrest':\r\n        dataSource = this.createArcGISRestDataSource(\r\n          context as ArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'websocket':\r\n        dataSource = this.createWebSocketDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'mvt':\r\n        dataSource = this.createMVTDataSource(context as MVTDataSourceOptions);\r\n        break;\r\n      case 'tilearcgisrest':\r\n        dataSource = this.createTileArcGISRestDataSource(\r\n          context as TileArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'cluster':\r\n        dataSource = this.createClusterDataSource(\r\n          context as ClusterDataSourceOptions\r\n        );\r\n        break;\r\n      default:\r\n        console.error(context);\r\n        throw new Error('Invalid datasource type');\r\n    }\r\n\r\n    this.datasources$.next(this.datasources$.value.concat([dataSource]));\r\n\r\n    return dataSource;\r\n  }\r\n\r\n  private createOSMDataSource(\r\n    context: OSMDataSourceOptions\r\n  ): Observable<OSMDataSource> {\r\n    return new Observable(d => d.next(new OSMDataSource(context)));\r\n  }\r\n\r\n  private createFeatureDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<FeatureDataSource> {\r\n    return new Observable(d => d.next(new FeatureDataSource(context)));\r\n  }\r\n\r\n  private createWebSocketDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<WebSocketDataSource> {\r\n    return new Observable(d => d.next(new WebSocketDataSource(context)));\r\n  }\r\n\r\n  private createWFSDataSource(\r\n    context: WFSDataSourceOptions\r\n  ): Observable<WFSDataSource> {\r\n    return new Observable(d =>\r\n      d.next(new WFSDataSource(context, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMSDataSource(\r\n    context: WMSDataSourceOptions\r\n  ): Observable<WMSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService\r\n        .getWMSOptions(context)\r\n        .pipe(\r\n          map(\r\n            (options: WMSDataSourceOptions) =>\r\n              new WMSDataSource(options, this.wfsDataSourceService)\r\n          )\r\n        );\r\n    }\r\n\r\n    return new Observable(d =>\r\n      d.next(new WMSDataSource(context, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMTSDataSource(\r\n    context: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService\r\n        .getWMTSOptions(context)\r\n        .pipe(\r\n          map((options: WMTSDataSourceOptions) => new WMTSDataSource(options))\r\n        );\r\n    }\r\n\r\n    return new Observable(d => d.next(new WMTSDataSource(context)));\r\n  }\r\n\r\n  private createXYZDataSource(\r\n    context: XYZDataSourceOptions\r\n  ): Observable<XYZDataSource> {\r\n    return new Observable(d => d.next(new XYZDataSource(context)));\r\n  }\r\n\r\n  private createCartoDataSource(\r\n    context: CartoDataSourceOptions\r\n  ): Observable<CartoDataSource> {\r\n    if (context.mapId) {\r\n      return this.capabilitiesService\r\n        .getCartoOptions(context)\r\n        .pipe(\r\n          map((options: CartoDataSourceOptions) => new CartoDataSource(options))\r\n        );\r\n    }\r\n    return new Observable(d => d.next(new CartoDataSource(context)));\r\n  }\r\n\r\n  private createArcGISRestDataSource(\r\n    context: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: ArcGISRestDataSourceOptions) =>\r\n            new ArcGISRestDataSource(options)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createTileArcGISRestDataSource(\r\n    context: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getTileArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: TileArcGISRestDataSourceOptions) =>\r\n            new TileArcGISRestDataSource(options)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createMVTDataSource(\r\n    context: MVTDataSourceOptions\r\n  ): Observable<MVTDataSource> {\r\n    return new Observable(d => d.next(new MVTDataSource(context)));\r\n  }\r\n\r\n  private createClusterDataSource(\r\n    context: ClusterDataSourceOptions\r\n  ): Observable<ClusterDataSource> {\r\n    return new Observable(d => d.next(new ClusterDataSource(context)));\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport {\r\n  OSMDataSource,\r\n  FeatureDataSource,\r\n  XYZDataSource,\r\n  WFSDataSource,\r\n  WMTSDataSource,\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  ArcGISRestDataSource,\r\n  TileArcGISRestDataSource,\r\n  WebSocketDataSource,\r\n  MVTDataSource,\r\n  ClusterDataSource\r\n} from '../../datasource';\r\n\r\nimport { DataSourceService } from '../../datasource/shared/datasource.service';\r\n\r\nimport {\r\n  Layer,\r\n  ImageLayer,\r\n  ImageLayerOptions,\r\n  TileLayer,\r\n  TileLayerOptions,\r\n  VectorLayer,\r\n  VectorLayerOptions,\r\n  AnyLayerOptions,\r\n  VectorTileLayer,\r\n  VectorTileLayerOptions\r\n} from './layers';\r\n\r\nimport { StyleService } from './style.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerService {\r\n  private tokenKey: string;\r\n\r\n  constructor(\r\n    private styleService: StyleService,\r\n    private dataSourceService: DataSourceService,\r\n    @Optional() private config: ConfigService\r\n  ) {\r\n    if (this.config) {\r\n      this.tokenKey = this.config.getConfig('auth.tokenKey');\r\n    }\r\n  }\r\n\r\n  createLayer(layerOptions: AnyLayerOptions): Layer {\r\n    if (!layerOptions.source) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      layerOptions.source.options &&\r\n      layerOptions.source.options.optionsFromCapabilities\r\n    ) {\r\n      layerOptions = ObjectUtils.mergeDeep(\r\n        (layerOptions.source.options as any)._layerOptionsFromCapabilities ||\r\n          {},\r\n        layerOptions || {}\r\n      );\r\n    }\r\n\r\n    let layer;\r\n    switch (layerOptions.source.constructor) {\r\n      case OSMDataSource:\r\n      case WMTSDataSource:\r\n      case XYZDataSource:\r\n      case CartoDataSource:\r\n      case TileArcGISRestDataSource:\r\n        layer = this.createTileLayer(layerOptions as TileLayerOptions);\r\n        break;\r\n      case FeatureDataSource:\r\n      case WFSDataSource:\r\n      case ArcGISRestDataSource:\r\n      case WebSocketDataSource:\r\n      case ClusterDataSource:\r\n        layer = this.createVectorLayer(layerOptions as VectorLayerOptions);\r\n        break;\r\n      case WMSDataSource:\r\n        layer = this.createImageLayer(layerOptions as ImageLayerOptions);\r\n        break;\r\n      case MVTDataSource:\r\n        layer = this.createVectorTileLayer(\r\n          layerOptions as VectorTileLayerOptions\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return layer;\r\n  }\r\n\r\n  createAsyncLayer(layerOptions: AnyLayerOptions): Observable<Layer> {\r\n    if (layerOptions.source) {\r\n      return new Observable(d => d.next(this.createLayer(layerOptions)));\r\n    }\r\n\r\n    return this.dataSourceService\r\n      .createAsyncDataSource(layerOptions.sourceOptions)\r\n      .pipe(\r\n        map(source => {\r\n          layerOptions.source = source;\r\n          return this.createLayer(layerOptions);\r\n        })\r\n      );\r\n  }\r\n\r\n  private createImageLayer(layerOptions: ImageLayerOptions): ImageLayer {\r\n    if (this.tokenKey) {\r\n      layerOptions.token = localStorage.getItem(this.tokenKey);\r\n    }\r\n\r\n    return new ImageLayer(layerOptions);\r\n  }\r\n\r\n  private createTileLayer(layerOptions: TileLayerOptions): TileLayer {\r\n    return new TileLayer(layerOptions);\r\n  }\r\n\r\n  private createVectorLayer(layerOptions: VectorLayerOptions): VectorLayer {\r\n    let style;\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ArcGISRestDataSource) {\r\n      const source = layerOptions.source as ArcGISRestDataSource;\r\n      style = source.options.params.style;\r\n    } else if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createStyleByAttribute(\r\n          feature,\r\n          layerOptions.styleByAttribute\r\n        );\r\n      };\r\n      return new VectorLayer(layerOptions);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ClusterDataSource) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createClusterStyle(\r\n          feature,\r\n          layerOptions.clusterParam\r\n        );\r\n      };\r\n      return new VectorLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n\r\n    return new VectorLayer(layerOptionsOl);\r\n  }\r\n\r\n  private createVectorTileLayer(\r\n    layerOptions: VectorTileLayerOptions\r\n  ): VectorTileLayer {\r\n    let style;\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createStyleByAttribute(\r\n          feature,\r\n          layerOptions.styleByAttribute\r\n        );\r\n      };\r\n      return new VectorTileLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n    return new VectorTileLayer(layerOptionsOl);\r\n  }\r\n}\r\n","export enum CatalogItemType {\r\n  Layer = 'layer',\r\n  Group = 'group'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport * as olextent from 'ol/extent';\r\nimport olFormatGML2 from 'ol/format/GML2';\r\nimport olFormatGML3 from 'ol/format/GML3';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport olFeature from 'ol/Feature';\r\nimport * as olgeom from 'ol/geom';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport {\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  TileArcGISRestDataSource\r\n} from '../../datasource';\r\n\r\nimport { QueryFormat, QueryHtmlTarget } from './query.enums';\r\nimport { QueryOptions, QueryableDataSource } from './query.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QueryService {\r\n  public queryEnabled = true;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  query(layers: Layer[], options: QueryOptions): Observable<Feature[]>[] {\r\n    return layers\r\n      .filter((layer: Layer) => layer.visible && layer.isInResolutionsRange)\r\n      .map((layer: Layer) => this.queryLayer(layer, options));\r\n  }\r\n\r\n  queryLayer(layer: Layer, options: QueryOptions): Observable<Feature[]> {\r\n    const url = this.getQueryUrl(layer.dataSource, options);\r\n    if (!url) {\r\n      return of([]);\r\n    }\r\n\r\n    if ((layer.dataSource as QueryableDataSource).options.queryFormat === QueryFormat.HTMLGML2) {\r\n      const urlGml = this.getQueryUrl(layer.dataSource, options, true);\r\n      return this.http.get(urlGml, { responseType: 'text' })\r\n      .pipe(mergeMap(gmlRes => {\r\n        const imposedGeom = this.mergeGML(gmlRes, url);\r\n        return this.http.get(url, { responseType: 'text' })\r\n          .pipe(map((res => this.extractData(res, layer, options, url, imposedGeom))));\r\n      }\r\n      ));\r\n    }\r\n\r\n    const request = this.http.get(url, { responseType: 'text' });\r\n    return request.pipe(map(res => this.extractData(res, layer, options, url)));\r\n  }\r\n\r\n  private mergeGML(gmlRes, url) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(gmlRes);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      features = parser.readFeatures(gmlRes);\r\n    }\r\n    const olmline = new olgeom.MultiLineString([]);\r\n    let pts;\r\n    const ptsArray = [];\r\n    let olmpoly = new olgeom.MultiPolygon([]);\r\n    let firstFeatureType;\r\n    const nbFeatures = features.length;\r\n\r\n    // Check if geometry intersect bbox\r\n    // for geoserver getfeatureinfo response in data projection, not call projection\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const bbox = bboxRaw.split(',');\r\n    const bboxExtent = olextent.createEmpty();\r\n    olextent.extend(bboxExtent, bbox);\r\n    const outBboxExtent = false;\r\n    features.map(feature => {\r\n\r\n    /*  if (!feature.getGeometry().simplify(100).intersectsExtent(bboxExtent)) {\r\n        outBboxExtent = true;\r\n        // TODO: Check to project the geometry?\r\n      }*/\r\n      const featureGeometryCoordinates = feature.getGeometry().getCoordinates();\r\n      const featureGeometryType = feature.getGeometry().getType();\r\n\r\n      if (!firstFeatureType && !outBboxExtent) {\r\n        firstFeatureType = featureGeometryType;\r\n      }\r\n      if (!outBboxExtent) {\r\n        switch (featureGeometryType) {\r\n          case 'Point':\r\n            if (nbFeatures === 1) {\r\n              pts = new olgeom.Point(featureGeometryCoordinates, 'XY');\r\n            } else {\r\n              ptsArray.push(featureGeometryCoordinates);\r\n            }\r\n            break;\r\n          case 'LineString':\r\n            olmline.appendLineString(\r\n              new olgeom.LineString(featureGeometryCoordinates, 'XY'));\r\n            break;\r\n          case 'Polygon':\r\n            olmpoly.appendPolygon(\r\n              new olgeom.Polygon(featureGeometryCoordinates, 'XY'));\r\n            break;\r\n          case 'MultiPolygon':\r\n            olmpoly = new olgeom.MultiPolygon(featureGeometryCoordinates, 'XY');\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    });\r\n\r\n    let olmpts;\r\n    if (ptsArray.length === 0 && pts) {\r\n      olmpts = {\r\n        type: pts.getType(),\r\n        coordinates: pts.getCoordinates()\r\n      };\r\n    } else {\r\n      olmpts = {\r\n        type: 'Polygon',\r\n        coordinates: [this.convexHull(ptsArray)]\r\n      };\r\n    }\r\n\r\n    switch (firstFeatureType) {\r\n      case 'LineString':\r\n        return {\r\n          type: olmline.getType(),\r\n          coordinates: olmline.getCoordinates()\r\n        };\r\n      case 'Point':\r\n        return olmpts;\r\n      case 'Polygon':\r\n        return {\r\n          type: olmpoly.getType(),\r\n          coordinates: olmpoly.getCoordinates()\r\n        };\r\n      case 'MultiPolygon':\r\n        return {\r\n            type: olmpoly.getType(),\r\n            coordinates: olmpoly.getCoordinates()\r\n        };\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  cross(a, b, o) {\r\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);\r\n  }\r\n\r\n  /**\r\n   * @param points An array of [X, Y] coordinates\r\n   * This method is use instead of turf.js convexHull because Turf needs at least 3 point to make a hull.\r\n   * https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript\r\n   */\r\n  convexHull(points) {\r\n    points.sort((a, b) => {\r\n      return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];\r\n    });\r\n\r\n    const lower = [];\r\n    for (const point of points) {\r\n      while (lower.length >= 2 && this.cross(lower[lower.length - 2], lower[lower.length - 1], point) <= 0) {\r\n        lower.pop();\r\n      }\r\n      lower.push(point);\r\n    }\r\n\r\n    const upper = [];\r\n    for (let i = points.length - 1; i >= 0; i--) {\r\n      while (upper.length >= 2 && this.cross(upper[upper.length - 2], upper[upper.length - 1], points[i]) <= 0) {\r\n        upper.pop();\r\n      }\r\n      upper.push(points[i]);\r\n    }\r\n\r\n    upper.pop();\r\n    lower.pop();\r\n    return lower.concat(upper);\r\n  }\r\n\r\n  private extractData(\r\n    res,\r\n    layer: Layer,\r\n    options: QueryOptions,\r\n    url: string,\r\n    imposedGeometry?\r\n  ): Feature[] {\r\n    const queryDataSource = layer.dataSource as QueryableDataSource;\r\n\r\n    let allowedFieldsAndAlias;\r\n    if (\r\n      layer.options &&\r\n      layer.options.sourceOptions &&\r\n      layer.options.sourceOptions.sourceFields &&\r\n      layer.options.sourceOptions.sourceFields.length >= 1\r\n    ) {\r\n      allowedFieldsAndAlias = {};\r\n      layer.options.sourceOptions.sourceFields.forEach(sourceField => {\r\n        const alias = sourceField.alias ? sourceField.alias : sourceField.name;\r\n        allowedFieldsAndAlias[sourceField.name] = alias;\r\n      });\r\n    }\r\n    let features = [];\r\n    switch (queryDataSource.options.queryFormat) {\r\n      case QueryFormat.GML3:\r\n        features = this.extractGML3Data(\r\n          res,\r\n          layer.zIndex,\r\n          allowedFieldsAndAlias\r\n        );\r\n        break;\r\n      case QueryFormat.JSON:\r\n      case QueryFormat.GEOJSON:\r\n        features = this.extractGeoJSONData(res);\r\n        break;\r\n      case QueryFormat.ESRIJSON:\r\n        features = this.extractEsriJSONData(res, layer.zIndex);\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        features = this.extractTextData(res);\r\n        break;\r\n      case QueryFormat.HTML:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url\r\n        );\r\n        break;\r\n      case QueryFormat.HTMLGML2:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url,\r\n          imposedGeometry\r\n        );\r\n        break;\r\n      case QueryFormat.GML2:\r\n      default:\r\n        features = this.extractGML2Data(res, layer, allowedFieldsAndAlias);\r\n        break;\r\n    }\r\n\r\n    return features.map((feature: Feature, index: number) => {\r\n      let title = feature.properties[queryDataSource.queryTitle];\r\n      if (!title && features.length > 1) {\r\n        title = `${layer.title} (${index + 1})`;\r\n      } else if (!title) {\r\n        title = layer.title;\r\n      }\r\n      const meta = Object.assign({}, feature.meta || {}, {\r\n        id: uuid(),\r\n        title,\r\n        mapTitle: title,\r\n        sourceTitle: layer.title,\r\n        order: 1000 - layer.zIndex\r\n      });\r\n\r\n      return Object.assign(feature, {\r\n        meta,\r\n        projection:\r\n          queryDataSource.options.type === 'carto'\r\n            ? 'EPSG:4326'\r\n            : options.projection\r\n      });\r\n    });\r\n  }\r\n\r\n  private extractGML2Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(res);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      features = parser.readFeatures(res);\r\n    }\r\n\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGML3Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    const parser = new olFormatGML3();\r\n    const features = parser.readFeatures(res);\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGeoJSONData(res) {\r\n    let features = [];\r\n    try {\r\n      features = JSON.parse(res).features;\r\n    } catch (e) {\r\n      console.warn('query.service: Unable to parse geojson', '\\n', res);\r\n    }\r\n    return features;\r\n  }\r\n\r\n  private extractEsriJSONData(res, zIndex) {\r\n    const parser = new olFormatEsriJSON();\r\n    const features = parser.readFeatures(res);\r\n\r\n    return features.map(feature => this.featureToResult(feature, zIndex));\r\n  }\r\n\r\n  private extractTextData(res) {\r\n    // TODO\r\n    return [];\r\n  }\r\n\r\n  private extractHtmlData(res, htmlTarget: QueryHtmlTarget, url, imposedGeometry?) {\r\n    // _blank , iframe or undefined\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const width = parseInt(searchParams.width, 10);\r\n    const height = parseInt(searchParams.height, 10);\r\n    const xPosition = parseInt(searchParams.i || searchParams.x, 10);\r\n    const yPosition = parseInt(searchParams.j || searchParams.y, 10);\r\n    const projection = searchParams.crs || searchParams.srs || 'EPSG:3857';\r\n\r\n    const bbox = bboxRaw.split(',');\r\n    let threshold =\r\n      (Math.abs(parseFloat(bbox[0])) - Math.abs(parseFloat(bbox[2]))) * 0.05;\r\n\r\n    // for context in degree (EPSG:4326,4269...)\r\n    if (Math.abs(parseFloat(bbox[0])) < 180) {\r\n      threshold = 0.045;\r\n    }\r\n\r\n    const clickx =\r\n      parseFloat(bbox[0]) +\r\n      (Math.abs(parseFloat(bbox[0]) - parseFloat(bbox[2])) * xPosition) /\r\n        width -\r\n      threshold;\r\n    const clicky =\r\n      parseFloat(bbox[1]) +\r\n      (Math.abs(parseFloat(bbox[1]) - parseFloat(bbox[3])) * yPosition) /\r\n        height -\r\n      threshold;\r\n    const clickx1 = clickx + threshold * 2;\r\n    const clicky1 = clicky + threshold * 2;\r\n\r\n    const wktPoly =\r\n      'POLYGON((' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      '))';\r\n\r\n    const format = new olformat.WKT();\r\n    const tenPercentWidthGeom = format.readFeature(wktPoly);\r\n    const f = tenPercentWidthGeom.getGeometry() as any;\r\n\r\n    if (\r\n      htmlTarget !== QueryHtmlTarget.BLANK &&\r\n      htmlTarget !== QueryHtmlTarget.IFRAME\r\n    ) {\r\n      htmlTarget = QueryHtmlTarget.IFRAME;\r\n    }\r\n\r\n    const bodyTagStart = res.toLowerCase().indexOf('<body>');\r\n    const bodyTagEnd = res.toLowerCase().lastIndexOf('</body>') + 7;\r\n    // replace \\r \\n  and ' ' with '' to validate if the body is really empty.\r\n    const body = res.slice(bodyTagStart, bodyTagEnd).replace(/(\\r|\\n|\\s)/g, '');\r\n    if (body === '<body></body>' || res === '') {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      {\r\n        type: FEATURE,\r\n        projection,\r\n        properties: { target: htmlTarget, body: res, url },\r\n        geometry: imposedGeometry || { type: f.getType(), coordinates: f.getCoordinates() }\r\n      }\r\n    ];\r\n  }\r\n\r\n  private getQueryParams(url) {\r\n    const queryString = url.split('?');\r\n    if (!queryString[1]) {\r\n      return;\r\n    }\r\n    const pairs = queryString[1].split('&');\r\n\r\n    const result = {};\r\n    pairs.forEach(pair => {\r\n      pair = pair.split('=');\r\n      result[pair[0]] = decodeURIComponent(pair[1] || '');\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private featureToResult(\r\n    featureOL: olFeature,\r\n    zIndex: number,\r\n    allowedFieldsAndAlias?\r\n  ): Feature {\r\n    const featureGeometry = featureOL.getGeometry() as any;\r\n    const properties: any = Object.assign({}, featureOL.getProperties());\r\n    delete properties.geometry;\r\n    delete properties.boundedBy;\r\n    delete properties.shape;\r\n    delete properties.SHAPE;\r\n    delete properties.the_geom;\r\n\r\n    let geometry;\r\n    if (featureGeometry !== undefined) {\r\n      geometry = {\r\n        type: featureGeometry.getType(),\r\n        coordinates: featureGeometry.getCoordinates()\r\n      };\r\n    }\r\n\r\n    return {\r\n      type: FEATURE,\r\n      projection: undefined,\r\n      properties,\r\n      geometry,\r\n      meta: {\r\n        id: uuid(),\r\n        order: 1000 - zIndex,\r\n        alias: allowedFieldsAndAlias\r\n      }\r\n    };\r\n  }\r\n\r\n  private getQueryUrl(\r\n    datasource: QueryableDataSource,\r\n    options: QueryOptions,\r\n    forceGML2 = false\r\n  ): string {\r\n    let url;\r\n    switch (datasource.constructor) {\r\n      case WMSDataSource:\r\n        const wmsDatasource = datasource as WMSDataSource;\r\n\r\n        const WMSGetFeatureInfoOptions = {\r\n          INFO_FORMAT: wmsDatasource.params.info_format ||\r\n            this.getMimeInfoFormat(datasource.options.queryFormat),\r\n          QUERY_LAYERS: wmsDatasource.params.layers,\r\n          FEATURE_COUNT: wmsDatasource.params.feature_count || '5'\r\n        };\r\n\r\n        if (forceGML2) {\r\n          WMSGetFeatureInfoOptions.INFO_FORMAT =\r\n            this.getMimeInfoFormat(QueryFormat.GML2);\r\n        }\r\n\r\n        url = wmsDatasource.ol.getGetFeatureInfoUrl(\r\n          options.coordinates,\r\n          options.resolution,\r\n          options.projection,\r\n          WMSGetFeatureInfoOptions\r\n        );\r\n        if (wmsDatasource.params.version !== '1.3.0') {\r\n          url = url.replace('&I=', '&X=');\r\n          url = url.replace('&J=', '&Y=');\r\n        }\r\n        break;\r\n      case CartoDataSource:\r\n        const cartoDatasource = datasource as CartoDataSource;\r\n        const baseUrl =\r\n          'https://' +\r\n          cartoDatasource.options.account +\r\n          '.carto.com/api/v2/sql?';\r\n        const format = 'format=GeoJSON';\r\n        const sql =\r\n          '&q=' + cartoDatasource.options.config.layers[0].options.sql;\r\n        const clause =\r\n          ' WHERE ST_Intersects(the_geom_webmercator,ST_BUFFER(ST_SetSRID(ST_POINT(';\r\n        const meters = cartoDatasource.options.queryPrecision\r\n          ? cartoDatasource.options.queryPrecision\r\n          : '1000';\r\n        const coordinates =\r\n          options.coordinates[0] +\r\n          ',' +\r\n          options.coordinates[1] +\r\n          '),3857),' +\r\n          meters +\r\n          '))';\r\n\r\n        url = `${baseUrl}${format}${sql}${clause}${coordinates}`;\r\n        break;\r\n      case TileArcGISRestDataSource:\r\n        const tileArcGISRestDatasource = datasource as TileArcGISRestDataSource;\r\n        let extent = olextent.boundingExtent([options.coordinates]);\r\n        if (tileArcGISRestDatasource.options.queryPrecision) {\r\n          extent = olextent.buffer(\r\n            extent,\r\n            tileArcGISRestDatasource.options.queryPrecision\r\n          );\r\n        }\r\n        const serviceUrl =\r\n          tileArcGISRestDatasource.options.url +\r\n          '/' +\r\n          tileArcGISRestDatasource.options.layer +\r\n          '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        url = `${serviceUrl}?${params.join('&')}`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  private getMimeInfoFormat(queryFormat) {\r\n    let mime;\r\n    switch (queryFormat) {\r\n      case QueryFormat.GML2:\r\n        mime = 'application/vnd.ogc.gml';\r\n        break;\r\n      case QueryFormat.GML3:\r\n        mime = 'application/vnd.ogc.gml/3.1.1';\r\n        break;\r\n      case QueryFormat.JSON:\r\n        mime = 'application/json';\r\n        break;\r\n      case QueryFormat.GEOJSON:\r\n        mime = 'application/geojson';\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        mime = 'text/plain';\r\n        break;\r\n      case QueryFormat.HTML:\r\n        mime = 'text/html';\r\n        break;\r\n      case QueryFormat.HTMLGML2:\r\n        mime = 'text/html';\r\n        break;\r\n      default:\r\n        mime = 'application/vnd.ogc.gml';\r\n        break;\r\n    }\r\n\r\n    return mime;\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Self\r\n} from '@angular/core';\r\n\r\nimport { Subscription, Observable, of, zip } from 'rxjs';\r\n\r\nimport OlFeature from 'ol/Feature';\r\nimport OlLayer from 'ol/layer/Layer';\r\n\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { featureFromOl } from '../../feature/shared/feature.utils';\r\nimport { QueryService } from './query.service';\r\nimport { layerIsQueryable, olLayerIsQueryable } from './query.utils';\r\n\r\n/**\r\n * This directive makes a map queryable with a click of with a drag box.\r\n * By default, all layers are queryable but this cna ben controlled at\r\n * the layer level.\r\n */\r\n@Directive({\r\n  selector: '[igoQuery]'\r\n})\r\nexport class QueryDirective implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * Subscriptions to ongoing queries\r\n   */\r\n  private queries$$: Subscription[] = [];\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * OL drag box interaction\r\n   */\r\n  private olDragBoxInteraction: OlDragBoxInteraction;\r\n\r\n  /**\r\n   * Ol drag box \"end\" event key\r\n   */\r\n  private olDragBoxInteractionEndKey: string;\r\n\r\n  /**\r\n   * Whter to query features or not\r\n   */\r\n  @Input() queryFeatures: boolean = false;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesHitTolerance: number = 0;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesCondition: (olLayer: OlLayer) => boolean;\r\n\r\n  /**\r\n   * Whether all query should complete before emitting an event\r\n   */\r\n  @Input() waitForAllQueries: boolean = true;\r\n\r\n  /**\r\n   * Event emitted when a query (or all queries) complete\r\n   */\r\n  @Output() query = new EventEmitter<{\r\n    features: Feature[] | Feature[][];\r\n    event: OlMapBrowserPointerEvent;\r\n  }>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return (this.component.map as any) as IgoMap;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private queryService: QueryService\r\n  ) {}\r\n\r\n  /**\r\n   * Start listening to click and drag box events\r\n   * @internal\r\n   */\r\n  ngAfterViewInit() {\r\n    this.listenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to click and drag box events and cancel ongoind requests\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.cancelOngoingQueries();\r\n    this.unlistenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * On map click, issue queries\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onMapEvent(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stop listenig for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Issue queries from a map event and emit events with the results\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onMapEvent(event: OlMapBrowserPointerEvent) {\r\n    this.cancelOngoingQueries();\r\n    if (!this.queryService.queryEnabled) {\r\n      return;\r\n    }\r\n\r\n    const queries$ = [];\r\n    if (this.queryFeatures) {\r\n      queries$.push(this.doQueryFeatures(event));\r\n    }\r\n\r\n    const resolution = this.map.ol.getView().getResolution();\r\n    const queryLayers = this.map.layers.filter(layerIsQueryable);\r\n    queries$.push(...this.queryService.query(queryLayers, {\r\n      coordinates: event.coordinate,\r\n      projection: this.map.projection,\r\n      resolution\r\n    }));\r\n\r\n    if (queries$.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.waitForAllQueries) {\r\n      this.queries$$.push(\r\n        zip(...queries$).subscribe((results: Feature[][]) => {\r\n          const features = [].concat(...results);\r\n          this.query.emit({ features, event });\r\n        })\r\n      );\r\n    } else {\r\n      this.queries$$ = queries$.map((query$: Observable<Feature[]>) => {\r\n        return query$.subscribe((features: Feature[]) => {\r\n          this.query.emit({ features, event });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query features already present on the map\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private doQueryFeatures(event: OlMapBrowserPointerEvent): Observable<Feature[]> {\r\n    const olFeatures = event.map.getFeaturesAtPixel(event.pixel, {\r\n      hitTolerance: this.queryFeaturesHitTolerance || 0,\r\n      layerFilter: this.queryFeaturesCondition ? this.queryFeaturesCondition : olLayerIsQueryable\r\n    });\r\n    const features = (olFeatures || []).map((olFeature: OlFeature) => {\r\n      return featureFromOl(olFeature, this.map.projection);\r\n    });\r\n    return of(features);\r\n  }\r\n\r\n  /**\r\n   * Cancel ongoing requests, if any\r\n   */\r\n  private cancelOngoingQueries() {\r\n    this.queries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.queries$$ = [];\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions,\r\n  SearchSourceSettings\r\n} from './source.interfaces';\r\n\r\n/**\r\n * Base search source class\r\n */\r\nexport class SearchSource {\r\n  /**\r\n   * Search source ID\r\n   * @internal\r\n   */\r\n  static id = '';\r\n\r\n  /**\r\n   * Search source type\r\n   * @internal\r\n   */\r\n  static type = '';\r\n\r\n  /**\r\n   * Search source options\r\n   * @internal\r\n   */\r\n  protected options: SearchSourceOptions;\r\n\r\n  /**\r\n   * Get search source's id\r\n   * @returns Search source's id\r\n   */\r\n  getId(): string {\r\n    throw new Error('You have to implement the method \"getId\".');\r\n  }\r\n\r\n  /**\r\n   * Get search source's default options\r\n   * @returns Search source default options\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    throw new Error('You have to implement the method \"getDefaultOptions\".');\r\n  }\r\n\r\n  /**\r\n   * Search source's title\r\n   */\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is available\r\n   */\r\n  get available(): boolean {\r\n    return this.options.available !== false;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is enabled\r\n   */\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  get enabled(): boolean {\r\n    return this.available && this.options.enabled !== false;\r\n  }\r\n\r\n  /**\r\n   * Search url\r\n   */\r\n  get searchUrl(): string {\r\n    return this.options.searchUrl;\r\n  }\r\n\r\n  /**\r\n   * Search query params\r\n   */\r\n  get params(): { [key: string]: string } {\r\n    return this.options.params === undefined ? {} : this.options.params;\r\n  }\r\n\r\n  /**\r\n   * Search settings\r\n   */\r\n  get settings(): SearchSourceSettings[] {\r\n    return this.options.settings === undefined ? [] : this.options.settings;\r\n  }\r\n\r\n  /**\r\n   * Set params from selected settings\r\n   */\r\n  setParamFromSetting(setting: SearchSourceSettings) {\r\n      switch (setting.type) {\r\n        case 'radiobutton':\r\n          setting.values.forEach( conf => {\r\n            if (conf.enabled) {\r\n              this.options.params = Object.assign( (this.options.params || {}),\r\n                                                    { [setting.name] : conf.value } );\r\n            }\r\n          });\r\n          break;\r\n        case 'checkbox':\r\n          let confValue = '';\r\n          setting.values.forEach( conf => {\r\n            if (conf.enabled) {\r\n              confValue += conf.value + ',';\r\n            }\r\n          });\r\n          confValue = confValue.slice(0, -1);\r\n          this.options.params = Object.assign( (this.options.params || {}),\r\n                                                { [setting.name] : confValue } );\r\n          break;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Search results display order\r\n   */\r\n  get displayOrder(): number {\r\n    return this.options.order === undefined ? 99 : this.options.order;\r\n  }\r\n\r\n  constructor(options: SearchSourceOptions) {\r\n    this.options = Object.assign({}, this.getDefaultOptions(), options);\r\n\r\n    // Set Default Params from Settings\r\n    this.settings.forEach( setting => {\r\n      this.setParamFromSetting(setting);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if hashtag is valid\r\n   * @param hashtag hashtag from query\r\n   * @param completeMatch boolean\r\n   */\r\n  hashtagValid(searchSourceSetting: SearchSourceSettings, hashtag: string, completeMatch = false): boolean {\r\n    let hashtagIsValid = false;\r\n    searchSourceSetting.values.forEach( conf => {\r\n      const re = new RegExp('' + hashtag.substring(1) + '', 'g');\r\n      if ( typeof conf.value === 'string') {\r\n        if ( (completeMatch && conf.value === hashtag.substring(1)) ||\r\n              ( !completeMatch && conf.value.match(re)) ) {\r\n          hashtagIsValid = true;\r\n        }\r\n      }\r\n    });\r\n    return hashtagIsValid;\r\n  }\r\n\r\n  getSettingsValues(search: string): SearchSourceSettings {\r\n    return this.getDefaultOptions().settings.find( (value: SearchSourceSettings) => {\r\n      return value.name === search;\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by text implement this class\r\n */\r\nexport interface TextSearch {\r\n  /**\r\n   * Search by text\r\n   * @param term Text\r\n   * @returns Observable or search results\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by coordinates implement this class\r\n */\r\nexport interface ReverseSearch {\r\n  /**\r\n   * Search by text\r\n   * @param lonLat Coordinates\r\n   * @param distance Optional: Search radius arounf lonLat\r\n   * @returns Observable or search results\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\nimport { SearchSourceOptions } from '../../search/shared/sources/source.interfaces';\r\n/**\r\n * Map search source. For now it has no search capability. All it does\r\n * is act as a placeholder for the map query results' \"search source\".\r\n */\r\n@Injectable()\r\nexport class QuerySearchSource extends SearchSource {\r\n  static id = 'map';\r\n  static type = FEATURE;\r\n\r\n  constructor(@Inject('options') options: SearchSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return QuerySearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Carte'\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { EMPTY, Observable, of, concat } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { LanguageService, ConfigService } from '@igo2/core';\r\nimport {\r\n  CapabilitiesService,\r\n  WMSDataSourceOptions,\r\n  WMTSDataSourceOptions,\r\n  generateIdFromSourceOptions\r\n} from '../../datasource';\r\nimport { LayerOptions, ImageLayerOptions, TooltipContent, TooltipType } from '../../layer';\r\nimport { getResolutionFromScale } from '../../map';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup\r\n} from './catalog.interface';\r\nimport { CatalogItemType } from './catalog.enum';\r\nimport { QueryHtmlTarget, QueryFormat } from '../../query';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CatalogService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private config: ConfigService,\r\n    private languageService: LanguageService,\r\n    private capabilitiesService: CapabilitiesService\r\n  ) {}\r\n\r\n  loadCatalogs(): Observable<Catalog[]> {\r\n    const contextConfig = this.config.getConfig('context') || {};\r\n    const catalogConfig = this.config.getConfig('catalog') || {};\r\n    const apiUrl = catalogConfig.url || contextConfig.url;\r\n    const catalogsFromConfig = catalogConfig.sources || [];\r\n\r\n    if (apiUrl === undefined) {\r\n      return of(catalogsFromConfig);\r\n    }\r\n\r\n    const observables$ = [];\r\n\r\n    // Base layers catalog\r\n    if (catalogConfig.baseLayers) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.catalog.baseLayers');\r\n      const baseLayersCatalog = {\r\n        id: 'catalog.baselayers',\r\n        title,\r\n        url: `${apiUrl}/baselayers`,\r\n        type: 'baselayers'\r\n      };\r\n      observables$.push(of(baseLayersCatalog));\r\n    }\r\n\r\n    // Catalogs from API\r\n    const catalogsFromApi$ = this.http\r\n      .get<Catalog[]>(`${apiUrl}/catalogs`)\r\n      .pipe(\r\n        catchError((response: HttpErrorResponse) => EMPTY)\r\n      );\r\n    observables$.push(catalogsFromApi$);\r\n\r\n    // Catalogs from config\r\n    if (catalogsFromConfig.length > 0) {\r\n      observables$.push(of(catalogsFromConfig));\r\n    }\r\n\r\n    return concat(...observables$) as Observable<Catalog[]>;\r\n  }\r\n\r\n  loadCatalogItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    if (catalog.type === 'baselayers') {\r\n      return this.loadCatalogBaseLayerItems(catalog);\r\n    } else if (catalog.type === 'wmts') {\r\n      return this.loadCatalogWMTSLayerItems(catalog);\r\n    }\r\n    return this.loadCatalogWMSLayerItems(catalog);\r\n  }\r\n\r\n  private loadCatalogBaseLayerItems(catalog: Catalog): Observable<CatalogItemGroup[]> {\r\n    // TODO: I'm not sure this works\r\n    return this.getCatalogBaseLayersOptions(catalog)\r\n      .pipe(\r\n        map((layersOptions: LayerOptions[]) => {\r\n          const items = layersOptions.map((layerOptions: LayerOptions) => {\r\n            return {\r\n              id: generateIdFromSourceOptions(layerOptions.sourceOptions),\r\n              title: layerOptions.title,\r\n              type: CatalogItemType.Layer,\r\n              options: layerOptions\r\n            } as CatalogItemLayer;\r\n          });\r\n          return [{\r\n            id: 'catalog.group.baselayers',\r\n            type: CatalogItemType.Group,\r\n            title: catalog.title,\r\n            items\r\n          }];\r\n        })\r\n      );\r\n  }\r\n\r\n  private getCatalogBaseLayersOptions(catalog: Catalog): Observable<LayerOptions[]> {\r\n    return this.http.get<LayerOptions[]>(catalog.url);\r\n  }\r\n\r\n  private loadCatalogWMSLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    return this.getCatalogWMSCapabilities(catalog)\r\n      .pipe(\r\n        map((capabilities: any) => {\r\n          const items = [];\r\n          this.includeRecursiveItems(catalog, capabilities.Capability.Layer, items);\r\n          return items;\r\n        })\r\n      );\r\n  }\r\n\r\n  private loadCatalogWMTSLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    return this.getCatalogWMTSCapabilities(catalog)\r\n      .pipe(\r\n        map((capabilities: any) => this.getWMTSItems(catalog, capabilities))\r\n      );\r\n  }\r\n\r\n  private getCatalogWMSCapabilities(catalog: Catalog): Observable<any> {\r\n    return this.capabilitiesService.getCapabilities('wms', catalog.url, catalog.version);\r\n  }\r\n\r\n  private getCatalogWMTSCapabilities(catalog: Catalog): Observable<any> {\r\n    return this.capabilitiesService.getCapabilities('wmts', catalog.url, catalog.version);\r\n  }\r\n\r\n  private includeRecursiveItems(catalog: Catalog, layerList: any, items: CatalogItem[]) {\r\n    // Dig all levels until last level (layer object are not defined on last level)\r\n    const regexes = (catalog.regFilters || []).map((pattern: string) => new RegExp(pattern));\r\n    const catalogQueryParams = catalog.queryParams || {};\r\n    const catalogSourceOptions = catalog.sourceOptions || {};\r\n\r\n    for (const group of layerList.Layer) {\r\n      if (group.Layer !== undefined) {\r\n        // recursive, check next level\r\n        this.includeRecursiveItems(catalog, group, items);\r\n        continue;\r\n      }\r\n      const catalogTooltipType = this.retrieveTooltipType(catalog);\r\n      const layersQueryFormat = this.findCatalogInfoFormat(catalog);\r\n      // TODO: Slice that into multiple methods\r\n      // Define object of group layer\r\n      const groupItem = {\r\n        id: `catalog.group.${layerList.Name}`,\r\n        type: CatalogItemType.Group,\r\n        title: layerList.Title,\r\n        items: layerList.Layer.reduce((layers: CatalogItemLayer<ImageLayerOptions>[], layer: any) => {\r\n          const configuredQueryFormat = this.retriveLayerInfoFormat(layer.Name, layersQueryFormat);\r\n\r\n          if (this.testLayerRegexes(layer.Name, regexes) === false) {\r\n            return layers;\r\n          }\r\n\r\n          const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n          const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n          const keywordList = layer.KeywordList ? layer.KeywordList : undefined;\r\n          const timeFilter = this.capabilitiesService.getTimeFilter(layer);\r\n          const timeFilterable = timeFilter && Object.keys(timeFilter).length > 0 ? true : false;\r\n\r\n          const params = Object.assign({}, catalogQueryParams, {\r\n            layers: layer.Name,\r\n            feature_count:  catalog.count\r\n          });\r\n          const baseSourceOptions = {\r\n            type: 'wms',\r\n            url: catalog.url,\r\n            crossOrigin: catalog.setCrossOriginAnonymous ? 'anonymous' : undefined,\r\n            timeFilter: { ...timeFilter, ...catalog.timeFilter },\r\n            timeFilterable: timeFilterable ? true : false,\r\n            queryable: layer.queryable,\r\n            queryFormat: configuredQueryFormat,\r\n            queryHtmlTarget: catalog.queryHtmlTarget || QueryHtmlTarget.IFRAME\r\n          };\r\n          const sourceOptions = Object.assign(\r\n            {},\r\n            baseSourceOptions,\r\n            catalogSourceOptions,\r\n            {params}\r\n          ) as WMSDataSourceOptions;\r\n\r\n          layers.push({\r\n            id: generateIdFromSourceOptions(sourceOptions),\r\n            type: CatalogItemType.Layer,\r\n            title: layer.Title,\r\n            options: {\r\n              title: layer.Title,\r\n              maxResolution:\r\n                getResolutionFromScale(layer.MaxScaleDenominator) || Infinity,\r\n              minResolution:\r\n                getResolutionFromScale(layer.MinScaleDenominator) || 0,\r\n              metadata: {\r\n                url: metadata ? metadata.OnlineResource : undefined,\r\n                extern: metadata ? true : undefined,\r\n                abstract,\r\n                keywordList\r\n              },\r\n              tooltip: { type: catalogTooltipType } as TooltipContent,\r\n              sourceOptions\r\n            }\r\n          });\r\n          return layers;\r\n\r\n        }, [])\r\n\r\n      };\r\n\r\n      if (groupItem.items.length !== 0) {\r\n        items.push(groupItem);\r\n      }\r\n\r\n      // Break the group (don't add a group of layer for each of their layer!)\r\n      break;\r\n    }\r\n  }\r\n\r\n  private getWMTSItems(catalog: Catalog, capabilities: {[key: string]: any}): CatalogItemLayer[] {\r\n    const layers = capabilities.Contents.Layer;\r\n    const regexes = (catalog.regFilters || []).map((pattern: string) => new RegExp(pattern));\r\n    const catalogQueryParams = catalog.queryParams || {};\r\n    const catalogSourceOptions = catalog.sourceOptions || {};\r\n\r\n    return layers.map((layer: any) => {\r\n      if (this.testLayerRegexes(layer.Identifier, regexes) === false) {\r\n        return undefined;\r\n      }\r\n      const params = Object.assign({}, catalogQueryParams, {\r\n        version: '1.0.0'\r\n      });\r\n      const baseSourceOptions = {\r\n        type: 'wmts',\r\n        url: catalog.url,\r\n        crossOrigin: catalog.setCrossOriginAnonymous ? 'anonymous' : undefined,\r\n        layer: layer.Identifier,\r\n        matrixSet: catalog.matrixSet,\r\n        optionsFromCapabilities: true,\r\n        requestEncoding: catalog.requestEncoding || 'KVP',\r\n        style: 'default'\r\n      } as WMTSDataSourceOptions;\r\n      const sourceOptions = Object.assign(\r\n        {},\r\n        baseSourceOptions,\r\n        catalogSourceOptions,\r\n        {params}\r\n      ) as WMTSDataSourceOptions;\r\n\r\n      return {\r\n        id: generateIdFromSourceOptions(sourceOptions),\r\n        type: CatalogItemType.Layer,\r\n        title: layer.Title,\r\n        options: {\r\n          title: layer.Title,\r\n          sourceOptions\r\n        }\r\n      };\r\n    })\r\n    .filter((item: CatalogItemLayer | undefined) => item !== undefined);\r\n  }\r\n\r\n  private testLayerRegexes(layerName, regexes): boolean {\r\n    if (regexes.length === 0) {\r\n      return true;\r\n    }\r\n    return regexes.find((regex: RegExp) => regex.test(layerName)) !== undefined;\r\n  }\r\n\r\n  private retriveLayerInfoFormat(\r\n    layerNameFromCatalog: string,\r\n    layersQueryFormat: { layer: string, queryFormat: QueryFormat }[]\r\n  ): QueryFormat {\r\n\r\n    const currentLayerInfoFormat = layersQueryFormat.find(f => f.layer === layerNameFromCatalog);\r\n    const baseInfoFormat = layersQueryFormat.find(f => f.layer === '*');\r\n    let queryFormat: QueryFormat;\r\n    if (currentLayerInfoFormat) {\r\n      queryFormat = currentLayerInfoFormat.queryFormat;\r\n    } else if (baseInfoFormat) {\r\n      queryFormat = baseInfoFormat.queryFormat;\r\n    }\r\n    return queryFormat;\r\n  }\r\n\r\n  private retrieveTooltipType(catalog: Catalog): TooltipType {\r\n    if (!catalog.tooltipType) {\r\n      return TooltipType.TITLE;\r\n    }\r\n    return catalog.tooltipType;\r\n  }\r\n\r\n  private findCatalogInfoFormat(catalog: Catalog): {layer: string, queryFormat: QueryFormat}[] {\r\n    const layersQueryFormat: {layer: string, queryFormat: QueryFormat}[] = [];\r\n    if (!catalog.queryFormat) {\r\n      return layersQueryFormat;\r\n    }\r\n    Object.keys(catalog.queryFormat).forEach(configuredInfoFormat => {\r\n      if (catalog.queryFormat[configuredInfoFormat] instanceof Array) {\r\n        catalog.queryFormat[configuredInfoFormat].forEach(layerName => {\r\n          if (!layersQueryFormat.find(specific => specific.layer === layerName)) {\r\n            layersQueryFormat.push({ layer: layerName, queryFormat: configuredInfoFormat as QueryFormat });\r\n          }\r\n        });\r\n      } else {\r\n        if (!layersQueryFormat.find(specific => specific.layer === catalog.queryFormat[configuredInfoFormat])) {\r\n          layersQueryFormat.push({ layer: catalog.queryFormat[configuredInfoFormat], queryFormat: configuredInfoFormat as QueryFormat });\r\n        }\r\n      }\r\n    });\r\n    return layersQueryFormat;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { zip } from 'rxjs';\r\n\r\nimport { EntityStore, EntityStoreWatcher } from '@igo2/common';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Component to browse a catalog's groups and layers and display them on a map.\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser',\r\n  templateUrl: './catalog-browser.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Catalog items store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<CatalogItem>;\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Store holding the catalog's items\r\n   */\r\n  @Input() store: EntityStore<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Whether a group can be toggled when it's collapsed\r\n   */\r\n  @Input() toggleCollapsedGroup: boolean = true;\r\n\r\n  constructor(\r\n    private layerService: LayerService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    const currentItems = this.map.layers.map((layer: Layer) => {\r\n      return {\r\n        id: layer.id,\r\n        title: layer.title,\r\n        type: CatalogItemType.Layer\r\n      };\r\n    });\r\n    this.store.state.updateMany(currentItems, { added: true }, true);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Layer added event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const layer = event.layer;\r\n    this.store.state.update(layer, { added: event.added }, false);\r\n    event.added ? this.addLayerToMap(layer) : this.removeLayerFromMap(layer);\r\n  }\r\n\r\n  /**\r\n   * When a froup is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Group added event\r\n   */\r\n  onGroupAddedChange(event: { added: boolean; group: CatalogItemGroup }) {\r\n    const group = event.group;\r\n    this.store.state.update(group, { added: event.added }, false);\r\n    event.added ? this.addGroupToMap(group) : this.removeGroupFromMap(group);\r\n  }\r\n\r\n  /**\r\n   * Add layer to map\r\n   * @param layer Catalog layer\r\n   */\r\n  private addLayerToMap(layer: CatalogItemLayer) {\r\n    this.addLayersToMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove layer from map\r\n   * @param layer Catalog layer\r\n   */\r\n  private removeLayerFromMap(layer: CatalogItemLayer) {\r\n    this.removeLayersFromMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add multiple layers to map\r\n   * @param layers Catalog layers\r\n   */\r\n  private addLayersToMap(layers: CatalogItemLayer[]) {\r\n    const layers$ = layers.map((layer: CatalogItemLayer) => {\r\n      return this.layerService.createAsyncLayer(layer.options);\r\n    });\r\n\r\n    zip(...layers$).subscribe((oLayers: Layer[]) => {\r\n      this.store.state.updateMany(layers, { added: true });\r\n      this.map.addLayers(oLayers);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove multiple layers from map\r\n   * @param layers Catalog layers\r\n   */\r\n  private removeLayersFromMap(layers: CatalogItemLayer[]) {\r\n    layers.forEach((layer: CatalogItemLayer) => {\r\n      this.store.state.update(layer, { added: false });\r\n      const oLayer = this.map.getLayerById(layer.id);\r\n      if (oLayer !== undefined) {\r\n        this.map.removeLayer(oLayer);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add all the layers of a group to map\r\n   * @param group Catalog group\r\n   */\r\n  private addGroupToMap(group: CatalogItemGroup) {\r\n    const layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === false;\r\n    });\r\n    this.addLayersToMap(layers as CatalogItemLayer[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all the layers of a groufrom map\r\n   * @param group Catalog group\r\n   */\r\n  private removeGroupFromMap(group: CatalogItemGroup) {\r\n    const layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === true;\r\n    });\r\n    this.removeLayersFromMap(layers as CatalogItemLayer[]);\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { CatalogItemLayer } from '../shared';\r\n\r\n/**\r\n * Catalog browser layer item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-layer',\r\n  templateUrl: './catalog-browser-layer.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserLayerComponent {\r\n\r\n  /**\r\n   * Catalog layer\r\n   */\r\n  @Input() layer: CatalogItemLayer;\r\n\r\n  /**\r\n   * Whether the layer is already added to the map\r\n   */\r\n  @Input() added: boolean;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.layer); }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string { return getEntityIcon(this.layer) || 'layers'; }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added ? this.remove() : this.add();\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    this.added = true;\r\n    this.addedChange.emit({added: true, layer: this.layer});\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = false\r\n   */\r\n  private remove() {\r\n    this.added = false;\r\n    this.addedChange.emit({added: false, layer: this.layer});\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStateManager, EntityStore } from '@igo2/common';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemGroup,\r\n  CatalogItemLayer,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Catalog browser group item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-group',\r\n  templateUrl: './catalog-browser-group.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserGroupComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Group's items store\r\n   * @internal\r\n   */\r\n  store = new EntityStore<CatalogItem, CatalogItemState>([]);\r\n\r\n  /**\r\n   * Whether all the layers of the group are added\r\n   * @internal\r\n   */\r\n  added$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Whether the toggle button is disabled\r\n   * @internal\r\n   */\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Catalog group\r\n   */\r\n  @Input() group: CatalogItemGroup;\r\n\r\n  /**\r\n   * Whether the group is collapsed\r\n   */\r\n  @Input() collapsed: boolean = true;\r\n\r\n  /**\r\n   * Whether the group can be toggled when it's collapsed\r\n   */\r\n  @Input() toggleCollapsed: boolean = true;\r\n\r\n  /**\r\n   * Parent catalog's items store state. Groups share a unique\r\n   * EntityState that tracks the group and it's layers state (whether they are added or not).\r\n   * Sharing a unique state would also allow us to expand this component to allow\r\n   * the selection of a layer while unselecting any layer already selected in another group.\r\n   * This could be useful to display some layer info before adding it, for example.\r\n   */\r\n  @Input() state: EntityStateManager<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of the group is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    group: CatalogItemGroup;\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of a layer is clicked\r\n   */\r\n  @Output() layerAddedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return this.group.title;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.load(this.group.items);\r\n    this.evaluateAdded();\r\n    this.evaluateDisabled(this.collapsed);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.store.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added$.value ? this.remove() : this.add();\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleCollapsed(collapsed: boolean) {\r\n    this.evaluateDisabled(collapsed);\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, evaluate if all the layers of the group\r\n   * are now added or removed. If so, consider that the group itself is added\r\n   * or removed.\r\n   * @internal\r\n   * @param event Layer added change event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    this.layerAddedChange.emit(event);\r\n    this.tryToggleGroup(event);\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    this.added$.next(true);\r\n    this.addedChange.emit({\r\n      added: true,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private remove() {\r\n    this.added$.next(false);\r\n    this.addedChange.emit({\r\n      added: false,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If all the layers of the group added or removed, add or remove the group itself.\r\n   * @param event The last layer added change event to occur\r\n   */\r\n  private tryToggleGroup(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const added = event.added;\r\n    const layer = event.layer;\r\n\r\n    const layersAdded = this.store.view\r\n      .all()\r\n      .filter((item: CatalogItem) => item.id !== layer.id)\r\n      .map((item: CatalogItem) => this.state.get(item).added || false);\r\n\r\n    if (layersAdded.every(value => value === added)) {\r\n      added ? this.add() : this.remove();\r\n    } else if (this.added$.value === true) {\r\n      this.added$.next(false);\r\n    }\r\n  }\r\n\r\n  private evaluateAdded() {\r\n    const added = this.store.all().every((item: CatalogItem) => {\r\n      return (this.state.get(item).added || false) === true;\r\n    });\r\n    this.added$.next(added);\r\n  }\r\n\r\n  private evaluateDisabled(collapsed: boolean) {\r\n    let disabled = false;\r\n    if (this.toggleCollapsed === false) {\r\n      disabled = collapsed;\r\n    }\r\n    this.disabled$.next(disabled);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule\r\n} from '@igo2/common';\r\n\r\nimport { IgoMetadataModule } from './../../metadata/metadata.module';\r\nimport { CatalogBrowserComponent } from './catalog-browser.component';\r\nimport { CatalogBrowserLayerComponent } from './catalog-browser-layer.component';\r\nimport { CatalogBrowserGroupComponent } from './catalog-browser-group.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoMetadataModule\r\n  ],\r\n  exports: [\r\n    CatalogBrowserComponent\r\n  ],\r\n  declarations: [\r\n    CatalogBrowserComponent,\r\n    CatalogBrowserGroupComponent,\r\n    CatalogBrowserLayerComponent\r\n  ]\r\n})\r\nexport class IgoCatalogBrowserModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { EntityStore } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\nimport { Catalog } from '../shared/catalog.interface';\r\n\r\n/**\r\n * Component to browse a list of available catalogs\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library',\r\n  templateUrl: './catalog-library.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryComponent implements OnInit {\r\n\r\n  /**\r\n   * Store holding the catalogs\r\n   */\r\n  @Input() store: EntityStore<Catalog>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted a catalog is selected or unselected\r\n   */\r\n  @Output() catalogSelectChange = new EventEmitter<{\r\n    selected: boolean;\r\n    catalog: Catalog;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.state.clear();\r\n  }\r\n\r\n  /**\r\n   * When a catalog is selected, update it's state in the store\r\n   * and emit the catalog select change event\r\n   * @internal\r\n   */\r\n  onCatalogSelect(catalog: Catalog) {\r\n    this.store.state.update(catalog, {\r\n      selected: true,\r\n      focused: true\r\n    }, true);\r\n    this.catalogSelectChange.emit({selected: true, catalog});\r\n  }\r\n\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { Catalog } from '../shared/catalog.interface';\r\n\r\n/**\r\n * Catalog library item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library-item',\r\n  templateUrl: './catalog-library-item.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryItemComponent {\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.catalog); }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string { return getEntityIcon(this.catalog) || 'image-multiple'; }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule } from '@igo2/common';\r\n\r\nimport { CatalogLibaryComponent, } from './catalog-library.component';\r\nimport { CatalogLibaryItemComponent } from './catalog-library-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoListModule\r\n  ],\r\n  exports: [\r\n    CatalogLibaryComponent\r\n  ],\r\n  declarations: [\r\n    CatalogLibaryComponent,\r\n    CatalogLibaryItemComponent\r\n  ]\r\n})\r\nexport class IgoCatalogLibraryModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule, IgoCollapsibleModule } from '@igo2/common';\r\n\r\nimport { IgoCatalogBrowserModule } from './catalog-browser/catalog-browser.module';\r\nimport { IgoCatalogLibraryModule } from './catalog-library/catalog-library.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule\r\n  ],\r\n  exports: [\r\n    IgoCatalogBrowserModule,\r\n    IgoCatalogLibraryModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoCatalogModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoDataSourceModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDataSourceModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DataSource } from '../../datasource/shared/datasources/datasource';\r\n\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\nimport { TimeFilterableDataSource } from './time-filter.interface';\r\n\r\n@Pipe({\r\n  name: 'filterableDataSource'\r\n})\r\nexport class FilterableDataSourcePipe implements PipeTransform {\r\n  transform(value: Layer[], arg: string): Layer[] {\r\n    let layers;\r\n\r\n    if (arg === 'time') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as TimeFilterableDataSource;\r\n        return (\r\n          this.isTimeFilterable(datasource) &&\r\n          datasource.options.timeFilter !== undefined &&\r\n          Object.keys(datasource.options.timeFilter).length\r\n        );\r\n      });\r\n    }\r\n    if (arg === 'ogc') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as OgcFilterableDataSource;\r\n        return this.isOgcFilterable(datasource);\r\n      });\r\n    }\r\n    return layers;\r\n  }\r\n\r\n  private isTimeFilterable(dataSource: TimeFilterableDataSource) {\r\n    if (dataSource.options.type !== 'wms') {\r\n      return false;\r\n    }\r\n    return dataSource.options.timeFilterable;\r\n  }\r\n\r\n  private isOgcFilterable(dataSource: OgcFilterableDataSource) {\r\n    if (\r\n      dataSource.options.ogcFilters &&\r\n      dataSource.options.ogcFilters.enabled\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { TileArcGISRestDataSource } from '../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\n@Injectable()\r\nexport class TimeFilterService {\r\n  constructor() {}\r\n\r\n  filterByDate(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    date: Date | [Date, Date]\r\n  ) {\r\n    let time;\r\n    let newdateform;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(date)) {\r\n      const dates = [];\r\n      if (date[0]) {\r\n        newdateformStart = this.reformatDateTime(date[0]);\r\n        dates.push(date[0]);\r\n      }\r\n      if (date[1]) {\r\n        newdateformEnd = this.reformatDateTime(date[1]);\r\n        dates.push(date[1]);\r\n      }\r\n      if (dates.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else if (date) {\r\n      newdateform = this.reformatDateTime(date);\r\n      time = newdateform;\r\n    }\r\n\r\n    const params = { time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  filterByYear(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    year: string | [string, string]\r\n  ) {\r\n    let time;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(year)) {\r\n      const years = [];\r\n      if (year[0]) {\r\n        newdateformStart = year[0];\r\n        years.push(year[0]);\r\n      }\r\n      if (year[1]) {\r\n        newdateformEnd = year[1];\r\n        years.push(year[1]);\r\n      }\r\n      if (years.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else if (year) {\r\n      time = year;\r\n    }\r\n\r\n    const params = { time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  private reformatDateTime(value) {\r\n    const year = value.getFullYear();\r\n    let month = value.getMonth() + 1;\r\n    let day = value.getUTCDate();\r\n    let hour = value.getUTCHours();\r\n    let minute = value.getUTCMinutes();\r\n\r\n    if (Number(month) < 10) {\r\n      month = '0' + month;\r\n    }\r\n\r\n    if (Number(day) < 10) {\r\n      day = '0' + day;\r\n    }\r\n\r\n    if (Number(hour) < 10) {\r\n      hour = '0' + hour;\r\n    }\r\n\r\n    if (Number(minute) < 10) {\r\n      minute = '0' + minute;\r\n    }\r\n\r\n    return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':00Z';\r\n  }\r\n}\r\n","export enum OgcFilterOperatorType {\r\n    BasicNumericOperator = 'BasicNumericOperator',\r\n    Basic = 'Basic',\r\n    BasicAndSpatial = 'BasicAndSpatial',\r\n    Spatial = 'Spatial',\r\n    All = 'All'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { OgcFilterWriter } from './ogc-filter';\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\n\r\n@Injectable()\r\nexport class OGCFilterService {\r\n  constructor() {}\r\n\r\n  public filterByOgc(wmsDatasource: WMSDataSource, filterString: string) {\r\n    const appliedFilter = new OgcFilterWriter().formatProcessedOgcFilter(filterString, wmsDatasource.options.params.layers);\r\n    wmsDatasource.ol.updateParams({ filter: appliedFilter });\r\n  }\r\n\r\n  public setOgcWFSFiltersOptions(wfsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wfsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.paramsWFS.fieldNameGeometry,\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          options.ogcFilters.filters,\r\n          options.paramsWFS.fieldNameGeometry\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public setOgcWMSFiltersOptions(wmsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wmsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.fieldNameGeometry,\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          // With some wms server, this param must be set to make spatials call.\r\n          options.ogcFilters.filters,\r\n          options.fieldNameGeometry\r\n        );\r\n      }\r\n      this.filterByOgc(\r\n        wmsDatasource as WMSDataSource,\r\n        ogcFilterWriter.buildFilter(options.ogcFilters.filters)\r\n      );\r\n      options.filtered = true;\r\n    } else {\r\n      options.ogcFilters.filters = undefined;\r\n      options.ogcFilters.interfaceOgcFilters = [];\r\n      options.filtered = false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { OgcFilterWriter, OgcFilterableDataSourceOptions } from '../../filter/shared';\r\n\r\nimport { DataSourceOptions } from '../../datasource/shared/datasources/datasource.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DownloadService {\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  open(layer: Layer) {\r\n    const translate = this.languageService.translate;\r\n    const title = translate.instant('igo.geo.download.title');\r\n    this.messageService.success(\r\n      translate.instant('igo.geo.download.start'),\r\n      title\r\n    );\r\n\r\n    const DSOptions: DataSourceOptions = layer.dataSource.options;\r\n    if (Object.keys(DSOptions.download).length > 0) {\r\n      if (\r\n        DSOptions.download.dynamicUrl &&\r\n        DSOptions.download.url === undefined\r\n      ) {\r\n        let wfsOptions;\r\n        if (\r\n          (layer.dataSource.options as any).paramsWFS &&\r\n          Object.keys((layer.dataSource.options as any).paramsWFS).length > 0\r\n        ) {\r\n          wfsOptions = (layer.dataSource.options as any).paramsWFS;\r\n        } else {\r\n          wfsOptions = (layer.dataSource.options as any).params;\r\n        }\r\n\r\n        const outputFormatDownload =\r\n          wfsOptions.outputFormatDownload === undefined\r\n            ? 'outputformat=' + wfsOptions.outputFormat\r\n            : 'outputformat=' + wfsOptions.outputFormatDownload;\r\n\r\n        const baseurl = DSOptions.download.dynamicUrl\r\n          .replace(/&?outputformat=[^&]*/gi, '')\r\n          .replace(/&?filter=[^&]*/gi, '')\r\n          .replace(/&?bbox=[^&]*/gi, '');\r\n\r\n        const ogcFilters = (layer.dataSource.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n\r\n        let filterQueryString;\r\n        filterQueryString = new OgcFilterWriter()\r\n        .handleOgcFiltersAppliedValue(layer.dataSource.options, ogcFilters.geometryName);\r\n        if (!filterQueryString) {\r\n          // Prevent getting all the features for empty filter\r\n            filterQueryString = new OgcFilterWriter().buildFilter(\r\n            undefined,\r\n            layer.map.getExtent(),\r\n            new olProjection({ code: layer.map.projection }),\r\n            ogcFilters.geometryName\r\n          );\r\n        } else {\r\n          filterQueryString = 'filter=' + filterQueryString;\r\n        }\r\n        window.open(\r\n          `${baseurl}&${filterQueryString}&${outputFormatDownload}`,\r\n          '_blank'\r\n        );\r\n      } else if (DSOptions.download) {\r\n        window.open(DSOptions.download.url, '_blank');\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport { DownloadDataSourceOptions } from '../shared/download.interface';\r\nimport { DownloadService } from '../shared/download.service';\r\n\r\n@Component({\r\n  selector: 'igo-download-button',\r\n  templateUrl: './download-button.component.html',\r\n  styleUrls: ['./download-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DownloadButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private downloadService: DownloadService) {}\r\n\r\n  openDownload(layer: Layer) {\r\n    this.downloadService.open(layer);\r\n  }\r\n\r\n  get options(): DownloadDataSourceOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { DownloadButtonComponent } from './download-button/download-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [DownloadButtonComponent],\r\n  declarations: [DownloadButtonComponent]\r\n})\r\nexport class IgoDownloadModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDownloadModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { Feature } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-feature-details',\r\n  templateUrl: './feature-details.component.html',\r\n  styleUrls: ['./feature-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureDetailsComponent {\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  private _feature: Feature;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.feature);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.feature) || 'link';\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private sanitizer: DomSanitizer\r\n  ) {}\r\n\r\n  htmlSanitizer(value): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n  }\r\n\r\n  isObject(value) {\r\n    return typeof value === 'object';\r\n  }\r\n\r\n  isUrl(value) {\r\n    if (typeof value === 'string') {\r\n      return (\r\n        value.slice(0, 8) === 'https://' || value.slice(0, 7) === 'http://'\r\n      );\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  filterFeatureProperties(feature) {\r\n    const allowedFieldsAndAlias = feature.meta ? feature.meta.alias : undefined;\r\n    const properties = Object.assign({}, feature.properties);\r\n\r\n    if (allowedFieldsAndAlias) {\r\n      Object.keys(properties).forEach(property => {\r\n        if (Object.keys(allowedFieldsAndAlias).indexOf(property) === -1) {\r\n          delete properties[property];\r\n        } else {\r\n          properties[allowedFieldsAndAlias[property]] = properties[property];\r\n          if (allowedFieldsAndAlias[property] !== property) {\r\n            delete properties[property];\r\n          }\r\n        }\r\n      });\r\n      return properties;\r\n    } else {\r\n      return feature.properties;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { FeatureDetailsComponent } from './feature-details.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [FeatureDetailsComponent],\r\n  declarations: [FeatureDetailsComponent]\r\n})\r\nexport class IgoFeatureDetailsModule {}\r\n","import * as olstyle from 'ol/style';\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Form, getEntityRevision } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FEATURE } from '../shared/feature.enums';\r\nimport { Feature, FeatureMeta } from '../shared/feature.interfaces';\r\nimport { FeatureStore } from '../shared/store';\r\nimport { FeatureStoreSelectionStrategy } from '../shared/strategies/selection';\r\n\r\n/**\r\n * A configurable form, optionnally bound to a feature.\r\n * This component creates an entity form and, on submit,\r\n * returns a feature made out of the submitted data. It also\r\n * does things like managing the feature visibility while it's being updated\r\n * as well as disabling the selection of another feature.\r\n */\r\n@Component({\r\n  selector: 'igo-feature-form',\r\n  templateUrl: './feature-form.component.html',\r\n  styleUrls: ['./feature-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureFormComponent implements OnChanges, OnDestroy {\r\n  public feature$: BehaviorSubject<Feature> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Form\r\n   */\r\n  @Input() form: Form;\r\n\r\n  /**\r\n   * Feature to update\r\n   */\r\n  @Input() feature: Feature | undefined;\r\n\r\n  /**\r\n   * The store the feature belongs to. Required to manage the\r\n   * visiblity and selection.\r\n   */\r\n  @Input() store: FeatureStore | undefined;\r\n\r\n  /**\r\n   * Event emitted when the form is submitted\r\n   */\r\n  @Output() submitForm = new EventEmitter<Feature>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const store = changes.store;\r\n    if (store && store.currentValue !== store.previousValue) {\r\n      this.setStore(store.currentValue);\r\n    }\r\n\r\n    const feature = changes.feature;\r\n    if (feature && feature.currentValue !== feature.previousValue) {\r\n      this.feature$.next(feature.currentValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the original feature and reactivate the selection\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.setStore(undefined);\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature and emit an event\r\n   * @param event Form submit event\r\n   * @internal\r\n   */\r\n  onSubmit(data: { [key: string]: any }) {\r\n    const feature = this.formDataToFeature(data);\r\n    this.submitForm.emit(feature);\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature\r\n   * @param data Form data\r\n   * @returns A feature\r\n   */\r\n  private formDataToFeature(data: { [key: string]: any }): Feature {\r\n    const properties = {};\r\n    const meta = {};\r\n    if (this.feature === undefined) {\r\n      (meta as any).id = uuid();\r\n    } else {\r\n      Object.assign(properties, this.feature.properties);\r\n      Object.assign(meta, this.feature.meta, {\r\n        revision: getEntityRevision(this.feature) + 1\r\n      });\r\n    }\r\n\r\n    const propertyPrefix = 'properties.';\r\n    Object.entries(data).forEach((entry: [string, any]) => {\r\n      const [key, value] = entry;\r\n      if (key.startsWith(propertyPrefix)) {\r\n        const property = key.substr(propertyPrefix.length);\r\n        properties[property] = value;\r\n      }\r\n    });\r\n\r\n    let geometry = data.geometry;\r\n    if (geometry === undefined && this.feature !== undefined) {\r\n      geometry = this.feature.geometry;\r\n    }\r\n\r\n    return {\r\n      meta: meta as FeatureMeta,\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: 'EPSG:4326',\r\n      properties\r\n    };\r\n  }\r\n\r\n  private setStore(store: FeatureStore) {\r\n    if (this.store !== undefined) {\r\n      this.activateStoreSelection(this.store);\r\n    }\r\n    if (store !== undefined) {\r\n      this.deactivateStoreSelection(store);\r\n    }\r\n    this.store = store;\r\n  }\r\n\r\n  /**\r\n   * Deactivate feature selection from the store and from the map\r\n   */\r\n  private deactivateStoreSelection(store: FeatureStore) {\r\n    const selectionStrategy = store.getStrategyOfType(\r\n      FeatureStoreSelectionStrategy\r\n    );\r\n    if (selectionStrategy !== undefined) {\r\n      selectionStrategy.deactivate();\r\n      (selectionStrategy as FeatureStoreSelectionStrategy).unselectAll();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reactivate feature selection from the store and from the map\r\n   */\r\n  private activateStoreSelection(store: FeatureStore) {\r\n    // TODO: maybe we should recativate the strategies only if they\r\n    // were active in the first place\r\n    store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFormModule } from '@igo2/common';\r\n\r\nimport { FeatureFormComponent } from './feature-form.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoFormModule\r\n  ],\r\n  exports: [\r\n    IgoFormModule,\r\n    FeatureFormComponent\r\n  ],\r\n  declarations: [\r\n    FeatureFormComponent\r\n  ]\r\n})\r\nexport class IgoFeatureFormModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFeatureDetailsModule } from './feature-details/feature-details.module';\r\nimport { IgoFeatureFormModule } from './feature-form/feature-form.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoFeatureDetailsModule,\r\n    IgoFeatureFormModule\r\n  ],\r\n  declarations: [],\r\n  providers: []\r\n})\r\nexport class IgoFeatureModule {}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatSlider } from '@angular/material';\r\nimport * as moment from 'moment';\r\n\r\nimport { TimeFilterOptions } from '../shared/time-filter.interface';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-form',\r\n  templateUrl: './time-filter-form.component.html',\r\n  styleUrls: ['./time-filter-form.component.scss']\r\n})\r\nexport class TimeFilterFormComponent implements OnInit {\r\n  @Input()\r\n  get options(): TimeFilterOptions {\r\n    return this._options;\r\n  }\r\n  set options(value: TimeFilterOptions) {\r\n    this._options = value;\r\n  }\r\n  private _options: TimeFilterOptions;\r\n\r\n  public date: Date;\r\n  public startDate: Date;\r\n  public endDate: Date;\r\n  public year: any;\r\n  public startYear: any;\r\n  public endYear: any;\r\n  public initStartYear: any;\r\n  public initEndYear: any;\r\n  public listYears: Array<string> = [];\r\n  public startListYears: Array<string> = [];\r\n  public endListYears: Array<string> = [];\r\n\r\n  @Input()\r\n  set currentValue(value: string) {\r\n    if (value) {\r\n      if (this.type !== 'year') {\r\n        const valueArray = value.split('/');\r\n        if (valueArray.length > 0) {\r\n          const startDate = new Date(valueArray[0]);\r\n          const endDate = new Date(valueArray[1]);\r\n          if (!isNaN(startDate.valueOf())) {\r\n            this.startDate = startDate;\r\n          }\r\n          if (!isNaN(endDate.valueOf())) {\r\n            this.endDate = endDate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public interval: any;\r\n  public playIcon = 'play_circle_filled';\r\n\r\n  @Output() change: EventEmitter<Date | [Date, Date]> = new EventEmitter();\r\n  @Output()\r\n  yearChange: EventEmitter<string | [string, string]> = new EventEmitter();\r\n  @ViewChild(MatSlider) mySlider;\r\n\r\n  get type(): 'date' | 'time' | 'datetime' | 'year' {\r\n    return this.options.type === undefined ? 'date' : this.options.type;\r\n  }\r\n\r\n  get isRange(): boolean {\r\n    return this.options.range === undefined || this.options.style === 'slider'\r\n      ? false\r\n      : this.options.range;\r\n  }\r\n\r\n  get style(): string {\r\n    return this.options.style === undefined ? 'slider' : this.options.style;\r\n  }\r\n\r\n  get step(): number {\r\n    let step = 10800000;\r\n    if (this.options.step === undefined) {\r\n      switch (this.type) {\r\n        case 'date':\r\n        case 'datetime':\r\n          step = 10800000;\r\n          break;\r\n        case 'time':\r\n          step = 3600000;\r\n          break;\r\n        case 'year':\r\n          step = 31536000000;\r\n          break;\r\n        default:\r\n          step = 10800000;\r\n      }\r\n    } else {\r\n      step = this.getStepDefinition(this.options.step);\r\n    }\r\n\r\n    return step;\r\n  }\r\n\r\n  get timeInterval(): number {\r\n    return this.options.timeInterval === undefined\r\n      ? 2000\r\n      : this.options.timeInterval;\r\n  }\r\n\r\n  get min(): Date {\r\n    return this.options.min === undefined\r\n      ? undefined\r\n      : new Date(this.options.min);\r\n  }\r\n\r\n  get max(): Date {\r\n    return this.options.max === undefined\r\n      ? undefined\r\n      : new Date(this.options.max);\r\n  }\r\n\r\n  get is(): boolean {\r\n    return this.options.range === undefined ? false : this.options.range;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    if (this.startDate === undefined) {\r\n      const utcmin = new Date(this.min);\r\n      this.startDate = new Date(\r\n        utcmin.getTime() + utcmin.getTimezoneOffset() * 60000\r\n      );\r\n    }\r\n    if (this.endDate === undefined) {\r\n      const utcmax = new Date(this.max);\r\n      this.endDate = new Date(\r\n        utcmax.getTime() + utcmax.getTimezoneOffset() * 60000\r\n      );\r\n    }\r\n    if (this.startYear === undefined) {\r\n      this.startYear = new Date(this.startDate).getFullYear();\r\n      this.initStartYear = this.startYear;\r\n    }\r\n    if (this.endYear === undefined) {\r\n      this.endYear = new Date(this.endDate).getFullYear();\r\n      this.initEndYear = this.endYear;\r\n    }\r\n\r\n    if (!this.isRange) {\r\n      for (let i = this.startYear; i <= this.endYear + 1; i++) {\r\n        this.listYears.push(i);\r\n      }\r\n    } else {\r\n      for (let i = this.startYear; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      for (let i = this.startYear + 1; i <= this.endYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleDateChange(event: any) {\r\n    this.setupDateOutput();\r\n    this.applyTypeChange();\r\n\r\n    // Only if is range, use 2 dates to make the range\r\n    if (this.isRange) {\r\n      this.change.emit([this.startDate, this.endDate]);\r\n    } else {\r\n      this.change.emit(this.startDate);\r\n    }\r\n  }\r\n\r\n  handleYearChange(event: any) {\r\n    if (this.isRange) {\r\n      this.endListYears = [];\r\n      for (let i = this.startYear + 1; i <= this.initEndYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n      this.startListYears = [];\r\n      for (let i = this.initStartYear + 1; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      this.yearChange.emit([this.startYear, this.endYear]);\r\n    } else {\r\n      this.yearChange.emit(this.year);\r\n    }\r\n  }\r\n\r\n  handleListYearChange(event: any) {\r\n    this.handleYearChange([this.startYear, this.endYear]);\r\n  }\r\n\r\n  handleListYearStartChange(event: any) {\r\n    this.change.emit([this.startDate, this.endDate]);\r\n  }\r\n\r\n  dateToNumber(date: Date): number {\r\n    let newDate;\r\n    if (date) {\r\n      newDate = new Date(date);\r\n    } else {\r\n      newDate = new Date(this.min);\r\n    }\r\n\r\n    return newDate.getTime();\r\n  }\r\n\r\n  setSliderThumbLabel(label: string) {\r\n    const thumbLabel = this.findThumbLabel(\r\n      this.mySlider._elementRef.nativeElement.childNodes\r\n    );\r\n    if (thumbLabel) {\r\n      thumbLabel.textContent = label;\r\n    }\r\n  }\r\n\r\n  findThumbLabel(test: any[]): any {\r\n    let thumbLabel;\r\n\r\n    test.forEach(value => {\r\n      if (value.className === 'mat-slider-thumb-label-text') {\r\n        thumbLabel = value;\r\n      }\r\n\r\n      if (value.children.length > 0 && !thumbLabel) {\r\n        thumbLabel = this.findThumbLabel(value.childNodes);\r\n      }\r\n    }, this);\r\n    return thumbLabel;\r\n  }\r\n\r\n  playFilter(event: any) {\r\n    if (this.interval) {\r\n      this.stopFilter();\r\n    } else {\r\n      this.playIcon = 'pause_circle_filled';\r\n      this.interval = setInterval(\r\n        (that) => {\r\n          let newMinDateNumber;\r\n          const maxDateNumber = new Date(that.max);\r\n\r\n          newMinDateNumber =\r\n            that.date === undefined ? that.min.getTime() : that.date.getTime();\r\n          newMinDateNumber += that.mySlider.step;\r\n          that.date = new Date(newMinDateNumber);\r\n\r\n          if (newMinDateNumber > maxDateNumber.getTime()) {\r\n            that.stopFilter();\r\n          }\r\n\r\n          that.handleDateChange({ value: that.date, date: that.date });\r\n        },\r\n        this.timeInterval,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  stopFilter() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n    this.interval = undefined;\r\n    this.playIcon = 'play_circle_filled';\r\n  }\r\n\r\n  handleSliderDateChange(event: any) {\r\n    this.date = new Date(event.value);\r\n    this.setSliderThumbLabel(this.handleSliderTooltip());\r\n    this.handleDateChange(event);\r\n  }\r\n\r\n  handleSliderValue(): number {\r\n    if (this.options.current === true || !this.min) {\r\n      const currentDate = new Date();\r\n      this.date = this.getRoundedDate(currentDate);\r\n    }\r\n    return this.date === undefined ? this.min.getTime() : this.date.getTime();\r\n  }\r\n\r\n  handleSliderTooltip() {\r\n    let label: string;\r\n\r\n    switch (this.type) {\r\n      case 'date':\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toDateString()\r\n            : this.date.toDateString();\r\n        break;\r\n      case 'time':\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toTimeString()\r\n            : this.date.toTimeString();\r\n        break;\r\n      // datetime\r\n      default:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toUTCString()\r\n            : this.date.toUTCString();\r\n        break;\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  setupDateOutput() {\r\n    if (this.style === 'slider') {\r\n      this.startDate = new Date(this.date);\r\n      this.startDate.setSeconds(-(this.step / 1000));\r\n      this.endDate = new Date(this.startDate);\r\n      this.endDate.setSeconds(this.step / 1000);\r\n    } else if (!this.isRange && !!this.date) {\r\n      this.endDate = new Date(this.date);\r\n      this.startDate = new Date(this.date);\r\n    } else if (this.isRange && (!!this.date || !this.date)) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    } else if (!this.date) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    }\r\n  }\r\n\r\n  applyTypeChange() {\r\n    switch (this.type) {\r\n      case 'date':\r\n        if (this.startDate !== undefined || this.endDate !== undefined) {\r\n          this.startDate.setHours(0);\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setHours(23);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      case 'time':\r\n        if (this.style === 'calendar') {\r\n          if (this.startDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.startDate.getHours();\r\n            const selectedMinute = this.startDate.getMinutes();\r\n            this.startDate = this.min;\r\n            this.startDate.setHours(selectedHour);\r\n            this.startDate.setMinutes(selectedMinute);\r\n          }\r\n\r\n          if (this.endDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.endDate.getHours();\r\n            const selectedMinute = this.endDate.getMinutes();\r\n            this.endDate = this.min;\r\n            this.endDate.setHours(selectedHour);\r\n            this.endDate.setMinutes(selectedMinute);\r\n          }\r\n        }\r\n\r\n        if (!this.isRange && this.step > 60 * 60 * 1000) {\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      // datetime\r\n      default:\r\n      // do nothing\r\n    }\r\n  }\r\n\r\n  getRangeMinDate(): Date {\r\n    return this.startDate === undefined ? this.min : this.startDate;\r\n  }\r\n\r\n  getRangeMaxDate(): Date {\r\n    return this.endDate === undefined ? this.max : this.endDate;\r\n  }\r\n\r\n  /**\r\n   * Round date at a certain time, 10 minutes by Default\r\n   * @param date - Date to Round\r\n   * @param atMinute - round to closest 'atMinute' minute, rounded 10 by default\r\n   * @return the rounded date\r\n   */\r\n  getRoundedDate(date, atMinute = 10) {\r\n    const coeff = 1000 * 60 * atMinute;\r\n    return new Date(Math.round(date.getTime() / coeff) * coeff);\r\n  }\r\n\r\n  /**\r\n   * Get the step (period) definition from the layer dimension tag\r\n   * @param step The step as ISO 8601 example: PT10M for 10 Minutes\r\n   * @return the duration in milliseconds\r\n   */\r\n  getStepDefinition(step) {\r\n    return moment.duration(step).asMilliseconds();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { TimeFilterableDataSource } from '../shared/time-filter.interface';\r\nimport { TimeFilterService } from '../shared/time-filter.service';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-item',\r\n  templateUrl: './time-filter-item.component.html',\r\n  styleUrls: ['./time-filter-item.component.scss']\r\n})\r\nexport class TimeFilterItemComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  get datasource(): TimeFilterableDataSource {\r\n    return this.layer.dataSource as TimeFilterableDataSource;\r\n  }\r\n  constructor(private timeFilterService: TimeFilterService) {}\r\n\r\n  handleYearChange(year: string | [string, string]) {\r\n    this.timeFilterService.filterByYear(this.datasource, year);\r\n  }\r\n\r\n  handleDateChange(date: Date | [Date, Date]) {\r\n    this.timeFilterService.filterByDate(this.datasource, date);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-list',\r\n  templateUrl: './time-filter-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TimeFilterListComponent {\r\n  @Input()\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  private _layers: Layer[] = [];\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { TimeFilterListComponent } from './time-filter-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoTimeFilterListBinding]'\r\n})\r\nexport class TimeFilterListBindingDirective implements OnInit, OnDestroy {\r\n  private component: TimeFilterListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: TimeFilterListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olproj from 'ol/proj';\r\nimport olWKT from 'ol/format/WKT';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WktService {\r\n  constructor() {}\r\n\r\n  public wktToFeature(wkt, wktProj, featureProj = 'EPSG:3857') {\r\n    return new olWKT().readFeature(wkt, {\r\n      dataProjection: wktProj,\r\n      featureProjection: featureProj\r\n    });\r\n  }\r\n  public extentToWkt(epsgTO, extent, extentProj) {\r\n    let currentExtent = olproj.transformExtent(extent, extentProj, epsgTO);\r\n    currentExtent = this.roundCoordinateArray(currentExtent, epsgTO, 0);\r\n    const wktPoly = `POLYGON((\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]}))`;\r\n    const wktLine = `LINESTRING(\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]})`;\r\n    const wktMultiPoints = `MULTIPOINT(\r\n        ${extent[0]} ${extent[1]},\r\n        ${extent[0]} ${extent[3]},\r\n        ${extent[2]} ${extent[3]},\r\n        ${extent[2]} ${extent[1]})`;\r\n    return {\r\n      wktPoly,\r\n      wktLine,\r\n      wktMultiPoints\r\n    };\r\n  }\r\n\r\n  private roundCoordinateArray(coordinateArray, projection, decimal = 0) {\r\n    const lproj = olproj.get(projection);\r\n    const units = lproj.getUnits();\r\n    const olUnits = ['ft', 'm', 'us-ft'];\r\n    if (olUnits.indexOf(units) !== -1) {\r\n      coordinateArray = this.roundArray(coordinateArray, decimal);\r\n    }\r\n    return coordinateArray;\r\n  }\r\n\r\n  private roundArray(array, decimal = 0) {\r\n    let x = 0;\r\n    while (x < array.length) {\r\n      array[x] = array[x].toFixed(decimal);\r\n      x++;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  public snrcToWkt(snrc, epsgTO = 'EPSG:3857') {\r\n    snrc = snrc.toLowerCase();\r\n    let wktPoly;\r\n    const ew = {\r\n      1: { from: -56, to: -64 },\r\n      2: { from: -64, to: -72 },\r\n      3: { from: -72, to: -80 },\r\n      4: { from: -80, to: -88 },\r\n      5: { from: -88, to: -96 },\r\n      6: { from: -96, to: -104 },\r\n      7: { from: -104, to: -112 },\r\n      8: { from: -112, to: -120 },\r\n      9: { from: -120, to: -128 },\r\n      10: { from: -128, to: -136 }\r\n    };\r\n    const sn = {\r\n      1: { from: 44, to: 48 },\r\n      2: { from: 48, to: 52 },\r\n      3: { from: 52, to: 56 },\r\n      4: { from: 56, to: 60 },\r\n      5: { from: 60, to: 64 },\r\n      6: { from: 64, to: 68 },\r\n      7: { from: 68, to: 72 },\r\n      8: { from: 72, to: 76 },\r\n      9: { from: 76, to: -128 }\r\n    };\r\n    const snrc250kIndex = [\r\n      ['m', 'n', 'o', 'p'],\r\n      ['l', 'k', 'j', 'i'],\r\n      ['e', 'f', 'g', 'h'],\r\n      ['d', 'c', 'b', 'a']\r\n    ];\r\n\r\n    const snrc50kIndex = [\r\n      ['13', '14', '15', '16'],\r\n      ['12', '11', '10', '09'],\r\n      ['05', '06', '07', '08'],\r\n      ['04', '03', '02', '01']\r\n    ];\r\n    const checkSNRC50k = /\\d{2,3}[a-p][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n\r\n    let snrc1m = false;\r\n    let snrc250k = false;\r\n    let snrc50k = false;\r\n\r\n    if (checkSNRC50k.test(snrc)) {\r\n      snrc50k = true;\r\n    } else {\r\n      if (checkSNRC250k.test(snrc)) {\r\n        snrc250k = true;\r\n      } else {\r\n        if (checkSNRC1m.test(snrc)) {\r\n          snrc1m = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (snrc1m) {\r\n      snrc += 'a01';\r\n    } else if (snrc250k) {\r\n      snrc += '01';\r\n    }\r\n    if (/\\d{2,3}[a-p][0,1][0-9]/gi.test(snrc)) {\r\n      const regex1m = /(?=[a-p])/gi;\r\n      const ar1m = snrc.split(regex1m);\r\n      const part1m = ar1m[0];\r\n      const part250k = ar1m[1][0];\r\n      const part50k = ar1m[1].split(part250k)[1];\r\n      let separator = 1;\r\n      if (part1m.length === 3) {\r\n        separator = 2;\r\n      }\r\n      const partEW = part1m.substring(0, separator);\r\n      const partSN = part1m.substring(separator);\r\n      const unit1mEW = 8;\r\n      const unit1mSN = 4;\r\n      const unit250kEW = 2;\r\n      const unit250kSN = 1;\r\n      const unit50kEW = 0.5;\r\n      const unit50kSN = 0.25;\r\n      let index250kEW = 0;\r\n      let index250kSN = 0;\r\n      let index50kEW = 0;\r\n      let index50kSN = 0;\r\n      snrc250kIndex.forEach(element => {\r\n        if (element.indexOf(part250k) !== -1) {\r\n          index250kSN = snrc250kIndex.indexOf(element);\r\n          index250kEW = element.indexOf(part250k);\r\n        }\r\n      });\r\n      snrc50kIndex.forEach(element => {\r\n        if (element.indexOf(part50k) !== -1) {\r\n          index50kSN = snrc50kIndex.indexOf(element);\r\n          index50kEW = element.indexOf(part50k);\r\n        }\r\n      });\r\n\r\n      let increment250kEW = 0;\r\n      let increment250kSN = 0;\r\n      let increment50kEW = 0;\r\n      let increment50kSN = 0;\r\n      let unitPerTypeEW = unit1mEW;\r\n      let unitPerTypeSN = unit1mSN;\r\n      if (snrc250k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = 0;\r\n        increment50kSN = 0;\r\n        unitPerTypeEW = unit250kEW;\r\n        unitPerTypeSN = unit250kSN;\r\n      } else if (snrc50k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = index50kEW * unit50kEW;\r\n        increment50kSN = index50kSN * unit50kSN;\r\n        unitPerTypeEW = unit50kEW;\r\n        unitPerTypeSN = unit50kSN;\r\n      }\r\n\r\n      const coord: {ul?: any, lr?: any, ur?: any, ll?: any} = {\r\n        ul: [\r\n          ew[partEW].to + increment250kEW + increment50kEW,\r\n          sn[partSN].to - increment250kSN - increment50kSN\r\n        ]\r\n      };\r\n\r\n      coord.lr = [\r\n        coord.ul[0] + unitPerTypeEW,\r\n        coord.ul[1] - unitPerTypeSN\r\n      ];\r\n      coord.ur = [coord.ul[0], coord.ul[1] - unitPerTypeSN];\r\n      coord.ll = [coord.ul[0] + unitPerTypeEW, coord.ul[1]];\r\n\r\n      coord.ul = olproj.transform(\r\n        [coord.ul[0], coord.ul[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.lr = olproj.transform(\r\n        [coord.lr[0], coord.lr[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ur = olproj.transform(\r\n        [coord.ur[0], coord.ur[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ll = olproj.transform(\r\n        [coord.ll[0], coord.ll[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n\r\n      // Rounded coordinate to shorten url in get\r\n      coord.ul = this.roundCoordinateArray(coord.ul, epsgTO, 0);\r\n      coord.lr = this.roundCoordinateArray(coord.lr, epsgTO, 0);\r\n      coord.ur = this.roundCoordinateArray(coord.ur, epsgTO, 0);\r\n      coord.ll = this.roundCoordinateArray(coord.ll, epsgTO, 0);\r\n\r\n      wktPoly =\r\n        'POLYGON((' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        '))';\r\n      const wktLine =\r\n        'LINESTRING(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n\r\n      const wktMultiPoints =\r\n        'MULTIPOINT(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n      return {\r\n        wktPoly,\r\n        wktLine,\r\n        wktMultiPoints\r\n      };\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { WktService } from '../../wkt/shared/wkt.service';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterOperatorType } from '../../filter/shared/ogc-filter.enum';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-form',\r\n  templateUrl: './ogc-filter-form.component.html',\r\n  styleUrls: ['./ogc-filter-form.component.scss']\r\n})\r\nexport class OgcFilterFormComponent implements OnInit {\r\n  public ogcFilterOperators;\r\n  public igoSpatialSelectors;\r\n  public value = '';\r\n  public inputOperator;\r\n  public fields: any[];\r\n  public values: any[];\r\n  public color = 'primary';\r\n  public snrc = '';\r\n  public disabled;\r\n  public baseOverlayName = 'ogcFilterOverlay_';\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() currentFilter: any;\r\n\r\n  get activeFilters() {\r\n    this.updateField();\r\n    return this.datasource.options.ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private wktService: WktService\r\n  ) {\r\n    // TODO: Filter permitted operator based on wfscapabilities\r\n    // Need to work on regex on XML capabilities because\r\n    // comaparison operator's name varies between WFS servers...\r\n    // Ex: IsNull vs PropertyIsNull vs IsNil ...\r\n    this.ogcFilterOperators = new OgcFilterWriter().operators;\r\n    this.igoSpatialSelectors = [\r\n      {\r\n        type: 'fixedExtent'\r\n      },\r\n      {\r\n        type: 'snrc'\r\n      }\r\n    ];\r\n    // TODO: selectFeature & drawFeature\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.computeAllowedOperators();\r\n  }\r\n\r\n  computeAllowedOperators() {\r\n    let allowedOperators = this.datasource.options.ogcFilters.allowedOperatorsType;\r\n    let effectiveOperators: {} = {};\r\n\r\n    if (!allowedOperators)  {\r\n      allowedOperators = OgcFilterOperatorType.BasicAndSpatial;\r\n    }\r\n\r\n    switch (allowedOperators.toLowerCase()) {\r\n      case 'all':\r\n        effectiveOperators = this.ogcFilterOperators;\r\n        break;\r\n      case 'spatial':\r\n        effectiveOperators = {\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n        break;\r\n      case 'basicandspatial':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n        break;\r\n      case 'basic':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] }\r\n        };\r\n        break;\r\n      case 'basicnumeric':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsGreaterThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n        };\r\n        break;\r\n      default:\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n    }\r\n\r\n    this.ogcFilterOperators = effectiveOperators;\r\n  }\r\n\r\n  updateField() {\r\n    if (!this.datasource.options.sourceFields) {\r\n      return;\r\n    }\r\n    this.fields = this.datasource.options.sourceFields\r\n    .filter(sf => (sf.excludeFromOgcFilters === undefined || !sf.excludeFromOgcFilters));\r\n    this.fields.filter(f => f.name === this.currentFilter.propertyName)\r\n      .forEach(element => {\r\n        this.values = element.values !== undefined ? element.values.sort() : [];\r\n      });\r\n  }\r\n\r\n  toggleFilterState(event, filter: OgcInterfaceFilterOptions, property) {\r\n    this.updateField();\r\n    if (event.checked) {\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = true;\r\n        });\r\n    } else {\r\n      this.removeOverlayByID(filter.filterid);\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = false;\r\n        });\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  deleteFilter(filter: OgcInterfaceFilterOptions) {\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    ogcFilters.interfaceOgcFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.filterid !== filter.filterid\r\n    );\r\n    this.removeOverlayByID(filter.filterid);\r\n\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeNumericProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.changeProperty(filter, property, parseFloat(value));\r\n    this.refreshFilters();\r\n  }\r\n\r\n  private removeOverlayByID(id) {\r\n    const overlayId = this.baseOverlayName + id;\r\n    if (this.map.overlay.dataSource.ol.getFeatureById(overlayId)) {\r\n      this.map.overlay.dataSource.ol.removeFeature(\r\n        this.map.overlay.dataSource.ol.getFeatureById(overlayId)\r\n      );\r\n    }\r\n  }\r\n\r\n  changeOperator(filter) {\r\n    if (this.ogcFilterOperators[filter.operator].spatial === false) {\r\n      this.removeOverlayByID(filter.filterid);\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        element[property] = value;\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeGeometry(filter, value?) {\r\n    const checkSNRC50k = /\\d{2,3}[a-l][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n    const mapProjection = this.map.projection;\r\n    this.removeOverlayByID(filter.filterid);\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        let wktPoly;\r\n        if (filter.igoSpatialSelector === 'snrc') {\r\n          if (value === '' && this.snrc !== '') {\r\n            wktPoly = this.wktService.snrcToWkt(this.snrc).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          } else if (\r\n            value !== '' &&\r\n            (checkSNRC1m.test(value) ||\r\n              checkSNRC250k.test(value) ||\r\n              checkSNRC50k.test(value))\r\n          ) {\r\n            wktPoly = this.wktService.snrcToWkt(value).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          }\r\n        } else if (filter.igoSpatialSelector === 'fixedExtent') {\r\n          wktPoly = this.wktService.extentToWkt(\r\n            mapProjection,\r\n            this.map.getExtent(),\r\n            mapProjection\r\n          ).wktPoly;\r\n          element.wkt_geometry = wktPoly;\r\n        }\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { OgcFilterableDataSource } from '../shared/ogc-filter.interface';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-form',\r\n  templateUrl: './ogc-filterable-form.component.html'\r\n})\r\nexport class OgcFilterableFormComponent {\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters;\r\n  }\r\n\r\n  get advancedOgcFilters(): boolean {\r\n    if (this.datasource.options.ogcFilters) {\r\n      return this.datasource.options.ogcFilters.advancedOgcFilters;\r\n    }\r\n    return;\r\n  }\r\n\r\n  public color = 'primary';\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DownloadService } from '../../download/shared/download.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { WFSDataSourceOptionsParams } from '../../datasource/shared/datasources/wfs-datasource.interface';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions,\r\n  OgcInterfaceFilterOptions\r\n} from '../shared/ogc-filter.interface';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterWriter } from '../shared/ogc-filter';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-item',\r\n  templateUrl: './ogc-filterable-item.component.html',\r\n  styleUrls: ['./ogc-filterable-item.component.scss']\r\n})\r\nexport class OgcFilterableItemComponent implements OnInit {\r\n  public color = 'primary';\r\n  private lastRunOgcFilter;\r\n  private defaultLogicalParent = 'And';\r\n  public hasActiveSpatialFilter = false;\r\n  public filtersAreEditable = true;\r\n  public filtersCollapsed = true;\r\n  public hasPushButton: boolean = false;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters.bind(this);\r\n  }\r\n\r\n  get datasource(): OgcFilterableDataSource {\r\n    return this.layer.dataSource as OgcFilterableDataSource;\r\n  }\r\n\r\n  @Input() ogcFiltersHeaderShown: boolean;\r\n\r\n  get downloadable() {\r\n    return (this.datasource.options as any).download;\r\n  }\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService,\r\n    private downloadService: DownloadService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const ogcFilters = this.datasource.options.ogcFilters;\r\n    if (\r\n      ogcFilters.pushButtons &&\r\n      ogcFilters.pushButtons.length > 0) {\r\n        if (ogcFilters.advancedOgcFilters === undefined) {\r\n          ogcFilters.advancedOgcFilters = false;\r\n        }\r\n        this.hasPushButton = true;\r\n      }\r\n\r\n    switch (this.datasource.options.type) {\r\n      case 'wms':\r\n        this.ogcFilterService.setOgcWMSFiltersOptions(this.datasource);\r\n        break;\r\n      case 'wfs':\r\n        this.ogcFilterService.setOgcWFSFiltersOptions(this.datasource);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (ogcFilters) {\r\n      if (ogcFilters.interfaceOgcFilters) {\r\n        this.lastRunOgcFilter = JSON.parse(\r\n          JSON.stringify(ogcFilters.interfaceOgcFilters)\r\n        );\r\n        if (\r\n          ogcFilters.interfaceOgcFilters.filter(\r\n            f => f.wkt_geometry\r\n          ).length >= 1\r\n        ) {\r\n          this.hasActiveSpatialFilter = true;\r\n        }\r\n      }\r\n\r\n      this.filtersAreEditable = ogcFilters.editable\r\n        ? ogcFilters.editable\r\n        : false;\r\n    }\r\n  }\r\n\r\n  addFilterToSequence() {\r\n    this.filtersCollapsed = false;\r\n    const interfaceOgcFilters: OgcInterfaceFilterOptions[] = this.datasource.options.ogcFilters.interfaceOgcFilters;\r\n    const arr = interfaceOgcFilters || [];\r\n    const lastLevel = arr.length === 0 ? 0 : arr[arr.length - 1].level;\r\n    let firstFieldName = '';\r\n    if (this.datasource.options.sourceFields.length > 0) {\r\n      firstFieldName =\r\n        this.datasource.options.sourceFields[0].name === undefined\r\n          ? ''\r\n          : this.datasource.options.sourceFields[0].name;\r\n    }\r\n    let fieldNameGeometry;\r\n    const datasourceOptions = this.datasource\r\n      .options as WFSDataSourceOptionsParams;\r\n    if (datasourceOptions.fieldNameGeometry) {\r\n      fieldNameGeometry = datasourceOptions.fieldNameGeometry;\r\n    } else if (\r\n      (this.datasource.options as any).paramsWFS &&\r\n      (this.datasource.options as any).paramsWFS.fieldNameGeometry\r\n    ) {\r\n      fieldNameGeometry = (this.datasource.options as any).paramsWFS\r\n        .fieldNameGeometry;\r\n    }\r\n    const status = arr.length === 0 ? true : false;\r\n    arr.push(\r\n      new OgcFilterWriter().addInterfaceFilter(\r\n        {\r\n          propertyName: firstFieldName,\r\n          operator: 'PropertyIsEqualTo',\r\n          active: status,\r\n          igoSpatialSelector: 'fixedExtent'\r\n        } as OgcInterfaceFilterOptions,\r\n        fieldNameGeometry,\r\n        lastLevel,\r\n        this.defaultLogicalParent\r\n      )\r\n    );\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters = arr;\r\n  }\r\n\r\n  openDownload() {\r\n    this.downloadService.open(this.layer);\r\n  }\r\n\r\n  refreshFilters(force?: boolean) {\r\n    if (force === true) {\r\n      this.lastRunOgcFilter = undefined;\r\n    }\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    const activeFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n    if (activeFilters.length === 0) {\r\n      ogcFilters.filters = undefined;\r\n      ogcFilters.filtered = false;\r\n    }\r\n    if (activeFilters.length > 1) {\r\n      activeFilters[0].parentLogical = activeFilters[1].parentLogical;\r\n    }\r\n    if (\r\n      activeFilters.filter(\r\n        af => ['Contains', 'Intersects', 'Within'].indexOf(af.operator) !== -1\r\n      ).length === 0\r\n    ) {\r\n      this.hasActiveSpatialFilter = false;\r\n    } else {\r\n      this.hasActiveSpatialFilter = true;\r\n    }\r\n\r\n    if (\r\n      !(JSON.stringify(this.lastRunOgcFilter) === JSON.stringify(activeFilters))\r\n    ) {\r\n      if (this.layer.dataSource.options.type === 'wfs') {\r\n        const ogcDataSource: any = this.layer.dataSource;\r\n        const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n        ogcLayer.filters = ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(\r\n          activeFilters\r\n        );\r\n        this.layer.dataSource.ol.clear();\r\n      } else if (\r\n        this.layer.dataSource.options.type === 'wms' &&\r\n        ogcFilters.enabled\r\n      ) {\r\n        let rebuildFilter = '';\r\n        if (activeFilters.length >= 1) {\r\n          const ogcDataSource: any = this.layer.dataSource;\r\n          const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n          ogcLayer.filters = ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(\r\n            activeFilters\r\n          );\r\n          rebuildFilter = ogcFilterWriter.buildFilter(\r\n            ogcLayer.filters,\r\n            undefined,\r\n            undefined,\r\n            (this.layer.dataSource.options as any).fieldNameGeometry\r\n          );\r\n        }\r\n        this.ogcFilterService.filterByOgc(\r\n          this.datasource as WMSDataSource,\r\n          rebuildFilter\r\n        );\r\n        this.datasource.options.ogcFilters.filtered =\r\n          activeFilters.length === 0 ? false : true;\r\n      }\r\n\r\n      this.lastRunOgcFilter = JSON.parse(JSON.stringify(activeFilters));\r\n    } else {\r\n      // identical filter. Nothing triggered\r\n    }\r\n  }\r\n\r\n  public setVisible() {\r\n    this.layer.visible = true;\r\n  }\r\n\r\n  public isAdvancedOgcFilters(): boolean {\r\n    return this.datasource.options.ogcFilters.advancedOgcFilters;\r\n  }\r\n\r\n  public addFilterDisabled(): boolean {\r\n    return (!this.datasource.options.sourceFields ||Â this.datasource.options.sourceFields.length === 0);\r\n  }\r\n\r\n  private changeOgcFiltersAdvancedOgcFilters(value: boolean) {\r\n    this.datasource.options.ogcFilters.advancedOgcFilters = value;\r\n  }\r\n\r\n  changeOgcFilterType(isAdvancedOgcFilters) {\r\n    this.changeOgcFiltersAdvancedOgcFilters(isAdvancedOgcFilters.checked);\r\n    if (isAdvancedOgcFilters.checked) {\r\n      this.refreshFilters(true);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-list',\r\n  templateUrl: './ogc-filterable-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterableListComponent {\r\n\r\n  @Input() layers: Layer[];\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  constructor() {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoOgcFilterableListBinding]'\r\n})\r\nexport class OgcFilterableListBindingDirective implements OnInit, OnDestroy {\r\n  private component: OgcFilterableListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: OgcFilterableListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterableDataSourceOptions } from '../shared/ogc-filter.interface';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-button',\r\n  templateUrl: './ogc-filter-button.component.html',\r\n  styleUrls: ['./ogc-filter-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterButtonComponent {\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string = 'primary';\r\n\r\n  @Input() ogcFiltersInLayers: boolean;\r\n\r\n  get options(): OgcFilterableDataSourceOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n\r\n  public ogcFilterCollapse = false;\r\n\r\n  constructor() {}\r\n\r\n  toggleOgcFilter() {\r\n    if (this.layer.isInResolutionsRange) {\r\n      this.ogcFilterCollapse = !this.ogcFilterCollapse;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  IgoOgcFilterObject,\r\n  OgcPushButton,\r\n  OgcPushButtonBundle\r\n\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { IgoMap } from '../../map';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-toggle-button',\r\n  templateUrl: './ogc-filter-toggle-button.component.html',\r\n  styleUrls: ['./ogc-filter-toggle-button.component.scss']\r\n})\r\nexport class OgcFilterToggleButtonComponent implements OnInit {\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  private ogcFilterWriter: OgcFilterWriter;\r\n  public color = 'primary';\r\n  public pushButtonBundle: OgcPushButtonBundle[] = [];\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService\r\n  ) {\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.datasource.options.ogcFilters &&\r\n      this.datasource.options.ogcFilters.pushButtons) {\r\n        this.pushButtonBundle = this.datasource.options.ogcFilters.pushButtons as OgcPushButtonBundle[];\r\n    }\r\n    this.applyFilters();\r\n\r\n  }\r\n\r\n  getToolTip(pb: OgcPushButton): string  {\r\n    let tt;\r\n    if (pb.tooltip) {\r\n      tt = pb.tooltip;\r\n    }\r\n    return tt || '';\r\n  }\r\n\r\n  getButtonColor(pb: OgcPushButton): {} {\r\n\r\n    let styles;\r\n    if (pb.color) {\r\n      styles = {\r\n        'background-color': pb.enabled ? `rgba(${pb.color})` : `rgba(255,255,255,0)`,\r\n\r\n      };\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  bundleIsVertical(bundle: OgcPushButtonBundle): boolean {\r\n    return bundle.vertical ? bundle.vertical : false;\r\n  }\r\n\r\n  applyFilters(currentOgcPushButton?: OgcPushButton) {\r\n    if (currentOgcPushButton) {\r\n      currentOgcPushButton.enabled = !currentOgcPushButton.enabled;\r\n    }\r\n    let filterQueryString = '';\r\n    const conditions = [];\r\n    this.pushButtonBundle.map(buttonBundle => {\r\n      const bundleCondition = [];\r\n      buttonBundle.ogcPushButtons\r\n      .filter(ogcpb => ogcpb.enabled === true)\r\n      .forEach(enabledPb => bundleCondition.push(enabledPb.filters));\r\n      if (bundleCondition.length >= 1 ) {\r\n        if (bundleCondition.length === 1) {\r\n          conditions.push(bundleCondition[0]);\r\n        } else {\r\n          conditions.push({logical: buttonBundle.logical, filters: bundleCondition});\r\n        }\r\n      }\r\n    });\r\n    if (conditions.length >= 1) {\r\n      filterQueryString = this.ogcFilterWriter\r\n        .buildFilter(conditions.length === 1 ?\r\n          conditions[0] : {logical: 'And', filters: conditions } as IgoOgcFilterObject);\r\n    }\r\n    if (this.datasource.options.type === 'wms') {\r\n      this.ogcFilterService.filterByOgc(this.datasource as WMSDataSource, filterQueryString );\r\n    }\r\n    if (this.datasource.options.type === 'wfs') {\r\n      // TODO: Check how to prevent wfs to refresh when filter icon is pushed...\r\n      this.datasource.ol.clear();\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MAT_DATE_LOCALE,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\n// import {\r\n//   MatDatetimepickerModule,\r\n//   MatNativeDatetimeModule\r\n// } from '@mat-datetimepicker/core';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule,\r\n  IgoKeyValueModule\r\n} from '@igo2/common';\r\n\r\nimport { FilterableDataSourcePipe } from './shared/filterable-datasource.pipe';\r\nimport { TimeFilterFormComponent } from './time-filter-form/time-filter-form.component';\r\nimport { TimeFilterItemComponent } from './time-filter-item/time-filter-item.component';\r\nimport { TimeFilterListBindingDirective } from './time-filter-list/time-filter-list-binding.directive';\r\nimport { TimeFilterListComponent } from './time-filter-list/time-filter-list.component';\r\nimport { TimeFilterService } from './shared/time-filter.service';\r\n\r\nimport { OgcFilterFormComponent } from './ogc-filter-form/ogc-filter-form.component';\r\nimport { OgcFilterableFormComponent } from './ogc-filterable-form/ogc-filterable-form.component';\r\nimport { OgcFilterableItemComponent } from './ogc-filterable-item/ogc-filterable-item.component';\r\nimport { OgcFilterableListBindingDirective } from './ogc-filterable-list/ogc-filterable-list-binding.directive';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list/ogc-filterable-list.component';\r\nimport { OgcFilterButtonComponent } from './ogc-filter-button/ogc-filter-button.component';\r\nimport { OGCFilterService } from './shared/ogc-filter.service';\r\nimport { OgcFilterToggleButtonComponent } from './ogc-filter-toggle-button/ogc-filter-toggle-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCheckboxModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    // MatDatetimepickerModule,\r\n    // MatNativeDatetimeModule,\r\n    IgoLanguageModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterToggleButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective\r\n  ],\r\n  declarations: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterToggleButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective\r\n  ],\r\n  providers: [TimeFilterService, OGCFilterService]\r\n})\r\nexport class IgoFilterModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoFilterModule,\r\n      providers: [\r\n        {\r\n          provide: MAT_DATE_LOCALE,\r\n          useValue: 'fr'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport { Style as OlStyle } from 'ol/style';\r\n\r\nimport { FormFieldComponent } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map.\r\n */\r\n@FormFieldComponent('geometry')\r\n@Component({\r\n  selector: 'igo-geometry-form-field',\r\n  templateUrl: './geometry-form-field.component.html',\r\n  styleUrls: ['./geometry-form-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldComponent implements OnInit, OnDestroy {\r\n\r\n  geometryType$: BehaviorSubject<OlGeometryType> = new BehaviorSubject(undefined);\r\n  drawGuide$: BehaviorSubject<number> = new BehaviorSubject(0);\r\n  value$: BehaviorSubject<GeoJSONGeometry> = new BehaviorSubject(undefined);\r\n\r\n  private value$$: Subscription;\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The geometry type\r\n   */\r\n  @Input() geometryType: OlGeometryType;\r\n\r\n  /**\r\n   * Whether a geometry type toggle should be displayed\r\n   */\r\n  @Input() geometryTypeField: boolean = false;\r\n\r\n  /**\r\n   * Available geometry types\r\n   */\r\n  @Input() geometryTypes: string[] = ['Point', 'LineString', 'Polygon'];\r\n\r\n  /**\r\n   * Whether a draw guide field should be displayed\r\n   */\r\n  @Input() drawGuideField: boolean = false;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input() drawGuide: number = null;\r\n\r\n  /**\r\n   * Draw guide placeholder\r\n   */\r\n  @Input() drawGuidePlaceholder: string = '';\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * Style for the draw control (applies while the geometry is being drawn)\r\n   */\r\n  @Input() drawStyle: OlStyle;\r\n\r\n  /**\r\n   * Style for the overlay layer (applies once the geometry is added to the map)\r\n   * If not specified, drawStyle applies\r\n   */\r\n  @Input() overlayStyle: OlStyle;\r\n\r\n  /**\r\n   * The geometry type model\r\n   */\r\n  set geometryTypeModel(value: OlGeometryType) {this.geometryType$.next(value); }\r\n  get geometryTypeModel(): OlGeometryType { return this.geometryType$.value; }\r\n\r\n  /**\r\n   * The draw guide model\r\n   */\r\n  set drawGuideModel(value: number) {this.drawGuide$.next(value); }\r\n  get drawGuideModel(): number { return this.drawGuide$.value; }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Set up a value stream\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.geometryType$.next(this.geometryType);\r\n    this.drawGuide$.next(this.drawGuide);\r\n    this.value$.next(this.formControl.value ? this.formControl.value : undefined);\r\n    this.value$$ = this.formControl.valueChanges.subscribe((value: GeoJSONGeometry) => {\r\n      this.value$.next(value ? value : undefined);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the value stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.value$$.unsubscribe();\r\n  }\r\n\r\n  onGeometryTypeChange(geometryType: OlGeometryType) {\r\n    if (this.value$.value !== undefined) {\r\n      return;\r\n    }\r\n    this.geometryType$.next(geometryType);\r\n  }\r\n\r\n  onDrawGuideChange(value: number) {\r\n    this.drawGuide$.next(value);\r\n  }\r\n}\r\n","\r\nexport const MEASURE_UNIT_AUTO = 'auto';\r\n\r\nexport enum MeasureType {\r\n  Length = 'length',\r\n  Area = 'area'\r\n}\r\n\r\nexport enum MeasureLengthUnit {\r\n  Meters = 'meters',\r\n  Kilometers = 'kilometers',\r\n  Miles = 'miles',\r\n  Feet = 'feet'\r\n}\r\n\r\nexport const MeasureLengthUnitAbbreviation = {\r\n  [MeasureLengthUnit.Meters]: 'm',\r\n  [MeasureLengthUnit.Kilometers]: 'km',\r\n  [MeasureLengthUnit.Miles]: 'mi',\r\n  [MeasureLengthUnit.Feet]: 'ft'\r\n};\r\n\r\nexport enum MeasureAreaUnit {\r\n  SquareMeters = 'squareMeters',\r\n  SquareKilometers = 'squareKilometers',\r\n  SquareMiles = 'squareMiles',\r\n  SquareFeet = 'squareFeet',\r\n  Hectares = 'hectares',\r\n  Acres = 'acres'\r\n}\r\n\r\nexport const MeasureAreaUnitAbbreviation = {\r\n  [MeasureAreaUnit.SquareMeters]: 'mÂ²',\r\n  [MeasureAreaUnit.SquareKilometers]: 'kmÂ²',\r\n  [MeasureAreaUnit.SquareMiles]: 'miÂ²',\r\n  [MeasureAreaUnit.SquareFeet]: 'ftÂ²',\r\n  [MeasureAreaUnit.Hectares]: 'ha',\r\n  [MeasureAreaUnit.Acres]: 'ac'\r\n};\r\n","import * as olstyle from 'ol/style';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlPoint from 'ol/geom/Point';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { getCenter as olGetCenter } from 'ol/extent';\r\nimport {\r\n  getLength as olGetLength,\r\n  getArea as olGetArea\r\n} from 'ol/sphere';\r\n\r\nimport { Measure } from './measure.interfaces';\r\nimport {\r\n  MeasureAreaUnit,\r\n  MeasureAreaUnitAbbreviation,\r\n  MeasureLengthUnit,\r\n  MeasureLengthUnitAbbreviation\r\n} from './measure.enum';\r\n\r\n/**\r\n * Convert value from meters to kilometers\r\n * @param value Value in meters\r\n * @returns Value in kilometers\r\n */\r\nexport function metersToKilometers(value: number): number {\r\n  return value * 0.001;\r\n}\r\n\r\n/**\r\n * Convert value from meters to feet\r\n * @param value Value in meters\r\n * @returns Value in feet\r\n */\r\nexport function metersToFeet(value: number): number {\r\n  return value * 3.2808;\r\n}\r\n\r\n/**\r\n * Convert value from meters to miles\r\n * @param value Value in meters\r\n * @returns Value in miles\r\n */\r\nexport function metersToMiles(value: number): number {\r\n  return value * 0.000621;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square kilometers\r\n * @param value Value in square meters\r\n * @returns Value in square kilometers\r\n */\r\nexport function squareMetersToSquareKilometers(value: number): number {\r\n  return value * 0.000001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square miles\r\n * @param value Value in square meters\r\n * @returns Value in square miles\r\n */\r\nexport function squareMetersToSquareMiles(value: number): number {\r\n  return value * 0.0000003861;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square feet\r\n * @param value Value in square meters\r\n * @returns Value in square feet\r\n */\r\nexport function squareMetersToSquareFeet(value: number): number {\r\n  return value * 10.764;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to hectares\r\n * @param value Value in square meters\r\n * @returns Value in hectares\r\n */\r\nexport function squareMetersToHectares(value: number): number {\r\n  return value * 0.0001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to acres\r\n * @param value Value in square meters\r\n * @returns Value in acres\r\n */\r\nexport function squareMetersToAcres(value: number): number {\r\n  return value * 0.00024711;\r\n}\r\n\r\n/**\r\n * Convert value from meters to the specified length unit\r\n * @param value Value in meters\r\n * @param unit Length unit\r\n * @returns Value in unit\r\n */\r\nexport function metersToUnit(value: number, unit: MeasureLengthUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureLengthUnit.Meters, (val: number) => val],\r\n    [MeasureLengthUnit.Kilometers, metersToKilometers],\r\n    [MeasureLengthUnit.Miles, metersToMiles],\r\n    [MeasureLengthUnit.Feet, metersToFeet],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to the specified area unit\r\n * @param value Value in meters\r\n * @param unit Area unit\r\n * @returns Value in unit\r\n */\r\nexport function squareMetersToUnit(value: number, unit: MeasureAreaUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureAreaUnit.SquareMeters, (val: number) => val],\r\n    [MeasureAreaUnit.SquareKilometers, squareMetersToSquareKilometers],\r\n    [MeasureAreaUnit.SquareMiles, squareMetersToSquareMiles],\r\n    [MeasureAreaUnit.SquareFeet, squareMetersToSquareFeet],\r\n    [MeasureAreaUnit.Hectares, squareMetersToHectares],\r\n    [MeasureAreaUnit.Acres, squareMetersToAcres],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * This method format a measure to a readable format\r\n * @param measure Measure\r\n * @param options Formatting options\r\n * @returns Formatted measure\r\n */\r\nexport function formatMeasure(measure: number, options?: {\r\n  decimal?: number;\r\n  unit?: MeasureAreaUnit | MeasureLengthUnit;\r\n  unitAbbr?: boolean;\r\n  locale?: string;\r\n}) {\r\n  let decimal = options.decimal;\r\n  if (decimal === undefined || decimal < 0) {\r\n    decimal = 1;\r\n  }\r\n\r\n  const parts = [];\r\n  if (options.locale !== undefined) {\r\n    parts.push(measure.toLocaleString(options.locale, {\r\n      minimumFractionDigits: decimal,\r\n      maximumFractionDigits: decimal\r\n    }));\r\n  } else {\r\n    parts.push(measure.toFixed(decimal).toString());\r\n  }\r\n\r\n  if (options.unit !== undefined && options.unitAbbr === true) {\r\n    parts.push(\r\n      MeasureLengthUnitAbbreviation[options.unit] ||\r\n      MeasureAreaUnitAbbreviation[options.unit]\r\n    );\r\n  }\r\n\r\n  return parts.filter(p => p !== undefined).join(' ');\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestLengthUnit(value: number): MeasureLengthUnit {\r\n  let unit = MeasureLengthUnit.Meters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureLengthUnit.Kilometers];\r\n  while (converted > 1000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = metersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in square meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestAreaUnit(value: number): MeasureAreaUnit {\r\n  let unit = MeasureAreaUnit.SquareMeters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureAreaUnit.SquareKilometers];\r\n  while (converted > 1000000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = squareMetersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Create a default style for a measure interaction\r\n * @returns OL style\r\n */\r\nexport function createMeasureInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      lineDash: [10, 10],\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke: new olstyle.Stroke({\r\n        color: '#ffcc33',\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: 'rgba(255, 255, 255, 0.2)'\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for a measure layer\r\n * @returns OL style\r\n */\r\nexport function createMeasureLayerStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Compute the length in meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Length in meters\r\n */\r\nexport function measureOlGeometryLength(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetLength(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area in square meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Area in square meters\r\n */\r\nexport function measureOlGeometryArea(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint || olGeometry instanceof OlLineString) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetArea(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area (square meters), length (meters) and last length (meters)\r\n * of an OL geometry with a given projection.\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Computed measure\r\n */\r\nexport function measureOlGeometry(olGeometry: OlGeometry, projection: string): Measure {\r\n  const length = measureOlGeometryLength(olGeometry, projection);\r\n  const area = measureOlGeometryArea(olGeometry, projection);\r\n\r\n  const lengths = [];\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const coordinatesLength = coordinates.length;\r\n  for (let i = 0; i <= coordinatesLength - 4; i += 2) {\r\n    const olSegment = new OlLineString([\r\n      [coordinates[i], coordinates[i + 1]],\r\n      [coordinates[i + 2], coordinates[i + 3]]\r\n    ]);\r\n\r\n    lengths.push(measureOlGeometryLength(olSegment, projection));\r\n  }\r\n\r\n  return {\r\n    area,\r\n    length,\r\n    lengths\r\n  };\r\n}\r\n\r\n/**\r\n * Update an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nexport function updateOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n\r\n  // TODO: handle multi geometries\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const j = i * 2;\r\n    const olSegment = new OlLineString([\r\n      [coordinates[j], coordinates[j + 1]],\r\n      [coordinates[j + 2], coordinates[j + 3]]\r\n    ]);\r\n\r\n    const midpointCoordinate = olSegment.getCoordinateAt(0.5);\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      olMidpoint.setCoordinates(midpointCoordinate);\r\n    } else {\r\n      olMidpoints[i] = new OlPoint(midpointCoordinate);\r\n    }\r\n  }\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Clear an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n */\r\nexport function clearOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon) {\r\n  const olMidpoints = olGeometry.get('_midpoints') || [];\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      if (olMidpoint !== undefined) {\r\n        clearOlMidpointTooltip(olMidpoint);\r\n      }\r\n    }\r\n  }\r\n\r\n  olGeometry.set('_midpoints', undefined, true);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Return an array of  OL geometry midpoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nfunction getOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const expectedNumber = Math.max((olGeometry.flatCoordinates.length / 2) - 1, 0);\r\n\r\n  // TODO: This works but it's quite messy. If time permits,\r\n  // clean this. Maybe a Tooltip class could handle that\r\n  let olMidpoints = olGeometry.get('_midpoints');\r\n  if (olMidpoints === undefined) {\r\n    olMidpoints = new Array(expectedNumber);\r\n    olGeometry.set('_midpoints', olMidpoints, true);\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber === olMidpoints.length) {\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber > olMidpoints.length) {\r\n    olMidpoints.push(...new Array(expectedNumber - olMidpoints.length));\r\n    return olMidpoints;\r\n  }\r\n\r\n  for (let i = expectedNumber; i < olMidpoints.length; i++) {\r\n    const olMidpoint = olMidpoints[expectedNumber];\r\n    if (olMidpoint !== undefined) {\r\n      clearOlMidpointTooltip(olMidpoint);\r\n    }\r\n  }\r\n  olMidpoints.splice(expectedNumber);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Remove an OL midpoint's tooltip from the map\r\n * @param olMidpoint OL Point\r\n */\r\nfunction clearOlMidpointTooltip(olMidpoint: OlPoint) {\r\n  const olTooltip = olMidpoint.get('_tooltip');\r\n  if (olTooltip !== undefined) {\r\n    const olMap = olTooltip.getMap();\r\n    if (olMap !== undefined) {\r\n      olMap.removeOverlay(olTooltip);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add an OL overlay at each midpoint and return an array of those overlays\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function updateOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n  const olTooltips = olMidpoints.map((olMidpoint: OlPoint) => {\r\n    let olTooltip = olMidpoint.get('_tooltip');\r\n    if (olTooltip === undefined) {\r\n      olTooltip = createOlTooltipAtPoint(olMidpoint);\r\n    } else {\r\n      olTooltip.setPosition(olMidpoint.flatCoordinates);\r\n    }\r\n    return olTooltip;\r\n  });\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n  return olMidpoints.map((olMidpoint: OlPoint) => {\r\n    return olMidpoint ? olMidpoint.get('_tooltip') : undefined;\r\n  });\r\n}\r\n\r\n/**\r\n * Update an OL geometry center and return it\r\n * @param olGeometry OL Geometry\r\n * @returns OL point\r\n */\r\nexport function updateOlGeometryCenter(olGeometry: OlLineString | OlPolygon): OlPoint {\r\n  let olCenter = olGeometry.get('_center');\r\n  const centerCoordinate = olGetCenter(olGeometry.getExtent());\r\n  if (olCenter !== undefined) {\r\n    olCenter.setCoordinates(centerCoordinate);\r\n  } else {\r\n    olCenter = new OlPoint(centerCoordinate);\r\n    olGeometry.set('_center', olCenter);\r\n  }\r\n\r\n  return olCenter;\r\n}\r\n\r\n/**\r\n * Add an OL overlay at the center of a geometry and return that overlay\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlay\r\n */\r\nexport function updateOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = updateOlGeometryCenter(olGeometry);\r\n  let olTooltip = olCenter.get('_tooltip');\r\n  if (olTooltip === undefined) {\r\n    olTooltip = createOlTooltipAtPoint(olCenter);\r\n  } else {\r\n    olTooltip.setPosition(olCenter.flatCoordinates);\r\n  }\r\n  return olTooltip;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = olGeometry.get('_center');\r\n  return olCenter ? olCenter.get('_tooltip') : undefined;\r\n}\r\n\r\n/**\r\n * Get all the tooltips of an OL geometry\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olTooltips = [].concat(getOlTooltipsAtMidpoints(olGeometry) || []);\r\n  const olCenterTooltip = getOlTooltipAtCenter(olGeometry);\r\n  if (olCenterTooltip !== undefined) {\r\n    olTooltips.push(olCenterTooltip);\r\n  }\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Create an OL overlay at a point and bind the overlay to the point\r\n * @param olPoint OL Point\r\n * @returns OL overlay\r\n */\r\nexport function createOlTooltipAtPoint(olPoint: OlPoint): OlOverlay {\r\n  const olTooltip = new OlOverlay({\r\n    element: document.createElement('div'),\r\n    offset: [-30, -10],\r\n    className: [\r\n      'igo-map-tooltip',\r\n      'igo-map-tooltip-measure'\r\n    ].join(' '),\r\n    stopEvent: false\r\n  });\r\n  olTooltip.setPosition(olPoint.flatCoordinates);\r\n  olPoint.set('_tooltip', olTooltip);\r\n\r\n  return olTooltip;\r\n}\r\n","/* tslint:disable */\r\n// See this issue: https://github.com/Microsoft/TypeScript/issues/13965\r\n// And the solution: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n// for an explanation as to why the prototype is set manually\r\n/* tslint:enable */\r\n\r\nexport class GeometrySliceError extends Error {}\r\n\r\nexport class GeometrySliceMultiPolygonError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice a MultiPolygon.');\r\n    Object.setPrototypeOf(this, GeometrySliceMultiPolygonError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceLineStringError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice with a line that has more than 2 points.');\r\n    Object.setPrototypeOf(this, GeometrySliceLineStringError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceTooManyIntersectionError extends GeometrySliceError {\r\n  constructor() {\r\n    super('More than 2 intersections found between the target polygon and the slicing line.');\r\n    Object.setPrototypeOf(this, GeometrySliceTooManyIntersectionError.prototype);\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport lineIntersect from '@turf/line-intersect';\r\nimport { lineString } from '@turf/helpers';\r\n\r\nimport {\r\n  GeometrySliceMultiPolygonError,\r\n  GeometrySliceLineStringError,\r\n  GeometrySliceTooManyIntersectionError\r\n } from './geometry.errors';\r\n\r\n/**\r\n * Create a default style for draw and modify interactions\r\n * @param color Style color (R, G, B)\r\n * @returns OL style\r\n */\r\nexport function createDrawInteractionStyle(color?: [number, number, number]): olstyle.Style {\r\n  color = color || [0, 153, 255];\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: color.concat([1]),\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: color.concat([0.2])\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 8,\r\n      stroke: new olstyle.Stroke({\r\n        color: color.concat([1])\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: color.concat([0.2])\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for drawing a hole\r\n * @returns OL style\r\n */\r\nexport function createDrawHoleInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color:  [0, 153, 255, 1],\r\n      width: 2\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Slice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function sliceOlGeometry(\r\n  olGeometry: OlLineString | OlPolygon,\r\n  olSlicer: OlLineString\r\n): Array<OlLineString | OlPolygon> {\r\n  if (olGeometry instanceof OlPolygon) {\r\n    return sliceOlPolygon(olGeometry, olSlicer);\r\n  } else if (olGeometry instanceof OlLineString) {\r\n    return sliceOlLineString(olGeometry, olSlicer);\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL LineString into one or more lines\r\n * @param olLineString OL line string\r\n * @param olSlicer Slicing line\r\n * @returns New OL line strings\r\n */\r\nexport function sliceOlLineString(olLineString: OlLineString, olSlicer: OlLineString): OlLineString[] {\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL Polygon into one or more polygons\r\n * @param olPolygon OL polygon\r\n * @param olSlicer Slicing line\r\n * @returns New OL polygons\r\n */\r\nexport function sliceOlPolygon(olPolygon: OlPolygon, olSlicer: OlLineString): OlPolygon[] {\r\n  if (olPolygon.getLinearRingCount() > 1) {\r\n    throw new GeometrySliceMultiPolygonError();\r\n  }\r\n\r\n  if (olSlicer.getCoordinates().length > 2) {\r\n    throw new GeometrySliceLineStringError();\r\n  }\r\n\r\n  const olGeoJSON = new OlGeoJSON();\r\n  const slicer = olGeoJSON.writeGeometryObject(olSlicer);\r\n  const outerCoordinates = olPolygon.getLinearRing(0).getCoordinates();\r\n\r\n  const parts = [[], []];\r\n  let totalIntersectionCount = 0;\r\n  for (let i = 0, ii = outerCoordinates.length - 1; i < ii; i++) {\r\n    const segmentCoordinates = [outerCoordinates[i], outerCoordinates[i + 1]];\r\n    const segment = lineString(segmentCoordinates);\r\n    const intersections = lineIntersect(segment, slicer).features;\r\n\r\n    const intersectionCount = intersections.length;\r\n    totalIntersectionCount += intersectionCount;\r\n    if (intersectionCount > 1 || totalIntersectionCount > 2) {\r\n      throw new GeometrySliceTooManyIntersectionError();\r\n    }\r\n\r\n    parts[0].push(segmentCoordinates[0]);\r\n    if (intersectionCount === 1) {\r\n      const intersection = intersections[0].geometry.coordinates;\r\n      parts[0].push(intersection);\r\n      parts[1].push(intersection);\r\n      parts.reverse();\r\n    }\r\n  }\r\n\r\n  if (totalIntersectionCount <= 1) {\r\n    return [];\r\n  }\r\n\r\n  parts[0].push(parts[0][0]);\r\n  parts[1].push(parts[1][0]);\r\n\r\n  return [new OlPolygon([parts[0]]), new OlPolygon([parts[1]])];\r\n}\r\n\r\n/**\r\n * Splice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function addLinearRingToOlPolygon(olPolygon: OlPolygon, olLinearRing: OlLinearRing ): OlPolygon {\r\n  // TODO: make some validation and support updating an existing linear ring\r\n  olPolygon.appendLinearRing(olLinearRing);\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { MapBrowserEvent as OlMapBrowserEvent } from 'ol/MapBrowserEvent';\r\nimport { shiftKeyOnly } from 'ol/events/condition';\r\n\r\nimport { Subject, Subscription, fromEvent } from 'rxjs';\r\n\r\nexport interface DrawControlOptions {\r\n  geometryType: OlGeometryType;\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  maxPoints?: number;\r\n}\r\n\r\n/**\r\n * Control to draw geometries\r\n */\r\nexport class DrawControl {\r\n\r\n  /**\r\n   * Draw start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Draw end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olDrawInteraction: OlDraw;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onChangesKey: string;\r\n\r\n  private keyDown$$: Subscription;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Geometry type\r\n   * @internal\r\n   */\r\n  get geometryType(): OlGeometryType {\r\n    return this.options.geometryType;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: DrawControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  private addOlDrawInteraction() {\r\n    const olDrawInteraction = new OlDraw({\r\n      type: this.geometryType,\r\n      source: this.getSource(),\r\n      stopClick: true,\r\n      style: this.options.drawStyle,\r\n      maxPoints: this.options.maxPoints,\r\n      freehand: false,\r\n      freehandCondition: () => false\r\n    });\r\n\r\n    this.onDrawStartKey = olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(olDrawInteraction);\r\n    this.olDrawInteraction = olDrawInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * When drawing starts, clear the overlay and start watching from changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.clearOlInnerOverlaySource();\r\n    this.onChangesKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, update the geometry observable and start watching from changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    this.unsubscribeToKeyDown();\r\n    if (this.onChangesKey !== undefined) {\r\n      unByKey(this.onChangesKey);\r\n    }\r\n    this.end$.next(event.feature.getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.unsubscribeToKeyDown();\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      // On ESC key down, remove the last vertex\r\n      if (event.keyCode === 27) {\r\n        this.olDrawInteraction.removeLastPoint();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n      this.keyDown$$ = undefined;\r\n    }\r\n  }\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlModify from 'ol/interaction/Modify';\r\nimport OlTranslate from 'ol/interaction/Translate';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlInteraction from 'ol/interaction/Interaction';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserEvent as OlMapBrowserEvent } from 'ol/MapBrowserEvent';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { ModifyEvent as OlModifyEvent } from 'ol/interaction/Modify';\r\nimport { TranslateEvent as OlTranslateEvent } from 'ol/interaction/Translate';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subject, Subscription, fromEvent } from 'rxjs';\r\n\r\nimport { addLinearRingToOlPolygon, createDrawHoleInteractionStyle } from '../geometry.utils';\r\n\r\nexport interface ModifyControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class ModifyControl {\r\n\r\n  /**\r\n   * Modify start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Modify end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olModifyInteraction: OlModify;\r\n  private onModifyStartKey: string;\r\n  private onModifyEndKey: string;\r\n  private onModifyKey: string;\r\n  private olModifyInteractionIsActive: boolean = false;\r\n  private olTranslateInteraction: OlTranslate;\r\n  private onTranslateStartKey: string;\r\n  private onTranslateEndKey: string;\r\n  private onTranslateKey: string;\r\n  private olTranslateInteractionIsActive: boolean = false;\r\n  private olDrawInteraction: OlTranslate;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onDrawKey: string;\r\n  private olDrawInteractionIsActive: boolean = false;\r\n\r\n  private keyDown$$: Subscription;\r\n  private drawKeyUp$$: Subscription;\r\n  private drawKeyDown$$: Subscription;\r\n\r\n  private removedOlInteractions: OlInteraction[] = [];\r\n  private olLinearRingsLayer: OlVectorLayer;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  /**\r\n   * OL linear rings source\r\n   * @internal\r\n   */\r\n  get olLinearRingsSource(): OlVectorSource {\r\n    return this.olLinearRingsLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: ModifyControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n    this.olLinearRingsLayer = this.createOlLinearRingsLayer();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlModifyInteraction();\r\n      this.removeOlTranslateInteraction();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n    this.addOlTranslateInteraction();\r\n    this.activateTranslateInteraction();\r\n    this.addOlModifyInteraction();\r\n    this.activateModifyInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay and start modifying it\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  private createOlLinearRingsLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      style: createDrawHoleInteractionStyle(),\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the linear rings layer\r\n   */\r\n  private addOlLinearRingsLayer() {\r\n    this.olMap.addLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings layer\r\n   */\r\n  private removeOlLinearRingsLayer() {\r\n    this.olMap.removeLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings source\r\n   */\r\n  private clearOlLinearRingsSource() {\r\n    this.olLinearRingsSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Add a modify interaction to the map an set up some listeners\r\n   */\r\n  private addOlModifyInteraction() {\r\n    const olModifyInteraction = new OlModify({\r\n      source: this.olOverlaySource,\r\n      style: this.options.drawStyle\r\n    });\r\n    this.olModifyInteraction = olModifyInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the modify interaction\r\n   */\r\n  private removeOlModifyInteraction() {\r\n    if (this.olModifyInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateModifyInteraction();\r\n    this.olModifyInteraction = undefined;\r\n  }\r\n\r\n  private activateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = true;\r\n    this.onModifyStartKey = this.olModifyInteraction\r\n      .on('modifystart', (event: OlModifyEvent) => this.onModifyStart(event));\r\n    this.onModifyEndKey = this.olModifyInteraction\r\n      .on('modifyend', (event: OlModifyEvent) => this.onModifyEnd(event));\r\n    this.olMap.addInteraction(this.olModifyInteraction);\r\n  }\r\n\r\n  private deactivateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = false;\r\n    unByKey(this.onModifyStartKey);\r\n    unByKey(this.onModifyEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olModifyInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When modifying starts, clear the overlay and start watching for changes\r\n   * @param event Modify start event\r\n   */\r\n  private onModifyStart(event: OlModifyEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onModifyKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When modifying ends, update the geometry observable and stop watching for changes\r\n   * @param event Modify end event\r\n   */\r\n  private onModifyEnd(event: OlModifyEvent) {\r\n    if (this.onModifyKey !== undefined) {\r\n      unByKey(this.onModifyKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      // On ESC key down, remove the last vertex\r\n      if (event.keyCode === 27 && this.olDrawInteractionIsActive === true) {\r\n        this.olDrawInteraction.removeLastPoint();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a translate interaction to the map an set up some listeners\r\n   */\r\n  private addOlTranslateInteraction() {\r\n    const olTranslateInteraction = new OlTranslate({\r\n      layers: [this.olOverlayLayer]\r\n    });\r\n    this.olTranslateInteraction = olTranslateInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the translate interaction\r\n   */\r\n  private removeOlTranslateInteraction() {\r\n    if (this.olTranslateInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateTranslateInteraction();\r\n    this.olTranslateInteraction = undefined;\r\n  }\r\n\r\n  private activateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = true;\r\n    this.onTranslateStartKey = this.olTranslateInteraction\r\n      .on('translatestart', (event: OlTranslateEvent) => this.onTranslateStart(event));\r\n    this.onTranslateEndKey = this.olTranslateInteraction\r\n      .on('translateend', (event: OlTranslateEvent) => this.onTranslateEnd(event));\r\n    this.olMap.addInteraction(this.olTranslateInteraction);\r\n  }\r\n\r\n  private deactivateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = false;\r\n    unByKey(this.onTranslateStartKey);\r\n    unByKey(this.onTranslateEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olTranslateInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When translation starts, clear the overlay and start watching for changes\r\n   * @param event Translate start event\r\n   */\r\n  private onTranslateStart(event: OlTranslateEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onTranslateKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Translate end event\r\n   */\r\n  private onTranslateEnd(event: OlTranslateEvent) {\r\n    if (this.onTranslateKey !== undefined) {\r\n      unByKey(this.onTranslateKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  private addOlDrawInteraction() {\r\n    const olDrawInteraction = new OlDraw({\r\n      type: 'Polygon',\r\n      source: this.olLinearRingsSource,\r\n      stopClick: true,\r\n      style: createDrawHoleInteractionStyle(),\r\n      condition: (event: OlMapBrowserEvent) => {\r\n        return this.getOlGeometry().intersectsCoordinate(event.coordinate);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteraction = olDrawInteraction;\r\n    this.subscribeToDrawKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToDrawKeyDown() {\r\n    this.drawKeyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode !== 17) { return; }\r\n\r\n      this.unsubscribeToDrawKeyDown();\r\n\r\n      const olGeometry = this.getOlGeometry();\r\n      if (!olGeometry || !(olGeometry instanceof OlPolygon)) { return; }\r\n\r\n      this.subscribeToDrawKeyUp();\r\n\r\n      this.deactivateModifyInteraction();\r\n      this.deactivateTranslateInteraction();\r\n      this.activateDrawInteraction();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key up to deactivate the draw control\r\n   */\r\n  private subscribeToDrawKeyUp() {\r\n    this.drawKeyUp$$ = fromEvent(document, 'keyup').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode !== 17) { return; }\r\n\r\n      this.unsubscribeToDrawKeyUp();\r\n      this.subscribeToDrawKeyDown();\r\n\r\n      this.deactivateDrawInteraction();\r\n      this.activateModifyInteraction();\r\n      this.activateTranslateInteraction();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to draw key down\r\n   */\r\n  private unsubscribeToDrawKeyDown() {\r\n    if (this.drawKeyDown$$ !== undefined) {\r\n      this.drawKeyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key up\r\n   */\r\n  private unsubscribeToDrawKeyUp() {\r\n    if (this.drawKeyUp$$ !== undefined) {\r\n      this.drawKeyUp$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    this.unsubscribeToDrawKeyUp();\r\n    this.unsubscribeToDrawKeyDown();\r\n    this.deactivateDrawInteraction();\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * Activate the draw interaction\r\n   */\r\n  private activateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.clearOlLinearRingsSource();\r\n    this.addOlLinearRingsLayer();\r\n\r\n    this.olMap.getInteractions().forEach((olInteraction: OlInteraction) => {\r\n      if (olInteraction instanceof OlDragBoxInteraction) {\r\n        this.olMap.removeInteraction(olInteraction);\r\n        this.removedOlInteractions.push(olInteraction);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = true;\r\n    this.onDrawStartKey = this.olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = this.olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(this.olDrawInteraction);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the draw interaction\r\n   */\r\n  private deactivateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.removeOlLinearRingsLayer();\r\n\r\n    this.removedOlInteractions.forEach((olInteraction: OlInteraction) => {\r\n      this.olMap.addInteraction(olInteraction);\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = false;\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When draw start, add a new linerar ring to the geometrty and start watching for changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    const linearRingCoordinates = olGeometry.getLinearRing().getCoordinates();\r\n    this.addLinearRingToOlGeometry(linearRingCoordinates);\r\n    this.start$.next(this.getOlGeometry());\r\n\r\n    this.onDrawKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      const _linearRingCoordinates = olGeometryEvent.target.getLinearRing().getCoordinates();\r\n      this.updateLinearRingOfOlGeometry(_linearRingCoordinates);\r\n      this.changes$.next(this.getOlGeometry());\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    if (this.onDrawKey !== undefined) {\r\n      unByKey(this.onDrawKey);\r\n    }\r\n    const linearRingCoordinates = event.feature.getGeometry().getLinearRing().getCoordinates();\r\n    this.updateLinearRingOfOlGeometry(linearRingCoordinates);\r\n    this.clearOlLinearRingsSource();\r\n    this.end$.next(this.getOlGeometry());\r\n    this.unsubscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Add a linear ring to the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private addLinearRingToOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    const olLinearRing = new OlLinearRing(coordinates);\r\n    addLinearRingToOlPolygon(olGeometry, olLinearRing);\r\n  }\r\n\r\n  /**\r\n   * Update the last linear ring of the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private updateLinearRingOfOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    // Remove the last linear ring (the one we are updating)\r\n    const olLinearRings = olGeometry.getLinearRings().slice(0, -1);\r\n    const newCoordinates = olLinearRings.map((olLinearRing: OlLinearRing) => {\r\n      return olLinearRing.getCoordinates();\r\n    });\r\n    newCoordinates.push(coordinates);\r\n    olGeometry.setCoordinates(newCoordinates);\r\n  }\r\n\r\n  /**\r\n   * Get the geometry being modified\r\n   * @returns OL Geometry\r\n   */\r\n  private getOlGeometry(): OlGeometry {\r\n    const olFeatures = this.olOverlaySource.getFeatures();\r\n    return olFeatures.length > 0 ? olFeatures[0].getGeometry() : undefined;\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlLineString from 'ol/geom/LineString';\r\n\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\nimport { GeometrySliceError } from '../geometry.errors';\r\nimport { sliceOlGeometry } from '../geometry.utils';\r\nimport { DrawControl } from './draw';\r\n\r\nexport interface SliceControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class SliceControl {\r\n\r\n  /**\r\n   * Slice end observable\r\n   */\r\n  public end$: Subject<OlGeometry[]> = new Subject();\r\n\r\n  /**\r\n   * Slice error, if any\r\n   */\r\n  public error$: Subject<GeometrySliceError> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawLineStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawLineEnd$$: Subscription;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: SliceControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeDrawLineControl();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addDrawLineControl();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay for slicing\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control and add it to the map\r\n   */\r\n  private addDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      drawStyle: this.options.drawStyle,\r\n      maxPoints: 2\r\n    });\r\n    this.drawLineStart$$ = this.drawLineControl.start$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineStart(olLine));\r\n    this.drawLineEnd$$ = this.drawLineControl.end$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineEnd(olLine));\r\n    this.drawLineControl.setOlMap(this.olMap);\r\n  }\r\n\r\n  /**\r\n   * Remove draw line control\r\n   */\r\n  private removeDrawLineControl() {\r\n    if (this.drawLineControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.drawLineStart$$.unsubscribe();\r\n    this.drawLineEnd$$.unsubscribe();\r\n    this.drawLineControl.getSource().clear();\r\n    this.drawLineControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olLine Ol linestring or polygon\r\n   */\r\n  private onDrawLineStart(olLine: OlLineString) {\r\n    this.drawLineControl.getSource().clear();\r\n  }\r\n\r\n  /**\r\n   * Slice the first geometry encountered with the drawn line\r\n   * @param olLine Ol linestring\r\n   */\r\n  private onDrawLineEnd(olLine: OlLineString) {\r\n    const olSlicedGeometries = [];\r\n    const lineExtent = olLine.getExtent();\r\n\r\n    const olFeaturesToRemove = [];\r\n    try {\r\n      this.olOverlaySource.forEachFeatureInExtent(lineExtent, (olFeature: OlFeature) => {\r\n        const olGeometry = olFeature.getGeometry();\r\n        const olParts = sliceOlGeometry(olGeometry, olLine);\r\n        if (olParts.length > 0) {\r\n          olSlicedGeometries.push(...olParts);\r\n          olFeaturesToRemove.push(olFeature);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (e instanceof GeometrySliceError) {\r\n        this.error$.next(e);\r\n        return;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    this.drawLineControl.getSource().clear();\r\n\r\n    this.olOverlaySource.addFeatures(\r\n      olSlicedGeometries.map((olGeometry: OlGeometry) => new OlFeature(olGeometry))\r\n    );\r\n    olFeaturesToRemove.forEach((olFeature: OlFeature) => {\r\n      this.olOverlaySource.removeFeature(olFeature);\r\n    });\r\n\r\n    this.error$.next(undefined);\r\n    this.end$.next(olSlicedGeometries);\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nimport { MeasurerDialogData } from '../shared/measure.interfaces';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit} from '../shared/measure.enum';\r\n\r\n@Component({\r\n  selector: 'igo-measurer-dialog',\r\n  templateUrl: 'measurer-dialog.component.html',\r\n  styleUrls: ['./measurer-dialog.component.scss']\r\n})\r\nexport class MeasurerDialogComponent {\r\n\r\n  measureAreaUnit = MeasureAreaUnit;\r\n\r\n  measureLengthUnit = MeasureLengthUnit;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MeasurerDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: MeasurerDialogData\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\n\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlStyle from 'ol/style/Style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport { VectorSourceEvent as OlVectorSourceEvent } from 'ol/source/Vector';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { EntityRecord, EntityTableTemplate, EntityTableComponent } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport {\r\n  FEATURE,\r\n  FeatureStore,\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy,\r\n  tryBindStoreLayer,\r\n  tryAddLoadingStrategy,\r\n  tryAddSelectionStrategy\r\n} from '../../feature';\r\nimport { DrawControl, ModifyControl } from '../../geometry';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { Measure, MeasurerDialogData, FeatureWithMeasure } from '../shared/measure.interfaces';\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit,\r\n} from '../shared/measure.enum';\r\nimport {\r\n  measureOlGeometry,\r\n  createMeasureInteractionStyle,\r\n  createMeasureLayerStyle,\r\n  updateOlTooltipsAtMidpoints,\r\n  updateOlTooltipAtCenter,\r\n  getTooltipsOfOlGeometry,\r\n  squareMetersToUnit,\r\n  metersToUnit,\r\n  formatMeasure\r\n} from '../shared/measure.utils';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * Tool to measure lengths and areas\r\n */\r\n@Component({\r\n  selector: 'igo-measurer',\r\n  templateUrl: './measurer.component.html',\r\n  styleUrls: ['./measurer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Table template\r\n   * @internal\r\n   */\r\n  public tableTemplate: EntityTableTemplate = {\r\n    selection: true,\r\n    selectMany: true,\r\n    selectionCheckbox: true,\r\n    sort: true,\r\n    columns: [\r\n      {\r\n        name: 'length',\r\n        title: this.languageService.translate.instant('igo.geo.measure.lengthHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeLengthUnit;\r\n          const measure = metersToUnit(feature.properties.measure.length, unit);\r\n          return formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          });\r\n        }\r\n      },\r\n      {\r\n        name: 'area',\r\n        title: this.languageService.translate.instant('igo.geo.measure.areaHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeAreaUnit;\r\n          const measure = squareMetersToUnit(feature.properties.measure.area, unit);\r\n          return measure ? formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          }) : '';\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  /**\r\n   * Reference to the MeasureType enum\r\n   * @internal\r\n   */\r\n  public measureType = MeasureType;\r\n\r\n  /**\r\n   * Reference to the AreaMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureAreaUnit = MeasureAreaUnit;\r\n\r\n  /**\r\n   * Reference to the LengthMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureLengthUnit = MeasureLengthUnit;\r\n\r\n  /**\r\n   * Whether measure units should be automatically determined\r\n   * @internal\r\n   */\r\n  public measureUnitsAuto: boolean = false;\r\n\r\n  /**\r\n   * Observable of area\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<Measure> = new BehaviorSubject({});\r\n\r\n  /**\r\n   * Observable of selected features\r\n   * @internal\r\n   */\r\n  public selectedFeatures$: BehaviorSubject<FeatureWithMeasure[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * OL draw source\r\n   * @internal\r\n   */\r\n  public showTooltips: boolean = true;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Draw polygon control\r\n   */\r\n  private drawPolygonControl: DrawControl;\r\n\r\n  /**\r\n   * Modify control\r\n   */\r\n  private modifyControl: ModifyControl;\r\n\r\n  /**\r\n   * Active OL geometry\r\n   */\r\n  private activeOlGeometry: OlLineString | OlPolygon;\r\n\r\n  /**\r\n   * Active mlength unit\r\n   */\r\n  private activeLengthUnit: MeasureLengthUnit = MeasureLengthUnit.Meters;\r\n\r\n  /**\r\n   * Active area unit\r\n   */\r\n  private activeAreaUnit: MeasureAreaUnit = MeasureAreaUnit.SquareMeters;\r\n\r\n  /**\r\n   * Feature added listener key\r\n   */\r\n  private onFeatureAddedKey: string;\r\n\r\n  /**\r\n   * Feature removed listener key\r\n   */\r\n  private onFeatureRemovedKey: string;\r\n\r\n  /**\r\n   * Active draw control\r\n   * @internal\r\n   */\r\n  private activeDrawControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private drawChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify start\r\n   */\r\n  private modifyStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify end\r\n   */\r\n  private modifyEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private modifyChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to measures selection\r\n   */\r\n  private selectedFeatures$$: Subscription;\r\n\r\n  /**\r\n   * OL draw source\r\n   */\r\n  private olDrawSource = new OlVectorSource();\r\n\r\n  /**\r\n   * The map to measure on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The measures store\r\n   */\r\n  @Input() store: FeatureStore<FeatureWithMeasure>;\r\n\r\n  /**\r\n   * Measure type\r\n   * @internal\r\n   */\r\n  @Input()\r\n  set activeMeasureType(value: MeasureType) { this.setActiveMeasureType(value); }\r\n  get activeMeasureType(): MeasureType { return this._activeMeasureType; }\r\n  private _activeMeasureType: MeasureType = MeasureType.Length;\r\n\r\n  /**\r\n   * The minimum length a segment must have to display a tooltip.\r\n   * It also applies to area tooltips.\r\n   */\r\n  @Input() minSegmentLength: number = 10;\r\n\r\n  @ViewChild('table') table: EntityTableComponent;\r\n\r\n  /**\r\n   * Wheter one of the draw control is active\r\n   * @internal\r\n   */\r\n  get drawControlIsActive(): boolean {\r\n    return this.activeDrawControl !== undefined;\r\n  }\r\n\r\n  get projection(): OlProjection {\r\n    return this.map.ol.getView().getProjection();\r\n  }\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  /**\r\n   * Add draw controls and activate one\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.initStore();\r\n    this.createDrawLineControl();\r\n    this.createDrawPolygonControl();\r\n    this.createModifyControl();\r\n    this.toggleDrawControl();\r\n    this.onToggleTooltips(this.showTooltips);\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.setActiveMeasureType(undefined);\r\n    this.deactivateModifyControl();\r\n    this.freezeStore();\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onMeasureTypeChange(measureType: MeasureType) {\r\n    this.activeMeasureType = measureType;\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleDrawControl(toggle: boolean) {\r\n    if (toggle === true) {\r\n      this.toggleDrawControl();\r\n    } else {\r\n      this.deactivateDrawControl();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleTooltips(toggle: boolean) {\r\n    this.showTooltips = toggle;\r\n    if (toggle === true) {\r\n      this.showTooltipsOfOlSource(this.store.source.ol);\r\n    } else {\r\n      this.clearTooltipsOfOlSource(this.store.source.ol);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleMeasureUnitsAuto(toggle: boolean) {\r\n    this.measureUnitsAuto = toggle;\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onLengthUnitChange(unit: MeasureLengthUnit) {\r\n    this.activeLengthUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onAreaUnitChange(unit: MeasureAreaUnit) {\r\n    this.activeAreaUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  onCalculateClick() {\r\n    const features = this.selectedFeatures$.value;\r\n    const area = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      return sum + feature.properties.measure.area || 0;\r\n    }, 0);\r\n    const length = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'Polygon') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n    const perimeter = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'LineString') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n\r\n    this.openDialog({\r\n      area,\r\n      length,\r\n      perimeter\r\n    });\r\n  }\r\n\r\n  onDeleteClick() {\r\n    this.store.deleteMany(this.selectedFeatures$.value);\r\n  }\r\n\r\n  onModifyClick() {\r\n    if (this.selectedFeatures$.value.length !== 1) { return; }\r\n\r\n    if (this.modifyControl.active === true) {\r\n      this.deactivateModifyControl();\r\n      this.toggleDrawControl();\r\n    } else {\r\n      const feature = this.selectedFeatures$.value[0];\r\n      const olFeatures = this.store.layer.ol.getSource().getFeatures();\r\n      const olFeature = olFeatures.find((_olFeature: OlFeature) => {\r\n        return _olFeature.get('id') === feature.properties.id;\r\n      });\r\n\r\n      if (olFeature !== undefined) {\r\n        this.deactivateDrawControl();\r\n        this.activateModifyControl();\r\n\r\n        const olGeometry = olFeature.getGeometry();\r\n        this.clearTooltipsOfOlGeometry(olGeometry);\r\n        this.modifyControl.setOlGeometry(olGeometry);\r\n      }\r\n    }\r\n  }\r\n\r\n  private openDialog(data: MeasurerDialogData): void {\r\n    this.dialog.open(MeasurerDialogComponent, {data});\r\n  }\r\n\r\n  /**\r\n   * Initialize the measure store and set up some listeners\r\n   * @internal\r\n   */\r\n  private initStore() {\r\n    const store = this.store;\r\n\r\n    const layer = new VectorLayer({\r\n      title: 'Measures',\r\n      zIndex: 200,\r\n      source: new FeatureDataSource(),\r\n      style: createMeasureLayerStyle(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n    tryBindStoreLayer(store, layer);\r\n\r\n    tryAddLoadingStrategy(store);\r\n\r\n    tryAddSelectionStrategy(store, new FeatureStoreSelectionStrategy({\r\n      map: this.map,\r\n      many: true\r\n    }));\r\n\r\n    this.onFeatureAddedKey = store.source.ol.on('addfeature', (event: OlVectorSourceEvent) => {\r\n      const feature = event.feature;\r\n      const olGeometry = feature.getGeometry();\r\n      this.updateMeasureOfOlGeometry(olGeometry, feature.get('measure'));\r\n    });\r\n\r\n    this.onFeatureRemovedKey = store.source.ol.on('removefeature', (event: OlVectorSourceEvent) => {\r\n      const olGeometry = event.feature.getGeometry();\r\n      this.clearTooltipsOfOlGeometry(olGeometry);\r\n    });\r\n\r\n    this.selectedFeatures$$ = store.stateView.manyBy$((record: EntityRecord<FeatureWithMeasure>) => {\r\n      return record.state.selected === true;\r\n    }).pipe(\r\n      skip(1)  // Skip initial emission\r\n    )\r\n    .subscribe((records: EntityRecord<FeatureWithMeasure>[]) => {\r\n      if (this.modifyControl.active === true) {\r\n        this.deactivateModifyControl();\r\n      }\r\n      this.selectedFeatures$.next(records.map(record => record.entity));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Freeze any store, meaning the layer is removed, strategies are deactivated\r\n   * and some listener removed\r\n   * @internal\r\n   */\r\n  private freezeStore() {\r\n    const store = this.store;\r\n    this.selectedFeatures$$.unsubscribe();\r\n    unByKey(this.onFeatureAddedKey);\r\n    unByKey(this.onFeatureRemovedKey);\r\n    this.clearTooltipsOfOlSource(store.source.ol);\r\n    this.map.removeLayer(store.layer);\r\n    store.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    store.deactivateStrategyOfType(FeatureStoreSelectionStrategy);\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control\r\n   */\r\n  private createDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createDrawPolygonControl() {\r\n    this.drawPolygonControl = new DrawControl({\r\n      geometryType: 'Polygon',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate the right control\r\n   */\r\n  private toggleDrawControl() {\r\n    this.deactivateDrawControl();\r\n    // this.deactivateModifyControl();\r\n    if (this.activeMeasureType === MeasureType.Length) {\r\n      this.activateDrawControl(this.drawLineControl);\r\n    } else if (this.activeMeasureType === MeasureType.Area) {\r\n      this.activateDrawControl(this.drawPolygonControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param drawControl Draw control\r\n   */\r\n  private activateDrawControl(drawControl: DrawControl) {\r\n    this.activeDrawControl = drawControl;\r\n    this.drawStart$$ = drawControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawStart(olGeometry));\r\n    this.drawEnd$$ = drawControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawEnd(olGeometry));\r\n    this.drawChanges$$ = drawControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawChanges(olGeometry));\r\n\r\n    drawControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active draw control\r\n   */\r\n  private deactivateDrawControl() {\r\n    if (this.activeDrawControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n    if (this.drawStart$$ !== undefined ) { this.drawStart$$.unsubscribe(); }\r\n    if (this.drawEnd$$ !== undefined ) { this.drawEnd$$.unsubscribe(); }\r\n    if (this.drawChanges$$ !== undefined ) { this.drawChanges$$.unsubscribe(); }\r\n\r\n    this.clearTooltipsOfOlSource(this.olDrawSource);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.clearTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n    this.activeDrawControl.setOlMap(undefined);\r\n    this.activeDrawControl = undefined;\r\n    this.activeOlGeometry = undefined;\r\n  }\r\n\r\n  private setActiveMeasureType(measureType: MeasureType) {\r\n    this._activeMeasureType = measureType;\r\n    this.clearMeasures();\r\n    this.toggleDrawControl();\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = olGeometry;\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = undefined;\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n    this.addFeatureToStore(olGeometry);\r\n    this.clearTooltipsOfOlGeometry(olGeometry);\r\n    this.olDrawSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawChanges(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = measureOlGeometry(olGeometry, this.projection);\r\n    this.updateMeasureOfOlGeometry(olGeometry, Object.assign({}, measure, {\r\n      area: undefined  // We don't want to display an area tooltip while drawing.\r\n    }));\r\n    this.measure$.next(measure);\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param modifyControl Modify control\r\n   */\r\n  private activateModifyControl() {\r\n    const selection = this.store.getStrategyOfType(FeatureStoreSelectionStrategy) as FeatureStoreSelectionStrategy;\r\n    selection.deactivate();\r\n    selection.clear();\r\n\r\n    this.modifyStart$$ = this.modifyControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyStart(olGeometry));\r\n    this.modifyEnd$$ = this.modifyControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyEnd(olGeometry));\r\n    this.modifyChanges$$ = this.modifyControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyChanges(olGeometry));\r\n    this.modifyControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active modify control\r\n   */\r\n  private deactivateModifyControl() {\r\n    if (this.modifyStart$$ !== undefined ) { this.modifyStart$$.unsubscribe(); }\r\n    if (this.modifyEnd$$ !== undefined ) { this.modifyEnd$$.unsubscribe(); }\r\n    if (this.modifyChanges$$ !== undefined ) { this.modifyChanges$$.unsubscribe(); }\r\n\r\n    if (this.activeOlGeometry !== undefined) {\r\n      if (this.selectedFeatures$.value.length === 1) {\r\n        const feature = this.selectedFeatures$.value[0];\r\n        this.addFeatureToStore(this.activeOlGeometry, feature);\r\n      }\r\n      this.finalizeMeasureOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n\r\n    this.store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n\r\n    this.activeOlGeometry = undefined;\r\n    this.modifyControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawStart(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyChanges(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawChanges(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  private finalizeMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    let measure = measureOlGeometry(olGeometry, this.projection);\r\n    if (olGeometry instanceof OlPolygon) {\r\n      measure = Object.assign({}, measure, {\r\n        lengths: []  // We don't want to display an area tooltip while drawing.\r\n      });\r\n    }\r\n    this.updateMeasureOfOlGeometry(olGeometry, measure);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables\r\n   * @param olGeometry Ol linestring or polygon\r\n   * @param measure Measure\r\n   */\r\n  private updateMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon, measure: Measure) {\r\n    olGeometry.setProperties({_measure: measure}, true);\r\n    this.updateTooltipsOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the measures observables\r\n   */\r\n  private clearMeasures() {\r\n    this.measure$.next({});\r\n  }\r\n\r\n  /**\r\n   * Add a feature with measures to the store. The loading stragegy of the store\r\n   * will trigger and add the feature to the map.\r\n   * @internal\r\n   */\r\n  private addFeatureToStore(olGeometry: OlLineString | OlPolygon, feature?: FeatureWithMeasure) {\r\n    const featureId = feature ? feature.properties.id : uuid();\r\n    const projection = this.map.ol.getView().getProjection();\r\n    const geometry = new OlGeoJSON().writeGeometryObject(olGeometry, {\r\n      featureProjection: projection,\r\n      dataProjection: projection\r\n    });\r\n    this.store.update({\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: projection.getCode(),\r\n      properties: {\r\n        id: featureId,\r\n        measure: olGeometry.get('_measure')\r\n      },\r\n      meta: {\r\n        id: featureId\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update all the tooltips of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   * @param lengths Lengths of the OL geometry's segments\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = olGeometry.get('_measure');\r\n    const lengths = measure.lengths;\r\n    const area = measure.area;\r\n\r\n    const olMidpointsTooltips = updateOlTooltipsAtMidpoints(olGeometry);\r\n    if (lengths.length === olMidpointsTooltips.length) {\r\n      for (let i = 0; i < olMidpointsTooltips.length; i++) {\r\n        const length = lengths[i];\r\n        if (length !== undefined) {\r\n          this.updateOlTooltip(\r\n            olMidpointsTooltips[i],\r\n            metersToUnit(length, this.activeLengthUnit),\r\n            this.activeLengthUnit,\r\n            MeasureType.Length\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (area !== undefined) {\r\n      this.updateOlTooltip(\r\n        updateOlTooltipAtCenter(olGeometry),\r\n        squareMetersToUnit(area,  this.activeAreaUnit),\r\n        this.activeAreaUnit,\r\n        MeasureType.Area\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of a geoemtry\r\n   */\r\n  private showTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (this.shouldShowTooltip(olTooltip)) {\r\n        this.map.ol.addOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the tooltips of an OL geometrys\r\n   * @param olGeometry OL geometry with tooltips\r\n   */\r\n  private clearTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (olTooltip !== undefined && olTooltip.getMap() !== undefined) {\r\n        this.map.ol.removeOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private updateTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.updateTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private showTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.showTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the map tooltips\r\n   * @param olDrawSource OL vector source\r\n   */\r\n  private clearTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry !== undefined) {\r\n        this.clearTooltipsOfOlGeometry(olFeature.getGeometry());\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update an OL tooltip properties and inner HTML and add it to the map if possible\r\n   * @param olTooltip OL tooltip\r\n   * @param measure The measure valeu ti display\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateOlTooltip(\r\n    olTooltip: OlOverlay,\r\n    measure: number,\r\n    unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    type: MeasureType\r\n  ) {\r\n    olTooltip.setProperties({_measure: measure, _unit: unit, _type: type}, true);\r\n    olTooltip.getElement().innerHTML = this.computeTooltipInnerHTML(olTooltip);\r\n    if (this.shouldShowTooltip(olTooltip)) {\r\n      this.map.ol.addOverlay(olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute a tooltip's content\r\n   * @param olTooltip OL overlay\r\n   * @returns Inner HTML\r\n   */\r\n  private computeTooltipInnerHTML(olTooltip: OlOverlay): string {\r\n    const properties = olTooltip.getProperties() as any;\r\n    return formatMeasure(properties._measure, {\r\n      decimal: 1,\r\n      unit: properties._unit,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Whether a tooltip should be showned based on the length\r\n   * of the segment it is bound to.\r\n   * @param olTooltip OL overlay\r\n   * @returns True if the tooltip should be shown\r\n   */\r\n  private shouldShowTooltip(olTooltip: OlOverlay): boolean {\r\n    if (this.showTooltips === false) {\r\n      return false;\r\n    }\r\n\r\n    const properties = olTooltip.getProperties() as any;\r\n    const measure = properties._measure;\r\n    if (measure === undefined) {\r\n      return false;\r\n    }\r\n\r\n    if (properties._unit === MeasureType.Length) {\r\n      const minSegmentLength = metersToUnit(this.minSegmentLength, properties._unit) || 0;\r\n      return measure > Math.max(minSegmentLength, 0);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit } from '../shared/measure.enum';\r\nimport { metersToUnit, squareMetersToUnit, formatMeasure } from '../shared/measure.utils';\r\n\r\n/**\r\n * This pipe returns a measure converted from meters (or square meters)\r\n * to the specified unit. It also keeps a certain number of decimals.\r\n */\r\n@Pipe({\r\n  name: 'measureFormat'\r\n})\r\nexport class MeasureFormatPipe implements PipeTransform {\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  transform(\r\n    value: number, unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    unitAbbr: boolean = false,\r\n    decimal: number = 1\r\n  ): number {\r\n    let out;\r\n    if (Object.values(MeasureAreaUnit).indexOf(unit) >= 0) {\r\n      out = squareMetersToUnit(value, unit as MeasureAreaUnit);\r\n    } else if (Object.values(MeasureLengthUnit).indexOf(unit) >= 0) {\r\n      out = metersToUnit(value, unit as MeasureLengthUnit);\r\n    }\r\n\r\n    return out ? formatMeasure(out, {\r\n      decimal: 1,\r\n      unit,\r\n      unitAbbr,\r\n      locale: 'fr'\r\n    }) : out;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  Self,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { NgControl, ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport * as OlStyle from 'ol/style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlOverlay from 'ol/Overlay';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport {\r\n  MeasureLengthUnit,\r\n  updateOlGeometryMidpoints,\r\n  formatMeasure,\r\n  measureOlGeometry\r\n} from '../../measure';\r\nimport { DrawControl, ModifyControl } from '../shared/controls';\r\nimport { createDrawInteractionStyle } from '../shared/geometry.utils';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map. A text input is also displayed in the\r\n * form with some instructions.\r\n * This is still WIP.\r\n */\r\n@Component({\r\n  selector: 'igo-geometry-form-field-input',\r\n  templateUrl: './geometry-form-field-input.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldInputComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olGeoJSON = new OlGeoJSON();\r\n  private ready = false;\r\n\r\n  private drawControl: DrawControl;\r\n  private modifyControl: ModifyControl;\r\n  private defaultDrawStyleRadius: number;\r\n  private olGeometryEnds$$: Subscription;\r\n  private olGeometryChanges$$: Subscription;\r\n  private olTooltip = OlOverlay;\r\n\r\n  /**\r\n   * Active control\r\n   * @internal\r\n   */\r\n  public activeControl: DrawControl | ModifyControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The geometry type\r\n   */\r\n  @Input()\r\n  set geometryType(value: OlGeometryType) {\r\n    this._geometryType = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n    this.deactivateControl();\r\n    this.createDrawControl();\r\n    this.toggleControl();\r\n  }\r\n  get geometryType(): OlGeometryType { return this._geometryType; }\r\n  private _geometryType: OlGeometryType;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input() drawGuide: number = null;\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * Style for the draw control (applies while the geometry is being drawn)\r\n   */\r\n  @Input()\r\n  set drawStyle(value: OlStyle) {\r\n    this._drawStyle = value || createDrawInteractionStyle();\r\n    if (this.isStyleWithRadius(this.drawStyle)) {\r\n      this.defaultDrawStyleRadius = this.drawStyle.getImage().getRadius();\r\n    } else {\r\n      this.defaultDrawStyleRadius = null;\r\n    }\r\n  }\r\n  get drawStyle(): OlStyle { return this._drawStyle; }\r\n  private _drawStyle: OlStyle;\r\n\r\n  /**\r\n   * Style for the overlay layer (applies once the geometry is added to the map)\r\n   * If not specified, drawStyle applies\r\n   */\r\n  @Input()\r\n  set overlayStyle(value: OlStyle) {\r\n    this._overlayStyle = value;\r\n  }\r\n  get overlayStyle(): OlStyle {\r\n    return this._overlayStyle || this.drawStyle;\r\n  }\r\n  private _overlayStyle: OlStyle;\r\n\r\n  /**\r\n   * The geometry value (GeoJSON)\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  @Input()\r\n  set value(value: GeoJSONGeometry) {\r\n    if (this.ready === false) {\r\n      this._value = value;\r\n      return;\r\n    }\r\n\r\n    if (value) {\r\n      this.addGeoJSONToOverlay(value);\r\n    } else {\r\n      this.olOverlaySource.clear();\r\n    }\r\n\r\n    this._value = value;\r\n    this.onChange(value);\r\n    this.toggleControl();\r\n    this.cdRef.detectChanges();\r\n  }\r\n  get value(): GeoJSONGeometry { return this._value; }\r\n  private _value: GeoJSONGeometry;\r\n\r\n  /**\r\n   * The vector source to add the geometry to\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    @Optional() @Self() public ngControl: NgControl\r\n  ) {\r\n    if (this.ngControl !== undefined) {\r\n      // Setting the value accessor directly (instead of using\r\n      // the providers) to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an overlay layer, add the initial geometry to it (if any)\r\n   * and toggle the right interaction.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.addOlOverlayLayer();\r\n    this.createMeasureTooltip();\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n    if (this.value) {\r\n      this.addGeoJSONToOverlay(this.value);\r\n    }\r\n    this.toggleControl();\r\n    this.ready = true;\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.deactivateControl();\r\n    this.olOverlaySource.clear();\r\n    this.map.ol.removeLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnChange(fn: Function) {\r\n    this.onChange = fn;\r\n  }\r\n  private onChange: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n  private onTouched: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  writeValue(value: GeoJSONGeometry) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Add an overlay layer to the map\r\n   */\r\n  private addOlOverlayLayer(): OlVectorLayer {\r\n    this.olOverlayLayer = new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      zIndex: 500,\r\n      style: null\r\n    });\r\n    this.map.ol.addLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create a draw control and subscribe to it's geometry\r\n   */\r\n  private createDrawControl() {\r\n    this.drawControl = new DrawControl({\r\n      geometryType: this.geometryType || 'Point',\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a modify control and subscribe to it's geometry\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle the proper control (draw or modify)\r\n   */\r\n  private toggleControl() {\r\n    this.deactivateControl();\r\n    if (!this.value && this.geometryType) {\r\n      this.activateControl(this.drawControl);\r\n    } else {\r\n      this.activateControl(this.modifyControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param control Control\r\n   */\r\n  private activateControl(control: DrawControl | ModifyControl) {\r\n    this.activeControl = control;\r\n    this.olGeometryEnds$$ = control.end$\r\n      .subscribe((olGeometry: OlGeometry) => this.onOlGeometryEnds(olGeometry));\r\n    if (this.measure === true && control === this.drawControl) {\r\n      this.olGeometryChanges$$ = control.changes$\r\n        .subscribe((olGeometry: OlGeometry) => this.onOlGeometryChanges(olGeometry));\r\n    }\r\n    control.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active control\r\n   */\r\n  private deactivateControl() {\r\n    this.removeMeasureTooltip();\r\n    if (this.activeControl !== undefined) {\r\n      this.activeControl.setOlMap(undefined);\r\n    }\r\n    if (this.olGeometryEnds$$ !== undefined) {\r\n      this.olGeometryEnds$$.unsubscribe();\r\n    }\r\n    if (this.olGeometryChanges$$ !== undefined) {\r\n      this.olGeometryChanges$$.unsubscribe();\r\n    }\r\n    this.activeControl = undefined;\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryEnds(olGeometry: OlGeometry | undefined) {\r\n    this.removeMeasureTooltip();\r\n    this.setOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryChanges(olGeometry: OlGeometry) {\r\n    if (olGeometry.getType() !== 'Point') {\r\n      this.updateMeasureTooltip(olGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, convert the output value to GeoJSON and keep it.\r\n   * Restore the double click interaction.\r\n   * @param olGeometry OL geometry\r\n   */\r\n  private setOlGeometry(olGeometry: OlGeometry | undefined) {\r\n    if (olGeometry === undefined) {\r\n      return;\r\n    }\r\n    const value = this.olGeoJSON.writeGeometryObject(olGeometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: 'EPSG:4326'\r\n    });\r\n    this.writeValue(value);\r\n  }\r\n\r\n  /**\r\n   * Add a GeoJSON geometry to the overlay\r\n   * @param geometry GeoJSON geometry\r\n   */\r\n  private addGeoJSONToOverlay(geometry: GeoJSONGeometry) {\r\n    const olGeometry = this.olGeoJSON.readGeometry(geometry, {\r\n      dataProjection: 'EPSG:4326',\r\n      featureProjection: this.map.projection\r\n    });\r\n    const olFeature = new OlFeature({\r\n      geometry: olGeometry\r\n    });\r\n    olFeature.setStyle(this.overlayStyle);\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create the measure tooltip\r\n   */\r\n  private createMeasureTooltip(): OlOverlay {\r\n    this.olTooltip = new OlOverlay({\r\n      element: document.createElement('div'),\r\n      offset: [-30, -10],\r\n      className: [\r\n        'igo-map-tooltip',\r\n        'igo-map-tooltip-measure'\r\n      ].join(' '),\r\n      stopEvent: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the measure tooltip of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   */\r\n  private updateMeasureTooltip(olGeometry: OlGeometry) {\r\n    const measure = measureOlGeometry(olGeometry, this.map.projection);\r\n    const lengths = measure.lengths;\r\n    const lastIndex = olGeometry.getType() === 'Polygon' ? lengths.length - 2 : lengths.length - 1;\r\n    const lastLength = lengths[lastIndex];\r\n\r\n    const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n    const olLastMidpoint = olMidpoints[lastIndex];\r\n    if (olMidpoints.length === 0 || olLastMidpoint === undefined) {\r\n      this.removeMeasureTooltip();\r\n      return;\r\n    }\r\n\r\n    this.olTooltip.setPosition(olLastMidpoint.flatCoordinates);\r\n\r\n    const innerHtml = formatMeasure(lastLength, {\r\n      decimal: 1,\r\n      unit: MeasureLengthUnit.Meters,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    });\r\n    this.olTooltip.getElement().innerHTML = innerHtml;\r\n    if (this.olTooltip.getMap() === undefined) {\r\n      this.map.ol.addOverlay(this.olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the measure tooltip from the map\r\n   */\r\n  private removeMeasureTooltip() {\r\n    if (this.olTooltip.getMap && this.olTooltip.getMap() !== undefined) {\r\n      this.map.ol.removeOverlay(this.olTooltip);\r\n      this.olTooltip.setMap(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjust the draw style with the specified draw guide distance, if possible\r\n   * @param olStyle Draw style to update\r\n   * @param resolution Resolution (to make the screen size of symbol fit the drawGuide value)\r\n   */\r\n  private updateDrawStyleWithDrawGuide(olStyle: OlStyle, resolution: number) {\r\n    if (this.isStyleWithRadius(olStyle)) {\r\n      const drawGuide = this.drawGuide;\r\n      let radius;\r\n      if (drawGuide === null || drawGuide < 0) {\r\n        radius = this.defaultDrawStyleRadius;\r\n      } else {\r\n        radius = drawGuide > 0 ? drawGuide / resolution : drawGuide;\r\n      }\r\n      olStyle.getImage().setRadius(radius);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns wether a given Open Layers style has a radius property that can be set (used to set draw guide)\r\n   * @param olStyle The style on which to perform the check\r\n   */\r\n  private isStyleWithRadius(olStyle: OlStyle): boolean {\r\n    return olStyle.getImage && olStyle.getImage().setRadius;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { GeometryFormFieldComponent } from './geometry-form-field.component';\r\nimport { GeometryFormFieldInputComponent } from './geometry-form-field-input.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ],\r\n  declarations: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ]\r\n})\r\nexport class IgoGeometryFormFieldModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoGeometryFormFieldModule } from './geometry-form-field/geometry-form-field.module';\r\nimport { GeometryFormFieldComponent } from './geometry-form-field/geometry-form-field.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  exports: [\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  declarations: [],\r\n  providers: [],\r\n  entryComponents: [\r\n    GeometryFormFieldComponent\r\n  ]\r\n})\r\nexport class IgoGeometryModule {}\r\n","export class ExportError extends Error {}\r\n\r\nexport class ExportInvalidFileError extends ExportError {\r\n  constructor() {\r\n    super('Invalid file.');\r\n    Object.setPrototypeOf(this, ExportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ExportNothingToExportError extends ExportError {\r\n  constructor() {\r\n    super('Nothing to export.');\r\n    Object.setPrototypeOf(this, ExportNothingToExportError.prototype);\r\n  }\r\n}\r\n","import { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport {\r\n  getEntityProperty,\r\n  EntityTableColumn,\r\n  EntityTableColumnRenderer\r\n} from '@igo2/common';\r\n\r\nimport { ExportNothingToExportError } from './export.errors';\r\n\r\n/**\r\n * Export array to CSV\r\n *\r\n * @param rows Array of arrays to export as CSV\r\n * @param separator Cell separator\r\n */\r\nexport function exportToCSV(rows: any[][], fileName: string, separator: string = ';') {\r\n  const lines = rows.map((row: any[][], index: number) => row.join(separator));\r\n  const csvContent = lines.join('\\n');\r\n  downloadContent(csvContent, 'text/csv;charset=utf-8', fileName);\r\n}\r\n\r\n/**\r\n * Return an array of values from an array of entities.\r\n *\r\n * @param entities Array of entities\r\n * @param scolumns Columns definition of the output data\r\n */\r\nexport function entitiesToRowData(entities: object[], columns: EntityTableColumn[]) {\r\n  return entities.map((entity: object) => {\r\n    return columns.map((column: EntityTableColumn) => {\r\n      let valueAccessor;\r\n      if (column.renderer === undefined || column.renderer === EntityTableColumnRenderer.Default) {\r\n        valueAccessor = column.valueAccessor;\r\n      }\r\n      valueAccessor = valueAccessor ? valueAccessor : getEntityProperty;\r\n      return valueAccessor(entity, column.name);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Trigger download of a file\r\n *\r\n * @param content File content\r\n * @param mimeType File mime type\r\n * @param fileName File name\r\n */\r\nexport function downloadContent(content: string, mimeType: string, fileName: string) {\r\n  const element = document.createElement('a');\r\n  element.setAttribute(\r\n    'href',\r\n    `data:${mimeType},${encodeURIComponent(content)}`\r\n  );\r\n  element.setAttribute('download', fileName);\r\n  element.style.display = 'none';\r\n  document.body.appendChild(element);\r\n\r\n  element.click();\r\n\r\n  document.body.removeChild(element);\r\n}\r\n\r\nexport function handleFileExportError(\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  if (error instanceof ExportNothingToExportError) {\r\n    handleNothingToExportError(messageService, languageService);\r\n    return;\r\n  }\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.failed.title');\r\n  const message = translate.instant('igo.geo.export.failed.text');\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToExportError(\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.nothing.title');\r\n  const message = translate.instant('igo.geo.export.nothing.text');\r\n  messageService.error(message, title);\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const ExportFormat = strEnum(['GeoJSON', 'GML', 'GPX', 'KML', 'Shapefile']);\r\nexport type ExportFormat = keyof typeof ExportFormat;\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { downloadContent } from './export.utils';\r\nimport { ExportFormat } from './export.type';\r\nimport { ExportInvalidFileError, ExportNothingToExportError } from './export.errors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportService {\r\n\r\n  static ogreFormats = {\r\n    GML: 'gml',\r\n    GPX: 'gpx',\r\n    KML: 'kml',\r\n    Shapefile: 'ESRI Shapefile'\r\n  };\r\n\r\n  static noOgreFallbacks = ['GML', 'GPX', 'KML'];\r\n\r\n  private ogreUrl: string;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n  }\r\n\r\n  export(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn = 'EPSG:4326',\r\n    projectionOut = 'EPSG:4326'\r\n  ): Observable<void> {\r\n    const exportOlFeatures = olFeatures.map((olFeature: OlFeature) => {\r\n      const keys = olFeature.getKeys().filter((key: string) => !key.startsWith('_'));\r\n      const properties = keys.reduce((acc: object, key: string) => {\r\n        acc[key] = olFeature.get(key);\r\n        return acc;\r\n      }, {geometry: olFeature.getGeometry()});\r\n      return new OlFeature(properties);\r\n    });\r\n\r\n    return this.exportAsync(exportOlFeatures, format, title, projectionIn, projectionOut);\r\n  }\r\n\r\n  private exportAsync(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Observable<void> {\r\n    const doExport = (observer: Observer<void>) => {\r\n      const nothingToExport = this.nothingToExport(olFeatures, format);\r\n      if (nothingToExport === true) {\r\n        observer.error(new ExportNothingToExportError());\r\n        return;\r\n      }\r\n\r\n      const ogreFormats = Object.keys(ExportService.ogreFormats);\r\n      if (ogreFormats.indexOf(format) >= 0) {\r\n        if (this.ogreUrl === undefined) {\r\n          if (ExportService.noOgreFallbacks.indexOf(format) >= 0) {\r\n            this.exportToFile(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n          } else {\r\n            observer.error(new ExportInvalidFileError());\r\n          }\r\n          return;\r\n        }\r\n        this.exportWithOgre(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n      } else {\r\n        this.exportToFile(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n      }\r\n    };\r\n\r\n    return new Observable(doExport);\r\n  }\r\n\r\n  private exportToFile(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const olFormat = new olformat[format]();\r\n    const featuresText = olFormat.writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const fileName = `${title}.${format.toLowerCase()}`;\r\n\r\n    downloadContent(featuresText, 'text/plain;charset=utf-8', fileName);\r\n    observer.complete();\r\n  }\r\n\r\n  private exportWithOgre(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: string,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const featuresText = new olformat.GeoJSON().writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const url = `${this.ogreUrl}/convert`;\r\n    const form = document.createElement('form');\r\n    form.setAttribute('method', 'post');\r\n    form.setAttribute('action', url);\r\n\r\n    const geojsonField = document.createElement('input');\r\n    geojsonField.setAttribute('type', 'hidden');\r\n    geojsonField.setAttribute('name', 'json');\r\n    geojsonField.setAttribute('value', featuresText);\r\n    form.appendChild(geojsonField);\r\n\r\n    const outputNameField = document.createElement('input');\r\n    const outputName = format === 'Shapefile' ? `${title}.zip` : title;\r\n    outputNameField.setAttribute('type', 'hidden');\r\n    outputNameField.setAttribute('name', 'outputName');\r\n    outputNameField.setAttribute('value', outputName);\r\n    form.appendChild(outputNameField);\r\n\r\n    const ogreFormat = ExportService.ogreFormats[format];\r\n    const outputFormatField = document.createElement('input');\r\n    outputFormatField.setAttribute('type', 'hidden');\r\n    outputFormatField.setAttribute('name', 'formatOutput');\r\n    outputFormatField.setAttribute('value', ogreFormat);\r\n    form.appendChild(outputFormatField);\r\n\r\n    document.body.appendChild(form);\r\n    form.submit();\r\n    document.body.removeChild(form);\r\n\r\n    observer.complete();\r\n  }\r\n\r\n  private nothingToExport(olFeatures: OlFeature[], format: string): boolean {\r\n    if (olFeatures.length === 0) { return true; }\r\n    if (format === 'GPX') {\r\n      const pointOrLine = olFeatures.find((olFeature) => {\r\n        return ['Point', 'LineString'].indexOf(olFeature.getGeometry().getType()) >= 0;\r\n      });\r\n      return pointOrLine === undefined;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","export class ImportError extends Error {}\r\n\r\nexport class ImportInvalidFileError extends ImportError {\r\n  constructor() {\r\n    super('Invalid file.');\r\n    Object.setPrototypeOf(this, ImportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportUnreadableFileError extends ImportError {\r\n  constructor() {\r\n      super('Failed to read file.');\r\n      Object.setPrototypeOf(this, ImportUnreadableFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportNothingToImportError extends ImportError {\r\n  constructor() {\r\n      super('Nothing to import.');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n","import * as olStyle from 'ol/style';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { FeatureDataSourceOptions } from '../../datasource/shared/datasources/feature-datasource.interface';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { featureToOl, moveToOlFeatures } from '../../feature/shared/feature.utils';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { QueryableDataSourceOptions } from '../../query/shared/query.interfaces';\r\n\r\nexport function addLayerAndFeaturesToMap(features: Feature[], map: IgoMap, layerTitle: string): VectorLayer {\r\n  const olFeatures = features.map((feature: Feature) => featureToOl(feature, map.projection));\r\n\r\n  const r = Math.floor(Math.random() * 255);\r\n  const g = Math.floor(Math.random() * 255);\r\n  const b = Math.floor(Math.random() * 255);\r\n  const stroke = new olStyle.Stroke({\r\n    color: [r, g, b, 1],\r\n    width: 2\r\n  });\r\n\r\n  const fill = new olStyle.Fill({\r\n    color: [r, g, b, 0.4]\r\n  });\r\n  const sourceOptions: FeatureDataSourceOptions & QueryableDataSourceOptions = {\r\n    queryable: true\r\n  };\r\n  const source = new FeatureDataSource(sourceOptions);\r\n  source.ol.addFeatures(olFeatures);\r\n  const layer = new VectorLayer({\r\n    title: layerTitle,\r\n    source,\r\n    style: new olStyle.Style({\r\n      stroke,\r\n      fill,\r\n      image: new olStyle.Circle({\r\n        radius: 5,\r\n        stroke,\r\n        fill\r\n      })\r\n    })\r\n  });\r\n  map.addLayer(layer);\r\n  moveToOlFeatures(map, olFeatures);\r\n\r\n  return layer;\r\n}\r\n\r\nexport function handleFileImportSuccess(\r\n  file: File,\r\n  features: Feature[],\r\n  map: IgoMap,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  if (features.length === 0) {\r\n    this.handleNothingToImportError(file, messageService, languageService);\r\n    return;\r\n  }\r\n\r\n  const layerTitle = computeLayerTitleFromFile(file);\r\n  addLayerAndFeaturesToMap(features, map, layerTitle);\r\n\r\n  const translate = languageService.translate;\r\n  const messageTitle = translate.instant('igo.geo.dropGeoFile.success.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.success.text', {\r\n      value: layerTitle\r\n  });\r\n  messageService.success(message, messageTitle);\r\n}\r\n\r\nexport function handleFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.invalid.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.invalid.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToImportError(\r\n  file: File,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.empty.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.empty.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function getFileExtension(file: File): string {\r\n  return file.name.split('.').pop().toLowerCase();\r\n}\r\n\r\nexport function computeLayerTitleFromFile(file: File): string {\r\n  return file.name.substr(0, file.name.lastIndexOf('.'));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { ImportInvalidFileError, ImportUnreadableFileError } from './import.errors';\r\nimport { computeLayerTitleFromFile, getFileExtension } from './import.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImportService {\r\n\r\n  static allowedMimeTypes = [\r\n    'application/gml+xml',\r\n    'application/vnd.google-earth.kml+xml',\r\n    'application/gpx+xml',\r\n    'application/json'\r\n  ];\r\n\r\n  static allowedZipMimeTypes = [\r\n    'application/zip',\r\n    'application/x-zip-compressed',\r\n    'application/x-zip'\r\n  ];\r\n\r\n  static allowedExtensions = [\r\n    'geojson',\r\n    'kml',\r\n    'gpx',\r\n    'json',\r\n    'gml'\r\n  ];\r\n\r\n  private ogreUrl: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private config: ConfigService\r\n  ) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n  }\r\n\r\n  import(file: File, projectionIn = 'EPSG:4326', projectionOut = 'EPSG:4326'): Observable<Feature[]> {\r\n    return this.importAsync(file, projectionIn, projectionOut);\r\n  }\r\n\r\n  private getFileImporter(file: File): (file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) => void {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n    const allowedMimeTypes = [...ImportService.allowedMimeTypes, ...ImportService.allowedZipMimeTypes];\r\n    const allowedExtensions = ImportService.allowedExtensions;\r\n\r\n    if (allowedMimeTypes.indexOf(mimeType) < 0 && allowedExtensions.indexOf(extension) < 0) {\r\n      return undefined;\r\n    } else if (mimeType === 'application/json' || ['json', 'geojson', 'kml'].indexOf(extension) >= 0) {\r\n      return this.importFile;\r\n    } else if (this.ogreUrl !== undefined) {\r\n      return this.importFileWithOgre;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private importAsync(file: File, projectionIn: string, projectionOut: string): Observable<Feature[]> {\r\n    const doImport = (observer: Observer<Feature[]>) => {\r\n      const importer = this.getFileImporter(file);\r\n      if (importer === undefined) {\r\n        observer.error(new ImportInvalidFileError());\r\n        return;\r\n      }\r\n\r\n      importer.call(this, file, observer, projectionIn, projectionOut);\r\n    };\r\n\r\n    return new Observable(doImport);\r\n  }\r\n\r\n  private importFile(file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event: any) => {\r\n      try {\r\n        const features = this.parseFeaturesFromFile(\r\n          file,\r\n          event.target.result,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n        observer.next(features);\r\n      } catch (e) {\r\n        observer.error(new ImportUnreadableFileError());\r\n      }\r\n\r\n      observer.complete();\r\n    };\r\n\r\n    reader.onerror = evt => {\r\n      observer.error(new ImportUnreadableFileError());\r\n    };\r\n\r\n    reader.readAsText(file, 'UTF-8');\r\n  }\r\n\r\n  private importFileWithOgre(file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) {\r\n    const url = `${this.ogreUrl}/convert`;\r\n    const formData = new FormData();\r\n    formData.append('upload', file);\r\n    formData.append('sourceSrs', projectionIn);\r\n    formData.append('targetSrs', projectionOut);\r\n    formData.append('formatOutput', 'GEOJSON');\r\n    formData.append('skipFailures', '');\r\n\r\n    this.http\r\n      .post(url, formData, {headers: new HttpHeaders()})\r\n      .subscribe(\r\n        (response: {errors?: string[]} | object | null) => {\r\n          if (response === null) {\r\n            observer.error(new ImportUnreadableFileError());\r\n            return;\r\n          }\r\n\r\n          const errors = (response as any).errors || [];\r\n          if (errors.length > 0) {\r\n            observer.error(new ImportUnreadableFileError());\r\n          } else {\r\n            const features = this.parseFeaturesFromGeoJSON(file, response, projectionOut);\r\n            observer.next(features);\r\n            observer.complete();\r\n          }\r\n        },\r\n        (error: Error) => {\r\n          observer.error(new ImportUnreadableFileError());\r\n        }\r\n      );\r\n  }\r\n\r\n  private parseFeaturesFromFile(file: File, data: string, projectionIn: string, projectionOut: string): Feature[] {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n\r\n    const GeoJSON = new olformat.GeoJSON();\r\n\r\n    let format;\r\n    if (mimeType === 'application/vnd.google-earth.kml+xml') {\r\n      format = new olformat.KML();\r\n    } else if (mimeType === 'application/gml+xml') {\r\n      format = new olformat.GML();\r\n    } else if (mimeType === 'application/gpx+xml') {\r\n      format = new olformat.GPX();\r\n    } else {\r\n      switch (extension) {\r\n        case 'kml':\r\n          format = new olformat.KML();\r\n          break;\r\n       case 'gpx':\r\n          format = new olformat.GPX();\r\n          break;\r\n        case 'gml':\r\n          format = new olformat.GML();\r\n          break;\r\n        default:\r\n          format = GeoJSON;\r\n          break;\r\n      }\r\n    }\r\n\r\n    const olFeatures = format.readFeatures(data, {\r\n      dataProjection: projectionIn,\r\n      featureProjection: projectionOut\r\n    });\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(GeoJSON.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n\r\n  private parseFeaturesFromGeoJSON(file: File, data: object, projectionOut: string): Feature[] {\r\n    const olFormat = new olformat.GeoJSON();\r\n    const olFeatures = olFormat.readFeatures(data);\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(olFormat.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n}\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\n\r\nimport { handleFileExportError } from '../shared/export.utils';\r\nimport { ExportOptions } from '../shared/export.interface';\r\nimport { ExportFormat } from '../shared/export.type';\r\nimport { ExportService } from '../shared/export.service';\r\nimport { ImportService } from '../shared/import.service';\r\nimport { handleFileImportSuccess, handleFileImportError } from '../shared/import.utils';\r\n\r\n@Component({\r\n  selector: 'igo-import-export',\r\n  templateUrl: './import-export.component.html',\r\n  styleUrls: ['./import-export.component.scss']\r\n})\r\nexport class ImportExportComponent implements OnDestroy, OnInit {\r\n\r\n  public form: FormGroup;\r\n  public formats = ExportFormat;\r\n  public layers: VectorLayer[];\r\n  public inputProj: string = 'EPSG:4326';\r\n\r\n  private layers$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  constructor(\r\n    private importService: ImportService,\r\n    private exportService: ExportService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(layers => {\r\n      this.layers = layers\r\n        .filter((layer: Layer) => {\r\n          return layer instanceof VectorLayer && layer.exportable === true;\r\n        }) as VectorLayer[];\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  importFiles(files: File[]) {\r\n    for (const file of files) {\r\n      this.importService\r\n        .import(file, this.inputProj)\r\n        .subscribe(\r\n          (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n          (error: Error) => this.onFileImportError(file, error)\r\n        );\r\n    }\r\n  }\r\n\r\n  handleExportFormSubmit(data: ExportOptions) {\r\n    const layer = this.map.getLayerById(data.layer);\r\n    const olFeatures = layer.dataSource.ol.getFeatures();\r\n    this.exportService\r\n      .export(olFeatures, data.format, layer.title, this.map.projection)\r\n      .subscribe(\r\n        () => {},\r\n        (error: Error) => this.onFileExportError(error)\r\n      );\r\n  }\r\n\r\n  private buildForm() {\r\n    this.form = this.formBuilder.group({\r\n      format: ['', [Validators.required]],\r\n      layer: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    handleFileImportError(file, error, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileExportError(error: Error) {\r\n    handleFileExportError(error, this.messageService, this.languageService);\r\n  }\r\n}\r\n","import { Directive, HostListener, EventEmitter, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\nimport { DragAndDropDirective } from '@igo2/common';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { ImportService } from './import.service';\r\nimport { handleFileImportSuccess, handleFileImportError } from '../shared/import.utils';\r\n\r\n@Directive({\r\n  selector: '[igoDropGeoFile]'\r\n})\r\nexport class DropGeoFileDirective extends DragAndDropDirective implements OnInit, OnDestroy {\r\n\r\n  protected filesDropped: EventEmitter<File[]> = new EventEmitter();\r\n  protected filesInvalid: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  private filesDropped$$: Subscription;\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    private component: MapBrowserComponent,\r\n    private importService: ImportService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filesDropped$$ = this.filesDropped.subscribe((files: File[]) => {\r\n      this.onFilesDropped(files);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.filesDropped$$.unsubscribe();\r\n  }\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(evt) {\r\n    super.onDragOver(evt);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(evt) {\r\n    super.onDragLeave(evt);\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(evt) {\r\n    super.onDrop(evt);\r\n  }\r\n\r\n  private onFilesDropped(files: File[]) {\r\n    for (const file of files) {\r\n      this.importService\r\n        .import(file)\r\n        .subscribe(\r\n          (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n          (error: Error) => this.onFileImportError(file, error)\r\n        );\r\n    }\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    handleFileImportError(file, error, this.messageService, this.languageService);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatButtonModule,\r\n  MatTabsModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule, IgoDrapDropModule } from '@igo2/common';\r\n\r\nimport { ImportExportComponent } from './import-export/import-export.component';\r\nimport { DropGeoFileDirective } from './shared/drop-geo-file.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule,\r\n    IgoDrapDropModule\r\n  ],\r\n  exports: [ImportExportComponent, DropGeoFileDirective],\r\n  declarations: [ImportExportComponent, DropGeoFileDirective]\r\n})\r\nexport class IgoImportExportModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoImportExportModule\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatSliderModule,\r\n  MatBadgeModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoListModule,\r\n  IgoCollapsibleModule,\r\n  IgoImageModule\r\n} from '@igo2/common';\r\n\r\nimport { LayerService } from './shared/layer.service';\r\nimport { StyleService } from './shared/style.service';\r\nimport { LayerListService } from './layer-list/layer-list.service';\r\nimport { LayerItemComponent } from './layer-item/layer-item.component';\r\nimport { LayerLegendComponent } from './layer-legend/layer-legend.component';\r\nimport { LayerListComponent } from './layer-list/layer-list.component';\r\nimport { LayerListBindingDirective } from './layer-list/layer-list-binding.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    MatListModule,\r\n    MatSliderModule,\r\n    MatBadgeModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoImageModule\r\n  ],\r\n  exports: [\r\n    LayerItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListBindingDirective\r\n  ],\r\n  declarations: [\r\n    LayerItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListBindingDirective\r\n  ]\r\n})\r\nexport class IgoLayerModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLayerModule,\r\n      providers: [LayerService, StyleService, LayerListService]\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoConfirmDialogModule } from '@igo2/common';\r\n\r\nimport { MapBrowserComponent } from './map-browser/map-browser.component';\r\nimport { ZoomButtonComponent } from './zoom-button/zoom-button.component';\r\nimport { GeolocateButtonComponent } from './geolocate-button/geolocate-button.component';\r\nimport { RotationButtonComponent } from './rotation-button/rotation-button.component';\r\nimport { BaseLayersSwitcherComponent } from './baselayers-switcher/baselayers-switcher.component';\r\nimport { MiniBaseMapComponent } from './baselayers-switcher/mini-basemap.component';\r\nimport { MapOfflineDirective } from './shared/mapOffline.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoLanguageModule,\r\n    IgoConfirmDialogModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule\r\n  ],\r\n  exports: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapOfflineDirective\r\n  ],\r\n  declarations: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapOfflineDirective\r\n  ]\r\n})\r\nexport class IgoMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit\r\n} from '../shared/measure.enum';\r\nimport { computeBestAreaUnit, computeBestLengthUnit } from '../shared/measure.utils';\r\n\r\n/**\r\n * Measurer item\r\n */\r\n@Component({\r\n  selector: 'igo-measurer-item',\r\n  templateUrl: './measurer-item.component.html',\r\n  styleUrls: ['./measurer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerItemComponent implements OnDestroy {\r\n\r\n  /**\r\n   * Measure observable\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<number> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the measure observable when the auto mode is on\r\n   * @internal\r\n   */\r\n  public measure$$: Subscription;\r\n\r\n  /**\r\n   * Measure type\r\n   */\r\n  @Input() measureType: MeasureType;\r\n\r\n  /**\r\n   * Measure unit\r\n   */\r\n  @Input() measureUnit: MeasureAreaUnit | MeasureLengthUnit;\r\n\r\n  /**\r\n   * Measure\r\n   */\r\n  @Input()\r\n  set measure(value: number) {\r\n    this.measure$.next(value);\r\n  }\r\n  get measure(): number { return this.measure$.value; }\r\n\r\n  /**\r\n   * Whther measure units should be automatically determined\r\n   */\r\n  @Input()\r\n  set auto(value: boolean) { this.toggleAutoUnit(value); }\r\n  get auto(): boolean { return this._auto; }\r\n  private _auto: boolean = false;\r\n\r\n  /**\r\n   * Placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Event emitted when the measure unit changes\r\n   */\r\n  @Output() measureUnitChange = new EventEmitter<MeasureAreaUnit | MeasureLengthUnit>();\r\n\r\n  /**\r\n   * Available measure units for the measure type given\r\n   * @internal\r\n   */\r\n  get measureUnits(): string[] {\r\n    if (this.measureType === MeasureType.Area) {\r\n      return Object.values(MeasureAreaUnit);\r\n    }\r\n    return Object.values(MeasureLengthUnit);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Toggle the auto unit off\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.toggleAutoUnit(false);\r\n  }\r\n\r\n  /**\r\n   * Set the measure unit\r\n   * @internal\r\n   */\r\n  onMeasureUnitChange(unit: MeasureAreaUnit | MeasureLengthUnit) {\r\n    this.measureUnit = unit;\r\n    this.measureUnitChange.emit(unit);\r\n  }\r\n\r\n  private toggleAutoUnit(toggle: boolean) {\r\n    if (this.measure$$ !== undefined) {\r\n      this.measure$$.unsubscribe();\r\n    }\r\n    if (toggle === true) {\r\n      this.measure$$ = this.measure$.subscribe((measure: number) => {\r\n        this.computeBestMeasureUnit(measure);\r\n      });\r\n    }\r\n    this._auto = toggle;\r\n  }\r\n\r\n  private computeBestMeasureUnit(measure: number) {\r\n    let measureUnit = this.measureUnit;\r\n    if (this.measureType === MeasureType.Area) {\r\n      measureUnit = computeBestAreaUnit(measure);\r\n    } else if (this.measureType === MeasureType.Length) {\r\n      measureUnit = computeBestLengthUnit(measure);\r\n    }\r\n    if (measureUnit !== this.measureUnit) {\r\n      this.onMeasureUnitChange(measureUnit);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSelectModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoEntityTableModule } from '@igo2/common';\r\n\r\nimport { MeasureFormatPipe } from './measure-format.pipe';\r\nimport { MeasurerItemComponent } from './measurer-item.component';\r\nimport { MeasurerComponent } from './measurer.component';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoEntityTableModule\r\n  ],\r\n  declarations: [\r\n    MeasureFormatPipe,\r\n    MeasurerItemComponent,\r\n    MeasurerComponent,\r\n    MeasurerDialogComponent\r\n  ],\r\n  exports: [\r\n    MeasureFormatPipe,\r\n    MeasurerComponent\r\n  ],\r\n  entryComponents: [\r\n    MeasurerDialogComponent\r\n  ]\r\n})\r\nexport class IgoMeasurerModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { IgoMeasurerModule } from './measurer/measurer.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoMeasurerModule\r\n  ]\r\n})\r\nexport class IgoMeasureModule {}\r\n","export enum OverlayAction {\r\n    None,\r\n    Move,\r\n    Zoom,\r\n    ZoomIfOutMapExtent\r\n  }\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayAction } from './overlay.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OverlayService {\r\n  public features$ = new BehaviorSubject<[Feature[], OverlayAction]>([\r\n    [],\r\n    undefined\r\n  ]);\r\n\r\n  constructor() {}\r\n\r\n  setFeatures(features: Feature[], action: OverlayAction = OverlayAction.None) {\r\n    this.features$.next([features, action]);\r\n  }\r\n\r\n  clear() {\r\n    this.features$.next([[], OverlayAction.None]);\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayService } from '../shared/overlay.service';\r\nimport { OverlayAction } from '../shared/overlay.enum';\r\n\r\n@Directive({\r\n  selector: '[igoOverlay]'\r\n})\r\nexport class OverlayDirective implements OnInit, OnDestroy {\r\n  private features$$: Subscription;\r\n  private format = new olFormatGeoJSON();\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private overlayService: OverlayService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.features$$ = this.overlayService.features$.subscribe(res =>\r\n      this.handleFeatures(res[0], res[1])\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.features$$.unsubscribe();\r\n  }\r\n\r\n  private handleFeatures(features: Feature[], action: OverlayAction) {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { OverlayDirective } from './shared/overlay.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [OverlayDirective],\r\n  declarations: [OverlayDirective]\r\n})\r\nexport class IgoOverlayModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoOverlayModule\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { saveAs } from 'file-saver';\r\nimport * as jsPDF from 'jspdf';\r\nimport * as _html2canvas from 'html2canvas';\r\nimport * as JSZip from 'jszip';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { MessageService, ActivityService, LanguageService } from '@igo2/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { formatScale } from '../../map/shared/map.utils';\r\nimport { LayerLegend } from '../../layer/shared/layers/layer.interface';\r\nimport { getLayersLegends } from '../../layer/utils/legend';\r\n\r\nimport { PrintOptions } from './print.interface';\r\n\r\nconst html2canvas = _html2canvas;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrintService {\r\n  zipFile: JSZip;\r\n  nbFileToProcess: number;\r\n  activityId: string;\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private activityService: ActivityService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  print(map: IgoMap, options: PrintOptions): Subject<any> {\r\n    const status$ = new Subject();\r\n\r\n    const paperFormat: string = options.paperFormat;\r\n    const resolution = +options.resolution;  // Default is 96\r\n    const orientation = options.orientation;\r\n\r\n    this.activityId = this.activityService.register();\r\n    const doc = new jsPDF({\r\n      orientation,\r\n      format: paperFormat.toLowerCase()\r\n    });\r\n\r\n    const dimensions = [\r\n      doc.internal.pageSize.width,\r\n      doc.internal.pageSize.height\r\n    ];\r\n\r\n    const margins = [20, 10, 20, 10];\r\n    const width = dimensions[0] - margins[3] - margins[1];\r\n    const height = dimensions[1] - margins[0] - margins[2];\r\n    const size = [width, height];\r\n\r\n    if (options.title !== undefined) {\r\n      this.addTitle(doc, options.title, dimensions[0]);\r\n    }\r\n\r\n    if (options.showProjection === true || options.showScale === true) {\r\n      this.addProjScale(\r\n        doc,\r\n        map,\r\n        resolution,\r\n        options.showProjection,\r\n        options.showScale\r\n      );\r\n    }\r\n    if (options.comment !== '') {\r\n      this.addComment(doc, options.comment);\r\n    }\r\n\r\n    this.addMap(doc, map, resolution, size, margins).subscribe(\r\n      (status: SubjectStatus) => {\r\n        if (status === SubjectStatus.Done) {\r\n          if (options.showLegend === true) {\r\n            this.addLegend(doc, map, margins, resolution);\r\n          } else {\r\n            this.saveDoc(doc);\r\n          }\r\n        }\r\n\r\n        if (status === SubjectStatus.Done || status === SubjectStatus.Error) {\r\n          this.activityService.unregister(this.activityId);\r\n          status$.next(SubjectStatus.Done);\r\n        }\r\n      }\r\n    );\r\n\r\n    return status$;\r\n  }\r\n\r\n  /**\r\n   * Get html code for all layers legend\r\n   * @param  map IgoMap\r\n   * @param  width The width that the legend need to be\r\n   * @return Html code for the legend\r\n   */\r\n  getLayersLegendHtml(map: IgoMap, width: number, resolution: number): string {\r\n    let html = '';\r\n    const legends = getLayersLegends(map.layers, map.viewController.getScale(resolution));\r\n    if (legends.length === 0) {\r\n      return html;\r\n    }\r\n\r\n    // Define important style to be sure that all container is convert\r\n    // to image not just visible part\r\n    html += '<style media=\"screen\" type=\"text/css\">';\r\n    html += '.html2canvas-container { width: ' + width;\r\n    html += 'mm !important; height: 2000px !important; }';\r\n    html += '</style>';\r\n    html += '<font size=\"2\" face=\"Courier New\" >';\r\n    html += '<div style=\"display:inline-block;max-width:' + width + 'mm\">';\r\n    // For each legend, define an html table cell\r\n    legends.forEach((legend: LayerLegend) => {\r\n      html +=\r\n        '<table border=1 style=\"display:inline-block;vertical-align:top\">';\r\n      html += '<tr><th width=\"170px\">' + legend.title + '</th>';\r\n      html += '<td><img class=\"printImageLegend\" src=\"' + legend.url + '\">';\r\n      html += '</td></tr></table>';\r\n    });\r\n    html += '</div>';\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Get all the legend in a single image\r\n   * * @param  format - Image format. default value to \"png\"\r\n   * @return The image of the legend\r\n   */\r\n  getLayersLegendImage(map, format: string = 'png', doZipFile: boolean, resolution: number) {\r\n    const status$ = new Subject();\r\n    // Get html code for the legend\r\n    const width = 200; // milimeters unit, originally define for document pdf\r\n    let html = this.getLayersLegendHtml(map, width, resolution);\r\n    const that = this;\r\n    format = format.toLowerCase();\r\n\r\n    // If no legend show No LEGEND in an image\r\n    if (html.length === 0) {\r\n      html = '<font size=\"12\" face=\"Courier New\" >';\r\n      html += '<div align=\"center\"><b>NO LEGEND</b></div>';\r\n    }\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n    // Define event to execute after all images are loaded to create the canvas\r\n    setTimeout(() => {\r\n      html2canvas(div, { useCORS: true }).then(canvas => {\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          if (!doZipFile) {\r\n            // Save the canvas as file\r\n            that.saveCanvasImageAsFile(canvas, 'legendImage', format);\r\n          } else {\r\n            // Add the canvas to zip\r\n            that.generateCanvaFileToZip(canvas, 'legendImage' + '.' + format);\r\n          }\r\n          div.parentNode.removeChild(div); // remove temp div (IE)\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n        }\r\n        status$.next(status);\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  private addTitle(doc: jsPDF, title: string, pageWidth: number) {\r\n    const pdfResolution = 96;\r\n    const titleSize = 32;\r\n    const titleWidth = ((titleSize * 25.4) / pdfResolution) * title.length;\r\n\r\n    let titleMarginLeft;\r\n    if (titleWidth > pageWidth) {\r\n      titleMarginLeft = 0;\r\n    } else {\r\n      titleMarginLeft = (pageWidth - titleWidth) / 2;\r\n    }\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(32);\r\n    doc.text(title, titleMarginLeft, 15);\r\n  }\r\n\r\n  /**\r\n   * Add comment to the document\r\n   * * @param  doc - pdf document\r\n   * * @param  comment - Comment to add in the document\r\n   * * @param  size - Size of the document\r\n   */\r\n  private addComment(doc: jsPDF, comment: string) {\r\n    const commentSize = 16;\r\n    const commentMarginLeft = 20;\r\n    const marginBottom = 5;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(commentSize);\r\n    doc.text(comment, commentMarginLeft, heightPixels);\r\n  }\r\n  /**\r\n   * Add projection and/or scale to the document\r\n   * @param  doc - pdf document\r\n   * @param  map - Map of the app\r\n   * @param  dpi - DPI resolution of the document\r\n   * @param  projection - Bool to indicate if projection need to be added\r\n   * @param  scale - Bool to indicate if scale need to be added\r\n   */\r\n  private addProjScale(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    dpi: number,\r\n    projection: boolean,\r\n    scale: boolean\r\n  ) {\r\n    const translate = this.languageService.translate;\r\n    const projScaleSize = 16;\r\n    const projScaleMarginLeft = 20;\r\n    const marginBottom = 15;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    let textProjScale: string = '';\r\n    if (projection === true) {\r\n      const projText = translate.instant('igo.geo.printForm.projection');\r\n      textProjScale += projText + ': ' + map.projection;\r\n    }\r\n    if (scale === true) {\r\n      if (projection === true) {\r\n        textProjScale += '   ';\r\n      }\r\n      const scaleText = translate.instant('igo.geo.printForm.scale');\r\n      const mapScale = map.viewController.getScale(dpi);\r\n      textProjScale += scaleText + ' ~ 1 ' + formatScale(mapScale);\r\n    }\r\n    doc.setFont('courier');\r\n    doc.setFontSize(projScaleSize);\r\n    doc.text(textProjScale, projScaleMarginLeft, heightPixels);\r\n  }\r\n\r\n  /**\r\n   * Add the legend to the document\r\n   * @param  doc - Pdf document where legend will be added\r\n   * @param  map - Map of the app\r\n   * @param  margins - Page margins\r\n   */\r\n  private addLegend(doc: jsPDF, map: IgoMap, margins: Array<number>, resolution: number) {\r\n    const that = this;\r\n    // Get html code for the legend\r\n    const width = doc.internal.pageSize.width;\r\n    const html = this.getLayersLegendHtml(map, width, resolution);\r\n    // If no legend, save the map directly\r\n    if (html === '') {\r\n      this.saveDoc(doc);\r\n      return true;\r\n    }\r\n\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n    html2canvas(div, { useCORS: true }).then(canvas => {\r\n      let imgData;\r\n      const position = 10;\r\n\r\n      imgData = canvas.toDataURL('image/png');\r\n      doc.addPage();\r\n      const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n      doc.addImage(imgData, 'PNG', 10, position, imageSize[0], imageSize[1]);\r\n      that.saveDoc(doc);\r\n      div.parentNode.removeChild(div); // remove temp div (IE style)\r\n    });\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n  }\r\n\r\n  private addCanvas(\r\n    doc: jsPDF,\r\n    canvas: HTMLCanvasElement,\r\n    margins: Array<number>\r\n  ) {\r\n    let image;\r\n\r\n    image = canvas.toDataURL('image/jpeg');\r\n\r\n    if (image !== undefined) {\r\n      const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n      doc.addImage(\r\n        image,\r\n        'JPEG',\r\n        margins[3],\r\n        margins[0],\r\n        imageSize[0],\r\n        imageSize[1]\r\n      );\r\n      doc.rect(margins[3], margins[0], imageSize[0], imageSize[1]);\r\n    }\r\n  }\r\n\r\n  // TODO fix printing with image resolution\r\n  private addMap(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    resolution: number,\r\n    size: Array<number>,\r\n    margins: Array<number>\r\n  ) {\r\n    const status$ = new Subject();\r\n\r\n    const mapSize = map.ol.getSize();\r\n    const extent = map.ol.getView().calculateExtent(mapSize);\r\n\r\n    const widthPixels = Math.round((size[0] * resolution) / 25.4);\r\n    const heightPixels = Math.round((size[1] * resolution) / 25.4);\r\n\r\n    let timeout;\r\n\r\n    map.ol.once('postcompose', (event: any) => {\r\n      const canvas = event.context.canvas;\r\n      const mapStatus$$ = map.status$.subscribe((mapStatus: SubjectStatus) => {\r\n        clearTimeout(timeout);\r\n\r\n        if (mapStatus !== SubjectStatus.Done) {\r\n          return;\r\n        }\r\n\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      });\r\n\r\n      // If no loading as started after 200ms, then probably no loading\r\n      // is required.\r\n      timeout = window.setTimeout(() => {\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      }, 200);\r\n    });\r\n\r\n    this.renderMap(map, [widthPixels, heightPixels], extent);\r\n\r\n    return status$;\r\n  }\r\n\r\n  defineNbFileToProcess(nbFileToProcess) {\r\n    this.nbFileToProcess = nbFileToProcess;\r\n  }\r\n\r\n  /**\r\n   * Download an image of the map with addition of informations\r\n   * @param  map - Map of the app\r\n   * @param  format - Image format. default value to \"png\"\r\n   * @param  projection - Indicate if projection need to be add. Default to false\r\n   * @param  scale - Indicate if scale need to be add. Default to false\r\n   * @param  legend - Indicate if the legend of layers need to be download. Default to false\r\n   * @param  title - Title to add for the map - Default to blank\r\n   * @param  comment - Comment to add for the map - Default to blank\r\n   * @param  doZipFile - Indicate if we do a zip with the file\r\n   * @return Image file of the map with extension format given as parameter\r\n   */\r\n  downloadMapImage(\r\n    map: IgoMap,\r\n    resolution: number,\r\n    format = 'png',\r\n    projection = false,\r\n    scale = false,\r\n    legend = false,\r\n    title = '',\r\n    comment = '',\r\n    doZipFile = true\r\n  ) {\r\n    const status$ = new Subject();\r\n    // const resolution = map.ol.getView().getResolution();\r\n    this.activityId = this.activityService.register();\r\n    const translate = this.languageService.translate;\r\n    map.ol.once('postcompose', (event: any) => {\r\n      format = format.toLowerCase();\r\n      const context = event.context;\r\n      const newCanvas = document.createElement('canvas');\r\n      const newContext = newCanvas.getContext('2d');\r\n      // Postion in height to set the canvas in new canvas\r\n      let positionHCanvas = 0;\r\n      // Position in width to set the Proj/Scale in new canvas\r\n      let positionWProjScale = 10;\r\n      // Get height/width of map canvas\r\n      const width = context.canvas.width;\r\n      let height = context.canvas.height;\r\n      // Set Font to calculate comment width\r\n      newContext.font = '20px Calibri';\r\n      const commentWidth = newContext.measureText(comment).width;\r\n      // Add height for title if defined\r\n      height = title !== '' ? height + 30 : height;\r\n      // Add height for projection or scale (same line) if defined\r\n      height = projection !== false || scale !== false ? height + 30 : height;\r\n      const positionHProjScale = height - 10;\r\n      // Define number of line depending of the comment length\r\n      const commentNbLine = Math.ceil(commentWidth / width);\r\n      // Add height for multiline comment if defined\r\n      height = comment !== '' ? height + commentNbLine * 30 : height;\r\n      let positionHComment = height - commentNbLine * 20 + 5;\r\n      // Set the new canvas with the new calculated size\r\n      newCanvas.width = width;\r\n      newCanvas.height = height;\r\n      // Patch Jpeg default black background to white\r\n      if (format === 'jpeg') {\r\n        newContext.fillStyle = '#ffffff';\r\n        newContext.fillRect(0, 0, width, height);\r\n        newContext.fillStyle = '#000000';\r\n      }\r\n      // If a title need to be added to canvas\r\n      if (title !== '') {\r\n        // Set font for title\r\n        newContext.font = '26px Calibri';\r\n        positionHCanvas = 30;\r\n        newContext.textAlign = 'center';\r\n        newContext.fillText(title, width / 2, 20);\r\n      }\r\n      // Set font for next section\r\n      newContext.font = '20px Calibri';\r\n      // If projection need to be added to canvas\r\n      if (projection !== false) {\r\n        const projText = translate.instant('igo.geo.printForm.projection');\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          projText + ': ' + map.projection,\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n        positionWProjScale += 200; // Width position change for scale position\r\n      }\r\n      // If scale need to be added to canvas\r\n      if (scale !== false) {\r\n        const scaleText = translate.instant('igo.geo.printForm.scale');\r\n        const mapScale = map.viewController.getScale(resolution);\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          scaleText + ' ~ 1 : ' + formatScale(mapScale),\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n      }\r\n      // If a comment need to be added to canvas\r\n      if (comment !== '') {\r\n        newContext.textAlign = 'center';\r\n        // If only one line, no need to multiline the comment\r\n        if (commentNbLine === 1) {\r\n          newContext.fillText(comment, width / 2, positionHComment);\r\n        } else {\r\n          // Separate the setenses to be approx. the same length\r\n          const nbCommentChar = comment.length;\r\n          const CommentLengthToCut = Math.floor(nbCommentChar / commentNbLine);\r\n          let commentCurrentLine = '';\r\n          let positionFirstCutChar = 0;\r\n          let positionLastBlank;\r\n          // Loop for the number of line calculated\r\n          for (let i = 0; i < commentNbLine; i++) {\r\n            // For all line except last\r\n            if (commentNbLine - 1 > i) {\r\n              // Get comment current line to find the right place tu cut comment\r\n              commentCurrentLine = comment.substr(\r\n                positionFirstCutChar,\r\n                CommentLengthToCut\r\n              );\r\n              // Cut the setence at blank\r\n              positionLastBlank = commentCurrentLine.lastIndexOf(' ');\r\n              newContext.fillText(\r\n                commentCurrentLine.substr(0, positionLastBlank),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n              positionFirstCutChar += positionLastBlank;\r\n              // Go to next line for insertion\r\n              positionHComment += 20;\r\n            } else {\r\n              // Don't cut last part\r\n              newContext.fillText(\r\n                comment.substr(positionFirstCutChar),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // Add map to new canvas\r\n      newContext.drawImage(context.canvas, 0, positionHCanvas);\r\n\r\n      let status = SubjectStatus.Done;\r\n      try {\r\n        // Save the canvas as file\r\n        if (!doZipFile) {\r\n          this.saveCanvasImageAsFile(newCanvas, 'map', format);\r\n        } else if (format.toLowerCase() === 'tiff') {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(\r\n            newCanvas,\r\n            'map' + map.projection.replace(':', '_') + '.' + format\r\n          );\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(newCanvas, 'map' + '.' + format);\r\n        }\r\n      } catch (err) {\r\n        status = SubjectStatus.Error;\r\n      }\r\n\r\n      status$.next(status);\r\n\r\n      if (format.toLowerCase() === 'tiff') {\r\n        const tiwContent = this.getWorldFileInformation(map);\r\n        const blob = new Blob([tiwContent], {\r\n          type: 'text/plain;charset=utf-8'\r\n        });\r\n        if (!doZipFile) {\r\n          // saveAs automaticly replace ':' for '_'\r\n          saveAs(blob, 'map' + map.projection + '.tfw');\r\n          this.saveFileProcessing();\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.addFileToZip(\r\n            'map' + map.projection.replace(':', '_') + '.tfw',\r\n            blob\r\n          );\r\n        }\r\n      }\r\n    });\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  private renderMap(map, size, extent) {\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  /**\r\n   * Save document\r\n   * @param  doc - Document to save\r\n   */\r\n  private saveDoc(doc: jsPDF) {\r\n    doc.save('map.pdf');\r\n  }\r\n\r\n  /**\r\n   * Calculate the best Image size to fit in pdf\r\n   * @param doc - Pdf Document\r\n   * @param canvas - Canvas of image\r\n   * @param margins - Page margins\r\n   */\r\n  private getImageSizeToFitPdf(doc, canvas, margins) {\r\n    // Define variable to calculate best size to fit in one page\r\n    const pageHeight =\r\n      doc.internal.pageSize.getHeight() - (margins[0] + margins[2]);\r\n    const pageWidth =\r\n      doc.internal.pageSize.getWidth() - (margins[1] + margins[3]);\r\n    const canHeight = canvas.height;\r\n    const canWidth = canvas.width;\r\n    const heightRatio = canHeight / pageHeight;\r\n    const widthRatio = canWidth / pageWidth;\r\n    const maxRatio = heightRatio > widthRatio ? heightRatio : widthRatio;\r\n    const imgHeigh = maxRatio > 1 ? canHeight / maxRatio : canHeight;\r\n    const imgWidth = maxRatio > 1 ? canWidth / maxRatio : canWidth;\r\n\r\n    return [imgWidth, imgHeigh];\r\n  }\r\n\r\n  /**\r\n   * Get a world file information for tiff\r\n   * @param  map - Map of the app\r\n   */\r\n  private getWorldFileInformation(map) {\r\n    const currentResolution = map.viewController.getResolution();\r\n    const currentExtent = map.getExtent(); // Return [minx, miny, maxx, maxy]\r\n    return [\r\n      currentResolution,\r\n      0,\r\n      0,\r\n      -currentResolution,\r\n      currentExtent[0] + currentResolution / 0.5,\r\n      currentExtent[3] - currentResolution / 0.5\r\n    ].join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Save canvas image as file\r\n   * @param canvas - Canvas to save\r\n   * @param name - Name of the file\r\n   * @param format - file format\r\n   */\r\n  private saveCanvasImageAsFile(canvas, name, format) {\r\n    const blobFormat = 'image/' + format;\r\n    const that = this;\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      // If navigator is Internet Explorer\r\n      if (navigator.msSaveBlob) {\r\n        navigator.msSaveBlob(canvas.msToBlob(), name + '.' + format);\r\n        this.saveFileProcessing();\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          // download image\r\n          saveAs(blob, name + '.' + format);\r\n          that.saveFileProcessing();\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to a zip\r\n   * @param canvas - File to add to the zip\r\n   * @param  name -Name of the fileoverview\r\n   */\r\n  private generateCanvaFileToZip(canvas, name) {\r\n    const blobFormat = 'image/' + 'jpeg';\r\n    const that = this;\r\n    if (\r\n      !this.hasOwnProperty('zipFile') ||\r\n      typeof this.zipFile === 'undefined'\r\n    ) {\r\n      this.zipFile = new JSZip();\r\n    }\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      if (navigator.msSaveBlob) {\r\n        this.addFileToZip(name, canvas.msToBlob());\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          that.addFileToZip(name, blob);\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to zip, if all file are zipped, download\r\n   * @param name - Name of the files\r\n   * @param blob - Contain of file\r\n   */\r\n  private addFileToZip(name, blob) {\r\n    // add file to zip\r\n    this.zipFile.file(name, blob);\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Download zip file\r\n      this.getZipFile();\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  private saveFileProcessing() {\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the zipped file\r\n   * @return Retun a zip file\r\n   */\r\n  private getZipFile() {\r\n    const that = this;\r\n    this.zipFile.generateAsync({ type: 'blob' }).then(blob => {\r\n      // 1) generate the zip file\r\n      saveAs(blob, 'map.zip');\r\n      delete that.zipFile;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\nimport { PrintService } from '../shared/print.service';\r\n\r\n@Component({\r\n  selector: 'igo-print',\r\n  templateUrl: './print.component.html'\r\n})\r\nexport class PrintComponent {\r\n  public disabled = false;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this._outputFormat;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this._outputFormat = value;\r\n  }\r\n  private _outputFormat: PrintOutputFormat;\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this._paperFormat;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this._paperFormat = value;\r\n  }\r\n  private _paperFormat: PrintPaperFormat;\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this._orientation;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this._orientation = value;\r\n  }\r\n  private _orientation: PrintOrientation;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this._imageFormat;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this._imageFormat = value;\r\n  }\r\n  private _imageFormat: PrintSaveImageFormat;\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this._resolution;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this._resolution = value;\r\n  }\r\n  private _resolution: PrintResolution;\r\n\r\n  constructor(private printService: PrintService) {}\r\n\r\n  handleFormSubmit(data: PrintOptions) {\r\n    this.disabled = true;\r\n\r\n    if (data.isPrintService === true) {\r\n      this.printService\r\n        .print(this.map, data)\r\n        .subscribe();\r\n    } else {\r\n      let nbFileToProcess = 1;\r\n\r\n      if (data.showLegend) {\r\n        nbFileToProcess++;\r\n      }\r\n      if (data.imageFormat.toLowerCase() === 'tiff') {\r\n        nbFileToProcess++;\r\n      }\r\n\r\n      this.printService.defineNbFileToProcess(nbFileToProcess);\r\n\r\n      const resolution = +data.resolution;\r\n      this.printService.downloadMapImage(\r\n        this.map,\r\n        resolution,\r\n        data.imageFormat,\r\n        data.showProjection,\r\n        data.showScale,\r\n        data.showLegend,\r\n        data.title,\r\n        data.comment,\r\n        data.doZipFile\r\n      );\r\n      if (data.showLegend) {\r\n        this.printService.getLayersLegendImage(\r\n          this.map,\r\n          data.imageFormat,\r\n          data.doZipFile,\r\n          +resolution\r\n        );\r\n      }\r\n    }\r\n    this.disabled = false;\r\n  }\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const PrintOutputFormat = strEnum(['Pdf', 'Image']);\r\n\r\nexport type PrintOutputFormat = keyof typeof PrintOutputFormat;\r\n\r\nexport const PrintPaperFormat = strEnum([\r\n  'A0',\r\n  'A1',\r\n  'A2',\r\n  'A3',\r\n  'A4',\r\n  'A5',\r\n  'Letter',\r\n  'Legal'\r\n]);\r\nexport type PrintPaperFormat = keyof typeof PrintPaperFormat;\r\n\r\nexport const PrintOrientation = strEnum(['landscape', 'portrait']);\r\nexport type PrintOrientation = keyof typeof PrintOrientation;\r\n\r\nexport const PrintResolution = strEnum(['72', '96', '150', '300']);\r\nexport type PrintResolution = keyof typeof PrintResolution;\r\n\r\nexport const PrintSaveImageFormat = strEnum([\r\n  'Bmp',\r\n  'Gif',\r\n  'Jpeg',\r\n  'Png',\r\n  'Tiff'\r\n]);\r\nexport type PrintSaveImageFormat = keyof typeof PrintSaveImageFormat;\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators\r\n} from '@angular/forms';\r\n\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\n@Component({\r\n  selector: 'igo-print-form',\r\n  templateUrl: './print-form.component.html',\r\n  styleUrls: ['./print-form.component.scss']\r\n})\r\nexport class PrintFormComponent implements OnInit {\r\n  public form: FormGroup;\r\n  public submitted: boolean;\r\n\r\n  public outputFormats = PrintOutputFormat;\r\n  public paperFormats = PrintPaperFormat;\r\n  public orientations = PrintOrientation;\r\n  public resolutions = PrintResolution;\r\n  public imageFormats = PrintSaveImageFormat;\r\n  public isPrintService = true;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this.imageFormatField.value;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this.imageFormatField.setValue(value || PrintSaveImageFormat.Jpeg, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this.outputFormatField.value;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this.outputFormatField.setValue(value || PrintOutputFormat.Pdf, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this.paperFormatField.value;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this.paperFormatField.setValue(value || PrintPaperFormat.Letter, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this.orientationField.value;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this.orientationField.setValue(value || PrintOrientation.landscape, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this.resolutionField.value;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this.resolutionField.setValue(value || PrintResolution['96'], {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get title(): string {\r\n    return this.titleField.value;\r\n  }\r\n  set title(value: string) {\r\n    this.titleField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get comment(): string {\r\n    return this.commentField.value;\r\n  }\r\n  set comment(value: string) {\r\n    this.commentField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showProjection(): boolean {\r\n    return this.showProjectionField.value;\r\n  }\r\n  set showProjection(value: boolean) {\r\n    this.showProjectionField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showScale(): boolean {\r\n    return this.showScaleField.value;\r\n  }\r\n  set showScale(value: boolean) {\r\n    this.showScaleField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showLegend(): boolean {\r\n    return this.showLegendField.value;\r\n  }\r\n  set showLegend(value: boolean) {\r\n    this.showLegendField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get doZipFile(): boolean {\r\n    return this.doZipFileField.value;\r\n  }\r\n  set doZipFile(value: boolean) {\r\n    this.doZipFileField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  get outputFormatField() {\r\n    return (this.form.controls as any).outputFormat as FormControl;\r\n  }\r\n\r\n  get paperFormatField() {\r\n    return (this.form.controls as any).paperFormat as FormControl;\r\n  }\r\n\r\n  get imageFormatField() {\r\n    return (this.form.controls as any).imageFormat as FormControl;\r\n  }\r\n\r\n  get orientationField() {\r\n    return (this.form.controls as any).orientation as FormControl;\r\n  }\r\n\r\n  get resolutionField() {\r\n    return (this.form.controls as any).resolution as FormControl;\r\n  }\r\n\r\n  get commentField() {\r\n    return (this.form.controls as any).comment as FormControl;\r\n  }\r\n\r\n  get showProjectionField() {\r\n    return (this.form.controls as any).showProjection as FormControl;\r\n  }\r\n\r\n  get showScaleField() {\r\n    return (this.form.controls as any).showScale as FormControl;\r\n  }\r\n\r\n  get showLegendField() {\r\n    return (this.form.controls as any).showLegend as FormControl;\r\n  }\r\n\r\n  get doZipFileField() {\r\n    return (this.form.controls as any).doZipFile as FormControl;\r\n  }\r\n\r\n  get titleField() {\r\n    return (this.form.controls as any).title as FormControl;\r\n  }\r\n\r\n  @Output() submit: EventEmitter<PrintOptions> = new EventEmitter();\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n    this.form = this.formBuilder.group({\r\n      title: ['', []],\r\n      comment: ['', []],\r\n      outputFormat: ['', [Validators.required]],\r\n      paperFormat: ['', [Validators.required]],\r\n      imageFormat: [ '', [Validators.required]],\r\n      resolution: ['', [Validators.required]],\r\n      orientation: ['', [Validators.required]],\r\n      showProjection: false,\r\n      showScale: false,\r\n      showLegend: false,\r\n      doZipFile: [{hidden: this.isPrintService }]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doZipFileField.setValue(false);\r\n  }\r\n\r\n  handleFormSubmit(data: PrintOptions, isValid: boolean) {\r\n    this.submitted = true;\r\n    data.isPrintService = this.isPrintService;\r\n    if (isValid) {\r\n      this.submit.emit(data);\r\n    }\r\n  }\r\n\r\n  toggleImageSaveProp() {\r\n    if (this.outputFormatField.value === 'Image') {\r\n      this.isPrintService = false;\r\n    } else {\r\n      this.isPrintService = true;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { PrintComponent } from './print/print.component';\r\nimport { PrintFormComponent } from './print-form/print-form.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [PrintComponent, PrintFormComponent],\r\n  declarations: [PrintComponent, PrintFormComponent]\r\n})\r\nexport class IgoPrintModule {}\r\n","import { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\n\r\nimport { QuerySearchSource } from './query-search-source';\r\n\r\n/**\r\n * Map search source factory\r\n * @ignore\r\n */\r\nexport function querySearchSourceFactory(config: ConfigService) {\r\n  return new QuerySearchSource(\r\n    config.getConfig(`searchSources.${QuerySearchSource.id}`) || {}\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the map search source\r\n */\r\nexport function provideQuerySearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: querySearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { QueryDirective } from './shared/query.directive';\r\nimport { QueryService } from './shared/query.service';\r\nimport { provideQuerySearchSource } from './shared/query-search-source.providers';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [QueryDirective],\r\n  declarations: [QueryDirective],\r\n  providers: [QueryService]\r\n})\r\nexport class IgoQueryModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoQueryModule,\r\n      providers: [provideQuerySearchSource()]\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceSettings } from './sources/source.interfaces';\r\n\r\n/**\r\n * Service where all available search sources are registered.\r\n */\r\nexport class SearchSourceService {\r\n  constructor(private sources: SearchSource[]) {}\r\n\r\n  /**\r\n   * Return available search sources\r\n   * @returns Search sources\r\n   */\r\n  getSources(): SearchSource[] {\r\n    return this.sources;\r\n  }\r\n\r\n  /**\r\n   * Return enabled search sources\r\n   * @returns Search sources\r\n   */\r\n  getEnabledSources(): SearchSource[] {\r\n    return this.getSources().filter(\r\n      (source: SearchSource) => source.enabled === true\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Enable search sources of given type\r\n   * @param type Search type\r\n   * @todo It would be better to track the enabled search sources\r\n   *  without updating their 'enabled' property.\r\n   */\r\n  enableSourcesByType(type: string) {\r\n    this.getSources().forEach((source: SearchSource) => {\r\n      if ((source.constructor as typeof SearchSource).type === type) {\r\n        source.enabled = true;\r\n      } else {\r\n        source.enabled = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set Param from the selected settings\r\n   * @param source search-source\r\n   * @param setting settings\r\n   */\r\n  setParamFromSetting(source: SearchSource, setting: SearchSourceSettings) {\r\n    source.setParamFromSetting(setting);\r\n  }\r\n}\r\n","import { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { SearchSource } from './sources/source';\r\nimport { SearchResult } from './search.interfaces';\r\n\r\n/**\r\n * Function that checks whether a search source implements TextSearch\r\n * @param source Search source\r\n * @returns True if the search source implements TextSearch\r\n */\r\nexport function sourceCanSearch(source: SearchSource): boolean {\r\n  return (source as any).search !== undefined;\r\n}\r\n\r\n/**\r\n * Function that checks whether a search source implements ReverseSearch\r\n * @param source Search source\r\n * @returns True if the search source implements ReverseSearch\r\n */\r\nexport function sourceCanReverseSearch(source: SearchSource): boolean {\r\n  return (source as any).reverseSearch !== undefined;\r\n}\r\n\r\n/**\r\n * Return a search result out of an Feature. This is used to adapt\r\n * the IGO query module to the new Feature/SearchResult interfaces\r\n * @param feature feature\r\n * @param source Search source\r\n * @returns SearchResult\r\n */\r\nexport function featureToSearchResult(\r\n  feature: Feature,\r\n  source: SearchSource\r\n): SearchResult<Feature> {\r\n  return {\r\n    source,\r\n    data: feature,\r\n    meta: {\r\n      dataType: FEATURE,\r\n      id: feature.meta.id as string,\r\n      title: feature.meta.title,\r\n      icon: 'map-marker'\r\n    }\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { stringToLonLat } from '../../map';\r\nimport { MapService } from '../../map/shared/map.service';\r\n\r\nimport { SearchSource, TextSearch, ReverseSearch } from './sources/source';\r\nimport { TextSearchOptions, ReverseSearchOptions } from './sources/source.interfaces';\r\nimport { SearchSourceService } from './search-source.service';\r\nimport { Research } from './search.interfaces';\r\nimport { sourceCanSearch, sourceCanReverseSearch } from './search.utils';\r\n\r\n/**\r\n * This service perform researches in all the search sources enabled.\r\n * It returns Research objects who's 'request' property needs to be\r\n * subscribed to in order to trigger the research. This services has\r\n * keeps internal state of the researches it performed\r\n * and the results they yielded.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchService {\r\n\r\n  constructor(private searchSourceService: SearchSourceService, private mapService: MapService) {}\r\n\r\n  /**\r\n   * Perform a research by text\r\n   * @param term Any text\r\n   * @returns Researches\r\n   */\r\n  search(term: string, options?: TextSearchOptions): Research[] {\r\n    if (!this.termIsValid(term)) {\r\n      return [];\r\n    }\r\n\r\n    const response = stringToLonLat(term, this.mapService.getMap().projection);\r\n    if (response.lonLat) {\r\n      return this.reverseSearch(response.lonLat);\r\n    } else {\r\n      console.log(response.message);\r\n    }\r\n\r\n    const sources = this.searchSourceService.getEnabledSources()\r\n      .filter(sourceCanSearch);\r\n    return this.searchSources(sources, term, options || {});\r\n  }\r\n\r\n  /**\r\n   * Perform a research by lon/lat\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Researches\r\n   */\r\n  reverseSearch(lonLat: [number, number], options?: ReverseSearchOptions) {\r\n    const sources = this.searchSourceService.getEnabledSources()\r\n      .filter(sourceCanReverseSearch);\r\n    return this.reverseSearchSources(sources, lonLat, options || {});\r\n  }\r\n\r\n  /**\r\n   * Create a text research out of all given search sources\r\n   * @param sources Search sources that implement TextSearch\r\n   * @param term Search term\r\n   * @returns Observable of Researches\r\n   */\r\n  private searchSources(sources: SearchSource[], term: string, options: TextSearchOptions): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: (source as any as TextSearch).search(term, options),\r\n        reverse: false,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a reverse research out of all given search sources\r\n   * @param sources Search sources that implement ReverseSearch\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Observable of Researches\r\n   */\r\n  private reverseSearchSources(\r\n    sources: SearchSource[],\r\n    lonLat: [number, number],\r\n    options: ReverseSearchOptions\r\n  ): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: (source as any as ReverseSearch).reverseSearch(lonLat, options),\r\n        reverse: true,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate that a search term is valid\r\n   * @param term Search term\r\n   * @returns True if the search term is valid\r\n   */\r\n  private termIsValid(term: string): boolean {\r\n    return typeof term === 'string' && term !== '';\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\n\r\nexport abstract class RoutingSource {\r\n  abstract enabled: boolean;\r\n  abstract getName(): string;\r\n  abstract route(coordinates: [number, number][]): Observable<Routing[]>;\r\n}\r\n","import { RoutingSource } from '../routing-sources/routing-source';\r\n\r\nexport class RoutingSourceService {\r\n  constructor(public sources: RoutingSource[]) {}\r\n}\r\n\r\nexport function routingSourceServiceFactory(sources: RoutingSource[]) {\r\n  return new RoutingSourceService(sources);\r\n}\r\n\r\nexport function provideRoutingSourceService() {\r\n  return {\r\n    provide: RoutingSourceService,\r\n    useFactory: routingSourceServiceFactory,\r\n    deps: [RoutingSource]\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingSource } from '../routing-sources/routing-source';\r\nimport { RoutingSourceService } from './routing-source.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoutingService {\r\n  constructor(private routingSourceService: RoutingSourceService) {}\r\n\r\n  route(coordinates: [number, number][]): Observable<Routing[]>[] {\r\n    if (coordinates.length === 0) {\r\n      return;\r\n    }\r\n    return this.routingSourceService.sources\r\n      .filter((source: RoutingSource) => source.enabled)\r\n      .map((source: RoutingSource) => this.routeSource(source, coordinates));\r\n  }\r\n\r\n  routeSource(\r\n    source: RoutingSource,\r\n    coordinates: [number, number][]\r\n  ): Observable<Routing[]> {\r\n    const request = source.route(coordinates);\r\n    return request;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class RoutingFormService {\r\n  private stopsCoordinates: [number, number][];\r\n  private mapWaitingForRoutingClick: boolean;\r\n\r\n  constructor() {\r\n    this.mapWaitingForRoutingClick = false;\r\n  }\r\n\r\n  getStopsCoordinates(): [number, number][] {\r\n    return this.stopsCoordinates;\r\n  }\r\n\r\n  setStopsCoordinates(stopsCoordinates) {\r\n    this.stopsCoordinates = stopsCoordinates;\r\n  }\r\n\r\n  isMapWaitingForRoutingClick(): boolean {\r\n    return this.mapWaitingForRoutingClick;\r\n  }\r\n\r\n  setMapWaitingForRoutingClick() {\r\n    this.mapWaitingForRoutingClick = true;\r\n  }\r\n\r\n  unsetMapWaitingForRoutingClick() {\r\n    this.mapWaitingForRoutingClick = false;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  Optional\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport * as olgeom from 'ol/geom';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olcondition from 'ol/events/condition';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport * as olextent from 'ol/extent';\r\nimport * as olobservable from 'ol/Observable';\r\n\r\nimport { Clipboard } from '@igo2/utils';\r\nimport {\r\n  Message,\r\n  LanguageService,\r\n  MessageService,\r\n  RouteService\r\n} from '@igo2/core';\r\nimport { getEntityTitle } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { SearchService } from '../../search/shared/search.service';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { createOverlayMarkerStyle } from '../../overlay/shared/overlay.utils';\r\nimport { FeatureMotion } from '../../feature/shared/feature.enums';\r\nimport { moveToOlFeatures } from '../../feature/shared/feature.utils';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingService } from '../shared/routing.service';\r\nimport { RoutingFormService } from './routing-form.service';\r\n\r\nimport { QueryService } from '../../query/shared/query.service';\r\n\r\n@Component({\r\n  selector: 'igo-routing-form',\r\n  templateUrl: './routing-form.component.html',\r\n  styleUrls: ['./routing-form.component.scss']\r\n})\r\nexport class RoutingFormComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  private readonly invalidKeys = ['Control', 'Shift', 'Alt'];\r\n\r\n  public stopsForm: FormGroup;\r\n  public projection = 'EPSG:4326';\r\n  public currentStopIndex: number;\r\n  private routesQueries$$: Subscription[] = [];\r\n\r\n  private stream$ = new Subject<string>();\r\n\r\n  public RoutingOverlayMarkerStyle: olstyle.Style;\r\n  public RoutingOverlayStyle: olstyle.Style;\r\n  public routingStopsOverlayDataSource: FeatureDataSource;\r\n  public routingRoutesOverlayDataSource: FeatureDataSource;\r\n\r\n  public routesResults: Routing[] | Message[];\r\n  public activeRoute: Routing;\r\n  private selectRoute;\r\n\r\n  private focusOnStop = false;\r\n  private focusKey = [];\r\n  public initialStopsCoords;\r\n  private browserLanguage;\r\n\r\n  // https://stackoverflow.com/questions/46364852/create-input-fields-dynamically-in-angular-2\r\n\r\n  @Input()\r\n  get term() {\r\n    return this._term;\r\n  }\r\n  set term(value: string) {\r\n    this._term = value;\r\n  }\r\n  private _term = '';\r\n\r\n  get debounce() {\r\n    return this._debounce;\r\n  }\r\n  set debounce(value: number) {\r\n    this._debounce = value;\r\n  }\r\n  private _debounce = 300;\r\n\r\n  @Input()\r\n  get length() {\r\n    return this._length;\r\n  }\r\n  set length(value: number) {\r\n    this._length = value;\r\n  }\r\n  private _length = 3;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Output() submit: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private routingService: RoutingService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private searchService: SearchService,\r\n    private queryService: QueryService,\r\n    private routingFormService: RoutingFormService,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  changeRoute(selectedRoute: Routing) {\r\n    this.showRouteGeometry();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribeRoutesQueries();\r\n    this.unlistenSingleClick();\r\n    this.queryService.queryEnabled = true;\r\n    const stopCoordinates = [];\r\n\r\n    this.stops.value.forEach(stop => {\r\n      stopCoordinates.push(stop.stopCoordinates);\r\n    });\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.routingFormService.setStopsCoordinates(stopCoordinates);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.browserLanguage = this.languageService.getLanguage();\r\n    this.stopsForm = this.formBuilder.group({\r\n      routingType: 'car',\r\n      routingMode: 'driving', // loop\r\n      stopOrderPriority: true,\r\n      routingFixedStartEnd: false,\r\n      stops: this.formBuilder.array([\r\n        this.createStop('start'),\r\n        this.createStop('end')\r\n      ])\r\n    });\r\n\r\n    this.routingStopsOverlayDataSource = new FeatureDataSource({});\r\n    this.routingRoutesOverlayDataSource = new FeatureDataSource({});\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.queryService.queryEnabled = false;\r\n    this.focusOnStop = false;\r\n    const stopsLayer = new VectorLayer({\r\n      title: 'routingStopOverlay',\r\n      zIndex: 999,\r\n      id: 'routingStops',\r\n      source: this.routingStopsOverlayDataSource,\r\n      showInLayerList: false\r\n    });\r\n    const routesLayer = new VectorLayer({\r\n      title: 'routingRoutesOverlay',\r\n      zIndex: 999,\r\n      id: 'routingRoutes',\r\n      opacity: 0.75,\r\n      source: this.routingRoutesOverlayDataSource,\r\n      showInLayerList: false\r\n    });\r\n\r\n    this.map.addLayer(routesLayer);\r\n    this.map.addLayer(stopsLayer);\r\n\r\n    let selectedStopFeature;\r\n\r\n    const selectStops = new olinteraction.Select({\r\n      layers: [stopsLayer.ol],\r\n      condition: olcondition.pointerMove,\r\n      hitTolerance: 7\r\n    });\r\n\r\n    const translateStop = new olinteraction.Translate({\r\n      layers: [stopsLayer.ol],\r\n      features: selectedStopFeature\r\n    });\r\n\r\n    // TODO: Check to disable pointermove IF a stop is already selected\r\n    const selectRouteHover = new olinteraction.Select({\r\n      layers: [routesLayer.ol],\r\n      condition: olcondition.pointerMove,\r\n      hitTolerance: 7\r\n    });\r\n\r\n    this.selectRoute = new olinteraction.Select({\r\n      layers: [routesLayer.ol],\r\n      hitTolerance: 7\r\n    });\r\n\r\n    this.map.ol.on('pointermove', evt => {\r\n      const selectRouteCnt = selectRouteHover.getFeatures().getLength();\r\n      if (selectRouteCnt === 0) {\r\n        this.routingFormService.unsetMapWaitingForRoutingClick();\r\n      } else {\r\n        this.routingFormService.setMapWaitingForRoutingClick();\r\n      }\r\n    });\r\n\r\n    selectStops.on('select', evt => {\r\n      selectedStopFeature = evt.target.getFeatures()[0];\r\n    });\r\n\r\n    this.selectRoute.on('select', evt => {\r\n      if (this.focusOnStop === false) {\r\n        const selectCoordinates = olproj.transform(\r\n          (evt as any).mapBrowserEvent.coordinate,\r\n          this.map.projection,\r\n          this.projection\r\n        );\r\n        this.addStop();\r\n        const pos = this.stops.length - 2;\r\n        this.stops.at(pos).patchValue({ stopCoordinates: selectCoordinates });\r\n        this.handleLocationProposals(selectCoordinates, pos);\r\n        this.addStopOverlay(selectCoordinates, pos);\r\n        this.selectRoute.getFeatures().clear();\r\n      }\r\n      this.selectRoute.getFeatures().clear();\r\n    });\r\n\r\n    this.routesQueries$$.push(\r\n      this.stopsForm.statusChanges\r\n        .pipe(debounceTime(this._debounce))\r\n        .subscribe(val => this.onFormChange())\r\n    );\r\n\r\n    translateStop.on('translateend', evt => {\r\n      const translatedID = evt.features.getArray()[0].getId();\r\n      const translatedPos = translatedID.split('_');\r\n      let p;\r\n      switch (translatedPos[1]) {\r\n        case 'start':\r\n          p = 0;\r\n          break;\r\n        case 'end':\r\n          p = this.stops.length - 1;\r\n          break;\r\n        default:\r\n          p = Number(translatedPos[1]);\r\n          break;\r\n      }\r\n      const translationEndCoordinates = olproj.transform(\r\n        evt.features\r\n          .getArray()[0]\r\n          .getGeometry()\r\n          .getCoordinates(),\r\n        this.map.projection,\r\n        this.projection\r\n      );\r\n      this.stops\r\n        .at(p)\r\n        .patchValue({ stopCoordinates: translationEndCoordinates });\r\n      this.stops.at(p).patchValue({ stopProposals: [] });\r\n      this.handleLocationProposals(translationEndCoordinates, p);\r\n    });\r\n\r\n    this.map.ol.addInteraction(selectStops);\r\n    this.map.ol.addInteraction(selectRouteHover);\r\n    this.map.ol.addInteraction(this.selectRoute);\r\n    this.map.ol.addInteraction(translateStop);\r\n\r\n    this.routesQueries$$.push(\r\n      this.stream$\r\n        .pipe(\r\n          debounceTime(this._debounce),\r\n          distinctUntilChanged()\r\n        )\r\n        .subscribe((term: string) => this.handleTermChanged(term))\r\n    );\r\n  }\r\n\r\n  handleLocationProposals(coordinates: [number, number], stopIndex: number) {\r\n    const groupedLocations = [];\r\n    this.searchService\r\n      .reverseSearch(coordinates, { zoom: this.map.getZoom() })\r\n      .map(res =>\r\n        this.routesQueries$$.push(\r\n          res.request.pipe(map(f => f)).subscribe(results => {\r\n            results.forEach(result => {\r\n              if (\r\n                groupedLocations.filter(f => f.source === result.source)\r\n                  .length === 0\r\n              ) {\r\n                groupedLocations.push({\r\n                  source: result.source,\r\n                  results: results.map(r => r.data)\r\n                });\r\n              }\r\n            });\r\n            this.stops\r\n              .at(stopIndex)\r\n              .patchValue({ stopProposals: groupedLocations });\r\n            // TODO: Prefer another source?\r\n            if (results[0]) {\r\n              if (results[0].source.getId() === 'icherchereverse') {\r\n                // prefer address type.\r\n                let resultPos = 0;\r\n                for (let i = 0; i < results.length; i++) {\r\n                  const feature: any = results[i].data;\r\n                  if (feature.properties.type === 'adresse') {\r\n                    resultPos = i;\r\n                    break;\r\n                  }\r\n                }\r\n                this.stops.at(stopIndex).patchValue({\r\n                  stopPoint: getEntityTitle(results[resultPos])\r\n                });\r\n                if (results[resultPos].data.geometry.type === 'Point') {\r\n                  this.stops.at(stopIndex).patchValue({\r\n                    stopCoordinates:\r\n                      results[resultPos].data.geometry.coordinates\r\n                  });\r\n                } else {\r\n                  // Not moving the translated point Only to suggest value into the UI.\r\n                }\r\n              }\r\n            } else {\r\n              this.stops.at(stopIndex).patchValue({ stopPoint: coordinates });\r\n              this.stops.at(stopIndex).patchValue({ stopProposals: [] });\r\n            }\r\n          })\r\n        )\r\n      );\r\n  }\r\n\r\n  routingText(index: number): string {\r\n    if (index === 0) {\r\n      return 'start';\r\n    } else if (index === this.stops.length - 1 || this.stops.length === 1) {\r\n      return 'end';\r\n    } else {\r\n      return 'intermediate';\r\n    }\r\n  }\r\n\r\n  raiseStop(index: number) {\r\n    if (index > 0) {\r\n      this.moveStop(index, -1);\r\n    }\r\n  }\r\n\r\n  lowerStop(index: number) {\r\n    if (index < this.stops.length - 1) {\r\n      this.moveStop(index, 1);\r\n    }\r\n  }\r\n\r\n  moveStop(index, diff) {\r\n    const fromValue = this.stops.at(index);\r\n    this.removeStop(index);\r\n    this.stops.insert(index + diff, fromValue);\r\n    this.stops.at(index).patchValue({ routingText: this.routingText(index) });\r\n    this.stops\r\n      .at(index + diff)\r\n      .patchValue({ routingText: this.routingText(index + diff) });\r\n    if (this.stops.at(index).value.stopCoordinates) {\r\n      this.addStopOverlay(this.stops.at(index).value.stopCoordinates, index);\r\n    }\r\n    if (this.stops.at(index + diff).value.stopCoordinates) {\r\n      this.addStopOverlay(\r\n        this.stops.at(index + diff).value.stopCoordinates,\r\n        index + diff\r\n      );\r\n    }\r\n  }\r\n\r\n  get stops(): FormArray {\r\n    return this.stopsForm.get('stops') as FormArray;\r\n  }\r\n\r\n  getStopsCoordinates(): [number, number][] {\r\n    const stopCoordinates = [];\r\n    this.stops.value.forEach(stop => {\r\n      if (stop.stopCoordinates instanceof Array) {\r\n        stopCoordinates.push(stop.stopCoordinates);\r\n      }\r\n    });\r\n    this.routingFormService.setStopsCoordinates(stopCoordinates);\r\n    return stopCoordinates;\r\n  }\r\n\r\n  addStop(): void {\r\n    const insertIndex = this.stops.length - 1;\r\n    this.stops.insert(insertIndex, this.createStop());\r\n  }\r\n\r\n  createStop(routingPos = 'intermediate'): FormGroup {\r\n    return this.formBuilder.group({\r\n      stopPoint: [''],\r\n      stopProposals: [[]],\r\n      routingText: routingPos,\r\n      stopCoordinates: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  removeStop(index: number): void {\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.stops.removeAt(index);\r\n    let cnt = 0;\r\n    this.stops.value.forEach(stop => {\r\n      this.stops.at(cnt).patchValue({ routingText: this.routingText(cnt) });\r\n      this.addStopOverlay(this.stops.at(cnt).value.stopCoordinates, cnt);\r\n      cnt++;\r\n    });\r\n  }\r\n\r\n  resetForm() {\r\n    this.routesResults = undefined;\r\n    const nbStops = this.stops.length;\r\n    for (let i = 0; i < nbStops; i++) {\r\n      this.stops.removeAt(0);\r\n    }\r\n    this.stops.insert(0, this.createStop('start'));\r\n    this.stops.insert(1, this.createStop('end'));\r\n    this.routingStopsOverlayDataSource.ol.getFeatures().forEach(element => {\r\n      this.deleteRoutingOverlaybyID(element.getId());\r\n    });\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.selectRoute.getFeatures().clear();\r\n  }\r\n\r\n  onFormChange() {\r\n    if (this.stopsForm.valid) {\r\n      this.routingRoutesOverlayDataSource.ol.clear();\r\n      const coords = this.getStopsCoordinates();\r\n      if (coords.length >= 2) {\r\n        this.getRoutes(coords);\r\n      } else {\r\n        this.routingRoutesOverlayDataSource.ol.clear();\r\n      }\r\n    }\r\n  }\r\n\r\n  formatStep(step, cnt) {\r\n    return this.formatInstruction(\r\n      step.maneuver.type,\r\n      step.maneuver.modifier,\r\n      step.name,\r\n      step.maneuver.bearing_after,\r\n      cnt,\r\n      step.maneuver.exit,\r\n      cnt === this.activeRoute.steps.length - 1\r\n    );\r\n  }\r\n\r\n  formatInstruction(\r\n    type,\r\n    modifier,\r\n    route,\r\n    direction,\r\n    stepPosition,\r\n    exit,\r\n    lastStep = false\r\n  ) {\r\n    let directiveFr;\r\n    let directiveEn;\r\n    let image = 'arrow_forward';\r\n    let cssClass = 'rotate-270';\r\n    const translatedDirection = this.translateBearing(direction);\r\n    const translatedModifier = this.translateModifier(modifier);\r\n    const enPrefix = modifier === 'straight' ? '' : 'on the ';\r\n    const frPrefix = modifier === 'straight' ? '' : 'Ã  ';\r\n\r\n    let frAggregatedDirection = frPrefix + translatedModifier;\r\n    let enAggregatedDirection = enPrefix + translatedModifier;\r\n\r\n    if (modifier && modifier.search('slight') >= 0) {\r\n      enAggregatedDirection = translatedModifier;\r\n    }\r\n\r\n    if (modifier === 'uturn') {\r\n      image = 'fast_forward';\r\n      cssClass = 'rotate-90';\r\n    } else if (modifier === 'sharp right') {\r\n      image = 'subdirectory_arrow_right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'right') {\r\n      image = 'subdirectory_arrow_right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'slight right') {\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-290';\r\n    } else if (modifier === 'straight') {\r\n      image = 'arrow_forward';\r\n    } else if (modifier === 'slight left') {\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-250';\r\n    } else if (modifier === 'left') {\r\n      image = 'subdirectory_arrow_left';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'sharp left') {\r\n      image = 'subdirectory_arrow_left';\r\n      cssClass = 'icon-flipped';\r\n    }\r\n\r\n    if (type === 'turn') {\r\n      if (modifier === 'straight') {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      } else if (modifier === 'uturn') {\r\n        directiveFr = 'Faire demi-tour sur ' + route;\r\n        directiveEn = 'Make u-turn on ' + route;\r\n      } else {\r\n        directiveFr = 'Tourner ' + frAggregatedDirection + ' sur ' + route;\r\n        directiveEn = 'Turn ' + translatedModifier + ' onto ' + route;\r\n      }\r\n    } else if (type === 'new name') {\r\n      directiveFr =\r\n        'Continuer en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'explore';\r\n      cssClass = '';\r\n    } else if (type === 'depart') {\r\n      directiveFr =\r\n        'Aller en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'explore';\r\n      cssClass = '';\r\n    } else if (type === 'arrive') {\r\n      if (lastStep) {\r\n        let coma = ', ';\r\n        if (!translatedModifier) {\r\n          frAggregatedDirection = '';\r\n          enAggregatedDirection = '';\r\n          coma = '';\r\n        }\r\n        directiveFr = 'Vous Ãªtes arrivÃ©' + coma + frAggregatedDirection;\r\n        directiveEn =\r\n          'You have reached your destination' + coma + enAggregatedDirection;\r\n      } else {\r\n        directiveFr = 'Vous atteignez le point intermÃ©diare sur ' + route;\r\n        directiveEn = 'You have reached the intermediate stop onto ' + route;\r\n        image = 'location_on';\r\n        cssClass = '';\r\n      }\r\n    } else if (type === 'merge') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'on ramp') {\r\n      directiveFr = \"Prendre l'entrÃ©e d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take the ramp ' + enAggregatedDirection;\r\n    } else if (type === 'off ramp') {\r\n      directiveFr = \"Prendre la sortie d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take exit ' + enAggregatedDirection;\r\n    } else if (type === 'fork') {\r\n      if (modifier.search('left') >= 0) {\r\n        directiveFr = 'Garder la gauche sur ' + route;\r\n        directiveEn = 'Merge left onto ' + route;\r\n      } else if (modifier.search('right') >= 0) {\r\n        directiveFr = 'Garder la droite sur ' + route;\r\n        directiveEn = 'Merge right onto ' + route;\r\n      } else {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      }\r\n    } else if (type === 'end of road') {\r\n      directiveFr =\r\n        'Ã la fin de la route, tourner ' + translatedModifier + ' sur ' + route;\r\n      directiveEn =\r\n        'At the end of the road, turn ' + translatedModifier + ' onto ' + route;\r\n    } else if (type === 'use lane') {\r\n      directiveFr = 'Prendre la voie de ... ';\r\n      directiveEn = 'Take the lane ...';\r\n    } else if (type === 'continue' && modifier !== 'uturn') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'roundabout') {\r\n      directiveFr = 'Au rond-point, prendre la ' + exit;\r\n      directiveFr += exit === 1 ? 're' : 'e';\r\n      directiveFr += ' sortie vers ' + route;\r\n      directiveEn = 'At the roundabout, take the ' + exit;\r\n      directiveEn += exit === 1 ? 'st' : 'rd';\r\n      directiveEn += ' exit towards ' + route;\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'rotary') {\r\n      directiveFr = 'Rond-point rotary....';\r\n      directiveEn = 'Roundabout rotary....';\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'roundabout turn') {\r\n      directiveFr = 'Rond-point, prendre la ...';\r\n      directiveEn = 'Roundabout, take the ...';\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'exit roundabout') {\r\n      directiveFr = 'Poursuivre vers ' + route;\r\n      directiveEn = 'Continue to ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'notification') {\r\n      directiveFr = 'notification ....';\r\n      directiveEn = 'notification ....';\r\n    } else if (modifier === 'uturn') {\r\n      directiveFr =\r\n        'Faire demi-tour et continuer en direction ' +\r\n        translatedDirection +\r\n        ' sur ' +\r\n        route;\r\n      directiveEn =\r\n        'Make u-turn and head ' + translatedDirection + ' on ' + route;\r\n    } else {\r\n      directiveFr = '???';\r\n      directiveEn = '???';\r\n    }\r\n\r\n    if (lastStep) {\r\n      image = 'flag';\r\n      cssClass = '';\r\n    }\r\n    if (stepPosition === 0) {\r\n      image = 'explore';\r\n      cssClass = '';\r\n    }\r\n\r\n    let directive;\r\n    if (this.browserLanguage === 'fr') {\r\n      directive = directiveFr;\r\n    } else if (this.browserLanguage === 'en') {\r\n      directive = directiveEn;\r\n    }\r\n\r\n    return { instruction: directive, image, cssClass };\r\n  }\r\n\r\n  translateModifier(modifier) {\r\n    if (modifier === 'uturn') {\r\n      return this.languageService.translate.instant('igo.geo.routing.uturn');\r\n    } else if (modifier === 'sharp right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.sharp right'\r\n      );\r\n    } else if (modifier === 'right') {\r\n      return this.languageService.translate.instant('igo.geo.routing.right');\r\n    } else if (modifier === 'slight right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.slight right'\r\n      );\r\n    } else if (modifier === 'sharp left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.sharp left'\r\n      );\r\n    } else if (modifier === 'left') {\r\n      return this.languageService.translate.instant('igo.geo.routing.left');\r\n    } else if (modifier === 'slight left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.slight left'\r\n      );\r\n    } else if (modifier === 'straight') {\r\n      return this.languageService.translate.instant('igo.geo.routing.straight');\r\n    } else {\r\n      return modifier;\r\n    }\r\n  }\r\n\r\n  translateBearing(bearing) {\r\n    if (bearing >= 337 || bearing < 23) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.n');\r\n    } else if (bearing < 67) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.ne'\r\n      );\r\n    } else if (bearing < 113) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.e');\r\n    } else if (bearing < 157) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.se'\r\n      );\r\n    } else if (bearing < 203) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.s');\r\n    } else if (bearing < 247) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.sw'\r\n      );\r\n    } else if (bearing < 293) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.w');\r\n    } else if (bearing < 337) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.nw'\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  formatDistance(distance) {\r\n    if (distance === 0) {\r\n      return;\r\n    }\r\n    if (distance >= 100000) {\r\n      return Math.round(distance / 1000) + ' km';\r\n    }\r\n    if (distance >= 10000) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    if (distance >= 100) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    return distance + ' m';\r\n  }\r\n\r\n  formatDuration(duration: number, summary = false) {\r\n    if (duration >= 3600) {\r\n      const hour = Math.floor(duration / 3600);\r\n      const minute = Math.round((duration / 3600 - hour) * 60);\r\n      if (minute === 60) {\r\n        return hour + 1 + ' h';\r\n      }\r\n      return hour + ' h ' + minute + ' min';\r\n    }\r\n\r\n    if (duration >= 60) {\r\n      return Math.round(duration / 60) + ' min';\r\n    }\r\n    return duration + ' s';\r\n  }\r\n\r\n  showSegment(step, zoomToExtent = false) {\r\n    this.showRouteSegmentGeometry(step.geometry.coordinates, zoomToExtent);\r\n  }\r\n\r\n  showRouteSegmentGeometry(coordinates, zoomToExtent = false) {\r\n    this.deleteRoutingOverlaybyID('endSegment');\r\n    const geometry4326 = new olgeom.LineString(coordinates);\r\n    const geometry3857 = geometry4326.transform('EPSG:4326', 'EPSG:3857');\r\n    const routeSegmentCoordinates = (geometry3857 as any).getCoordinates();\r\n    const lastPoint = routeSegmentCoordinates[0];\r\n\r\n    const geometry = new olgeom.Point(lastPoint);\r\n    const feature = new olFeature({ geometry });\r\n    feature.setId('endSegment');\r\n\r\n    if (geometry === null) {\r\n      return;\r\n    }\r\n    if (geometry.getType() === 'Point') {\r\n      feature.setStyle([\r\n        new olstyle.Style({\r\n          geometry,\r\n          image: new olstyle.Circle({\r\n            radius: 7,\r\n            stroke: new olstyle.Stroke({ color: '#FF0000', width: 3 })\r\n          })\r\n        })\r\n      ]);\r\n    }\r\n    if (zoomToExtent) {\r\n      this.map.viewController.zoomToExtent(feature.getGeometry().getExtent());\r\n    }\r\n    this.routingRoutesOverlayDataSource.ol.addFeature(feature);\r\n  }\r\n\r\n  zoomRoute() {\r\n    this.map.viewController.zoomToExtent(this.routingRoutesOverlayDataSource.ol.getExtent());\r\n  }\r\n\r\n  showRouteGeometry(moveToExtent = false) {\r\n    const geom = this.activeRoute.geometry.coordinates;\r\n    const geometry4326 = new olgeom.LineString(geom);\r\n    const geometry3857 = geometry4326.transform('EPSG:4326', 'EPSG:3857');\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    const routingFeature = new olFeature({ geometry: geometry3857 });\r\n    routingFeature.setStyle([\r\n      new olstyle.Style({\r\n        stroke: new olstyle.Stroke({ color: '#6a7982', width: 10 })\r\n      }),\r\n      new olstyle.Style({\r\n        stroke: new olstyle.Stroke({ color: '#4fa9dd', width: 6 })\r\n      })\r\n    ]);\r\n    this.routingRoutesOverlayDataSource.ol.addFeature(routingFeature);\r\n    if (moveToExtent) {\r\n      this.map.viewController.zoomToExtent(this.routingRoutesOverlayDataSource.ol.getExtent());\r\n    }\r\n  }\r\n\r\n  getRoutes(stopsArrayCoordinates, moveToExtent = false) {\r\n    const routeResponse = this.routingService.route(stopsArrayCoordinates);\r\n    if (routeResponse) {\r\n      routeResponse.map(res =>\r\n        this.routesQueries$$.push(\r\n          res.subscribe(route => {\r\n            this.routesResults = route;\r\n            this.activeRoute = this.routesResults[0] as Routing;\r\n            this.showRouteGeometry(moveToExtent);\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  private unlistenSingleClick() {\r\n    if (this.focusKey.length !== 0) {\r\n      this.focusKey.forEach(key => {\r\n        olobservable.unByKey(key);\r\n      });\r\n    }\r\n  }\r\n\r\n  private unsubscribeRoutesQueries() {\r\n    this.routesQueries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.routesQueries$$ = [];\r\n  }\r\n\r\n  copyLinkToClipboard() {\r\n    const successful = Clipboard.copy(this.getUrl());\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.routingForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.routingForm.dialog.copyMsgLink');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  copyDirectionsToClipboard() {\r\n    const indent = '\\t';\r\n    let activeRouteDirective =\r\n      this.languageService.translate.instant(\r\n        'igo.geo.routingForm.instructions'\r\n      ) + ':\\n';\r\n    let wayPointList = '';\r\n    const summary =\r\n      this.languageService.translate.instant('igo.geo.routingForm.summary') +\r\n      ': \\n' +\r\n      indent +\r\n      this.activeRoute.title +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDistance(this.activeRoute.distance) +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDuration(this.activeRoute.duration) +\r\n      '\\n\\n' +\r\n      this.languageService.translate.instant('igo.geo.routingForm.stopsList') +\r\n      ':\\n';\r\n\r\n    const url =\r\n      this.languageService.translate.instant('igo.geo.routingForm.link') +\r\n      ':\\n' +\r\n      indent +\r\n      this.getUrl();\r\n\r\n    let wayPointsCnt = 1;\r\n    this.stops.value.forEach(stop => {\r\n      let coord = '';\r\n      let stopPoint = '';\r\n      if (stop.stopPoint !== stop.stopCoordinates) {\r\n        stopPoint = stop.stopPoint;\r\n        coord =\r\n          ' (' +\r\n          [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(',') +\r\n          ')';\r\n      } else {\r\n        stopPoint = [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(\r\n          ','\r\n        );\r\n      }\r\n\r\n      wayPointList =\r\n        wayPointList +\r\n        indent +\r\n        wayPointsCnt.toLocaleString() +\r\n        '. ' +\r\n        stopPoint +\r\n        coord +\r\n        '\\n';\r\n      wayPointsCnt++;\r\n    });\r\n\r\n    // Directions\r\n    let localCnt = 0;\r\n    this.activeRoute.steps.forEach(step => {\r\n      const instruction = this.formatStep(step, localCnt).instruction;\r\n      const distance =\r\n        this.formatDistance(step.distance) === undefined\r\n          ? ''\r\n          : ' (' + this.formatDistance(step.distance) + ')';\r\n      activeRouteDirective =\r\n        activeRouteDirective +\r\n        indent +\r\n        (localCnt + 1).toLocaleString() +\r\n        '. ' +\r\n        instruction +\r\n        distance +\r\n        '\\n';\r\n      localCnt++;\r\n    });\r\n\r\n    const directionsBody =\r\n      summary + wayPointList + '\\n' + url + '\\n\\n' + activeRouteDirective;\r\n\r\n    const successful = Clipboard.copy(directionsBody);\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.routingForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.routingForm.dialog.copyMsg');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  private handleTermChanged(term: string) {\r\n    if (term !== undefined || term.length !== 0) {\r\n      const searchProposals = [];\r\n      const researches = this.searchService.search(term);\r\n      researches.map(res =>\r\n        this.routesQueries$$.push(\r\n          res.request.subscribe(results => {\r\n            results\r\n              .filter(r => r.data.geometry)\r\n              .forEach(element => {\r\n                if (\r\n                  searchProposals.filter(r => r.source === element.source)\r\n                    .length === 0\r\n                ) {\r\n                  searchProposals.push({\r\n                    source: element.source,\r\n                    results: results.map(r => r.data)\r\n                  });\r\n                }\r\n              });\r\n            this.stops\r\n              .at(this.currentStopIndex)\r\n              .patchValue({ stopProposals: searchProposals });\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  setTerm(term: string) {\r\n    this.term = term;\r\n    if (\r\n      this.keyIsValid(term) &&\r\n      (term.length >= this.length || term.length === 0)\r\n    ) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  private keyIsValid(key: string) {\r\n    return this.invalidKeys.find(value => value === key) === undefined;\r\n  }\r\n\r\n  keyup(i, event: KeyboardEvent) {\r\n    const term = (event.target as HTMLInputElement).value;\r\n    this.setTerm(term);\r\n    this.map.ol.un('singleclick', evt => {\r\n      this.handleMapClick(evt, i);\r\n    });\r\n  }\r\n\r\n  clearStop(stopIndex) {\r\n    this.deleteRoutingOverlaybyID(this.getStopOverlayID(stopIndex));\r\n    this.stops.removeAt(stopIndex);\r\n    this.stops.insert(stopIndex, this.createStop(this.routingText(stopIndex)));\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n  }\r\n\r\n  chooseProposal(proposal, i) {\r\n    if (proposal !== undefined) {\r\n      let geomCoord;\r\n      const geom = (proposal as any).geometry;\r\n      if (geom.type === 'Point') {\r\n        geomCoord = geom.coordinates;\r\n      } else if (geom.type.search('Line') >= 0) {\r\n        let coordArray = [];\r\n        if (geom.coordinates instanceof Array) {\r\n          // Middle segment of multilinestring\r\n          coordArray =\r\n            geom.coordinates[Math.floor(geom.coordinates.length / 2)];\r\n        } else {\r\n          coordArray = geom.coordinates;\r\n        }\r\n        // middle point of coords\r\n        geomCoord = coordArray[Math.floor(coordArray.length / 2)];\r\n      } else if (geom.type.search('Polygon') >= 0) {\r\n        const polygonExtent = proposal.extent;\r\n        const long =\r\n          polygonExtent[0] + (polygonExtent[2] - polygonExtent[0]) / 2;\r\n        const lat =\r\n          polygonExtent[1] + (polygonExtent[3] - polygonExtent[1]) / 2;\r\n        geomCoord = [long, lat];\r\n      }\r\n\r\n      if (geomCoord !== undefined) {\r\n        this.stops.at(i).patchValue({ stopCoordinates: geomCoord });\r\n        this.addStopOverlay(geomCoord, i);\r\n        const proposalExtent = this.routingStopsOverlayDataSource.ol\r\n          .getFeatureById(this.getStopOverlayID(i))\r\n          .getGeometry()\r\n          .getExtent();\r\n\r\n        if (!olextent.intersects(proposalExtent, this.map.getExtent())) {\r\n          this.map.viewController.moveToExtent(proposalExtent);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  focus(i) {\r\n    this.unlistenSingleClick();\r\n    this.currentStopIndex = i;\r\n    this.focusOnStop = true;\r\n    this.routingFormService.setMapWaitingForRoutingClick();\r\n    this.focusKey.push(\r\n      this.map.ol.once('singleclick', evt => {\r\n        this.handleMapClick(evt, i);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleMapClick(event: olcondition, indexPos?) {\r\n    this.stops.at(indexPos).patchValue({ stopProposals: [] });\r\n    if (this.currentStopIndex === undefined) {\r\n      this.addStop();\r\n      indexPos = this.stops.length - 2;\r\n      this.stops.at(indexPos).value.stopProposals = [];\r\n    } else {\r\n      indexPos = this.currentStopIndex;\r\n    }\r\n    const clickCoordinates = olproj.transform(\r\n      event.coordinate,\r\n      this.map.projection,\r\n      this.projection\r\n    );\r\n    this.stops.at(indexPos).patchValue({ stopCoordinates: clickCoordinates });\r\n\r\n    this.handleLocationProposals(clickCoordinates, indexPos);\r\n    this.addStopOverlay(clickCoordinates, indexPos);\r\n    setTimeout(() => {\r\n      this.focusOnStop = false; // prevent to trigger map click and Select on routes at same time.\r\n    }, 500);\r\n    this.routingFormService.unsetMapWaitingForRoutingClick();\r\n  }\r\n\r\n  geolocateStop(index: number) {\r\n    moveToOlFeatures(this.map, [this.map.geolocationFeature], FeatureMotion.Move);\r\n    const geolocateCoordinates = this.map.getCenter(this.projection);\r\n    this.stops.at(index).patchValue({ stopCoordinates: geolocateCoordinates });\r\n    this.addStopOverlay(geolocateCoordinates, index);\r\n    this.handleLocationProposals(geolocateCoordinates, index);\r\n  }\r\n\r\n  public addStopOverlay(coordinates: [number, number], index: number) {\r\n    const routingText = this.routingText(index);\r\n    let stopColor;\r\n    let stopText;\r\n    if (routingText === 'start') {\r\n      stopColor = 'green';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.routingForm.start'\r\n      );\r\n    } else if (routingText === 'end') {\r\n      stopColor = 'red';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.routingForm.end'\r\n      );\r\n    } else {\r\n      stopColor = 'yellow';\r\n      stopText =\r\n        this.languageService.translate.instant(\r\n          'igo.geo.routingForm.intermediate'\r\n        ) +\r\n        ' #' +\r\n        index;\r\n    }\r\n\r\n    const geometry = new olgeom.Point(\r\n      olproj.transform(coordinates, this.projection, this.map.projection)\r\n    );\r\n    const feature = new olFeature({ geometry });\r\n\r\n    const stopID = this.getStopOverlayID(index);\r\n    this.deleteRoutingOverlaybyID(stopID);\r\n    feature.setId(stopID);\r\n\r\n    if (geometry === null) {\r\n      return;\r\n    }\r\n    if (geometry.getType() === 'Point') {\r\n      const olStyle = createOverlayMarkerStyle(stopColor);\r\n      // stopText\r\n      feature.setStyle(olStyle);\r\n    }\r\n    this.routingStopsOverlayDataSource.ol.addFeature(feature);\r\n  }\r\n\r\n  public getStopOverlayID(index: number): string {\r\n    let txt;\r\n    if (index === 0) {\r\n      txt = 'start';\r\n    } else if (index === this.stops.length - 1) {\r\n      txt = 'end';\r\n    } else {\r\n      txt = index;\r\n    }\r\n    return 'routingStop_' + txt;\r\n  }\r\n\r\n  private deleteRoutingOverlaybyID(id) {\r\n    if (this.routingStopsOverlayDataSource.ol.getFeatureById(id)) {\r\n      this.routingStopsOverlayDataSource.ol.removeFeature(\r\n        this.routingStopsOverlayDataSource.ol.getFeatureById(id)\r\n      );\r\n    }\r\n    if (this.routingRoutesOverlayDataSource.ol.getFeatureById(id)) {\r\n      this.routingRoutesOverlayDataSource.ol.removeFeature(\r\n        this.routingRoutesOverlayDataSource.ol.getFeatureById(id)\r\n      );\r\n    }\r\n  }\r\n\r\n  private getUrl() {\r\n    if (!this.route) {\r\n      return;\r\n    }\r\n\r\n    const routingKey = this.route.options.routingCoordKey;\r\n    const stopsCoordinates = [];\r\n    if (\r\n      this.routingFormService &&\r\n      this.routingFormService.getStopsCoordinates() &&\r\n      this.routingFormService.getStopsCoordinates().length !== 0\r\n    ) {\r\n      this.routingFormService.getStopsCoordinates().forEach(coord => {\r\n        stopsCoordinates.push(coord);\r\n      });\r\n    }\r\n    let routingUrl = '';\r\n    if (stopsCoordinates.length >= 2) {\r\n      routingUrl = `${routingKey}=${stopsCoordinates.join(';')}`;\r\n    }\r\n\r\n    return `${location.origin}${\r\n      location.pathname\r\n    }?tool=directions&${routingUrl}`;\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  AfterViewInit,\r\n  Optional\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { RoutingFormComponent } from './routing-form.component';\r\nimport { RoutingFormService } from './routing-form.service';\r\n\r\n@Directive({\r\n  selector: '[igoRoutingFormBinding]'\r\n})\r\nexport class RoutingFormBindingDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    @Self() private component: RoutingFormComponent,\r\n    private routingFormService: RoutingFormService,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    const storedStopsCoordinates = this.routingFormService.getStopsCoordinates();\r\n    if (\r\n      !storedStopsCoordinates &&\r\n      this.route &&\r\n      this.route.options.routingCoordKey\r\n    ) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const routingParams =\r\n          params[this.route.options.routingCoordKey as string];\r\n        const stopsCoordinatesFromURL = [];\r\n        if (routingParams) {\r\n          const routingCoordUrl = routingParams.split(';');\r\n          if (routingCoordUrl.length >= 2) {\r\n            let cnt = 0;\r\n            routingCoordUrl.forEach(coord => {\r\n              if (cnt !== 0 && cnt !== routingCoordUrl.length - 1) {\r\n                this.component.stops.insert(cnt, this.component.createStop());\r\n              }\r\n\r\n              const stopCoordinatesFromURL = JSON.parse('[' + coord + ']');\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopCoordinates: stopCoordinatesFromURL });\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopPoint: stopCoordinatesFromURL });\r\n              this.component.handleLocationProposals(\r\n                stopCoordinatesFromURL,\r\n                cnt\r\n              );\r\n\r\n              stopsCoordinatesFromURL.push(stopCoordinatesFromURL);\r\n              this.component.addStopOverlay(stopCoordinatesFromURL, cnt);\r\n              cnt++;\r\n            });\r\n            this.component.getRoutes(stopsCoordinatesFromURL, true);\r\n          }\r\n        }\r\n      });\r\n    } else if (storedStopsCoordinates) {\r\n      for (let i = 0; i < storedStopsCoordinates.length; i++) {\r\n        if (i !== 0 && i !== storedStopsCoordinates.length - 1) {\r\n          this.component.stops.insert(i, this.component.createStop());\r\n        }\r\n        if (storedStopsCoordinates[i] instanceof Array) {\r\n          this.component.addStopOverlay(storedStopsCoordinates[i], i);\r\n          this.component.stops\r\n            .at(i)\r\n            .patchValue({ stopCoordinates: storedStopsCoordinates[i] });\r\n          this.component.stops\r\n            .at(i)\r\n            .patchValue({ stopPoint: storedStopsCoordinates[i] });\r\n          this.component.handleLocationProposals(storedStopsCoordinates[i], i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatListModule,\r\n  MatDividerModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatTooltipModule,\r\n  MatAutocompleteModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { RoutingFormComponent } from './routing-form/routing-form.component';\r\nimport { RoutingFormBindingDirective } from './routing-form/routing-form-binding.directive';\r\nimport { RoutingFormService } from './routing-form/routing-form.service';\r\nimport { provideRoutingSourceService } from './shared/routing-source.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatListModule,\r\n    MatDividerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [RoutingFormComponent, RoutingFormBindingDirective],\r\n  declarations: [RoutingFormComponent, RoutingFormBindingDirective],\r\n  providers: [RoutingFormService, provideRoutingSourceService()]\r\n})\r\nexport class IgoRoutingModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoRoutingModule\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceService } from './search-source.service';\r\n\r\n/**\r\n * Search source factory\r\n * @ignore\r\n */\r\nexport function searchSourceServiceFactory(sources: SearchSource[]) {\r\n  return new SearchSourceService(sources);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the SearchSource service\r\n */\r\nexport function provideSearchSourceService() {\r\n  return {\r\n    provide: SearchSourceService,\r\n    useFactory: searchSourceServiceFactory,\r\n    deps: [SearchSource]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  IChercheData,\r\n  IChercheResponse,\r\n  IChercheReverseData,\r\n  IChercheReverseResponse\r\n} from './icherche.interfaces';\r\n\r\n@Injectable()\r\nexport class IChercheSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * ICherche search source\r\n */\r\n@Injectable()\r\nexport class IChercheSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'icherche';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions,\r\n    @Inject(IChercheSearchResultFormatter)\r\n    private formatter: IChercheSearchResultFormatter\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'ICherche QuÃ©bec',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/icherche/geocode',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'Adresse',\r\n              value: 'adresses',\r\n              enabled: true\r\n            },\r\n            // {\r\n            //   title: 'Ancienne adresse',\r\n            //   value: 'ancienne_adresse',\r\n            //   enabled: true\r\n            // },\r\n            {\r\n              title: 'Code Postal',\r\n              value: 'codes-postaux',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Route',\r\n              value: 'routes',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'MunicipalitÃ©',\r\n              value: 'municipalites',\r\n              enabled: true\r\n            },\r\n            // {\r\n            //   title: 'Ancienne municipalitÃ©',\r\n            //   value: 'ancienne_municipalite',\r\n            //   enabled: true\r\n            // },\r\n            {\r\n              title: 'mrc',\r\n              value: 'mrc',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'RÃ©gion administrative',\r\n              value: 'regadmin',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Lieu',\r\n              value: 'lieux',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Borne',\r\n              value: 'bornes',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'Entreprise',\r\n              value: 'entreprises',\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '1',\r\n              value: 1,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '5',\r\n              value: 5,\r\n              enabled: true\r\n            },\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '25',\r\n              value: 25,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'trust level',\r\n          name: 'ecmax',\r\n          values: [\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '30',\r\n              value: 30,\r\n              enabled: true\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '75',\r\n              value: 75,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '100',\r\n              value: 100,\r\n              enabled: false\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response: IChercheResponse) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          q: this.computeTerm(term),\r\n          geometry: true,\r\n          type:\r\n            'adresses,codes-postaux,municipalites,mrc,regadmin,lieux,entreprises,bornes'\r\n        },\r\n        this.params,\r\n        this.computeOptionsParam(term, options || {}).params\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: IChercheResponse): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheData) => {\r\n      return this.formatter.formatResult(this.dataToResult(data));\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: IChercheData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, properties.code].join('.');\r\n\r\n    const subtitleHtml = data.highlight.title2\r\n      ? ' <small> ' + data.highlight.title2 + '</small>'\r\n      : '';\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        titleHtml: data.highlight.title + subtitleHtml,\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheSearchSource.propertiesBlacklist\r\n    );\r\n    return Object.assign(properties, { type: data.index });\r\n  }\r\n\r\n  /**\r\n   * Remove hashtag from query\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTerm(term: string): string {\r\n    return term.replace(/(#[^\\s]*)/g, '');\r\n  }\r\n\r\n  /**\r\n   * Add hashtag to param if valid\r\n   * @param term Query with hashtag\r\n   * @param options TextSearchOptions\r\n   */\r\n  private computeOptionsParam(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): TextSearchOptions {\r\n    const tags = term.match(/(#[^\\s]+)/g);\r\n    if (tags) {\r\n      let typeValue = '';\r\n      let hashtagToAdd = false;\r\n      tags.forEach(value => {\r\n        if (super.hashtagValid(super.getSettingsValues('type'), value, true)) {\r\n          typeValue += value.substring(1) + ',';\r\n          hashtagToAdd = true;\r\n        }\r\n      });\r\n      if (hashtagToAdd) {\r\n        options.params = Object.assign(options.params || {}, {\r\n          type: typeValue.slice(0, -1)\r\n        });\r\n      }\r\n    }\r\n    return options;\r\n  }\r\n}\r\n\r\n/**\r\n * IChercheReverse search source\r\n */\r\n@Injectable()\r\nexport class IChercheReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'icherchereverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = ['doc_type'];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Territoire (GÃ©ocodage inversÃ©)',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/territoires/locate',\r\n\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'Adresse',\r\n              value: 'adresses',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Route',\r\n              value: 'routes',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'Arrondissement',\r\n              value: 'arrondissements',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'MunicipalitÃ©',\r\n              value: 'municipalites',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'mrc',\r\n              value: 'mrc',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'RÃ©gion administrative',\r\n              value: 'regadmin',\r\n              enabled: true\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n    return this.http.get(this.searchUrl, { params }).pipe(\r\n      map((response: IChercheReverseResponse) => {\r\n        return this.extractResults(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    const distance = options.distance;\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          loc: lonLat.join(','),\r\n          buffer: distance ? String(distance) : '100',\r\n          geometry: true\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: IChercheReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: IChercheReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), properties.type, properties.code].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheReverseData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n\r\n  private computeExtent(\r\n    data: IChercheReverseData\r\n  ): [number, number, number, number] | undefined {\r\n    return data.bbox\r\n      ? [data.bbox[0], data.bbox[2], data.bbox[1], data.bbox[3]]\r\n      : undefined;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  IChercheSearchSource,\r\n  IChercheSearchResultFormatter,\r\n  IChercheReverseSearchSource\r\n} from './icherche';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultIChercheSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new IChercheSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultIChercheSearchResultFormatter() {\r\n  return {\r\n    provide: IChercheSearchResultFormatter,\r\n    useFactory: defaultIChercheSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * ICherche search source factory\r\n * @ignore\r\n */\r\nexport function ichercheSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService,\r\n  formatter: IChercheSearchResultFormatter\r\n) {\r\n  return new IChercheSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${IChercheSearchSource.id}`),\r\n    formatter\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search source\r\n */\r\nexport function provideIChercheSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService, IChercheSearchResultFormatter]\r\n  };\r\n}\r\n\r\n/**\r\n * IChercheReverse search source factory\r\n * @ignore\r\n */\r\nexport function ichercheReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new IChercheReverseSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${IChercheReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideIChercheReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","export class GoogleLinks {\r\n  static getGoogleMapsLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=' + lat + ',' + lon;\r\n  }\r\n\r\n  static getGoogleStreetViewLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon;\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, ReverseSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { GoogleLinks } from '../../../utils/googleLinks';\r\n\r\n@Injectable()\r\nexport class CoordinatesSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n/**\r\n * CoordinatesReverse search source\r\n */\r\n@Injectable()\r\nexport class CoordinatesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'coordinatesreverse';\r\n  static type = FEATURE;\r\n\r\n  constructor(@Inject('options') options: SearchSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return CoordinatesReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Coordinates'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    return of([this.dataToResult(lonLat)]);\r\n  }\r\n\r\n  private dataToResult(data: [number, number]): SearchResult<Feature> {\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [data[0], data[1]]\r\n        },\r\n        extent: undefined,\r\n        properties: {\r\n          type: 'point',\r\n          coordonnees: String(data[0]) + ', ' + String(data[1]),\r\n          format: 'degrÃ©s decimaux',\r\n          systemeCoordonnees: 'WGS84',\r\n          GoogleMaps: GoogleLinks.getGoogleMapsLink(data[0], data[1]),\r\n          GoogleStreetView: GoogleLinks.getGoogleStreetViewLink(\r\n            data[0],\r\n            data[1]\r\n          )\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id: '1',\r\n        title: String(data[0]) + ', ' + String(data[1]),\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  CoordinatesReverseSearchSource,\r\n  CoordinatesSearchResultFormatter\r\n} from './coordinates';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultCoordinatesSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new CoordinatesSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultCoordinatesSearchResultFormatter() {\r\n  return {\r\n    provide: CoordinatesSearchResultFormatter,\r\n    useFactory: defaultCoordinatesSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * CoordinatesReverse search source factory\r\n * @ignore\r\n */\r\nexport function CoordinatesReverseSearchSourceFactory(config: ConfigService) {\r\n  return new CoordinatesReverseSearchSource(\r\n    config.getConfig(`searchSources.${CoordinatesReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideCoordinatesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: CoordinatesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService]\r\n  };\r\n}\r\n","import { FEATURE } from '../../feature';\r\nimport { LAYER } from '../../layer';\r\n\r\nexport const SEARCH_TYPES = [FEATURE, LAYER];\r\n","import {MatCheckboxChange, MatRadioChange } from '@angular/material';\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\nimport { SearchSource } from '../shared/sources/source';\r\nimport { SearchSourceSettings, SettingOptions } from '../shared/sources/source.interfaces';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-selector',\r\n  templateUrl: './search-selector.component.html',\r\n  styleUrls: ['./search-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchSelectorComponent implements OnInit {\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * The search type enabled\r\n   */\r\n  @Input() enabled: string;\r\n\r\n  /**\r\n   * Event emitted when the enabled search type changes\r\n   */\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  constructor(private searchSourceService: SearchSourceService) {}\r\n\r\n  /**\r\n   * Enable the first search type if the enabled input is not defined\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    const initial = this.enabled || this.searchTypes[0];\r\n    this.enableSearchType(initial);\r\n  }\r\n\r\n  /**\r\n   * Enable the selected search type\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.enableSearchType(searchType);\r\n  }\r\n\r\n  /**\r\n   * Get a search type's title. The title\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  getSearchTypeTitle(searchType: string) {\r\n    return `search.${searchType.toLowerCase()}.title`;\r\n  }\r\n\r\n  /**\r\n   * Emit an event and enable the search sources of the given type.\r\n   * @param searchType Search type\r\n   */\r\n  private enableSearchType(searchType: string) {\r\n    this.enabled = searchType;\r\n    this.searchSourceService.enableSourcesByType(searchType);\r\n    this.change.emit(searchType);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatTabsModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { SearchSelectorComponent } from './search-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatTabsModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSelectorComponent],\r\n  declarations: [SearchSelectorComponent]\r\n})\r\nexport class IgoSearchSelectorModule {}\r\n","import {MatCheckboxChange, MatRadioChange } from '@angular/material';\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\nimport { SearchSource } from '../shared/sources/source';\r\nimport { SearchSourceSettings, SettingOptions } from '../shared/sources/source.interfaces';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-settings',\r\n  templateUrl: './search-settings.component.html',\r\n  styleUrls: ['./search-settings.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class SearchSettingsComponent {\r\n\r\n  /**\r\n   * Event emitted when the enabled search type changes\r\n   */\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  constructor(private searchSourceService: SearchSourceService) {}\r\n\r\n  /**\r\n   * Get all search sources\r\n   * @internal\r\n   */\r\n  getSearchSources(): SearchSource[] {\r\n    return this.searchSourceService.getSources();\r\n  }\r\n\r\n  /**\r\n   * Triggered when a setting is checked (checkbox style)\r\n   * @internal\r\n   */\r\n  settingsValueCheckedCheckbox(\r\n    event: MatCheckboxChange,\r\n    source: SearchSource,\r\n    setting: SearchSourceSettings,\r\n    settingValue: SettingOptions\r\n  ) {\r\n    settingValue.enabled = event.checked;\r\n    source.setParamFromSetting(setting);\r\n  }\r\n\r\n  /**\r\n   * Triggered when a setting is checked (radiobutton style)\r\n   * @internal\r\n   */\r\n  settingsValueCheckedRadioButton(\r\n    event: MatRadioChange,\r\n    source: SearchSource,\r\n    setting: SearchSourceSettings,\r\n    settingValue: SettingOptions\r\n  ) {\r\n    setting.values.forEach( conf => {\r\n      if (conf.value !== settingValue.value) {\r\n        conf.enabled = !event.source.checked;\r\n      } else {\r\n        conf.enabled = event.source.checked;\r\n      }\r\n    });\r\n    source.setParamFromSetting(setting);\r\n  }\r\n\r\n  onCheckSearchSource(event: MatCheckboxChange, source: SearchSource) {\r\n    source.enabled = event.checked;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SearchSettingsComponent } from './search-settings.component';\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  declarations: [SearchSettingsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSettingsComponent]\r\n})\r\nexport class IgoSearchSettingsModule { }\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ElementRef,\r\n  HostBinding,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { Subject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { EntityStore } from '@igo2/common';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchResult, Research } from '../shared/search.interfaces';\r\nimport { SearchService } from '../shared/search.service';\r\n\r\n/**\r\n * Searchbar that triggers a research in all search sources enabled.\r\n * If the store input is defined, the search results will be loaded\r\n * into that store. An event is always emitted when a research is completed.\r\n */\r\n@Component({\r\n  selector: 'igo-search-bar',\r\n  templateUrl: './search-bar.component.html',\r\n  styleUrls: ['./search-bar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchBarComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Invalid keys\r\n   */\r\n  private readonly invalidKeys = ['Control', 'Shift', 'Alt'];\r\n\r\n  /**\r\n   * Search term stream\r\n   */\r\n  private stream$ = new Subject<string>();\r\n\r\n  /**\r\n   * Subscription to the search term stream\r\n   */\r\n  private stream$$: Subscription;\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input() term = '';\r\n\r\n  /**\r\n   * Whether a float label should be displayed\r\n   */\r\n  @Input() floatLabel: FloatLabelType = 'never';\r\n\r\n  /**\r\n   * Whether this component is disabled\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  /**\r\n   * Icons color (search and clear)\r\n   */\r\n  @Input() color = 'primary';\r\n\r\n  /**\r\n   * Debounce time between each keystroke\r\n   */\r\n  @Input() debounce = 300;\r\n\r\n  /**\r\n   * Minimum term length required to trigger a research\r\n   */\r\n  @Input() minLength = 2;\r\n\r\n  /**\r\n   * Search icon\r\n   */\r\n  @Input() searchIcon: string;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * Event emitted when the search term changes\r\n   */\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Event emitted when a research is completed\r\n   */\r\n  @Output() search = new EventEmitter<{\r\n    research: Research;\r\n    results: SearchResult[];\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the search type changes\r\n   */\r\n  @Output() searchTypeChange = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Input element\r\n   * @internal\r\n   */\r\n  @ViewChild('input') input: ElementRef;\r\n\r\n  /**\r\n   * Host's empty class\r\n   * @internal\r\n   */\r\n  @HostBinding('class.empty')\r\n  get emptyClass() {\r\n    return this.empty;\r\n  }\r\n\r\n  /**\r\n   * Whether the search bar is empty\r\n   * @internal\r\n   */\r\n  get empty(): boolean {\r\n    return this.term.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Search bar palceholder\r\n   * @internal\r\n   */\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n  }\r\n  get placeholder(): string {\r\n    return this.empty ? this._placeholder : '';\r\n  }\r\n  private _placeholder = '';\r\n\r\n  constructor(private searchService: SearchService) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.stream$$ = this.stream$\r\n      .pipe(\r\n        debounce((term: string) => {\r\n          return term === '' ? EMPTY : timer(300);\r\n        }),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe((term: string) => this.onTermChange(term));\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the search term stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.stream$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * When a user types, validates the key and send it into the\r\n   * stream if it's valid\r\n   * @param event Keyboard event\r\n   * @internal\r\n   */\r\n  onKeyup(event: KeyboardEvent) {\r\n    const key = (event.target as HTMLInputElement).value;\r\n    if (!this.keyIsValid(key)) {\r\n      return;\r\n    }\r\n    this.setTerm(key);\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   * @internal\r\n   */\r\n  onClearButtonClick() {\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Update the placeholder with the enabled search type. The placeholder\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Enabled search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.searchTypeChange.emit(searchType);\r\n    this.placeholder = `search.${searchType.toLowerCase()}.placeholder`;\r\n    this.doSearch(this.term);\r\n  }\r\n\r\n  /**\r\n   * Send the term into the stream only if this component is not disabled\r\n   * @param term Search term\r\n   */\r\n  setTerm(term: string) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.term = term;\r\n    if (term.replace(/(#[^\\s]*)/g, '').trim().length >= this.minLength ||\r\n      term.replace(/(#[^\\s]*)/g, '').trim().length === 0) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   */\r\n  private clear() {\r\n    this.term = '';\r\n    this.stream$.next(this.term);\r\n    this.input.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Validate if a given key stroke is a valid input\r\n   */\r\n  private keyIsValid(key: string) {\r\n    return this.invalidKeys.indexOf(key) === -1;\r\n  }\r\n\r\n  /**\r\n   * When the search term changes, emit an event and trigger a\r\n   * research in every enabled search sources.\r\n   * @param term Search term\r\n   */\r\n  private onTermChange(term: string | undefined) {\r\n    this.change.emit(term);\r\n    this.doSearch(term);\r\n  }\r\n\r\n  /**\r\n   * Execute the search\r\n   * @param term Search term\r\n   */\r\n  private doSearch(term: string | undefined) {\r\n    if (term === undefined || term.replace(/(#[^\\s]*)/g, '').trim() === '') {\r\n      if (this.store !== undefined) {\r\n        this.store.clear();\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.store !== undefined) {\r\n      this.store.softClear();\r\n    }\r\n\r\n    const researches = this.searchService.search(term);\r\n    researches.map(research => {\r\n      research.request.subscribe((results: SearchResult[]) => {\r\n        this.onResearchCompleted(research, results);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When a research  is completed, emit an event and update\r\n   * the store's items.\r\n   * @param research Research\r\n   * @param results Research results\r\n   */\r\n  private onResearchCompleted(research: Research, results: SearchResult[]) {\r\n    this.search.emit({ research, results });\r\n\r\n    if (this.store !== undefined) {\r\n      const newResults = this.store.entities$.value\r\n        .filter(result => result.source !== research.source)\r\n        .concat(results);\r\n      this.store.load(newResults);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  OnInit,\r\n  Optional,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { SearchBarComponent } from './search-bar.component';\r\n\r\n@Directive({\r\n  selector: '[igoSearchUrlParam]'\r\n})\r\nexport class SearchUrlParamDirective implements OnInit {\r\n  constructor(\r\n    @Self() private component: SearchBarComponent,\r\n    private ref: ChangeDetectorRef,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.route && this.route.options.searchKey) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const searchParams = params[this.route.options.searchKey as string];\r\n        if (searchParams) {\r\n          this.component.setTerm(searchParams);\r\n          this.ref.detectChanges();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoSearchSelectorModule } from '../search-selector/search-selector.module';\r\nimport { IgoSearchSettingsModule } from '../search-settings/search-settings.module';\r\nimport { SearchBarComponent } from './search-bar.component';\r\nimport { SearchUrlParamDirective } from './search-url-param.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  exports: [\r\n    SearchBarComponent,\r\n  ],\r\n  declarations: [\r\n    SearchBarComponent,\r\n    SearchUrlParamDirective\r\n  ]\r\n})\r\nexport class IgoSearchBarModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport {Observable, EMPTY, timer} from 'rxjs';\r\nimport {debounce, map} from 'rxjs/operators';\r\n\r\nimport {EntityStore, EntityStoreWatcher} from '@igo2/common';\r\n\r\nimport {SearchResult} from '../shared/search.interfaces';\r\nimport {SearchSource} from '../shared/sources/source';\r\n\r\nexport enum SearchResultMode {\r\n  Grouped = 'grouped',\r\n  Flat = 'flat'\r\n}\r\n\r\n/**\r\n * List of search results with focus and selection capabilities.\r\n * This component is dumb and only emits events.\r\n */\r\n@Component({\r\n  selector: 'igo-search-results',\r\n  templateUrl: './search-results.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Reference to the SearchResultMode enum\r\n   * @internal\r\n   */\r\n  public searchResultMode = SearchResultMode;\r\n\r\n  /**\r\n   * Search results store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<SearchResult>;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * Search results display mode\r\n   */\r\n  @Input() mode: SearchResultMode = SearchResultMode.Grouped;\r\n\r\n  /**\r\n   * Event emitted when a result is focused\r\n   */\r\n  @Output() resultFocus = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a result is selected\r\n   */\r\n  @Output() resultSelect = new EventEmitter<SearchResult>();\r\n\r\n  get results$(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    if (this._results$ === undefined) {\r\n      this._results$ = this.liftResults();\r\n    }\r\n    return this._results$;\r\n  }\r\n  private _results$: Observable<\r\n    {source: SearchSource; results: SearchResult[]}[]\r\n  >;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Bind the search results store to the watcher\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n  }\r\n\r\n  /**\r\n   * Unbind the search results store from the watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * When a result is focused, update it's state in the store and emit\r\n   * an event.\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultFocus(result: SearchResult) {\r\n    this.store.state.update(result, {focused: true}, true);\r\n    this.resultFocus.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Compute a group title\r\n   * @param group Search results group\r\n   * @returns Group title\r\n   * @internal\r\n   */\r\n  computeGroupTitle(group: {source: SearchSource; results: SearchResult[]}): string {\r\n    const parts = [group.source.title];\r\n    const count = group.results.length;\r\n    if (count > 1) {\r\n      parts.push(`(${count})`);\r\n    }\r\n    return parts.join(' ');\r\n  }\r\n\r\n  /**\r\n   * When a result is selected, update it's state in the store and emit\r\n   * an event. A selected result is also considered focused\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultSelect(result: SearchResult) {\r\n    this.store.state.update(\r\n      result,\r\n      {\r\n        focused: true,\r\n        selected: true\r\n      },\r\n      true\r\n    );\r\n    this.resultSelect.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Return an observable of the search results, grouped by search source\r\n   * @returns Observable of grouped search results\r\n   * @internal\r\n   */\r\n  private liftResults(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    return this.store.view.all$().pipe(\r\n      debounce((results: SearchResult[]) => {\r\n        return results.length === 0 ? EMPTY : timer(200);\r\n      }),\r\n      map((results: SearchResult[]) => {\r\n        return this.groupResults(results.sort(this.sortByOrder));\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sort the results by display order.\r\n   * @param r1 First result\r\n   * @param r2 Second result\r\n   */\r\n  private sortByOrder(r1: SearchResult, r2: SearchResult) {\r\n    return r1.source.displayOrder - r2.source.displayOrder;\r\n  }\r\n\r\n  /**\r\n   * Group results by search source\r\n   * @param results Search results from all sources\r\n   * @returns Search results grouped by source\r\n   */\r\n  private groupResults(results: SearchResult[]): {source: SearchSource; results: SearchResult[]}[] {\r\n    const grouped = new Map<SearchSource, SearchResult[]>();\r\n    results.forEach((result: SearchResult) => {\r\n      const source = result.source;\r\n      let sourceResults = grouped.get(source);\r\n      if (sourceResults === undefined) {\r\n        sourceResults = [];\r\n        grouped.set(source, sourceResults);\r\n      }\r\n      sourceResults.push(result);\r\n    });\r\n\r\n    return Array.from(grouped.keys()).map((source: SearchSource) => {\r\n      return {source, results: grouped.get(source)};\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport {\r\n  getEntityTitle,\r\n  getEntityTitleHtml,\r\n  getEntityIcon\r\n} from '@igo2/common';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\n\r\n/**\r\n * Search results list item\r\n */\r\n@Component({\r\n  selector: 'igo-search-results-item',\r\n  templateUrl: './search-results-item.component.html',\r\n  styleUrls: ['./search-results-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsItemComponent {\r\n  /**\r\n   * Search result\r\n   */\r\n  @Input() result: SearchResult;\r\n\r\n  /**\r\n   * Search result title\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.result);\r\n  }\r\n\r\n  /**\r\n   * Search result HTML title\r\n   * @internal\r\n   */\r\n  get titleHtml(): string {\r\n    return getEntityTitleHtml(this.result);\r\n  }\r\n\r\n  /**\r\n   * Search result icon\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.result);\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule\r\n} from '@igo2/common';\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { SearchResultsComponent } from './search-results.component';\r\nimport { SearchResultsItemComponent } from './search-results-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [\r\n    SearchResultsComponent\r\n  ],\r\n  declarations: [\r\n    SearchResultsComponent,\r\n    SearchResultsItemComponent\r\n  ]\r\n})\r\nexport class IgoSearchResultsModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { provideSearchSourceService } from './shared/search-source-service.providers';\r\nimport { provideDefaultIChercheSearchResultFormatter } from './shared/sources/icherche.providers';\r\nimport { provideDefaultCoordinatesSearchResultFormatter } from './shared/sources/coordinates.providers';\r\n\r\nimport { IgoSearchBarModule } from './search-bar/search-bar.module';\r\nimport { IgoSearchSelectorModule } from './search-selector/search-selector.module';\r\nimport { IgoSearchResultsModule } from './search-results/search-results.module';\r\nimport { IgoSearchSettingsModule } from './search-settings/search-settings.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  exports: [\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoSearchModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoSearchModule,\r\n      providers: [\r\n        provideSearchSourceService(),\r\n        provideDefaultIChercheSearchResultFormatter(),\r\n        provideDefaultCoordinatesSearchResultFormatter()\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { FlexibleState, getEntityTitle } from '@igo2/common';\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport { Feature } from '../feature/shared/feature.interfaces';\r\nimport { FeatureMotion } from '../feature/shared/feature.enums';\r\nimport { moveToOlFeatures } from '../feature/shared/feature.utils';\r\nimport { IgoMap } from '../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-toast',\r\n  templateUrl: './toast.component.html',\r\n  styleUrls: ['./toast.component.scss']\r\n})\r\nexport class ToastComponent {\r\n  static SWIPE_ACTION = {\r\n    UP: 'swipeup',\r\n    DOWN: 'swipedown'\r\n  };\r\n  private format = new olFormatGeoJSON();\r\n\r\n  @Input()\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n  set expanded(value: boolean) {\r\n    this.state = value ? 'expanded' : 'collapsed';\r\n    this._expanded = value;\r\n  }\r\n  private _expanded: boolean;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n  }\r\n  private _feature: Feature;\r\n\r\n  @Output() opened = new EventEmitter<boolean>();\r\n\r\n  public state: FlexibleState;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.feature); }\r\n\r\n  constructor() {}\r\n\r\n  toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.opened.emit(this.expanded);\r\n  }\r\n\r\n  zoomToFeatureExtent() {\r\n    if (this.feature.geometry) {\r\n      const olFeature = this.format.readFeature(this.feature, {\r\n        dataProjection: this.feature.projection,\r\n        featureProjection: this.map.projection\r\n      });\r\n      moveToOlFeatures(this.map, [olFeature], FeatureMotion.Zoom);\r\n    }\r\n  }\r\n\r\n  swipe(action: string) {\r\n    if (action === ToastComponent.SWIPE_ACTION.UP) {\r\n      if (!this.expanded) {\r\n        this.toggle();\r\n      }\r\n    } else if (action === ToastComponent.SWIPE_ACTION.DOWN) {\r\n      if (this.expanded) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule, MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoPanelModule, IgoFlexibleModule } from '@igo2/common';\r\n\r\nimport { IgoFeatureModule } from '../feature/feature.module';\r\nimport { ToastComponent } from './toast.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    IgoPanelModule,\r\n    IgoFlexibleModule,\r\n    IgoFeatureModule\r\n  ],\r\n  exports: [ToastComponent],\r\n  declarations: [ToastComponent]\r\n})\r\nexport class IgoToastModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoToastModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { OnUpdateInputs, WidgetComponent } from '@igo2/common';\r\n\r\nimport { Layer } from '../../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter',\r\n  templateUrl: './ogc-filter.component.html',\r\n  styleUrls: ['./ogc-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterComponent implements OnUpdateInputs, WidgetComponent {\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted on complete\r\n   */\r\n  @Output() complete = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted on cancel\r\n   */\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Implemented as part of OnUpdateInputs\r\n   */\r\n  onUpdateInputs() {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * On close, emit the cancel event\r\n   */\r\n  onClose() {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nimport { Widget, WidgetService } from '@igo2/common';\r\n\r\nimport { OgcFilterComponent } from './ogc-filter/ogc-filter.component';\r\n\r\nexport const OgcFilterWidget = new InjectionToken<Widget>('OgcFilterWidget');\r\n\r\nexport function ogcFilterWidgetFactory(widgetService: WidgetService): Widget {\r\n  return widgetService.create(OgcFilterComponent);\r\n}\r\n\r\nexport function provideOgcFilterWidget() {\r\n  return {\r\n    provide: OgcFilterWidget,\r\n    useFactory: ogcFilterWidgetFactory,\r\n    deps: [WidgetService]\r\n  };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoFilterModule } from '../../../filter/filter.module';\r\nimport { OgcFilterComponent } from './ogc-filter.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule,\r\n    IgoFilterModule\r\n  ],\r\n  exports: [OgcFilterComponent],\r\n  declarations: [OgcFilterComponent],\r\n  entryComponents: [OgcFilterComponent]\r\n})\r\nexport class IgoOgcFilterModule {}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WfsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: VectorLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WfsWorkspace extends Workspace {\r\n\r\n  get layer(): VectorLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WfsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  ActionStore,\r\n  EntityTableTemplate\r\n} from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { SourceFieldsOptionsParams } from '../../datasource';\r\n\r\nimport { WfsWorkspace } from './wfs-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WfsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: VectorLayer, map: IgoMap): WfsWorkspace {\r\n    return new WfsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      entityStore: this.createFeatureStore(layer, map),\r\n      actionStore: new ActionStore([]),\r\n      meta: {\r\n        tableTemplate: this.createTableTemplate(layer)\r\n      }\r\n    });\r\n  }\r\n\r\n  private createFeatureStore(layer: VectorLayer, map: IgoMap): FeatureStore {\r\n    const store = new FeatureStore([], {map});\r\n    store.bindLayer(layer);\r\n\r\n    const loadingStrategy = new FeatureStoreLoadingLayerStrategy({});\r\n    const selectionStrategy = new FeatureStoreSelectionStrategy({\r\n      map,\r\n      hitTolerance: 5\r\n    });\r\n    store.addStrategy(loadingStrategy, true);\r\n    store.addStrategy(selectionStrategy, true);\r\n\r\n    return store;\r\n  }\r\n\r\n  private createTableTemplate(layer: VectorLayer): EntityTableTemplate {\r\n    const fields = layer.dataSource.options.sourceFields || [];\r\n    const columns = fields.map((field: SourceFieldsOptionsParams) => {\r\n      return {\r\n        name: `properties.${field.name}`,\r\n        title: field.alias ? field.alias : field.name\r\n      };\r\n    });\r\n\r\n    return {\r\n      selection: true,\r\n      sort: true,\r\n      columns\r\n    };\r\n  }\r\n\r\n}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WmsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: ImageLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WmsWorkspace extends Workspace {\r\n\r\n  get layer(): ImageLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WmsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ActionStore } from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { WmsWorkspace } from './wms-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WmsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: ImageLayer, map: IgoMap): WmsWorkspace {\r\n    return new WmsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      actionStore: new ActionStore([])\r\n    });\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { Workspace, WorkspaceStore, WorkspaceSelectorComponent } from '@igo2/common';\r\n\r\nimport { Layer, ImageLayer, VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { WFSDataSource, WMSDataSource } from '../../datasource';\r\nimport { OgcFilterableDataSourceOptions } from '../../filter';\r\n\r\nimport { WfsWorkspaceService } from '../shared/wfs-workspace.service';\r\nimport { WmsWorkspaceService } from '../shared/wms-workspace.service';\r\n\r\n@Directive({\r\n  selector: '[igoWorkspaceSelector]'\r\n})\r\nexport class WorkspaceSelectorDirective implements OnInit, OnDestroy {\r\n\r\n  private layers$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  get workspaceStore(): WorkspaceStore {\r\n    return this.component.store;\r\n  }\r\n\r\n  constructor(\r\n    private component: WorkspaceSelectorComponent,\r\n    private wfsWorkspaceService: WfsWorkspaceService,\r\n    private wmsWorkspaceService: WmsWorkspaceService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$\r\n      .pipe(debounceTime(50))\r\n      .subscribe((layers: Layer[]) =>\r\n        this.onLayersChange(layers)\r\n      );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  private onLayersChange(layers: Layer[]) {\r\n    const editableLayers = layers.filter((layer: Layer) =>\r\n      this.layerIsEditable(layer)\r\n    );\r\n    const editableLayersIds = editableLayers.map((layer: Layer) => layer.id);\r\n\r\n    const workspacesToAdd = editableLayers\r\n      .map((layer: VectorLayer) => this.getOrCreateWorkspace(layer))\r\n      .filter((workspace: Workspace | undefined) => workspace !== undefined);\r\n\r\n    const workspacesToRemove = this.workspaceStore.all()\r\n      .filter((workspace: Workspace) => {\r\n        return editableLayersIds.indexOf(workspace.id) < 0;\r\n      });\r\n\r\n    if (workspacesToRemove.length > 0) {\r\n      workspacesToRemove.forEach((workspace: Workspace) => {\r\n        workspace.deactivate();\r\n      });\r\n      this.workspaceStore.state.updateMany(workspacesToRemove, {active: false, selected: false});\r\n      this.workspaceStore.deleteMany(workspacesToRemove);\r\n    }\r\n\r\n    if (workspacesToAdd.length > 0) {\r\n      this.workspaceStore.insertMany(workspacesToAdd);\r\n    }\r\n  }\r\n\r\n  private getOrCreateWorkspace(layer: VectorLayer | ImageLayer): Workspace | undefined {\r\n    const workspace = this.workspaceStore.get(layer.id);\r\n    if (workspace !== undefined) {\r\n      return;\r\n    }\r\n    if (layer.dataSource instanceof WFSDataSource) {\r\n      return this.wfsWorkspaceService.createWorkspace(layer as VectorLayer, this.map);\r\n    } else if (layer.dataSource instanceof WMSDataSource) {\r\n      return this.wmsWorkspaceService.createWorkspace(layer as ImageLayer, this.map);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  private layerIsEditable(layer: Layer): boolean {\r\n    const dataSource = layer.dataSource;\r\n    if (dataSource instanceof WFSDataSource) {\r\n      return true;\r\n    }\r\n\r\n    if (dataSource instanceof WMSDataSource) {\r\n      const dataSourceOptions = (dataSource.options ||\r\n        {}) as OgcFilterableDataSourceOptions;\r\n      return (\r\n        dataSourceOptions.ogcFilters && dataSourceOptions.ogcFilters.enabled\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { WorkspaceSelectorDirective } from './workspace-selector.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n   WorkspaceSelectorDirective\r\n  ],\r\n  declarations: [\r\n    WorkspaceSelectorDirective\r\n  ]\r\n})\r\nexport class IgoWorkspaceSelectorModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IgoWidgetModule } from '@igo2/common';\r\n\r\nimport { provideOgcFilterWidget } from './widgets/widgets';\r\n\r\nimport { IgoOgcFilterModule } from './widgets/ogc-filter/ogc-filter.module';\r\nimport { IgoWorkspaceSelectorModule } from './workspace-selector/workspace-selector.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetModule,\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  exports: [\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    provideOgcFilterWidget()\r\n  ]\r\n})\r\nexport class IgoGeoWorkspaceModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoWktModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoWktModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { IgoCatalogModule } from './catalog/catalog.module';\r\nimport { IgoDataSourceModule } from './datasource/datasource.module';\r\nimport { IgoDownloadModule } from './download/download.module';\r\nimport { IgoFeatureModule } from './feature/feature.module';\r\nimport { IgoFilterModule } from './filter/filter.module';\r\nimport { IgoGeometryModule } from './geometry/geometry.module';\r\nimport { IgoImportExportModule } from './import-export/import-export.module';\r\nimport { IgoLayerModule } from './layer/layer.module';\r\nimport { IgoMapModule } from './map/map.module';\r\nimport { IgoMeasureModule } from './measure/measure.module';\r\nimport { IgoMetadataModule } from './metadata/metadata.module';\r\nimport { IgoOverlayModule } from './overlay/overlay.module';\r\nimport { IgoPrintModule } from './print/print.module';\r\nimport { IgoQueryModule } from './query/query.module';\r\nimport { IgoRoutingModule } from './routing/routing.module';\r\nimport { IgoSearchModule } from './search/search.module';\r\nimport { IgoToastModule } from './toast/toast.module';\r\nimport { IgoGeoWorkspaceModule } from './workspace/workspace.module';\r\nimport { IgoWktModule } from './wkt/wkt.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoCatalogModule,\r\n    IgoDataSourceModule,\r\n    IgoDownloadModule,\r\n    IgoFeatureModule,\r\n    IgoFilterModule,\r\n    IgoGeometryModule,\r\n    IgoImportExportModule,\r\n    IgoLayerModule,\r\n    IgoMapModule,\r\n    IgoMeasureModule,\r\n    IgoMetadataModule,\r\n    IgoOverlayModule,\r\n    IgoPrintModule,\r\n    IgoQueryModule,\r\n    IgoRoutingModule,\r\n    IgoSearchModule,\r\n    IgoToastModule,\r\n    IgoGeoWorkspaceModule,\r\n    IgoWktModule\r\n  ]\r\n})\r\nexport class IgoGeoModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoGeoModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\n\r\nimport { LAYER, AnyLayerOptions, LayerOptions } from '../../../layer';\r\nimport { QueryableDataSourceOptions, QueryFormat } from '../../../query';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { TextSearchOptions } from './source.interfaces';\r\nimport { ILayerSearchSourceOptions, ILayerData, ILayerResponse } from './ilayer.interfaces';\r\n\r\n/**\r\n * ILayer search source\r\n */\r\n@Injectable()\r\nexport class ILayerSearchSource extends SearchSource implements TextSearch {\r\n\r\n  static id = 'ilayer';\r\n  static type = LAYER;\r\n\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: ILayerSearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.languageService.translate.get(this.options.title).subscribe(title => this.title$.next(title));\r\n  }\r\n\r\n  getId(): string {\r\n    return ILayerSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): ILayerSearchSourceOptions {\r\n    return {\r\n      title: 'igo.geo.search.dataSources.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/layers/search'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a layer by name or keyword\r\n   * @param term Layer name or keyword\r\n   * @returns Observable of <SearchResult<LayerOptions>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<LayerOptions>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(\r\n        map((response: ILayerResponse) => this.extractResults(response))\r\n      );\r\n  }\r\n\r\n  private computeSearchRequestParams(term: string, options: TextSearchOptions): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign({\r\n        q: term\r\n      }, this.params, options.params || {})\r\n    });\r\n  }\r\n\r\n  private extractResults(response: ILayerResponse): SearchResult<LayerOptions>[] {\r\n    return response.items.map((data: ILayerData) => this.dataToResult(data));\r\n  }\r\n\r\n  private dataToResult(data: ILayerData): SearchResult<LayerOptions> {\r\n    const layerOptions = this.computeLayerOptions(data);\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: LAYER,\r\n        id: [this.getId(), data.id].join('.'),\r\n        title: data.source.title,\r\n        titleHtml: data.highlight.title,\r\n        icon: data.source.type === 'Layer' ? 'layers' : 'map'\r\n      },\r\n      data: layerOptions\r\n    };\r\n  }\r\n\r\n  private computeLayerOptions(data: ILayerData): AnyLayerOptions {\r\n    const url = data.source.url;\r\n    const queryParams: any = this.extractQueryParamsFromSourceUrl(url);\r\n    return {\r\n      title: data.source.title,\r\n      sourceOptions: {\r\n        crossOrigin: 'anonymous',\r\n        type: data.source.format,\r\n        url,\r\n        queryable: (data.source as QueryableDataSourceOptions).queryable,\r\n        queryFormat: queryParams.format,\r\n        queryHtmlTarget: queryParams.htmlTarget,\r\n        params: {\r\n          layers: data.source.name\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private extractQueryParamsFromSourceUrl(url: string): {format: QueryFormat; htmlTarget: string; } {\r\n    let queryFormat = QueryFormat.GML2;\r\n    let htmlTarget;\r\n    const formatOpt = (this.options as ILayerSearchSourceOptions).queryFormat;\r\n    if (formatOpt) {\r\n      for (const key of Object.keys(formatOpt)) {\r\n        const value = formatOpt[key];\r\n        if (value === '*') {\r\n          queryFormat = QueryFormat[key.toUpperCase()];\r\n          break;\r\n        }\r\n\r\n        const urls = (value as any as {urls: string[]}).urls;\r\n        if (Array.isArray(urls)) {\r\n          urls.forEach((urlOpt) => {\r\n            if (url.indexOf(urlOpt) !== -1) {\r\n              queryFormat = QueryFormat[key.toUpperCase()];\r\n            }\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (queryFormat === QueryFormat.HTML) {\r\n      htmlTarget = 'iframe';\r\n    }\r\n\r\n    return {\r\n      format: queryFormat,\r\n      htmlTarget\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { ILayerSearchSource } from './ilayer';\r\n\r\n/**\r\n * ILayer search source factory\r\n * @ignore\r\n */\r\nexport function ilayerSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService\r\n) {\r\n  return new ILayerSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${ILayerSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ILayer search source\r\n */\r\nexport function provideILayerSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ilayerSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, LanguageService, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FEATURE, Feature, FeatureGeometry } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions, SearchSourceSettings } from './source.interfaces';\r\nimport { NominatimData } from './nominatim.interfaces';\r\n\r\n/**\r\n * Nominatim search source\r\n */\r\n@Injectable()\r\nexport class NominatimSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'nominatim';\r\n  static type = FEATURE;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return NominatimSearchSource.id;\r\n  }\r\n\r\n  /*\r\n   * Source : https://wiki.openstreetmap.org/wiki/Key:amenity\r\n  */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Nominatim (OSM)',\r\n      searchUrl: 'https://nominatim.openstreetmap.org/search',\r\n      settings: [\r\n        {\r\n            type: 'checkbox',\r\n            title: 'results type',\r\n            name: 'amenity',\r\n            values: [\r\n              {\r\n                title: 'Restauration',\r\n                value: 'bar,bbq,biergaten,cafe,drinking_water,fast_food,food_court,ice_cream,pub,restaurant',\r\n                enabled: false\r\n              },\r\n              {\r\n                title: 'SantÃ©',\r\n                value: 'baby_hatch,clinic,dentist,doctors,hospital,nursing_home,pharmacy,social_facility,veterinary',\r\n                enabled: false\r\n              },\r\n              {\r\n                title: 'Divertissement',\r\n                value: 'arts_centre,brothel,casino,cinema,community_center_fountain,gambling,nightclub,planetarium \\\r\n                          ,public_bookcase,social_centre,stripclub,studio,swingerclub,theatre,internet_cafe',\r\n                enabled: false\r\n              },\r\n              {\r\n                title: 'Finance',\r\n                value: 'atm,bank,bureau_de_change',\r\n                enabled: false\r\n              }\r\n            ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: true\r\n            },\r\n            {\r\n              title: '20',\r\n              value: 20,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'country limitation',\r\n          name: 'countrycodes',\r\n          values: [\r\n            {\r\n              title: 'Canada',\r\n              value: 'CA',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Le monde',\r\n              value: null,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'multiple object',\r\n          name: 'dedupe',\r\n          values: [\r\n            {\r\n              title: 'Oui',\r\n              value: 0,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'Non',\r\n              value: 1,\r\n              enabled: true\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a place by name\r\n   * @param term Place name\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response: NominatimData[]) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          q: this.computeTerm(term),\r\n          format: 'json'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: NominatimData[]): SearchResult<Feature>[] {\r\n    return response.map((data: NominatimData) => this.dataToResult(data));\r\n  }\r\n\r\n  private dataToResult(data: NominatimData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const geometry = this.computeGeometry(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), 'place', data.place_id].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.display_name,\r\n        icon: 'map-marker'\r\n      },\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.display_name\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: NominatimData): { [key: string]: any } {\r\n    return {\r\n      display_name: data.display_name,\r\n      place_id: data.place_id,\r\n      osm_type: data.osm_type,\r\n      class: data.class,\r\n      type: data.type\r\n    };\r\n  }\r\n\r\n  private computeGeometry(data: NominatimData): FeatureGeometry {\r\n    return {\r\n      type: 'Point',\r\n      coordinates: [parseFloat(data.lon), parseFloat(data.lat)]\r\n    };\r\n  }\r\n\r\n  private computeExtent(data: NominatimData): [number, number, number, number] {\r\n    return [\r\n      parseFloat(data.boundingbox[2]),\r\n      parseFloat(data.boundingbox[0]),\r\n      parseFloat(data.boundingbox[3]),\r\n      parseFloat(data.boundingbox[1])\r\n    ];\r\n  }\r\n\r\n  private computeTerm(term: string): string {\r\n    term = this.computeTermTags(term);\r\n    return term;\r\n  }\r\n\r\n  /**\r\n   * Add hashtag from query in Nominatim's format (+[])\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTermTags(term: string): string {\r\n    const tags = term.match(/(#[^\\s]+)/g);\r\n\r\n    let addTagsFromSettings = true;\r\n    if ( tags ) {\r\n      tags.forEach( value => {\r\n        term = term.replace(value, '');\r\n        if ( super.hashtagValid(super.getSettingsValues('amenity'), value) ) {\r\n          term += '+[' + value.substring(1) + ']';\r\n          addTagsFromSettings = false;\r\n        }\r\n      });\r\n      addTagsFromSettings = false;\r\n    }\r\n\r\n    if (addTagsFromSettings) {\r\n      term = this.computeTermSettings(term);\r\n    }\r\n    return term;\r\n  }\r\n\r\n  /**\r\n   * Add hashtag from settings in Nominatim's format (+[])\r\n   * @param term Query\r\n   */\r\n  private computeTermSettings(term: string): string {\r\n    this.options.settings.forEach( settings => {\r\n      if (settings.name === 'amenity')Â {\r\n        settings.values.forEach( conf => {\r\n          if (conf.enabled && typeof conf.value === 'string') {\r\n            const splitted = conf.value.split(',');\r\n            splitted.forEach( value => {\r\n              term += '+[' + value + ']';\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return term;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { NominatimSearchSource } from './nominatim';\r\n\r\n/**\r\n * Nominatim search source factory\r\n * @ignore\r\n */\r\nexport function nominatimSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new NominatimSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${NominatimSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the Nominatim search source\r\n */\r\nexport function provideNominatimSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: nominatimSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  StoredQueriesData,\r\n  StoredQueriesResponse,\r\n  StoredQueriesReverseData,\r\n  StoredQueriesReverseResponse,\r\n  StoredQueriesSearchSourceOptions,\r\n  StoredQueriesFields,\r\n  StoredQueriesReverseSearchSourceOptions\r\n} from './storedqueries.interfaces';\r\n\r\nimport * as olformat from 'ol/format';\r\n\r\n/**\r\n * StoredQueries search source\r\n */\r\n@Injectable()\r\nexport class StoredQueriesSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'storedqueries';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesSearchSourceOptions ;\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err = 'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.fields) {\r\n      throw new Error('Stored Queries :You have to set \"fields\" into options. ex: fields: {\"name\": \"rtss\", \"defaultValue\": \"-99\"}');\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat = this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname = this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n\r\n    const storedQueryId = this.storedQueriesOptions.storedquery_id.toLowerCase();\r\n    if (storedQueryId.includes('getfeaturebyid') && this.storedQueriesOptions.outputformat.toLowerCase().includes('getfeaturebyid') ) {\r\n      let err = 'You must set a geojson format for your stored query. This is due to an openlayers issue)';\r\n      err += ' (wfs 1.1.0 & gml 3.1.1 limitation)';\r\n      throw new Error(err);\r\n    }\r\n\r\n    if (!this.storedQueriesOptions.fields) {\r\n      throw new Error('Stored Queries :You must set a fields definition for your stored query');\r\n    }\r\n\r\n    if (!(this.storedQueriesOptions.fields instanceof Array)) {\r\n      this.storedQueriesOptions.fields = [this.storedQueriesOptions.fields];\r\n    }\r\n\r\n    this.multipleFieldsQuery  = this.storedQueriesOptions.fields.length > 1 ? true : false;\r\n\r\n    this.storedQueriesOptions.fields.forEach((field, index) => {\r\n      if (this.multipleFieldsQuery && !field.splitPrefix && index !== 0) {\r\n        throw new Error('Stored Queries :You must set a field spliter into your field definition (optional for the first one!)');\r\n      }\r\n      if (!field.defaultValue) {\r\n        throw new Error('Stored Queries :You must set a field default value into your field definition');\r\n      }\r\n    });\r\n\r\n    this.storedQueriesOptions.resultTitle = this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries',\r\n      searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'\r\n    };\r\n  }\r\n\r\n  // URL CALL EXAMPLES:\r\n  //  GetFeatureById (mandatory storedquery for wfs server) (outputformat must be in geojson)\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=2.0.0&request=GetFeature&storedquery_id=urn:ogc:def:query:OGC-WFS::GetFeatureById&srsname=epsg:4326&outputformat=geojson&ID=a_num_route.132\r\n  //  Custom StoredQuery\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=rtss&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&rtss=0013801110000c&chainage=12\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const storedqueriesParams = this.termSplitter(term, this.storedQueriesOptions.fields );\r\n    const params = this.computeRequestParams(options || {}, storedqueriesParams);\r\n\r\n    if (new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)) {\r\n      return this.http\r\n      .get(this.searchUrl, { params, responseType: 'text' })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    } else {\r\n      return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    }\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private termSplitter(term: string, fields: StoredQueriesFields[]): {} {\r\n    const splittedTerm = {};\r\n    let remainingTerm = term;\r\n    let cnt = 0;\r\n\r\n    // Used to build the default values\r\n    fields.forEach(field => {\r\n      splittedTerm[field.name] = field.defaultValue;\r\n      const splitterRegex = new RegExp(field.splitPrefix + '(.+)', 'i');\r\n      if (splitterRegex.test(remainingTerm)) {\r\n        cnt = field.splitPrefix ? cnt += 1 : cnt;\r\n        remainingTerm = remainingTerm.split(splitterRegex)[1];\r\n      }\r\n\r\n    });\r\n    if (cnt === 0) {\r\n      splittedTerm[fields[0].name] = term;\r\n      return splittedTerm;\r\n    }\r\n    remainingTerm = term;\r\n    const localFields = [...fields].reverse();\r\n    localFields.forEach((field) => {\r\n      const splitterRegex = new RegExp(field.splitPrefix || '' + '(.+)', 'i');\r\n      if (remainingTerm || remainingTerm !== '') {\r\n        const values = remainingTerm.split(splitterRegex);\r\n        remainingTerm = values[0];\r\n        if (values[1]) {\r\n          splittedTerm[field.name] = values[1].trim();\r\n        }\r\n      }\r\n    });\r\n    return splittedTerm;\r\n  }\r\n\r\n  private computeRequestParams(options: TextSearchOptions, queryParams): HttpParams {\r\n    const wfsversion = this.storedQueriesOptions.storedquery_id.toLowerCase().includes('getfeaturebyid') ? '2.0.0' : '1.1.0';\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'wfs',\r\n          version: wfsversion,\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat\r\n        },\r\n        queryParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: StoredQueriesResponse): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle] ? this.storedQueriesOptions.resultTitle : this.resultTitle;\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        // extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.title,\r\n        titleHtml: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: StoredQueriesData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source\r\n */\r\n\r\n // EXAMPLE CALLS\r\n // tslint:disable-next-line:max-line-length\r\n // https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=lim_adm&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&long=-71.292469&lat=46.748107\r\n //\r\n\r\n@Injectable()\r\nexport class StoredQueriesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'storedqueriesreverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesReverseSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesReverseSearchSourceOptions ;\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err = 'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.longField) {\r\n      throw new Error('Stored Queries :You have to set \"longField\" to map the longitude coordinate to the query params.');\r\n    }\r\n    if (!this.storedQueriesOptions.latField) {\r\n      throw new Error('Stored Queries :You have to set \"latField\" to map the latitude coordinate to the query params.');\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat = this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname = this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n    this.storedQueriesOptions.resultTitle = this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries (reverse)',\r\n      searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n\r\n    if (new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)) {\r\n      return this.http\r\n      .get(this.searchUrl, { params, responseType: 'text' })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    } else {\r\n      return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    }\r\n\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    const longLatParams =  {};\r\n    longLatParams[this.storedQueriesOptions.longField] = lonLat[0];\r\n    longLatParams[this.storedQueriesOptions.latField] = lonLat[1];\r\n\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'wfs',\r\n          version: '1.1.0',\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat,\r\n        },\r\n        longLatParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: StoredQueriesReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle] ? this.storedQueriesOptions.resultTitle : this.resultTitle;\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: StoredQueriesReverseData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return Object.assign(properties, { type: data.properties.doc_type });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  StoredQueriesSearchSource,\r\n  StoredQueriesReverseSearchSource\r\n} from './storedqueries';\r\n\r\n/**\r\n * StoredQueries search source factory\r\n * @ignore\r\n */\r\nexport function storedqueriesSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueries search source\r\n */\r\nexport function provideStoredQueriesSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source factory\r\n * @ignore\r\n */\r\n\r\nexport function storedqueriesReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesReverseSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueriesReverse search source\r\n */\r\nexport function provideStoredQueriesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","export enum RoutingFormat {\r\n  GeoJSON,\r\n  JSON\r\n}\r\nexport enum SourceRoutingType {\r\n  Route = 'Route',\r\n  Trip = 'Trip'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { ConfigService, Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingFormat, SourceRoutingType } from '../shared/routing.enum';\r\n\r\nimport { RoutingSource } from './routing-source';\r\nimport { RoutingSourceOptions } from './routing-source.interface';\r\n\r\n@Injectable()\r\nexport class OsrmRoutingSource extends RoutingSource {\r\n  get enabled(): boolean {\r\n    return this.options.enabled !== false;\r\n  }\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  static _name = 'OSRM QuÃ©bec';\r\n  private routingUrl =\r\n    'https://geoegl.msp.gouv.qc.ca/services/itineraire/route/v1/driving/';\r\n  private options: RoutingSourceOptions;\r\n\r\n  constructor(private http: HttpClient, private config: ConfigService) {\r\n    super();\r\n    this.options = this.config.getConfig('routingSources.osrm') || {};\r\n    this.routingUrl = this.options.url || this.routingUrl;\r\n  }\r\n\r\n  getName(): string {\r\n    return OsrmRoutingSource._name;\r\n  }\r\n\r\n  route(coordinates: [number, number][]): Observable<Routing[]> {\r\n    const routingParams = this.getRouteParams();\r\n    return this.http\r\n      .get<JSON[]>(this.routingUrl + coordinates.join(';'), {\r\n        params: routingParams\r\n      })\r\n      .pipe(map(res => this.extractRoutesData(res)));\r\n  }\r\n\r\n  private extractRoutesData(response): Routing[] {\r\n    const routeResponse = [];\r\n    response.routes.forEach(route => {\r\n      routeResponse.push(this.formatRoute(route, response.waypoints));\r\n    });\r\n    return routeResponse;\r\n  }\r\n\r\n  private getRouteParams(): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: {\r\n        overview: 'full',\r\n        steps: 'true',\r\n        geometries: 'geojson',\r\n        alternatives: 'true'\r\n      }\r\n    });\r\n  }\r\n\r\n  private formatRoute(roadNetworkRoute: any, waypoints: any): Routing {\r\n    const stepsUI = [];\r\n    roadNetworkRoute.legs.forEach(leg => {\r\n      leg.steps.forEach(step => {\r\n        stepsUI.push(step);\r\n      });\r\n    });\r\n    return {\r\n      id: uuid(),\r\n      title: roadNetworkRoute.legs[0].summary,\r\n      source: OsrmRoutingSource._name,\r\n      sourceType: SourceRoutingType.Route,\r\n      order: 1,\r\n      format: RoutingFormat.GeoJSON,\r\n      icon: 'directions',\r\n      projection: 'EPSG:4326',\r\n      waypoints,\r\n      distance: roadNetworkRoute.distance,\r\n      duration: roadNetworkRoute.duration,\r\n      geometry: roadNetworkRoute.geometry,\r\n      legs: roadNetworkRoute.legs,\r\n      steps: stepsUI,\r\n      weight: roadNetworkRoute.weight,\r\n      weight_name: roadNetworkRoute.weight_name\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { RoutingSource } from './routing-source';\r\nimport { OsrmRoutingSource } from './osrm-routing-source';\r\n\r\nexport function osrmRoutingSourcesFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new OsrmRoutingSource(http, config);\r\n}\r\n\r\nexport function provideOsrmRoutingSource() {\r\n  return {\r\n    provide: RoutingSource,\r\n    useFactory: osrmRoutingSourcesFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n"]}