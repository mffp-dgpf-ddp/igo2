{"version":3,"sources":["ng://@igo2/geo/lib/metadata/shared/metadata.service.ts","ng://@igo2/geo/lib/metadata/metadata-button/metadata-button.component.ts","ng://@igo2/geo/lib/metadata/metadata.module.ts","node_modules/tslib/tslib.es6.js","ng://@igo2/geo/lib/datasource/shared/datasources/data.service.ts","ng://@igo2/geo/lib/datasource/utils/id-generator.ts","ng://@igo2/geo/lib/datasource/shared/datasources/datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/feature-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/osm-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/xyz-datasource.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-wfs.utils.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wfs.service.ts","ng://@igo2/geo/lib/query/shared/query.enums.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wms-datasource.ts","ng://@igo2/geo/lib/datasource/utils/tilegrid.ts","ng://@igo2/geo/lib/datasource/shared/datasources/wmts-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/carto-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/arcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/tilearcgisrest-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/websocket-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/mvt-datasource.ts","ng://@igo2/geo/lib/datasource/shared/datasources/cluster-datasource.ts","ng://@igo2/geo/lib/feature/shared/feature.enums.ts","ng://@igo2/geo/lib/layer/shared/layer.enums.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.ts","ng://@igo2/geo/lib/layer/shared/layers/layer.interface.ts","ng://@igo2/geo/lib/layer/utils/image-watcher.ts","ng://@igo2/geo/lib/layer/utils/tile-watcher.ts","ng://@igo2/geo/lib/layer/utils/vector-watcher.ts","ng://@igo2/geo/lib/layer/utils/legend.ts","ng://@igo2/geo/lib/layer/shared/layers/image-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/tile-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vector-layer.ts","ng://@igo2/geo/lib/layer/shared/layers/vectortile-layer.ts","ng://@igo2/geo/lib/layer/shared/style.service.ts","ng://@igo2/geo/lib/query/shared/query.utils.ts","ng://@igo2/geo/lib/layer/layer-item/layer-item.component.ts","ng://@igo2/geo/lib/layer/layer-legend/layer-legend.component.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.enum.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list.component.ts","ng://@igo2/geo/lib/map/shared/map.service.ts","ng://@igo2/geo/lib/layer/layer-list/layer-list-binding.directive.ts","ng://@igo2/geo/lib/feature/shared/strategies/strategy.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading.ts","ng://@igo2/geo/lib/feature/shared/strategies/loading-layer.ts","ng://@igo2/geo/lib/feature/shared/store.ts","ng://@igo2/geo/lib/feature/shared/strategies/selection.ts","ng://@igo2/geo/lib/feature/shared/feature.utils.ts","ng://@igo2/geo/lib/overlay/shared/overlay.utils.ts","ng://@igo2/geo/lib/overlay/shared/overlay.ts","ng://@igo2/geo/lib/map/utils/layer-watcher.ts","ng://@igo2/geo/lib/map/shared/map.enums.ts","ng://@igo2/geo/lib/map/shared/map.utils.ts","ng://@igo2/geo/lib/map/shared/controllers/controller.ts","ng://@igo2/geo/lib/map/shared/controllers/view.ts","ng://@igo2/geo/lib/map/shared/map.ts","ng://@igo2/geo/lib/map/map-browser/map-browser.component.ts","ng://@igo2/geo/lib/map/shared/mapOffline.directive.ts","ng://@igo2/geo/lib/map/shared/projection.service.ts","ng://@igo2/geo/lib/map/zoom-button/zoom-button.component.ts","ng://@igo2/geo/lib/map/geolocate-button/geolocate-button.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.animation.ts","ng://@igo2/geo/lib/map/baselayers-switcher/baselayers-switcher.component.ts","ng://@igo2/geo/lib/map/baselayers-switcher/mini-basemap.component.ts","ng://@igo2/geo/lib/map/rotation-button/rotation-button.component.ts","ng://@igo2/geo/lib/datasource/utils/esri-style-generator.ts","ng://@igo2/geo/lib/datasource/shared/capabilities.service.ts","ng://@igo2/geo/lib/datasource/shared/datasource.service.ts","ng://@igo2/geo/lib/layer/shared/layer.service.ts","ng://@igo2/geo/lib/catalog/shared/catalog.enum.ts","ng://@igo2/geo/lib/query/shared/query.service.ts","ng://@igo2/geo/lib/query/shared/query.directive.ts","ng://@igo2/geo/lib/search/shared/sources/source.ts","ng://@igo2/geo/lib/query/shared/query-search-source.ts","ng://@igo2/geo/lib/catalog/shared/catalog.service.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-layer.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser-group.component.ts","ng://@igo2/geo/lib/catalog/catalog-browser/catalog-browser.module.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library-item.component.ts","ng://@igo2/geo/lib/catalog/catalog-library/catalog-library.module.ts","ng://@igo2/geo/lib/catalog/catalog.module.ts","ng://@igo2/geo/lib/datasource/datasource.module.ts","ng://@igo2/geo/lib/filter/shared/filterable-datasource.pipe.ts","ng://@igo2/geo/lib/filter/shared/time-filter.service.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.enum.ts","ng://@igo2/geo/lib/filter/shared/ogc-filter.service.ts","ng://@igo2/geo/lib/download/shared/download.service.ts","ng://@igo2/geo/lib/download/download-button/download-button.component.ts","ng://@igo2/geo/lib/download/download.module.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.component.ts","ng://@igo2/geo/lib/feature/feature-details/feature-details.module.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.component.ts","ng://@igo2/geo/lib/feature/feature-form/feature-form.module.ts","ng://@igo2/geo/lib/feature/feature.module.ts","ng://@igo2/geo/lib/filter/time-filter-form/time-filter-form.component.ts","ng://@igo2/geo/lib/filter/time-filter-item/time-filter-item.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list.component.ts","ng://@igo2/geo/lib/filter/time-filter-list/time-filter-list-binding.directive.ts","ng://@igo2/geo/lib/wkt/shared/wkt.service.ts","ng://@igo2/geo/lib/filter/ogc-filter-form/ogc-filter-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-form/ogc-filterable-form.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-item/ogc-filterable-item.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list.component.ts","ng://@igo2/geo/lib/filter/ogc-filterable-list/ogc-filterable-list-binding.directive.ts","ng://@igo2/geo/lib/filter/ogc-filter-button/ogc-filter-button.component.ts","ng://@igo2/geo/lib/filter/ogc-filter-toggle-button/ogc-filter-toggle-button.component.ts","ng://@igo2/geo/lib/filter/filter.module.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.component.ts","ng://@igo2/geo/lib/measure/shared/measure.enum.ts","ng://@igo2/geo/lib/measure/shared/measure.utils.ts","ng://@igo2/geo/lib/geometry/shared/geometry.errors.ts","ng://@igo2/geo/lib/geometry/shared/geometry.utils.ts","ng://@igo2/geo/lib/geometry/shared/controls/draw.ts","ng://@igo2/geo/lib/geometry/shared/controls/modify.ts","ng://@igo2/geo/lib/geometry/shared/controls/slice.ts","ng://@igo2/geo/lib/measure/measurer/measurer-dialog.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.component.ts","ng://@igo2/geo/lib/measure/measurer/measure-format.pipe.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field-input.component.ts","ng://@igo2/geo/lib/geometry/geometry-form-field/geometry-form-field.module.ts","ng://@igo2/geo/lib/geometry/geometry.module.ts","ng://@igo2/geo/lib/import-export/shared/export.errors.ts","ng://@igo2/geo/lib/import-export/shared/export.utils.ts","ng://@igo2/geo/lib/import-export/shared/export.type.ts","ng://@igo2/geo/lib/import-export/shared/export.service.ts","ng://@igo2/geo/lib/import-export/shared/import.errors.ts","ng://@igo2/geo/lib/import-export/shared/import.utils.ts","ng://@igo2/geo/lib/import-export/shared/import.service.ts","ng://@igo2/geo/lib/import-export/import-export/import-export.component.ts","ng://@igo2/geo/lib/import-export/shared/drop-geo-file.directive.ts","ng://@igo2/geo/lib/import-export/import-export.module.ts","ng://@igo2/geo/lib/layer/layer.module.ts","ng://@igo2/geo/lib/map/map.module.ts","ng://@igo2/geo/lib/measure/measurer/measurer-item.component.ts","ng://@igo2/geo/lib/measure/measurer/measurer.module.ts","ng://@igo2/geo/lib/measure/measure.module.ts","ng://@igo2/geo/lib/overlay/shared/overlay.enum.ts","ng://@igo2/geo/lib/overlay/shared/overlay.service.ts","ng://@igo2/geo/lib/overlay/shared/overlay.directive.ts","ng://@igo2/geo/lib/overlay/overlay.module.ts","ng://@igo2/geo/lib/print/shared/print.service.ts","ng://@igo2/geo/lib/print/print/print.component.ts","ng://@igo2/geo/lib/print/shared/print.type.ts","ng://@igo2/geo/lib/print/print-form/print-form.component.ts","ng://@igo2/geo/lib/print/print.module.ts","ng://@igo2/geo/lib/query/shared/query-search-source.providers.ts","ng://@igo2/geo/lib/query/query.module.ts","ng://@igo2/geo/lib/search/shared/search-source.service.ts","ng://@igo2/geo/lib/search/shared/search.utils.ts","ng://@igo2/geo/lib/search/shared/search.service.ts","ng://@igo2/geo/lib/routing/routing-sources/routing-source.ts","ng://@igo2/geo/lib/routing/shared/routing-source.service.ts","ng://@igo2/geo/lib/routing/shared/routing.service.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form.service.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form.component.ts","ng://@igo2/geo/lib/routing/routing-form/routing-form-binding.directive.ts","ng://@igo2/geo/lib/routing/routing.module.ts","ng://@igo2/geo/lib/search/shared/search-source-service.providers.ts","ng://@igo2/geo/lib/utils/googleLinks.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.ts","ng://@igo2/geo/lib/search/shared/sources/icherche.providers.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.ts","ng://@igo2/geo/lib/search/shared/sources/coordinates.providers.ts","ng://@igo2/geo/lib/search/shared/search.enums.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.ts","ng://@igo2/geo/lib/search/shared/sources/ilayer.providers.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.ts","ng://@igo2/geo/lib/search/shared/sources/nominatim.providers.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.ts","ng://@igo2/geo/lib/search/shared/sources/storedqueries.providers.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.component.ts","ng://@igo2/geo/lib/search/search-selector/search-selector.module.ts","ng://@igo2/geo/lib/search/search-settings/search-settings.component.ts","ng://@igo2/geo/lib/search/search-settings/search-settings.module.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.component.ts","ng://@igo2/geo/lib/search/search-bar/search-url-param.directive.ts","ng://@igo2/geo/lib/search/search-bar/search-bar.module.ts","ng://@igo2/geo/lib/search/search-results/search-results.component.ts","ng://@igo2/geo/lib/search/search-results/search-results-item.component.ts","ng://@igo2/geo/lib/search/search-results/search-results-add-button.component.ts","ng://@igo2/geo/lib/search/search-results/search-results.module.ts","ng://@igo2/geo/lib/search/search.module.ts","ng://@igo2/geo/lib/toast/toast.component.ts","ng://@igo2/geo/lib/toast/toast.module.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.component.ts","ng://@igo2/geo/lib/workspace/widgets/widgets.ts","ng://@igo2/geo/lib/workspace/widgets/ogc-filter/ogc-filter.module.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wfs-workspace.service.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.ts","ng://@igo2/geo/lib/workspace/shared/wms-workspace.service.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.directive.ts","ng://@igo2/geo/lib/workspace/workspace-selector/workspace-selector.module.ts","ng://@igo2/geo/lib/workspace/workspace.module.ts","ng://@igo2/geo/lib/wkt/wkt.module.ts","ng://@igo2/geo/lib/geo.module.ts","ng://@igo2/geo/lib/routing/shared/routing.enum.ts","ng://@igo2/geo/lib/routing/routing-sources/osrm-routing-source.ts","ng://@igo2/geo/lib/routing/routing-sources/routing-source.provider.ts"],"names":["MetadataService","prototype","open","metadata","extern","window","url","Injectable","args","providedIn","MetadataButtonComponent","Object","defineProperty","this","_layer","value","_color","openMetadata","metadataService","layer","options","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","IgoMetadataModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","MatIconModule","MatButtonModule","MatTooltipModule","IgoLanguageModule","exports","declarations","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadataKey","metadataValue","__values","o","m","Symbol","iterator","next","done","__read","e","ar","push","error","__spread","concat","generateIdFromSourceOptions","wms","generateWMSIdFromSourceOptions","wmts","generateWMTSIdFromSourceOptions","xyz","generateXYZIdFromSourceOptions","feature","generateFeatureIdFromSourceOptions","osm","_options","type","generateId","layers","params","chain","Md5","hashStr","uuid","DataSource","getLegend","scale","legend","dataService","id","ol","createOlSource","tslib_1.__extends","FeatureDataSource","sourceOptions","format","getSourceFormatFromOptions","olSourceVector","olFormatCls","formatType","olformat","undefined","Error","olformat.GeoJSON","formatOptions","onUnwatch","OSMDataSource","olSourceOSM","XYZDataSource","olSourceXYZ","OgcFilterWriter","defineOgcFiltersDefaultOptions","ogcFiltersOptions","fieldNameGeometry","srcType","ogcFiltersDefaultValue","enabled","editable","geometryName","advancedOgcFilters","pushButtons","buildFilter","filters","extent","proj","ourBboxFilter","enableBbox","test","JSON","stringify","olfilter.bbox","getCode","join","checkIgoFiltersProperties","wfsOptions","srsName","featureNS","featurePrefix","featureTypes","filter","olfilter.and","bundleFilter","outputFormat","query","olFormatWFS","writeGetFeature","XMLSerializer","serializeToString","split","filterObject","_this","logicalArray_1","forEach","element","createFilter","operator","logical","logicalArray","filterOptions","geometry","wfsPropertyName","propertyName","wfsPattern","pattern","wfsMatchCase","matchCase","wfsWildCard","wildCard","wfsSingleChar","singleChar","wfsEscapeChar","escapeChar","wfsLowerBoundary","lowerBoundary","wfsUpperBoundary","upperBoundary","wfsGeometryName","wfsExtent","wfsWktGeometry","wkt_geometry","wfsSrsName","wfsBegin","begin","wfsEnd","end","wfsExpression","expression","olFormatWKT","readGeometry","dataProjection","featureProjection","olfilter.between","olfilter.contains","olfilter.during","olfilter.equalTo","olfilter.greaterThan","olfilter.greaterThanOrEqualTo","olfilter.intersects","olfilter.isNull","olfilter.lessThan","olfilter.lessThanOrEqualTo","olfilter.like","replace","olfilter.notEqualTo","olfilter.within","olfilter.or","olfilter.not","defineInterfaceFilterSequence","level","filterSequence","addInterfaceFilter","igoOgcFilterObject","parentLogical","f","active","filterid","igoSpatialSelector","filterArray","addFilterProperties","status","rebuiltIgoOgcFilterObjectFromSequence","sequence","nextElement_1","lastProcessedFilter_1","lastParentLogical_1","logicalArray_2","uiFilter","index","indexOf","console","log","handleOgcFiltersAppliedValue","ogcFilters","filterQueryStringPushButton","filterQueryStringAdvancedFilters","pushButtonBundle","conditions_1","map","buttonBundle","bundleCondition","ogcPushButtons","ogcpb","enabledPb","igoFilters","filterQueryString","formatProcessedOgcFilter","processedFilter","layersOrTypenames","appliedFilter","layerOrTypenames","operators","PropertyIsEqualTo","spatial","fieldRestrict","PropertyIsNotEqualTo","PropertyIsLike","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsBetween","During","PropertyIsNull","Intersects","Within","Contains","defaultEpsg","defaultMaxFeatures","defaultWfsVersion","defaultFieldNameGeometry","gmlRegex","RegExp","jsonRegex","formatWFSQueryString","wfsDataSourceOptions","count","epsg","properties","versionWfs200","urlWfs","paramsWFS","effectiveCount","epsgCode","version","paramMaxFeatures","cnt","maxFeatures","srs","valueReference","sourceFields","fieldsNames_1","sourcefield","name","getFeature","getpropertyvalue","checkWfsParams","WFSDataSource","getFormatFromOptions","overlaps","resolution","buildUrl","strategy","OlLoadingStrategy.bbox","queryStringValues","ogcFilterWriter","filterOrBox","filterOrPush","prefix","xmlFilter","baseUrl","find","download","dynamicUrl","toLowerCase","OlFormat.GeoJSON","OlFormat.WFS","wfsService","_super","getSourceFieldsFromWFS","DataService","WFSService","getData","datasource","defineFieldAndValuefromWFS","subscribe","getfeatureSourceField","alias","values","sf","wfsGetFeature","nb","http","get","responseType","Observable","fieldList","fieldListWoGeom","fieldListWoGeomStr","olFormats","olformat.WFS","oneFeature","features","readFeatures","getKeys","field","getGeometryName","match","manyFeatures","mfeatures","built_properties_value","complete","kv","getProperties","boundedBy","property","fieldType","every","featureProperties","v","HttpClient","GML2","GML3","GEOJSON","ESRIJSON","TEXT","HTML","HTMLGML2","IFRAME","BLANK","WMSDataSource","queryTitle","queryHtmlTarget","QueryHtmlTarget","refresh","updateParams","igoRefresh","Math","random","buildDynamicDownloadUrlFromParamsWFS","asWFSDataSourceOptions","olSourceImageWMS","sourceParams","title","VERSION","SRS","INFO_FORMAT","info_format","refreshIntervalSec","setInterval","wfsCheckup","ObjectUtils","mergeDeep","sourceField","initOgcFilters","createDefaultTileGrid","projectionExtent","olproj.get","getExtent","size","extentGetWidth","resolutions","matrixIds","z","pow","olTileGridWMTS","origin","extentGetTopLeft","WMTSDataSource","tileGrid","olSourceWMTS","CartoDataSource","crossOrigin","olSourceCarto","htmlString","config","items","visible","html","layerOptions","types_1","tslib_1.__values","types_1_1","oneType","cartocss","includes","pop","color","substr","colors","data","j","layer_name","ArcGISRestDataSource","esrijsonFormat","olFormatEsriJSON","attributions","encodeURIComponent","timeFilter","time","timeExtent","customParams","bind","olloadingstrategy.bbox","legendInfo","parseInt","lyr","layerName","_b","_c","lyrLegend","layerId","label","TileArcGISRestDataSource","olSourceTileArcGISRest","WebSocketDataSource","createWebSocket","ws","WebSocket","onmessage","onMessage","onclose","onClose","onerror","onError","onopen","onOpen","event","featureAdded","readFeature","featureToRemove","getFeatureById","getId","removeFeature","addFeature","clear","close","MVTDataSource","mvtFormat","olFormatMVT","featureClass","olSourceVectorTile","ClusterDataSource","source","olSourceCluster","FEATURE","None","Move","Zoom","Default","LAYER","Layer","dataSource","getZIndex","zIndex","setZIndex","baseLayer","visibility","setVisible","opacity","setOpacity","viewController","getResolution","minResolution","getMinResolution","maxResolution","getMaxResolution","showInLayerList","setMap","createOlLayer","set","TITLE","ABSTRACT","CUSTOM","Watcher","ImageWatcher","watch","on","handleLoadStart","handleLoadEnd","unwatch","un","image","__watchers__","loading","SubjectStatus","Working","watcherIndex","splice","loaded","Done","TileWatcher","tile","VectorWatcher","getLayersLegends","legends","newContext","document","createElement","getContext","font","heightPos","layers_1","layers_1_1","legendUrls","legendUrl","legendImage","Image","src","onload","fillText","drawImage","height","legendUrls_1","legendUrls_1_1","ImageLayer","olOptions","olLayerImage","token","getSource","setImageLoadFunction","customLoader","watcher","unsubscribe","xhr","XMLHttpRequest","setRequestHeader","arrayBufferView","Uint8Array","response","blob","Blob","imageUrl","URL","createObjectURL","getImage","send","status$","TileLayer","olLayerTile","VectorLayer","browsable","exportable","animation","flash","olLayerVector","start","Date","getTime","listenerKey","animate","vectorContext","frameState","flashGeom","getGeometry","clone","elapsed","elapsedRatio","duration","easeOut","newColor","ColorAsArray","styleClone","getStyleFunction","getType","radius","getRadius","setRadius","getStroke","setColor","setWidth","getWidth","getFill","setStyle","drawGeometry","unByKey","render","stopAnimation","VectorTileLayer","olLayerVectorTile","StyleService","createStyle","parseStyle","styleOptions","olCls","getOlCls","keys","_key","olKey","getOlKey","olstyle","charAt","toUpperCase","slice","olstyle.RegularShape","createStyleByAttribute","styleByAttribute","attribute","stroke","width","fill","icon","baseStyle","olstyle.Style","olstyle.Icon","olstyle.Circle","olstyle.Stroke","olstyle.Fill","getStyle","text","olstyle.Text","createClusterStyle","clusterParam","range","clusterRange","clusterIcon","clusterScale","toString","layerIsQueryable","queryable","olLayerIsQueryable","olLayer","LayerItemComponent","removable","ngOnInit","legendCollapsed","collapsed","expandLegendIfVisible","toggleLegend","updateQueryBadge","resolution$","resolution$$","onResolutionChange","tooltipText","computeTooltip","ngOnDestroy","showLegend$","toggleVisibility","toggleLegendOnVisibilityChange","tooltip","layerTooltip","layerMetadata","TooltipType","abstract","inResolutionRange","isInResolutionsRange","updateLegendOnResolutionChange","inResolutionRange$","hidden","queryBadge","queryBadgeHidden$","BehaviorSubject","orderable","lowerDisabled","raiseDisabled","LayerLegendComponent","updateLegend","computeItemTitle","layerLegend","of","localLayerOptions","parse","capabilitiesService","getWMSOptions","pipe","wmsDataSourceOptions","_layerOptionsFromCapabilities","getScale","legendItems","legendItems$","CapabilitiesService","always","never","default","LayerListService","sortedAlpha","onlyVisible","onlyInRange","keywordInitialized","sortedAlphaInitialized","onlyVisibleInitialized","onlyInRangeInitialized","LayerListComponent","_layers","setLayers","layerListService","keyword","change$$","change$","debounce","EMPTY","timer","showToolbar$","computeShowToolbar","layers$","computeLayers","initLayerFilterAndSortOptions","toggleOnlyVisible","toggleOnlyInRange","toggleSort","sortAlpha","clearKeyword","getLowerLayer","l","reduce","prev","current","getUpperLayer","layersOut","filterLayers","sortLayersByTitle","sortLayersByZindex","layerFilterAndSortOptions","showToolbar","LayerListControlsEnum","keepLayerIds","dataSourceOptions","layerKeywords","keywordList","kw","normalize","localKeyword","layerTitle","dataSourceType","keywordRegex_1","keywordInList","sort","layer1","layer2","a","thresholdToFilterAndSort","toolbarThreshold","hasLayerNotVisible","hasLayerOutOfRange","excludeBaseLayers","ContentChild","ReplaySubject","placeholder","floatLabel","expandLegendOfVisibleLayers","MapService","getMap","LayerListBindingDirective","component","layers$$","mapService","ngAfterViewInit","initRoutes","route","llcKKey","llcAKey","llcVKey","queryParams","keywordFromUrl","sortedAplhaFromUrl","onlyVisibleFromUrl","onlyInRangeFromUrl","Directive","Self","RouteService","Optional","FeatureStoreStrategy","isActive","activate","doDeactivate","doActivate","deactivate","bindStore","store","stores","unbindStore","FeatureStoreLoadingStrategy","watchStore","unwatchStore","unwatchAll","stores$$","has","subscription","view","all$","onFeaturesChange","delete","from","entries","clearLayer","setLayerFeatures","selectMotion","viewScale","areaRatio","getFeatureId","motion","pristine","FeatureMotion","Map","FeatureStoreLoadingLayerStrategy","onSourceChanges","olFeatures","getFeatures","setStoreOlFeatures","EntityStore","FeatureStore","bindLayer","addStrategy","strategies","_strategy","removeStrategy","getStrategyOfType","activateStrategyOfType","deactivateStrategyOfType","getEntityId","checkLayer","featureToOl","projection","setLayerOlFeatures","olFeature","featureFromOl","load","olFeaturesMap","olFeaturesToRemove","forEachFeature","newOlFeature","olFeaturesToAddIds","olFeaturesToAdd","removeOlFeaturesFromLayer","addOlFeaturesToLayer","moveToOlFeatures","addFeatures","entities","OlDragSelectInteraction","OlDragBoxInteraction","FeatureStoreSelectionStrategy","unselectAll","state","updateAll","selected","overlayStore","addOverlayLayer","listenToMapClick","dragBox","addDragBoxInteraction","watchAll","unlistenToMapClick","removeDragBoxInteraction","removeOverlayLayer","stores$","stateView","manyBy$","record","records","entity","combineLatest","debounceTime","skip","onSelectFromStore","mapClickListener","onMapClick","listener","exclusive","ctrlKeyDown","reverse","getFeaturesAtPixel","pixel","hitTolerance","layerFilter","onSelectFromMap","olDragSelectInteraction","olInteractions","getInteractions","getArray","olInteractions_1","olInteractions_1_1","olInteraction","condition","addInteraction","olDragSelectInteractionEndKey","onDragBoxEnd","removeInteraction","mapBrowserEvent","acc","olSource","getFeaturesInExtent","overlayFeaturesKeys","featuresKeys","getKey","doMotion","groupedFeatures","groupFeaturesByStore","unselectAllFeaturesFromStore","selectFeaturesFromStore","reverseMany","updateMany","createOverlayStore","overlayLayer","createOverlayLayer","style","addLayer","removeLayer","projectionOut","OlFormatGeoJSON","setId","getEntityTitle","mapTitle","getEntityProperty","getEntityRevision","projectionIn","olFormat","startsWith","writeGeometryObject","meta","revision","getRevision","computeOlFeatureExtent","olExtent","olextent.createEmpty","olFeatureExtent","olFeatureProjection","olproj.transformExtent","olGeometry","computeOlFeaturesExtent","featureExtent","olextent.extend","scaleExtent","_a","olextent","getSize","featuresAreOutOfView","featuresExtent","mapExtent","viewExtent","x","olextent.containsExtent","featuresAreTooDeepInView","mapExtentArea","olextent.getArea","zoomToExtent","moveToExtent","tryBindStoreLayer","tryAddLoadingStrategy","tryAddSelectionStrategy","overlayDataSource","createOverlayLayerStyle","defaultStyle","createOverlayDefaultStyle","overflow","markerStyle","createOverlayMarkerStyle","createBufferStyle","strokeRGBA","strokeWidth","fillRGBA","bufferRadius","geometryType","getText","setText","iconColor","color$$1","imgSize","anchor","Overlay","setFeatures","addOlFeatures","addOlFeature","LayerWatcher","unwatchLayer","watchLayer","layer$$","distinctUntilChanged","subscriptions","status_1","Waiting","stringToLonLat","str","mapProjection","lonLat","coordStr","negativeLon","degreesLon","minutesLon","secondsLon","directionLon","decimalLon","negativeLat","degreesLat","minutesLat","secondsLat","directionLat","decimalLat","timeZone","conf","lon","lat","projectionStr","projectionRegex","lonlatCoord","lonLatPattern","lonLatRegex","dmsCoord","dmsCoordPattern","dmsRegex","patternUtmMtm","utmMtmRegex","ddCoord","patternDd","ddRegex","dmdCoord","patternDmd","dmdRegex","patternBELL","bellRegex","mmCoord","mmPattern","mmRegex","toLocaleUpperCase","parseFloat","convertDMSToDD","_d","_e","proj4","toLocaleLowerCase","_f","_g","_h","message","_j","olproj.transform","degrees","minutes","seconds","direction","dd","viewStatesAreEqual","state1","state2","zoom","trunc","center","formatScale","round","getResolutionFromScale","dpi","getScaleFromResolution","unit","olproj.METERS_PER_UNIT","originalEvent","altKey","MAC","metaKey","ctrlKey","shiftKey","MapController","getOlMap","olMap","setOlMap","teardownObservers","observerKeys","MapViewController","stateHistory","getView","setupObservers","onMoveEnd","extent$$","extent$","setExtent","action","getOlProjection","olView","getProjection","getCenter","calculateExtent","getUnits","getZoom","zoomIn","zoomTo","zoomOut","easing","oleasing.easeOut","MapViewAction","getRotation","resetRotation","rotation","hasPreviousState","states","stateIndex","hasNextState","previousState","setStateIndex","nextState","clearStateHistory","setInitialState","fit","maxZoom","setState","state$","Subject","IgoMap","init","controls","attribution","attributionOpt","olControlAttribution","scaleLine","scaleLineOpt","olControlScaleLine","interactions","altShiftDragRotate","doubleClickZoom","keyboard","mouseWheelZoom","shiftDragZoom","dragPan","pinchRotate","pinchZoom","olinteraction.defaults","setView","overlay","buffer","setTarget","layerWatcher","updateView","currentView","viewOptions","unsubscribeGeolocate","olproj.fromLonLat","setCenter","geolocate","changeBaseLayer","getBaseLayers","getLayerById","getLayerByAlias","addLayers","addedLayers","doAddLayer","removeLayers","newLayers","layersToRemove","getLayerIndex","doRemoveLayer","removeAllLayers","raiseLayer","moveLayer","lowerLayer","to","layerTo","zIndexTo","zIndexFrom","existingLayer","offset","sortLayersByZIndex","findIndex","track","first","geolocation$$","geolocation","getTracking","startGeolocation","geolocation$","getAccuracy","getAccuracyGeometry","geolocationFeature","options_","coordinates","getPosition","bufferGeom","olCircle","bufferStroke","bufferFill","bufferText","showBufferRadius","bufferFeature","setZoom","stopGeolocation","setTracking","olGeolocation","tracking","evt","defaultOptions","olproj4.register","MapBrowserComponent","_view","status$$","handleStatusChange","activityService","unregister","activityId","register","ActivityService","MapOfflineDirective","networkService","currentState","changeLayer","connection","setMaxResolution","Infinity","pathOffline","setUrl","NetworkService","ProjectionService","registerProjection","defs","code","def","ConfigService","getConfig","ZoomButtonComponent","GeolocateButtonComponent","_map","baseLayersSwitcherSlideInOut","trigger","transition","BaseLayersSwitcherComponent","_useStaticIcon","arrayLayers","_baseLayers","collapseOrExpand","baseLayers","useStaticIcon","expand","mapResolution","bl","blHidden","animations","MediaService","mediaService","showButton","media$","Media","Mobile","MiniBaseMapComponent","handleMoveEnd","_baseLayer","handleBaseLayerChanged","_disabled","_display","disabled","appRef","tick","basemap","baselayer","layerService","createLayer","LayerService","ApplicationRef","RotationButtonComponent","_showIfNoRotation","rotationStyle","radians","transform","EsriStyleGenerator","_convertPointToPixel","point","_transformColor","_getResolutionForScale","units","mpu","_convertEsriTS","symbol","_transformAngle","angle","weight","family","textBaseline","verticalAlignment","textAlign","horizontalAlignment","offsetX","xoffset","offsetY","yoffset","_convertEsriPMS","contentType","imageData","_convertEsriSFS","outline","_convertOutline","lineDash","_convertEsriSLS","ol3Rad","PI","_convertEsriSMS","points","radius2","_convertLabelingInfo","labelingInfo","mapUnits","styles","ii","labelExpression","maxScale","minScale","_converters","_renderSimple","renderer","_renderClassBreaks","defaultSymbol","classes","classBreakInfos","classBreakInfo","min","classMinValue","minValue","classMaxValue","max","_renderUniqueValue","field1","infos","uniqueValueInfos","me","hash","info","generateStyle","layerInfo","drawingInfo","styleFunctions","drawingInfoStyle","_renderers","labelingInfoStyleFunctions","result","esriPMS","esriSFS","esriSLS","esriSMS","esriTS","uniqueValue","simple","classBreaks","baseOptions","getCapabilities","capabilities","parseWMSOptions","getWMTSOptions","parseWMTSOptions","getCartoOptions","account","mapId","jsonp","cartoOptions","parseCartoOptions","getArcgisOptions","arcgisOptions","res","catchError","err","forkJoin","parseArcgisOptions","getTileArcgisOptions","parseTileArcgisOptions","service","HttpParams","fromObject","request","parsers","read","findDataSourceInCapabilities","Capability","DataURL","Abstract","KeywordList","getTimeFilter","timeFilterable","removeUndefined","Title","MaxScaleDenominator","MinScaleDenominator","OnlineResource","optionsFromCapabilities","layer_definition","styleGenerator","olAttribution","copyrightText","timeInfo","setTime","toUTCString","layerArray","layer_1","isArray","Name","dimension","Dimension","minMaxDim","step","tslib_1.__decorate","Cacheable","capabilitiesStore","WMSCapabilities","WMTSCapabilities","DataSourceService","createAsyncDataSource","context","createOSMDataSource","createFeatureDataSource","createWFSDataSource","createWMSDataSource","createWMTSDataSource","createXYZDataSource","createCartoDataSource","createArcGISRestDataSource","createWebSocketDataSource","createMVTDataSource","createTileArcGISRestDataSource","createClusterDataSource","datasources$","wfsDataSourceService","createTileLayer","createVectorLayer","createImageLayer","createVectorTileLayer","createAsyncLayer","dataSourceService","tokenKey","localStorage","getItem","styleService","serviceStyle_1","serviceStyle_2","layerOptionsOl","serviceStyle_3","Group","QueryService","queryLayer","getQueryUrl","queryFormat","QueryFormat","extractData","urlGml","mergeMap","gmlRes","imposedGeom","mergeGML","parser","olFormatGML2","olformat.WMSGetFeatureInfo","pts","firstFeatureType","olmpts","olmline","olgeom.MultiLineString","ptsArray","olmpoly","olgeom.MultiPolygon","nbFeatures","bbox","getQueryParams","bboxExtent","featureGeometryCoordinates","getCoordinates","featureGeometryType","olgeom.Point","appendLineString","olgeom.LineString","appendPolygon","olgeom.Polygon","convexHull","cross","lower","points_1","points_1_1","upper","imposedGeometry","allowedFieldsAndAlias","queryDataSource","extractGML3Data","extractGeoJSONData","extractEsriJSONData","extractTextData","extractHtmlData","extractGML2Data","sourceTitle","order","featureToResult","olFormatGML3","warn","htmlTarget","searchParams","bboxRaw","xPosition","yPosition","y","crs","threshold","abs","clickx","clicky","clickx1","clicky1","wktPoly","olformat.WKT","bodyTagStart","bodyTagEnd","lastIndexOf","body","queryString","pairs","pair","decodeURIComponent","featureOL","featureGeometry","shape","SHAPE","the_geom","forceGML2","wmsDatasource","WMSGetFeatureInfoOptions","getMimeInfoFormat","QUERY_LAYERS","FEATURE_COUNT","feature_count","getGetFeatureInfoUrl","cartoDatasource","sql","meters","queryPrecision","tileArcGISRestDatasource","olextent.boundingExtent","olextent.buffer","mime","queryEnabled","QueryDirective","cancelOngoingQueries","onMapEvent","queryService","queries$","queryFeatures","doQueryFeatures","queryLayers","coordinate","waitForAllQueries","queries$$","zip","results","emit","query$","clickedFeatures","forEachFeatureAtPixel","layerOL","queryFeaturesHitTolerance","queryFeaturesCondition","sub","Output","EventEmitter","SearchSource","getDefaultOptions","available","searchUrl","settings","setParamFromSetting","setting","confValue_1","hashtagValid","searchSourceSetting","hashtag","completeMatch","hashtagIsValid","re","substring","getSettingsValues","search","QuerySearchSource","Inject","CatalogService","loadCatalogs","contextConfig","catalogConfig","apiUrl","catalogsFromConfig","sources","observables$","baseLayersCatalog","languageService","translate","instant","catalogsFromApi$","loadCatalogItems","catalog","loadCatalogBaseLayerItems","loadCatalogWMTSLayerItems","loadCatalogWMSLayerItems","getCatalogBaseLayersOptions","layersOptions","CatalogItemType","getCatalogWMSCapabilities","includeRecursiveItems","getCatalogWMTSCapabilities","getWMTSItems","layerList","group","this_1","catalogTooltipType","retrieveTooltipType","layersQueryFormat","findCatalogInfoFormat","groupItem","configuredQueryFormat","retriveLayerInfoFormat","testLayerRegexes","regexes","catalogQueryParams","baseSourceOptions","setCrossOriginAnonymous","catalogSourceOptions","regFilters","Contents","Identifier","matrixSet","requestEncoding","item","regex","layerNameFromCatalog","currentLayerInfoFormat","baseInfoFormat","tooltipType","configuredInfoFormat","specific","LanguageService","CatalogBrowserComponent","currentItems","added","sortDirection","valueAccessor","EntityStoreWatcher","cdRef","destroy","isGroup","isLayer","onLayerAddedChange","update","addLayerToMap","removeLayerFromMap","onGroupAddedChange","addGroupToMap","removeGroupFromMap","addLayersToMap","removeLayersFromMap","oLayers","oLayer","ChangeDetectorRef","toggleCollapsedGroup","CatalogBrowserLayerComponent","getEntityIcon","onToggleClick","remove","add","addedChange","CatalogBrowserGroupComponent","evaluateAdded","evaluateDisabled","added$","onToggleCollapsed","layerAddedChange","tryToggleGroup","all","toggleCollapsed","disabled$","IgoCatalogBrowserModule","MatListModule","IgoListModule","IgoCollapsibleModule","CatalogLibaryComponent","onCatalogSelect","focused","catalogSelectChange","CatalogLibaryItemComponent","IgoCatalogLibraryModule","IgoCatalogModule","IgoDataSourceModule","FilterableDataSourcePipe","arg","isTimeFilterable","isOgcFilterable","Pipe","TimeFilterService","filterByDate","date","newdateformStart","newdateformEnd","dates","reformatDateTime","filterByYear","year","years","getFullYear","month","getMonth","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","Number","BasicNumericOperator","Basic","BasicAndSpatial","Spatial","All","OGCFilterService","filterByOgc","filterString","setOgcWFSFiltersOptions","wfsDatasource","interfaceOgcFilters","setOgcWMSFiltersOptions","filtered","DownloadService","messageService","success","DSOptions","outputFormatDownload","baseurl","olProjection","MessageService","DownloadButtonComponent","openDownload","downloadService","IgoDownloadModule","FeatureDetailsComponent","_feature","detectChanges","htmlSanitizer","sanitizer","bypassSecurityTrustResourceUrl","isObject","isUrl","filterFeatureProperties","excludeAttribute","excludeAttributeOffline","DomSanitizer","IgoFeatureDetailsModule","IgoKeyValueModule","FeatureFormComponent","ngOnChanges","changes","currentValue","previousValue","setStore","feature$","onSubmit","formDataToFeature","submitForm","propertyPrefix","entry","activateStoreSelection","deactivateStoreSelection","selectionStrategy","IgoFeatureFormModule","IgoFormModule","IgoFeatureModule","TimeFilterFormComponent","valueArray","startDate","endDate","isNaN","valueOf","getStepDefinition","timeInterval","utcmin","getTimezoneOffset","utcmax","startYear","initStartYear","endYear","initEndYear","isRange","startListYears","endListYears","listYears","handleDateChange","setupDateOutput","applyTypeChange","change","handleYearChange","yearChange","handleListYearChange","handleListYearStartChange","dateToNumber","setSliderThumbLabel","thumbLabel","findThumbLabel","mySlider","_elementRef","nativeElement","childNodes","textContent","className","children","playFilter","interval","stopFilter","playIcon","that","newMinDateNumber","maxDateNumber","clearInterval","handleSliderDateChange","handleSliderTooltip","handleSliderValue","currentDate","getRoundedDate","toDateString","toTimeString","setSeconds","setHours","setMinutes","getDay","selectedHour","getHours","selectedMinute","getMinutes","getRangeMinDate","getRangeMaxDate","atMinute","coeff","moment.duration","asMilliseconds","ViewChild","MatSlider","TimeFilterItemComponent","timeFilterService","TimeFilterListComponent","TimeFilterListBindingDirective","WktService","wktToFeature","wkt","wktProj","featureProj","olWKT","extentToWkt","epsgTO","extentProj","currentExtent","roundCoordinateArray","wktLine","wktMultiPoints","coordinateArray","decimal","roundArray","array","toFixed","snrcToWkt","snrc","snrc250kIndex","snrc50kIndex","snrc1m","snrc250k","snrc50k","ar1m","part1m","part250k_1","part50k_1","separator","partEW","partSN","index250kEW_1","index250kSN_1","index50kEW_1","index50kSN_1","increment250kEW","increment250kSN","increment50kEW","increment50kSN","unitPerTypeEW","unitPerTypeSN","coord","ul","1","2","3","4","5","6","7","8","9","10","lr","ur","ll","OgcFilterFormComponent","updateField","computeAllowedOperators","allowedOperators","allowedOperatorsType","effectiveOperators","OgcFilterOperatorType","ogcFilterOperators","fields","excludeFromOgcFilters","currentFilter","toggleFilterState","checked","removeOverlayByID","refreshFilters","deleteFilter","changeNumericProperty","changeProperty","overlayId","baseOverlayName","changeOperator","changeGeometry","checkSNRC50k","checkSNRC250k","checkSNRC1m","wktService","igoSpatialSelectors","OgcFilterableFormComponent","OgcFilterableItemComponent","hasPushButton","ogcFilterService","lastRunOgcFilter","hasActiveSpatialFilter","filtersAreEditable","addFilterToSequence","filtersCollapsed","arr","lastLevel","firstFieldName","datasourceOptions","defaultLogicalParent","force","activeFilters","af","ogcLayer","rebuildFilter","isAdvancedOgcFilters","addFilterDisabled","changeOgcFiltersAdvancedOgcFilters","changeOgcFilterType","OgcFilterableListComponent","OgcFilterableListBindingDirective","OgcFilterButtonComponent","toggleOgcFilter","ogcFilterCollapse","OgcFilterToggleButtonComponent","applyFilters","getToolTip","pb","tt","getButtonColor","background-color","bundleIsVertical","bundle","vertical","currentOgcPushButton","conditions","IgoFilterModule","provide","MAT_DATE_LOCALE","useValue","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonToggleModule","MatCheckboxModule","MatSliderModule","MatSlideToggleModule","MatFormFieldModule","MatInputModule","MatOptionModule","MatSelectModule","MatDatepickerModule","MatNativeDateModule","GeometryFormFieldComponent","geometryType$","drawGuide$","drawGuide","value$","formControl","value$$","valueChanges","onGeometryTypeChange","onDrawGuideChange","FormFieldComponent","geometryTypeField","geometryTypes","drawGuideField","drawGuidePlaceholder","measure","Length","Area","Meters","Kilometers","Miles","Feet","MeasureLengthUnitAbbreviation","MeasureLengthUnit","SquareMeters","SquareKilometers","SquareMiles","SquareFeet","Hectares","Acres","MeasureAreaUnitAbbreviation","MeasureAreaUnit","metersToKilometers","metersToFeet","metersToMiles","squareMetersToSquareKilometers","squareMetersToSquareMiles","squareMetersToSquareFeet","squareMetersToHectares","squareMetersToAcres","metersToUnit","conversion","val","squareMetersToUnit","formatMeasure","parts","locale","toLocaleString","minimumFractionDigits","maximumFractionDigits","unitAbbr","computeBestLengthUnit","converted","possibleUnits","computeBestAreaUnit","createMeasureInteractionStyle","createMeasureLayerStyle","measureOlGeometryLength","OlPoint","getFlatCoordinates","olGetLength","measureOlGeometryArea","OlLineString","olGetArea","measureOlGeometry","area","lengths","flatCoordinates","coordinatesLength","olSegment","updateOlGeometryMidpoints","olMidpoints","getOlGeometryMidpoints","midpointsLength","midpointCoordinate","getCoordinateAt","olMidpoint","setCoordinates","expectedNumber","clearOlMidpointTooltip","olTooltip","removeOverlay","updateOlTooltipsAtMidpoints","createOlTooltipAtPoint","setPosition","getOlTooltipsAtMidpoints","updateOlGeometryCenter","olCenter","centerCoordinate","olGetCenter","updateOlTooltipAtCenter","getOlTooltipAtCenter","getTooltipsOfOlGeometry","olTooltips","olCenterTooltip","olPoint","OlOverlay","stopEvent","GeometrySliceError","GeometrySliceMultiPolygonError","GeometrySliceLineStringError","GeometrySliceTooManyIntersectionError","createDrawInteractionStyle","createDrawHoleInteractionStyle","sliceOlGeometry","olSlicer","OlPolygon","sliceOlPolygon","sliceOlLineString","olLineString","olPolygon","getLinearRingCount","slicer","OlGeoJSON","outerCoordinates","getLinearRing","totalIntersectionCount","segmentCoordinates","segment","lineString","intersections","lineIntersect","intersectionCount","intersection","addLinearRingToOlPolygon","olLinearRing","appendLinearRing","DrawControl","olOverlayLayer","clearOlInnerOverlaySource","removeOlInnerOverlayLayer","removeOlDrawInteraction","addOlInnerOverlayLayer","addOlDrawInteraction","olOverlaySource","createOlInnerOverlayLayer","OlVectorLayer","OlVectorSource","layerStyle","olDrawInteraction","OlDraw","stopClick","drawStyle","maxPoints","freehand","freehandCondition","onDrawStartKey","onDrawStart","onDrawEndKey","onDrawEnd","unsubscribeToKeyDown","start$","onChangesKey","olGeometryEvent","changes$","subscribeToKeyDown","end$","keyDown$$","fromEvent","keyCode","removeLastPoint","ModifyControl","olLinearRingsLayer","removeOlModifyInteraction","removeOlTranslateInteraction","addOlTranslateInteraction","activateTranslateInteraction","addOlModifyInteraction","activateModifyInteraction","setOlGeometry","OlFeature","createOlLinearRingsLayer","addOlLinearRingsLayer","removeOlLinearRingsLayer","clearOlLinearRingsSource","olLinearRingsSource","olModifyInteraction","OlModify","deactivateModifyInteraction","olModifyInteractionIsActive","onModifyStartKey","onModifyStart","onModifyEndKey","onModifyEnd","onModifyKey","olDrawInteractionIsActive","olTranslateInteraction","OlTranslate","deactivateTranslateInteraction","olTranslateInteractionIsActive","onTranslateStartKey","onTranslateStart","onTranslateEndKey","onTranslateEnd","onTranslateKey","getOlGeometry","intersectsCoordinate","subscribeToDrawKeyDown","drawKeyDown$$","unsubscribeToDrawKeyDown","subscribeToDrawKeyUp","activateDrawInteraction","drawKeyUp$$","unsubscribeToDrawKeyUp","deactivateDrawInteraction","removedOlInteractions","linearRingCoordinates","addLinearRingToOlGeometry","onDrawKey","_linearRingCoordinates","updateLinearRingOfOlGeometry","OlLinearRing","newCoordinates","getLinearRings","SliceControl","removeDrawLineControl","addDrawLineControl","drawLineControl","drawLineStart$$","olLine","onDrawLineStart","drawLineEnd$$","onDrawLineEnd","olSlicedGeometries","lineExtent","forEachFeatureInExtent","olParts","error$","MeasurerDialogComponent","onNoClick","dialogRef","MatDialogRef","MAT_DIALOG_DATA","measureAreaUnit","measureLengthUnit","MeasurerComponent","_activeMeasureType","setActiveMeasureType","activeDrawControl","initStore","createDrawLineControl","createDrawPolygonControl","createModifyControl","toggleDrawControl","onToggleTooltips","showTooltips","updateTooltipsOfOlSource","deactivateModifyControl","freezeStore","onMeasureTypeChange","measureType","activeMeasureType","onToggleDrawControl","toggle","deactivateDrawControl","showTooltipsOfOlSource","clearTooltipsOfOlSource","onToggleMeasureUnitsAuto","measureUnitsAuto","onLengthUnitChange","activeLengthUnit","table","activeOlGeometry","updateTooltipsOfOlGeometry","onAreaUnitChange","activeAreaUnit","onCalculateClick","selectedFeatures$","sum","perimeter","openDialog","onDeleteClick","deleteMany","onModifyClick","modifyControl","feature_1","_olFeature","activateModifyControl","clearTooltipsOfOlGeometry","dialog","many","onFeatureAddedKey","updateMeasureOfOlGeometry","onFeatureRemovedKey","selectedFeatures$$","olDrawSource","OlStyle","drawPolygonControl","MeasureType","activateDrawControl","drawControl","drawStart$$","drawEnd$$","drawChanges$$","onDrawChanges","clearMeasures","finalizeMeasureOfOlGeometry","addFeatureToStore","measure$","selection","modifyStart$$","modifyEnd$$","modifyChanges$$","onModifyChanges","setProperties","_measure","featureId","olMidpointsTooltips","length_1","updateOlTooltip","showTooltipsOfOlGeometry","shouldShowTooltip","addOverlay","_unit","_type","getElement","innerHTML","computeTooltipInnerHTML","minSegmentLength","MatDialog","tableTemplate","selectMany","selectionCheckbox","columns","MeasureFormatPipe","out","GeometryFormFieldInputComponent","_geometryType","ready","deactivateControl","createDrawControl","toggleControl","_drawStyle","isStyleWithRadius","defaultDrawStyleRadius","_overlayStyle","_value","addGeoJSONToOverlay","onChange","addOlOverlayLayer","createMeasureTooltip","registerOnChange","fn","registerOnTouched","onTouched","writeValue","updateDrawStyleWithDrawGuide","activateControl","control","activeControl","olGeometryEnds$$","onOlGeometryEnds","olGeometryChanges$$","onOlGeometryChanges","removeMeasureTooltip","updateMeasureTooltip","olGeoJSON","overlayStyle","lastIndex","lastLength","olLastMidpoint","innerHtml","olStyle","NgControl","ngControl","IgoGeometryFormFieldModule","IgoGeometryModule","entryComponents","ExportError","ExportInvalidFileError","ExportNothingToExportError","downloadContent","content","mimeType","fileName","setAttribute","display","appendChild","click","removeChild","handleFileExportError","handleNothingToExportError","ExportFormat","strEnum","ExportService","export","exportOlFeatures","exportAsync","observer","nothingToExport","ogreFormats","ogreUrl","noOgreFallbacks","exportToFile","exportWithOgre","writeFeatures","featureType","featuresText","form","geojsonField","outputNameField","outputName","ogreFormat","outputFormatField","submit","GML","GPX","KML","Shapefile","ImportError","ImportInvalidFileError","ImportUnreadableFileError","ImportNothingToImportError","addLayerAndFeaturesToMap","floor","g","olStyle.Stroke","olStyle.Fill","olStyle.Style","olStyle.Circle","handleFileImportSuccess","file","computeLayerTitleFromFile","messageTitle","handleNothingToImportError","handleFileImportError","getFileExtension","ImportService","import","importAsync","getFileImporter","extension","allowedMimeTypes","allowedZipMimeTypes","allowedExtensions","importFile","importFileWithOgre","importer","reader","FileReader","parseFeaturesFromFile","readAsText","formData","FormData","append","post","headers","HttpHeaders","errors","parseFeaturesFromGeoJSON","GeoJSON","olformat.KML","olformat.GML","olformat.GPX","writeFeatureObject","ImportExportComponent","importFiles","files","importService","inputProj","onFileImportSuccess","onFileImportError","files_1","files_1_1","handleExportFormSubmit","exportService","onFileExportError","buildForm","formBuilder","Validators","required","FormBuilder","formats","DragAndDropDirective","DropGeoFileDirective","filesDropped$$","filesDropped","onFilesDropped","onDragOver","onDragLeave","onDrop","HostListener","filesInvalid","IgoImportExportModule","MatTabsModule","IgoDrapDropModule","IgoLayerModule","MatBadgeModule","IgoImageModule","IgoMapModule","IgoConfirmDialogModule","MeasurerItemComponent","_auto","toggleAutoUnit","onMeasureUnitChange","measureUnit","measureUnitChange","measure$$","computeBestMeasureUnit","IgoMeasurerModule","IgoEntityTableModule","IgoMeasureModule","ZoomIfOutMapExtent","OverlayService","OverlayAction","features$","OverlayDirective","features$$","overlayService","handleFeatures","olFormatGeoJSON","IgoOverlayModule","html2canvas","_html2canvas","PrintService","print","paperFormat","orientation","doc","jsPDF","dimensions","internal","pageSize","margins","addTitle","showProjection","showScale","addProjScale","comment","addComment","addMap","showLegend","addLegend","saveDoc","getLayersLegendHtml","getLayersLegendImage","doZipFile","div","setTimeout","useCORS","then","canvas","generateCanvaFileToZip","saveCanvasImageAsFile","parentNode","pageWidth","titleMarginLeft","titleWidth","setFont","setFontSize","heightPixels","textProjScale","imgData","toDataURL","addPage","imageSize","getImageSizeToFitPdf","addImage","addCanvas","rect","timeout","mapSize","widthPixels","once","mapStatus$$","mapStatus","clearTimeout","renderMap","defineNbFileToProcess","nbFileToProcess","downloadMapImage","newCanvas","positionHCanvas","positionWProjScale","commentWidth","measureText","positionHProjScale","commentNbLine","ceil","positionHComment","fillStyle","fillRect","projText","scaleText","mapScale","nbCommentChar","CommentLengthToCut","commentCurrentLine","positionFirstCutChar","positionLastBlank","tiwContent","getWorldFileInformation","addFileToZip","saveAs","saveFileProcessing","renderSync","save","pageHeight","getHeight","canHeight","canWidth","heightRatio","widthRatio","maxRatio","currentResolution","blobFormat","navigator","msSaveBlob","msToBlob","toBlob","zipFile","JSZip","getZipFile","generateAsync","PrintComponent","_outputFormat","_paperFormat","_orientation","_imageFormat","_resolution","handleFormSubmit","isPrintService","printService","imageFormat","PrintOutputFormat","PrintPaperFormat","PrintOrientation","PrintResolution","PrintSaveImageFormat","PrintFormComponent","imageFormatField","setValue","Jpeg","onlySelf","Pdf","paperFormatField","Letter","orientationField","landscape","resolutionField","titleField","commentField","showProjectionField","showScaleField","showLegendField","doZipFileField","isValid","submitted","toggleImageSaveProp","outputFormats","paperFormats","orientations","imageFormats","IgoPrintModule","querySearchSourceFactory","provideQuerySearchSource","useFactory","multi","deps","IgoQueryModule","SearchSourceService","getSources","getEnabledSources","enableSourcesByType","sourceCanSearch","sourceCanReverseSearch","reverseSearch","SearchService","term","termIsValid","searchSourceService","searchSources","reverseSearchSources","RoutingSourceService","routingSourceServiceFactory","provideRoutingSourceService","RoutingSource","RoutingService","routingSourceService","routeSource","RoutingFormService","getStopsCoordinates","stopsCoordinates","setStopsCoordinates","isMapWaitingForRoutingClick","mapWaitingForRoutingClick","setMapWaitingForRoutingClick","unsetMapWaitingForRoutingClick","RoutingFormComponent","_term","_debounce","_length","changeRoute","selectedRoute","showRouteGeometry","unsubscribeRoutesQueries","unlistenSingleClick","stopCoordinates","stops","stop","routingRoutesOverlayDataSource","routingStopsOverlayDataSource","routingFormService","browserLanguage","getLanguage","stopsForm","routingType","routingMode","stopOrderPriority","routingFixedStartEnd","createStop","focusOnStop","selectedStopFeature","stopsLayer","routesLayer","selectStops","olinteraction.Select","olcondition.pointerMove","translateStop","olinteraction.Translate","selectRouteHover","selectRoute","getLength","selectCoordinates","addStop","pos","at","patchValue","handleLocationProposals","addStopOverlay","routesQueries$$","statusChanges","onFormChange","translatedPos","translationEndCoordinates","stopProposals","stream$","handleTermChanged","stopIndex","groupedLocations","searchService","resultPos","stopPoint","routingText","raiseStop","moveStop","lowerStop","diff","fromValue","removeStop","insert","insertIndex","routingPos","removeAt","resetForm","routesResults","nbStops","deleteRoutingOverlaybyID","valid","coords","getRoutes","formatStep","formatInstruction","maneuver","modifier","bearing_after","exit","activeRoute","steps","stepPosition","lastStep","directiveFr","directiveEn","directive","cssClass","translatedDirection","translateBearing","translatedModifier","translateModifier","frAggregatedDirection","enAggregatedDirection","coma","instruction","bearing","formatDistance","distance","formatDuration","summary","showSegment","showRouteSegmentGeometry","lastPoint","zoomRoute","geom","geometry3857","routingFeature","stopsArrayCoordinates","routeResponse","routingService","focusKey","olobservable.unByKey","copyLinkToClipboard","Clipboard","copy","getUrl","msg","copyDirectionsToClipboard","activeRouteDirective","wayPointList","wayPointsCnt","localCnt","directionsBody","searchProposals_1","currentStopIndex","setTerm","keyIsValid","invalidKeys","keyup","handleMapClick","clearStop","getStopOverlayID","chooseProposal","proposal","geomCoord","coordArray","polygonExtent","proposalExtent","olextent.intersects","focus","indexPos","clickCoordinates","geolocateStop","geolocateCoordinates","stopColor","stopID","routingKey","routingCoordKey","routingUrl","location","pathname","RoutingFormBindingDirective","storedStopsCoordinates","routingParams","stopsCoordinatesFromURL","routingCoordUrl_1","cnt_1","stopCoordinatesFromURL","IgoRoutingModule","MatDividerModule","searchSourceServiceFactory","provideSearchSourceService","GoogleLinks","getGoogleMapsLink","getGoogleStreetViewLink","IChercheSearchResultFormatter","formatResult","IChercheSearchSource","computeRequestParams","extractResults","q","computeTerm","computeOptionsParam","formatter","dataToResult","computeProperties","subtitleHtml","highlight","title2","nom","dataType","titleHtml","removeKeys","propertiesBlacklist","googleLinksProperties","GoogleMaps","GoogleStreetView","tags","typeValue_1","hashtagToAdd_1","IChercheReverseSearchSource","loc","String","computeExtent","defaultIChercheSearchResultFormatterFactory","provideDefaultIChercheSearchResultFormatter","ichercheSearchSourceFactory","ichercheReverseSearchSourceFactory","CoordinatesSearchResultFormatter","CoordinatesReverseSearchSource","coordonnees","systemeCoordonnees","defaultCoordinatesSearchResultFormatterFactory","provideDefaultCoordinatesSearchResultFormatter","CoordinatesReverseSearchSourceFactory","SEARCH_TYPES","ILayerSearchResultFormatter","allowedKey","newKey","dataR","ILayerSearchSource","title$","getValue","computeSearchRequestParams","computeLayerOptions","extractQueryParamsFromSourceUrl","formatOpt","urls","urlOpt","ilayerSearchResultFormatterFactory","provideILayerSearchResultFormatter","ilayerSearchSourceFactory","NominatimSearchSource","i1","place_id","display_name","osm_type","class","boundingbox","computeTermTags","addTagsFromSettings","computeTermSettings","nominatimSearchSourceFactory","StoredQueriesSearchSource","storedqueriesParams","storedQueriesOptions","outputformat","extractWFSData","patternGml3","WFS","geojson","wfsfeatures","splitterRegex","splitPrefix","remainingTerm","splittedTerm","trim","wfsversion","storedquery_id","srsname","resultTitle","utils","multipleFieldsQuery","defaultValue","StoredQueriesReverseSearchSource","longLatParams","longField","latField","doc_type","storedqueriesSearchSourceFactory","storedqueriesReverseSearchSourceFactory","SearchSelectorComponent","initial","searchTypes","enableSearchType","searchType","i0","IgoSearchSelectorModule","MatMenuModule","MatRadioModule","i1$1","SearchSettingsComponent","settingValue","IgoSearchSettingsModule","SearchBarComponent","empty","configurable","_placeholder","stream$$","rxjs","onTermChange","clearFeature","searchTypeChange","doSearch","minLength","input","softClear","research","onResearchCompleted","entities$","newResults","HostBinding","SearchUrlParamDirective","searchKey","ref","IgoSearchBarModule","SearchResultMode","Grouped","SearchResultsComponent","_results$","liftResults","common$1","resultFocus","resultSelect","groupResults","sortByOrder","r1","r2","displayOrder","grouped","sourceResults","SearchResultsItemComponent","getEntityTitleHtml","SearchResultAddButtonComponent","lay","propDecorators","IgoSearchResultsModule","IgoSearchModule","common","ToastComponent","_expanded","expanded","opened","olFeature$$1","SWIPE_ACTION","UP","DOWN","IgoToastModule","IgoPanelModule","IgoFlexibleModule","OgcFilterComponent","cancel","ogcFilterWidgetFactory","widgetService","provideOgcFilterWidget","OgcFilterWidget","WidgetService","IgoOgcFilterModule","WfsWorkspace","Workspace","WfsWorkspaceService","entityStore","ActionStore","actionStore","createTableTemplate","loadingStrategy","ngInjectableDef","defineInjectable","factory","WmsWorkspace","WmsWorkspaceService","WorkspaceSelectorDirective","onLayersChange","layerIsEditable","editableLayers","getOrCreateWorkspace","workspaceStore","workspace","editableLayersIds","workspacesToRemove","workspacesToAdd","insertMany","wfsWorkspaceService","createWorkspace","wmsWorkspaceService","WorkspaceSelectorComponent","IgoWorkspaceSelectorModule","IgoGeoWorkspaceModule","IgoWidgetModule","IgoWktModule","IgoGeoModule","RoutingFormat","SourceRoutingType","Route","OsrmRoutingSource","_name","getRouteParams","extractRoutesData","formatRoute","waypoints","overview","geometries","alternatives","stepsUI","leg","roadNetworkRoute","legs","sourceType","weight_name","osrmRoutingSourcesFactory","provideIChercheSearchSource","provideIChercheReverseSearchSource","provideCoordinatesReverseSearchSource","provideILayerSearchSource","provideNominatimSearchSource","provideStoredQueriesSearchSource","provideStoredQueriesReverseSearchSource","provideOsrmRoutingSource","hideOlFeature","exportToCSV","rows","row","entitiesToRowData","column","EntityTableColumnRenderer","clearOlGeometryMidpoints","featureToSearchResult"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { MetadataOptions } from './metadata.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MetadataService {\r\n  constructor() {}\r\n\r\n  open(metadata: MetadataOptions) {\r\n    if (metadata.extern) {\r\n      window.open(metadata.url, '_blank');\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport {\r\n  MetadataOptions,\r\n  MetadataLayerOptions\r\n} from '../shared/metadata.interface';\r\nimport { MetadataService } from '../shared/metadata.service';\r\n\r\n@Component({\r\n  selector: 'igo-metadata-button',\r\n  templateUrl: './metadata-button.component.html',\r\n  styleUrls: ['./metadata-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MetadataButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private metadataService: MetadataService) {}\r\n\r\n  openMetadata(metadata: MetadataOptions) {\r\n    this.metadataService.open(metadata);\r\n  }\r\n\r\n  get options(): MetadataLayerOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { MetadataButtonComponent } from './metadata-button/metadata-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [MetadataButtonComponent],\r\n  declarations: [MetadataButtonComponent]\r\n})\r\nexport class IgoMetadataModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMetadataModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export abstract class DataService {\r\n    abstract getData(): string;\r\n}\r\n","import { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { AnyDataSourceOptions } from '../shared/datasources/any-datasource.interface';\r\nimport { DataSourceOptions } from '../shared/datasources/datasource.interface';\r\nimport { WMSDataSourceOptions } from '../shared/datasources/wms-datasource.interface';\r\nimport { WMTSDataSourceOptions } from '../shared/datasources/wmts-datasource.interface';\r\n\r\n/**\r\n * Generate a id from it's datasource options.\r\n * @param options Data source options\r\n * @returns A id\r\n */\r\nexport function generateIdFromSourceOptions(options: DataSourceOptions): string {\r\n  const generators = {\r\n    wms: generateWMSIdFromSourceOptions,\r\n    wmts: generateWMTSIdFromSourceOptions,\r\n    xyz: generateXYZIdFromSourceOptions,\r\n    feature: generateFeatureIdFromSourceOptions,\r\n    osm: (_options: AnyDataSourceOptions) => 'OSM'\r\n  };\r\n  const generator = generators[options.type] || generateId;\r\n  return generator(options);\r\n}\r\n\r\n/**\r\n * Generate a id from WMS data source options\r\n * @param options WMS data source options\r\n * @returns A md5 hash of the the url and layers\r\n */\r\nexport function generateWMSIdFromSourceOptions(options: WMSDataSourceOptions) {\r\n  const layers = options.params.layers;\r\n  const chain = 'wms' + options.url + layers;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from WMTS data source options\r\n * @param options WMTS data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateWMTSIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const layer = options.layer;\r\n  const chain = 'wmts' + options.url + layer;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from XYZ data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateXYZIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  const chain = 'xyz' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a id from feature data source options\r\n * @param options XYZ data source options\r\n * @returns A md5 hash of the the url and layer\r\n */\r\nexport function generateFeatureIdFromSourceOptions(options: WMTSDataSourceOptions) {\r\n  if (! options.url) { return generateId(options); }\r\n  const chain = 'feature' + options.url;\r\n  return Md5.hashStr(chain) as string;\r\n}\r\n\r\n/**\r\n * Generate a unique id\r\n * @returns A uuid\r\n */\r\nexport function generateId(options: AnyDataSourceOptions) {\r\n  return uuid();\r\n}\r\n","import olSource from 'ol/source/Source';\r\n\r\nimport {\r\n  DataSourceOptions,\r\n  DataSourceLegendOptions\r\n} from './datasource.interface';\r\n\r\nimport { DataService } from './data.service';\r\nimport { generateIdFromSourceOptions } from '../../utils/id-generator';\r\n\r\nexport abstract class DataSource {\r\n\r\n  public id: string;\r\n  public ol: olSource;\r\n\r\n  constructor(\r\n    public options: DataSourceOptions = {},\r\n    protected dataService?: DataService\r\n  ) {\r\n    this.options = options;\r\n    this.id = this.options.id ||Â this.generateId();\r\n    this.ol = this.createOlSource();\r\n  }\r\n\r\n  protected abstract createOlSource(): olSource;\r\n\r\n  protected generateId(): string {\r\n    return generateIdFromSourceOptions(this.options);\r\n  }\r\n\r\n  getLegend(scale?: number): DataSourceLegendOptions[] {\r\n    return this.options.legend ? [this.options.legend] : [];\r\n  }\r\n\r\n  protected abstract onUnwatch();\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { FeatureDataSourceOptions } from './feature-datasource.interface';\r\n\r\nexport class FeatureDataSource extends DataSource {\r\n  public options: FeatureDataSourceOptions;\r\n  public ol: olSourceVector;\r\n  protected createOlSource(): olSourceVector {\r\n    const sourceOptions = {\r\n      format: this.getSourceFormatFromOptions(this.options)\r\n    };\r\n\r\n    return new olSourceVector(Object.assign(sourceOptions, this.options));\r\n  }\r\n\r\n  protected getSourceFormatFromOptions(options: FeatureDataSourceOptions) {\r\n    if (options.format) {\r\n      return options.format;\r\n    }\r\n    let olFormatCls;\r\n    const formatType = options.formatType;\r\n    if (!formatType) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    } else {\r\n      olFormatCls = olformat[formatType];\r\n      if (olFormatCls === undefined) {\r\n        throw new Error('Invalid vector source format ${formatType}.');\r\n      }\r\n    }\r\n\r\n    const formatOptions = options.formatOptions;\r\n    let format;\r\n    if (formatOptions) {\r\n      format = new olFormatCls(formatOptions);\r\n    } else {\r\n      format = new olFormatCls();\r\n    }\r\n\r\n    return format;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceOSM from 'ol/source/OSM';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { OSMDataSourceOptions } from './osm-datasource.interface';\r\n\r\nexport class OSMDataSource extends DataSource {\r\n  public options: OSMDataSourceOptions;\r\n  public ol: olSourceOSM;\r\n\r\n  protected createOlSource(): olSourceOSM {\r\n    this.options.url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\r\n    return new olSourceOSM(this.options);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceXYZ from 'ol/source/XYZ';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { XYZDataSourceOptions } from './xyz-datasource.interface';\r\n\r\nexport class XYZDataSource extends DataSource {\r\n  public options: XYZDataSourceOptions;\r\n  public ol: olSourceXYZ;\r\n\r\n  protected createOlSource(): olSourceXYZ {\r\n    return new olSourceXYZ(this.options);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n}\r\n","import * as olfilter from 'ol/format/filter';\r\nimport olFormatWKT from 'ol/format/WKT';\r\nimport olFormatWFS from 'ol/format/WFS';\r\nimport olGeometry from 'ol/geom/Geometry';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport {\r\n  OgcFilter,\r\n  IgoOgcFilterObject,\r\n  WFSWriteGetFeatureOptions,\r\n  AnyBaseOgcFilterOptions,\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSourceOptions,\r\n  OgcFiltersOptions\r\n} from './ogc-filter.interface';\r\n\r\nexport class OgcFilterWriter {\r\n  private filterSequence: OgcInterfaceFilterOptions[] = [];\r\n  public operators = {\r\n    PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsLike: { spatial: false, fieldRestrict: ['string'] },\r\n    PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsGreaterThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n    PropertyIsBetween: { spatial: false, fieldRestrict: ['number'] },\r\n    During: { spatial: false, fieldRestrict: [] },\r\n    PropertyIsNull: { spatial: false, fieldRestrict: [] },\r\n    Intersects: { spatial: true, fieldRestrict: [] },\r\n    Within: { spatial: true, fieldRestrict: [] },\r\n    Contains: { spatial: true, fieldRestrict: [] }\r\n  };\r\n\r\n  defineOgcFiltersDefaultOptions(\r\n    ogcFiltersOptions: OgcFiltersOptions,\r\n    fieldNameGeometry: string,\r\n    srcType?: string): OgcFiltersOptions  {\r\n    let ogcFiltersDefaultValue = true; // default values for wfs.\r\n    if (srcType && srcType === 'wms') {\r\n      ogcFiltersDefaultValue = false;\r\n    }\r\n\r\n    ogcFiltersOptions = ogcFiltersOptions || {};\r\n    ogcFiltersOptions.enabled = ogcFiltersOptions.enabled === undefined ? ogcFiltersDefaultValue : ogcFiltersOptions.enabled;\r\n    ogcFiltersOptions.editable = ogcFiltersOptions.editable === undefined ? ogcFiltersDefaultValue : ogcFiltersOptions.editable;\r\n    ogcFiltersOptions.geometryName = fieldNameGeometry;\r\n\r\n    ogcFiltersOptions.advancedOgcFilters = true;\r\n    if (ogcFiltersOptions.enabled && ogcFiltersOptions.pushButtons) {\r\n      ogcFiltersOptions.advancedOgcFilters = false;\r\n    }\r\n    return ogcFiltersOptions;\r\n  }\r\n\r\n  public buildFilter(\r\n    filters?: IgoOgcFilterObject,\r\n    extent?: [number, number, number, number],\r\n    proj?,\r\n    fieldNameGeometry?: string\r\n  ): string {\r\n    let ourBboxFilter;\r\n    let enableBbox: boolean;\r\n    if (/intersects|contains|within/gi.test(JSON.stringify(filters))) {\r\n      enableBbox = false;\r\n    } else {\r\n      enableBbox = true;\r\n    }\r\n    if (filters) {\r\n      fieldNameGeometry =\r\n        (filters as any).geometryName !== undefined\r\n          ? (filters as any).geometryName\r\n          : fieldNameGeometry;\r\n    }\r\n    if (extent && filters) {\r\n      ourBboxFilter = olfilter.bbox(fieldNameGeometry, extent, proj.getCode());\r\n    }\r\n    let filterAssembly: OgcFilter;\r\n    if (filters) {\r\n      filters = this.checkIgoFiltersProperties(filters, fieldNameGeometry);\r\n      if (extent && enableBbox) {\r\n        filterAssembly = olfilter.and(\r\n          ourBboxFilter,\r\n          this.bundleFilter(filters)\r\n        );\r\n      } else {\r\n        filterAssembly = this.bundleFilter(filters);\r\n      }\r\n    } else {\r\n      return 'bbox=' + extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    const wfsOptions: WFSWriteGetFeatureOptions = {\r\n      srsName: '',\r\n      featureNS: '',\r\n      featurePrefix: '',\r\n      featureTypes: ['featureTypes'],\r\n      filter: filterAssembly,\r\n      outputFormat: '',\r\n      geometryName: fieldNameGeometry\r\n    };\r\n\r\n    const query = new olFormatWFS().writeGetFeature(wfsOptions);\r\n    const str = new XMLSerializer().serializeToString(query);\r\n    const regexp1 = /typenames *=|typename *=\\\"featureTypes\\\" *>/gi;\r\n    const regexp2 = /<\\/Query><\\/GetFeature>/gi;\r\n\r\n    return 'filter=' + str.split(regexp1)[1].split(regexp2)[0];\r\n  }\r\n\r\n  private bundleFilter(filterObject: any) {\r\n    if (filterObject instanceof Array) {\r\n      const logicalArray = [];\r\n      filterObject.forEach(element => {\r\n        logicalArray.push(this.bundleFilter(element));\r\n      });\r\n      return logicalArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return this.createFilter({\r\n          operator: filterObject.logical,\r\n          logicalArray: this.bundleFilter(filterObject.filters)\r\n        });\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.createFilter(filterObject as AnyBaseOgcFilterOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createFilter(filterOptions): OgcFilter {\r\n    const operator = filterOptions.operator;\r\n    const logicalArray = filterOptions.logicalArray;\r\n\r\n    const wfsPropertyName = filterOptions.propertyName;\r\n    const wfsPattern = filterOptions.pattern;\r\n    const wfsMatchCase = filterOptions.matchCase\r\n      ? filterOptions.matchCase\r\n      : true;\r\n    const wfsWildCard = filterOptions.wildCard ? filterOptions.wildCard : '*';\r\n    const wfsSingleChar = filterOptions.singleChar\r\n      ? filterOptions.singleChar\r\n      : '.';\r\n    const wfsEscapeChar = filterOptions.escapeChar\r\n      ? filterOptions.escapeChar\r\n      : '!';\r\n\r\n    const wfsLowerBoundary = filterOptions.lowerBoundary;\r\n    const wfsUpperBoundary = filterOptions.upperBoundary;\r\n\r\n    const wfsGeometryName = filterOptions.geometryName;\r\n    const wfsExtent = filterOptions.extent;\r\n    const wfsWktGeometry = filterOptions.wkt_geometry;\r\n    const wfsSrsName = filterOptions.srsName\r\n      ? filterOptions.srsName\r\n      : 'EPSG:3857';\r\n\r\n    const wfsBegin = filterOptions.begin;\r\n    const wfsEnd = filterOptions.end;\r\n\r\n    const wfsExpression = filterOptions.expression;\r\n\r\n    let geometry: olGeometry;\r\n    if (wfsWktGeometry) {\r\n      const wkt = new olFormatWKT();\r\n      geometry = wkt.readGeometry(wfsWktGeometry, {\r\n        dataProjection: wfsSrsName,\r\n        featureProjection: 'EPSG:3857'\r\n      });\r\n    }\r\n\r\n    switch (operator) {\r\n      case 'BBOX':\r\n        return olfilter.bbox(wfsGeometryName, wfsExtent, wfsSrsName);\r\n      case 'PropertyIsBetween':\r\n        return olfilter.between(\r\n          wfsPropertyName,\r\n          wfsLowerBoundary,\r\n          wfsUpperBoundary\r\n        );\r\n      case 'Contains':\r\n        return olfilter.contains(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'During':\r\n        return olfilter.during(wfsPropertyName, wfsBegin, wfsEnd);\r\n      case 'PropertyIsEqualTo':\r\n        return olfilter.equalTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsGreaterThan':\r\n        return olfilter.greaterThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsGreaterThanOrEqualTo':\r\n        return olfilter.greaterThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'Intersects':\r\n        return olfilter.intersects(wfsGeometryName, geometry, wfsSrsName);\r\n      case 'PropertyIsNull':\r\n        return olfilter.isNull(wfsPropertyName);\r\n      case 'PropertyIsLessThan':\r\n        return olfilter.lessThan(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLessThanOrEqualTo':\r\n        return olfilter.lessThanOrEqualTo(wfsPropertyName, wfsExpression);\r\n      case 'PropertyIsLike':\r\n        return olfilter.like(\r\n          wfsPropertyName,\r\n          wfsPattern.replace(/[()_]/gi, wfsSingleChar),\r\n          wfsWildCard,\r\n          wfsSingleChar,\r\n          wfsEscapeChar,\r\n          wfsMatchCase\r\n        );\r\n      case 'PropertyIsNotEqualTo':\r\n        return olfilter.notEqualTo(\r\n          wfsPropertyName,\r\n          wfsExpression,\r\n          wfsMatchCase\r\n        );\r\n      case 'Within':\r\n        return olfilter.within(wfsGeometryName, geometry, wfsSrsName);\r\n      // LOGICAL\r\n      case 'And':\r\n        return olfilter.and.apply(null, logicalArray);\r\n      case 'Or':\r\n        return olfilter.or.apply(null, logicalArray);\r\n      case 'Not':\r\n        return olfilter.not.apply(null, logicalArray);\r\n\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  public defineInterfaceFilterSequence(\r\n    filterObject: any,\r\n    geometryName,\r\n    logical = '',\r\n    level = -1\r\n  ): OgcInterfaceFilterOptions[] {\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            element,\r\n            geometryName,\r\n            logical,\r\n            level\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        level = level + 1;\r\n        this.filterSequence.concat(\r\n          this.defineInterfaceFilterSequence(\r\n            filterObject.filters,\r\n            geometryName,\r\n            filterObject.logical,\r\n            level\r\n          )\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        this.filterSequence.push(\r\n          this.addInterfaceFilter(filterObject, geometryName, level, logical)\r\n        );\r\n      }\r\n    }\r\n    return this.filterSequence;\r\n  }\r\n\r\n  public addInterfaceFilter(\r\n    igoOgcFilterObject?,\r\n    geometryName?,\r\n    level = 0,\r\n    parentLogical = 'Or'\r\n  ): OgcInterfaceFilterOptions {\r\n    if (!igoOgcFilterObject) {\r\n      igoOgcFilterObject = { operator: 'PropertyIsEqualTo' };\r\n    }\r\n    const f = {\r\n      propertyName: '',\r\n      operator: '',\r\n      active: '',\r\n      filterid: uuid(),\r\n      begin: '',\r\n      end: '',\r\n      lowerBoundary: '',\r\n      upperBoundary: '',\r\n      expression: '',\r\n      pattern: '',\r\n      wildCard: '*',\r\n      singleChar: '.',\r\n      escapeChar: '!',\r\n      matchCase: true,\r\n      igoSpatialSelector: '',\r\n      geometryName: '',\r\n      geometry: '',\r\n      wkt_geometry: '',\r\n      extent: '',\r\n      srsName: '',\r\n      parentLogical: '',\r\n      level: 0\r\n    };\r\n\r\n    return Object.assign(\r\n      f,\r\n      {\r\n        parentLogical,\r\n        level,\r\n        geometryName\r\n      },\r\n      igoOgcFilterObject\r\n    );\r\n  }\r\n\r\n  public checkIgoFiltersProperties(\r\n    filterObject: any,\r\n    fieldNameGeometry,\r\n    active = false\r\n  ) {\r\n    const filterArray = [];\r\n    if (filterObject instanceof Array) {\r\n      filterObject.forEach(element => {\r\n        filterArray.push(\r\n          this.checkIgoFiltersProperties(element, fieldNameGeometry, active)\r\n        );\r\n      });\r\n      return filterArray;\r\n    } else {\r\n      if (filterObject.hasOwnProperty('logical')) {\r\n        return Object.assign(\r\n          {},\r\n          {\r\n            logical: filterObject.logical,\r\n            filters: this.checkIgoFiltersProperties(\r\n              filterObject.filters,\r\n              fieldNameGeometry,\r\n              active\r\n            )\r\n          }\r\n        );\r\n      } else if (filterObject.hasOwnProperty('operator')) {\r\n        return this.addFilterProperties(\r\n          filterObject as OgcInterfaceFilterOptions,\r\n          fieldNameGeometry,\r\n          active\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private addFilterProperties(\r\n    igoOgcFilterObject: OgcInterfaceFilterOptions,\r\n    fieldNameGeometry,\r\n    active = false\r\n  ) {\r\n    const filterid = igoOgcFilterObject.hasOwnProperty('filterid')\r\n      ? igoOgcFilterObject.filterid\r\n      : uuid();\r\n    const status = igoOgcFilterObject.hasOwnProperty('active')\r\n      ? igoOgcFilterObject.active\r\n      : active;\r\n\r\n    return Object.assign(\r\n      {},\r\n      {\r\n        filterid,\r\n        active: status,\r\n        igoSpatialSelector: 'fixedExtent'\r\n      },\r\n      igoOgcFilterObject,\r\n      { geometryName: fieldNameGeometry }\r\n    );\r\n  }\r\n\r\n  public rebuiltIgoOgcFilterObjectFromSequence(\r\n    sequence: OgcInterfaceFilterOptions[]\r\n  ): IgoOgcFilterObject {\r\n    if (sequence instanceof Array) {\r\n      if (sequence.length >= 1) {\r\n        let lastParentLogical = sequence[0].parentLogical;\r\n        let nextElement: any;\r\n        let logicalArray = [];\r\n        let lastProcessedFilter;\r\n        sequence.forEach(uiFilter => {\r\n          const element = Object.assign({}, uiFilter);\r\n          const index = sequence.indexOf(uiFilter);\r\n          if (index >= 0 && index < sequence.length - 1) {\r\n            nextElement = sequence[index + 1];\r\n          } else {\r\n            nextElement = element;\r\n          }\r\n          delete element.active;\r\n          delete element.filterid;\r\n          delete element.parentLogical;\r\n          logicalArray.push(element);\r\n\r\n          if (sequence.length === 1) {\r\n            lastProcessedFilter = element;\r\n          } else if (lastParentLogical !== nextElement.parentLogical) {\r\n            if (logicalArray.length === 1) {\r\n              console.log(\r\n                'You must set at ' +\r\n                  'least two operator in a logical (' +\r\n                  lastParentLogical +\r\n                  ')'\r\n              );\r\n            } else {\r\n              lastProcessedFilter = Object.assign(\r\n                {},\r\n                { logical: lastParentLogical, filters: logicalArray }\r\n              );\r\n              logicalArray = [lastProcessedFilter];\r\n              lastParentLogical = nextElement.parentLogical;\r\n            }\r\n          }\r\n        });\r\n        return lastProcessedFilter;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public handleOgcFiltersAppliedValue(options: OgcFilterableDataSourceOptions, fieldNameGeometry: string) {\r\n    const ogcFilters = options.ogcFilters;\r\n    if (!ogcFilters) {\r\n      return;\r\n    }\r\n    let filterQueryStringPushButton = '';\r\n    let filterQueryStringAdvancedFilters = '';\r\n    if (ogcFilters.enabled && ogcFilters.pushButtons) {\r\n      const pushButtonBundle = ogcFilters.pushButtons;\r\n      const conditions = [];\r\n      pushButtonBundle.map(buttonBundle => {\r\n        const bundleCondition = [];\r\n        buttonBundle.ogcPushButtons\r\n          .filter(ogcpb => ogcpb.enabled === true)\r\n          .forEach(enabledPb => bundleCondition.push(enabledPb.filters));\r\n        if (bundleCondition.length === 1) {\r\n          conditions.push(bundleCondition[0]);\r\n        } else if (bundleCondition.length > 1) {\r\n          conditions.push({ logical: buttonBundle.logical, filters: bundleCondition });\r\n        }\r\n      });\r\n      if (conditions.length >= 1) {\r\n        filterQueryStringPushButton = this.buildFilter(\r\n            conditions.length === 1 ? conditions[0] : { logical: 'And', filters: conditions }\r\n          );\r\n      }\r\n    }\r\n\r\n    if (ogcFilters.enabled && ogcFilters.filters) {\r\n      ogcFilters.geometryName = ogcFilters.geometryName || fieldNameGeometry;\r\n      const igoFilters = ogcFilters.filters;\r\n      filterQueryStringAdvancedFilters = this.buildFilter(igoFilters);\r\n    }\r\n\r\n    let filterQueryString = ogcFilters.advancedOgcFilters ? filterQueryStringAdvancedFilters : filterQueryStringPushButton;\r\n    if (options.type === 'wms') {\r\n      filterQueryString = this.formatProcessedOgcFilter(filterQueryString, (options as any).params.layers);\r\n    }\r\n    if (options.type === 'wfs') {\r\n      filterQueryString = this.formatProcessedOgcFilter(filterQueryString, (options as any).params.featureTypes);\r\n    }\r\n\r\n    return filterQueryString;\r\n\r\n  }\r\n\r\n  public formatProcessedOgcFilter(\r\n    processedFilter: string,\r\n    layersOrTypenames: string): string {\r\n    let appliedFilter = '';\r\n    if (processedFilter.length === 0 && layersOrTypenames.indexOf(',') === -1) {\r\n      appliedFilter = processedFilter;\r\n    } else {\r\n      layersOrTypenames.split(',').forEach(layerOrTypenames => {\r\n        appliedFilter = `${appliedFilter}(${processedFilter.replace('filter=', '')})`;\r\n      });\r\n    }\r\n    const filterValue = appliedFilter.length > 0 ? appliedFilter.replace('filter=', '') : undefined;\r\n    return filterValue;\r\n  }\r\n}\r\n","import { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\n\r\nexport const defaultEpsg = 'EPSG:3857';\r\nexport const defaultMaxFeatures = 5000;\r\nexport const defaultWfsVersion = '2.0.0';\r\nexport const defaultFieldNameGeometry = 'geometry';\r\nexport const gmlRegex = new RegExp(/.*?gml.*?/gi);\r\nexport const jsonRegex = new RegExp(/.*?json.*?/gi);\r\n\r\n/**\r\n * This method build/standardize WFS call query params based on the layer property.\r\n * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface\r\n * @param count  Number: Used to control the number of feature. Used to bypass whe wfs datasource options interface (maxFeatures)\r\n * @param epsg  String: Used to control the EPSG code (es: 'EPSG3857'). Used to bypass whe wfs datasource options interface (srsName)\r\n * @param properties  String: Used to control the queried fields  (WFS service).\r\n * @returns An array array of {name: '', value: ''} of predefined query params.\r\n */\r\nexport function formatWFSQueryString(\r\n    wfsDataSourceOptions: WFSDataSourceOptions,\r\n    count?: number,\r\n    epsg?: string,\r\n    properties?: string): { name: string, value: string }[] {\r\n\r\n    const versionWfs200 = '2.0.0'; // not the same usage as defaultWfsVersion.\r\n    const url = wfsDataSourceOptions.urlWfs;\r\n    const paramsWFS = wfsDataSourceOptions.paramsWFS;\r\n    const effectiveCount = count || defaultMaxFeatures;\r\n    const epsgCode = epsg || defaultEpsg;\r\n    const outputFormat = paramsWFS.outputFormat ? `outputFormat=${paramsWFS.outputFormat}` : '';\r\n    const version = paramsWFS.version ? `version=${paramsWFS.version}` : `version=${defaultWfsVersion}`;\r\n    const paramTypename = paramsWFS.version === versionWfs200 ? 'typenames' : 'typename';\r\n    const featureTypes = `${paramTypename}=${paramsWFS.featureTypes}`;\r\n    const paramMaxFeatures = paramsWFS.version === versionWfs200 ? 'count' : 'maxFeatures';\r\n    const cnt = count ? `${paramMaxFeatures}=${effectiveCount}` :\r\n        paramsWFS.maxFeatures ? `${paramMaxFeatures}=${paramsWFS.maxFeatures}` : `${paramMaxFeatures}=${effectiveCount}`;\r\n    const srs = epsg ? `srsname=${epsgCode}` : paramsWFS.srsName ? 'srsname=' + paramsWFS.srsName : `srsname=${epsgCode}`;\r\n\r\n    let propertyName = '';\r\n    let valueReference = '';\r\n    if (properties) {\r\n        propertyName = `propertyName=${properties}`;\r\n        valueReference = `valueReference=${properties}`;\r\n    }\r\n    const sourceFields = wfsDataSourceOptions.sourceFields;\r\n    if (!propertyName && sourceFields && sourceFields.length > 0) {\r\n        const fieldsNames = [];\r\n        wfsDataSourceOptions.sourceFields.forEach(sourcefield => {\r\n            fieldsNames.push(sourcefield.name);\r\n        });\r\n        propertyName = `propertyName=${fieldsNames.join(',')},${paramsWFS.fieldNameGeometry}`;\r\n    }\r\n\r\n    const getCapabilities = `${url}?service=wfs&request=GetCapabilities&${version}`;\r\n    let getFeature = `${url}?service=wfs&request=GetFeature&${version}&${featureTypes}&`;\r\n    getFeature += `${outputFormat}&${srs}&${cnt}&${propertyName}`;\r\n\r\n    let getpropertyvalue = `${url}?service=wfs&request=GetPropertyValue&version=${versionWfs200}&${featureTypes}&`;\r\n    getpropertyvalue += `&${cnt}&${valueReference}`;\r\n\r\n    return [\r\n        { name: 'outputformat', value: outputFormat },\r\n        { name: 'version', value: version },\r\n        { name: 'typename', value: featureTypes },\r\n        { name: 'count', value: cnt },\r\n        { name: 'srsname', value: srs },\r\n        { name: 'propertyname', value: propertyName },\r\n        { name: 'valuereference', value: valueReference },\r\n        { name: 'getcapabilities', value: getCapabilities.replace(/&&/g, '&') },\r\n        { name: 'getfeature', value: getFeature.replace(/&&/g, '&') },\r\n        { name: 'getpropertyvalue', value: getpropertyvalue.replace(/&&/g, '&') }\r\n    ];\r\n}\r\n\r\n/**\r\n * Validate/Modify layer's wfs options based on :\r\n * 1- an Openlayers's issue with GML provided from WFS. Refer to\r\n * https://github.com/openlayers/openlayers/pull/6400\r\n * 2- Set default values for optionals parameters.\r\n * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface\r\n * @returns An array array of {name: '', value: ''} of predefined query params.\r\n */\r\nexport function checkWfsParams(wfsDataSourceOptions, srcType?: string) {\r\n\r\n  if (srcType && srcType === 'wfs') {\r\n    // reassignation of params to paramsWFS and url to urlWFS to have a common interface with wms-wfs datasources\r\n    wfsDataSourceOptions.paramsWFS = wfsDataSourceOptions.params;\r\n  }\r\n\r\n  const paramsWFS = wfsDataSourceOptions.paramsWFS;\r\n  wfsDataSourceOptions.urlWfs = wfsDataSourceOptions.urlWfs || wfsDataSourceOptions.url;\r\n\r\n  paramsWFS.version = paramsWFS.version || defaultWfsVersion;\r\n  paramsWFS.fieldNameGeometry = paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;\r\n  paramsWFS.maxFeatures = paramsWFS.maxFeatures || defaultMaxFeatures;\r\n\r\n  let outputFormat;\r\n  if (paramsWFS.outputFormat) {\r\n    outputFormat = paramsWFS.outputFormat;\r\n  }\r\n\r\n  if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n    paramsWFS.version = '1.1.0';\r\n  }\r\n  return Object.assign({}, wfsDataSourceOptions );\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as OlLoadingStrategy from 'ol/loadingstrategy';\r\nimport * as OlFormat from 'ol/format';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport {\r\n  formatWFSQueryString,\r\n  defaultFieldNameGeometry,\r\n  gmlRegex,\r\n  jsonRegex,\r\n  checkWfsParams\r\n} from './wms-wfs.utils';\r\n\r\nexport class WFSDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n\r\n  constructor(\r\n    public options: WFSDataSourceOptions,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(checkWfsParams(options, 'wfs'));\r\n\r\n    const ogcFilters = (this.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    const fieldNameGeometry = this.options.paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    (this.options as OgcFilterableDataSourceOptions).ogcFilters =\r\n      ogcFilterWriter.defineOgcFiltersDefaultOptions(ogcFilters, fieldNameGeometry);\r\n    if ((this.options as OgcFilterableDataSourceOptions).ogcFilters.enabled) {\r\n      this.wfsService.getSourceFieldsFromWFS(this.options);\r\n    }\r\n  }\r\n\r\n  protected createOlSource(): olSourceVector {\r\n\r\n    return new olSourceVector({\r\n      format: this.getFormatFromOptions(),\r\n      overlaps: false,\r\n      url: (extent, resolution, proj) => {\r\n        return this.buildUrl(\r\n          extent,\r\n          proj,\r\n          (this.options as OgcFilterableDataSourceOptions).ogcFilters);\r\n      },\r\n      strategy: OlLoadingStrategy.bbox\r\n    });\r\n  }\r\n\r\n  private buildUrl(extent, proj, ogcFilters): string {\r\n    const paramsWFS = this.options.paramsWFS;\r\n    const queryStringValues = formatWFSQueryString(this.options, undefined, proj.getCode());\r\n    let igoFilters;\r\n    if (ogcFilters && ogcFilters.enabled) {\r\n      igoFilters = ogcFilters.filters;\r\n    }\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    const filterOrBox = ogcFilterWriter.buildFilter(igoFilters, extent, proj, ogcFilters.geometryName);\r\n    let filterOrPush = ogcFilterWriter.handleOgcFiltersAppliedValue(this.options, ogcFilters.geometryName);\r\n\r\n    let prefix = 'filter';\r\n    if (!filterOrPush) {\r\n      prefix = 'bbox';\r\n      filterOrPush = extent.join(',') + ',' + proj.getCode();\r\n    }\r\n\r\n    paramsWFS.xmlFilter = ogcFilters.advancedOgcFilters ? filterOrBox : `${prefix}=${filterOrPush}`;\r\n    let baseUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    const patternFilter = /(filter|bbox)=.*/gi;\r\n    baseUrl = patternFilter.test(paramsWFS.xmlFilter) ? `${baseUrl}&${paramsWFS.xmlFilter}` : baseUrl;\r\n    this.options.download = Object.assign({}, this.options.download, { dynamicUrl: baseUrl });\r\n    return baseUrl.replace(/&&/g, '&');\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    let outputFormat;\r\n    if (this.options.paramsWFS.outputFormat) {\r\n      outputFormat = this.options.paramsWFS.outputFormat.toLowerCase();\r\n    }\r\n\r\n    if (jsonRegex.test(outputFormat)) {\r\n      olFormatCls = OlFormat.GeoJSON;\r\n    }\r\n    if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n      olFormatCls = OlFormat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport * as olformat from 'ol/format';\r\n\r\nimport { WFSDataSourceOptions } from './wfs-datasource.interface';\r\nimport { DataService } from './data.service';\r\nimport { formatWFSQueryString, gmlRegex, defaultEpsg, defaultMaxFeatures} from './wms-wfs.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WFSService extends DataService {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getData() {\r\n    console.log('This is defining a data service.');\r\n    return 'This is defining a data service.';\r\n  }\r\n\r\n  public getSourceFieldsFromWFS(datasource) {\r\n    if (!datasource.sourceFields || datasource.sourceFields.length === 0 ) {\r\n      datasource.sourceFields = [];\r\n      this.defineFieldAndValuefromWFS(datasource).subscribe(getfeatureSourceField => {\r\n        datasource.sourceFields = getfeatureSourceField;\r\n      });\r\n\r\n    } else {\r\n      this.defineFieldAndValuefromWFS(datasource).subscribe(getfeatureSourceField => {\r\n        datasource.sourceFields.forEach(sourcefield => {\r\n          if (sourcefield.alias === undefined) {\r\n            sourcefield.alias = sourcefield.name; // to allow only a list of sourcefield with names\r\n          }\r\n          if (sourcefield.values === undefined || sourcefield.values.length === 0) {\r\n            sourcefield.values = getfeatureSourceField.find(sf => sf.name === sourcefield.name).values;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private wfsGetFeature(\r\n    wfsDataSourceOptions: WFSDataSourceOptions,\r\n    nb: number = defaultMaxFeatures,\r\n    epsgCode: string = defaultEpsg,\r\n    propertyName?: string\r\n  ): Observable<any> {\r\n    const queryStringValues = formatWFSQueryString(wfsDataSourceOptions, nb, epsgCode, propertyName);\r\n    const baseUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    const outputFormat = wfsDataSourceOptions.paramsWFS.outputFormat;\r\n    if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n      return this.http.get(baseUrl, { responseType: 'text' });\r\n    } else {\r\n      return this.http.get(baseUrl);\r\n    }\r\n  }\r\n\r\n  defineFieldAndValuefromWFS(\r\n    wfsDataSourceOptions: WFSDataSourceOptions\r\n  ): Observable<any> {\r\n    return new Observable(d => {\r\n      const sourceFields = [];\r\n      let fieldList;\r\n      let fieldListWoGeom;\r\n      let fieldListWoGeomStr;\r\n      let olFormats;\r\n      const outputFormat = wfsDataSourceOptions.paramsWFS.outputFormat;\r\n\r\n      if (gmlRegex.test(outputFormat) || !outputFormat) {\r\n        olFormats = olformat.WFS;\r\n     } else {\r\n        olFormats = olformat.GeoJSON;\r\n      }\r\n\r\n      this.wfsGetFeature(wfsDataSourceOptions, 1).subscribe(oneFeature => {\r\n        const features = new olFormats().readFeatures(oneFeature);\r\n        fieldList = features[0].getKeys();\r\n        fieldListWoGeom = fieldList.filter(\r\n          field =>\r\n            field !== features[0].getGeometryName() &&\r\n            !field.match(/boundedby/gi)\r\n        );\r\n        fieldListWoGeomStr = fieldListWoGeom.join(',');\r\n        this.wfsGetFeature(\r\n          wfsDataSourceOptions,\r\n          wfsDataSourceOptions.paramsWFS.maxFeatures || defaultMaxFeatures,\r\n          undefined,\r\n          fieldListWoGeomStr\r\n        ).subscribe(manyFeatures => {\r\n          const mfeatures = new olFormats().readFeatures(manyFeatures);\r\n          this.built_properties_value(mfeatures).forEach(element => {\r\n            sourceFields.push(element);\r\n          });\r\n          d.next(sourceFields);\r\n          d.complete();\r\n        });\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  private built_properties_value(features: olFeature[]): string[] {\r\n    const kv = Object.assign({}, features[0].getProperties());\r\n    delete kv[features[0].getGeometryName()];\r\n    delete kv.boundedBy;\r\n    const sourceFields = [];\r\n    for (const property in kv) {\r\n      if (kv.hasOwnProperty(property)) {\r\n        const fieldType =\r\n          typeof features[0].get(property) === 'object'\r\n            ? undefined\r\n            : typeof features[0].get(property);\r\n        sourceFields.push({\r\n          name: property,\r\n          alias: property,\r\n          type: fieldType,\r\n          values: [kv[property]]\r\n        });\r\n      }\r\n    }\r\n    features.every((element) => {\r\n      const featureProperties = element.getProperties();\r\n      for (const key in featureProperties) {\r\n        if (featureProperties.hasOwnProperty(key) && key in kv) {\r\n          sourceFields.filter(f => f.name === key).forEach(v => {\r\n            if (v.values.indexOf(featureProperties[key]) === -1) {\r\n              v.values.push(featureProperties[key]);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    return sourceFields;\r\n  }\r\n}\r\n","export enum QueryFormat {\r\n  GML2 = 'gml2',\r\n  GML3 = 'gml3',\r\n  JSON = 'json',\r\n  GEOJSON = 'geojson',\r\n  ESRIJSON = 'esrijson',\r\n  TEXT = 'text',\r\n  HTML = 'html',\r\n  HTMLGML2 = 'htmlgml2'\r\n}\r\n\r\nexport enum QueryHtmlTarget {\r\n  IFRAME = 'iframe',\r\n  BLANK = '_blank'\r\n}\r\n","import olSourceImageWMS from 'ol/source/ImageWMS';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { WMSDataSourceOptions } from './wms-datasource.interface';\r\nimport { WFSService } from './wfs.service';\r\n\r\nimport { OgcFilterWriter } from '../../../filter/shared/ogc-filter';\r\nimport { OgcFilterableDataSourceOptions } from '../../../filter/shared/ogc-filter.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\nimport { formatWFSQueryString, defaultWfsVersion, checkWfsParams, defaultFieldNameGeometry } from './wms-wfs.utils';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nexport class WMSDataSource extends DataSource {\r\n  public ol: olSourceImageWMS;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  constructor(\r\n    public options: WMSDataSourceOptions,\r\n    protected wfsService: WFSService\r\n  ) {\r\n    super(options);\r\n    // Important: To use wms versions smaller than 1.3.0, SRS\r\n    // needs to be supplied in the source \"params\"\r\n\r\n    // We need to do this to override the default version\r\n    // of openlayers which is uppercase\r\n    const sourceParams: any = options.params;\r\n    if (sourceParams && sourceParams.version) {\r\n      sourceParams.VERSION = sourceParams.version;\r\n    }\r\n\r\n    if (sourceParams && sourceParams.VERSION) {\r\n      if (sourceParams.version !== '1.3.0') {\r\n        if (!sourceParams.SRS && !sourceParams.srs) {\r\n          throw new Error(`You must set a SRS (or srs) param for your WMS\r\n           (layer =  ` + sourceParams.layers + `) because your want to use a WMS version under 1.3.0\r\n        Ex: \"srs\": \"EPSG:3857\" `);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (sourceParams && sourceParams.INFO_FORMAT) {\r\n      sourceParams.info_format = sourceParams.INFO_FORMAT;\r\n    }\r\n\r\n    if (options.refreshIntervalSec && options.refreshIntervalSec > 0) {\r\n      setInterval(() => {\r\n        this.refresh();\r\n      }, options.refreshIntervalSec * 1000); // Convert seconds to MS\r\n    }\r\n\r\n    let fieldNameGeometry = defaultFieldNameGeometry;\r\n\r\n    // ####   START if paramsWFS\r\n    if (options.paramsWFS) {\r\n      const wfsCheckup = checkWfsParams(options, 'wms');\r\n      ObjectUtils.mergeDeep(options.paramsWFS, wfsCheckup.paramsWFS);\r\n\r\n      fieldNameGeometry = options.paramsWFS.fieldNameGeometry || fieldNameGeometry;\r\n\r\n      options.download = Object.assign({}, options.download, {\r\n        dynamicUrl: this.buildDynamicDownloadUrlFromParamsWFS(options)\r\n      });\r\n    } //  ####   END  if paramsWFS\r\n    if (!options.sourceFields || options.sourceFields.length === 0) {\r\n      options.sourceFields = [];\r\n    } else {\r\n      options.sourceFields.forEach(sourceField => {\r\n        sourceField.alias = sourceField.alias ? sourceField.alias : sourceField.name;\r\n        // to allow only a list of sourcefield with names\r\n      });\r\n    }\r\n    const initOgcFilters = (options as OgcFilterableDataSourceOptions).ogcFilters;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (!initOgcFilters) {\r\n      (options as OgcFilterableDataSourceOptions).ogcFilters =\r\n        ogcFilterWriter.defineOgcFiltersDefaultOptions(initOgcFilters, fieldNameGeometry, 'wms');\r\n    } else {\r\n      initOgcFilters.advancedOgcFilters = initOgcFilters.pushButtons ? false : true;\r\n    }\r\n    if (sourceParams.layers.split(',').length > 1 && options && initOgcFilters.enabled) {\r\n      console.log('*******************************');\r\n      console.log('BE CAREFULL, YOUR WMS LAYERS (' + sourceParams.layers\r\n      + ') MUST SHARE THE SAME FIELDS TO ALLOW ogcFilters TO WORK !! ');\r\n      console.log('*******************************');\r\n  }\r\n\r\n    if (options.paramsWFS && initOgcFilters.enabled) {\r\n      this.wfsService.getSourceFieldsFromWFS(options);\r\n    }\r\n\r\n    const filterQueryString = ogcFilterWriter.handleOgcFiltersAppliedValue(options, fieldNameGeometry);\r\n    this.ol.updateParams({ filter: filterQueryString });\r\n  }\r\n\r\n  refresh() {\r\n    this.ol.updateParams({ igoRefresh: Math.random() });\r\n  }\r\n\r\n  private buildDynamicDownloadUrlFromParamsWFS(asWFSDataSourceOptions) {\r\n    const queryStringValues = formatWFSQueryString(asWFSDataSourceOptions);\r\n    const downloadUrl = queryStringValues.find(f => f.name === 'getfeature').value;\r\n    return downloadUrl;\r\n  }\r\n\r\n  protected createOlSource(): olSourceImageWMS {\r\n    return new olSourceImageWMS(this.options);\r\n  }\r\n\r\n  getLegend(scale?: number): DataSourceLegendOptions[] {\r\n    let legend = super.getLegend();\r\n    if (legend.length > 0) {\r\n      return legend;\r\n    }\r\n\r\n    const sourceParams = this.params;\r\n\r\n    let layers = [];\r\n    if (sourceParams.layers !== undefined) {\r\n      layers = sourceParams.layers.split(',');\r\n    }\r\n\r\n    const baseUrl = this.options.url.replace(/\\?$/, '');\r\n    const params = [\r\n      'REQUEST=GetLegendGraphic',\r\n      'SERVICE=wms',\r\n      'FORMAT=image/png',\r\n      'SLD_VERSION=1.1.0',\r\n      `VERSION=${sourceParams.version || '1.3.0'}`\r\n    ];\r\n    if (scale !== undefined) {\r\n      params.push(`SCALE=${scale}`);\r\n    }\r\n\r\n    legend = layers.map((layer: string) => {\r\n      return {\r\n        url: `${baseUrl}?${params.join('&')}&LAYER=${layer}`,\r\n        title: layers.length > 1 ? layer : undefined\r\n      };\r\n    });\r\n\r\n    return legend;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olTileGridWMTS from 'ol/tilegrid/WMTS';\r\nimport * as olproj from 'ol/proj';\r\nimport {\r\n  getTopLeft as extentGetTopLeft,\r\n  getWidth as extentGetWidth\r\n} from 'ol/extent.js';\r\n\r\nexport function createDefaultTileGrid(epsg?: string): olTileGridWMTS {\r\n  const projection = epsg ? olproj.get(epsg) : olproj.get('EPSG:3857');\r\n  const projectionExtent = projection.getExtent();\r\n  const size = extentGetWidth(projectionExtent) / 256;\r\n  const resolutions = new Array(20);\r\n  const matrixIds = new Array(20);\r\n  for (let z = 0; z < 20; ++z) {\r\n    resolutions[z] = size / Math.pow(2, z);\r\n    matrixIds[z] = z;\r\n  }\r\n\r\n  return new olTileGridWMTS({\r\n    origin: extentGetTopLeft(projectionExtent),\r\n    resolutions,\r\n    matrixIds\r\n  });\r\n}\r\n","import olSourceWMTS from 'ol/source/WMTS';\r\n\r\nimport { createDefaultTileGrid } from '../../utils/tilegrid';\r\nimport { DataSource } from './datasource';\r\nimport { WMTSDataSourceOptions } from './wmts-datasource.interface';\r\n\r\nexport class WMTSDataSource extends DataSource {\r\n  public options: WMTSDataSourceOptions;\r\n  public ol: olSourceWMTS;\r\n\r\n  constructor(options: WMTSDataSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  protected createOlSource(): olSourceWMTS {\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        tileGrid: createDefaultTileGrid(this.options.projection as string)\r\n      },\r\n      this.options\r\n    );\r\n\r\n    return new olSourceWMTS(sourceOptions);\r\n  }\r\n\r\n  public onUnwatch() {}\r\n\r\n}\r\n","import olSourceCarto from 'ol/source/CartoDB';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { CartoDataSourceOptions } from './carto-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class CartoDataSource extends DataSource {\r\n  public ol: olSourceCarto;\r\n  public options: CartoDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceCarto {\r\n    const crossOrigin = this.options.crossOrigin\r\n      ? this.options.crossOrigin\r\n      : 'anonymous';\r\n    const sourceOptions = Object.assign(\r\n      {\r\n        crossOrigin\r\n      },\r\n      this.options\r\n    );\r\n    return new olSourceCarto(sourceOptions);\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legend = super.getLegend();\r\n    if (legend.length > 0) {\r\n      return legend;\r\n    }\r\n    let htmlString = '<table>';\r\n    if (this.options.config.layers[0].legend != null) {\r\n      this.options.config.layers[0].legend.items.forEach(f => {\r\n        if (f.visible === true) {\r\n          htmlString +=\r\n            '<tr><td>' +\r\n            '<p><font size=\"5\" color=\"' +\r\n            f.value +\r\n            '\"> &#9679</font></p></td>' +\r\n            '<td>' +\r\n            f.name +\r\n            '</td></tr>';\r\n        }\r\n      });\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    } else {\r\n      // Try to build the legend from the cartocss options\r\n      const layerOptions = this.options.config.layers[0].options;\r\n      // All available cartocss style options\r\n      const types = [\r\n        'polygon-fill:',\r\n        'marker-fill:',\r\n        'shield-fill:',\r\n        'building-fill:',\r\n        'line-color:'\r\n      ];\r\n      for (const oneType of types) {\r\n        if (layerOptions.cartocss.includes(oneType)) {\r\n          const type = layerOptions.cartocss.split(oneType).pop();\r\n          const color = type.substr(0, type.indexOf(';'));\r\n          if (color.includes('ramp')) {\r\n            const colors = color.split(', (')[1].split(',');\r\n            const data = color.split(', (')[2].split(',');\r\n            for (let j = 0; j < colors.length; j++) {\r\n              colors[j] = colors[j].replace(/(\"|\\))/g, '');\r\n              data[j] = data[j].replace(/(\"|\\))/g, '');\r\n              if (data[j].replace(/\\s+/g, '') === '=') {\r\n                data[j] = 'Autres';\r\n              }\r\n              htmlString +=\r\n                '<tr><td>' +\r\n                '<p><font size=\"5\" color=\"' +\r\n                colors[j] +\r\n                '\"> &#9679</font></p></td>' +\r\n                '<td>' +\r\n                data[j] +\r\n                '</td></tr>';\r\n            }\r\n            break;\r\n          } else {\r\n            const title = layerOptions.layer_name\r\n              ? layerOptions.layer_name\r\n              : '';\r\n            htmlString +=\r\n              '<tr><td>' +\r\n              '<p><font size=\"5\" color=\"' +\r\n              color +\r\n              '\"> &#9679</font></p>' +\r\n              '</td><td>' +\r\n              title +\r\n              '</td></tr>';\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      htmlString += '</table>';\r\n      return [{ html: htmlString }];\r\n    }\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport * as olloadingstrategy from 'ol/loadingstrategy';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { ArcGISRestDataSourceOptions } from './arcgisrest-datasource.interface';\r\n\r\nexport class ArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceVector;\r\n  public options: ArcGISRestDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    const esrijsonFormat = new olFormatEsriJSON();\r\n    return new olSourceVector({\r\n      attributions: this.options.params.attributions,\r\n      overlaps: false,\r\n      format: esrijsonFormat,\r\n      url: function(extent, resolution, proj) {\r\n        const baseUrl = this.options.url + '/' + this.options.layer + '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        if (this.options.params.timeFilter) {\r\n          const time = `time=${this.options.params.timeExtent}`;\r\n          params.push(time);\r\n        }\r\n        if (this.options.params.customParams) {\r\n          this.options.params.customParams.forEach(element => {\r\n            params.push(element);\r\n          });\r\n        }\r\n        return `${baseUrl}?${params.join('&')}`;\r\n      }.bind(this),\r\n      strategy: olloadingstrategy.bbox\r\n    });\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legendInfo = this.options.params.legendInfo;\r\n    const legend = super.getLegend();\r\n    if (legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const modifiedUrl = this.options.url.replace(\r\n        'FeatureServer',\r\n        'MapServer'\r\n      );\r\n      const src = `${modifiedUrl}/${lyr.layerId}/images/${lyrLegend.url}`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceTileArcGISRest from 'ol/source/TileArcGISRest';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { DataSourceLegendOptions } from './datasource.interface';\r\nimport { TileArcGISRestDataSourceOptions } from './tilearcgisrest-datasource.interface';\r\nimport { QueryHtmlTarget } from '../../../query/shared/query.enums';\r\n\r\nexport class TileArcGISRestDataSource extends DataSource {\r\n  public ol: olSourceTileArcGISRest;\r\n  public options: TileArcGISRestDataSourceOptions;\r\n\r\n  get params(): any {\r\n    return this.options.params as any;\r\n  }\r\n\r\n  get queryTitle(): string {\r\n    return (this.options as any).queryTitle\r\n      ? (this.options as any).queryTitle\r\n      : 'title';\r\n  }\r\n\r\n  get queryHtmlTarget(): string {\r\n    return (this.options as any).queryHtmlTarget\r\n      ? (this.options as any).queryHtmlTarget\r\n      : QueryHtmlTarget.BLANK;\r\n  }\r\n\r\n  protected createOlSource(): olSourceTileArcGISRest {\r\n    return new olSourceTileArcGISRest(this.options);\r\n  }\r\n\r\n  getLegend(): DataSourceLegendOptions[] {\r\n    const legend = super.getLegend();\r\n    if (this.options.legendInfo === undefined || legend.length > 0) {\r\n      return legend;\r\n    }\r\n    const id = parseInt(this.options.layer, 10);\r\n    const lyr = this.options.legendInfo.layers[id];\r\n    let htmlString = '<table><tr><td>' + lyr.layerName + '</td></tr>';\r\n\r\n    for (const lyrLegend of lyr.legend) {\r\n      const src = `${this.options.url}/${lyr.layerId}/images/${\r\n        lyrLegend.url\r\n      }`;\r\n      const label = lyrLegend.label.replace('<Null>', 'Null');\r\n      htmlString +=\r\n        `<tr><td align='left'><img src=\"` +\r\n        src +\r\n        `\" alt ='' /></td><td>` +\r\n        label +\r\n        '</td></tr>';\r\n    }\r\n    htmlString += '</table>';\r\n    return [{ html: htmlString }];\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport * as olformat from 'ol/format';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport { Md5 } from 'ts-md5';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { WebSocketDataSourceOptions } from './websocket-datasource.interface';\r\n\r\nexport class WebSocketDataSource extends FeatureDataSource {\r\n  public ws: WebSocket;\r\n  public options: WebSocketDataSourceOptions;\r\n\r\n  protected createOlSource(): olSourceVector {\r\n    this.createWebSocket();\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    return super.createOlSource();\r\n  }\r\n\r\n  private createWebSocket() {\r\n    this.ws = new WebSocket(this.options.url);\r\n    this.ws.onmessage = this.onMessage.bind(this);\r\n\r\n    if (this.options.onclose) {\r\n      this.ws.onclose = this.onClose.bind(this);\r\n    }\r\n\r\n    if (this.options.onerror) {\r\n      this.ws.onerror = this.onError.bind(this);\r\n    }\r\n\r\n    if (this.options.onopen) {\r\n      this.ws.onopen = this.onOpen.bind(this);\r\n    }\r\n  }\r\n\r\n  onMessage(event) {\r\n    const featureAdded = this.options.format.readFeature(event.data);\r\n\r\n    switch (this.options.onmessage) {\r\n      case 'update':\r\n        // ol don't add if same ID\r\n        const featureToRemove = this.ol.getFeatureById(featureAdded.getId());\r\n        if (featureToRemove) {\r\n          this.ol.removeFeature(featureToRemove);\r\n        }\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'delete':\r\n        this.ol.clear(true);\r\n        this.ol.addFeature(featureAdded);\r\n        break;\r\n      case 'add':\r\n      default:\r\n        this.ol.addFeature(featureAdded);\r\n    }\r\n  }\r\n\r\n  onClose(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onError(event) {\r\n    // thrown message to user\r\n  }\r\n\r\n  onOpen(event) {\r\n    // thrown message to user ?\r\n  }\r\n\r\n  public onUnwatch() {\r\n    this.ws.close();\r\n  }\r\n}\r\n","import { Md5 } from 'ts-md5';\r\nimport feature from 'ol/Feature';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\nimport olFormatMVT from 'ol/format/MVT';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { DataSource } from './datasource';\r\nimport { MVTDataSourceOptions } from './mvt-datasource.interface';\r\n\r\nexport class MVTDataSource extends DataSource {\r\n  public options: MVTDataSourceOptions;\r\n  public ol: olSourceVectorTile;\r\n\r\n  protected createOlSource(): olSourceVectorTile {\r\n    const mvtFormat = new olFormatMVT({featureClass: feature});\r\n    this.options.format = mvtFormat;\r\n    return new olSourceVectorTile(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    if (!this.options.url) {\r\n        return uuid();\r\n    }\r\n    const chain = 'mvt' + this.options.url;\r\n    return Md5.hashStr(chain) as string;\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","import olSourceCluster from 'ol/source/Cluster';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from './feature-datasource';\r\nimport { ClusterDataSourceOptions } from './cluster-datasource.interface';\r\n\r\nexport class ClusterDataSource extends FeatureDataSource {\r\n  public options: ClusterDataSourceOptions;\r\n  public ol: olSourceCluster;\r\n\r\n  protected createOlSource(): olSourceCluster {\r\n    this.options.format = this.getSourceFormatFromOptions(this.options);\r\n    this.options.source = super.createOlSource();\r\n    return new olSourceCluster(this.options);\r\n  }\r\n\r\n  protected generateId() {\r\n    return uuid();\r\n  }\r\n\r\n  public onUnwatch() {}\r\n}\r\n","export const FEATURE = 'Feature';\r\n\r\nexport enum FeatureMotion {\r\n  None,\r\n  Move,\r\n  Zoom,\r\n  Default\r\n}\r\n","export const LAYER = 'Layer';\r\n","import { Subject } from 'rxjs';\r\n\r\nimport olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource } from '../../../datasource';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { LayerOptions } from './layer.interface';\r\n\r\nexport abstract class Layer {\r\n  public collapsed: boolean;\r\n  public dataSource: DataSource;\r\n  public map: IgoMap;\r\n  public ol: olLayer;\r\n  public options: LayerOptions;\r\n  public status$: Subject<SubjectStatus>;\r\n\r\n  get id(): string {\r\n    return this.options.id || this.dataSource.id;\r\n  }\r\n\r\n  get alias(): string {\r\n    return this.options.alias;\r\n  }\r\n\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  set title(title: string) {\r\n    this.options.title = title;\r\n  }\r\n\r\n  get zIndex(): number {\r\n    return this.ol.getZIndex();\r\n  }\r\n\r\n  set zIndex(zIndex: number) {\r\n    this.ol.setZIndex(zIndex);\r\n  }\r\n\r\n  get baseLayer(): boolean {\r\n    return this.options.baseLayer;\r\n  }\r\n\r\n  set baseLayer(baseLayer: boolean) {\r\n    this.options.baseLayer = baseLayer;\r\n  }\r\n\r\n  get visible(): boolean {\r\n    return this.ol.get('visible');\r\n  }\r\n\r\n  set visible(visibility: boolean) {\r\n    this.ol.setVisible(visibility);\r\n  }\r\n\r\n  get opacity(): number {\r\n    return this.ol.get('opacity');\r\n  }\r\n\r\n  set opacity(opacity: number) {\r\n    this.ol.setOpacity(opacity);\r\n  }\r\n\r\n  get isInResolutionsRange(): boolean {\r\n    if (!this.map) {\r\n      return false;\r\n    }\r\n\r\n    const resolution = this.map.viewController.getResolution();\r\n    const minResolution = this.ol.getMinResolution();\r\n    const maxResolution = this.ol.getMaxResolution();\r\n\r\n    return resolution >= minResolution && resolution <= maxResolution;\r\n  }\r\n\r\n  get showInLayerList(): boolean { return this.options.showInLayerList !== false; }\r\n\r\n  constructor(options: LayerOptions) {\r\n    this.options = options;\r\n    this.dataSource = this.options.source;\r\n\r\n    this.ol = this.createOlLayer();\r\n    if (this.options.zIndex !== undefined) {\r\n      this.zIndex = this.options.zIndex;\r\n    }\r\n\r\n    if (this.options.baseLayer && this.options.visible === undefined) {\r\n      this.options.visible = false;\r\n    }\r\n    this.visible =\r\n      this.options.visible === undefined ? true : this.options.visible;\r\n    this.opacity =\r\n      this.options.opacity === undefined ? 1 : this.options.opacity;\r\n\r\n    this.ol.set('_layer', this, true);\r\n  }\r\n\r\n  protected abstract createOlLayer(): olLayer;\r\n\r\n  setMap(map: IgoMap | undefined) {\r\n    this.map = map;\r\n  }\r\n}\r\n","import olLayer from 'ol/layer/Layer';\r\n\r\nimport { DataSource } from '../../../datasource/shared/datasources/datasource';\r\nimport { AnyDataSourceOptions } from '../../../datasource/shared/datasources/any-datasource.interface';\r\n\r\nexport interface LayerOptions {\r\n  source?: DataSource;\r\n  sourceOptions?: AnyDataSourceOptions;\r\n  title?: string;\r\n  id?: string;\r\n  alias?: string;\r\n  baseLayer?: boolean;\r\n  opacity?: number;\r\n  visible?: boolean;\r\n  extent?: [number, number, number, number];\r\n  zIndex?: number;\r\n  minResolution?: number;\r\n  maxResolution?: number;\r\n  showInLayerList?: boolean;\r\n  removable?: boolean;\r\n  ol?: olLayer;\r\n  tooltip?: TooltipContent;\r\n}\r\n\r\nexport interface GroupLayers {\r\n  title: string;\r\n  layers?: LayerOptions;\r\n  collapsed?: boolean;\r\n}\r\n\r\nexport interface LayerLegend {\r\n  title: string;\r\n  url: string;\r\n  image: string;\r\n}\r\n\r\nexport interface TooltipContent {\r\n  type?: TooltipType;\r\n  text?: string;\r\n}\r\nexport enum TooltipType {\r\n  TITLE = 'title',\r\n  ABSTRACT = 'abstract',\r\n  CUSTOM = 'custom'\r\n}\r\n","import olSourceImage from 'ol/source/Image';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { ImageLayer } from '../shared/layers/image-layer';\r\n\r\nexport class ImageWatcher extends Watcher {\r\n  protected id: string;\r\n  protected loaded = 0;\r\n  protected loading = 0;\r\n\r\n  private source: olSourceImage;\r\n\r\n  constructor(layer: ImageLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`imageloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`imageloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`imageloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    if (!event.image.__watchers__) {\r\n      event.image.__watchers__ = [];\r\n    }\r\n    event.image.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.image.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.image.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.image.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import olSourceTile from 'ol/source/Tile';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { TileLayer } from '../shared/layers/tile-layer';\r\n\r\nexport class TileWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private source: olSourceTile;\r\n\r\n  constructor(layer: TileLayer) {\r\n    super();\r\n    this.source = layer.options.source.ol;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n    this.source.on(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.on(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.on(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.source.un(`tileloadstart`, e => this.handleLoadStart(e));\r\n    this.source.un(`tileloadend`, e => this.handleLoadEnd(e));\r\n    this.source.un(`tileloaderror`, e => this.handleLoadEnd(e));\r\n  }\r\n\r\n  private handleLoadStart(event: any) {\r\n    // This is to avoid increasing\r\n    // the number of loaded tiles if a tile was loading\r\n    // before subscribing to this watcher\r\n    if (!event.tile.__watchers__) {\r\n      event.tile.__watchers__ = [];\r\n    }\r\n    event.tile.__watchers__.push(this.id);\r\n\r\n    this.loading += 1;\r\n    this.status = SubjectStatus.Working;\r\n  }\r\n\r\n  private handleLoadEnd(event) {\r\n    if (!event.tile.__watchers__) {\r\n      return;\r\n    }\r\n\r\n    const watcherIndex = event.tile.__watchers__.indexOf(this.id);\r\n    if (watcherIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    event.tile.__watchers__.splice(watcherIndex, 1);\r\n\r\n    this.loaded += 1;\r\n\r\n    const loading = this.loading;\r\n    if (this.loaded >= loading) {\r\n      if (loading === this.loading) {\r\n        this.status = SubjectStatus.Done;\r\n        this.loaded = this.loading = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import olSourceVector from 'ol/source/Vector';\r\nimport { uuid, Watcher, SubjectStatus } from '@igo2/utils';\r\n\r\nimport { VectorLayer } from '../shared/layers/vector-layer';\r\n\r\nexport class VectorWatcher extends Watcher {\r\n  private id: string;\r\n  private loaded = 0;\r\n  private loading = 0;\r\n\r\n  private layer: VectorLayer;\r\n\r\n  constructor(layer: VectorLayer) {\r\n    super();\r\n    this.layer = layer;\r\n    this.id = uuid();\r\n  }\r\n\r\n  protected watch() {\r\n  }\r\n\r\n  protected unwatch() {\r\n    this.layer.onUnwatch();\r\n  }\r\n}\r\n","import { Layer } from '../shared/layers/layer';\r\nimport { LayerLegend } from '../shared/layers/layer.interface';\r\n\r\n/**\r\n * Get all the layers legend\r\n * @return Array of legend\r\n */\r\nexport function getLayersLegends(layers: Layer[], scale?: number): LayerLegend[] {\r\n  const legends = [];\r\n  const newCanvas = document.createElement('canvas');\r\n  const newContext = newCanvas.getContext('2d');\r\n  newContext.font = '20px Calibri';\r\n\r\n  let heightPos = 0;\r\n  for (const layer of layers) {\r\n    if (layer.visible === false) { continue; }\r\n\r\n    const legendUrls = layer.dataSource.getLegend(scale) || [];\r\n    for (const legendUrl of legendUrls) {\r\n      if (legendUrl.url === undefined) { continue; }\r\n\r\n      const title = layer.title;\r\n      // Create an image for the legend\r\n      const legendImage = new Image();\r\n      legendImage.crossOrigin = 'anonymous';\r\n      legendImage.src = legendUrl.url;\r\n      legendImage.onload = () => {\r\n        newContext.fillText(title, 0, heightPos);\r\n        newContext.drawImage(legendImage, 0, heightPos + 20);\r\n        heightPos += legendImage.height + 5;\r\n      };\r\n      // Add legend info to the list\r\n      legends.push({\r\n        title,\r\n        url: legendUrl.url,\r\n        image: legendImage\r\n      });\r\n    }\r\n  }\r\n\r\n  return legends;\r\n}\r\n","import olLayerImage from 'ol/layer/Image';\r\nimport olSourceImage from 'ol/source/Image';\r\n\r\nimport { ImageWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { WMSDataSource } from '../../../datasource/shared/datasources/wms-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { ImageLayerOptions } from './image-layer.interface';\r\n\r\nexport class ImageLayer extends Layer {\r\n  public dataSource: WMSDataSource;\r\n  public options: ImageLayerOptions;\r\n  public ol: olLayerImage;\r\n\r\n  private watcher: ImageWatcher;\r\n\r\n  constructor(options: ImageLayerOptions) {\r\n    super(options);\r\n\r\n    this.watcher = new ImageWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerImage {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceImage\r\n    });\r\n\r\n    const image = new olLayerImage(olOptions);\r\n    const token = this.options.token;\r\n    if (token) {\r\n      (image.getSource() as any).setImageLoadFunction((tile, src) => {\r\n        this.customLoader(tile, src, token);\r\n      });\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  private customLoader(tile, src, token?) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', src);\r\n\r\n    xhr.setRequestHeader('Authorization', 'Bearer ' + token);\r\n    xhr.responseType = 'arraybuffer';\r\n\r\n    xhr.onload = function() {\r\n      const arrayBufferView = new Uint8Array((this as any).response);\r\n      const blob = new Blob([arrayBufferView], { type: 'image/png' });\r\n      const urlCreator = window.URL;\r\n      const imageUrl = urlCreator.createObjectURL(blob);\r\n      tile.getImage().src = imageUrl;\r\n    };\r\n    xhr.send();\r\n  }\r\n}\r\n","import olLayerTile from 'ol/layer/Tile';\r\nimport olSourceTile from 'ol/source/Tile';\r\n\r\nimport { TileWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\n\r\nimport { OSMDataSource } from '../../../datasource/shared/datasources/osm-datasource';\r\nimport { WMTSDataSource } from '../../../datasource/shared/datasources/wmts-datasource';\r\nimport { XYZDataSource } from '../../../datasource/shared/datasources/xyz-datasource';\r\nimport { CartoDataSource } from '../../../datasource/shared/datasources/carto-datasource';\r\nimport { TileArcGISRestDataSource } from '../../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { TileLayerOptions } from './tile-layer.interface';\r\n\r\nexport class TileLayer extends Layer {\r\n  public dataSource:\r\n    | OSMDataSource\r\n    | WMTSDataSource\r\n    | XYZDataSource\r\n    | CartoDataSource\r\n    | TileArcGISRestDataSource;\r\n  public options: TileLayerOptions;\r\n  public ol: olLayerTile;\r\n\r\n  private watcher: TileWatcher;\r\n\r\n  constructor(options: TileLayerOptions) {\r\n    super(options);\r\n\r\n    this.watcher = new TileWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceTile\r\n    });\r\n\r\n    return new olLayerTile(olOptions);\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n}\r\n","import olLayerVector from 'ol/layer/Vector';\r\nimport olSourceVector from 'ol/source/Vector';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { easeOut } from 'ol/easing';\r\nimport { asArray as ColorAsArray } from 'ol/color';\r\n\r\nimport { FeatureDataSource } from '../../../datasource/shared/datasources/feature-datasource';\r\nimport { WFSDataSource } from '../../../datasource/shared/datasources/wfs-datasource';\r\nimport { ArcGISRestDataSource } from '../../../datasource/shared/datasources/arcgisrest-datasource';\r\nimport { WebSocketDataSource } from '../../../datasource/shared/datasources/websocket-datasource';\r\nimport { ClusterDataSource } from '../../../datasource/shared/datasources/cluster-datasource';\r\n\r\nimport { VectorWatcher } from '../../utils';\r\nimport { IgoMap } from '../../../map';\r\nimport { Layer } from './layer';\r\nimport { VectorLayerOptions } from './vector-layer.interface';\r\n\r\nexport class VectorLayer extends Layer {\r\n  public dataSource: FeatureDataSource | WFSDataSource | ArcGISRestDataSource | WebSocketDataSource | ClusterDataSource;\r\n  public options: VectorLayerOptions;\r\n  public ol: olLayerVector;\r\n  private watcher: VectorWatcher;\r\n\r\n  get browsable(): boolean {\r\n    return this.options.browsable !== false;\r\n  }\r\n\r\n  get exportable(): boolean {\r\n    return this.options.exportable !== false;\r\n  }\r\n\r\n  constructor(options: VectorLayerOptions) {\r\n    super(options);\r\n    this.watcher = new VectorWatcher(this);\r\n    this.status$ = this.watcher.status$;\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVector {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVector\r\n    });\r\n\r\n    if (this.options.animation) {\r\n      this.dataSource.ol.on(\r\n        'addfeature',\r\n        function(e) {\r\n          this.flash(e.feature);\r\n        }.bind(this)\r\n      );\r\n    }\r\n\r\n    return new olLayerVector(olOptions);\r\n  }\r\n\r\n  protected flash(feature) {\r\n    const start = new Date().getTime();\r\n    const listenerKey = this.map.ol.on('postcompose', animate.bind(this));\r\n\r\n    function animate(event) {\r\n      const vectorContext = event.vectorContext;\r\n      const frameState = event.frameState;\r\n      const flashGeom = feature.getGeometry().clone();\r\n      const elapsed = frameState.time - start;\r\n      const elapsedRatio = elapsed / this.options.animation.duration;\r\n      const opacity = easeOut(1 - elapsedRatio);\r\n      const newColor = ColorAsArray(this.options.animation.color || 'red');\r\n      newColor[3] = opacity;\r\n      const style = this.ol.getStyleFunction().call(this, feature)[0];\r\n      const styleClone = style.clone();\r\n\r\n      switch (feature.getGeometry().getType()) {\r\n        case 'Point':\r\n          const radius =\r\n            easeOut(elapsedRatio) * (styleClone.getImage().getRadius() * 3);\r\n          styleClone.getImage().setRadius(radius);\r\n          styleClone.getImage().setOpacity(opacity);\r\n          break;\r\n        case 'LineString':\r\n          // TODO\r\n          if (styleClone.getImage().getStroke()) {\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setColor(newColor);\r\n            styleClone\r\n              .getImage()\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) *\r\n                  (styleClone\r\n                    .getImage()\r\n                    .getStroke()\r\n                    .getWidth() *\r\n                    3)\r\n              );\r\n          }\r\n          if (styleClone.getStroke()) {\r\n            styleClone.getStroke().setColor(newColor);\r\n            styleClone\r\n              .getStroke()\r\n              .setWidth(\r\n                easeOut(elapsedRatio) * (styleClone.getStroke().getWidth() * 3)\r\n              );\r\n          }\r\n          break;\r\n        case 'Polygon':\r\n          // TODO\r\n          if (styleClone.getImage().getFill()) {\r\n            styleClone\r\n              .getImage()\r\n              .getFill()\r\n              .setColor(newColor);\r\n          }\r\n          if (styleClone.getFill()) {\r\n            styleClone.getFill().setColor(newColor);\r\n          }\r\n          break;\r\n      }\r\n\r\n      vectorContext.setStyle(styleClone);\r\n      vectorContext.drawGeometry(flashGeom);\r\n\r\n      if (elapsed > this.options.animation.duration) {\r\n        unByKey(listenerKey);\r\n        // remove last geometry\r\n        // there is a little flash before feature disappear, better solution ?\r\n        this.map.ol.render();\r\n        return;\r\n      }\r\n      // tell OpenLayers to continue postcompose animation\r\n      this.map.ol.render();\r\n    }\r\n  }\r\n\r\n  public setMap(map: IgoMap | undefined) {\r\n    if (map === undefined) {\r\n      this.watcher.unsubscribe();\r\n    } else {\r\n      this.watcher.subscribe(() => {});\r\n    }\r\n    super.setMap(map);\r\n  }\r\n\r\n  public onUnwatch() {\r\n    this.dataSource.onUnwatch();\r\n    this.stopAnimation();\r\n  }\r\n\r\n  public stopAnimation() {\r\n    this.dataSource.ol.un(\r\n      'addfeature',\r\n      function(e) {\r\n        this.flash(e.feature);\r\n      }.bind(this)\r\n    );\r\n  }\r\n}\r\n","import olLayerVectorTile from 'ol/layer/VectorTile';\r\nimport olSourceVectorTile from 'ol/source/VectorTile';\r\n\r\nimport { MVTDataSource } from '../../../datasource/shared/datasources/mvt-datasource';\r\n\r\nimport { Layer } from './layer';\r\nimport { VectorTileLayerOptions } from './vectortile-layer.interface';\r\n\r\nexport class VectorTileLayer extends Layer {\r\n  public dataSource: MVTDataSource;\r\n  public options: VectorTileLayerOptions;\r\n  public ol: olLayerVectorTile;\r\n\r\n  constructor(options: VectorTileLayerOptions) {\r\n    super(options);\r\n  }\r\n\r\n  protected createOlLayer(): olLayerVectorTile {\r\n    const olOptions = Object.assign({}, this.options, {\r\n      source: this.options.source.ol as olSourceVectorTile\r\n    });\r\n\r\n    return new olLayerVectorTile(olOptions);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\nimport { StyleByAttribute } from './stylebyattribute';\r\n\r\nimport { ClusterParam } from './clusterParam';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleService {\r\n  constructor() {}\r\n\r\n  createStyle(options: { [key: string]: any }) {\r\n    return this.parseStyle('style', options);\r\n  }\r\n\r\n  private parseStyle(key: string, value: any): olstyle {\r\n    const styleOptions = {};\r\n    const olCls = this.getOlCls(key);\r\n\r\n    if (olCls && value instanceof Object) {\r\n      Object.keys(value).forEach(_key => {\r\n        const olKey = this.getOlKey(_key);\r\n        styleOptions[olKey] = this.parseStyle(_key, value[_key]);\r\n      });\r\n      return new olCls(styleOptions);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  private getOlKey(key: any) {\r\n    let olKey = key.toLowerCase();\r\n    switch (olKey) {\r\n      case 'circle':\r\n      case 'regularshape':\r\n      case 'icon':\r\n        olKey = 'image';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return olKey;\r\n  }\r\n\r\n  private getOlCls(key: any) {\r\n    let olCls = olstyle[key.charAt(0).toUpperCase() + key.slice(1)];\r\n    if (key === 'regularshape') {\r\n      olCls = olstyle.RegularShape;\r\n    }\r\n\r\n    return olCls;\r\n  }\r\n  createStyleByAttribute(feature, styleByAttribute: StyleByAttribute) {\r\n    let style;\r\n    const type = styleByAttribute.type;\r\n    const attribute = styleByAttribute.attribute;\r\n    const data = styleByAttribute.data;\r\n    const stroke = styleByAttribute.stroke;\r\n    const width = styleByAttribute.width;\r\n    const fill = styleByAttribute.fill;\r\n    const radius = styleByAttribute.radius;\r\n    const icon = styleByAttribute.icon;\r\n    const scale = styleByAttribute.scale;\r\n    const size = data.length;\r\n    const label = styleByAttribute.label;\r\n    const baseStyle = styleByAttribute.baseStyle;\r\n    if (type === 'circle') {\r\n      for (let i = 0; i < size; i++) {\r\n        if (feature.get(attribute) === data[i]) {\r\n          if (icon) {\r\n            style = [\r\n              new olstyle.Style({\r\n                image: new olstyle.Icon({\r\n                  src: icon[i],\r\n                  scale: scale ? scale[i] : 1\r\n                })\r\n              })\r\n            ];\r\n            return style;\r\n          }\r\n          style = [\r\n            new olstyle.Style({\r\n              image: new olstyle.Circle({\r\n                radius: radius ? radius[i] : 4,\r\n                stroke: new olstyle.Stroke({\r\n                  color: stroke ? stroke[i] : 'black'\r\n                }),\r\n                fill: new olstyle.Fill({\r\n                  color: fill ? fill[i] : 'black'\r\n                })\r\n              })\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n      if (!feature.getStyle()) {\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: 4,\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: '#bbbbf2'\r\n              })\r\n            })\r\n          })\r\n        ];\r\n        return style;\r\n      }\r\n    } else if (type === 'regular') {\r\n      for (let i = 0; i < size; i++) {\r\n        if (feature.get(attribute) === data[i]) {\r\n          style = [\r\n            new olstyle.Style({\r\n              stroke: new olstyle.Stroke({\r\n                color: stroke ? stroke[i] : 'black',\r\n                width: width ? width[i] : 1\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: fill ? fill[i] : 'rgba(255,255,255,0.4)'\r\n              }),\r\n              text: new olstyle.Text({\r\n                text: feature.get(label),\r\n                stroke: new olstyle.Stroke({\r\n                  color: 'black'\r\n                })\r\n              })\r\n            })\r\n          ];\r\n          return style;\r\n        }\r\n      }\r\n      if (!feature.getStyle()) {\r\n        if (baseStyle) {\r\n          style = this.createStyle(baseStyle);\r\n          return style;\r\n        }\r\n        style = [\r\n          new olstyle.Style({\r\n            stroke: new olstyle.Stroke({\r\n              color: 'black'\r\n            }),\r\n            fill: new olstyle.Fill({\r\n              color: '#bbbbf2'\r\n            })\r\n          })\r\n        ];\r\n        return style;\r\n      }\r\n    }\r\n  }\r\n\r\n  createClusterStyle(feature, clusterParam: ClusterParam) {\r\n    let style;\r\n    const range = clusterParam.clusterRange;\r\n    const icon = clusterParam.clusterIcon;\r\n    const scale = clusterParam.clusterScale;\r\n    const size = feature.get('features').length;\r\n    let color;\r\n    if (size !== 1) {\r\n      if (range) {\r\n        if (size >= range[1]) {\r\n          color = 'red';\r\n        } else if (size < range[1] && size >= range[0]) {\r\n          color = 'orange';\r\n        } else if (size < range[0]) {\r\n          color = 'green';\r\n        }\r\n      }\r\n      style = [\r\n        new olstyle.Style({\r\n          image: new olstyle.Circle({\r\n            radius: 2 * size + 3.4,\r\n            stroke: new olstyle.Stroke({\r\n              color: 'black'\r\n            }),\r\n            fill: new olstyle.Fill({\r\n              color: range ? color : 'blue'\r\n            })\r\n          }),\r\n          text: new olstyle.Text({\r\n            text: size.toString(),\r\n            fill: new olstyle.Fill({\r\n              color: '#fff'\r\n            })\r\n          })\r\n        })\r\n      ];\r\n    } else {\r\n      if (icon) {\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Icon({\r\n              src: icon,\r\n              scale\r\n            })\r\n          })\r\n        ];\r\n      } else {\r\n        style = [\r\n          new olstyle.Style({\r\n            image: new olstyle.Circle({\r\n              radius: 2 * size + 3.4,\r\n              stroke: new olstyle.Stroke({\r\n                color: 'black'\r\n              }),\r\n              fill: new olstyle.Fill({\r\n                color: 'blue'\r\n              })\r\n            })\r\n          })\r\n        ];\r\n      }\r\n    }\r\n    return style;\r\n  }\r\n}\r\n","import OlLayer from 'ol/layer/Layer';\r\n\r\nimport { AnyLayer } from '../../layer/shared/layers/any-layer';\r\nimport { QueryableDataSource } from './query.interfaces';\r\n\r\n/**\r\n * Whether a layer is queryable\r\n * @param layer Layer\r\n * @returns True if the layer s squeryable\r\n */\r\nexport function layerIsQueryable(layer: AnyLayer): boolean {\r\n  const dataSource = layer.dataSource as QueryableDataSource;\r\n  return dataSource.options.queryable === true;\r\n}\r\n\r\n/**\r\n * Whether an OL layer is queryable\r\n * @param layer Layer\r\n * @returns True if the ol layer is queryable\r\n */\r\nexport function olLayerIsQueryable(olLayer: OlLayer): boolean {\r\n  const layer = olLayer.get('_layer');\r\n  return layer === undefined ? false : layerIsQueryable(layer);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\nimport { layerIsQueryable } from '../../query/shared/query.utils';\r\nimport { Layer, TooltipType } from '../shared/layers';\r\n\r\n@Component({\r\n  selector: 'igo-layer-item',\r\n  templateUrl: './layer-item.component.html',\r\n  styleUrls: ['./layer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerItemComponent implements OnInit, OnDestroy {\r\n\r\n  showLegend$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  inResolutionRange$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  queryBadgeHidden$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  tooltipText: string;\r\n\r\n  private resolution$$: Subscription;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendIfVisible: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() orderable: boolean = true;\r\n\r\n  @Input() lowerDisabled: boolean = false;\r\n\r\n  @Input() raiseDisabled: boolean = false;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  get removable(): boolean { return this.layer.options.removable !== false; }\r\n\r\n  get opacity() { return this.layer.opacity * 100; }\r\n  set opacity(opacity: number) { this.layer.opacity = opacity / 100; }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    const legend = this.layer.dataSource.options.legend || {};\r\n    let legendCollapsed = legend.collapsed === false ? false : true;\r\n    if (this.layer.visible && this.expandLegendIfVisible) {\r\n      legendCollapsed = false;\r\n    }\r\n    this.toggleLegend(legendCollapsed);\r\n    this.updateQueryBadge();\r\n\r\n    const resolution$ = this.layer.map.viewController.resolution$;\r\n    this.resolution$$ = resolution$.subscribe(() => {\r\n      this.onResolutionChange();\r\n    });\r\n    this.tooltipText = this.computeTooltip();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.resolution$$.unsubscribe();\r\n  }\r\n\r\n  toggleLegend(collapsed: boolean) {\r\n    this.showLegend$.next(!collapsed);\r\n  }\r\n\r\n  toggleVisibility() {\r\n    this.layer.visible = !this.layer.visible;\r\n    if (this.toggleLegendOnVisibilityChange) {\r\n      this.toggleLegend(!this.layer.visible);\r\n    }\r\n    this.updateQueryBadge();\r\n  }\r\n\r\n  computeTooltip(): string {\r\n    const layerOptions = this.layer.options;\r\n    if (!layerOptions.tooltip) {\r\n      return this.layer.title;\r\n    }\r\n    const layerTooltip = layerOptions.tooltip;\r\n    const layerMetadata = (layerOptions as MetadataLayerOptions).metadata;\r\n    switch (layerOptions.tooltip.type) {\r\n      case TooltipType.TITLE:\r\n        return this.layer.title;\r\n      case TooltipType.ABSTRACT:\r\n        if (layerMetadata && layerMetadata.abstract) {\r\n          return layerMetadata.abstract;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      case TooltipType.CUSTOM:\r\n        if (layerTooltip && layerTooltip.text) {\r\n          return layerTooltip.text;\r\n        } else {\r\n          return this.layer.title;\r\n        }\r\n      default:\r\n        return this.layer.title;\r\n    }\r\n  }\r\n\r\n  private onResolutionChange() {\r\n    const inResolutionRange = this.layer.isInResolutionsRange;\r\n    if (inResolutionRange === false && this.updateLegendOnResolutionChange === true) {\r\n      this.toggleLegend(true);\r\n    }\r\n    this.inResolutionRange$.next(inResolutionRange);\r\n  }\r\n\r\n  private updateQueryBadge() {\r\n    const hidden = this.queryBadge === false ||\r\n      this.layer.visible === false ||\r\n      !layerIsQueryable(this.layer);\r\n    this.queryBadgeHidden$.next(hidden);\r\n  }\r\n}\r\n","import { Component, Input, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Subscription, BehaviorSubject, of, Observable } from 'rxjs';\r\n\r\nimport { DataSourceLegendOptions } from '../../datasource/shared/datasources/datasource.interface';\r\nimport { Layer } from '../shared/layers';\r\nimport { CapabilitiesService } from '../../datasource/shared/capabilities.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'igo-layer-legend',\r\n  templateUrl: './layer-legend.component.html',\r\n  styleUrls: ['./layer-legend.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerLegendComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  /**\r\n   * Observable of the legend items\r\n   */\r\n  legendItems$: BehaviorSubject<DataSourceLegendOptions[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Subscription to the map's resolution\r\n   */\r\n  private resolution$$: Subscription;\r\n  /**\r\n   * Layer\r\n   */\r\n  @Input() layer: Layer;\r\n\r\n  constructor(private capabilitiesService: CapabilitiesService) {}\r\n\r\n  /**\r\n   * On init, subscribe to the map's resolution and update the legend accordingly\r\n   */\r\n  ngOnInit() {\r\n    if (this.updateLegendOnResolutionChange === true) {\r\n      const resolution$ = this.layer.map.viewController.resolution$;\r\n      this.resolution$$ = resolution$.subscribe((resolution: number) => this.onResolutionChange(resolution));\r\n    } else {\r\n      this.updateLegend(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On destroy, unsubscribe to the map,s resolution\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.resolution$$ !== undefined) {\r\n      this.resolution$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  computeItemTitle(layerLegend): Observable<string> {\r\n    const layerOptions = this.layer.dataSource.options as any;\r\n    if (layerOptions.type !== 'wms') {\r\n      return of(layerLegend.title);\r\n    }\r\n\r\n    const layers = layerOptions.params.layers.split(',');\r\n    const localLayerOptions = JSON.parse(JSON.stringify(layerOptions)); // to avoid to alter the original options.\r\n    localLayerOptions.params.layers = layers.find(layer => layer === layerLegend.title);\r\n    return this.capabilitiesService\r\n      .getWMSOptions(localLayerOptions)\r\n      .pipe(map(wmsDataSourceOptions => {\r\n        return wmsDataSourceOptions._layerOptionsFromCapabilities.title;\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * On resolution change, compute the effective scale level and update the\r\n   * legend accordingly.\r\n   * @param resolutione Map resolution\r\n   */\r\n  private onResolutionChange(resolution: number) {\r\n    const scale = this.layer.map.viewController.getScale();\r\n    this.updateLegend(scale);\r\n  }\r\n\r\n  /**\r\n   * Update the legend according the scale level\r\n   * @param scale Map scale level\r\n   */\r\n  private updateLegend(scale: number | undefined) {\r\n    const legendItems = this.layer.dataSource.getLegend(scale);\r\n    if (legendItems.length === 0 && this.legendItems$.value.length === 0) {\r\n      return;\r\n    }\r\n    this.legendItems$.next(legendItems);\r\n  }\r\n}\r\n","export enum LayerListControlsEnum {\r\n  always = 'always',\r\n  never = 'never',\r\n  default = 'default'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerListService {\r\n  public keyword: string;\r\n  public sortedAlpha = false;\r\n  public onlyVisible = false;\r\n  public onlyInRange = false;\r\n  public keywordInitialized = false;\r\n  public sortedAlphaInitialized = false;\r\n  public onlyVisibleInitialized = false;\r\n  public onlyInRangeInitialized = false;\r\n\r\n  constructor() {}\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef,\r\n  ContentChild,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { Layer } from '../shared';\r\nimport { LayerListControlsEnum } from './layer-list.enum';\r\nimport { LayerListService } from './layer-list.service';\r\nimport { BehaviorSubject, ReplaySubject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce } from 'rxjs/operators';\r\nimport { MetadataOptions, MetadataLayerOptions } from '../../metadata/shared/metadata.interface';\r\n\r\n// TODO: This class could use a clean up. Also, some methods could be moved ealsewhere\r\n@Component({\r\n  selector: 'igo-layer-list',\r\n  templateUrl: './layer-list.component.html',\r\n  styleUrls: ['./layer-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LayerListComponent implements OnInit, OnDestroy {\r\n\r\n  hasLayerNotVisible = false;\r\n  hasLayerOutOfRange = false;\r\n  orderable = true;\r\n  thresholdToFilterAndSort = 5;\r\n\r\n  layers$: BehaviorSubject<Layer[]> = new BehaviorSubject([]);\r\n\r\n  change$ = new ReplaySubject<void>(1);\r\n\r\n  showToolbar$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  private change$$: Subscription;\r\n\r\n  @ContentChild('igoLayerItemToolbar') templateLayerToolbar: TemplateRef<any>;\r\n\r\n  @Input()\r\n  set layers(value: Layer[]) {\r\n    this.setLayers(value);\r\n    this.next();\r\n  }\r\n  get layers(): Layer[] { return this._layers; }\r\n  private _layers: Layer[];\r\n\r\n  @Input() placeholder: string = '';\r\n\r\n  @Input() floatLabel: FloatLabelType = 'auto';\r\n\r\n  @Input() layerFilterAndSortOptions: any = {};\r\n\r\n  @Input() excludeBaseLayers: boolean = false;\r\n\r\n  @Input() toggleLegendOnVisibilityChange: boolean = false;\r\n\r\n  @Input() expandLegendOfVisibleLayers: boolean = false;\r\n\r\n  @Input() updateLegendOnResolutionChange: boolean = false;\r\n\r\n  @Input() queryBadge: boolean = false;\r\n\r\n  get keyword(): string { return this.layerListService.keyword; }\r\n  set keyword(value: string) {\r\n    this.layerListService.keyword = value;\r\n    this.next();\r\n  }\r\n\r\n  get keywordInitialized(): boolean { return this.layerListService.keywordInitialized; }\r\n  set keywordInitialized(value: boolean) { this.layerListService.keywordInitialized = value; }\r\n\r\n  get onlyVisible(): boolean { return this.layerListService.onlyVisible; }\r\n  set onlyVisible(value: boolean) {\r\n    this.layerListService.onlyVisible = value;\r\n    this.next();\r\n  }\r\n\r\n  get onlyVisibleInitialized(): boolean { return this.layerListService.onlyVisibleInitialized; }\r\n  set onlyVisibleInitialized(value: boolean) { this.layerListService.onlyVisibleInitialized = value; }\r\n\r\n  get onlyInRange(): boolean { return this.layerListService.onlyInRange; }\r\n  set onlyInRange(value: boolean) {\r\n    this.layerListService.onlyInRange = value;\r\n    this.next();\r\n  }\r\n\r\n  get onlyInRangeInitialized(): boolean { return this.layerListService.onlyInRangeInitialized; }\r\n  set onlyInRangeInitialized(value: boolean) { this.layerListService.onlyInRangeInitialized = value; }\r\n\r\n  get sortedAlpha(): boolean { return this.layerListService.sortedAlpha; }\r\n  set sortedAlpha(value: boolean) {\r\n    this.layerListService.sortedAlpha = value;\r\n    this.next();\r\n  }\r\n\r\n  get sortedAlphaInitialized(): boolean { return this.layerListService.sortedAlphaInitialized; }\r\n  set sortedAlphaInitialized(value: boolean) { this.layerListService.sortedAlphaInitialized = value; }\r\n\r\n  constructor(\r\n    private layerListService: LayerListService\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.change$$ = this.change$\r\n      .pipe(\r\n        debounce(() => {\r\n          return this.layers.length === 0 ? EMPTY : timer(50);\r\n        })\r\n      ).subscribe(() => {\r\n        this.showToolbar$.next(this.computeShowToolbar());\r\n        this.layers$.next(this.computeLayers(this.layers.slice(0)));\r\n      });\r\n\r\n    this.initLayerFilterAndSortOptions();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change$$.unsubscribe();\r\n  }\r\n\r\n  toggleOnlyVisible() {\r\n    this.onlyVisible = !this.onlyVisible;\r\n  }\r\n\r\n  toggleOnlyInRange() {\r\n    this.onlyInRange = !this.onlyInRange;\r\n  }\r\n\r\n  toggleSort(sortAlpha: boolean) {\r\n    this.sortedAlpha = sortAlpha;\r\n  }\r\n\r\n  clearKeyword() {\r\n    this.keyword = undefined;\r\n  }\r\n\r\n  getLowerLayer() {\r\n    return this.layers.filter(l => !l.baseLayer).reduce((prev, current) => {\r\n      return (prev.zIndex < current.zIndex) ? prev : current;\r\n    });\r\n  }\r\n\r\n  getUpperLayer() {\r\n    return this.layers.filter(l => !l.baseLayer).reduce((prev, current) => {\r\n      return (prev.zIndex > current.zIndex) ? prev : current;\r\n    });\r\n  }\r\n\r\n  private next() {\r\n    this.change$.next();\r\n  }\r\n\r\n  private computeLayers(layers: Layer[]): Layer[] {\r\n    let layersOut = this.filterLayers(layers);\r\n    if (this.sortedAlpha) {\r\n      layersOut = this.sortLayersByTitle(layersOut);\r\n    } else {\r\n      layersOut = this.sortLayersByZindex(layersOut);\r\n    }\r\n    return layersOut;\r\n  }\r\n\r\n  private filterLayers(layers: Layer[]): Layer[] {\r\n    const keyword = this.keyword;\r\n    if (this.layerFilterAndSortOptions.showToolbar === LayerListControlsEnum.never) {\r\n      return layers;\r\n    }\r\n    if (!keyword && !this.onlyInRange && !this.onlyVisible) {\r\n      return layers;\r\n    }\r\n\r\n    const keepLayerIds = layers.map((layer: Layer) => layer.id);\r\n\r\n    layers.forEach((layer: Layer) => {\r\n      const layerOptions = layer.options as MetadataLayerOptions || {};\r\n      const dataSourceOptions = layer.dataSource.options || {};\r\n      const metadata = layerOptions.metadata || {} as MetadataOptions;\r\n      const keywords = metadata.keywordList || [] ;\r\n      const layerKeywords = keywords.map((kw: string) => {\r\n        return kw.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      });\r\n\r\n      if (keyword) {\r\n        const localKeyword = keyword.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n        const layerTitle = layer.title.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n        const dataSourceType = dataSourceOptions.type || '';\r\n        const keywordRegex = new RegExp(localKeyword, 'gi');\r\n        const keywordInList = layerKeywords.find((kw: string) => keywordRegex.test(kw)) !== undefined;\r\n        if (\r\n          !keywordRegex.test(layerTitle) &&\r\n          !(keyword.toLowerCase() === dataSourceType.toLowerCase()) &&\r\n          !keywordInList\r\n        ) {\r\n          const index = keepLayerIds.indexOf(layer.id);\r\n          if (index > -1) {\r\n            keepLayerIds.splice(index, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.onlyVisible && layer.visible === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (this.onlyInRange && layer.isInResolutionsRange === false) {\r\n        const index = keepLayerIds.indexOf(layer.id);\r\n        if (index > -1) {\r\n          keepLayerIds.splice(index, 1);\r\n        }\r\n      }\r\n    });\r\n\r\n    return layers.filter((layer: Layer) => keepLayerIds.indexOf(layer.id) !== -1);\r\n  }\r\n\r\n  private sortLayersByZindex(layers: Layer[]) {\r\n    return layers.sort((layer1, layer2) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  private sortLayersByTitle(layers: Layer[]) {\r\n    return layers.sort((a, b) => {\r\n      if (a.title < b.title) {\r\n        return -1;\r\n      }\r\n      if (a.title > b.title) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  private computeShowToolbar(): boolean {\r\n    switch (this.layerFilterAndSortOptions.showToolbar) {\r\n      case LayerListControlsEnum.always:\r\n        return true;\r\n      case LayerListControlsEnum.never:\r\n        return false;\r\n      default:\r\n        if (this.layers.length >= this.thresholdToFilterAndSort ||\r\n          this.keyword ||\r\n          this.onlyInRange ||\r\n          this.onlyVisible) {\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private initLayerFilterAndSortOptions() {\r\n    if (this.layerFilterAndSortOptions.toolbarThreshold) {\r\n      this.thresholdToFilterAndSort = this.layerFilterAndSortOptions.toolbarThreshold;\r\n    }\r\n\r\n    if (this.layerFilterAndSortOptions.keyword && !this.keywordInitialized) {\r\n      this.keyword = this.layerFilterAndSortOptions.keyword;\r\n      this.keywordInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.sortedAlpha && !this.sortedAlphaInitialized) {\r\n      this.sortedAlpha = this.layerFilterAndSortOptions.sortedAlpha;\r\n      this.sortedAlphaInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.onlyVisible && !this.onlyVisibleInitialized &&\r\n      this.hasLayerNotVisible) {\r\n      this.onlyVisible = this.layerFilterAndSortOptions.onlyVisible;\r\n      this.onlyVisibleInitialized = true;\r\n    }\r\n    if (this.layerFilterAndSortOptions.onlyInRange && !this.onlyInRangeInitialized &&\r\n      this.hasLayerOutOfRange) {\r\n      this.onlyInRange = this.layerFilterAndSortOptions.onlyInRange;\r\n      this.onlyInRangeInitialized = true;\r\n    }\r\n  }\r\n\r\n  private setLayers(layers: Layer[]) {\r\n    this._layers = layers;\r\n\r\n    if (this.excludeBaseLayers) {\r\n      this.hasLayerNotVisible = layers.find(l => l.visible === false && !l.baseLayer) !== undefined;\r\n      this.hasLayerOutOfRange = layers.find(l => l.isInResolutionsRange === false && !l.baseLayer) !== undefined;\r\n    } else {\r\n      this.hasLayerNotVisible = layers.find(l => l.visible === false) !== undefined;\r\n      this.hasLayerOutOfRange = layers.find(l => l.isInResolutionsRange === false) !== undefined;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IgoMap } from './map';\r\n\r\n/**\r\n * MapService\r\n *\r\n * This service tracks the IgoMap instance, if any.\r\n * Currently, only one map instance is supported\r\n * but support for multiple maps may be added in the future.\r\n * This will impact other services such as the OverlayService\r\n * because these maps won't be sharing overlayed features.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MapService {\r\n  private map: IgoMap;\r\n\r\n  constructor() {}\r\n\r\n  getMap(): IgoMap {\r\n    return this.map;\r\n  }\r\n\r\n  setMap(map: IgoMap) {\r\n    this.map = map;\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy, AfterViewInit, Optional } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { RouteService } from '@igo2/core';\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { LayerListComponent } from './layer-list.component';\r\nimport { LayerListService } from './layer-list.service';\r\nimport { Layer } from '../shared/layers/layer';\r\n\r\n@Directive({\r\n  selector: '[igoLayerListBinding]'\r\n})\r\nexport class LayerListBindingDirective implements OnInit, AfterViewInit, OnDestroy {\r\n  private component: LayerListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: LayerListComponent,\r\n    private mapService: MapService,\r\n    private layerListService: LayerListService,\r\n    @Optional() private route: RouteService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService\r\n      .getMap()\r\n      .layers$.subscribe((layers: Layer[]) => {\r\n        this.component.layers = layers.filter((layer: Layer) => {\r\n          return layer.showInLayerList === true;\r\n        });\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.initRoutes();\r\n  }\r\n\r\n  private initRoutes() {\r\n    if (\r\n      this.route &&\r\n      (this.route.options.llcKKey || this.route.options.llcAKey ||\r\n        this.route.options.llcVKey || this.route.options.llcVKey)) {\r\n      this.route.queryParams.subscribe(params => {\r\n\r\n        const keywordFromUrl = params[this.route.options.llcKKey as string];\r\n        const sortedAplhaFromUrl = params[this.route.options.llcAKey as string];\r\n        const onlyVisibleFromUrl = params[this.route.options.llcVKey as string];\r\n        const onlyInRangeFromUrl = params[this.route.options.llcRKey as string];\r\n        if (keywordFromUrl && !this.layerListService.keywordInitialized) {\r\n          this.layerListService.keyword = keywordFromUrl;\r\n          this.layerListService.keywordInitialized = true;\r\n        }\r\n        if (sortedAplhaFromUrl && !this.layerListService.sortedAlphaInitialized) {\r\n          this.layerListService.sortedAlpha = sortedAplhaFromUrl === '1' ? true : false;\r\n          this.layerListService.sortedAlphaInitialized = true;\r\n        }\r\n        if (onlyVisibleFromUrl &&\r\n          !this.layerListService.onlyVisibleInitialized &&\r\n          this.component.hasLayerNotVisible) {\r\n          this.layerListService.onlyVisible = onlyVisibleFromUrl === '1' ? true : false;\r\n          this.layerListService.onlyVisibleInitialized = true;\r\n        }\r\n        if (onlyInRangeFromUrl &&\r\n          !this.layerListService.onlyInRangeInitialized &&\r\n          this.component.hasLayerOutOfRange) {\r\n          this.layerListService.onlyInRange = onlyInRangeFromUrl === '1' ? true : false;\r\n          this.layerListService.onlyInRangeInitialized = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { FeatureStoreStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\n\r\n/**\r\n * Strategies or responsible of synchronizing a feature store and a layer.\r\n * A strategy can be shared among multiple stores. Sharing a strategy\r\n * is a good idea when multiple strategies would have on cancelling effect\r\n * on each other.\r\n *\r\n * At creation, strategy is inactive and needs to be manually activated.\r\n */\r\nexport class FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Feature store\r\n   * @internal\r\n   */\r\n  protected stores: FeatureStore[] = [];\r\n\r\n  /**\r\n   * Whether this strategy is active\r\n   * @internal\r\n   */\r\n  protected active = false;\r\n\r\n  constructor(protected options: FeatureStoreStrategyOptions = {}) {\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Whether this strategy is active\r\n   */\r\n  isActive(): boolean { return this.active; }\r\n\r\n  /**\r\n   * Activate the strategy. If it's already active, it'll be deactivated\r\n   * and activated again.\r\n   */\r\n  activate() {\r\n    if (this.active === true) {\r\n      this.doDeactivate();\r\n    }\r\n    this.active = true;\r\n    this.doActivate();\r\n  }\r\n\r\n  /**\r\n   * Activate the strategy. If it's already active, it'll be deactivated\r\n   * and activated again.\r\n   */\r\n  deactivate() {\r\n    this.active = false;\r\n    this.doDeactivate();\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    if (this.stores.indexOf(store) < 0) {\r\n      this.stores.push(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from store\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    const index = this.stores.indexOf(store);\r\n    if (index >= 0) {\r\n      this.stores.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Do the stataegy activation\r\n   * @internal\r\n   */\r\n  protected doActivate() {}\r\n\r\n  /**\r\n   * Do the strategy deactivation\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {}\r\n\r\n}\r\n","import { Subscription } from 'rxjs';\r\n\r\nimport { FeatureMotion } from '../feature.enums';\r\nimport { Feature, FeatureStoreLoadingStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreStrategy } from './strategy';\r\n\r\n/**\r\n * This strategy loads a store's features into it's layer counterpart.\r\n * The store -> layer binding is a one-way binding. That means any entity\r\n * added to the store will be added to the layer but the opposite is false.\r\n *\r\n * Important: This strategy observes filtered entities, not raw entities. This\r\n * is not configurable yet.\r\n */\r\nexport class FeatureStoreLoadingStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's features\r\n   */\r\n  private stores$$ = new Map<FeatureStore, Subscription>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for entities changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for entities changes in a store.\r\n   * Important: Never observe a store's sorted entities. It makes no sense\r\n   * to display sorted entities (instead of unsorted) on a layer and it\r\n   * would potentially result in a lot of useless computation.\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    const subscription = store.view.all$()\r\n      .subscribe((features: Feature[]) => this.onFeaturesChange(features, store));\r\n    this.stores$$.set(store, subscription);\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in a store.\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const subscription = this.stores$$.get(store);\r\n    if (subscription !== undefined) {\r\n      subscription.unsubscribe();\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for entities changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, Subscription]) => {\r\n      entries[1].unsubscribe();\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features into a layer or clear the layer if the array of features is empty.\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onFeaturesChange(features: Feature[], store: FeatureStore) {\r\n    if (features.length === 0) {\r\n      store.clearLayer();\r\n    } else {\r\n      store.setLayerFeatures(\r\n        features,\r\n        this.selectMotion(store),\r\n        this.options.viewScale,\r\n        this.options.areaRatio,\r\n        this.options.getFeatureId\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the best motion\r\n   * @param store A FeatureStore to apply the motion\r\n   * @returns The motion selected\r\n   */\r\n  private selectMotion(store: FeatureStore) {\r\n    if (this.options.motion !== undefined) { return this.options.motion; }\r\n\r\n    if (store.pristine === true) {\r\n      // If features have just been loaded into the store, move/zoom on them\r\n      return FeatureMotion.Default;\r\n    } else if (store.count > store.view.count) {\r\n      // If features have been filtered, move/zoom on the remaining ones\r\n      return FeatureMotion.Default;\r\n    } else {\r\n      // On insert, update or delete, do nothing\r\n      return FeatureMotion.None;\r\n    }\r\n  }\r\n}\r\n","import { unByKey } from 'ol/Observable';\r\nimport { OlEvent } from 'ol/events/Event';\r\n\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreLoadingLayerStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStoreStrategy } from './strategy';\r\n\r\n/**\r\n * This strategy loads a layer's features into it's store counterpart.\r\n * The layer -> store binding is a one-way binding. That means any OL feature\r\n * added to the layer will be added to the store but the opposite is false.\r\n *\r\n * Important: In it's current state, this strategy is to meant to be combined\r\n * with a standard Loading strategy and it would probably cause recursion issues.\r\n */\r\nexport class FeatureStoreLoadingLayerStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Subscription to the store's OL source changes\r\n   */\r\n  private stores$$ = new Map<FeatureStore, string>();\r\n\r\n  constructor(protected options: FeatureStoreLoadingLayerStrategyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and start watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.watchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and stop watching for Ol source changes\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      this.unwatchStore(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start watching all stores already bound to that strategy at once.\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.stores.forEach((store: FeatureStore) => this.watchStore(store));\r\n  }\r\n\r\n  /**\r\n   * Stop watching all stores bound to that strategy\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unwatchAll();\r\n  }\r\n\r\n  /**\r\n   * Watch for a store's  OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private watchStore(store: FeatureStore) {\r\n    if (this.stores$$.has(store)) {\r\n      return;\r\n    }\r\n\r\n    this.onSourceChanges(store);\r\n    const olSource = store.layer.ol.getSource();\r\n    olSource.on('change', (event: OlEvent) => {\r\n      this.onSourceChanges(store);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop watching for a store's OL source changes\r\n   * @param store Feature store\r\n   */\r\n  private unwatchStore(store: FeatureStore) {\r\n    const key = this.stores$$.get(store);\r\n    if (key !== undefined) {\r\n      unByKey(key);\r\n      this.stores$$.delete(store);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop watching for OL source changes in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    Array.from(this.stores$$.entries()).forEach((entries: [FeatureStore, string]) => {\r\n      unByKey(entries[1]);\r\n    });\r\n    this.stores$$.clear();\r\n  }\r\n\r\n  /**\r\n   * Load features from an OL source into a  store or clear the store if the source is empty\r\n   * @param features Store filtered features\r\n   * @param store Feature store\r\n   */\r\n  private onSourceChanges(store: FeatureStore) {\r\n    const olFeatures = store.layer.ol.getSource().getFeatures();\r\n    if (olFeatures.length === 0) {\r\n      store.clear();\r\n    } else {\r\n      store.setStoreOlFeatures(olFeatures);\r\n    }\r\n  }\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  getEntityId,\r\n  EntityKey,\r\n  EntityStore\r\n} from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { FeatureMotion } from './feature.enums';\r\nimport { Feature, FeatureStoreOptions } from './feature.interfaces';\r\nimport { featureFromOl, featureToOl, moveToOlFeatures } from './feature.utils';\r\nimport { FeatureStoreStrategy } from './strategies/strategy';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * features and the map layer to display them on. Synchronization\r\n * between the store and the layer is handled by strategies.\r\n */\r\nexport class FeatureStore<T extends Feature = Feature> extends EntityStore<T> {\r\n\r\n  /**\r\n   * Feature store strategies responsible of synchronizing the store\r\n   * and the layer\r\n   */\r\n  strategies: FeatureStoreStrategy[] = [];\r\n\r\n  /**\r\n   * Vector layer to display the features on\r\n   */\r\n  layer: VectorLayer;\r\n\r\n  /**\r\n   * The map the layer is bound to\r\n   */\r\n  readonly map: IgoMap;\r\n\r\n  /**\r\n   * The layer's data source\r\n   */\r\n  get source(): FeatureDataSource {\r\n    return this.layer ? this.layer.dataSource as FeatureDataSource : undefined;\r\n  }\r\n\r\n  constructor(entities: T[], options: FeatureStoreOptions) {\r\n    super(entities, options);\r\n    this.map = options.map;\r\n  }\r\n\r\n  /**\r\n   * Bind this store to a vector layer\r\n   * @param layer Vector layer\r\n   * @returns Feature store\r\n   */\r\n  bindLayer(layer: VectorLayer): FeatureStore {\r\n    this.layer = layer;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add a strategy to this store\r\n   * @param strategy Feature store strategy\r\n   * @returns Feature store\r\n   */\r\n  addStrategy(strategy: FeatureStoreStrategy, activate: boolean = false): FeatureStore {\r\n    const existingStrategy = this.strategies.find((_strategy: FeatureStoreStrategy) => {\r\n      return strategy.constructor === _strategy.constructor;\r\n    });\r\n    if (existingStrategy !== undefined) {\r\n      throw new Error('A strategy of this type already exists on that FeatureStore.');\r\n    }\r\n\r\n    this.strategies.push(strategy);\r\n    strategy.bindStore(this);\r\n\r\n    if (activate === true) {\r\n      strategy.activate();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove a strategy from this store\r\n   * @param strategy Feature store strategy\r\n   * @returns Feature store\r\n   */\r\n  removeStrategy(strategy: FeatureStoreStrategy): FeatureStore {\r\n    const index = this.strategies.indexOf(strategy);\r\n    if (index >= 0) {\r\n      this.strategies.splice(index, 1);\r\n      strategy.unbindStore(this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return strategies of a given type\r\n   * @param type Feature store strategy class\r\n   * @returns Strategies\r\n   */\r\n  getStrategyOfType(type: typeof FeatureStoreStrategy): FeatureStoreStrategy {\r\n    return this.strategies.find((strategy: FeatureStoreStrategy) => {\r\n      return strategy instanceof type;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate strategies of a given type\r\n   * @param type Feature store strategy class\r\n   */\r\n  activateStrategyOfType(type: typeof FeatureStoreStrategy) {\r\n    const strategy = this.getStrategyOfType(type);\r\n    if (strategy !== undefined) {\r\n      strategy.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate strategies of a given type\r\n   * @param type Feature store strategy class\r\n   */\r\n  deactivateStrategyOfType(type: typeof FeatureStoreStrategy) {\r\n    const strategy = this.getStrategyOfType(type);\r\n    if (strategy !== undefined) {\r\n      strategy.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible. Strategies\r\n   * make extensive use of that method.\r\n   * @param features Features\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  setLayerFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number,\r\n    getId?: (Feature) => EntityKey\r\n  ) {\r\n    getId = getId ? getId : getEntityId;\r\n    this.checkLayer();\r\n\r\n    const olFeatures = features\r\n      .map((feature: Feature) => featureToOl(feature, this.map.projection, getId));\r\n    this.setLayerOlFeatures(olFeatures, motion, viewScale, areaRatio);\r\n  }\r\n\r\n  /**\r\n   * Set the store's features from an array of OL features.\r\n   * @param olFeatures Ol features\r\n   */\r\n  setStoreOlFeatures(olFeatures: OlFeature[]) {\r\n    this.checkLayer();\r\n\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n      return featureFromOl(olFeature, this.layer.map.projection);\r\n    });\r\n    this.load(features as T[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the layer\r\n   */\r\n  clearLayer() {\r\n    this.checkLayer();\r\n    this.source.ol.clear();\r\n  }\r\n\r\n  /**\r\n   * Check wether a layer is bound or not and throw an error if not.\r\n   */\r\n  private checkLayer() {\r\n    if (this.layer === undefined) {\r\n      throw new Error('This FeatureStore is not bound to a layer.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the layer's features and perform a motion to make them visible.\r\n   * @param features Openlayers feature objects\r\n   * @param motion Optional: The type of motion to perform\r\n   */\r\n  private setLayerOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default,\r\n    viewScale?: [number, number, number, number],\r\n    areaRatio?: number\r\n  ) {\r\n    const olFeaturesMap = new Map();\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      olFeaturesMap.set(olFeature.getId(), olFeature);\r\n    });\r\n\r\n    const olFeaturesToRemove = [];\r\n    this.source.ol.forEachFeature((olFeature: OlFeature) => {\r\n      const newOlFeature = olFeaturesMap.get(olFeature.getId());\r\n      if (newOlFeature === undefined) {\r\n        olFeaturesToRemove.push(olFeature);\r\n      } else if (newOlFeature.get('_entityRevision') !== olFeature.get('_entityRevision')) {\r\n        olFeaturesToRemove.push(olFeature);\r\n      } else {\r\n        olFeaturesMap.delete(newOlFeature.getId());\r\n      }\r\n    });\r\n\r\n    const olFeaturesToAddIds = Array.from(olFeaturesMap.keys());\r\n    const olFeaturesToAdd = olFeatures.filter((olFeature: OlFeature) => {\r\n      return olFeaturesToAddIds.indexOf(olFeature.getId()) >= 0;\r\n    });\r\n\r\n    if (olFeaturesToRemove.length > 0) {\r\n      this.removeOlFeaturesFromLayer(olFeaturesToRemove);\r\n    }\r\n    if (olFeaturesToAdd.length > 0) {\r\n      this.addOlFeaturesToLayer(olFeaturesToAdd);\r\n    }\r\n\r\n    if (olFeaturesToAdd.length > 0) {\r\n      // If features are added, do a motion toward the newly added features\r\n      moveToOlFeatures(this.map, olFeaturesToAdd, motion, viewScale, areaRatio);\r\n    } else if (olFeatures.length > 0) {\r\n      // Else, do a motion toward all the features\r\n      moveToOlFeatures(this.map, olFeatures, motion, viewScale, areaRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add features to the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private addOlFeaturesToLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      olFeature.set('_featureStore', this, true);\r\n    });\r\n    this.source.ol.addFeatures(olFeatures);\r\n  }\r\n\r\n  /**\r\n   * Remove features from the the layer\r\n   * @param features Openlayers feature objects\r\n   */\r\n  private removeOlFeaturesFromLayer(olFeatures: OlFeature[]) {\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      this.source.ol.removeFeature(olFeature);\r\n    });\r\n  }\r\n\r\n}\r\n","import OlFeature from 'ol/Feature';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { DragBoxEvent as OlDragBoxEvent } from 'ol/interaction/DragBox';\r\nimport { ListenerFunction } from 'ol/events';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subscription, combineLatest } from 'rxjs';\r\nimport { map, debounceTime, skip } from 'rxjs/operators';\r\n\r\nimport { EntityKey, EntityRecord } from '@igo2/common';\r\n\r\nimport { FeatureDataSource } from '../../../datasource';\r\nimport { VectorLayer } from '../../../layer';\r\nimport { IgoMap, ctrlKeyDown } from '../../../map';\r\n\r\nimport { Feature, FeatureStoreSelectionStrategyOptions } from '../feature.interfaces';\r\nimport { FeatureStore } from '../store';\r\nimport { FeatureStoreStrategy } from './strategy';\r\nimport { FeatureMotion } from '../feature.enums';\r\n\r\nclass OlDragSelectInteraction extends OlDragBoxInteraction {\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n}\r\n\r\n/**\r\n * This strategy synchronizes a store and a layer selected entities.\r\n * The store <-> layer binding is a two-way binding.\r\n *\r\n * In many cases, a single strategy bound to multiple stores\r\n * will yield better results that multiple strategies with each their\r\n * own store. In the latter scenario, a click on overlapping features\r\n * would trigger the strategy of each layer and they would cancel\r\n * each other as well as move the map view around needlessly.\r\n */\r\nexport class FeatureStoreSelectionStrategy extends FeatureStoreStrategy {\r\n\r\n  /**\r\n   * Listener to the map click event that allows selecting a feature\r\n   * by clicking on the map\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  private olDragSelectInteraction: OlDragSelectInteraction;\r\n\r\n  private olDragSelectInteractionEndKey: string;\r\n\r\n  /**\r\n   * A feature store that'll contain the selected features. It has it's own\r\n   * layer, shared by all the stores this staretgy is bound to.\r\n   */\r\n  private overlayStore: FeatureStore;\r\n\r\n  /**\r\n   * Subscription to all stores selected entities\r\n   */\r\n  private stores$$: Subscription;\r\n\r\n  /**\r\n   * The map the layers belong to\r\n   */\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: FeatureStoreSelectionStrategyOptions) {\r\n    super(options);\r\n    this.overlayStore = this.createOverlayStore();\r\n  }\r\n\r\n  /**\r\n   * Bind this strategy to a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  bindStore(store: FeatureStore) {\r\n    super.bindStore(store);\r\n    if (this.isActive() === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind this strategy from a store and force this strategy's\r\n   * reactivation to properly setup watchers.\r\n   * @param store Feature store\r\n   */\r\n  unbindStore(store: FeatureStore) {\r\n    super.unbindStore(store);\r\n    if (this.isActive() === true) {\r\n      // Force reactivation\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all entities, from all stores\r\n   */\r\n  unselectAll() {\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      store.state.updateAll({selected: false});\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.overlayStore.clear();\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer, setup the map click lsitener and\r\n   * start watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doActivate() {\r\n    this.addOverlayLayer();\r\n    this.listenToMapClick();\r\n    if (this.options.dragBox === true) {\r\n      this.addDragBoxInteraction();\r\n    }\r\n    this.watchAll();\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer, remove the map click lsitener and\r\n   * stop watching for stores selection\r\n   * @internal\r\n   */\r\n  protected doDeactivate() {\r\n    this.unlistenToMapClick();\r\n    this.removeDragBoxInteraction();\r\n    this.unwatchAll();\r\n    this.removeOverlayLayer();\r\n  }\r\n\r\n  /**\r\n   * Create a single observable of all the stores. With a single observable,\r\n   * features can be added all at once to the overlay layer and a single\r\n   * motion can be performed. Multiple observable would have\r\n   * a cancelling effect on each other.\r\n   */\r\n  private watchAll() {\r\n    this.unwatchAll();\r\n\r\n    const stores$ = this.stores.map((store: FeatureStore) => {\r\n      return store.stateView.manyBy$((record: EntityRecord<Feature>) => {\r\n        return record.state.selected === true;\r\n      }).pipe(\r\n        map((records: EntityRecord<Feature>[]) => records.map(record => record.entity))\r\n      );\r\n    });\r\n    this.stores$$ = combineLatest(...stores$)\r\n      .pipe(\r\n        debounceTime(25),\r\n        skip(1), // Skip intial selection\r\n        map((features: Array<Feature[]>) => features.reduce((a, b) => a.concat(b)))\r\n      ).subscribe((features: Feature[]) => this.onSelectFromStore(features));\r\n  }\r\n\r\n  /**\r\n   * Stop watching for selection in all stores.\r\n   */\r\n  private unwatchAll() {\r\n    if (this.stores$$ !== undefined) {\r\n      this.stores$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a 'singleclick' listener to the map that'll allow selecting\r\n   * features by clicking on the map. The selection will be performed\r\n   * only on the layers bound to this strategy.\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on('singleclick', (event: OlMapBrowserPointerEvent) => {\r\n      this.onMapClick(event);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the map click listener\r\n   */\r\n  private unlistenToMapClick() {\r\n    if (this.mapClickListener !== undefined) {\r\n      this.map.ol.un(\r\n        this.mapClickListener.type,\r\n        this.mapClickListener.listener\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On map click, select feature at pixel\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onMapClick(event: OlMapBrowserPointerEvent) {\r\n    const exclusive = !ctrlKeyDown(event);\r\n    const reverse = !exclusive;\r\n    const olFeatures = event.map.getFeaturesAtPixel(event.pixel, {\r\n      hitTolerance: this.options.hitTolerance || 0,\r\n      layerFilter: (olLayer) => {\r\n        const storeOlLayer = this.stores.find((store: FeatureStore) => {\r\n          return store.layer.ol === olLayer;\r\n        });\r\n        return storeOlLayer !== undefined;\r\n      }\r\n    });\r\n    this.onSelectFromMap(olFeatures, exclusive, reverse);\r\n  }\r\n\r\n  /**\r\n   * Add a drag box interaction and, on drag box end, select features\r\n   */\r\n  private addDragBoxInteraction() {\r\n    let olDragSelectInteraction;\r\n    const olInteractions = this.map.ol.getInteractions().getArray();\r\n\r\n    // There can only be one dragbox interaction, so find the current one, if any\r\n    // Don't keep a reference to the current dragbox because we don't want\r\n    // to remove it when this startegy is deactivated\r\n    for (const olInteraction of olInteractions) {\r\n      if (olInteraction instanceof OlDragSelectInteraction) {\r\n        olDragSelectInteraction = olInteraction;\r\n        break;\r\n      }\r\n    }\r\n    // If no drag box interaction is found, create a new one and add it to the map\r\n    if (olDragSelectInteraction === undefined) {\r\n      olDragSelectInteraction = new OlDragSelectInteraction({\r\n        condition: ctrlKeyDown\r\n      });\r\n      this.map.ol.addInteraction(olDragSelectInteraction);\r\n      this.olDragSelectInteraction = olDragSelectInteraction;\r\n    }\r\n\r\n    this.olDragSelectInteractionEndKey = olDragSelectInteraction.on(\r\n      'boxend',\r\n      (event: OlMapBrowserPointerEvent) => this.onDragBoxEnd(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove drag box interaction\r\n   */\r\n  private removeDragBoxInteraction() {\r\n    if (this.olDragSelectInteractionEndKey !== undefined) {\r\n      unByKey(this.olDragSelectInteractionEndKey);\r\n    }\r\n    if (this.olDragSelectInteraction !== undefined) {\r\n      this.map.ol.removeInteraction(this.olDragSelectInteraction);\r\n    }\r\n    this.olDragSelectInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * On dragbox end, select features in drag box\r\n   * @param event OL MapBrowserPointerEvent\r\n   */\r\n  private onDragBoxEnd(event: OlDragBoxEvent) {\r\n    const exclusive = !ctrlKeyDown(event.mapBrowserEvent);\r\n    const extent = event.target.getGeometry().getExtent();\r\n    const olFeatures = this.stores.reduce((acc: OlFeature[], store: FeatureStore) => {\r\n      const olSource = store.layer.ol.getSource();\r\n      acc.push(...olSource.getFeaturesInExtent(extent));\r\n      return acc;\r\n    }, []);\r\n    this.onSelectFromMap(olFeatures, exclusive, false);\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the store, add\r\n   * them to this startegy's overlay layer (select on map)\r\n   * @param features Store features\r\n   */\r\n  private onSelectFromStore(features: Feature[]) {\r\n    const motion = this.options ? this.options.motion : undefined;\r\n    const olOverlayFeatures = this.overlayStore.layer.ol.getSource().getFeatures();\r\n    const overlayFeaturesKeys = olOverlayFeatures.map((olFeature: OlFeature) => olFeature.getId());\r\n    const featuresKeys = features.map(this.overlayStore.getKey);\r\n    const doMotion = overlayFeaturesKeys.length !== featuresKeys.length ||\r\n      !overlayFeaturesKeys.every((key: EntityKey) => featuresKeys.indexOf(key) >= 0);\r\n\r\n    this.overlayStore.setLayerFeatures(\r\n      features,\r\n      doMotion ? motion : FeatureMotion.None,\r\n      this.options.viewScale,\r\n      this.options.areaRatio,\r\n      this.options.getFeatureId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When features are selected from the map, also select them\r\n   * in their store.\r\n   * @param olFeatures OL feature objects\r\n   */\r\n  private onSelectFromMap(olFeatures: OlFeature[], exclusive: boolean, reverse: boolean) {\r\n    const groupedFeatures = this.groupFeaturesByStore(olFeatures);\r\n\r\n    this.stores.forEach((store: FeatureStore) => {\r\n      const features = groupedFeatures.get(store);\r\n      if (features === undefined && exclusive === true) {\r\n        this.unselectAllFeaturesFromStore(store);\r\n      } else if (features === undefined && exclusive === false) {\r\n        // Do nothing\r\n      } else {\r\n        this.selectFeaturesFromStore(store, features, exclusive, reverse);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select features in store\r\n   * @param store: Feature store\r\n   * @param features Features\r\n   */\r\n  private selectFeaturesFromStore(store: FeatureStore, features: Feature[], exclusive: boolean, reverse: boolean) {\r\n    if (reverse === true) {\r\n      store.state.reverseMany(features, ['selected']);\r\n    } else {\r\n      store.state.updateMany(features, {selected: true}, exclusive);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselect all features from store\r\n   * @param store: Feature store\r\n   */\r\n  private unselectAllFeaturesFromStore(store: FeatureStore) {\r\n    store.state.updateAll({selected: false});\r\n  }\r\n\r\n  /**\r\n   * This method returns a store -> features mapping from a list\r\n   * of OL selected features. OL features keep a reference to the store\r\n   * they are from.\r\n   * @param olFeatures: OL feature objects\r\n   * @returns Store -> features mapping\r\n   */\r\n  private groupFeaturesByStore(olFeatures: OlFeature[]): Map<FeatureStore, Feature[]> {\r\n    const groupedFeatures = new Map<FeatureStore, Feature[]>();\r\n    if (olFeatures === null || olFeatures === undefined) {\r\n      return groupedFeatures;\r\n    }\r\n\r\n    olFeatures.forEach((olFeature: OlFeature) => {\r\n      const store = olFeature.get('_featureStore');\r\n      if (store === undefined) { return; }\r\n\r\n      let features = groupedFeatures.get(store);\r\n      if (features === undefined) {\r\n        features = [];\r\n        groupedFeatures.set(store, features);\r\n      }\r\n\r\n      const feature = store.get(olFeature.getId());\r\n      if (feature !== undefined) {\r\n        features.push(feature);\r\n      }\r\n    });\r\n\r\n    return groupedFeatures;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay store\r\n   */\r\n  private createOverlayStore(): FeatureStore {\r\n    const overlayLayer = this.options.layer\r\n      ? this.options.layer\r\n      : this.createOverlayLayer();\r\n    return new FeatureStore([], {map: this.map}).bindLayer(overlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay store that'll contain the selected features.\r\n   * @returns Overlay layer\r\n   */\r\n  private createOverlayLayer(): VectorLayer {\r\n    return new VectorLayer({\r\n      zIndex: 300,\r\n      source: new FeatureDataSource(),\r\n      style: undefined,\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay store's layer to the map to display the selected\r\n   * features.\r\n   */\r\n  private addOverlayLayer() {\r\n    if (this.overlayStore.layer.map === undefined) {\r\n      this.map.addLayer(this.overlayStore.layer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the overlay layer from the map\r\n   */\r\n  private removeOverlayLayer() {\r\n    this.overlayStore.source.ol.clear();\r\n    this.map.removeLayer(this.overlayStore.layer);\r\n  }\r\n}\r\n","import * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport OlLayer from 'ol/Layer';\r\n\r\nimport {\r\n  EntityKey,\r\n  getEntityId,\r\n  getEntityTitle,\r\n  getEntityRevision,\r\n  getEntityProperty\r\n} from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { VectorLayer } from '../../layer';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { FEATURE, FeatureMotion } from './feature.enums';\r\nimport { Feature } from './feature.interfaces';\r\nimport { FeatureStore } from './store';\r\nimport {\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from './strategies';\r\n\r\n/**\r\n * Create an Openlayers feature object out of a feature definition.\r\n * The output object has a reference to the feature id.\r\n * @param feature Feature definition\r\n * @param projectionOut Feature object projection\r\n * @returns OpenLayers feature object\r\n */\r\nexport function featureToOl(\r\n  feature: Feature,\r\n  projectionOut: string,\r\n  getId?: (Feature) => EntityKey\r\n): OlFeature {\r\n  getId = getId ? getId : getEntityId;\r\n\r\n  const olFormat = new OlFormatGeoJSON();\r\n  const olFeature = olFormat.readFeature(feature, {\r\n    dataProjection: feature.projection,\r\n    featureProjection: projectionOut\r\n  });\r\n\r\n  olFeature.setId(getId(feature));\r\n\r\n  const title = getEntityTitle(feature);\r\n  if (title !== undefined) {\r\n    olFeature.set('_title', title, true);\r\n  }\r\n\r\n  if (feature.extent !== undefined) {\r\n    olFeature.set('_extent', feature.extent, true);\r\n  }\r\n\r\n  if (feature.projection !== undefined) {\r\n    olFeature.set('_projection', feature.projection, true);\r\n  }\r\n\r\n  if (feature.extent !== undefined) {\r\n    olFeature.set('_extent', feature.extent, true);\r\n  }\r\n\r\n  const mapTitle = getEntityProperty(feature, 'meta.mapTitle');\r\n  if (mapTitle !== undefined) {\r\n    olFeature.set('_mapTitle', mapTitle, true);\r\n  }\r\n\r\n  olFeature.set('_entityRevision', getEntityRevision(feature), true);\r\n\r\n  return olFeature;\r\n}\r\n\r\n/**\r\n * Create a feature object out of an OL feature\r\n * The output object has a reference to the feature id.\r\n * @param olFeature OL Feature\r\n * @param projectionIn OL feature projection\r\n * @param olLayer OL Layer\r\n * @param projectionOut Feature projection\r\n * @returns Feature\r\n */\r\nexport function featureFromOl(\r\n  olFeature: OlFeature,\r\n  projectionIn: string,\r\n  olLayer?: OlLayer,\r\n  projectionOut = 'EPSG:4326'\r\n): Feature {\r\n  let title;\r\n  const olFormat = new OlFormatGeoJSON();\r\n\r\n  const keys = olFeature.getKeys().filter((key: string) => {\r\n    return !key.startsWith('_') && key !== 'geometry';\r\n  });\r\n  const properties = keys.reduce((acc: object, key: string) => {\r\n    acc[key] = olFeature.get(key);\r\n    return acc;\r\n  }, {});\r\n\r\n  const geometry = olFormat.writeGeometryObject(olFeature.getGeometry(), {\r\n    dataProjection: projectionOut,\r\n    featureProjection: projectionIn\r\n  });\r\n\r\n  if (olLayer) {\r\n    title = olLayer.get('title');\r\n  } else {\r\n    title = olFeature.get('_title');\r\n  }\r\n  const mapTitle = olFeature.get('_mapTitle');\r\n  const id = olFeature.getId();\r\n\r\n  return {\r\n    type: FEATURE,\r\n    projection: projectionOut,\r\n    extent: olFeature.get('_extent'),\r\n    meta: {\r\n      id,\r\n      title: title ? title : (mapTitle ? mapTitle : id),\r\n      mapTitle,\r\n      revision: olFeature.getRevision()\r\n    },\r\n    properties,\r\n    geometry\r\n  };\r\n}\r\n\r\n/**\r\n * Compute an OL feature extent in it's map projection\r\n * @param map Map\r\n * @param olFeature OL feature\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeatureExtent(\r\n  map: IgoMap,\r\n  olFeature: OlFeature\r\n): [number, number, number, number] {\r\n  let olExtent = olextent.createEmpty();\r\n\r\n  const olFeatureExtent = olFeature.get('_extent');\r\n  const olFeatureProjection = olFeature.get('_projection');\r\n  if (olFeatureExtent !== undefined && olFeatureProjection !== undefined) {\r\n    olExtent = olproj.transformExtent(\r\n      olFeatureExtent,\r\n      olFeatureProjection,\r\n      map.projection\r\n    );\r\n  } else {\r\n    const olGeometry = olFeature.getGeometry();\r\n    if (olGeometry !== null) {\r\n      olExtent = olGeometry.getExtent();\r\n    }\r\n  }\r\n\r\n  return olExtent;\r\n}\r\n\r\n/**\r\n * Compute a multiple OL features extent in their map projection\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @returns Extent in the map projection\r\n */\r\nexport function computeOlFeaturesExtent(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[]\r\n): [number, number, number, number] {\r\n  const extent = olextent.createEmpty();\r\n\r\n  olFeatures.forEach((olFeature: OlFeature) => {\r\n    const featureExtent = computeOlFeatureExtent(map, olFeature);\r\n    olextent.extend(extent, featureExtent);\r\n  });\r\n\r\n  return extent;\r\n}\r\n\r\n/**\r\n * Scale an extent.\r\n * @param extent Extent\r\n * @param Scaling factors for top, right, bottom and left directions, in that order\r\n * @returns Scaled extent\r\n */\r\nexport function scaleExtent(\r\n  extent: [number, number, number, number],\r\n  scale: [number, number, number, number]\r\n): [number, number, number, number] {\r\n  const [width, height] = olextent.getSize(extent);\r\n  return [\r\n    scale[3] ? extent[0] - width * scale[3] : extent[0],\r\n    scale[2] ? extent[1] - height * scale[2] : extent[1],\r\n    scale[1] ? extent[2] + width * scale[1] : extent[2],\r\n    scale[0] ? extent[3] + height * scale[0] : extent[3]\r\n  ];\r\n}\r\n\r\n/**\r\n * Return true if features are out of view.\r\n * If features are too close to the edge, they are considered out of view.\r\n * We define the edge as 5% of the extent size.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @returns Return true if features are out of view\r\n */\r\nexport function featuresAreOutOfView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number]\r\n) {\r\n  const mapExtent = map.getExtent();\r\n  const edgeRatio = 0.05;\r\n  const scale = [-1, -1, -1, -1].map(x => x * edgeRatio);\r\n  const viewExtent = scaleExtent(mapExtent, scale as [number, number, number, number]);\r\n\r\n  return !olextent.containsExtent(viewExtent, featuresExtent);\r\n}\r\n\r\n/**\r\n * Return true if features are too deep into the view. This results\r\n * in features being too small.\r\n * Features are considered too small if their extent occupies less than\r\n * 1% of the map extent.\r\n * @param map Map\r\n * @param featuresExtent The features's extent\r\n * @param areaRatio The features extent to view extent acceptable ratio\r\n * @returns Return true if features are too deep in the view\r\n */\r\nexport function featuresAreTooDeepInView(\r\n  map: IgoMap,\r\n  featuresExtent: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  // An area ratio of 0.004 means that the feature extent's width and height\r\n  // should be about 1/16 of the map extent's width and height\r\n  areaRatio = areaRatio ? areaRatio : 0.004;\r\n  const mapExtent = map.getExtent();\r\n  const mapExtentArea = olextent.getArea(mapExtent);\r\n  const featuresExtentArea = olextent.getArea(featuresExtent);\r\n\r\n  return featuresExtentArea / mapExtentArea < areaRatio;\r\n}\r\n\r\n/**\r\n * Fit view to include the features extent.\r\n * By default, this method will let the features occupy about 50% of the viewport.\r\n * @param map Map\r\n * @param olFeatures OL features\r\n * @param motion To motion to the new map view\r\n * @param scale If this is defined, the original view will be scaled\r\n *  by that factor before any logic is applied.\r\n */\r\nexport function moveToOlFeatures(\r\n  map: IgoMap,\r\n  olFeatures: OlFeature[],\r\n  motion: FeatureMotion = FeatureMotion.Default,\r\n  scale?: [number, number, number, number],\r\n  areaRatio?: number\r\n) {\r\n  const featuresExtent = computeOlFeaturesExtent(map, olFeatures);\r\n  let viewExtent = featuresExtent;\r\n  if (scale !== undefined) {\r\n    viewExtent = scaleExtent(viewExtent, scale);\r\n  }\r\n\r\n  if (motion === FeatureMotion.Zoom) {\r\n    map.viewController.zoomToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Move) {\r\n    map.viewController.moveToExtent(viewExtent);\r\n  } else if (motion === FeatureMotion.Default) {\r\n    if (\r\n      featuresAreOutOfView(map, featuresExtent) ||\r\n      featuresAreTooDeepInView(map, featuresExtent, areaRatio)\r\n    ) {\r\n      map.viewController.zoomToExtent(viewExtent);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Hide an OL feature\r\n * @param olFeature OL feature\r\n */\r\nexport function hideOlFeature(olFeature: OlFeature) {\r\n  olFeature.setStyle(new olstyle.Style({}));\r\n}\r\n\r\n/**\r\n * Try to bind a layer to a store if none is bound already.\r\n * The layer will also be added to the store's map.\r\n * If no layer is given to that function, a basic one will be created.\r\n * @param store The store to bind the layer\r\n * @param layer An optional VectorLayer\r\n */\r\nexport function tryBindStoreLayer(store: FeatureStore, layer?: VectorLayer) {\r\n  if (store.layer !== undefined) {\r\n    if (store.layer.map === undefined) {\r\n      store.map.addLayer(store.layer);\r\n    }\r\n    return;\r\n  }\r\n\r\n  layer = layer ? layer : new VectorLayer({\r\n    source: new FeatureDataSource()\r\n  });\r\n  store.bindLayer(layer);\r\n  if (store.layer.map === undefined) {\r\n    store.map.addLayer(store.layer);\r\n  }\r\n}\r\n\r\n/**\r\n * Try to add a loading strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the loading strategy\r\n * @param strategy An optional loading strategy\r\n */\r\nexport function tryAddLoadingStrategy(store: FeatureStore, strategy?: FeatureStoreLoadingStrategy) {\r\n  if (store.getStrategyOfType(FeatureStoreLoadingStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    return;\r\n  }\r\n\r\n  strategy = strategy ? strategy : new FeatureStoreLoadingStrategy({});\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n\r\n/**\r\n * Try to add a selection strategy to a store and activate it.\r\n * If no strategy is given to that function, a basic one will be created.\r\n * @param store The store to bind the selection strategy\r\n * @param [strategy] An optional selection strategy\r\n */\r\nexport function tryAddSelectionStrategy(store: FeatureStore, strategy?: FeatureStoreSelectionStrategy) {\r\n  if (store.getStrategyOfType(FeatureStoreSelectionStrategy) !== undefined) {\r\n    store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n    return;\r\n  }\r\n  strategy = strategy ? strategy : new FeatureStoreSelectionStrategy({\r\n    map: store.map\r\n  });\r\n  store.addStrategy(strategy);\r\n  strategy.activate();\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\n\r\n/**\r\n * Create an overlay layer and it's source\r\n * @returns Overlay layer\r\n */\r\nexport function createOverlayLayer(): VectorLayer {\r\n  const overlayDataSource = new FeatureDataSource();\r\n  return new VectorLayer({\r\n    title: 'Overlay',\r\n    zIndex: 300,\r\n    source: overlayDataSource,\r\n    style: createOverlayLayerStyle()\r\n  });\r\n}\r\n\r\n/**\r\n * Create an overlay style with markers for points and a basic stroke/fill\r\n * combination for lines and polygons\r\n * @returns Style function\r\n */\r\nfunction createOverlayLayerStyle(): (olFeature: OlFeature) => olstyle.Style {\r\n  const defaultStyle = createOverlayDefaultStyle();\r\n  const markerStyle = createOverlayMarkerStyle();\r\n  let style;\r\n\r\n  return (olFeature: OlFeature) => {\r\n    if (olFeature.getId() === 'bufferFeature') {\r\n      style = createBufferStyle(olFeature.get('bufferStroke'), 2, olFeature.get('bufferFill'), olFeature.get('bufferText'));\r\n      return style;\r\n    } else {\r\n      const geometryType = olFeature.getGeometry().getType();\r\n      style = geometryType === 'Point' ? markerStyle : defaultStyle;\r\n      style.getText().setText(olFeature.get('_mapTitle'));\r\n      return style;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Create a basic style for lines and polygons\r\n * @returns Style\r\n */\r\nfunction createOverlayDefaultStyle(): olstyle.Style {\r\n  const stroke = new olstyle.Stroke({\r\n    width: 2,\r\n    color: [0, 161, 222, 1]\r\n  });\r\n\r\n  const fill = new olstyle.Stroke({\r\n    color: [0, 161, 222, 0.15]\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke,\r\n    fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke,\r\n      fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a marker style for points\r\n * @returns Style\r\n */\r\nexport function createOverlayMarkerStyle(color = 'blue'): olstyle.Style {\r\n  let iconColor;\r\n  switch (color) {\r\n    case 'blue':\r\n    case 'red':\r\n    case 'yellow':\r\n    case 'green':\r\n      iconColor = color;\r\n      break;\r\n    default:\r\n      iconColor = 'blue';\r\n      break;\r\n  }\r\n  return new olstyle.Style({\r\n    image: new olstyle.Icon({\r\n      src: './assets/igo2/geo/icons/place_' + iconColor + '_36px.svg',\r\n      imgSize: [36, 36], // for ie\r\n      anchor: [0.5, 1]\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n\r\nfunction createBufferStyle(\r\n  strokeRGBA: [number, number, number, number] = [0, 161, 222, 1],\r\n  strokeWidth: number = 2,\r\n  fillRGBA: [number, number, number, number] = [0, 161, 222, 0.15],\r\n  bufferRadius?\r\n): olstyle.Style {\r\n  const stroke = new olstyle.Stroke({\r\n    width: strokeWidth,\r\n    color: strokeRGBA\r\n  });\r\n\r\n  const fill = new olstyle.Stroke({\r\n    color: fillRGBA\r\n  });\r\n\r\n  return new olstyle.Style({\r\n    stroke,\r\n    fill,\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke,\r\n      fill\r\n    }),\r\n    text: new olstyle.Text({\r\n      font: '12px Calibri,sans-serif',\r\n      text: bufferRadius,\r\n      fill: new olstyle.Fill({ color: '#000' }),\r\n      stroke: new olstyle.Stroke({ color: '#fff', width: 3 }),\r\n      overflow: true\r\n    })\r\n  });\r\n}\r\n","import OlFeature from 'ol/Feature';\r\n\r\nimport {\r\n  Feature,\r\n  FeatureMotion,\r\n  featureToOl,\r\n  moveToOlFeatures\r\n} from '../../feature';\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { createOverlayLayer } from './overlay.utils';\r\n\r\n/**\r\n * This class is simply a shortcut for adding features to a map.\r\n * It does nothing more than a standard layer but it's shipped with\r\n * a defautl style based on the geometry type of the features it contains.\r\n * @todo Enhance that by using a FeatureStore and strategies.\r\n */\r\nexport class Overlay {\r\n  /**\r\n   * The map to add the layer to\r\n   */\r\n  private map: IgoMap;\r\n\r\n  /**\r\n   * Overlay layer\r\n   */\r\n  private layer: VectorLayer;\r\n\r\n  /**\r\n   * Overlay layer's data source\r\n   */\r\n  get dataSource(): FeatureDataSource {\r\n    return this.layer.dataSource as FeatureDataSource;\r\n  }\r\n\r\n  constructor(map?: IgoMap) {\r\n    this.layer = createOverlayLayer();\r\n    this.setMap(map);\r\n  }\r\n\r\n  /**\r\n   * Bind this to a map and add the overlay layer to that map\r\n   * @param map Map\r\n   */\r\n  setMap(map: IgoMap) {\r\n    if (map === undefined) {\r\n      if (this.map !== undefined) {\r\n        this.map.ol.removeLayer(this.layer.ol);\r\n      }\r\n    } else {\r\n      map.ol.addLayer(this.layer.ol);\r\n    }\r\n    this.map = map;\r\n  }\r\n\r\n  /**\r\n   * Set the overlay features and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  setFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.clear();\r\n    this.addFeatures(features, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a feature to the  overlay and, optionally, move to it\r\n   * @param feature Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeature(feature: Feature, motion: FeatureMotion = FeatureMotion.Default) {\r\n    this.addFeatures([feature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add features to the  overlay and, optionally, move to them\r\n   * @param features Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addFeatures(\r\n    features: Feature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    const olFeatures = [];\r\n    features.forEach((feature: Feature) => {\r\n      const olFeature = featureToOl(feature, this.map.projection);\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry === null) {\r\n        return;\r\n      }\r\n      olFeatures.push(olFeature);\r\n    });\r\n\r\n    this.addOlFeatures(olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Add a OpenLayers feature to the  overlay and, optionally, move to it\r\n   * @param olFeature OpenLayers Feature\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeature(\r\n    olFeature: OlFeature,\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.addOlFeatures([olFeature], motion);\r\n  }\r\n\r\n  /**\r\n   * Add OpenLayers features to the overlay and, optionally, move to them\r\n   * @param olFeatures OpenLayers Features\r\n   * @param motion Optional: Apply this motion to the map view\r\n   */\r\n  addOlFeatures(\r\n    olFeatures: OlFeature[],\r\n    motion: FeatureMotion = FeatureMotion.Default\r\n  ) {\r\n    this.dataSource.ol.addFeatures(olFeatures);\r\n    moveToOlFeatures(this.map, olFeatures, motion);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay\r\n   */\r\n  clear() {\r\n    this.dataSource.ol.clear();\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { Watcher, SubjectStatus } from '@igo2/utils';\r\nimport { Layer } from '../../layer/shared/layers';\r\n\r\nexport class LayerWatcher extends Watcher {\r\n  private loaded = 0;\r\n  private loading = 0;\r\n  private layers: Layer[] = [];\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  watch() {}\r\n\r\n  unwatch() {\r\n    this.layers.forEach(layer => this.unwatchLayer(layer), this);\r\n  }\r\n\r\n  watchLayer(layer: Layer) {\r\n    if (layer.status$ === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.layers.push(layer);\r\n\r\n    const layer$$ = layer.status$\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe(status => {\r\n        if (status === SubjectStatus.Working) {\r\n          this.loading += 1;\r\n        } else if (status === SubjectStatus.Done) {\r\n          this.loaded += 1;\r\n        }\r\n\r\n        if (this.loaded >= this.loading) {\r\n          this.loading = this.loaded = 0;\r\n          this.status = SubjectStatus.Done;\r\n        } else if (this.loading > 0) {\r\n          this.status = SubjectStatus.Working;\r\n        }\r\n      });\r\n\r\n    this.subscriptions.push(layer$$);\r\n  }\r\n\r\n  unwatchLayer(layer: Layer) {\r\n    const index = this.layers.indexOf(layer);\r\n    if (index >= 0) {\r\n      const status = (layer as any).watcher.status;\r\n      if (\r\n        [SubjectStatus.Working, SubjectStatus.Waiting].indexOf(status) !== -1\r\n      ) {\r\n        this.loaded += 1;\r\n      }\r\n      this.subscriptions[index].unsubscribe();\r\n      this.subscriptions.splice(index, 1);\r\n      this.layers.splice(index, 1);\r\n      (layer as any).watcher.unwatch();\r\n    }\r\n  }\r\n}\r\n","export enum MapViewAction {\r\n  Move,\r\n  Zoom\r\n}\r\n","import * as olproj from 'ol/proj';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { MAC } from 'ol/has';\r\n\r\nimport { MapViewState } from './map.interface';\r\nimport proj4 from 'proj4';\r\n\r\n/**\r\n * This method extracts a coordinate tuple from a string.\r\n * @param str Any string\r\n * @param mapProjection string Map Projection\r\n * @returns object:\r\n *             lonLat: Coordinate,\r\n *             message: Message of error,\r\n *             radius: radius of the confience of coordinate,\r\n *             conf: confidence of the coordinate}\r\n */\r\nexport function stringToLonLat(str: string, mapProjection: string): {lonLat: [number, number] | undefined,\r\n                                                                     message: string,\r\n                                                                     radius: number | undefined,\r\n                                                                     conf: number | undefined} {\r\n\r\n  let lonLat: [number, number];\r\n  let coordStr: string;\r\n  let negativeLon: string;\r\n  let degreesLon: string;\r\n  let minutesLon: string;\r\n  let secondsLon: string;\r\n  let directionLon: string;\r\n  let decimalLon: string;\r\n  let negativeLat: string;\r\n  let degreesLat: string;\r\n  let minutesLat: string;\r\n  let secondsLat: string;\r\n  let directionLat: string;\r\n  let decimalLat: string;\r\n  let pattern: string;\r\n  let timeZone: string;\r\n  let radius: string;\r\n  let conf: string;\r\n  let lon: any;\r\n  let lat: any;\r\n\r\n  const projectionPattern = '(;[\\\\d]{4,6})';\r\n  const toProjection = '4326';\r\n  let projectionStr: string;\r\n  const projectionRegex = new RegExp(projectionPattern, 'g');\r\n\r\n  const lonlatCoord =  '([-+])?([\\\\d]{1,3})([,.](\\\\d+))?';\r\n  const lonLatPattern = `${lonlatCoord}[\\\\s,.]\\\\s*${lonlatCoord}`;\r\n  const lonLatRegex = new RegExp(`^${lonLatPattern}$`, 'g');\r\n\r\n  const dmsCoord = '([0-9]{1,2})[:|Â°]?\\\\s*([0-9]{1,2})?[:|\\'|â²|â]?\\\\s*([0-9]{1,2}(?:\\.[0-9]+){0,1})?\\\\s*[\"|â³|â]?\\\\s*';\r\n  const dmsCoordPattern = `${dmsCoord}([N|S]),?\\\\s*${dmsCoord}([E|W])`;\r\n  const dmsRegex = new RegExp(`^${dmsCoordPattern}`, 'gi');\r\n\r\n  const patternUtmMtm = '(UTM|MTM)\\-?(\\\\d{1,2})[\\\\s,.]*(\\\\d+[\\\\s.,]?\\\\d+)[\\\\s,.]+(\\\\d+[\\\\s.,]?\\\\d+)';\r\n  const utmMtmRegex =  new RegExp(`^${patternUtmMtm}`, 'gi');\r\n\r\n  const ddCoord = '([-+])?(\\\\d{1,3})[,.](\\\\d+)';\r\n  const patternDd = `${ddCoord}[,.]?\\\\s*${ddCoord}`;\r\n  const ddRegex =  new RegExp(`^${patternDd}`, 'g');\r\n\r\n  const dmdCoord = '([-+])?(\\\\d{1,3})[\\\\s,.]{1}(\\\\d{1,2})[\\\\s,.]{1}(\\\\d{1,2})[.,]?(\\\\d{1,5})?';\r\n  const patternDmd = `${dmdCoord}[,.]?\\\\s*${dmdCoord}`;\r\n  const dmdRegex =  new RegExp(`^${patternDmd}`, 'g');\r\n\r\n  // tslint:disable:max-line-length\r\n  const patternBELL = 'LAT\\\\s*[\\\\s:]*\\\\s*([-+])?(\\\\d{1,2})[\\\\s.,]?(\\\\d+)?[\\\\s.,]?\\\\s*(\\\\d{1,2}([.,]\\\\d+)?)?\\\\s*(N|S|E|W)?\\\\s*LONG\\\\s*[\\\\s:]*\\\\s*([-+])?(\\\\d{1,3})[\\\\s.,]?(\\\\d+)?[\\\\s.,]?\\\\s*(\\\\d{1,2}([.,]\\\\d+)?)?\\\\s*(N|S|E|W)?\\\\s*UNC\\\\s*[\\\\s:]?\\\\s*(\\\\d+)\\\\s*CONF\\\\s*[\\\\s:]?\\\\s*(\\\\d{1,3})';\r\n  const bellRegex =  new RegExp(`^${patternBELL}?`, 'gi');\r\n\r\n  const mmCoord = '([-+]?\\\\d+)[,.]?(\\\\d+)?';\r\n  const mmPattern = `${mmCoord}[\\\\s,.]\\\\s*${mmCoord}`;\r\n  const mmRegex =  new RegExp(`^${mmPattern}$`, 'g');\r\n\r\n  str = str.toLocaleUpperCase();\r\n\r\n  // Extract projection\r\n  if (projectionRegex.test(str)) {\r\n    [coordStr, projectionStr] = str.split(';');\r\n  } else {\r\n    coordStr = str;\r\n  }\r\n\r\n  if (lonLatRegex.test(coordStr)) {\r\n\r\n    [,\r\n     negativeLon,\r\n     lon,\r\n     ,\r\n     decimalLon,\r\n     negativeLat,\r\n     lat,\r\n     ,\r\n     decimalLat] = coordStr.match(lonLatPattern);\r\n\r\n    lon = parseFloat((negativeLon ? negativeLon : '') + lon + '.' + decimalLon);\r\n    lat = parseFloat((negativeLat ? negativeLat : '') + lat + '.' + decimalLat);\r\n\r\n  } else if (dmsRegex.test(coordStr)) {\r\n      [,\r\n       degreesLon,\r\n       minutesLon,\r\n       secondsLon,\r\n       directionLon,\r\n       degreesLat,\r\n       minutesLat,\r\n       secondsLat,\r\n       directionLat] = coordStr.match(dmsCoordPattern);\r\n\r\n      lon = convertDMSToDD(parseFloat(degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);\r\n      lat = convertDMSToDD(parseFloat(degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);\r\n\r\n  } else if (utmMtmRegex.test(coordStr)) {\r\n      [, pattern, timeZone, lon, lat] = coordStr.match(patternUtmMtm);\r\n      const utm = '+proj=' + pattern + ' +zone=' + timeZone;\r\n      const wgs84 = '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs';\r\n      [lon, lat] = proj4(utm.toLocaleLowerCase(), wgs84, [parseFloat(lon), parseFloat(lat)]);\r\n\r\n  } else if (dmdRegex.test(coordStr)) {\r\n    [,\r\n      negativeLon,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      decimalLon,\r\n      negativeLat,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      decimalLat] = coordStr.match(patternDmd);\r\n\r\n    lon = convertDMSToDD(parseFloat((negativeLon ? negativeLon : '') + degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);\r\n    lat = convertDMSToDD(parseFloat((negativeLat ? negativeLat : '') + degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);\r\n\r\n  } else if (ddRegex.test(coordStr)) {\r\n      [,\r\n        negativeLon,\r\n        degreesLon,\r\n        decimalLon,\r\n        negativeLat,\r\n        degreesLat,\r\n        decimalLat] = coordStr.match(patternDd);\r\n\r\n      lon = convertDMSToDD(parseFloat((negativeLon ? negativeLon : '') + degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);\r\n      lat = convertDMSToDD(parseFloat((negativeLat ? negativeLat : '') + degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);\r\n\r\n  } else if (bellRegex.test(coordStr)) {\r\n    [,\r\n      negativeLat,\r\n      degreesLat,\r\n      minutesLat,\r\n      secondsLat,\r\n      ,\r\n      directionLat,\r\n      negativeLon,\r\n      degreesLon,\r\n      minutesLon,\r\n      secondsLon,\r\n      ,\r\n      directionLon,\r\n      radius,\r\n      conf] = coordStr.match(patternBELL);\r\n\r\n    // Set default value for North America\r\n    if (!directionLon) {\r\n      directionLon = 'W';\r\n    }\r\n\r\n    // Check if real minutes or decimals\r\n    if (minutesLon && minutesLon.length > 2) {\r\n      lon = parseFloat((negativeLon ? negativeLon : '') + degreesLon + '.' + minutesLon);\r\n    } else {\r\n      lon = convertDMSToDD(parseFloat(degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);\r\n    }\r\n\r\n    if (minutesLat && minutesLat.length > 2) {\r\n      lat = parseFloat((negativeLat ? negativeLat : '') + degreesLat + '.' + minutesLat);\r\n    } else {\r\n      lat = convertDMSToDD(parseFloat(degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);\r\n    }\r\n\r\n  } else if (mmRegex.test(coordStr)) {\r\n      [, lon, decimalLon, lat, decimalLat] = coordStr.match(mmPattern);\r\n\r\n      if (decimalLon) {\r\n        lon = parseFloat(lon + '.' + decimalLon);\r\n      }\r\n\r\n      if (decimalLat) {\r\n        lat = parseFloat(lat + '.' + decimalLat);\r\n      }\r\n\r\n  } else {\r\n    return {lonLat: undefined, message: '', radius: undefined, conf: undefined};\r\n  }\r\n\r\n  // Set a negative coordinate for North America zone\r\n  if (lon > 0 && lat > 0) {\r\n    if (lon > lat) {\r\n      lon = -lon;\r\n    } else {\r\n      lat = -lat;\r\n    }\r\n  }\r\n\r\n  // Reverse coordinate to respect lonLat convention\r\n  if (lon < lat) {\r\n    lonLat = [lon, lat] as [number, number];\r\n  } else {\r\n    lonLat = [lat, lon] as [number, number];\r\n  }\r\n\r\n  // Reproject the coordinate if projection parameter have been set and coord is not 4326\r\n  if ((projectionStr !== undefined && projectionStr !== toProjection) || (lonLat[0] > 180 || lonLat[0] < -180)) {\r\n\r\n    const source = projectionStr ? 'EPSG:' + projectionStr : mapProjection;\r\n    const dest = 'EPSG:' + toProjection;\r\n\r\n    try {\r\n      lonLat = olproj.transform(lonLat, source, dest);\r\n    } catch (e) {\r\n      return {lonLat: undefined, message: 'Projection ' + source + ' not supported', radius: undefined, conf: undefined};\r\n    }\r\n  }\r\n\r\n  return {lonLat, message: '', radius: radius ? parseInt(radius, 10) : undefined, conf: conf ? parseInt(conf, 10) : undefined};\r\n}\r\n\r\n/**\r\n * Convert degrees minutes seconds to dd\r\n * @param degrees Degrees\r\n * @param minutes Minutes\r\n * @param seconds Seconds\r\n * @param direction Direction\r\n */\r\nfunction convertDMSToDD(degrees: number, minutes: number, seconds: number, direction: string) {\r\n  minutes = minutes || 0;\r\n  seconds = seconds || 0;\r\n  let dd = degrees + (minutes / 60) + (seconds / 3600);\r\n\r\n  if (direction === 'S' || direction === 'W') {\r\n      dd = -dd;\r\n  } // Don't do anything for N or E\r\n  return dd;\r\n}\r\n\r\n/**\r\n * Return true of two view states are equal.\r\n * @param state1 View state\r\n * @param state2 View state\r\n * @returns True if the view states are equal\r\n */\r\nexport function viewStatesAreEqual(state1: MapViewState, state2: MapViewState): boolean {\r\n  if (state1 === undefined || state2 === undefined) {\r\n    return false;\r\n  }\r\n\r\n  const tolerance = 1 / 10000;\r\n  return state1.zoom === state2.zoom &&\r\n    Math.trunc(state1.center[0] / tolerance) === Math.trunc(state2.center[0] / tolerance) &&\r\n    Math.trunc(state1.center[1] / tolerance) === Math.trunc(state2.center[1] / tolerance);\r\n}\r\n\r\n/**\r\n * Format the scale to a human readable text\r\n * @param Scale of the map\r\n * @returns Human readable scale text\r\n */\r\nexport function formatScale(scale) {\r\n  scale = Math.round(scale);\r\n  if (scale < 10000) { return scale + ''; }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  if (scale < 1000) { return scale + 'K'; }\r\n\r\n  scale = Math.round(scale / 1000);\r\n  return scale + 'M';\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param scale Scale denom\r\n * @param dpi DPI\r\n * @returns Resolution\r\n */\r\nexport function getResolutionFromScale(scale: number, dpi: number = 72): number {\r\n  return scale / (39.37 * dpi);\r\n}\r\n\r\n/**\r\n * Return the resolution from a scale denom\r\n * @param Scale denom\r\n * @returns Resolution\r\n */\r\nexport function getScaleFromResolution(resolution: number, unit: string = 'm', dpi: number = 72): number {\r\n  return resolution * olproj.METERS_PER_UNIT[unit] * 39.37 * dpi;\r\n}\r\n\r\n/**\r\n * Returns true if the CTRL key is pushed during an Ol MapBrowserPointerEvent\r\n * @param event OL MapBrowserPointerEvent\r\n * @returns Whether the CTRL key is pushed\r\n */\r\nexport function ctrlKeyDown(event: OlMapBrowserPointerEvent): boolean {\r\n  const originalEvent = event.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\n/**\r\n * Base map controller\r\n */\r\nexport class MapController {\r\n\r\n  /**\r\n   * OL Map\r\n   */\r\n  protected olMap: OlMap;\r\n\r\n  /**\r\n   * Array of observer keys\r\n   */\r\n  protected observerKeys: string[] = [];\r\n\r\n  /**\r\n   * Return the OL map this controller is bound to\r\n   * @returns OL Map\r\n   */\r\n  getOlMap(): OlMap {\r\n    return this.olMap;\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap !== undefined && this.getOlMap() !== undefined) {\r\n      throw new Error('This controller is already bound to a map.');\r\n    }\r\n\r\n    if (olMap === undefined) {\r\n      this.teardownObservers();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    this.observerKeys.forEach((key: string) => unByKey(key));\r\n    this.observerKeys = [];\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlMapEvent from 'ol/MapEvent';\r\n\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport * as oleasing from 'ol/easing';\r\nimport * as olproj from 'ol/proj';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlView from 'ol/View';\r\n\r\nimport { MapViewAction } from '../map.enums';\r\nimport { MapExtent, MapViewState } from '../map.interface';\r\nimport { getScaleFromResolution, viewStatesAreEqual } from '../map.utils';\r\nimport { MapController } from './controller';\r\n\r\nexport interface MapViewControllerOptions {\r\n  stateHistory: boolean;\r\n}\r\n\r\n/**\r\n * Controller to handle map view interactions\r\n */\r\nexport class MapViewController extends MapController {\r\n\r\n  /**\r\n   * Observable of the current resolution\r\n   */\r\n  resolution$ = new BehaviorSubject<number>(undefined);\r\n\r\n  /**\r\n   * Observable of the current state\r\n   */\r\n  state$ = new BehaviorSubject<MapViewState>(undefined);\r\n\r\n  /**\r\n   * Extent stream\r\n   */\r\n  private extent$ = new Subject<{extent: MapExtent, action: MapViewAction}>();\r\n\r\n  /**\r\n   * Subscription to the movement stream\r\n   */\r\n  private extent$$: Subscription;\r\n\r\n  /**\r\n   * History of states\r\n   */\r\n  private states: MapViewState[] = [];\r\n\r\n  /**\r\n   * Current state index\r\n   */\r\n  private stateIndex: number = 0;\r\n\r\n  /**\r\n   * Whether the view controller should keep the view's state history\r\n   */\r\n  get stateHistory(): boolean {\r\n    return this.options ? this.options.stateHistory === true : false;\r\n  }\r\n\r\n  /**\r\n   * OL View\r\n   */\r\n  get olView(): OlView { return this.olMap.getView(); }\r\n\r\n  constructor(private options?: MapViewControllerOptions) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this controller to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    super.setOlMap(olMap);\r\n    this.setupObservers();\r\n  }\r\n\r\n  /**\r\n   * Observe move moveend and subscribe to the extent stream\r\n   */\r\n  setupObservers() {\r\n    if (this.stateHistory === true) {\r\n      this.observerKeys.push(\r\n        this.olMap.on('moveend', (event: OlMapEvent) => this.onMoveEnd(event))\r\n      );\r\n    }\r\n\r\n    this.extent$$ = this.extent$\r\n      .pipe(debounceTime(25))\r\n      .subscribe((value: {extent: MapExtent, action: MapViewAction}) => {\r\n        this.setExtent(value.extent, value.action);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Teardown any observers\r\n   */\r\n  teardownObservers() {\r\n    super.teardownObservers();\r\n    if (this.extent$$ !== undefined) {\r\n      this.extent$$.unsubscribe();\r\n      this.extent$$ = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the view's OL projection\r\n   * @returns OL projection\r\n   */\r\n  getOlProjection(): OlProjection {\r\n    return this.olView.getProjection();\r\n  }\r\n\r\n  /**\r\n   * Get the current map view center\r\n   * @param projection Output projection\r\n   * @returns Center\r\n   */\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    let center = this.olView.getCenter();\r\n    if (projection && center) {\r\n      center = olproj.transform(center, this.getOlProjection(), projection);\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * Get the current view extent\r\n   * @param projection Output projection\r\n   * @returns Extent\r\n   */\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    let extent = this.olView.calculateExtent(this.olMap.getSize());\r\n    if (projection && extent) {\r\n      extent = olproj.transformExtent(extent, this.getOlProjection(), projection);\r\n    }\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * Get the current scale\r\n   * @param dpi Dot per inches\r\n   * @returns View scale\r\n   */\r\n  getScale(dpi = 72) {\r\n    return getScaleFromResolution(\r\n      this.getResolution(),\r\n      this.getOlProjection().getUnits(),\r\n      dpi\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current resolution\r\n   * @returns Projection denominator\r\n   */\r\n  getResolution(): number {\r\n    return this.olView.getResolution();\r\n  }\r\n\r\n  /**\r\n   * Get the current zoom level\r\n   * @returns Zoom level\r\n   */\r\n  getZoom(): number {\r\n    return Math.round(this.olView.getZoom());\r\n  }\r\n\r\n  /**\r\n   * Zoom in\r\n   */\r\n  zoomIn() {\r\n    this.zoomTo(this.olView.getZoom() + 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom out\r\n   */\r\n  zoomOut() {\r\n    this.zoomTo(this.olView.getZoom() - 1);\r\n  }\r\n\r\n  /**\r\n   * Zoom to specific zoom level\r\n   * @param zoom Zoom level\r\n   */\r\n  zoomTo(zoom: number) {\r\n    this.olView.animate({\r\n      zoom,\r\n      duration: 250,\r\n      easing: oleasing.easeOut\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Move to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to move to\r\n   */\r\n  moveToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({extent, action: MapViewAction.Move});\r\n  }\r\n\r\n  /**\r\n   * Zoom to extent after a short delay (100ms) unless\r\n   * a new movement gets registered in the meantime.\r\n   * @param extent Extent to zoom to\r\n   */\r\n  zoomToExtent(extent: [number, number, number, number]) {\r\n    this.extent$.next({extent, action: MapViewAction.Zoom});\r\n  }\r\n\r\n  /**\r\n   * Return the current view rotation\r\n   * @returns Rotation angle in degrees\r\n   */\r\n  getRotation(): number {\r\n    return this.olView.getRotation();\r\n  }\r\n\r\n  /**\r\n   * Reset the view rotation to 0\r\n   */\r\n  resetRotation() {\r\n    this.olView.animate({rotation: 0});\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a previous state\r\n   * @returns True if the view has a previous state\r\n   */\r\n  hasPreviousState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex > 0;\r\n  }\r\n\r\n  /**\r\n   * Whether the view has a next state\r\n   * @returns True if the view has a next state\r\n   */\r\n  hasNextState(): boolean {\r\n    return this.states.length > 1 && this.stateIndex < this.states.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Restore the previous view state\r\n   */\r\n  previousState() {\r\n    if (this.hasPreviousState()) {\r\n      this.setStateIndex(this.stateIndex - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore the next view state\r\n   */\r\n  nextState() {\r\n    if (this.hasNextState()) {\r\n      this.setStateIndex(this.stateIndex + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the state history\r\n   */\r\n  clearStateHistory() {\r\n    this.states = [];\r\n    this.stateIndex = 0;\r\n  }\r\n\r\n  /**\r\n   * Update the the view to it's intial state\r\n   */\r\n  setInitialState() {\r\n    if (this.states.length > 0) {\r\n      this.setStateIndex(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move to the extent retrieved from the stream\r\n   * @param extent Extent\r\n   * @param action Either zoom or move\r\n   */\r\n  private setExtent(extent: MapExtent, action: MapViewAction) {\r\n    const olView = this.olView;\r\n    if (action === MapViewAction.Zoom) {\r\n      olView.fit(extent, {maxZoom: 17});\r\n    } else if (action === MapViewAction.Move) {\r\n      olView.fit(extent, {maxZoom: olView.getZoom()});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the view state index\r\n   * @param index State index\r\n   */\r\n  private setStateIndex(index: number) {\r\n    this.stateIndex = index;\r\n    this.setState(this.states[index]);\r\n  }\r\n\r\n  /**\r\n   * Set the view state\r\n   * @param state View state\r\n   */\r\n  private setState(state: MapViewState) {\r\n    this.olView.animate({\r\n      resolution: state.resolution,\r\n      center: state.center,\r\n      duration: 0\r\n    });\r\n  }\r\n\r\n  /**\r\n   * On move end, get the view state and record it.\r\n   * @param event Map event\r\n   */\r\n  private onMoveEnd(event: OlMapEvent) {\r\n    const resolution = this.getResolution();\r\n    if (this.resolution$.value !== resolution) {\r\n      this.resolution$.next(resolution);\r\n    }\r\n\r\n    const state = {\r\n      resolution,\r\n      center: this.getCenter(),\r\n      zoom: this.getZoom()\r\n    };\r\n\r\n    if (this.stateHistory === true) {\r\n      const stateIndex = this.stateIndex;\r\n      const stateAtIndex = this.states.length === 0 ? undefined : this.states[stateIndex];\r\n      if (!viewStatesAreEqual(state, stateAtIndex)) {\r\n        this.states = this.states.slice(0, stateIndex + 1).concat([state]);\r\n        this.stateIndex = this.states.length - 1;\r\n      }\r\n    }\r\n\r\n    this.state$.next(state);\r\n  }\r\n}\r\n","import olMap from 'ol/Map';\r\nimport olView from 'ol/View';\r\nimport olFeature from 'ol/Feature';\r\nimport olGeolocation from 'ol/Geolocation';\r\nimport olControlAttribution from 'ol/control/Attribution';\r\nimport olControlScaleLine from 'ol/control/ScaleLine';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport olCircle from 'ol/geom/Circle';\r\n\r\nimport proj4 from 'proj4';\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\n\r\nimport { Layer } from '../../layer/shared/layers';\r\nimport { Overlay } from '../../overlay/shared/overlay';\r\n\r\nimport { LayerWatcher } from '../utils/layer-watcher';\r\nimport {\r\n  MapViewOptions,\r\n  MapOptions,\r\n  MapAttributionOptions,\r\n  MapScaleLineOptions,\r\n  MapExtent\r\n} from './map.interface';\r\nimport { MapViewController } from './controllers/view';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\n\r\n// TODO: This class is messy. Clearly define it's scope and the map browser's.\r\n// Move some stuff into controllers.\r\nexport class IgoMap {\r\n  public ol: olMap;\r\n  public layers$ = new BehaviorSubject<Layer[]>([]);\r\n  public status$: Subject<SubjectStatus>;\r\n  public geolocation$ = new BehaviorSubject<olGeolocation>(undefined);\r\n  public geolocationFeature: olFeature;\r\n  public bufferGeom: olCircle;\r\n  public bufferFeature: olFeature;\r\n  public buffer: Overlay;\r\n  public overlay: Overlay;\r\n  public viewController: MapViewController;\r\n\r\n  public bufferDataSource: FeatureDataSource;\r\n\r\n  private layerWatcher: LayerWatcher;\r\n  private geolocation: olGeolocation;\r\n  private geolocation$$: Subscription;\r\n\r\n  private options: MapOptions;\r\n  private defaultOptions: Partial<MapOptions> = {\r\n    controls: { attribution: false }\r\n  };\r\n\r\n  get layers(): Layer[] {\r\n    return this.layers$.value;\r\n  }\r\n\r\n  get projection(): string {\r\n    return this.viewController.getOlProjection().getCode();\r\n  }\r\n\r\n  constructor(options?: MapOptions) {\r\n    this.options = Object.assign({}, this.defaultOptions, options);\r\n    this.layerWatcher = new LayerWatcher();\r\n    this.status$ = this.layerWatcher.status$;\r\n    olproj4.register(proj4);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    const controls = [];\r\n    if (this.options.controls) {\r\n      if (this.options.controls.attribution) {\r\n        const attributionOpt = (this.options.controls.attribution === true\r\n          ? {}\r\n          : this.options.controls.attribution) as MapAttributionOptions;\r\n        controls.push(new olControlAttribution(attributionOpt));\r\n      }\r\n      if (this.options.controls.scaleLine) {\r\n        const scaleLineOpt = (this.options.controls.scaleLine === true\r\n          ? {}\r\n          : this.options.controls.scaleLine) as MapScaleLineOptions;\r\n        controls.push(new olControlScaleLine(scaleLineOpt));\r\n      }\r\n    }\r\n    let interactions = {};\r\n    if (this.options.interactions === false) {\r\n      interactions = {\r\n        altShiftDragRotate: false,\r\n        doubleClickZoom: false,\r\n        keyboard: false,\r\n        mouseWheelZoom: false,\r\n        shiftDragZoom: false,\r\n        dragPan: false,\r\n        pinchRotate: false,\r\n        pinchZoom: false\r\n      };\r\n    }\r\n\r\n    this.ol = new olMap({\r\n      interactions: olinteraction.defaults(interactions),\r\n      controls\r\n    });\r\n\r\n    this.setView(this.options.view || {});\r\n    this.viewController = new MapViewController({\r\n      stateHistory: true\r\n    });\r\n    this.viewController.setOlMap(this.ol);\r\n    this.overlay = new Overlay(this);\r\n    this.buffer = new Overlay(this);\r\n  }\r\n\r\n  setTarget(id: string) {\r\n    this.ol.setTarget(id);\r\n    if (id !== undefined) {\r\n      this.layerWatcher.subscribe(() => {}, null);\r\n    } else {\r\n      this.layerWatcher.unsubscribe();\r\n    }\r\n  }\r\n\r\n  updateView(options: MapViewOptions) {\r\n    const currentView = this.ol.getView();\r\n    const viewOptions = Object.assign(\r\n      {\r\n        zoom: currentView.getZoom()\r\n      },\r\n      currentView.getProperties()\r\n    );\r\n\r\n    this.setView(Object.assign(viewOptions, options));\r\n  }\r\n\r\n  /**\r\n   * Set the map view\r\n   * @param options Map view options\r\n   */\r\n  setView(options: MapViewOptions) {\r\n    if (this.viewController !== undefined) {\r\n      this.viewController.clearStateHistory();\r\n    }\r\n\r\n    const view = new olView(options);\r\n    this.ol.setView(view);\r\n\r\n    this.unsubscribeGeolocate();\r\n    if (options) {\r\n      if (options.center) {\r\n        const projection = view.getProjection().getCode();\r\n        const center = olproj.fromLonLat(options.center, projection);\r\n        view.setCenter(center);\r\n      }\r\n\r\n      if (options.geolocate) {\r\n        this.geolocate(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getCenter(projection?: string | OlProjection): [number, number] {\r\n    return this.viewController.getCenter();\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getExtent(projection?: string | OlProjection): MapExtent {\r\n    return this.viewController.getExtent();\r\n  }\r\n\r\n  // TODO: Move to ViewController and update every place it's used\r\n  getZoom(): number {\r\n    return this.viewController.getZoom();\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (!baseLayer) {\r\n      return;\r\n    }\r\n\r\n    for (const bl of this.getBaseLayers()) {\r\n      bl.visible = false;\r\n    }\r\n\r\n    baseLayer.visible = true;\r\n  }\r\n\r\n  getBaseLayers(): Layer[] {\r\n    return this.layers.filter((layer: Layer) => layer.baseLayer === true);\r\n  }\r\n\r\n  getLayerById(id: string): Layer {\r\n    return this.layers.find((layer: Layer) => layer.id && layer.id === id);\r\n  }\r\n\r\n  getLayerByAlias(alias: string): Layer {\r\n    return this.layers.find((layer: Layer) => layer.alias && layer.alias === alias);\r\n  }\r\n\r\n  /**\r\n   * Add a single layer\r\n   * @param layer Layer to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayer(layer: Layer, push = true) {\r\n    this.addLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add many layers\r\n   * @param layers Layers to add\r\n   * @param push DEPRECATED\r\n   */\r\n  addLayers(layers: Layer[], push = true) {\r\n    const addedLayers = layers\r\n      .map((layer: Layer) => this.doAddLayer(layer))\r\n      .filter((layer: Layer | undefined) => layer !== undefined);\r\n    this.setLayers([].concat(this.layers, addedLayers));\r\n  }\r\n\r\n  /**\r\n   * Remove a single layer\r\n   * @param layer Layer to remove\r\n   */\r\n  removeLayer(layer: Layer) {\r\n    this.removeLayers([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove many layers\r\n   * @param layers Layers to remove\r\n   */\r\n  removeLayers(layers: Layer[]) {\r\n    const newLayers = this.layers$.value.slice(0);\r\n    const layersToRemove = [];\r\n    layers.forEach((layer: Layer) => {\r\n      const index = this.getLayerIndex(layer);\r\n      if (index >= 0) {\r\n        layersToRemove.push(layer);\r\n        newLayers.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    layersToRemove.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.setLayers(newLayers);\r\n  }\r\n\r\n  /**\r\n   * Remove all layers\r\n   */\r\n  removeAllLayers() {\r\n    this.layers.forEach((layer: Layer) => this.doRemoveLayer(layer));\r\n    this.layers$.next([]);\r\n  }\r\n\r\n  raiseLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index > 0) {\r\n      this.moveLayer(layer, index, index - 1);\r\n    }\r\n  }\r\n\r\n  lowerLayer(layer: Layer) {\r\n    const index = this.getLayerIndex(layer);\r\n    if (index < this.layers.length - 1) {\r\n      this.moveLayer(layer, index, index + 1);\r\n    }\r\n  }\r\n\r\n  moveLayer(layer: Layer, from: number, to: number) {\r\n    const layerTo = this.layers[to];\r\n    const zIndexTo = layerTo.zIndex;\r\n    const zIndexFrom = layer.zIndex;\r\n\r\n    if (zIndexTo < 10) {\r\n      return;\r\n    }\r\n\r\n    layer.zIndex = zIndexTo;\r\n    layerTo.zIndex = zIndexFrom;\r\n\r\n    this.layers[to] = layer;\r\n    this.layers[from] = layerTo;\r\n    this.layers$.next(this.layers.slice(0));\r\n  }\r\n\r\n  /**\r\n   * Add a layer to the OL map and start watching. If the layer is already\r\n   * added to this map, make it visible but don't add it one again.\r\n   * @param layer Layer\r\n   * @returns The layer added, if any\r\n   */\r\n  private doAddLayer(layer: Layer) {\r\n    if (layer.baseLayer && layer.visible) {\r\n      this.changeBaseLayer(layer);\r\n    }\r\n\r\n    const existingLayer = this.getLayerById(layer.id);\r\n    if (existingLayer !== undefined) {\r\n      existingLayer.visible = true;\r\n      return;\r\n    }\r\n\r\n    if (layer.zIndex === undefined || layer.zIndex === 0) {\r\n      const offset = layer.baseLayer ? 1 : 10;\r\n      layer.zIndex = this.layers.length + offset;\r\n    }\r\n\r\n    layer.setMap(this);\r\n    this.layerWatcher.watchLayer(layer);\r\n    this.ol.addLayer(layer.ol);\r\n\r\n    return layer;\r\n  }\r\n\r\n  /**\r\n   * Remove a layer from the OL map and stop watching\r\n   * @param layer Layer\r\n   */\r\n  private doRemoveLayer(layer: Layer) {\r\n    this.layerWatcher.unwatchLayer(layer);\r\n    this.ol.removeLayer(layer.ol);\r\n    layer.setMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Update the layers observable\r\n   * @param layers Layers\r\n   */\r\n  private setLayers(layers: Layer[]) {\r\n    this.layers$.next(this.sortLayersByZIndex(layers).slice(0));\r\n  }\r\n\r\n  /**\r\n   * Sort layers by descending zIndex\r\n   * @param layers Array of layers\r\n   * @returns The original array, sorted by zIndex\r\n   */\r\n  private sortLayersByZIndex(layers: Layer[]) {\r\n    // Sort by descending zIndex\r\n    return layers.sort((layer1: Layer, layer2: Layer) => layer2.zIndex - layer1.zIndex);\r\n  }\r\n\r\n  /**\r\n   * Get layer index in the map's inenr array of layers\r\n   * @param layer Layer\r\n   * @returns The layer index\r\n   */\r\n  private getLayerIndex(layer: Layer) {\r\n    return this.layers.findIndex((_layer: Layer) => _layer === layer);\r\n  }\r\n\r\n  // TODO: Create a GeolocationController with everything below\r\n  geolocate(track = false) {\r\n    let first = true;\r\n    if (this.geolocation$$) {\r\n      track = this.geolocation.getTracking();\r\n      this.unsubscribeGeolocate();\r\n    }\r\n    this.startGeolocation();\r\n\r\n    this.geolocation$$ = this.geolocation$.subscribe(geolocation => {\r\n      if (!geolocation) {\r\n        return;\r\n      }\r\n      const accuracy = geolocation.getAccuracy();\r\n      if (accuracy < 4140000) {\r\n        const geometry = geolocation.getAccuracyGeometry();\r\n        const extent = geometry.getExtent();\r\n        if (\r\n          this.geolocationFeature &&\r\n          this.overlay.dataSource.ol.getFeatureById(\r\n            this.geolocationFeature.getId()\r\n          )\r\n        ) {\r\n          this.overlay.dataSource.ol.removeFeature(this.geolocationFeature);\r\n        }\r\n        this.geolocationFeature = new olFeature({ geometry });\r\n        this.geolocationFeature.setId('geolocationFeature');\r\n        this.overlay.addOlFeature(this.geolocationFeature);\r\n\r\n        if (this.ol.getView().options_.buffer) {\r\n          const bufferRadius = this.ol.getView().options_.buffer.bufferRadius;\r\n          const coordinates = geolocation.getPosition();\r\n          this.bufferGeom = new olCircle(coordinates, bufferRadius);\r\n          const bufferStroke = this.ol.getView().options_.buffer.bufferStroke;\r\n          const bufferFill = this.ol.getView().options_.buffer.bufferFill;\r\n\r\n          let bufferText;\r\n          if (this.ol.getView().options_.buffer.showBufferRadius) {\r\n            bufferText = bufferRadius.toString() + 'm';\r\n          } else {\r\n            bufferText = '';\r\n          }\r\n\r\n          this.bufferFeature = new olFeature(this.bufferGeom);\r\n          this.bufferFeature.setId('bufferFeature');\r\n          this.bufferFeature.set('bufferStroke', bufferStroke);\r\n          this.bufferFeature.set('bufferFill', bufferFill);\r\n          this.bufferFeature.set('bufferText', bufferText);\r\n          this.buffer.addOlFeature(this.bufferFeature);\r\n        }\r\n\r\n        if (first) {\r\n          this.viewController.zoomToExtent(extent);\r\n        }\r\n      } else if (first) {\r\n        const view = this.ol.getView();\r\n        const coordinates = geolocation.getPosition();\r\n        view.setCenter(coordinates);\r\n        view.setZoom(14);\r\n      }\r\n      if (track) {\r\n        this.unsubscribeGeolocate();\r\n      }\r\n      first = false;\r\n    });\r\n  }\r\n\r\n  unsubscribeGeolocate() {\r\n    this.stopGeolocation();\r\n    if (this.geolocation$$) {\r\n      this.geolocation$$.unsubscribe();\r\n      this.geolocation$$ = undefined;\r\n    }\r\n  }\r\n\r\n  private startGeolocation() {\r\n    if (!this.geolocation) {\r\n      this.geolocation = new olGeolocation({\r\n        projection: this.projection,\r\n        tracking: true\r\n      });\r\n\r\n      this.geolocation.on('change', evt => {\r\n        this.geolocation$.next(this.geolocation);\r\n      });\r\n    } else {\r\n      this.geolocation.setTracking(true);\r\n    }\r\n  }\r\n\r\n  private stopGeolocation() {\r\n    if (this.geolocation) {\r\n      this.geolocation.setTracking(false);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { ActivityService } from '@igo2/core';\r\n\r\nimport { IgoMap, MapViewOptions } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-map-browser',\r\n  templateUrl: './map-browser.component.html',\r\n  styleUrls: ['./map-browser.component.scss']\r\n})\r\nexport class MapBrowserComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  private activityId: string;\r\n  private status$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get view(): MapViewOptions { return this._view; }\r\n  set view(value: MapViewOptions) {\r\n    this._view = value;\r\n    if (this.map !== undefined) {\r\n      this.map.updateView(value);\r\n    }\r\n  }\r\n  private _view: MapViewOptions;\r\n\r\n  public id = `igo-map-target-${new Date().getTime()}`;\r\n\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  ngOnInit() {\r\n    this.status$$ = this.map.status$.subscribe(status =>\r\n      this.handleStatusChange(status)\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.map.setTarget(this.id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.setTarget(undefined);\r\n    this.activityService.unregister(this.activityId);\r\n    this.status$$.unsubscribe();\r\n  }\r\n\r\n  private handleStatusChange(status: SubjectStatus) {\r\n    if (status === SubjectStatus.Working && this.activityId === undefined) {\r\n      this.activityId = this.activityService.register();\r\n    } else if (status === SubjectStatus.Done && this.activityId !== undefined) {\r\n      this.activityService.unregister(this.activityId);\r\n      this.activityId = undefined;\r\n    }\r\n  }\r\n}\r\n","import { Directive, AfterViewInit } from '@angular/core';\r\nimport { IgoMap } from './map';\r\nimport { MapBrowserComponent } from '../map-browser/map-browser.component';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { MVTDataSourceOptions, XYZDataSourceOptions, FeatureDataSourceOptions } from '../../datasource';\r\n\r\n@Directive({\r\n    selector: '[igoMapOffline]'\r\n  })\r\nexport class MapOfflineDirective implements AfterViewInit {\r\n\r\n  private context$$: Subscription;\r\n  private state: ConnectionState;\r\n  private component: MapBrowserComponent;\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    component: MapBrowserComponent,\r\n    private networkService: NetworkService\r\n    ) {\r\n      this.component = component;\r\n    }\r\n\r\n  ngAfterViewInit() {\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      this.state = state;\r\n      this.changeLayer();\r\n    });\r\n\r\n    this.map.layers$.subscribe((layers: Layer[]) => {\r\n      this.changeLayer();\r\n    });\r\n  }\r\n\r\n  private changeLayer() {\r\n    let sourceOptions;\r\n    const layerList = this.map.layers$.value;\r\n    layerList.forEach(layer => {\r\n      if (layer.options.sourceOptions.type === 'mvt') {\r\n        sourceOptions = (layer.options.sourceOptions as MVTDataSourceOptions);\r\n        layer.ol.getSource().clear();\r\n      } else if (layer.options.sourceOptions.type === 'xyz') {\r\n        sourceOptions = (layer.options.sourceOptions as XYZDataSourceOptions);\r\n      } else if (layer.options.sourceOptions.type === 'vector') {\r\n        sourceOptions = (layer.options.sourceOptions as FeatureDataSourceOptions);\r\n      } else {\r\n        if (this.state.connection === false) {\r\n          layer.ol.setMaxResolution(0);\r\n          return;\r\n        } else if (this.state.connection === true) {\r\n          layer.ol.setMaxResolution(Infinity);\r\n          return;\r\n        }\r\n      }\r\n      if (sourceOptions.pathOffline  &&\r\n        this.state.connection === false) {\r\n          if (sourceOptions.type === 'vector') {\r\n            return;\r\n          }\r\n          layer.ol.getSource().setUrl(sourceOptions.pathOffline);\r\n      } else if (sourceOptions.pathOffline &&\r\n        this.state.connection === true) {\r\n          if (sourceOptions.type === 'vector') {\r\n            return;\r\n          }\r\n          layer.ol.getSource().setUrl(sourceOptions.url);\r\n      } else {\r\n        if (this.state.connection === false) {\r\n          layer.ol.setMaxResolution(0);\r\n        } else if (this.state.connection === true) {\r\n          layer.ol.setMaxResolution(Infinity);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport proj4 from 'proj4';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olproj4 from 'ol/proj/proj4';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Projection } from './projection.interfaces';\r\n\r\n/**\r\n * When injected, this service automatically registers and\r\n * projection defined in the application config. A custom projection\r\n * needs to be registered to be usable by OL.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectionService {\r\n\r\n  constructor(private config: ConfigService) {\r\n    const projections = this.config.getConfig('projections') || [];\r\n    projections.forEach((projection: Projection) => {\r\n      this.registerProjection(projection);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Define a proj4 projection and register it in OL\r\n   * @param projection Projection\r\n   */\r\n  registerProjection(projection: Projection) {\r\n    proj4.defs(projection.code, projection.def);\r\n    olproj4.register(proj4);\r\n    olproj.get(projection.code).setExtent(projection.extent);\r\n  }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-zoom-button',\r\n  templateUrl: './zoom-button.component.html',\r\n  styleUrls: ['./zoom-button.component.scss']\r\n})\r\nexport class ZoomButtonComponent {\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string;\r\n\r\n  get zoom(): number { return this.map.viewController.getZoom(); }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-geolocate-button',\r\n  templateUrl: './geolocate-button.component.html',\r\n  styleUrls: ['./geolocate-button.component.scss']\r\n})\r\nexport class GeolocateButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  constructor() {}\r\n}\r\n","import {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationTriggerMetadata\r\n} from '@angular/animations';\r\n\r\nexport function baseLayersSwitcherSlideInOut(): AnimationTriggerMetadata {\r\n  return trigger('baseLayerSwitcherState', [\r\n    state(\r\n      'collapseIcon',\r\n      style({\r\n        height: '40px',\r\n        width: '40px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'collapseMap',\r\n      style({\r\n        height: '85px',\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    state(\r\n      'expand',\r\n      style({\r\n        overflow: 'hidden'\r\n      })\r\n    ),\r\n    transition('collapse => expand', animate('200ms')),\r\n    transition('expand => collapse', animate('200ms'))\r\n  ]);\r\n}\r\n","import { Component, Input, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MediaService, Media } from '@igo2/core';\r\nimport { Layer } from '../../layer';\r\nimport { IgoMap } from '../shared';\r\nimport { baseLayersSwitcherSlideInOut } from './baselayers-switcher.animation';\r\n\r\n@Component({\r\n  selector: 'igo-baselayers-switcher',\r\n  templateUrl: './baselayers-switcher.component.html',\r\n  styleUrls: ['./baselayers-switcher.component.scss'],\r\n  animations: [baseLayersSwitcherSlideInOut()]\r\n})\r\nexport class BaseLayersSwitcherComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get useStaticIcon(): boolean {\r\n    return this._useStaticIcon;\r\n  }\r\n  set useStaticIcon(value: boolean) {\r\n    this._useStaticIcon = value;\r\n  }\r\n  private _useStaticIcon: boolean;\r\n\r\n  public _baseLayers: Layer[] = [];\r\n  public expand = false;\r\n  public showButton = true;\r\n\r\n  private layers$$: Subscription;\r\n\r\n  constructor(private mediaService: MediaService) {\r\n    const media = this.mediaService.media$.value;\r\n    if (media === Media.Mobile && this.useStaticIcon === undefined) {\r\n      this.useStaticIcon = true;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(arrayLayers => {\r\n      this._baseLayers = arrayLayers.filter(l => l.baseLayer);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  collapseOrExpand() {\r\n    if (this.baseLayers.length > 1 || this.useStaticIcon) {\r\n      this.expand = !this.expand;\r\n    } else {\r\n      this.expand = false;\r\n    }\r\n  }\r\n\r\n  get baseLayers(): Layer[] {\r\n    const mapResolution = this.map.viewController.getResolution();\r\n\r\n    const bl = this._baseLayers.filter(l => {\r\n      return (\r\n        (!l.options.maxResolution ||\r\n          mapResolution <= l.options.maxResolution) &&\r\n        (!l.options.minResolution || mapResolution >= l.options.minResolution)\r\n      );\r\n    });\r\n\r\n    const blHidden = bl.filter(l => !l.visible);\r\n    return blHidden.length + 1 === bl.length ? blHidden : bl;\r\n  }\r\n}\r\n","import { Component, Input, AfterViewInit, OnDestroy, ApplicationRef } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-mini-basemap',\r\n  templateUrl: './mini-basemap.component.html',\r\n  styleUrls: ['./mini-basemap.component.scss']\r\n})\r\nexport class MiniBaseMapComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n    this.handleMoveEnd();\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get baseLayer(): Layer {\r\n    return this._baseLayer;\r\n  }\r\n  set baseLayer(value: Layer) {\r\n    this._baseLayer = value;\r\n    this.handleBaseLayerChanged(value);\r\n  }\r\n  private _baseLayer: Layer;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  @Input()\r\n  get display(): boolean {\r\n    return this._display;\r\n  }\r\n  set display(value: boolean) {\r\n    this._display = value;\r\n  }\r\n  private _display: boolean;\r\n\r\n  public basemap = new IgoMap({\r\n    controls: {},\r\n    interactions: false\r\n  });\r\n\r\n  constructor(private layerService: LayerService, private appRef: ApplicationRef) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.map.ol.on('moveend', () => this.handleMoveEnd());\r\n    this.handleMoveEnd();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.map.ol.un('moveend', () => this.handleMoveEnd());\r\n  }\r\n\r\n  changeBaseLayer(baseLayer: Layer) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.map.changeBaseLayer(baseLayer);\r\n    this.appRef.tick();\r\n  }\r\n\r\n  private handleMoveEnd() {\r\n    this.basemap.ol.setView(this.map.ol.getView());\r\n  }\r\n\r\n  private handleBaseLayerChanged(baselayer: Layer) {\r\n    this.basemap.removeAllLayers();\r\n\r\n    const options: any = Object.assign(\r\n      Object.create(baselayer.options),\r\n      baselayer.options\r\n    );\r\n    options.visible = true;\r\n\r\n    const layer = this.layerService.createLayer(options);\r\n    this.basemap.addLayer(layer);\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-rotation-button',\r\n  templateUrl: './rotation-button.component.html',\r\n  styleUrls: ['./rotation-button.component.scss']\r\n})\r\nexport class RotationButtonComponent {\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get showIfNoRotation(): boolean {\r\n    return this._showIfNoRotation;\r\n  }\r\n  set showIfNoRotation(value: boolean) {\r\n    this._showIfNoRotation = value;\r\n  }\r\n  private _showIfNoRotation: boolean;\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color: string;\r\n\r\n  get rotated(): boolean {\r\n    return this.map.viewController.getRotation() !== 0;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  rotationStyle(radians): {} {\r\n    const rotation = 'rotate(' + radians + 'rad)';\r\n    return {\r\n      transform: rotation\r\n    };\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport * as olproj from 'ol/proj';\r\n\r\nexport class EsriStyleGenerator {\r\n  public _converters: any;\r\n  public _renderers: any;\r\n\r\n  constructor() {\r\n    this._converters = {};\r\n    this._converters.esriPMS = EsriStyleGenerator._convertEsriPMS;\r\n    this._converters.esriSFS = EsriStyleGenerator._convertEsriSFS;\r\n    this._converters.esriSLS = EsriStyleGenerator._convertEsriSLS;\r\n    this._converters.esriSMS = EsriStyleGenerator._convertEsriSMS;\r\n    this._converters.esriTS = EsriStyleGenerator._convertEsriTS;\r\n    this._renderers = {};\r\n    this._renderers.uniqueValue = this._renderUniqueValue;\r\n    this._renderers.simple = this._renderSimple;\r\n    this._renderers.classBreaks = this._renderClassBreaks;\r\n  }\r\n  static _convertPointToPixel(point) {\r\n    return point / 0.75;\r\n  }\r\n  static _transformColor(color): [number, number, number, number] {\r\n    // alpha channel is different, runs from 0-255 but in ol3 from 0-1\r\n    return [color[0], color[1], color[2], color[3] / 255];\r\n  }\r\n\r\n  static _getResolutionForScale(scale, units) {\r\n    const dpi = 25.4 / 0.28;\r\n    const mpu = olproj.METERS_PER_UNIT[units];\r\n    const inchesPerMeter = 39.37;\r\n    return parseFloat(scale) / (mpu * inchesPerMeter * dpi);\r\n  }\r\n\r\n  /* convert an Esri Text Symbol */\r\n  static _convertEsriTS(symbol) {\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    const text = symbol.text !== undefined ? symbol.text : undefined;\r\n    return new olstyle.Style({\r\n      text: new olstyle.Text({\r\n        fill: new olstyle.Fill({\r\n          color: EsriStyleGenerator._transformColor(symbol.color)\r\n        }),\r\n        font:\r\n          symbol.font.style +\r\n          ' ' +\r\n          symbol.font.weight +\r\n          ' ' +\r\n          symbol.font.size +\r\n          ' px ' +\r\n          symbol.font.family,\r\n        textBaseline: symbol.verticalAlignment,\r\n        textAlign: symbol.horizontalAlignment,\r\n        offsetX: EsriStyleGenerator._convertPointToPixel(symbol.xoffset),\r\n        offsetY: EsriStyleGenerator._convertPointToPixel(symbol.yoffset),\r\n        rotation,\r\n        text\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Picture Marker Symbol */\r\n  static _convertEsriPMS(symbol) {\r\n    const src = 'data:' + symbol.contentType + ';base64, ' + symbol.imageData;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n\r\n    return new olstyle.Style({\r\n      image: new olstyle.Icon({\r\n        src,\r\n        rotation\r\n      })\r\n    });\r\n  }\r\n  /* convert an Esri Simple Fill Symbol */\r\n  static _convertEsriSFS(symbol) {\r\n    // there is no support in openlayers currently for fill patterns, so style is not interpreted\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    return new olstyle.Style({\r\n      fill,\r\n      stroke\r\n    });\r\n  }\r\n  static _convertOutline(outline) {\r\n    let lineDash;\r\n    const color = EsriStyleGenerator._transformColor(outline.color);\r\n    if (outline.style === 'esriSLSDash') {\r\n      lineDash = [5];\r\n    } else if (outline.style === 'esriSLSDashDot') {\r\n      lineDash = [5, 5, 1, 2];\r\n    } else if (outline.style === 'esriSLSDashDotDot') {\r\n      lineDash = [5, 5, 1, 2, 1, 2];\r\n    } else if (outline.style === 'esriSLSDot') {\r\n      lineDash = [1, 2];\r\n    } else if (outline.style === 'esriSLSNull') {\r\n      // line not visible, make color fully transparent\r\n      color[3] = 0;\r\n    }\r\n    return new olstyle.Stroke({\r\n      color,\r\n      lineDash,\r\n      width: EsriStyleGenerator._convertPointToPixel(outline.width)\r\n    });\r\n  }\r\n  /* convert an Esri Simple Line Symbol */\r\n  static _convertEsriSLS(symbol) {\r\n    return new olstyle.Style({\r\n      stroke: EsriStyleGenerator._convertOutline(symbol)\r\n    });\r\n  }\r\n  static _transformAngle(angle) {\r\n    if (angle === 0 || angle === undefined) {\r\n      return undefined;\r\n    }\r\n    const normalRad = (angle * Math.PI) / 180;\r\n    const ol3Rad = -normalRad + Math.PI / 2;\r\n    if (ol3Rad < 0) {\r\n      return 2 * Math.PI + ol3Rad;\r\n    } else {\r\n      return ol3Rad;\r\n    }\r\n  }\r\n  /* convert an Esri Simple Marker Symbol */\r\n  static _convertEsriSMS(symbol) {\r\n    const fill = new olstyle.Fill({\r\n      color: EsriStyleGenerator._transformColor(symbol.color)\r\n    });\r\n    const stroke = symbol.outline\r\n      ? EsriStyleGenerator._convertOutline(symbol.outline)\r\n      : undefined;\r\n    const radius = EsriStyleGenerator._convertPointToPixel(symbol.size) / 2;\r\n    const rotation = EsriStyleGenerator._transformAngle(symbol.angle);\r\n    if (symbol.style === 'esriSMSCircle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.Circle({\r\n          radius,\r\n          fill,\r\n          stroke\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSCross') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSDiamond') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSSquare') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSX') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 4,\r\n          radius,\r\n          radius2: 0,\r\n          angle: Math.PI / 4,\r\n          rotation\r\n        })\r\n      });\r\n    } else if (symbol.style === 'esriSMSTriangle') {\r\n      return new olstyle.Style({\r\n        image: new olstyle.RegularShape({\r\n          fill,\r\n          stroke,\r\n          points: 3,\r\n          radius,\r\n          angle: 0,\r\n          rotation\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  _convertLabelingInfo(labelingInfo, mapUnits) {\r\n    const styles = [];\r\n    for (let i = 0, ii = labelingInfo.length; i < ii; ++i) {\r\n      const labelExpression = labelingInfo[i].labelExpression;\r\n      // only limited support for label expressions\r\n      const field = labelExpression.substr(\r\n        labelExpression.indexOf('[') + 1,\r\n        labelExpression.indexOf(']') - 1\r\n      );\r\n      const symbol = labelingInfo[i].symbol;\r\n      const maxScale = labelingInfo[i].maxScale;\r\n      const minScale = labelingInfo[i].minScale;\r\n      let minResolution = null;\r\n      if (maxScale !== 0) {\r\n        minResolution = EsriStyleGenerator._getResolutionForScale(\r\n          maxScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      let maxResolution = null;\r\n      if (minScale !== 0) {\r\n        maxResolution = EsriStyleGenerator._getResolutionForScale(\r\n          minScale,\r\n          mapUnits\r\n        );\r\n      }\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      styles.push(\r\n        (() => {\r\n          return function(feature, resolution) {\r\n            let visible = true;\r\n            if (this.minResolution !== null && this.maxResolution !== null) {\r\n              visible =\r\n                resolution < this.maxResolution &&\r\n                resolution >= this.minResolution;\r\n            } else if (this.minResolution !== null) {\r\n              visible = resolution >= this.minResolution;\r\n            } else if (this.maxResolution !== null) {\r\n              visible = resolution < this.maxResolution;\r\n            }\r\n            if (visible) {\r\n              const value = feature.get(this.field);\r\n              this.style.getText().setText(value);\r\n              return [this.style];\r\n            }\r\n          };\r\n        })().bind({\r\n          minResolution,\r\n          maxResolution,\r\n          field,\r\n          style\r\n        })\r\n      );\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  _renderSimple(renderer) {\r\n    const style = this._converters[renderer.symbol.type].call(\r\n      this,\r\n      renderer.symbol\r\n    );\r\n    return (() => {\r\n      return () => {\r\n        return [style];\r\n      };\r\n    })();\r\n  }\r\n  _renderClassBreaks(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    const defaultStyle = this._converters[defaultSymbol.type].call(\r\n      this,\r\n      defaultSymbol\r\n    );\r\n    const field = renderer.field;\r\n    const classes = [];\r\n    for (let i = 0, ii = renderer.classBreakInfos.length; i < ii; ++i) {\r\n      const classBreakInfo = renderer.classBreakInfos[i];\r\n      let min;\r\n      if (\r\n        classBreakInfo.classMinValue === null ||\r\n        classBreakInfo.classMinValue === undefined\r\n      ) {\r\n        if (i === 0) {\r\n          min = renderer.minValue;\r\n        } else {\r\n          min = renderer.classBreakInfos[i - 1].classMaxValue;\r\n        }\r\n      } else {\r\n        min = classBreakInfo.classMinValue;\r\n      }\r\n      const max = classBreakInfo.classMaxValue;\r\n      const symbol = classBreakInfo.symbol;\r\n      const style = this._converters[symbol.type].call(this, symbol);\r\n      classes.push({ min, max, style });\r\n    }\r\n    return (() => {\r\n      return (feature) => {\r\n        const value = feature.get(field);\r\n        for (let i = 0, ii = classes.length; i < ii; ++i) {\r\n          let condition;\r\n          if (i === 0) {\r\n            condition = value >= classes[i].min && value <= classes[i].max;\r\n          } else {\r\n            condition = value > classes[i].min && value <= classes[i].max;\r\n          }\r\n          if (condition) {\r\n            return [classes[i].style];\r\n          }\r\n        }\r\n        return [defaultStyle];\r\n      };\r\n    })();\r\n  }\r\n  _renderUniqueValue(renderer) {\r\n    const defaultSymbol = renderer.defaultSymbol;\r\n    let defaultStyle = [];\r\n    if (defaultSymbol) {\r\n      defaultStyle = [\r\n        this._converters[defaultSymbol.type].call(this, defaultSymbol)\r\n      ];\r\n    }\r\n    const field = renderer.field1;\r\n    const infos = renderer.uniqueValueInfos;\r\n    const me = this;\r\n    return (() => {\r\n      const hash = {};\r\n      for (let i = 0, ii = infos.length; i < ii; ++i) {\r\n        const info = infos[i];\r\n        const symbol = info.symbol;\r\n        hash[info.value] = [me._converters[symbol.type].call(me, symbol)];\r\n      }\r\n\r\n      return (feature) => {\r\n        const style = hash[feature.get(field)];\r\n        return style ? style : defaultStyle;\r\n      };\r\n    })();\r\n  }\r\n  generateStyle(layerInfo, mapUnits) {\r\n    const drawingInfo = layerInfo.drawingInfo;\r\n    let styleFunctions = [];\r\n    const drawingInfoStyle = this._renderers[drawingInfo.renderer.type].call(\r\n      this,\r\n      drawingInfo.renderer\r\n    );\r\n    if (drawingInfoStyle !== undefined) {\r\n      styleFunctions.push(drawingInfoStyle);\r\n    }\r\n    if (layerInfo.labelingInfo) {\r\n      const labelingInfoStyleFunctions = this._convertLabelingInfo(\r\n        layerInfo.labelingInfo,\r\n        mapUnits\r\n      );\r\n      styleFunctions = styleFunctions.concat(labelingInfoStyleFunctions);\r\n    }\r\n    if (styleFunctions.length === 1) {\r\n      return styleFunctions[0];\r\n    } else {\r\n      return (() => {\r\n        return (feature, resolution) => {\r\n          let styles = [];\r\n          for (let i = 0, ii = styleFunctions.length; i < ii; ++i) {\r\n            const result = styleFunctions[i].call(null, feature, resolution);\r\n            if (result) {\r\n              styles = styles.concat(result);\r\n            }\r\n          }\r\n          return styles;\r\n        };\r\n      })();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Cacheable } from 'ngx-cacheable';\r\n\r\nimport { WMSCapabilities, WMTSCapabilities } from 'ol/format';\r\nimport { optionsFromCapabilities } from 'ol/source/WMTS.js';\r\nimport olAttribution from 'ol/control/Attribution';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { getResolutionFromScale } from '../../map';\r\nimport { EsriStyleGenerator } from '../utils/esri-style-generator';\r\n\r\nimport {\r\n  WMTSDataSourceOptions,\r\n  WMSDataSourceOptions,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSourceOptions\r\n} from './datasources';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CapabilitiesService {\r\n  private capabilitiesStore: any[] = [];\r\n  private parsers = {\r\n    wms: new WMSCapabilities(),\r\n    wmts: new WMTSCapabilities()\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getWMSOptions(\r\n    baseOptions: WMSDataSourceOptions\r\n  ): Observable<WMSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = (baseOptions.params as any).version;\r\n\r\n    return this.getCapabilities('wms', url, version).pipe(\r\n      map((capabilities: any) =>\r\n        this.parseWMSOptions(baseOptions, capabilities)\r\n      )\r\n    );\r\n  }\r\n\r\n  getWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSourceOptions> {\r\n    const url = baseOptions.url;\r\n    const version = baseOptions.version;\r\n\r\n    const options = this.getCapabilities('wmts', url, version).pipe(\r\n      map((capabilities: any) =>\r\n        this.parseWMTSOptions(baseOptions, capabilities)\r\n      )\r\n    );\r\n\r\n    return options;\r\n  }\r\n\r\n  getCartoOptions(\r\n    baseOptions: CartoDataSourceOptions\r\n  ): Observable<CartoDataSourceOptions> {\r\n    const baseUrl =\r\n      'https://' +\r\n      baseOptions.account +\r\n      '.carto.com/api/v2/viz/' +\r\n      baseOptions.mapId +\r\n      '/viz.json';\r\n\r\n    return this.http\r\n      .jsonp(baseUrl, 'callback')\r\n      .pipe(\r\n        map((cartoOptions: any) =>\r\n          this.parseCartoOptions(baseOptions, cartoOptions)\r\n        )\r\n      );\r\n  }\r\n\r\n  getArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const modifiedUrl = baseOptions.url.replace('FeatureServer', 'MapServer');\r\n    const legendUrl = modifiedUrl + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legend = this.http.get(legendUrl).pipe(\r\n      map((res: any) => res),\r\n      catchError(err => {\r\n        console.log('No legend associated with this Feature Service');\r\n        return of(err);\r\n      })\r\n    );\r\n    return forkJoin([arcgisOptions, legend]).pipe(\r\n      map((res: any) => {\r\n        return this.parseArcgisOptions(baseOptions, res[0], res[1]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSourceOptions> {\r\n    const baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';\r\n    const legendUrl = baseOptions.url + '/legend?f=json';\r\n    const arcgisOptions = this.http.get(baseUrl);\r\n    const legendInfo = this.http.get(legendUrl);\r\n\r\n    return forkJoin([arcgisOptions, legendInfo]).pipe(\r\n      map((res: any) =>\r\n        this.parseTileArcgisOptions(baseOptions, res[0], res[1])\r\n      )\r\n    );\r\n  }\r\n\r\n  @Cacheable()\r\n  getCapabilities(\r\n    service: 'wms' | 'wmts',\r\n    baseUrl: string,\r\n    version?: string\r\n  ): Observable<any> {\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        request: 'GetCapabilities',\r\n        service,\r\n        version: version || '1.3.0'\r\n      }\r\n    });\r\n\r\n    const request = this.http.get(baseUrl, {\r\n      params,\r\n      responseType: 'text'\r\n    });\r\n\r\n    return request.pipe(\r\n      map(res => {\r\n        const capabilities = this.parsers[service].read(res);\r\n        return capabilities;\r\n      })\r\n    );\r\n  }\r\n\r\n  private parseWMSOptions(\r\n    baseOptions: WMSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMSDataSourceOptions {\r\n    const layers = (baseOptions.params as any).layers;\r\n    const layer = this.findDataSourceInCapabilities(\r\n      capabilities.Capability.Layer,\r\n      layers\r\n    );\r\n\r\n    if (!layer) {\r\n      return baseOptions;\r\n    }\r\n    const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n    const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n    const keywordList = layer.KeywordList ? layer.KeywordList : undefined;\r\n    const queryable = layer.queryable;\r\n    const timeFilter = this.getTimeFilter(layer);\r\n    const timeFilterable = timeFilter && Object.keys(timeFilter).length > 0;\r\n\r\n    const options: WMSDataSourceOptions = ObjectUtils.removeUndefined({\r\n      _layerOptionsFromCapabilities: {\r\n        title: layer.Title,\r\n        maxResolution:\r\n          getResolutionFromScale(layer.MaxScaleDenominator) || Infinity,\r\n        minResolution:\r\n          getResolutionFromScale(layer.MinScaleDenominator) || 0,\r\n        metadata: {\r\n          url: metadata ? metadata.OnlineResource : undefined,\r\n          extern: metadata ? true : undefined,\r\n          abstract,\r\n          keywordList\r\n        }\r\n      },\r\n      queryable,\r\n      timeFilter: timeFilterable ? timeFilter : undefined,\r\n      timeFilterable: timeFilterable ? true : undefined\r\n    });\r\n\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseWMTSOptions(\r\n    baseOptions: WMTSDataSourceOptions,\r\n    capabilities: any\r\n  ): WMTSDataSourceOptions {\r\n    const options = optionsFromCapabilities(capabilities, baseOptions);\r\n    return Object.assign(options, baseOptions);\r\n  }\r\n\r\n  private parseCartoOptions(\r\n    baseOptions: CartoDataSourceOptions,\r\n    cartoOptions: any\r\n  ): CartoDataSourceOptions {\r\n    const layers = [];\r\n    const params = cartoOptions.layers[1].options.layer_definition;\r\n    params.layers.forEach(element => {\r\n      layers.push({\r\n        type: element.type.toLowerCase(),\r\n        options: element.options,\r\n        legend: element.legend\r\n      });\r\n    });\r\n    const options = ObjectUtils.removeUndefined({\r\n      config: {\r\n        version: params.version,\r\n        layers\r\n      }\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseArcgisOptions(\r\n    baseOptions: ArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend?: any\r\n  ): ArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const styleGenerator = new EsriStyleGenerator();\r\n    const units = arcgisOptions.units === 'esriMeters' ? 'm' : 'degrees';\r\n    const style = styleGenerator.generateStyle(arcgisOptions, units);\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: 'datetime',\r\n        style: 'calendar'\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        legendInfo,\r\n        style,\r\n        timeFilter,\r\n        timeExtent,\r\n        attributions\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private parseTileArcgisOptions(\r\n    baseOptions: TileArcGISRestDataSourceOptions,\r\n    arcgisOptions: any,\r\n    legend: any\r\n  ): TileArcGISRestDataSourceOptions {\r\n    const legendInfo = legend.layers ? legend : undefined;\r\n    const attributions = new olAttribution({\r\n      html: arcgisOptions.copyrightText\r\n    });\r\n    let timeExtent;\r\n    let timeFilter;\r\n    if (arcgisOptions.timeInfo) {\r\n      const time = arcgisOptions.timeInfo.timeExtent;\r\n      timeExtent = time[0] + ',' + time[1];\r\n      const min = new Date();\r\n      min.setTime(time[0]);\r\n      const max = new Date();\r\n      max.setTime(time[1]);\r\n      timeFilter = {\r\n        min: min.toUTCString(),\r\n        max: max.toUTCString(),\r\n        range: true,\r\n        type: 'datetime',\r\n        style: 'calendar'\r\n      };\r\n    }\r\n    const params = Object.assign(\r\n      {},\r\n      {\r\n        layers: 'show:' + baseOptions.layer,\r\n        time: timeExtent\r\n      }\r\n    );\r\n    const options = ObjectUtils.removeUndefined({\r\n      params,\r\n      legendInfo,\r\n      timeFilter,\r\n      attributions\r\n    });\r\n    return ObjectUtils.mergeDeep(options, baseOptions);\r\n  }\r\n\r\n  private findDataSourceInCapabilities(layerArray, name): any {\r\n    if (Array.isArray(layerArray)) {\r\n      let layer;\r\n      layerArray.find(value => {\r\n        layer = this.findDataSourceInCapabilities(value, name);\r\n        return layer !== undefined;\r\n      }, this);\r\n\r\n      return layer;\r\n    } else if (layerArray.Layer) {\r\n      return this.findDataSourceInCapabilities(layerArray.Layer, name);\r\n    } else {\r\n      if (layerArray.Name && layerArray.Name === name) {\r\n        return layerArray;\r\n      }\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getTimeFilter(layer) {\r\n    let dimension;\r\n\r\n    if (layer.Dimension) {\r\n      const timeFilter: any = {};\r\n      dimension = layer.Dimension[0];\r\n\r\n      if (dimension.values) {\r\n        const minMaxDim = dimension.values.split('/');\r\n        timeFilter.min = minMaxDim[0] !== undefined ? minMaxDim[0] : undefined;\r\n        timeFilter.max = minMaxDim[1] !== undefined ? minMaxDim[1] : undefined;\r\n        timeFilter.step = minMaxDim[2] !== undefined ? minMaxDim[2] : undefined;\r\n      }\r\n\r\n      if (dimension.default) {\r\n        timeFilter.value = dimension.default;\r\n      }\r\n      return timeFilter;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { CapabilitiesService } from './capabilities.service';\r\nimport { WFSService } from './datasources/wfs.service';\r\nimport {\r\n  DataSource,\r\n  OSMDataSource,\r\n  OSMDataSourceOptions,\r\n  FeatureDataSource,\r\n  FeatureDataSourceOptions,\r\n  XYZDataSource,\r\n  XYZDataSourceOptions,\r\n  WFSDataSource,\r\n  WFSDataSourceOptions,\r\n  WMTSDataSource,\r\n  WMTSDataSourceOptions,\r\n  WMSDataSource,\r\n  WMSDataSourceOptions,\r\n  CartoDataSource,\r\n  CartoDataSourceOptions,\r\n  ArcGISRestDataSource,\r\n  ArcGISRestDataSourceOptions,\r\n  TileArcGISRestDataSource,\r\n  TileArcGISRestDataSourceOptions,\r\n  WebSocketDataSource,\r\n  AnyDataSourceOptions,\r\n  MVTDataSource,\r\n  MVTDataSourceOptions,\r\n  ClusterDataSource,\r\n  ClusterDataSourceOptions\r\n} from './datasources';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSourceService {\r\n  public datasources$ = new BehaviorSubject<DataSource[]>([]);\r\n\r\n  constructor(\r\n    private capabilitiesService: CapabilitiesService,\r\n    private wfsDataSourceService: WFSService\r\n  ) {}\r\n\r\n  createAsyncDataSource(context: AnyDataSourceOptions): Observable<DataSource> {\r\n    if (!context.type) {\r\n      console.error(context);\r\n      throw new Error('Datasource needs a type');\r\n    }\r\n    let dataSource;\r\n    switch (context.type.toLowerCase()) {\r\n      case 'osm':\r\n        dataSource = this.createOSMDataSource(context as OSMDataSourceOptions);\r\n        break;\r\n      case 'vector':\r\n        dataSource = this.createFeatureDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'wfs':\r\n        dataSource = this.createWFSDataSource(context as WFSDataSourceOptions);\r\n        break;\r\n      case 'wms':\r\n        dataSource = this.createWMSDataSource(context as WMSDataSourceOptions);\r\n        break;\r\n      case 'wmts':\r\n        dataSource = this.createWMTSDataSource(\r\n          context as WMTSDataSourceOptions\r\n        );\r\n        break;\r\n      case 'xyz':\r\n        dataSource = this.createXYZDataSource(context as XYZDataSourceOptions);\r\n        break;\r\n      case 'carto':\r\n        dataSource = this.createCartoDataSource(\r\n          context as CartoDataSourceOptions\r\n        );\r\n        break;\r\n      case 'arcgisrest':\r\n        dataSource = this.createArcGISRestDataSource(\r\n          context as ArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'websocket':\r\n        dataSource = this.createWebSocketDataSource(\r\n          context as FeatureDataSourceOptions\r\n        );\r\n        break;\r\n      case 'mvt':\r\n        dataSource = this.createMVTDataSource(context as MVTDataSourceOptions);\r\n        break;\r\n      case 'tilearcgisrest':\r\n        dataSource = this.createTileArcGISRestDataSource(\r\n          context as TileArcGISRestDataSourceOptions\r\n        );\r\n        break;\r\n      case 'cluster':\r\n        dataSource = this.createClusterDataSource(\r\n          context as ClusterDataSourceOptions\r\n        );\r\n        break;\r\n      default:\r\n        console.error(context);\r\n        throw new Error('Invalid datasource type');\r\n    }\r\n\r\n    this.datasources$.next(this.datasources$.value.concat([dataSource]));\r\n\r\n    return dataSource;\r\n  }\r\n\r\n  private createOSMDataSource(\r\n    context: OSMDataSourceOptions\r\n  ): Observable<OSMDataSource> {\r\n    return new Observable(d => d.next(new OSMDataSource(context)));\r\n  }\r\n\r\n  private createFeatureDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<FeatureDataSource> {\r\n    return new Observable(d => d.next(new FeatureDataSource(context)));\r\n  }\r\n\r\n  private createWebSocketDataSource(\r\n    context: FeatureDataSourceOptions\r\n  ): Observable<WebSocketDataSource> {\r\n    return new Observable(d => d.next(new WebSocketDataSource(context)));\r\n  }\r\n\r\n  private createWFSDataSource(\r\n    context: WFSDataSourceOptions\r\n  ): Observable<WFSDataSource> {\r\n    return new Observable(d =>\r\n      d.next(new WFSDataSource(context, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMSDataSource(\r\n    context: WMSDataSourceOptions\r\n  ): Observable<WMSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService\r\n        .getWMSOptions(context)\r\n        .pipe(\r\n          map(\r\n            (options: WMSDataSourceOptions) =>\r\n              new WMSDataSource(options, this.wfsDataSourceService)\r\n          )\r\n        );\r\n    }\r\n\r\n    return new Observable(d =>\r\n      d.next(new WMSDataSource(context, this.wfsDataSourceService))\r\n    );\r\n  }\r\n\r\n  private createWMTSDataSource(\r\n    context: WMTSDataSourceOptions\r\n  ): Observable<WMTSDataSource> {\r\n    if (context.optionsFromCapabilities) {\r\n      return this.capabilitiesService\r\n        .getWMTSOptions(context)\r\n        .pipe(\r\n          map((options: WMTSDataSourceOptions) => new WMTSDataSource(options))\r\n        );\r\n    }\r\n\r\n    return new Observable(d => d.next(new WMTSDataSource(context)));\r\n  }\r\n\r\n  private createXYZDataSource(\r\n    context: XYZDataSourceOptions\r\n  ): Observable<XYZDataSource> {\r\n    return new Observable(d => d.next(new XYZDataSource(context)));\r\n  }\r\n\r\n  private createCartoDataSource(\r\n    context: CartoDataSourceOptions\r\n  ): Observable<CartoDataSource> {\r\n    if (context.mapId) {\r\n      return this.capabilitiesService\r\n        .getCartoOptions(context)\r\n        .pipe(\r\n          map((options: CartoDataSourceOptions) => new CartoDataSource(options))\r\n        );\r\n    }\r\n    return new Observable(d => d.next(new CartoDataSource(context)));\r\n  }\r\n\r\n  private createArcGISRestDataSource(\r\n    context: ArcGISRestDataSourceOptions\r\n  ): Observable<ArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: ArcGISRestDataSourceOptions) =>\r\n            new ArcGISRestDataSource(options)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createTileArcGISRestDataSource(\r\n    context: TileArcGISRestDataSourceOptions\r\n  ): Observable<TileArcGISRestDataSource> {\r\n    return this.capabilitiesService\r\n      .getTileArcgisOptions(context)\r\n      .pipe(\r\n        map(\r\n          (options: TileArcGISRestDataSourceOptions) =>\r\n            new TileArcGISRestDataSource(options)\r\n        )\r\n      );\r\n  }\r\n\r\n  private createMVTDataSource(\r\n    context: MVTDataSourceOptions\r\n  ): Observable<MVTDataSource> {\r\n    return new Observable(d => d.next(new MVTDataSource(context)));\r\n  }\r\n\r\n  private createClusterDataSource(\r\n    context: ClusterDataSourceOptions\r\n  ): Observable<ClusterDataSource> {\r\n    return new Observable(d => d.next(new ClusterDataSource(context)));\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport {\r\n  OSMDataSource,\r\n  FeatureDataSource,\r\n  XYZDataSource,\r\n  WFSDataSource,\r\n  WMTSDataSource,\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  ArcGISRestDataSource,\r\n  TileArcGISRestDataSource,\r\n  WebSocketDataSource,\r\n  MVTDataSource,\r\n  ClusterDataSource\r\n} from '../../datasource';\r\n\r\nimport { DataSourceService } from '../../datasource/shared/datasource.service';\r\n\r\nimport {\r\n  Layer,\r\n  ImageLayer,\r\n  ImageLayerOptions,\r\n  TileLayer,\r\n  TileLayerOptions,\r\n  VectorLayer,\r\n  VectorLayerOptions,\r\n  AnyLayerOptions,\r\n  VectorTileLayer,\r\n  VectorTileLayerOptions\r\n} from './layers';\r\n\r\nimport { StyleService } from './style.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerService {\r\n  private tokenKey: string;\r\n\r\n  constructor(\r\n    private styleService: StyleService,\r\n    private dataSourceService: DataSourceService,\r\n    @Optional() private config: ConfigService\r\n  ) {\r\n    if (this.config) {\r\n      this.tokenKey = this.config.getConfig('auth.tokenKey');\r\n    }\r\n  }\r\n\r\n  createLayer(layerOptions: AnyLayerOptions): Layer {\r\n    if (!layerOptions.source) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      layerOptions.source.options &&\r\n      layerOptions.source.options.optionsFromCapabilities\r\n    ) {\r\n      layerOptions = ObjectUtils.mergeDeep(\r\n        (layerOptions.source.options as any)._layerOptionsFromCapabilities ||\r\n          {},\r\n        layerOptions || {}\r\n      );\r\n    }\r\n\r\n    let layer;\r\n    switch (layerOptions.source.constructor) {\r\n      case OSMDataSource:\r\n      case WMTSDataSource:\r\n      case XYZDataSource:\r\n      case CartoDataSource:\r\n      case TileArcGISRestDataSource:\r\n        layer = this.createTileLayer(layerOptions as TileLayerOptions);\r\n        break;\r\n      case FeatureDataSource:\r\n      case WFSDataSource:\r\n      case ArcGISRestDataSource:\r\n      case WebSocketDataSource:\r\n      case ClusterDataSource:\r\n        layer = this.createVectorLayer(layerOptions as VectorLayerOptions);\r\n        break;\r\n      case WMSDataSource:\r\n        layer = this.createImageLayer(layerOptions as ImageLayerOptions);\r\n        break;\r\n      case MVTDataSource:\r\n        layer = this.createVectorTileLayer(\r\n          layerOptions as VectorTileLayerOptions\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return layer;\r\n  }\r\n\r\n  createAsyncLayer(layerOptions: AnyLayerOptions): Observable<Layer> {\r\n    if (layerOptions.source) {\r\n      return new Observable(d => d.next(this.createLayer(layerOptions)));\r\n    }\r\n\r\n    return this.dataSourceService\r\n      .createAsyncDataSource(layerOptions.sourceOptions)\r\n      .pipe(\r\n        map(source => {\r\n          layerOptions.source = source;\r\n          return this.createLayer(layerOptions);\r\n        })\r\n      );\r\n  }\r\n\r\n  private createImageLayer(layerOptions: ImageLayerOptions): ImageLayer {\r\n    if (this.tokenKey) {\r\n      layerOptions.token = localStorage.getItem(this.tokenKey);\r\n    }\r\n\r\n    return new ImageLayer(layerOptions);\r\n  }\r\n\r\n  private createTileLayer(layerOptions: TileLayerOptions): TileLayer {\r\n    return new TileLayer(layerOptions);\r\n  }\r\n\r\n  private createVectorLayer(layerOptions: VectorLayerOptions): VectorLayer {\r\n    let style;\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ArcGISRestDataSource) {\r\n      const source = layerOptions.source as ArcGISRestDataSource;\r\n      style = source.options.params.style;\r\n    } else if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createStyleByAttribute(\r\n          feature,\r\n          layerOptions.styleByAttribute\r\n        );\r\n      };\r\n      return new VectorLayer(layerOptions);\r\n    }\r\n\r\n    if (layerOptions.source instanceof ClusterDataSource) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createClusterStyle(\r\n          feature,\r\n          layerOptions.clusterParam\r\n        );\r\n      };\r\n      return new VectorLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n\r\n    return new VectorLayer(layerOptionsOl);\r\n  }\r\n\r\n  private createVectorTileLayer(\r\n    layerOptions: VectorTileLayerOptions\r\n  ): VectorTileLayer {\r\n    let style;\r\n    if (layerOptions.style !== undefined) {\r\n      style = this.styleService.createStyle(layerOptions.style);\r\n    }\r\n\r\n    if (layerOptions.styleByAttribute) {\r\n      const serviceStyle = this.styleService;\r\n      layerOptions.style = feature => {\r\n        return serviceStyle.createStyleByAttribute(\r\n          feature,\r\n          layerOptions.styleByAttribute\r\n        );\r\n      };\r\n      return new VectorTileLayer(layerOptions);\r\n    }\r\n\r\n    const layerOptionsOl = Object.assign({}, layerOptions, {\r\n      style\r\n    });\r\n    return new VectorTileLayer(layerOptionsOl);\r\n  }\r\n}\r\n","export enum CatalogItemType {\r\n  Layer = 'layer',\r\n  Group = 'group'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport * as olextent from 'ol/extent';\r\nimport olFormatGML2 from 'ol/format/GML2';\r\nimport olFormatGML3 from 'ol/format/GML3';\r\nimport olFormatEsriJSON from 'ol/format/EsriJSON';\r\nimport olFeature from 'ol/Feature';\r\nimport * as olgeom from 'ol/geom';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport {\r\n  WMSDataSource,\r\n  CartoDataSource,\r\n  TileArcGISRestDataSource\r\n} from '../../datasource';\r\n\r\nimport { QueryFormat, QueryHtmlTarget } from './query.enums';\r\nimport { QueryOptions, QueryableDataSource } from './query.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QueryService {\r\n  public queryEnabled = true;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  query(layers: Layer[], options: QueryOptions): Observable<Feature[]>[] {\r\n    return layers\r\n      .filter((layer: Layer) => layer.visible && layer.isInResolutionsRange)\r\n      .map((layer: Layer) => this.queryLayer(layer, options));\r\n  }\r\n\r\n  queryLayer(layer: Layer, options: QueryOptions): Observable<Feature[]> {\r\n    const url = this.getQueryUrl(layer.dataSource, options);\r\n    if (!url) {\r\n      return of([]);\r\n    }\r\n\r\n    if ((layer.dataSource as QueryableDataSource).options.queryFormat === QueryFormat.HTMLGML2) {\r\n      const urlGml = this.getQueryUrl(layer.dataSource, options, true);\r\n      return this.http.get(urlGml, { responseType: 'text' })\r\n      .pipe(mergeMap(gmlRes => {\r\n        const imposedGeom = this.mergeGML(gmlRes, url);\r\n        return this.http.get(url, { responseType: 'text' })\r\n          .pipe(map((res => this.extractData(res, layer, options, url, imposedGeom))));\r\n      }\r\n      ));\r\n    }\r\n\r\n    const request = this.http.get(url, { responseType: 'text' });\r\n    return request.pipe(map(res => this.extractData(res, layer, options, url)));\r\n  }\r\n\r\n  private mergeGML(gmlRes, url) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(gmlRes);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      features = parser.readFeatures(gmlRes);\r\n    }\r\n    const olmline = new olgeom.MultiLineString([]);\r\n    let pts;\r\n    const ptsArray = [];\r\n    let olmpoly = new olgeom.MultiPolygon([]);\r\n    let firstFeatureType;\r\n    const nbFeatures = features.length;\r\n\r\n    // Check if geometry intersect bbox\r\n    // for geoserver getfeatureinfo response in data projection, not call projection\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const bbox = bboxRaw.split(',');\r\n    const bboxExtent = olextent.createEmpty();\r\n    olextent.extend(bboxExtent, bbox);\r\n    const outBboxExtent = false;\r\n    features.map(feature => {\r\n\r\n    /*  if (!feature.getGeometry().simplify(100).intersectsExtent(bboxExtent)) {\r\n        outBboxExtent = true;\r\n        // TODO: Check to project the geometry?\r\n      }*/\r\n      const featureGeometryCoordinates = feature.getGeometry().getCoordinates();\r\n      const featureGeometryType = feature.getGeometry().getType();\r\n\r\n      if (!firstFeatureType && !outBboxExtent) {\r\n        firstFeatureType = featureGeometryType;\r\n      }\r\n      if (!outBboxExtent) {\r\n        switch (featureGeometryType) {\r\n          case 'Point':\r\n            if (nbFeatures === 1) {\r\n              pts = new olgeom.Point(featureGeometryCoordinates, 'XY');\r\n            } else {\r\n              ptsArray.push(featureGeometryCoordinates);\r\n            }\r\n            break;\r\n          case 'LineString':\r\n            olmline.appendLineString(\r\n              new olgeom.LineString(featureGeometryCoordinates, 'XY'));\r\n            break;\r\n          case 'Polygon':\r\n            olmpoly.appendPolygon(\r\n              new olgeom.Polygon(featureGeometryCoordinates, 'XY'));\r\n            break;\r\n          case 'MultiPolygon':\r\n            olmpoly = new olgeom.MultiPolygon(featureGeometryCoordinates, 'XY');\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    });\r\n\r\n    let olmpts;\r\n    if (ptsArray.length === 0 && pts) {\r\n      olmpts = {\r\n        type: pts.getType(),\r\n        coordinates: pts.getCoordinates()\r\n      };\r\n    } else {\r\n      olmpts = {\r\n        type: 'Polygon',\r\n        coordinates: [this.convexHull(ptsArray)]\r\n      };\r\n    }\r\n\r\n    switch (firstFeatureType) {\r\n      case 'LineString':\r\n        return {\r\n          type: olmline.getType(),\r\n          coordinates: olmline.getCoordinates()\r\n        };\r\n      case 'Point':\r\n        return olmpts;\r\n      case 'Polygon':\r\n        return {\r\n          type: olmpoly.getType(),\r\n          coordinates: olmpoly.getCoordinates()\r\n        };\r\n      case 'MultiPolygon':\r\n        return {\r\n            type: olmpoly.getType(),\r\n            coordinates: olmpoly.getCoordinates()\r\n        };\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  cross(a, b, o) {\r\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);\r\n  }\r\n\r\n  /**\r\n   * @param points An array of [X, Y] coordinates\r\n   * This method is use instead of turf.js convexHull because Turf needs at least 3 point to make a hull.\r\n   * https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript\r\n   */\r\n  convexHull(points) {\r\n    points.sort((a, b) => {\r\n      return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];\r\n    });\r\n\r\n    const lower = [];\r\n    for (const point of points) {\r\n      while (lower.length >= 2 && this.cross(lower[lower.length - 2], lower[lower.length - 1], point) <= 0) {\r\n        lower.pop();\r\n      }\r\n      lower.push(point);\r\n    }\r\n\r\n    const upper = [];\r\n    for (let i = points.length - 1; i >= 0; i--) {\r\n      while (upper.length >= 2 && this.cross(upper[upper.length - 2], upper[upper.length - 1], points[i]) <= 0) {\r\n        upper.pop();\r\n      }\r\n      upper.push(points[i]);\r\n    }\r\n\r\n    upper.pop();\r\n    lower.pop();\r\n    return lower.concat(upper);\r\n  }\r\n\r\n  private extractData(\r\n    res,\r\n    layer: Layer,\r\n    options: QueryOptions,\r\n    url: string,\r\n    imposedGeometry?\r\n  ): Feature[] {\r\n    const queryDataSource = layer.dataSource as QueryableDataSource;\r\n\r\n    let allowedFieldsAndAlias;\r\n    if (\r\n      layer.options &&\r\n      layer.options.sourceOptions &&\r\n      layer.options.sourceOptions.sourceFields &&\r\n      layer.options.sourceOptions.sourceFields.length >= 1\r\n    ) {\r\n      allowedFieldsAndAlias = {};\r\n      layer.options.sourceOptions.sourceFields.forEach(sourceField => {\r\n        const alias = sourceField.alias ? sourceField.alias : sourceField.name;\r\n        allowedFieldsAndAlias[sourceField.name] = alias;\r\n      });\r\n    }\r\n    let features = [];\r\n    switch (queryDataSource.options.queryFormat) {\r\n      case QueryFormat.GML3:\r\n        features = this.extractGML3Data(\r\n          res,\r\n          layer.zIndex,\r\n          allowedFieldsAndAlias\r\n        );\r\n        break;\r\n      case QueryFormat.JSON:\r\n      case QueryFormat.GEOJSON:\r\n        features = this.extractGeoJSONData(res);\r\n        break;\r\n      case QueryFormat.ESRIJSON:\r\n        features = this.extractEsriJSONData(res, layer.zIndex);\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        features = this.extractTextData(res);\r\n        break;\r\n      case QueryFormat.HTML:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url\r\n        );\r\n        break;\r\n      case QueryFormat.HTMLGML2:\r\n        features = this.extractHtmlData(\r\n          res,\r\n          queryDataSource.queryHtmlTarget,\r\n          url,\r\n          imposedGeometry\r\n        );\r\n        break;\r\n      case QueryFormat.GML2:\r\n      default:\r\n        features = this.extractGML2Data(res, layer, allowedFieldsAndAlias);\r\n        break;\r\n    }\r\n\r\n    return features.map((feature: Feature, index: number) => {\r\n      let title = feature.properties[queryDataSource.queryTitle];\r\n      if (!title && features.length > 1) {\r\n        title = `${layer.title} (${index + 1})`;\r\n      } else if (!title) {\r\n        title = layer.title;\r\n      }\r\n      const meta = Object.assign({}, feature.meta || {}, {\r\n        id: uuid(),\r\n        title,\r\n        mapTitle: title,\r\n        sourceTitle: layer.title,\r\n        order: 1000 - layer.zIndex\r\n      });\r\n\r\n      return Object.assign(feature, {\r\n        meta,\r\n        projection:\r\n          queryDataSource.options.type === 'carto'\r\n            ? 'EPSG:4326'\r\n            : options.projection\r\n      });\r\n    });\r\n  }\r\n\r\n  private extractGML2Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    let parser = new olFormatGML2();\r\n    let features = parser.readFeatures(res);\r\n    // Handle non standard GML output (MapServer)\r\n    if (features.length === 0) {\r\n      parser = new olformat.WMSGetFeatureInfo();\r\n      features = parser.readFeatures(res);\r\n    }\r\n\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGML3Data(res, zIndex, allowedFieldsAndAlias?) {\r\n    const parser = new olFormatGML3();\r\n    const features = parser.readFeatures(res);\r\n    return features.map(feature =>\r\n      this.featureToResult(feature, zIndex, allowedFieldsAndAlias)\r\n    );\r\n  }\r\n\r\n  private extractGeoJSONData(res) {\r\n    let features = [];\r\n    try {\r\n      features = JSON.parse(res).features;\r\n    } catch (e) {\r\n      console.warn('query.service: Unable to parse geojson', '\\n', res);\r\n    }\r\n    return features;\r\n  }\r\n\r\n  private extractEsriJSONData(res, zIndex) {\r\n    const parser = new olFormatEsriJSON();\r\n    const features = parser.readFeatures(res);\r\n\r\n    return features.map(feature => this.featureToResult(feature, zIndex));\r\n  }\r\n\r\n  private extractTextData(res) {\r\n    // TODO\r\n    return [];\r\n  }\r\n\r\n  private extractHtmlData(res, htmlTarget: QueryHtmlTarget, url, imposedGeometry?) {\r\n    // _blank , iframe or undefined\r\n    const searchParams: any = this.getQueryParams(url.toLowerCase());\r\n    const bboxRaw = searchParams.bbox;\r\n    const width = parseInt(searchParams.width, 10);\r\n    const height = parseInt(searchParams.height, 10);\r\n    const xPosition = parseInt(searchParams.i || searchParams.x, 10);\r\n    const yPosition = parseInt(searchParams.j || searchParams.y, 10);\r\n    const projection = searchParams.crs || searchParams.srs || 'EPSG:3857';\r\n\r\n    const bbox = bboxRaw.split(',');\r\n    let threshold =\r\n      (Math.abs(parseFloat(bbox[0])) - Math.abs(parseFloat(bbox[2]))) * 0.05;\r\n\r\n    // for context in degree (EPSG:4326,4269...)\r\n    if (Math.abs(parseFloat(bbox[0])) < 180) {\r\n      threshold = 0.045;\r\n    }\r\n\r\n    const clickx =\r\n      parseFloat(bbox[0]) +\r\n      (Math.abs(parseFloat(bbox[0]) - parseFloat(bbox[2])) * xPosition) /\r\n        width -\r\n      threshold;\r\n    const clicky =\r\n      parseFloat(bbox[1]) +\r\n      (Math.abs(parseFloat(bbox[1]) - parseFloat(bbox[3])) * yPosition) /\r\n        height -\r\n      threshold;\r\n    const clickx1 = clickx + threshold * 2;\r\n    const clicky1 = clicky + threshold * 2;\r\n\r\n    const wktPoly =\r\n      'POLYGON((' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky1 +\r\n      ', ' +\r\n      clickx1 +\r\n      ' ' +\r\n      clicky +\r\n      ', ' +\r\n      clickx +\r\n      ' ' +\r\n      clicky +\r\n      '))';\r\n\r\n    const format = new olformat.WKT();\r\n    const tenPercentWidthGeom = format.readFeature(wktPoly);\r\n    const f = tenPercentWidthGeom.getGeometry() as any;\r\n\r\n    if (\r\n      htmlTarget !== QueryHtmlTarget.BLANK &&\r\n      htmlTarget !== QueryHtmlTarget.IFRAME\r\n    ) {\r\n      htmlTarget = QueryHtmlTarget.IFRAME;\r\n    }\r\n\r\n    const bodyTagStart = res.toLowerCase().indexOf('<body>');\r\n    const bodyTagEnd = res.toLowerCase().lastIndexOf('</body>') + 7;\r\n    // replace \\r \\n  and ' ' with '' to validate if the body is really empty.\r\n    const body = res.slice(bodyTagStart, bodyTagEnd).replace(/(\\r|\\n|\\s)/g, '');\r\n    if (body === '<body></body>' || res === '') {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      {\r\n        type: FEATURE,\r\n        projection,\r\n        properties: { target: htmlTarget, body: res, url },\r\n        geometry: imposedGeometry || { type: f.getType(), coordinates: f.getCoordinates() }\r\n      }\r\n    ];\r\n  }\r\n\r\n  private getQueryParams(url) {\r\n    const queryString = url.split('?');\r\n    if (!queryString[1]) {\r\n      return;\r\n    }\r\n    const pairs = queryString[1].split('&');\r\n\r\n    const result = {};\r\n    pairs.forEach(pair => {\r\n      pair = pair.split('=');\r\n      result[pair[0]] = decodeURIComponent(pair[1] || '');\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private featureToResult(\r\n    featureOL: olFeature,\r\n    zIndex: number,\r\n    allowedFieldsAndAlias?\r\n  ): Feature {\r\n    const featureGeometry = featureOL.getGeometry() as any;\r\n    const properties: any = Object.assign({}, featureOL.getProperties());\r\n    delete properties.geometry;\r\n    delete properties.boundedBy;\r\n    delete properties.shape;\r\n    delete properties.SHAPE;\r\n    delete properties.the_geom;\r\n\r\n    let geometry;\r\n    if (featureGeometry !== undefined) {\r\n      geometry = {\r\n        type: featureGeometry.getType(),\r\n        coordinates: featureGeometry.getCoordinates()\r\n      };\r\n    }\r\n\r\n    return {\r\n      type: FEATURE,\r\n      projection: undefined,\r\n      properties,\r\n      geometry,\r\n      meta: {\r\n        id: uuid(),\r\n        order: 1000 - zIndex,\r\n        alias: allowedFieldsAndAlias\r\n      }\r\n    };\r\n  }\r\n\r\n  private getQueryUrl(\r\n    datasource: QueryableDataSource,\r\n    options: QueryOptions,\r\n    forceGML2 = false\r\n  ): string {\r\n    let url;\r\n    switch (datasource.constructor) {\r\n      case WMSDataSource:\r\n        const wmsDatasource = datasource as WMSDataSource;\r\n\r\n        const WMSGetFeatureInfoOptions = {\r\n          INFO_FORMAT: wmsDatasource.params.info_format ||\r\n            this.getMimeInfoFormat(datasource.options.queryFormat),\r\n          QUERY_LAYERS: wmsDatasource.params.layers,\r\n          FEATURE_COUNT: wmsDatasource.params.feature_count || '5'\r\n        };\r\n\r\n        if (forceGML2) {\r\n          WMSGetFeatureInfoOptions.INFO_FORMAT =\r\n            this.getMimeInfoFormat(QueryFormat.GML2);\r\n        }\r\n\r\n        url = wmsDatasource.ol.getGetFeatureInfoUrl(\r\n          options.coordinates,\r\n          options.resolution,\r\n          options.projection,\r\n          WMSGetFeatureInfoOptions\r\n        );\r\n        if (wmsDatasource.params.version !== '1.3.0') {\r\n          url = url.replace('&I=', '&X=');\r\n          url = url.replace('&J=', '&Y=');\r\n        }\r\n        break;\r\n      case CartoDataSource:\r\n        const cartoDatasource = datasource as CartoDataSource;\r\n        const baseUrl =\r\n          'https://' +\r\n          cartoDatasource.options.account +\r\n          '.carto.com/api/v2/sql?';\r\n        const format = 'format=GeoJSON';\r\n        const sql =\r\n          '&q=' + cartoDatasource.options.config.layers[0].options.sql;\r\n        const clause =\r\n          ' WHERE ST_Intersects(the_geom_webmercator,ST_BUFFER(ST_SetSRID(ST_POINT(';\r\n        const meters = cartoDatasource.options.queryPrecision\r\n          ? cartoDatasource.options.queryPrecision\r\n          : '1000';\r\n        const coordinates =\r\n          options.coordinates[0] +\r\n          ',' +\r\n          options.coordinates[1] +\r\n          '),3857),' +\r\n          meters +\r\n          '))';\r\n\r\n        url = `${baseUrl}${format}${sql}${clause}${coordinates}`;\r\n        break;\r\n      case TileArcGISRestDataSource:\r\n        const tileArcGISRestDatasource = datasource as TileArcGISRestDataSource;\r\n        let extent = olextent.boundingExtent([options.coordinates]);\r\n        if (tileArcGISRestDatasource.options.queryPrecision) {\r\n          extent = olextent.buffer(\r\n            extent,\r\n            tileArcGISRestDatasource.options.queryPrecision\r\n          );\r\n        }\r\n        const serviceUrl =\r\n          tileArcGISRestDatasource.options.url +\r\n          '/' +\r\n          tileArcGISRestDatasource.options.layer +\r\n          '/query/';\r\n        const geometry = encodeURIComponent(\r\n          '{\"xmin\":' +\r\n            extent[0] +\r\n            ',\"ymin\":' +\r\n            extent[1] +\r\n            ',\"xmax\":' +\r\n            extent[2] +\r\n            ',\"ymax\":' +\r\n            extent[3] +\r\n            ',\"spatialReference\":{\"wkid\":102100}}'\r\n        );\r\n        const params = [\r\n          'f=json',\r\n          `geometry=${geometry}`,\r\n          'geometryType=esriGeometryEnvelope',\r\n          'inSR=102100',\r\n          'spatialRel=esriSpatialRelIntersects',\r\n          'outFields=*',\r\n          'returnGeometry=true',\r\n          'outSR=102100'\r\n        ];\r\n        url = `${serviceUrl}?${params.join('&')}`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  private getMimeInfoFormat(queryFormat) {\r\n    let mime;\r\n    switch (queryFormat) {\r\n      case QueryFormat.GML2:\r\n        mime = 'application/vnd.ogc.gml';\r\n        break;\r\n      case QueryFormat.GML3:\r\n        mime = 'application/vnd.ogc.gml/3.1.1';\r\n        break;\r\n      case QueryFormat.JSON:\r\n        mime = 'application/json';\r\n        break;\r\n      case QueryFormat.GEOJSON:\r\n        mime = 'application/geojson';\r\n        break;\r\n      case QueryFormat.TEXT:\r\n        mime = 'text/plain';\r\n        break;\r\n      case QueryFormat.HTML:\r\n        mime = 'text/html';\r\n        break;\r\n      case QueryFormat.HTMLGML2:\r\n        mime = 'text/html';\r\n        break;\r\n      default:\r\n        mime = 'application/vnd.ogc.gml';\r\n        break;\r\n    }\r\n\r\n    return mime;\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Self\r\n} from '@angular/core';\r\n\r\nimport { Subscription, Observable, of, zip } from 'rxjs';\r\n\r\nimport OlFeature from 'ol/Feature';\r\nimport OlLayer from 'ol/layer/Layer';\r\n\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserPointerEvent as OlMapBrowserPointerEvent } from 'ol/MapBrowserEvent';\r\nimport { ListenerFunction } from 'ol/events';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { featureFromOl } from '../../feature/shared/feature.utils';\r\nimport { QueryService } from './query.service';\r\nimport { layerIsQueryable, olLayerIsQueryable } from './query.utils';\r\n\r\n/**\r\n * This directive makes a map queryable with a click of with a drag box.\r\n * By default, all layers are queryable but this cna ben controlled at\r\n * the layer level.\r\n */\r\n@Directive({\r\n  selector: '[igoQuery]'\r\n})\r\nexport class QueryDirective implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * Subscriptions to ongoing queries\r\n   */\r\n  private queries$$: Subscription[] = [];\r\n\r\n  /**\r\n   * Listener to the map click event\r\n   */\r\n  private mapClickListener: ListenerFunction;\r\n\r\n  /**\r\n   * OL drag box interaction\r\n   */\r\n  private olDragBoxInteraction: OlDragBoxInteraction;\r\n\r\n  /**\r\n   * Ol drag box \"end\" event key\r\n   */\r\n  private olDragBoxInteractionEndKey: string;\r\n\r\n  /**\r\n   * Whter to query features or not\r\n   */\r\n  @Input() queryFeatures: boolean = false;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesHitTolerance: number = 0;\r\n\r\n  /**\r\n   * Feature query hit tolerance\r\n   */\r\n  @Input() queryFeaturesCondition: (olLayer: OlLayer) => boolean;\r\n\r\n  /**\r\n   * Whether all query should complete before emitting an event\r\n   */\r\n  @Input() waitForAllQueries: boolean = true;\r\n\r\n  /**\r\n   * Event emitted when a query (or all queries) complete\r\n   */\r\n  @Output() query = new EventEmitter<{\r\n    features: Feature[] | Feature[][];\r\n    event: OlMapBrowserPointerEvent;\r\n  }>();\r\n\r\n  /**\r\n   * IGO map\r\n   * @internal\r\n   */\r\n  get map(): IgoMap {\r\n    return (this.component.map as any) as IgoMap;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private queryService: QueryService\r\n  ) {}\r\n\r\n  /**\r\n   * Start listening to click and drag box events\r\n   * @internal\r\n   */\r\n  ngAfterViewInit() {\r\n    this.listenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * Stop listening to click and drag box events and cancel ongoind requests\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.cancelOngoingQueries();\r\n    this.unlistenToMapClick();\r\n  }\r\n\r\n  /**\r\n   * On map click, issue queries\r\n   */\r\n  private listenToMapClick() {\r\n    this.mapClickListener = this.map.ol.on(\r\n      'singleclick',\r\n      (event: OlMapBrowserPointerEvent) => this.onMapEvent(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stop listenig for map clicks\r\n   */\r\n  private unlistenToMapClick() {\r\n    this.map.ol.un(this.mapClickListener.type, this.mapClickListener.listener);\r\n    this.mapClickListener = undefined;\r\n  }\r\n\r\n  /**\r\n   * Issue queries from a map event and emit events with the results\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private onMapEvent(event: OlMapBrowserPointerEvent) {\r\n    this.cancelOngoingQueries();\r\n    if (!this.queryService.queryEnabled) {\r\n      return;\r\n    }\r\n\r\n    const queries$ = [];\r\n    if (this.queryFeatures) {\r\n      queries$.push(this.doQueryFeatures(event));\r\n    }\r\n\r\n    const resolution = this.map.ol.getView().getResolution();\r\n    const queryLayers = this.map.layers.filter(layerIsQueryable);\r\n    queries$.push(...this.queryService.query(queryLayers, {\r\n      coordinates: event.coordinate,\r\n      projection: this.map.projection,\r\n      resolution\r\n    }));\r\n\r\n    if (queries$.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.waitForAllQueries) {\r\n      this.queries$$.push(\r\n        zip(...queries$).subscribe((results: Feature[][]) => {\r\n          const features = [].concat(...results);\r\n          this.query.emit({ features, event });\r\n        })\r\n      );\r\n    } else {\r\n      this.queries$$ = queries$.map((query$: Observable<Feature[]>) => {\r\n        return query$.subscribe((features: Feature[]) => {\r\n          this.query.emit({ features, event });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query features already present on the map\r\n   * @param event OL map browser pointer event\r\n   */\r\n  private doQueryFeatures(event: OlMapBrowserPointerEvent): Observable<Feature[]> {\r\n\r\n    let feature;\r\n    const clickedFeatures = [];\r\n\r\n    this.map.ol.forEachFeatureAtPixel(\r\n      event.pixel,\r\n      (featureOL: OlFeature, layerOL: OlLayer) => {\r\n        if (featureOL) {\r\n          if (featureOL.get('features')) {\r\n            featureOL = featureOL.get('features')[0];\r\n          }\r\n          feature = featureFromOl(featureOL, this.map.projection, layerOL);\r\n          clickedFeatures.push(feature);\r\n\r\n        } else {\r\n          feature = featureFromOl(featureOL, this.map.projection, layerOL);\r\n          clickedFeatures.push(feature);\r\n        }\r\n      },\r\n    {\r\n      hitTolerance: this.queryFeaturesHitTolerance || 0,\r\n      layerFilter: this.queryFeaturesCondition ? this.queryFeaturesCondition : olLayerIsQueryable\r\n    });\r\n\r\n    return of(clickedFeatures);\r\n  }\r\n\r\n  /**\r\n   * Cancel ongoing requests, if any\r\n   */\r\n  private cancelOngoingQueries() {\r\n    this.queries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.queries$$ = [];\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions,\r\n  SearchSourceSettings\r\n} from './source.interfaces';\r\n\r\n/**\r\n * Base search source class\r\n */\r\nexport class SearchSource {\r\n  /**\r\n   * Search source ID\r\n   * @internal\r\n   */\r\n  static id = '';\r\n\r\n  /**\r\n   * Search source type\r\n   * @internal\r\n   */\r\n  static type = '';\r\n\r\n  /**\r\n   * Search source options\r\n   * @internal\r\n   */\r\n  protected options: SearchSourceOptions;\r\n\r\n  /**\r\n   * Get search source's id\r\n   * @returns Search source's id\r\n   */\r\n  getId(): string {\r\n    throw new Error('You have to implement the method \"getId\".');\r\n  }\r\n\r\n  /**\r\n   * Get search source's default options\r\n   * @returns Search source default options\r\n   */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    throw new Error('You have to implement the method \"getDefaultOptions\".');\r\n  }\r\n\r\n  /**\r\n   * Search source's title\r\n   */\r\n  get title(): string {\r\n    return this.options.title;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is available\r\n   */\r\n  get available(): boolean {\r\n    return this.options.available !== false;\r\n  }\r\n\r\n  /**\r\n   * Whether the search source is enabled\r\n   */\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  get enabled(): boolean {\r\n    return this.available && this.options.enabled !== false;\r\n  }\r\n\r\n  /**\r\n   * Search url\r\n   */\r\n  get searchUrl(): string {\r\n    return this.options.searchUrl;\r\n  }\r\n\r\n  /**\r\n   * Search query params\r\n   */\r\n  get params(): { [key: string]: string } {\r\n    return this.options.params === undefined ? {} : this.options.params;\r\n  }\r\n\r\n  /**\r\n   * Search settings\r\n   */\r\n  get settings(): SearchSourceSettings[] {\r\n    return this.options.settings === undefined ? [] : this.options.settings;\r\n  }\r\n\r\n  /**\r\n   * Set params from selected settings\r\n   */\r\n  setParamFromSetting(setting: SearchSourceSettings) {\r\n      switch (setting.type) {\r\n        case 'radiobutton':\r\n          setting.values.forEach( conf => {\r\n            if (conf.enabled) {\r\n              this.options.params = Object.assign( (this.options.params || {}),\r\n                                                    { [setting.name] : conf.value } );\r\n            }\r\n          });\r\n          break;\r\n        case 'checkbox':\r\n          let confValue = '';\r\n          setting.values.forEach( conf => {\r\n            if (conf.enabled) {\r\n              confValue += conf.value + ',';\r\n            }\r\n          });\r\n          confValue = confValue.slice(0, -1);\r\n          this.options.params = Object.assign( (this.options.params || {}),\r\n                                                { [setting.name] : confValue } );\r\n          break;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Search results display order\r\n   */\r\n  get displayOrder(): number {\r\n    return this.options.order === undefined ? 99 : this.options.order;\r\n  }\r\n\r\n  constructor(options: SearchSourceOptions) {\r\n    this.options = Object.assign({}, this.getDefaultOptions(), options);\r\n\r\n    // Set Default Params from Settings\r\n    this.settings.forEach( setting => {\r\n      this.setParamFromSetting(setting);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if hashtag is valid\r\n   * @param hashtag hashtag from query\r\n   * @param completeMatch boolean\r\n   */\r\n  hashtagValid(searchSourceSetting: SearchSourceSettings, hashtag: string, completeMatch = false): boolean {\r\n    let hashtagIsValid = false;\r\n    searchSourceSetting.values.forEach( conf => {\r\n      const re = new RegExp('' + hashtag.substring(1) + '', 'g');\r\n      if ( typeof conf.value === 'string') {\r\n        if ( (completeMatch && conf.value === hashtag.substring(1)) ||\r\n              ( !completeMatch && conf.value.match(re)) ) {\r\n          hashtagIsValid = true;\r\n        }\r\n      }\r\n    });\r\n    return hashtagIsValid;\r\n  }\r\n\r\n  getSettingsValues(search: string): SearchSourceSettings {\r\n    return this.getDefaultOptions().settings.find( (value: SearchSourceSettings) => {\r\n      return value.name === search;\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by text implement this class\r\n */\r\nexport interface TextSearch {\r\n  /**\r\n   * Search by text\r\n   * @param term Text\r\n   * @returns Observable or search results\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n\r\n/**\r\n * Search sources that allow searching by coordinates implement this class\r\n */\r\nexport interface ReverseSearch {\r\n  /**\r\n   * Search by text\r\n   * @param lonLat Coordinates\r\n   * @param distance Optional: Search radius arounf lonLat\r\n   * @returns Observable or search results\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult[]>;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\nimport { SearchSourceOptions } from '../../search/shared/sources/source.interfaces';\r\n/**\r\n * Map search source. For now it has no search capability. All it does\r\n * is act as a placeholder for the map query results' \"search source\".\r\n */\r\n@Injectable()\r\nexport class QuerySearchSource extends SearchSource {\r\n  static id = 'map';\r\n  static type = FEATURE;\r\n\r\n  constructor(@Inject('options') options: SearchSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return QuerySearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Carte'\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { EMPTY, Observable, of, concat } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { LanguageService, ConfigService } from '@igo2/core';\r\nimport {\r\n  CapabilitiesService,\r\n  WMSDataSourceOptions,\r\n  WMTSDataSourceOptions,\r\n  generateIdFromSourceOptions\r\n} from '../../datasource';\r\nimport { LayerOptions, ImageLayerOptions, TooltipContent, TooltipType } from '../../layer';\r\nimport { getResolutionFromScale } from '../../map';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup\r\n} from './catalog.interface';\r\nimport { CatalogItemType } from './catalog.enum';\r\nimport { QueryHtmlTarget, QueryFormat } from '../../query';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CatalogService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private config: ConfigService,\r\n    private languageService: LanguageService,\r\n    private capabilitiesService: CapabilitiesService\r\n  ) {}\r\n\r\n  loadCatalogs(): Observable<Catalog[]> {\r\n    const contextConfig = this.config.getConfig('context') || {};\r\n    const catalogConfig = this.config.getConfig('catalog') || {};\r\n    const apiUrl = catalogConfig.url || contextConfig.url;\r\n    const catalogsFromConfig = catalogConfig.sources || [];\r\n\r\n    if (apiUrl === undefined) {\r\n      return of(catalogsFromConfig);\r\n    }\r\n\r\n    const observables$ = [];\r\n\r\n    // Base layers catalog\r\n    if (catalogConfig.baseLayers) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.catalog.baseLayers');\r\n      const baseLayersCatalog = {\r\n        id: 'catalog.baselayers',\r\n        title,\r\n        url: `${apiUrl}/baselayers`,\r\n        type: 'baselayers'\r\n      };\r\n      observables$.push(of(baseLayersCatalog));\r\n    }\r\n\r\n    // Catalogs from API\r\n    const catalogsFromApi$ = this.http\r\n      .get<Catalog[]>(`${apiUrl}/catalogs`)\r\n      .pipe(\r\n        catchError((response: HttpErrorResponse) => EMPTY)\r\n      );\r\n    observables$.push(catalogsFromApi$);\r\n\r\n    // Catalogs from config\r\n    if (catalogsFromConfig.length > 0) {\r\n      observables$.push(of(catalogsFromConfig));\r\n    }\r\n\r\n    return concat(...observables$) as Observable<Catalog[]>;\r\n  }\r\n\r\n  loadCatalogItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    if (catalog.type === 'baselayers') {\r\n      return this.loadCatalogBaseLayerItems(catalog);\r\n    } else if (catalog.type === 'wmts') {\r\n      return this.loadCatalogWMTSLayerItems(catalog);\r\n    }\r\n    return this.loadCatalogWMSLayerItems(catalog);\r\n  }\r\n\r\n  private loadCatalogBaseLayerItems(catalog: Catalog): Observable<CatalogItemGroup[]> {\r\n    // TODO: I'm not sure this works\r\n    return this.getCatalogBaseLayersOptions(catalog)\r\n      .pipe(\r\n        map((layersOptions: LayerOptions[]) => {\r\n          const items = layersOptions.map((layerOptions: LayerOptions) => {\r\n            return {\r\n              id: generateIdFromSourceOptions(layerOptions.sourceOptions),\r\n              title: layerOptions.title,\r\n              type: CatalogItemType.Layer,\r\n              options: layerOptions\r\n            } as CatalogItemLayer;\r\n          });\r\n          return [{\r\n            id: 'catalog.group.baselayers',\r\n            type: CatalogItemType.Group,\r\n            title: catalog.title,\r\n            items\r\n          }];\r\n        })\r\n      );\r\n  }\r\n\r\n  private getCatalogBaseLayersOptions(catalog: Catalog): Observable<LayerOptions[]> {\r\n    return this.http.get<LayerOptions[]>(catalog.url);\r\n  }\r\n\r\n  private loadCatalogWMSLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    return this.getCatalogWMSCapabilities(catalog)\r\n      .pipe(\r\n        map((capabilities: any) => {\r\n          const items = [];\r\n          this.includeRecursiveItems(catalog, capabilities.Capability.Layer, items);\r\n          return items;\r\n        })\r\n      );\r\n  }\r\n\r\n  private loadCatalogWMTSLayerItems(catalog: Catalog): Observable<CatalogItem[]> {\r\n    return this.getCatalogWMTSCapabilities(catalog)\r\n      .pipe(\r\n        map((capabilities: any) => this.getWMTSItems(catalog, capabilities))\r\n      );\r\n  }\r\n\r\n  private getCatalogWMSCapabilities(catalog: Catalog): Observable<any> {\r\n    return this.capabilitiesService.getCapabilities('wms', catalog.url, catalog.version);\r\n  }\r\n\r\n  private getCatalogWMTSCapabilities(catalog: Catalog): Observable<any> {\r\n    return this.capabilitiesService.getCapabilities('wmts', catalog.url, catalog.version);\r\n  }\r\n\r\n  private includeRecursiveItems(catalog: Catalog, layerList: any, items: CatalogItem[]) {\r\n    // Dig all levels until last level (layer object are not defined on last level)\r\n    const regexes = (catalog.regFilters || []).map((pattern: string) => new RegExp(pattern));\r\n    const catalogQueryParams = catalog.queryParams || {};\r\n    const catalogSourceOptions = catalog.sourceOptions || {};\r\n\r\n    for (const group of layerList.Layer) {\r\n      if (group.Layer !== undefined) {\r\n        // recursive, check next level\r\n        this.includeRecursiveItems(catalog, group, items);\r\n        continue;\r\n      }\r\n      const catalogTooltipType = this.retrieveTooltipType(catalog);\r\n      const layersQueryFormat = this.findCatalogInfoFormat(catalog);\r\n      // TODO: Slice that into multiple methods\r\n      // Define object of group layer\r\n      const groupItem = {\r\n        id: `catalog.group.${layerList.Name}`,\r\n        type: CatalogItemType.Group,\r\n        title: layerList.Title,\r\n        items: layerList.Layer.reduce((layers: CatalogItemLayer<ImageLayerOptions>[], layer: any) => {\r\n          const configuredQueryFormat = this.retriveLayerInfoFormat(layer.Name, layersQueryFormat);\r\n\r\n          if (this.testLayerRegexes(layer.Name, regexes) === false) {\r\n            return layers;\r\n          }\r\n\r\n          const metadata = layer.DataURL ? layer.DataURL[0] : undefined;\r\n          const abstract = layer.Abstract ? layer.Abstract : undefined;\r\n          const keywordList = layer.KeywordList ? layer.KeywordList : undefined;\r\n          const timeFilter = this.capabilitiesService.getTimeFilter(layer);\r\n          const timeFilterable = timeFilter && Object.keys(timeFilter).length > 0 ? true : false;\r\n\r\n          const params = Object.assign({}, catalogQueryParams, {\r\n            layers: layer.Name,\r\n            feature_count:  catalog.count\r\n          });\r\n          const baseSourceOptions = {\r\n            type: 'wms',\r\n            url: catalog.url,\r\n            crossOrigin: catalog.setCrossOriginAnonymous ? 'anonymous' : undefined,\r\n            timeFilter: { ...timeFilter, ...catalog.timeFilter },\r\n            timeFilterable: timeFilterable ? true : false,\r\n            queryable: layer.queryable,\r\n            queryFormat: configuredQueryFormat,\r\n            queryHtmlTarget: catalog.queryHtmlTarget || QueryHtmlTarget.IFRAME\r\n          };\r\n          const sourceOptions = Object.assign(\r\n            {},\r\n            baseSourceOptions,\r\n            catalogSourceOptions,\r\n            {params}\r\n          ) as WMSDataSourceOptions;\r\n\r\n          layers.push({\r\n            id: generateIdFromSourceOptions(sourceOptions),\r\n            type: CatalogItemType.Layer,\r\n            title: layer.Title,\r\n            options: {\r\n              title: layer.Title,\r\n              maxResolution:\r\n                getResolutionFromScale(layer.MaxScaleDenominator) || Infinity,\r\n              minResolution:\r\n                getResolutionFromScale(layer.MinScaleDenominator) || 0,\r\n              metadata: {\r\n                url: metadata ? metadata.OnlineResource : undefined,\r\n                extern: metadata ? true : undefined,\r\n                abstract,\r\n                keywordList\r\n              },\r\n              tooltip: { type: catalogTooltipType } as TooltipContent,\r\n              sourceOptions\r\n            }\r\n          });\r\n          return layers;\r\n\r\n        }, [])\r\n\r\n      };\r\n\r\n      if (groupItem.items.length !== 0) {\r\n        items.push(groupItem);\r\n      }\r\n\r\n      // Break the group (don't add a group of layer for each of their layer!)\r\n      break;\r\n    }\r\n  }\r\n\r\n  private getWMTSItems(catalog: Catalog, capabilities: {[key: string]: any}): CatalogItemLayer[] {\r\n    const layers = capabilities.Contents.Layer;\r\n    const regexes = (catalog.regFilters || []).map((pattern: string) => new RegExp(pattern));\r\n    const catalogQueryParams = catalog.queryParams || {};\r\n    const catalogSourceOptions = catalog.sourceOptions || {};\r\n\r\n    return layers.map((layer: any) => {\r\n      if (this.testLayerRegexes(layer.Identifier, regexes) === false) {\r\n        return undefined;\r\n      }\r\n      const params = Object.assign({}, catalogQueryParams, {\r\n        version: '1.0.0'\r\n      });\r\n      const baseSourceOptions = {\r\n        type: 'wmts',\r\n        url: catalog.url,\r\n        crossOrigin: catalog.setCrossOriginAnonymous ? 'anonymous' : undefined,\r\n        layer: layer.Identifier,\r\n        matrixSet: catalog.matrixSet,\r\n        optionsFromCapabilities: true,\r\n        requestEncoding: catalog.requestEncoding || 'KVP',\r\n        style: 'default'\r\n      } as WMTSDataSourceOptions;\r\n      const sourceOptions = Object.assign(\r\n        {},\r\n        baseSourceOptions,\r\n        catalogSourceOptions,\r\n        {params}\r\n      ) as WMTSDataSourceOptions;\r\n\r\n      return {\r\n        id: generateIdFromSourceOptions(sourceOptions),\r\n        type: CatalogItemType.Layer,\r\n        title: layer.Title,\r\n        options: {\r\n          title: layer.Title,\r\n          sourceOptions\r\n        }\r\n      };\r\n    })\r\n    .filter((item: CatalogItemLayer | undefined) => item !== undefined);\r\n  }\r\n\r\n  private testLayerRegexes(layerName, regexes): boolean {\r\n    if (regexes.length === 0) {\r\n      return true;\r\n    }\r\n    return regexes.find((regex: RegExp) => regex.test(layerName)) !== undefined;\r\n  }\r\n\r\n  private retriveLayerInfoFormat(\r\n    layerNameFromCatalog: string,\r\n    layersQueryFormat: { layer: string, queryFormat: QueryFormat }[]\r\n  ): QueryFormat {\r\n\r\n    const currentLayerInfoFormat = layersQueryFormat.find(f => f.layer === layerNameFromCatalog);\r\n    const baseInfoFormat = layersQueryFormat.find(f => f.layer === '*');\r\n    let queryFormat: QueryFormat;\r\n    if (currentLayerInfoFormat) {\r\n      queryFormat = currentLayerInfoFormat.queryFormat;\r\n    } else if (baseInfoFormat) {\r\n      queryFormat = baseInfoFormat.queryFormat;\r\n    }\r\n    return queryFormat;\r\n  }\r\n\r\n  private retrieveTooltipType(catalog: Catalog): TooltipType {\r\n    if (!catalog.tooltipType) {\r\n      return TooltipType.TITLE;\r\n    }\r\n    return catalog.tooltipType;\r\n  }\r\n\r\n  private findCatalogInfoFormat(catalog: Catalog): {layer: string, queryFormat: QueryFormat}[] {\r\n    const layersQueryFormat: {layer: string, queryFormat: QueryFormat}[] = [];\r\n    if (!catalog.queryFormat) {\r\n      return layersQueryFormat;\r\n    }\r\n    Object.keys(catalog.queryFormat).forEach(configuredInfoFormat => {\r\n      if (catalog.queryFormat[configuredInfoFormat] instanceof Array) {\r\n        catalog.queryFormat[configuredInfoFormat].forEach(layerName => {\r\n          if (!layersQueryFormat.find(specific => specific.layer === layerName)) {\r\n            layersQueryFormat.push({ layer: layerName, queryFormat: configuredInfoFormat as QueryFormat });\r\n          }\r\n        });\r\n      } else {\r\n        if (!layersQueryFormat.find(specific => specific.layer === catalog.queryFormat[configuredInfoFormat])) {\r\n          layersQueryFormat.push({ layer: catalog.queryFormat[configuredInfoFormat], queryFormat: configuredInfoFormat as QueryFormat });\r\n        }\r\n      }\r\n    });\r\n    return layersQueryFormat;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { zip } from 'rxjs';\r\n\r\nimport { EntityStore, EntityStoreWatcher } from '@igo2/common';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemLayer,\r\n  CatalogItemGroup,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Component to browse a catalog's groups and layers and display them on a map.\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser',\r\n  templateUrl: './catalog-browser.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Catalog items store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<CatalogItem>;\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Store holding the catalog's items\r\n   */\r\n  @Input() store: EntityStore<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Whether a group can be toggled when it's collapsed\r\n   */\r\n  @Input() toggleCollapsedGroup: boolean = true;\r\n\r\n  constructor(\r\n    private layerService: LayerService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    const currentItems = this.map.layers.map((layer: Layer) => {\r\n      return {\r\n        id: layer.id,\r\n        title: layer.title,\r\n        type: CatalogItemType.Layer\r\n      };\r\n    });\r\n    this.store.state.updateMany(currentItems, { added: true }, true);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Layer added event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const layer = event.layer;\r\n    this.store.state.update(layer, { added: event.added }, false);\r\n    event.added ? this.addLayerToMap(layer) : this.removeLayerFromMap(layer);\r\n  }\r\n\r\n  /**\r\n   * When a froup is added or removed, add or remove it from the map\r\n   * @internal\r\n   * @param event Group added event\r\n   */\r\n  onGroupAddedChange(event: { added: boolean; group: CatalogItemGroup }) {\r\n    const group = event.group;\r\n    this.store.state.update(group, { added: event.added }, false);\r\n    event.added ? this.addGroupToMap(group) : this.removeGroupFromMap(group);\r\n  }\r\n\r\n  /**\r\n   * Add layer to map\r\n   * @param layer Catalog layer\r\n   */\r\n  private addLayerToMap(layer: CatalogItemLayer) {\r\n    this.addLayersToMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Remove layer from map\r\n   * @param layer Catalog layer\r\n   */\r\n  private removeLayerFromMap(layer: CatalogItemLayer) {\r\n    this.removeLayersFromMap([layer]);\r\n  }\r\n\r\n  /**\r\n   * Add multiple layers to map\r\n   * @param layers Catalog layers\r\n   */\r\n  private addLayersToMap(layers: CatalogItemLayer[]) {\r\n    const layers$ = layers.map((layer: CatalogItemLayer) => {\r\n      return this.layerService.createAsyncLayer(layer.options);\r\n    });\r\n\r\n    zip(...layers$).subscribe((oLayers: Layer[]) => {\r\n      this.store.state.updateMany(layers, { added: true });\r\n      this.map.addLayers(oLayers);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove multiple layers from map\r\n   * @param layers Catalog layers\r\n   */\r\n  private removeLayersFromMap(layers: CatalogItemLayer[]) {\r\n    layers.forEach((layer: CatalogItemLayer) => {\r\n      this.store.state.update(layer, { added: false });\r\n      const oLayer = this.map.getLayerById(layer.id);\r\n      if (oLayer !== undefined) {\r\n        this.map.removeLayer(oLayer);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add all the layers of a group to map\r\n   * @param group Catalog group\r\n   */\r\n  private addGroupToMap(group: CatalogItemGroup) {\r\n    const layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === false;\r\n    });\r\n    this.addLayersToMap(layers as CatalogItemLayer[]);\r\n  }\r\n\r\n  /**\r\n   * Remove all the layers of a groufrom map\r\n   * @param group Catalog group\r\n   */\r\n  private removeGroupFromMap(group: CatalogItemGroup) {\r\n    const layers = group.items.filter((item: CatalogItem) => {\r\n      const added = this.store.state.get(item).added || false;\r\n      return this.isLayer(item) && added === true;\r\n    });\r\n    this.removeLayersFromMap(layers as CatalogItemLayer[]);\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { CatalogItemLayer } from '../shared';\r\n\r\n/**\r\n * Catalog browser layer item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-layer',\r\n  templateUrl: './catalog-browser-layer.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserLayerComponent {\r\n\r\n  /**\r\n   * Catalog layer\r\n   */\r\n  @Input() layer: CatalogItemLayer;\r\n\r\n  /**\r\n   * Whether the layer is already added to the map\r\n   */\r\n  @Input() added: boolean;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.layer); }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string { return getEntityIcon(this.layer) || 'layers'; }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added ? this.remove() : this.add();\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    this.added = true;\r\n    this.addedChange.emit({added: true, layer: this.layer});\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = false\r\n   */\r\n  private remove() {\r\n    this.added = false;\r\n    this.addedChange.emit({added: false, layer: this.layer});\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStateManager, EntityStore } from '@igo2/common';\r\n\r\nimport {\r\n  Catalog,\r\n  CatalogItem,\r\n  CatalogItemGroup,\r\n  CatalogItemLayer,\r\n  CatalogItemState,\r\n  CatalogItemType\r\n} from '../shared';\r\n\r\n/**\r\n * Catalog browser group item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-browser-group',\r\n  templateUrl: './catalog-browser-group.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogBrowserGroupComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Group's items store\r\n   * @internal\r\n   */\r\n  store = new EntityStore<CatalogItem, CatalogItemState>([]);\r\n\r\n  /**\r\n   * Whether all the layers of the group are added\r\n   * @internal\r\n   */\r\n  added$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Whether the toggle button is disabled\r\n   * @internal\r\n   */\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Catalog group\r\n   */\r\n  @Input() group: CatalogItemGroup;\r\n\r\n  /**\r\n   * Whether the group is collapsed\r\n   */\r\n  @Input() collapsed: boolean = true;\r\n\r\n  /**\r\n   * Whether the group can be toggled when it's collapsed\r\n   */\r\n  @Input() toggleCollapsed: boolean = true;\r\n\r\n  /**\r\n   * Parent catalog's items store state. Groups share a unique\r\n   * EntityState that tracks the group and it's layers state (whether they are added or not).\r\n   * Sharing a unique state would also allow us to expand this component to allow\r\n   * the selection of a layer while unselecting any layer already selected in another group.\r\n   * This could be useful to display some layer info before adding it, for example.\r\n   */\r\n  @Input() state: EntityStateManager<CatalogItem, CatalogItemState>;\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of the group is clicked\r\n   */\r\n  @Output() addedChange = new EventEmitter<{\r\n    added: boolean;\r\n    group: CatalogItemGroup;\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the add/remove button of a layer is clicked\r\n   */\r\n  @Output() layerAddedChange = new EventEmitter<{\r\n    added: boolean;\r\n    layer: CatalogItemLayer;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return this.group.title;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.load(this.group.items);\r\n    this.evaluateAdded();\r\n    this.evaluateDisabled(this.collapsed);\r\n    if (this.catalog && this.catalog.sortDirection !== undefined) {\r\n      this.store.view.sort({\r\n        direction: this.catalog.sortDirection,\r\n        valueAccessor: (item: CatalogItem) => item.title\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.store.destroy();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isGroup(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Group;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isLayer(item: CatalogItem): boolean {\r\n    return item.type === CatalogItemType.Layer;\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added$.value ? this.remove() : this.add();\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleCollapsed(collapsed: boolean) {\r\n    this.evaluateDisabled(collapsed);\r\n  }\r\n\r\n  /**\r\n   * When a layer is added or removed, evaluate if all the layers of the group\r\n   * are now added or removed. If so, consider that the group itself is added\r\n   * or removed.\r\n   * @internal\r\n   * @param event Layer added change event\r\n   */\r\n  onLayerAddedChange(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    this.layerAddedChange.emit(event);\r\n    this.tryToggleGroup(event);\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private add() {\r\n    this.added$.next(true);\r\n    this.addedChange.emit({\r\n      added: true,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private remove() {\r\n    this.added$.next(false);\r\n    this.addedChange.emit({\r\n      added: false,\r\n      group: this.group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If all the layers of the group added or removed, add or remove the group itself.\r\n   * @param event The last layer added change event to occur\r\n   */\r\n  private tryToggleGroup(event: { added: boolean; layer: CatalogItemLayer }) {\r\n    const added = event.added;\r\n    const layer = event.layer;\r\n\r\n    const layersAdded = this.store.view\r\n      .all()\r\n      .filter((item: CatalogItem) => item.id !== layer.id)\r\n      .map((item: CatalogItem) => this.state.get(item).added || false);\r\n\r\n    if (layersAdded.every(value => value === added)) {\r\n      added ? this.add() : this.remove();\r\n    } else if (this.added$.value === true) {\r\n      this.added$.next(false);\r\n    }\r\n  }\r\n\r\n  private evaluateAdded() {\r\n    const added = this.store.all().every((item: CatalogItem) => {\r\n      return (this.state.get(item).added || false) === true;\r\n    });\r\n    this.added$.next(added);\r\n  }\r\n\r\n  private evaluateDisabled(collapsed: boolean) {\r\n    let disabled = false;\r\n    if (this.toggleCollapsed === false) {\r\n      disabled = collapsed;\r\n    }\r\n    this.disabled$.next(disabled);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule\r\n} from '@igo2/common';\r\n\r\nimport { IgoMetadataModule } from './../../metadata/metadata.module';\r\nimport { CatalogBrowserComponent } from './catalog-browser.component';\r\nimport { CatalogBrowserLayerComponent } from './catalog-browser-layer.component';\r\nimport { CatalogBrowserGroupComponent } from './catalog-browser-group.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoMetadataModule\r\n  ],\r\n  exports: [\r\n    CatalogBrowserComponent\r\n  ],\r\n  declarations: [\r\n    CatalogBrowserComponent,\r\n    CatalogBrowserGroupComponent,\r\n    CatalogBrowserLayerComponent\r\n  ]\r\n})\r\nexport class IgoCatalogBrowserModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { EntityStore } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\nimport { Catalog } from '../shared/catalog.interface';\r\n\r\n/**\r\n * Component to browse a list of available catalogs\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library',\r\n  templateUrl: './catalog-library.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryComponent implements OnInit {\r\n\r\n  /**\r\n   * Store holding the catalogs\r\n   */\r\n  @Input() store: EntityStore<Catalog>;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted a catalog is selected or unselected\r\n   */\r\n  @Output() catalogSelectChange = new EventEmitter<{\r\n    selected: boolean;\r\n    catalog: Catalog;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.store.state.clear();\r\n  }\r\n\r\n  /**\r\n   * When a catalog is selected, update it's state in the store\r\n   * and emit the catalog select change event\r\n   * @internal\r\n   */\r\n  onCatalogSelect(catalog: Catalog) {\r\n    this.store.state.update(catalog, {\r\n      selected: true,\r\n      focused: true\r\n    }, true);\r\n    this.catalogSelectChange.emit({selected: true, catalog});\r\n  }\r\n\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { Catalog } from '../shared/catalog.interface';\r\n\r\n/**\r\n * Catalog library item\r\n */\r\n@Component({\r\n  selector: 'igo-catalog-library-item',\r\n  templateUrl: './catalog-library-item.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CatalogLibaryItemComponent {\r\n\r\n  /**\r\n   * Catalog\r\n   */\r\n  @Input() catalog: Catalog;\r\n\r\n  /**\r\n   * Map to add the catalog items to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.catalog); }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string { return getEntityIcon(this.catalog) || 'image-multiple'; }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule } from '@igo2/common';\r\n\r\nimport { CatalogLibaryComponent, } from './catalog-library.component';\r\nimport { CatalogLibaryItemComponent } from './catalog-library-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoListModule\r\n  ],\r\n  exports: [\r\n    CatalogLibaryComponent\r\n  ],\r\n  declarations: [\r\n    CatalogLibaryComponent,\r\n    CatalogLibaryItemComponent\r\n  ]\r\n})\r\nexport class IgoCatalogLibraryModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoListModule, IgoCollapsibleModule } from '@igo2/common';\r\n\r\nimport { IgoCatalogBrowserModule } from './catalog-browser/catalog-browser.module';\r\nimport { IgoCatalogLibraryModule } from './catalog-library/catalog-library.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule\r\n  ],\r\n  exports: [\r\n    IgoCatalogBrowserModule,\r\n    IgoCatalogLibraryModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoCatalogModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoDataSourceModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDataSourceModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DataSource } from '../../datasource/shared/datasources/datasource';\r\n\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\nimport { TimeFilterableDataSource } from './time-filter.interface';\r\n\r\n@Pipe({\r\n  name: 'filterableDataSource'\r\n})\r\nexport class FilterableDataSourcePipe implements PipeTransform {\r\n  transform(value: Layer[], arg: string): Layer[] {\r\n    let layers;\r\n\r\n    if (arg === 'time') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as TimeFilterableDataSource;\r\n        return (\r\n          this.isTimeFilterable(datasource) &&\r\n          datasource.options.timeFilter !== undefined &&\r\n          Object.keys(datasource.options.timeFilter).length\r\n        );\r\n      });\r\n    }\r\n    if (arg === 'ogc') {\r\n      layers = value.filter((layer: Layer) => {\r\n        const datasource = layer.dataSource as OgcFilterableDataSource;\r\n        return this.isOgcFilterable(datasource);\r\n      });\r\n    }\r\n    return layers;\r\n  }\r\n\r\n  private isTimeFilterable(dataSource: TimeFilterableDataSource) {\r\n    if (dataSource.options.type !== 'wms') {\r\n      return false;\r\n    }\r\n    return dataSource.options.timeFilterable;\r\n  }\r\n\r\n  private isOgcFilterable(dataSource: OgcFilterableDataSource) {\r\n    if (\r\n      dataSource.options.ogcFilters &&\r\n      dataSource.options.ogcFilters.enabled\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { TileArcGISRestDataSource } from '../../datasource/shared/datasources/tilearcgisrest-datasource';\r\n\r\n@Injectable()\r\nexport class TimeFilterService {\r\n  constructor() {}\r\n\r\n  filterByDate(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    date: Date | [Date, Date]\r\n  ) {\r\n    let time;\r\n    let newdateform;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(date)) {\r\n      const dates = [];\r\n      if (date[0]) {\r\n        newdateformStart = this.reformatDateTime(date[0]);\r\n        dates.push(date[0]);\r\n      }\r\n      if (date[1]) {\r\n        newdateformEnd = this.reformatDateTime(date[1]);\r\n        dates.push(date[1]);\r\n      }\r\n      if (dates.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else if (date) {\r\n      newdateform = this.reformatDateTime(date);\r\n      time = newdateform;\r\n    }\r\n\r\n    const params = { time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  filterByYear(\r\n    datasource: WMSDataSource | TileArcGISRestDataSource,\r\n    year: string | [string, string]\r\n  ) {\r\n    let time;\r\n    let newdateformStart;\r\n    let newdateformEnd;\r\n\r\n    if (Array.isArray(year)) {\r\n      const years = [];\r\n      if (year[0]) {\r\n        newdateformStart = year[0];\r\n        years.push(year[0]);\r\n      }\r\n      if (year[1]) {\r\n        newdateformEnd = year[1];\r\n        years.push(year[1]);\r\n      }\r\n      if (years.length === 2 && newdateformStart !== newdateformEnd) {\r\n        if (datasource instanceof TileArcGISRestDataSource) {\r\n          time = newdateformStart + ',' + newdateformEnd;\r\n        } else {\r\n          time = newdateformStart + '/' + newdateformEnd;\r\n        }\r\n      }\r\n      if (newdateformStart === newdateformEnd) {\r\n        time = newdateformStart;\r\n      }\r\n    } else if (year) {\r\n      time = year;\r\n    }\r\n\r\n    const params = { time };\r\n    datasource.ol.updateParams(params);\r\n  }\r\n\r\n  private reformatDateTime(value) {\r\n    const year = value.getFullYear();\r\n    let month = value.getMonth() + 1;\r\n    let day = value.getUTCDate();\r\n    let hour = value.getUTCHours();\r\n    let minute = value.getUTCMinutes();\r\n\r\n    if (Number(month) < 10) {\r\n      month = '0' + month;\r\n    }\r\n\r\n    if (Number(day) < 10) {\r\n      day = '0' + day;\r\n    }\r\n\r\n    if (Number(hour) < 10) {\r\n      hour = '0' + hour;\r\n    }\r\n\r\n    if (Number(minute) < 10) {\r\n      minute = '0' + minute;\r\n    }\r\n\r\n    return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':00Z';\r\n  }\r\n}\r\n","export enum OgcFilterOperatorType {\r\n    BasicNumericOperator = 'BasicNumericOperator',\r\n    Basic = 'Basic',\r\n    BasicAndSpatial = 'BasicAndSpatial',\r\n    Spatial = 'Spatial',\r\n    All = 'All'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { OgcFilterWriter } from './ogc-filter';\r\nimport { OgcFilterableDataSource } from './ogc-filter.interface';\r\n\r\n@Injectable()\r\nexport class OGCFilterService {\r\n  constructor() {}\r\n\r\n  public filterByOgc(wmsDatasource: WMSDataSource, filterString: string) {\r\n    const appliedFilter = new OgcFilterWriter().formatProcessedOgcFilter(filterString, wmsDatasource.options.params.layers);\r\n    wmsDatasource.ol.updateParams({ filter: appliedFilter });\r\n  }\r\n\r\n  public setOgcWFSFiltersOptions(wfsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wfsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.paramsWFS.fieldNameGeometry,\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          options.ogcFilters.filters,\r\n          options.paramsWFS.fieldNameGeometry\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public setOgcWMSFiltersOptions(wmsDatasource: OgcFilterableDataSource) {\r\n    const options: any = wmsDatasource.options;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n\r\n    if (options.ogcFilters.enabled && options.ogcFilters.filters) {\r\n      options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(\r\n        options.ogcFilters.filters,\r\n        options.fieldNameGeometry,\r\n        true\r\n      );\r\n      if (!options.ogcFilters.interfaceOgcFilters) {\r\n        options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(\r\n          // With some wms server, this param must be set to make spatials call.\r\n          options.ogcFilters.filters,\r\n          options.fieldNameGeometry\r\n        );\r\n      }\r\n      this.filterByOgc(\r\n        wmsDatasource as WMSDataSource,\r\n        ogcFilterWriter.buildFilter(options.ogcFilters.filters)\r\n      );\r\n      options.filtered = true;\r\n    } else {\r\n      options.ogcFilters.filters = undefined;\r\n      options.ogcFilters.interfaceOgcFilters = [];\r\n      options.filtered = false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport olProjection from 'ol/proj/Projection';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { Layer } from '../../layer/shared';\r\nimport { OgcFilterWriter, OgcFilterableDataSourceOptions } from '../../filter/shared';\r\n\r\nimport { DataSourceOptions } from '../../datasource/shared/datasources/datasource.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DownloadService {\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  open(layer: Layer) {\r\n    const translate = this.languageService.translate;\r\n    const title = translate.instant('igo.geo.download.title');\r\n    this.messageService.success(\r\n      translate.instant('igo.geo.download.start'),\r\n      title\r\n    );\r\n\r\n    const DSOptions: DataSourceOptions = layer.dataSource.options;\r\n    if (Object.keys(DSOptions.download).length > 0) {\r\n      if (\r\n        DSOptions.download.dynamicUrl &&\r\n        DSOptions.download.url === undefined\r\n      ) {\r\n        let wfsOptions;\r\n        if (\r\n          (layer.dataSource.options as any).paramsWFS &&\r\n          Object.keys((layer.dataSource.options as any).paramsWFS).length > 0\r\n        ) {\r\n          wfsOptions = (layer.dataSource.options as any).paramsWFS;\r\n        } else {\r\n          wfsOptions = (layer.dataSource.options as any).params;\r\n        }\r\n\r\n        const outputFormatDownload =\r\n          wfsOptions.outputFormatDownload === undefined\r\n            ? 'outputformat=' + wfsOptions.outputFormat\r\n            : 'outputformat=' + wfsOptions.outputFormatDownload;\r\n\r\n        const baseurl = DSOptions.download.dynamicUrl\r\n          .replace(/&?outputformat=[^&]*/gi, '')\r\n          .replace(/&?filter=[^&]*/gi, '')\r\n          .replace(/&?bbox=[^&]*/gi, '');\r\n\r\n        const ogcFilters = (layer.dataSource.options as OgcFilterableDataSourceOptions).ogcFilters;\r\n\r\n        let filterQueryString;\r\n        filterQueryString = new OgcFilterWriter()\r\n        .handleOgcFiltersAppliedValue(layer.dataSource.options, ogcFilters.geometryName);\r\n        if (!filterQueryString) {\r\n          // Prevent getting all the features for empty filter\r\n            filterQueryString = new OgcFilterWriter().buildFilter(\r\n            undefined,\r\n            layer.map.getExtent(),\r\n            new olProjection({ code: layer.map.projection }),\r\n            ogcFilters.geometryName\r\n          );\r\n        } else {\r\n          filterQueryString = 'filter=' + filterQueryString;\r\n        }\r\n        window.open(\r\n          `${baseurl}&${filterQueryString}&${outputFormatDownload}`,\r\n          '_blank'\r\n        );\r\n      } else if (DSOptions.download) {\r\n        window.open(DSOptions.download.url, '_blank');\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\nimport { DownloadDataSourceOptions } from '../shared/download.interface';\r\nimport { DownloadService } from '../shared/download.service';\r\n\r\n@Component({\r\n  selector: 'igo-download-button',\r\n  templateUrl: './download-button.component.html',\r\n  styleUrls: ['./download-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DownloadButtonComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private downloadService: DownloadService) {}\r\n\r\n  openDownload(layer: Layer) {\r\n    this.downloadService.open(layer);\r\n  }\r\n\r\n  get options(): DownloadDataSourceOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { DownloadButtonComponent } from './download-button/download-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [DownloadButtonComponent],\r\n  declarations: [DownloadButtonComponent]\r\n})\r\nexport class IgoDownloadModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDownloadModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\n\r\nimport { getEntityTitle, getEntityIcon } from '@igo2/common';\r\n\r\nimport { Feature } from '../shared';\r\nimport { NetworkService, ConnectionState } from '@igo2/core';\r\nimport { MVTDataSourceOptions, XYZDataSourceOptions, FeatureDataSourceOptions } from '../../datasource';\r\nimport { MapService } from '../../map/shared/map.service';\r\n\r\n@Component({\r\n  selector: 'igo-feature-details',\r\n  templateUrl: './feature-details.component.html',\r\n  styleUrls: ['./feature-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureDetailsComponent {\r\n\r\n  private state: ConnectionState;\r\n\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  private _feature: Feature;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.feature);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.feature) || 'link';\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private sanitizer: DomSanitizer,\r\n    private networkService: NetworkService,\r\n    private mapService: MapService\r\n  ) {\r\n    this.networkService.currentState().subscribe((state: ConnectionState) => {\r\n      this.state = state;\r\n    });\r\n  }\r\n\r\n  htmlSanitizer(value): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n  }\r\n\r\n  isObject(value) {\r\n    return typeof value === 'object';\r\n  }\r\n\r\n  isUrl(value) {\r\n    if (typeof value === 'string') {\r\n      return (\r\n        value.slice(0, 8) === 'https://' || value.slice(0, 7) === 'http://'\r\n      );\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  filterFeatureProperties(feature) {\r\n    let sourceOptions;\r\n    const allowedFieldsAndAlias = feature.meta ? feature.meta.alias : undefined;\r\n    const properties = Object.assign({}, feature.properties);\r\n    const layerName = feature.meta.title;\r\n    const layers = this.mapService.getMap().layers$.value;\r\n\r\n    if (allowedFieldsAndAlias) {\r\n      Object.keys(properties).forEach(property => {\r\n        if (Object.keys(allowedFieldsAndAlias).indexOf(property) === -1) {\r\n          delete properties[property];\r\n        } else {\r\n          properties[allowedFieldsAndAlias[property]] = properties[property];\r\n          if (allowedFieldsAndAlias[property] !== property) {\r\n            delete properties[property];\r\n          }\r\n        }\r\n      });\r\n      return properties;\r\n    } else {\r\n      layers.forEach(layer => {\r\n        if (layer.dataSource.options.type === 'mvt') {\r\n          sourceOptions = (layer.dataSource.options as MVTDataSourceOptions);\r\n        } else if (layer.dataSource.options.type === 'xyz') {\r\n          sourceOptions = (layer.dataSource.options as XYZDataSourceOptions);\r\n        } else if (layer.dataSource.options.type === 'vector') {\r\n          sourceOptions = (layer.dataSource.options as FeatureDataSourceOptions);\r\n        } else {\r\n          return;\r\n        }\r\n        if (this.state.connection && sourceOptions.excludeAttribute) {\r\n          const exclude = sourceOptions.excludeAttribute;\r\n          exclude.forEach(attribute => {\r\n            if (layerName === layer.title) {\r\n                delete feature.properties[attribute];\r\n            }\r\n          });\r\n        } else if (!this.state.connection && sourceOptions.excludeAttributeOffline) {\r\n          const excludeAttributeOffline = sourceOptions.excludeAttributeOffline;\r\n          excludeAttributeOffline.forEach(attribute => {\r\n            if (layerName === layer.title) {\r\n                delete feature.properties[attribute];\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return feature.properties;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { FeatureDetailsComponent } from './feature-details.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [FeatureDetailsComponent],\r\n  declarations: [FeatureDetailsComponent]\r\n})\r\nexport class IgoFeatureDetailsModule {}\r\n","import * as olstyle from 'ol/style';\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Form, getEntityRevision } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FEATURE } from '../shared/feature.enums';\r\nimport { Feature, FeatureMeta } from '../shared/feature.interfaces';\r\nimport { FeatureStore } from '../shared/store';\r\nimport { FeatureStoreSelectionStrategy } from '../shared/strategies/selection';\r\n\r\n/**\r\n * A configurable form, optionnally bound to a feature.\r\n * This component creates an entity form and, on submit,\r\n * returns a feature made out of the submitted data. It also\r\n * does things like managing the feature visibility while it's being updated\r\n * as well as disabling the selection of another feature.\r\n */\r\n@Component({\r\n  selector: 'igo-feature-form',\r\n  templateUrl: './feature-form.component.html',\r\n  styleUrls: ['./feature-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeatureFormComponent implements OnChanges, OnDestroy {\r\n  public feature$: BehaviorSubject<Feature> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Form\r\n   */\r\n  @Input() form: Form;\r\n\r\n  /**\r\n   * Feature to update\r\n   */\r\n  @Input() feature: Feature | undefined;\r\n\r\n  /**\r\n   * The store the feature belongs to. Required to manage the\r\n   * visiblity and selection.\r\n   */\r\n  @Input() store: FeatureStore | undefined;\r\n\r\n  /**\r\n   * Event emitted when the form is submitted\r\n   */\r\n  @Output() submitForm = new EventEmitter<Feature>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const store = changes.store;\r\n    if (store && store.currentValue !== store.previousValue) {\r\n      this.setStore(store.currentValue);\r\n    }\r\n\r\n    const feature = changes.feature;\r\n    if (feature && feature.currentValue !== feature.previousValue) {\r\n      this.feature$.next(feature.currentValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the original feature and reactivate the selection\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.setStore(undefined);\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature and emit an event\r\n   * @param event Form submit event\r\n   * @internal\r\n   */\r\n  onSubmit(data: { [key: string]: any }) {\r\n    const feature = this.formDataToFeature(data);\r\n    this.submitForm.emit(feature);\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature\r\n   * @param data Form data\r\n   * @returns A feature\r\n   */\r\n  private formDataToFeature(data: { [key: string]: any }): Feature {\r\n    const properties = {};\r\n    const meta = {};\r\n    if (this.feature === undefined) {\r\n      (meta as any).id = uuid();\r\n    } else {\r\n      Object.assign(properties, this.feature.properties);\r\n      Object.assign(meta, this.feature.meta, {\r\n        revision: getEntityRevision(this.feature) + 1\r\n      });\r\n    }\r\n\r\n    const propertyPrefix = 'properties.';\r\n    Object.entries(data).forEach((entry: [string, any]) => {\r\n      const [key, value] = entry;\r\n      if (key.startsWith(propertyPrefix)) {\r\n        const property = key.substr(propertyPrefix.length);\r\n        properties[property] = value;\r\n      }\r\n    });\r\n\r\n    let geometry = data.geometry;\r\n    if (geometry === undefined && this.feature !== undefined) {\r\n      geometry = this.feature.geometry;\r\n    }\r\n\r\n    return {\r\n      meta: meta as FeatureMeta,\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: 'EPSG:4326',\r\n      properties\r\n    };\r\n  }\r\n\r\n  private setStore(store: FeatureStore) {\r\n    if (this.store !== undefined) {\r\n      this.activateStoreSelection(this.store);\r\n    }\r\n    if (store !== undefined) {\r\n      this.deactivateStoreSelection(store);\r\n    }\r\n    this.store = store;\r\n  }\r\n\r\n  /**\r\n   * Deactivate feature selection from the store and from the map\r\n   */\r\n  private deactivateStoreSelection(store: FeatureStore) {\r\n    const selectionStrategy = store.getStrategyOfType(\r\n      FeatureStoreSelectionStrategy\r\n    );\r\n    if (selectionStrategy !== undefined) {\r\n      selectionStrategy.deactivate();\r\n      (selectionStrategy as FeatureStoreSelectionStrategy).unselectAll();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reactivate feature selection from the store and from the map\r\n   */\r\n  private activateStoreSelection(store: FeatureStore) {\r\n    // TODO: maybe we should recativate the strategies only if they\r\n    // were active in the first place\r\n    store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFormModule } from '@igo2/common';\r\n\r\nimport { FeatureFormComponent } from './feature-form.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoFormModule\r\n  ],\r\n  exports: [\r\n    IgoFormModule,\r\n    FeatureFormComponent\r\n  ],\r\n  declarations: [\r\n    FeatureFormComponent\r\n  ]\r\n})\r\nexport class IgoFeatureFormModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFeatureDetailsModule } from './feature-details/feature-details.module';\r\nimport { IgoFeatureFormModule } from './feature-form/feature-form.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoFeatureDetailsModule,\r\n    IgoFeatureFormModule\r\n  ],\r\n  declarations: [],\r\n  providers: []\r\n})\r\nexport class IgoFeatureModule {}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatSlider } from '@angular/material';\r\nimport * as moment from 'moment';\r\n\r\nimport { TimeFilterOptions } from '../shared/time-filter.interface';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-form',\r\n  templateUrl: './time-filter-form.component.html',\r\n  styleUrls: ['./time-filter-form.component.scss']\r\n})\r\nexport class TimeFilterFormComponent implements OnInit {\r\n  @Input()\r\n  get options(): TimeFilterOptions {\r\n    return this._options;\r\n  }\r\n  set options(value: TimeFilterOptions) {\r\n    this._options = value;\r\n  }\r\n  private _options: TimeFilterOptions;\r\n\r\n  public date: Date;\r\n  public startDate: Date;\r\n  public endDate: Date;\r\n  public year: any;\r\n  public startYear: any;\r\n  public endYear: any;\r\n  public initStartYear: any;\r\n  public initEndYear: any;\r\n  public listYears: Array<string> = [];\r\n  public startListYears: Array<string> = [];\r\n  public endListYears: Array<string> = [];\r\n\r\n  @Input()\r\n  set currentValue(value: string) {\r\n    if (value) {\r\n      if (this.type !== 'year') {\r\n        const valueArray = value.split('/');\r\n        if (valueArray.length > 0) {\r\n          const startDate = new Date(valueArray[0]);\r\n          const endDate = new Date(valueArray[1]);\r\n          if (!isNaN(startDate.valueOf())) {\r\n            this.startDate = startDate;\r\n          }\r\n          if (!isNaN(endDate.valueOf())) {\r\n            this.endDate = endDate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public interval: any;\r\n  public playIcon = 'play_circle_filled';\r\n\r\n  @Output() change: EventEmitter<Date | [Date, Date]> = new EventEmitter();\r\n  @Output()\r\n  yearChange: EventEmitter<string | [string, string]> = new EventEmitter();\r\n  @ViewChild(MatSlider) mySlider;\r\n\r\n  get type(): 'date' | 'time' | 'datetime' | 'year' {\r\n    return this.options.type === undefined ? 'date' : this.options.type;\r\n  }\r\n\r\n  get isRange(): boolean {\r\n    return this.options.range === undefined || this.options.style === 'slider'\r\n      ? false\r\n      : this.options.range;\r\n  }\r\n\r\n  get style(): string {\r\n    return this.options.style === undefined ? 'slider' : this.options.style;\r\n  }\r\n\r\n  get step(): number {\r\n    let step = 10800000;\r\n    if (this.options.step === undefined) {\r\n      switch (this.type) {\r\n        case 'date':\r\n        case 'datetime':\r\n          step = 10800000;\r\n          break;\r\n        case 'time':\r\n          step = 3600000;\r\n          break;\r\n        case 'year':\r\n          step = 31536000000;\r\n          break;\r\n        default:\r\n          step = 10800000;\r\n      }\r\n    } else {\r\n      step = this.getStepDefinition(this.options.step);\r\n    }\r\n\r\n    return step;\r\n  }\r\n\r\n  get timeInterval(): number {\r\n    return this.options.timeInterval === undefined\r\n      ? 2000\r\n      : this.options.timeInterval;\r\n  }\r\n\r\n  get min(): Date {\r\n    return this.options.min === undefined\r\n      ? undefined\r\n      : new Date(this.options.min);\r\n  }\r\n\r\n  get max(): Date {\r\n    return this.options.max === undefined\r\n      ? undefined\r\n      : new Date(this.options.max);\r\n  }\r\n\r\n  get is(): boolean {\r\n    return this.options.range === undefined ? false : this.options.range;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    if (this.startDate === undefined) {\r\n      const utcmin = new Date(this.min);\r\n      this.startDate = new Date(\r\n        utcmin.getTime() + utcmin.getTimezoneOffset() * 60000\r\n      );\r\n    }\r\n    if (this.endDate === undefined) {\r\n      const utcmax = new Date(this.max);\r\n      this.endDate = new Date(\r\n        utcmax.getTime() + utcmax.getTimezoneOffset() * 60000\r\n      );\r\n    }\r\n    if (this.startYear === undefined) {\r\n      this.startYear = new Date(this.startDate).getFullYear();\r\n      this.initStartYear = this.startYear;\r\n    }\r\n    if (this.endYear === undefined) {\r\n      this.endYear = new Date(this.endDate).getFullYear();\r\n      this.initEndYear = this.endYear;\r\n    }\r\n\r\n    if (!this.isRange) {\r\n      for (let i = this.startYear; i <= this.endYear + 1; i++) {\r\n        this.listYears.push(i);\r\n      }\r\n    } else {\r\n      for (let i = this.startYear; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      for (let i = this.startYear + 1; i <= this.endYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleDateChange(event: any) {\r\n    this.setupDateOutput();\r\n    this.applyTypeChange();\r\n\r\n    // Only if is range, use 2 dates to make the range\r\n    if (this.isRange) {\r\n      this.change.emit([this.startDate, this.endDate]);\r\n    } else {\r\n      this.change.emit(this.startDate);\r\n    }\r\n  }\r\n\r\n  handleYearChange(event: any) {\r\n    if (this.isRange) {\r\n      this.endListYears = [];\r\n      for (let i = this.startYear + 1; i <= this.initEndYear; i++) {\r\n        this.endListYears.push(i);\r\n      }\r\n      this.startListYears = [];\r\n      for (let i = this.initStartYear + 1; i < this.endYear; i++) {\r\n        this.startListYears.push(i);\r\n      }\r\n      this.yearChange.emit([this.startYear, this.endYear]);\r\n    } else {\r\n      this.yearChange.emit(this.year);\r\n    }\r\n  }\r\n\r\n  handleListYearChange(event: any) {\r\n    this.handleYearChange([this.startYear, this.endYear]);\r\n  }\r\n\r\n  handleListYearStartChange(event: any) {\r\n    this.change.emit([this.startDate, this.endDate]);\r\n  }\r\n\r\n  dateToNumber(date: Date): number {\r\n    let newDate;\r\n    if (date) {\r\n      newDate = new Date(date);\r\n    } else {\r\n      newDate = new Date(this.min);\r\n    }\r\n\r\n    return newDate.getTime();\r\n  }\r\n\r\n  setSliderThumbLabel(label: string) {\r\n    const thumbLabel = this.findThumbLabel(\r\n      this.mySlider._elementRef.nativeElement.childNodes\r\n    );\r\n    if (thumbLabel) {\r\n      thumbLabel.textContent = label;\r\n    }\r\n  }\r\n\r\n  findThumbLabel(test: any[]): any {\r\n    let thumbLabel;\r\n\r\n    test.forEach(value => {\r\n      if (value.className === 'mat-slider-thumb-label-text') {\r\n        thumbLabel = value;\r\n      }\r\n\r\n      if (value.children.length > 0 && !thumbLabel) {\r\n        thumbLabel = this.findThumbLabel(value.childNodes);\r\n      }\r\n    }, this);\r\n    return thumbLabel;\r\n  }\r\n\r\n  playFilter(event: any) {\r\n    if (this.interval) {\r\n      this.stopFilter();\r\n    } else {\r\n      this.playIcon = 'pause_circle_filled';\r\n      this.interval = setInterval(\r\n        (that) => {\r\n          let newMinDateNumber;\r\n          const maxDateNumber = new Date(that.max);\r\n\r\n          newMinDateNumber =\r\n            that.date === undefined ? that.min.getTime() : that.date.getTime();\r\n          newMinDateNumber += that.mySlider.step;\r\n          that.date = new Date(newMinDateNumber);\r\n\r\n          if (newMinDateNumber > maxDateNumber.getTime()) {\r\n            that.stopFilter();\r\n          }\r\n\r\n          that.handleDateChange({ value: that.date, date: that.date });\r\n        },\r\n        this.timeInterval,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  stopFilter() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n    this.interval = undefined;\r\n    this.playIcon = 'play_circle_filled';\r\n  }\r\n\r\n  handleSliderDateChange(event: any) {\r\n    this.date = new Date(event.value);\r\n    this.setSliderThumbLabel(this.handleSliderTooltip());\r\n    this.handleDateChange(event);\r\n  }\r\n\r\n  handleSliderValue(): number {\r\n    if (this.options.current === true || !this.min) {\r\n      const currentDate = new Date();\r\n      this.date = this.getRoundedDate(currentDate);\r\n    }\r\n    return this.date === undefined ? this.min.getTime() : this.date.getTime();\r\n  }\r\n\r\n  handleSliderTooltip() {\r\n    let label: string;\r\n\r\n    switch (this.type) {\r\n      case 'date':\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toDateString()\r\n            : this.date.toDateString();\r\n        break;\r\n      case 'time':\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toTimeString()\r\n            : this.date.toTimeString();\r\n        break;\r\n      // datetime\r\n      default:\r\n        label =\r\n          this.date === undefined\r\n            ? this.min.toUTCString()\r\n            : this.date.toUTCString();\r\n        break;\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  setupDateOutput() {\r\n    if (this.style === 'slider') {\r\n      this.startDate = new Date(this.date);\r\n      this.startDate.setSeconds(-(this.step / 1000));\r\n      this.endDate = new Date(this.startDate);\r\n      this.endDate.setSeconds(this.step / 1000);\r\n    } else if (!this.isRange && !!this.date) {\r\n      this.endDate = new Date(this.date);\r\n      this.startDate = new Date(this.date);\r\n    } else if (this.isRange && (!!this.date || !this.date)) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    } else if (!this.date) {\r\n      this.startDate =\r\n        this.startDate === undefined ? new Date(this.min) : this.startDate;\r\n      this.endDate =\r\n        this.endDate === undefined ? new Date(this.max) : this.endDate;\r\n    }\r\n  }\r\n\r\n  applyTypeChange() {\r\n    switch (this.type) {\r\n      case 'date':\r\n        if (this.startDate !== undefined || this.endDate !== undefined) {\r\n          this.startDate.setHours(0);\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setHours(23);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      case 'time':\r\n        if (this.style === 'calendar') {\r\n          if (this.startDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.startDate.getHours();\r\n            const selectedMinute = this.startDate.getMinutes();\r\n            this.startDate = this.min;\r\n            this.startDate.setHours(selectedHour);\r\n            this.startDate.setMinutes(selectedMinute);\r\n          }\r\n\r\n          if (this.endDate.getDay() !== this.min.getDay()) {\r\n            const selectedHour = this.endDate.getHours();\r\n            const selectedMinute = this.endDate.getMinutes();\r\n            this.endDate = this.min;\r\n            this.endDate.setHours(selectedHour);\r\n            this.endDate.setMinutes(selectedMinute);\r\n          }\r\n        }\r\n\r\n        if (!this.isRange && this.step > 60 * 60 * 1000) {\r\n          this.startDate.setMinutes(0);\r\n          this.startDate.setSeconds(0);\r\n          this.endDate.setMinutes(59);\r\n          this.endDate.setSeconds(59);\r\n        }\r\n        break;\r\n      // datetime\r\n      default:\r\n      // do nothing\r\n    }\r\n  }\r\n\r\n  getRangeMinDate(): Date {\r\n    return this.startDate === undefined ? this.min : this.startDate;\r\n  }\r\n\r\n  getRangeMaxDate(): Date {\r\n    return this.endDate === undefined ? this.max : this.endDate;\r\n  }\r\n\r\n  /**\r\n   * Round date at a certain time, 10 minutes by Default\r\n   * @param date - Date to Round\r\n   * @param atMinute - round to closest 'atMinute' minute, rounded 10 by default\r\n   * @return the rounded date\r\n   */\r\n  getRoundedDate(date, atMinute = 10) {\r\n    const coeff = 1000 * 60 * atMinute;\r\n    return new Date(Math.round(date.getTime() / coeff) * coeff);\r\n  }\r\n\r\n  /**\r\n   * Get the step (period) definition from the layer dimension tag\r\n   * @param step The step as ISO 8601 example: PT10M for 10 Minutes\r\n   * @return the duration in milliseconds\r\n   */\r\n  getStepDefinition(step) {\r\n    return moment.duration(step).asMilliseconds();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { TimeFilterableDataSource } from '../shared/time-filter.interface';\r\nimport { TimeFilterService } from '../shared/time-filter.service';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-item',\r\n  templateUrl: './time-filter-item.component.html',\r\n  styleUrls: ['./time-filter-item.component.scss']\r\n})\r\nexport class TimeFilterItemComponent {\r\n  @Input()\r\n  get layer(): Layer {\r\n    return this._layer;\r\n  }\r\n  set layer(value: Layer) {\r\n    this._layer = value;\r\n  }\r\n  private _layer: Layer;\r\n\r\n  get datasource(): TimeFilterableDataSource {\r\n    return this.layer.dataSource as TimeFilterableDataSource;\r\n  }\r\n  constructor(private timeFilterService: TimeFilterService) {}\r\n\r\n  handleYearChange(year: string | [string, string]) {\r\n    this.timeFilterService.filterByYear(this.datasource, year);\r\n  }\r\n\r\n  handleDateChange(date: Date | [Date, Date]) {\r\n    this.timeFilterService.filterByDate(this.datasource, date);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\n\r\n@Component({\r\n  selector: 'igo-time-filter-list',\r\n  templateUrl: './time-filter-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TimeFilterListComponent {\r\n  @Input()\r\n  get layers(): Layer[] {\r\n    return this._layers;\r\n  }\r\n  set layers(value: Layer[]) {\r\n    this._layers = value;\r\n    this.cdRef.detectChanges();\r\n  }\r\n  private _layers: Layer[] = [];\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { TimeFilterListComponent } from './time-filter-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoTimeFilterListBinding]'\r\n})\r\nexport class TimeFilterListBindingDirective implements OnInit, OnDestroy {\r\n  private component: TimeFilterListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: TimeFilterListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport * as olproj from 'ol/proj';\r\nimport olWKT from 'ol/format/WKT';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WktService {\r\n  constructor() {}\r\n\r\n  public wktToFeature(wkt, wktProj, featureProj = 'EPSG:3857') {\r\n    return new olWKT().readFeature(wkt, {\r\n      dataProjection: wktProj,\r\n      featureProjection: featureProj\r\n    });\r\n  }\r\n  public extentToWkt(epsgTO, extent, extentProj) {\r\n    let currentExtent = olproj.transformExtent(extent, extentProj, epsgTO);\r\n    currentExtent = this.roundCoordinateArray(currentExtent, epsgTO, 0);\r\n    const wktPoly = `POLYGON((\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]}))`;\r\n    const wktLine = `LINESTRING(\r\n      ${extent[0]} ${extent[1]},\r\n      ${extent[0]} ${extent[3]},\r\n      ${extent[2]} ${extent[3]},\r\n      ${extent[2]} ${extent[1]},\r\n      ${extent[0]} ${extent[1]})`;\r\n    const wktMultiPoints = `MULTIPOINT(\r\n        ${extent[0]} ${extent[1]},\r\n        ${extent[0]} ${extent[3]},\r\n        ${extent[2]} ${extent[3]},\r\n        ${extent[2]} ${extent[1]})`;\r\n    return {\r\n      wktPoly,\r\n      wktLine,\r\n      wktMultiPoints\r\n    };\r\n  }\r\n\r\n  private roundCoordinateArray(coordinateArray, projection, decimal = 0) {\r\n    const lproj = olproj.get(projection);\r\n    const units = lproj.getUnits();\r\n    const olUnits = ['ft', 'm', 'us-ft'];\r\n    if (olUnits.indexOf(units) !== -1) {\r\n      coordinateArray = this.roundArray(coordinateArray, decimal);\r\n    }\r\n    return coordinateArray;\r\n  }\r\n\r\n  private roundArray(array, decimal = 0) {\r\n    let x = 0;\r\n    while (x < array.length) {\r\n      array[x] = array[x].toFixed(decimal);\r\n      x++;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  public snrcToWkt(snrc, epsgTO = 'EPSG:3857') {\r\n    snrc = snrc.toLowerCase();\r\n    let wktPoly;\r\n    const ew = {\r\n      1: { from: -56, to: -64 },\r\n      2: { from: -64, to: -72 },\r\n      3: { from: -72, to: -80 },\r\n      4: { from: -80, to: -88 },\r\n      5: { from: -88, to: -96 },\r\n      6: { from: -96, to: -104 },\r\n      7: { from: -104, to: -112 },\r\n      8: { from: -112, to: -120 },\r\n      9: { from: -120, to: -128 },\r\n      10: { from: -128, to: -136 }\r\n    };\r\n    const sn = {\r\n      1: { from: 44, to: 48 },\r\n      2: { from: 48, to: 52 },\r\n      3: { from: 52, to: 56 },\r\n      4: { from: 56, to: 60 },\r\n      5: { from: 60, to: 64 },\r\n      6: { from: 64, to: 68 },\r\n      7: { from: 68, to: 72 },\r\n      8: { from: 72, to: 76 },\r\n      9: { from: 76, to: -128 }\r\n    };\r\n    const snrc250kIndex = [\r\n      ['m', 'n', 'o', 'p'],\r\n      ['l', 'k', 'j', 'i'],\r\n      ['e', 'f', 'g', 'h'],\r\n      ['d', 'c', 'b', 'a']\r\n    ];\r\n\r\n    const snrc50kIndex = [\r\n      ['13', '14', '15', '16'],\r\n      ['12', '11', '10', '09'],\r\n      ['05', '06', '07', '08'],\r\n      ['04', '03', '02', '01']\r\n    ];\r\n    const checkSNRC50k = /\\d{2,3}[a-p][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n\r\n    let snrc1m = false;\r\n    let snrc250k = false;\r\n    let snrc50k = false;\r\n\r\n    if (checkSNRC50k.test(snrc)) {\r\n      snrc50k = true;\r\n    } else {\r\n      if (checkSNRC250k.test(snrc)) {\r\n        snrc250k = true;\r\n      } else {\r\n        if (checkSNRC1m.test(snrc)) {\r\n          snrc1m = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (snrc1m) {\r\n      snrc += 'a01';\r\n    } else if (snrc250k) {\r\n      snrc += '01';\r\n    }\r\n    if (/\\d{2,3}[a-p][0,1][0-9]/gi.test(snrc)) {\r\n      const regex1m = /(?=[a-p])/gi;\r\n      const ar1m = snrc.split(regex1m);\r\n      const part1m = ar1m[0];\r\n      const part250k = ar1m[1][0];\r\n      const part50k = ar1m[1].split(part250k)[1];\r\n      let separator = 1;\r\n      if (part1m.length === 3) {\r\n        separator = 2;\r\n      }\r\n      const partEW = part1m.substring(0, separator);\r\n      const partSN = part1m.substring(separator);\r\n      const unit1mEW = 8;\r\n      const unit1mSN = 4;\r\n      const unit250kEW = 2;\r\n      const unit250kSN = 1;\r\n      const unit50kEW = 0.5;\r\n      const unit50kSN = 0.25;\r\n      let index250kEW = 0;\r\n      let index250kSN = 0;\r\n      let index50kEW = 0;\r\n      let index50kSN = 0;\r\n      snrc250kIndex.forEach(element => {\r\n        if (element.indexOf(part250k) !== -1) {\r\n          index250kSN = snrc250kIndex.indexOf(element);\r\n          index250kEW = element.indexOf(part250k);\r\n        }\r\n      });\r\n      snrc50kIndex.forEach(element => {\r\n        if (element.indexOf(part50k) !== -1) {\r\n          index50kSN = snrc50kIndex.indexOf(element);\r\n          index50kEW = element.indexOf(part50k);\r\n        }\r\n      });\r\n\r\n      let increment250kEW = 0;\r\n      let increment250kSN = 0;\r\n      let increment50kEW = 0;\r\n      let increment50kSN = 0;\r\n      let unitPerTypeEW = unit1mEW;\r\n      let unitPerTypeSN = unit1mSN;\r\n      if (snrc250k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = 0;\r\n        increment50kSN = 0;\r\n        unitPerTypeEW = unit250kEW;\r\n        unitPerTypeSN = unit250kSN;\r\n      } else if (snrc50k) {\r\n        increment250kEW = index250kEW * unit250kEW;\r\n        increment250kSN = index250kSN * unit250kSN;\r\n        increment50kEW = index50kEW * unit50kEW;\r\n        increment50kSN = index50kSN * unit50kSN;\r\n        unitPerTypeEW = unit50kEW;\r\n        unitPerTypeSN = unit50kSN;\r\n      }\r\n\r\n      const coord: {ul?: any, lr?: any, ur?: any, ll?: any} = {\r\n        ul: [\r\n          ew[partEW].to + increment250kEW + increment50kEW,\r\n          sn[partSN].to - increment250kSN - increment50kSN\r\n        ]\r\n      };\r\n\r\n      coord.lr = [\r\n        coord.ul[0] + unitPerTypeEW,\r\n        coord.ul[1] - unitPerTypeSN\r\n      ];\r\n      coord.ur = [coord.ul[0], coord.ul[1] - unitPerTypeSN];\r\n      coord.ll = [coord.ul[0] + unitPerTypeEW, coord.ul[1]];\r\n\r\n      coord.ul = olproj.transform(\r\n        [coord.ul[0], coord.ul[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.lr = olproj.transform(\r\n        [coord.lr[0], coord.lr[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ur = olproj.transform(\r\n        [coord.ur[0], coord.ur[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n      coord.ll = olproj.transform(\r\n        [coord.ll[0], coord.ll[1]],\r\n        'EPSG:4326',\r\n        epsgTO\r\n      );\r\n\r\n      // Rounded coordinate to shorten url in get\r\n      coord.ul = this.roundCoordinateArray(coord.ul, epsgTO, 0);\r\n      coord.lr = this.roundCoordinateArray(coord.lr, epsgTO, 0);\r\n      coord.ur = this.roundCoordinateArray(coord.ur, epsgTO, 0);\r\n      coord.ll = this.roundCoordinateArray(coord.ll, epsgTO, 0);\r\n\r\n      wktPoly =\r\n        'POLYGON((' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        '))';\r\n      const wktLine =\r\n        'LINESTRING(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' '),\r\n          coord.ul.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n\r\n      const wktMultiPoints =\r\n        'MULTIPOINT(' +\r\n        [\r\n          coord.ul.join(' '),\r\n          coord.ur.join(' '),\r\n          coord.lr.join(' '),\r\n          coord.ll.join(' ')\r\n        ].join(',') +\r\n        ')';\r\n      return {\r\n        wktPoly,\r\n        wktLine,\r\n        wktMultiPoints\r\n      };\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OgcInterfaceFilterOptions,\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { WktService } from '../../wkt/shared/wkt.service';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterOperatorType } from '../../filter/shared/ogc-filter.enum';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-form',\r\n  templateUrl: './ogc-filter-form.component.html',\r\n  styleUrls: ['./ogc-filter-form.component.scss']\r\n})\r\nexport class OgcFilterFormComponent implements OnInit {\r\n  public ogcFilterOperators;\r\n  public igoSpatialSelectors;\r\n  public value = '';\r\n  public inputOperator;\r\n  public fields: any[];\r\n  public values: any[];\r\n  public color = 'primary';\r\n  public snrc = '';\r\n  public disabled;\r\n  public baseOverlayName = 'ogcFilterOverlay_';\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() currentFilter: any;\r\n\r\n  get activeFilters() {\r\n    this.updateField();\r\n    return this.datasource.options.ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private wktService: WktService\r\n  ) {\r\n    // TODO: Filter permitted operator based on wfscapabilities\r\n    // Need to work on regex on XML capabilities because\r\n    // comaparison operator's name varies between WFS servers...\r\n    // Ex: IsNull vs PropertyIsNull vs IsNil ...\r\n    this.ogcFilterOperators = new OgcFilterWriter().operators;\r\n    this.igoSpatialSelectors = [\r\n      {\r\n        type: 'fixedExtent'\r\n      },\r\n      {\r\n        type: 'snrc'\r\n      }\r\n    ];\r\n    // TODO: selectFeature & drawFeature\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.computeAllowedOperators();\r\n  }\r\n\r\n  computeAllowedOperators() {\r\n    let allowedOperators = this.datasource.options.ogcFilters.allowedOperatorsType;\r\n    let effectiveOperators: {} = {};\r\n\r\n    if (!allowedOperators)  {\r\n      allowedOperators = OgcFilterOperatorType.BasicAndSpatial;\r\n    }\r\n\r\n    switch (allowedOperators.toLowerCase()) {\r\n      case 'all':\r\n        effectiveOperators = this.ogcFilterOperators;\r\n        break;\r\n      case 'spatial':\r\n        effectiveOperators = {\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n        break;\r\n      case 'basicandspatial':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n        break;\r\n      case 'basic':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] }\r\n        };\r\n        break;\r\n      case 'basicnumeric':\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsGreaterThan: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsGreaterThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsLessThan: { spatial: false, fieldRestrict: ['number'] },\r\n          PropertyIsLessThanOrEqualTo: { spatial: false, fieldRestrict: ['number'] },\r\n        };\r\n        break;\r\n      default:\r\n        effectiveOperators = {\r\n          PropertyIsEqualTo: { spatial: false, fieldRestrict: [] },\r\n          PropertyIsNotEqualTo: { spatial: false, fieldRestrict: [] },\r\n          Intersects: { spatial: true, fieldRestrict: [] },\r\n          Within: { spatial: true, fieldRestrict: [] },\r\n        };\r\n    }\r\n\r\n    this.ogcFilterOperators = effectiveOperators;\r\n  }\r\n\r\n  updateField() {\r\n    if (!this.datasource.options.sourceFields) {\r\n      return;\r\n    }\r\n    this.fields = this.datasource.options.sourceFields\r\n    .filter(sf => (sf.excludeFromOgcFilters === undefined || !sf.excludeFromOgcFilters));\r\n    this.fields.filter(f => f.name === this.currentFilter.propertyName)\r\n      .forEach(element => {\r\n        this.values = element.values !== undefined ? element.values.sort() : [];\r\n      });\r\n  }\r\n\r\n  toggleFilterState(event, filter: OgcInterfaceFilterOptions, property) {\r\n    this.updateField();\r\n    if (event.checked) {\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = true;\r\n        });\r\n    } else {\r\n      this.removeOverlayByID(filter.filterid);\r\n      this.datasource.options.ogcFilters.interfaceOgcFilters\r\n        .filter(f => f.filterid === filter.filterid)\r\n        .forEach(element => {\r\n          element[property] = false;\r\n        });\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  deleteFilter(filter: OgcInterfaceFilterOptions) {\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    ogcFilters.interfaceOgcFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.filterid !== filter.filterid\r\n    );\r\n    this.removeOverlayByID(filter.filterid);\r\n\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeNumericProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.changeProperty(filter, property, parseFloat(value));\r\n    this.refreshFilters();\r\n  }\r\n\r\n  private removeOverlayByID(id) {\r\n    const overlayId = this.baseOverlayName + id;\r\n    if (this.map.overlay.dataSource.ol.getFeatureById(overlayId)) {\r\n      this.map.overlay.dataSource.ol.removeFeature(\r\n        this.map.overlay.dataSource.ol.getFeatureById(overlayId)\r\n      );\r\n    }\r\n  }\r\n\r\n  changeOperator(filter) {\r\n    if (this.ogcFilterOperators[filter.operator].spatial === false) {\r\n      this.removeOverlayByID(filter.filterid);\r\n    }\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeProperty(filter: OgcInterfaceFilterOptions, property, value) {\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        element[property] = value;\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n\r\n  changeGeometry(filter, value?) {\r\n    const checkSNRC50k = /\\d{2,3}[a-l][0,1][0-9]/gi;\r\n    const checkSNRC250k = /\\d{2,3}[a-p]/gi;\r\n    const checkSNRC1m = /\\d{2,3}/gi;\r\n    const mapProjection = this.map.projection;\r\n    this.removeOverlayByID(filter.filterid);\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters\r\n      .filter(f => f.filterid === filter.filterid)\r\n      .forEach(element => {\r\n        let wktPoly;\r\n        if (filter.igoSpatialSelector === 'snrc') {\r\n          if (value === '' && this.snrc !== '') {\r\n            wktPoly = this.wktService.snrcToWkt(this.snrc).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          } else if (\r\n            value !== '' &&\r\n            (checkSNRC1m.test(value) ||\r\n              checkSNRC250k.test(value) ||\r\n              checkSNRC50k.test(value))\r\n          ) {\r\n            wktPoly = this.wktService.snrcToWkt(value).wktPoly;\r\n            element.wkt_geometry = wktPoly;\r\n          }\r\n        } else if (filter.igoSpatialSelector === 'fixedExtent') {\r\n          wktPoly = this.wktService.extentToWkt(\r\n            mapProjection,\r\n            this.map.getExtent(),\r\n            mapProjection\r\n          ).wktPoly;\r\n          element.wkt_geometry = wktPoly;\r\n        }\r\n      });\r\n    this.refreshFilters();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { OgcFilterableDataSource } from '../shared/ogc-filter.interface';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-form',\r\n  templateUrl: './ogc-filterable-form.component.html'\r\n})\r\nexport class OgcFilterableFormComponent {\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters;\r\n  }\r\n\r\n  get advancedOgcFilters(): boolean {\r\n    if (this.datasource.options.ogcFilters) {\r\n      return this.datasource.options.ogcFilters.advancedOgcFilters;\r\n    }\r\n    return;\r\n  }\r\n\r\n  public color = 'primary';\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport * as olstyle from 'ol/style';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { DownloadService } from '../../download/shared/download.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\nimport { WFSDataSourceOptionsParams } from '../../datasource/shared/datasources/wfs-datasource.interface';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  OgcFiltersOptions,\r\n  OgcInterfaceFilterOptions\r\n} from '../shared/ogc-filter.interface';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterWriter } from '../shared/ogc-filter';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-item',\r\n  templateUrl: './ogc-filterable-item.component.html',\r\n  styleUrls: ['./ogc-filterable-item.component.scss']\r\n})\r\nexport class OgcFilterableItemComponent implements OnInit {\r\n  public color = 'primary';\r\n  private lastRunOgcFilter;\r\n  private defaultLogicalParent = 'And';\r\n  public hasActiveSpatialFilter = false;\r\n  public filtersAreEditable = true;\r\n  public filtersCollapsed = true;\r\n  public hasPushButton: boolean = false;\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  get refreshFunc() {\r\n    return this.refreshFilters.bind(this);\r\n  }\r\n\r\n  get datasource(): OgcFilterableDataSource {\r\n    return this.layer.dataSource as OgcFilterableDataSource;\r\n  }\r\n\r\n  @Input() ogcFiltersHeaderShown: boolean;\r\n\r\n  get downloadable() {\r\n    return (this.datasource.options as any).download;\r\n  }\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService,\r\n    private downloadService: DownloadService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const ogcFilters = this.datasource.options.ogcFilters;\r\n    if (\r\n      ogcFilters.pushButtons &&\r\n      ogcFilters.pushButtons.length > 0) {\r\n        if (ogcFilters.advancedOgcFilters === undefined) {\r\n          ogcFilters.advancedOgcFilters = false;\r\n        }\r\n        this.hasPushButton = true;\r\n      }\r\n\r\n    switch (this.datasource.options.type) {\r\n      case 'wms':\r\n        this.ogcFilterService.setOgcWMSFiltersOptions(this.datasource);\r\n        break;\r\n      case 'wfs':\r\n        this.ogcFilterService.setOgcWFSFiltersOptions(this.datasource);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (ogcFilters) {\r\n      if (ogcFilters.interfaceOgcFilters) {\r\n        this.lastRunOgcFilter = JSON.parse(\r\n          JSON.stringify(ogcFilters.interfaceOgcFilters)\r\n        );\r\n        if (\r\n          ogcFilters.interfaceOgcFilters.filter(\r\n            f => f.wkt_geometry\r\n          ).length >= 1\r\n        ) {\r\n          this.hasActiveSpatialFilter = true;\r\n        }\r\n      }\r\n\r\n      this.filtersAreEditable = ogcFilters.editable\r\n        ? ogcFilters.editable\r\n        : false;\r\n    }\r\n  }\r\n\r\n  addFilterToSequence() {\r\n    this.filtersCollapsed = false;\r\n    const interfaceOgcFilters: OgcInterfaceFilterOptions[] = this.datasource.options.ogcFilters.interfaceOgcFilters;\r\n    const arr = interfaceOgcFilters || [];\r\n    const lastLevel = arr.length === 0 ? 0 : arr[arr.length - 1].level;\r\n    let firstFieldName = '';\r\n    if (this.datasource.options.sourceFields.length > 0) {\r\n      firstFieldName =\r\n        this.datasource.options.sourceFields[0].name === undefined\r\n          ? ''\r\n          : this.datasource.options.sourceFields[0].name;\r\n    }\r\n    let fieldNameGeometry;\r\n    const datasourceOptions = this.datasource\r\n      .options as WFSDataSourceOptionsParams;\r\n    if (datasourceOptions.fieldNameGeometry) {\r\n      fieldNameGeometry = datasourceOptions.fieldNameGeometry;\r\n    } else if (\r\n      (this.datasource.options as any).paramsWFS &&\r\n      (this.datasource.options as any).paramsWFS.fieldNameGeometry\r\n    ) {\r\n      fieldNameGeometry = (this.datasource.options as any).paramsWFS\r\n        .fieldNameGeometry;\r\n    }\r\n    const status = arr.length === 0 ? true : false;\r\n    arr.push(\r\n      new OgcFilterWriter().addInterfaceFilter(\r\n        {\r\n          propertyName: firstFieldName,\r\n          operator: 'PropertyIsEqualTo',\r\n          active: status,\r\n          igoSpatialSelector: 'fixedExtent'\r\n        } as OgcInterfaceFilterOptions,\r\n        fieldNameGeometry,\r\n        lastLevel,\r\n        this.defaultLogicalParent\r\n      )\r\n    );\r\n    this.datasource.options.ogcFilters.interfaceOgcFilters = arr;\r\n  }\r\n\r\n  openDownload() {\r\n    this.downloadService.open(this.layer);\r\n  }\r\n\r\n  refreshFilters(force?: boolean) {\r\n    if (force === true) {\r\n      this.lastRunOgcFilter = undefined;\r\n    }\r\n    const ogcFilters: OgcFiltersOptions = this.datasource.options.ogcFilters;\r\n    const ogcFilterWriter = new OgcFilterWriter();\r\n    const activeFilters = ogcFilters.interfaceOgcFilters.filter(\r\n      f => f.active === true\r\n    );\r\n    if (activeFilters.length === 0) {\r\n      ogcFilters.filters = undefined;\r\n      ogcFilters.filtered = false;\r\n    }\r\n    if (activeFilters.length > 1) {\r\n      activeFilters[0].parentLogical = activeFilters[1].parentLogical;\r\n    }\r\n    if (\r\n      activeFilters.filter(\r\n        af => ['Contains', 'Intersects', 'Within'].indexOf(af.operator) !== -1\r\n      ).length === 0\r\n    ) {\r\n      this.hasActiveSpatialFilter = false;\r\n    } else {\r\n      this.hasActiveSpatialFilter = true;\r\n    }\r\n\r\n    if (\r\n      !(JSON.stringify(this.lastRunOgcFilter) === JSON.stringify(activeFilters))\r\n    ) {\r\n      if (this.layer.dataSource.options.type === 'wfs') {\r\n        const ogcDataSource: any = this.layer.dataSource;\r\n        const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n        ogcLayer.filters = ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(\r\n          activeFilters\r\n        );\r\n        this.layer.dataSource.ol.clear();\r\n      } else if (\r\n        this.layer.dataSource.options.type === 'wms' &&\r\n        ogcFilters.enabled\r\n      ) {\r\n        let rebuildFilter = '';\r\n        if (activeFilters.length >= 1) {\r\n          const ogcDataSource: any = this.layer.dataSource;\r\n          const ogcLayer: OgcFiltersOptions = ogcDataSource.options.ogcFilters;\r\n          ogcLayer.filters = ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(\r\n            activeFilters\r\n          );\r\n          rebuildFilter = ogcFilterWriter.buildFilter(\r\n            ogcLayer.filters,\r\n            undefined,\r\n            undefined,\r\n            (this.layer.dataSource.options as any).fieldNameGeometry\r\n          );\r\n        }\r\n        this.ogcFilterService.filterByOgc(\r\n          this.datasource as WMSDataSource,\r\n          rebuildFilter\r\n        );\r\n        this.datasource.options.ogcFilters.filtered =\r\n          activeFilters.length === 0 ? false : true;\r\n      }\r\n\r\n      this.lastRunOgcFilter = JSON.parse(JSON.stringify(activeFilters));\r\n    } else {\r\n      // identical filter. Nothing triggered\r\n    }\r\n  }\r\n\r\n  public setVisible() {\r\n    this.layer.visible = true;\r\n  }\r\n\r\n  public isAdvancedOgcFilters(): boolean {\r\n    return this.datasource.options.ogcFilters.advancedOgcFilters;\r\n  }\r\n\r\n  public addFilterDisabled(): boolean {\r\n    return (!this.datasource.options.sourceFields ||Â this.datasource.options.sourceFields.length === 0);\r\n  }\r\n\r\n  private changeOgcFiltersAdvancedOgcFilters(value: boolean) {\r\n    this.datasource.options.ogcFilters.advancedOgcFilters = value;\r\n  }\r\n\r\n  changeOgcFilterType(isAdvancedOgcFilters) {\r\n    this.changeOgcFiltersAdvancedOgcFilters(isAdvancedOgcFilters.checked);\r\n    if (isAdvancedOgcFilters.checked) {\r\n      this.refreshFilters(true);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filterable-list',\r\n  templateUrl: './ogc-filterable-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterableListComponent {\r\n\r\n  @Input() layers: Layer[];\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  constructor() {}\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MapService } from '../../map/shared/map.service';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list.component';\r\n\r\n@Directive({\r\n  selector: '[igoOgcFilterableListBinding]'\r\n})\r\nexport class OgcFilterableListBindingDirective implements OnInit, OnDestroy {\r\n  private component: OgcFilterableListComponent;\r\n  private layers$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() component: OgcFilterableListComponent,\r\n    private mapService: MapService\r\n  ) {\r\n    this.component = component;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Override input layers\r\n    this.component.layers = [];\r\n\r\n    this.layers$$ = this.mapService.getMap().layers$.subscribe(layers => {\r\n      this.component.layers = layers;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../map';\r\nimport { OgcFilterableDataSourceOptions } from '../shared/ogc-filter.interface';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-button',\r\n  templateUrl: './ogc-filter-button.component.html',\r\n  styleUrls: ['./ogc-filter-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterButtonComponent {\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  @Input() color: string = 'primary';\r\n\r\n  @Input() ogcFiltersInLayers: boolean;\r\n\r\n  get options(): OgcFilterableDataSourceOptions {\r\n    if (!this.layer) {\r\n      return;\r\n    }\r\n    return this.layer.dataSource.options;\r\n  }\r\n\r\n  public ogcFilterCollapse = false;\r\n\r\n  constructor() {}\r\n\r\n  toggleOgcFilter() {\r\n    if (this.layer.isInResolutionsRange) {\r\n      this.ogcFilterCollapse = !this.ogcFilterCollapse;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OgcFilterableDataSource,\r\n  IgoOgcFilterObject,\r\n  OgcPushButton,\r\n  OgcPushButtonBundle\r\n\r\n} from '../../filter/shared/ogc-filter.interface';\r\nimport { OgcFilterWriter } from '../../filter/shared/ogc-filter';\r\nimport { IgoMap } from '../../map';\r\nimport { OGCFilterService } from '../shared/ogc-filter.service';\r\nimport { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter-toggle-button',\r\n  templateUrl: './ogc-filter-toggle-button.component.html',\r\n  styleUrls: ['./ogc-filter-toggle-button.component.scss']\r\n})\r\nexport class OgcFilterToggleButtonComponent implements OnInit {\r\n\r\n  @Input() refreshFilters: () => void;\r\n\r\n  @Input() datasource: OgcFilterableDataSource;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  private ogcFilterWriter: OgcFilterWriter;\r\n  public color = 'primary';\r\n  public pushButtonBundle: OgcPushButtonBundle[] = [];\r\n\r\n  constructor(\r\n    private ogcFilterService: OGCFilterService\r\n  ) {\r\n    this.ogcFilterWriter = new OgcFilterWriter();\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.datasource.options.ogcFilters &&\r\n      this.datasource.options.ogcFilters.pushButtons) {\r\n        this.pushButtonBundle = this.datasource.options.ogcFilters.pushButtons as OgcPushButtonBundle[];\r\n    }\r\n    this.applyFilters();\r\n\r\n  }\r\n\r\n  getToolTip(pb: OgcPushButton): string  {\r\n    let tt;\r\n    if (pb.tooltip) {\r\n      tt = pb.tooltip;\r\n    }\r\n    return tt || '';\r\n  }\r\n\r\n  getButtonColor(pb: OgcPushButton): {} {\r\n\r\n    let styles;\r\n    if (pb.color) {\r\n      styles = {\r\n        'background-color': pb.enabled ? `rgba(${pb.color})` : `rgba(255,255,255,0)`,\r\n\r\n      };\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  bundleIsVertical(bundle: OgcPushButtonBundle): boolean {\r\n    return bundle.vertical ? bundle.vertical : false;\r\n  }\r\n\r\n  applyFilters(currentOgcPushButton?: OgcPushButton) {\r\n    if (currentOgcPushButton) {\r\n      currentOgcPushButton.enabled = !currentOgcPushButton.enabled;\r\n    }\r\n    let filterQueryString = '';\r\n    const conditions = [];\r\n    this.pushButtonBundle.map(buttonBundle => {\r\n      const bundleCondition = [];\r\n      buttonBundle.ogcPushButtons\r\n      .filter(ogcpb => ogcpb.enabled === true)\r\n      .forEach(enabledPb => bundleCondition.push(enabledPb.filters));\r\n      if (bundleCondition.length >= 1 ) {\r\n        if (bundleCondition.length === 1) {\r\n          conditions.push(bundleCondition[0]);\r\n        } else {\r\n          conditions.push({logical: buttonBundle.logical, filters: bundleCondition});\r\n        }\r\n      }\r\n    });\r\n    if (conditions.length >= 1) {\r\n      filterQueryString = this.ogcFilterWriter\r\n        .buildFilter(conditions.length === 1 ?\r\n          conditions[0] : {logical: 'And', filters: conditions } as IgoOgcFilterObject);\r\n    }\r\n    if (this.datasource.options.type === 'wms') {\r\n      this.ogcFilterService.filterByOgc(this.datasource as WMSDataSource, filterQueryString );\r\n    }\r\n    if (this.datasource.options.type === 'wfs') {\r\n      // TODO: Check how to prevent wfs to refresh when filter icon is pushed...\r\n      this.datasource.ol.clear();\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MAT_DATE_LOCALE,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\n// import {\r\n//   MatDatetimepickerModule,\r\n//   MatNativeDatetimeModule\r\n// } from '@mat-datetimepicker/core';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule,\r\n  IgoKeyValueModule\r\n} from '@igo2/common';\r\n\r\nimport { FilterableDataSourcePipe } from './shared/filterable-datasource.pipe';\r\nimport { TimeFilterFormComponent } from './time-filter-form/time-filter-form.component';\r\nimport { TimeFilterItemComponent } from './time-filter-item/time-filter-item.component';\r\nimport { TimeFilterListBindingDirective } from './time-filter-list/time-filter-list-binding.directive';\r\nimport { TimeFilterListComponent } from './time-filter-list/time-filter-list.component';\r\nimport { TimeFilterService } from './shared/time-filter.service';\r\n\r\nimport { OgcFilterFormComponent } from './ogc-filter-form/ogc-filter-form.component';\r\nimport { OgcFilterableFormComponent } from './ogc-filterable-form/ogc-filterable-form.component';\r\nimport { OgcFilterableItemComponent } from './ogc-filterable-item/ogc-filterable-item.component';\r\nimport { OgcFilterableListBindingDirective } from './ogc-filterable-list/ogc-filterable-list-binding.directive';\r\nimport { OgcFilterableListComponent } from './ogc-filterable-list/ogc-filterable-list.component';\r\nimport { OgcFilterButtonComponent } from './ogc-filter-button/ogc-filter-button.component';\r\nimport { OGCFilterService } from './shared/ogc-filter.service';\r\nimport { OgcFilterToggleButtonComponent } from './ogc-filter-toggle-button/ogc-filter-toggle-button.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCheckboxModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    // MatDatetimepickerModule,\r\n    // MatNativeDatetimeModule,\r\n    IgoLanguageModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterToggleButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective\r\n  ],\r\n  declarations: [\r\n    FilterableDataSourcePipe,\r\n    TimeFilterFormComponent,\r\n    TimeFilterItemComponent,\r\n    TimeFilterListComponent,\r\n    TimeFilterListBindingDirective,\r\n    OgcFilterFormComponent,\r\n    OgcFilterButtonComponent,\r\n    OgcFilterToggleButtonComponent,\r\n    OgcFilterableFormComponent,\r\n    OgcFilterableItemComponent,\r\n    OgcFilterableListComponent,\r\n    OgcFilterableListBindingDirective\r\n  ],\r\n  providers: [TimeFilterService, OGCFilterService]\r\n})\r\nexport class IgoFilterModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoFilterModule,\r\n      providers: [\r\n        {\r\n          provide: MAT_DATE_LOCALE,\r\n          useValue: 'fr'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport { Style as OlStyle } from 'ol/style';\r\n\r\nimport { FormFieldComponent } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map.\r\n */\r\n@FormFieldComponent('geometry')\r\n@Component({\r\n  selector: 'igo-geometry-form-field',\r\n  templateUrl: './geometry-form-field.component.html',\r\n  styleUrls: ['./geometry-form-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldComponent implements OnInit, OnDestroy {\r\n\r\n  geometryType$: BehaviorSubject<OlGeometryType> = new BehaviorSubject(undefined);\r\n  drawGuide$: BehaviorSubject<number> = new BehaviorSubject(0);\r\n  value$: BehaviorSubject<GeoJSONGeometry> = new BehaviorSubject(undefined);\r\n\r\n  private value$$: Subscription;\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The geometry type\r\n   */\r\n  @Input() geometryType: OlGeometryType;\r\n\r\n  /**\r\n   * Whether a geometry type toggle should be displayed\r\n   */\r\n  @Input() geometryTypeField: boolean = false;\r\n\r\n  /**\r\n   * Available geometry types\r\n   */\r\n  @Input() geometryTypes: string[] = ['Point', 'LineString', 'Polygon'];\r\n\r\n  /**\r\n   * Whether a draw guide field should be displayed\r\n   */\r\n  @Input() drawGuideField: boolean = false;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input() drawGuide: number = null;\r\n\r\n  /**\r\n   * Draw guide placeholder\r\n   */\r\n  @Input() drawGuidePlaceholder: string = '';\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * Style for the draw control (applies while the geometry is being drawn)\r\n   */\r\n  @Input() drawStyle: OlStyle;\r\n\r\n  /**\r\n   * Style for the overlay layer (applies once the geometry is added to the map)\r\n   * If not specified, drawStyle applies\r\n   */\r\n  @Input() overlayStyle: OlStyle;\r\n\r\n  /**\r\n   * The geometry type model\r\n   */\r\n  set geometryTypeModel(value: OlGeometryType) {this.geometryType$.next(value); }\r\n  get geometryTypeModel(): OlGeometryType { return this.geometryType$.value; }\r\n\r\n  /**\r\n   * The draw guide model\r\n   */\r\n  set drawGuideModel(value: number) {this.drawGuide$.next(value); }\r\n  get drawGuideModel(): number { return this.drawGuide$.value; }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Set up a value stream\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.geometryType$.next(this.geometryType);\r\n    this.drawGuide$.next(this.drawGuide);\r\n    this.value$.next(this.formControl.value ? this.formControl.value : undefined);\r\n    this.value$$ = this.formControl.valueChanges.subscribe((value: GeoJSONGeometry) => {\r\n      this.value$.next(value ? value : undefined);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the value stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.value$$.unsubscribe();\r\n  }\r\n\r\n  onGeometryTypeChange(geometryType: OlGeometryType) {\r\n    if (this.value$.value !== undefined) {\r\n      return;\r\n    }\r\n    this.geometryType$.next(geometryType);\r\n  }\r\n\r\n  onDrawGuideChange(value: number) {\r\n    this.drawGuide$.next(value);\r\n  }\r\n}\r\n","\r\nexport const MEASURE_UNIT_AUTO = 'auto';\r\n\r\nexport enum MeasureType {\r\n  Length = 'length',\r\n  Area = 'area'\r\n}\r\n\r\nexport enum MeasureLengthUnit {\r\n  Meters = 'meters',\r\n  Kilometers = 'kilometers',\r\n  Miles = 'miles',\r\n  Feet = 'feet'\r\n}\r\n\r\nexport const MeasureLengthUnitAbbreviation = {\r\n  [MeasureLengthUnit.Meters]: 'm',\r\n  [MeasureLengthUnit.Kilometers]: 'km',\r\n  [MeasureLengthUnit.Miles]: 'mi',\r\n  [MeasureLengthUnit.Feet]: 'ft'\r\n};\r\n\r\nexport enum MeasureAreaUnit {\r\n  SquareMeters = 'squareMeters',\r\n  SquareKilometers = 'squareKilometers',\r\n  SquareMiles = 'squareMiles',\r\n  SquareFeet = 'squareFeet',\r\n  Hectares = 'hectares',\r\n  Acres = 'acres'\r\n}\r\n\r\nexport const MeasureAreaUnitAbbreviation = {\r\n  [MeasureAreaUnit.SquareMeters]: 'mÂ²',\r\n  [MeasureAreaUnit.SquareKilometers]: 'kmÂ²',\r\n  [MeasureAreaUnit.SquareMiles]: 'miÂ²',\r\n  [MeasureAreaUnit.SquareFeet]: 'ftÂ²',\r\n  [MeasureAreaUnit.Hectares]: 'ha',\r\n  [MeasureAreaUnit.Acres]: 'ac'\r\n};\r\n","import * as olstyle from 'ol/style';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlPoint from 'ol/geom/Point';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { getCenter as olGetCenter } from 'ol/extent';\r\nimport {\r\n  getLength as olGetLength,\r\n  getArea as olGetArea\r\n} from 'ol/sphere';\r\n\r\nimport { Measure } from './measure.interfaces';\r\nimport {\r\n  MeasureAreaUnit,\r\n  MeasureAreaUnitAbbreviation,\r\n  MeasureLengthUnit,\r\n  MeasureLengthUnitAbbreviation\r\n} from './measure.enum';\r\n\r\n/**\r\n * Convert value from meters to kilometers\r\n * @param value Value in meters\r\n * @returns Value in kilometers\r\n */\r\nexport function metersToKilometers(value: number): number {\r\n  return value * 0.001;\r\n}\r\n\r\n/**\r\n * Convert value from meters to feet\r\n * @param value Value in meters\r\n * @returns Value in feet\r\n */\r\nexport function metersToFeet(value: number): number {\r\n  return value * 3.2808;\r\n}\r\n\r\n/**\r\n * Convert value from meters to miles\r\n * @param value Value in meters\r\n * @returns Value in miles\r\n */\r\nexport function metersToMiles(value: number): number {\r\n  return value * 0.000621;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square kilometers\r\n * @param value Value in square meters\r\n * @returns Value in square kilometers\r\n */\r\nexport function squareMetersToSquareKilometers(value: number): number {\r\n  return value * 0.000001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square miles\r\n * @param value Value in square meters\r\n * @returns Value in square miles\r\n */\r\nexport function squareMetersToSquareMiles(value: number): number {\r\n  return value * 0.0000003861;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to square feet\r\n * @param value Value in square meters\r\n * @returns Value in square feet\r\n */\r\nexport function squareMetersToSquareFeet(value: number): number {\r\n  return value * 10.764;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to hectares\r\n * @param value Value in square meters\r\n * @returns Value in hectares\r\n */\r\nexport function squareMetersToHectares(value: number): number {\r\n  return value * 0.0001;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to acres\r\n * @param value Value in square meters\r\n * @returns Value in acres\r\n */\r\nexport function squareMetersToAcres(value: number): number {\r\n  return value * 0.00024711;\r\n}\r\n\r\n/**\r\n * Convert value from meters to the specified length unit\r\n * @param value Value in meters\r\n * @param unit Length unit\r\n * @returns Value in unit\r\n */\r\nexport function metersToUnit(value: number, unit: MeasureLengthUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureLengthUnit.Meters, (val: number) => val],\r\n    [MeasureLengthUnit.Kilometers, metersToKilometers],\r\n    [MeasureLengthUnit.Miles, metersToMiles],\r\n    [MeasureLengthUnit.Feet, metersToFeet],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * Convert value from square meters to the specified area unit\r\n * @param value Value in meters\r\n * @param unit Area unit\r\n * @returns Value in unit\r\n */\r\nexport function squareMetersToUnit(value: number, unit: MeasureAreaUnit): number | undefined {\r\n  const conversionMapper = new Map([\r\n    [MeasureAreaUnit.SquareMeters, (val: number) => val],\r\n    [MeasureAreaUnit.SquareKilometers, squareMetersToSquareKilometers],\r\n    [MeasureAreaUnit.SquareMiles, squareMetersToSquareMiles],\r\n    [MeasureAreaUnit.SquareFeet, squareMetersToSquareFeet],\r\n    [MeasureAreaUnit.Hectares, squareMetersToHectares],\r\n    [MeasureAreaUnit.Acres, squareMetersToAcres],\r\n  ]);\r\n  const conversion = conversionMapper.get(unit);\r\n\r\n  return conversion ? conversion(value) : undefined;\r\n}\r\n\r\n/**\r\n * This method format a measure to a readable format\r\n * @param measure Measure\r\n * @param options Formatting options\r\n * @returns Formatted measure\r\n */\r\nexport function formatMeasure(measure: number, options?: {\r\n  decimal?: number;\r\n  unit?: MeasureAreaUnit | MeasureLengthUnit;\r\n  unitAbbr?: boolean;\r\n  locale?: string;\r\n}) {\r\n  let decimal = options.decimal;\r\n  if (decimal === undefined || decimal < 0) {\r\n    decimal = 1;\r\n  }\r\n\r\n  const parts = [];\r\n  if (options.locale !== undefined) {\r\n    parts.push(measure.toLocaleString(options.locale, {\r\n      minimumFractionDigits: decimal,\r\n      maximumFractionDigits: decimal\r\n    }));\r\n  } else {\r\n    parts.push(measure.toFixed(decimal).toString());\r\n  }\r\n\r\n  if (options.unit !== undefined && options.unitAbbr === true) {\r\n    parts.push(\r\n      MeasureLengthUnitAbbreviation[options.unit] ||\r\n      MeasureAreaUnitAbbreviation[options.unit]\r\n    );\r\n  }\r\n\r\n  return parts.filter(p => p !== undefined).join(' ');\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestLengthUnit(value: number): MeasureLengthUnit {\r\n  let unit = MeasureLengthUnit.Meters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureLengthUnit.Kilometers];\r\n  while (converted > 1000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = metersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Compute best length measure unit for a given measure in square meters\r\n * @param value Value in meters\r\n * @returns Measure unit\r\n */\r\nexport function computeBestAreaUnit(value: number): MeasureAreaUnit {\r\n  let unit = MeasureAreaUnit.SquareMeters;\r\n  let converted = value;\r\n  const possibleUnits = [MeasureAreaUnit.SquareKilometers];\r\n  while (converted > 1000000 && possibleUnits.length > 0) {\r\n    unit = possibleUnits.pop();\r\n    converted = squareMetersToUnit(value, unit);\r\n  }\r\n  return unit;\r\n}\r\n\r\n/**\r\n * Create a default style for a measure interaction\r\n * @returns OL style\r\n */\r\nexport function createMeasureInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      lineDash: [10, 10],\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 5,\r\n      stroke: new olstyle.Stroke({\r\n        color: '#ffcc33',\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: 'rgba(255, 255, 255, 0.2)'\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for a measure layer\r\n * @returns OL style\r\n */\r\nexport function createMeasureLayerStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: '#ffcc33',\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)'\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Compute the length in meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Length in meters\r\n */\r\nexport function measureOlGeometryLength(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetLength(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area in square meters of an OL geometry with a given projection\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Area in square meters\r\n */\r\nexport function measureOlGeometryArea(olGeometry: OlGeometry, projection: string): number | undefined {\r\n  if (olGeometry instanceof OlPoint || olGeometry instanceof OlLineString) {\r\n    return undefined;\r\n  }\r\n  if (olGeometry.getFlatCoordinates().length === 0) {\r\n    return undefined;\r\n  }\r\n  return olGetArea(olGeometry, {projection});\r\n}\r\n\r\n/**\r\n * Compute the area (square meters), length (meters) and last length (meters)\r\n * of an OL geometry with a given projection.\r\n * @param olGeometry Ol geometry\r\n * @param projection olGeometry's projection\r\n * @returns Computed measure\r\n */\r\nexport function measureOlGeometry(olGeometry: OlGeometry, projection: string): Measure {\r\n  const length = measureOlGeometryLength(olGeometry, projection);\r\n  const area = measureOlGeometryArea(olGeometry, projection);\r\n\r\n  const lengths = [];\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const coordinatesLength = coordinates.length;\r\n  for (let i = 0; i <= coordinatesLength - 4; i += 2) {\r\n    const olSegment = new OlLineString([\r\n      [coordinates[i], coordinates[i + 1]],\r\n      [coordinates[i + 2], coordinates[i + 3]]\r\n    ]);\r\n\r\n    lengths.push(measureOlGeometryLength(olSegment, projection));\r\n  }\r\n\r\n  return {\r\n    area,\r\n    length,\r\n    lengths\r\n  };\r\n}\r\n\r\n/**\r\n * Update an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nexport function updateOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n\r\n  // TODO: handle multi geometries\r\n  const coordinates = olGeometry.flatCoordinates;\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const j = i * 2;\r\n    const olSegment = new OlLineString([\r\n      [coordinates[j], coordinates[j + 1]],\r\n      [coordinates[j + 2], coordinates[j + 3]]\r\n    ]);\r\n\r\n    const midpointCoordinate = olSegment.getCoordinateAt(0.5);\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      olMidpoint.setCoordinates(midpointCoordinate);\r\n    } else {\r\n      olMidpoints[i] = new OlPoint(midpointCoordinate);\r\n    }\r\n  }\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Clear an OL geometry midpoints and return an array of those points\r\n * @param olGeometry OL Geometry\r\n */\r\nexport function clearOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon) {\r\n  const olMidpoints = olGeometry.get('_midpoints') || [];\r\n  const midpointsLength = olMidpoints.length;\r\n  for (let i = 0; i < midpointsLength; i++) {\r\n    const olMidpoint = olMidpoints[i];\r\n    if (olMidpoint !== undefined) {\r\n      if (olMidpoint !== undefined) {\r\n        clearOlMidpointTooltip(olMidpoint);\r\n      }\r\n    }\r\n  }\r\n\r\n  olGeometry.set('_midpoints', undefined, true);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Return an array of  OL geometry midpoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL points\r\n */\r\nfunction getOlGeometryMidpoints(olGeometry: OlLineString | OlPolygon): OlPoint[] {\r\n  const expectedNumber = Math.max((olGeometry.flatCoordinates.length / 2) - 1, 0);\r\n\r\n  // TODO: This works but it's quite messy. If time permits,\r\n  // clean this. Maybe a Tooltip class could handle that\r\n  let olMidpoints = olGeometry.get('_midpoints');\r\n  if (olMidpoints === undefined) {\r\n    olMidpoints = new Array(expectedNumber);\r\n    olGeometry.set('_midpoints', olMidpoints, true);\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber === olMidpoints.length) {\r\n    return olMidpoints;\r\n  }\r\n\r\n  if (expectedNumber > olMidpoints.length) {\r\n    olMidpoints.push(...new Array(expectedNumber - olMidpoints.length));\r\n    return olMidpoints;\r\n  }\r\n\r\n  for (let i = expectedNumber; i < olMidpoints.length; i++) {\r\n    const olMidpoint = olMidpoints[expectedNumber];\r\n    if (olMidpoint !== undefined) {\r\n      clearOlMidpointTooltip(olMidpoint);\r\n    }\r\n  }\r\n  olMidpoints.splice(expectedNumber);\r\n\r\n  return olMidpoints;\r\n}\r\n\r\n/**\r\n * Remove an OL midpoint's tooltip from the map\r\n * @param olMidpoint OL Point\r\n */\r\nfunction clearOlMidpointTooltip(olMidpoint: OlPoint) {\r\n  const olTooltip = olMidpoint.get('_tooltip');\r\n  if (olTooltip !== undefined) {\r\n    const olMap = olTooltip.getMap();\r\n    if (olMap !== undefined) {\r\n      olMap.removeOverlay(olTooltip);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add an OL overlay at each midpoint and return an array of those overlays\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function updateOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n  const olTooltips = olMidpoints.map((olMidpoint: OlPoint) => {\r\n    let olTooltip = olMidpoint.get('_tooltip');\r\n    if (olTooltip === undefined) {\r\n      olTooltip = createOlTooltipAtPoint(olMidpoint);\r\n    } else {\r\n      olTooltip.setPosition(olMidpoint.flatCoordinates);\r\n    }\r\n    return olTooltip;\r\n  });\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipsAtMidpoints(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olMidpoints = getOlGeometryMidpoints(olGeometry);\r\n  return olMidpoints.map((olMidpoint: OlPoint) => {\r\n    return olMidpoint ? olMidpoint.get('_tooltip') : undefined;\r\n  });\r\n}\r\n\r\n/**\r\n * Update an OL geometry center and return it\r\n * @param olGeometry OL Geometry\r\n * @returns OL point\r\n */\r\nexport function updateOlGeometryCenter(olGeometry: OlLineString | OlPolygon): OlPoint {\r\n  let olCenter = olGeometry.get('_center');\r\n  const centerCoordinate = olGetCenter(olGeometry.getExtent());\r\n  if (olCenter !== undefined) {\r\n    olCenter.setCoordinates(centerCoordinate);\r\n  } else {\r\n    olCenter = new OlPoint(centerCoordinate);\r\n    olGeometry.set('_center', olCenter);\r\n  }\r\n\r\n  return olCenter;\r\n}\r\n\r\n/**\r\n * Add an OL overlay at the center of a geometry and return that overlay\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlay\r\n */\r\nexport function updateOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = updateOlGeometryCenter(olGeometry);\r\n  let olTooltip = olCenter.get('_tooltip');\r\n  if (olTooltip === undefined) {\r\n    olTooltip = createOlTooltipAtPoint(olCenter);\r\n  } else {\r\n    olTooltip.setPosition(olCenter.flatCoordinates);\r\n  }\r\n  return olTooltip;\r\n}\r\n\r\n/**\r\n * Return an array of OL overlay at midspoints, if any\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getOlTooltipAtCenter(olGeometry: OlLineString | OlPolygon): OlOverlay {\r\n  const olCenter = olGeometry.get('_center');\r\n  return olCenter ? olCenter.get('_tooltip') : undefined;\r\n}\r\n\r\n/**\r\n * Get all the tooltips of an OL geometry\r\n * @param olGeometry OL Geometry\r\n * @returns OL overlays\r\n */\r\nexport function getTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon): OlOverlay[] {\r\n  const olTooltips = [].concat(getOlTooltipsAtMidpoints(olGeometry) || []);\r\n  const olCenterTooltip = getOlTooltipAtCenter(olGeometry);\r\n  if (olCenterTooltip !== undefined) {\r\n    olTooltips.push(olCenterTooltip);\r\n  }\r\n  return olTooltips;\r\n}\r\n\r\n/**\r\n * Create an OL overlay at a point and bind the overlay to the point\r\n * @param olPoint OL Point\r\n * @returns OL overlay\r\n */\r\nexport function createOlTooltipAtPoint(olPoint: OlPoint): OlOverlay {\r\n  const olTooltip = new OlOverlay({\r\n    element: document.createElement('div'),\r\n    offset: [-30, -10],\r\n    className: [\r\n      'igo-map-tooltip',\r\n      'igo-map-tooltip-measure'\r\n    ].join(' '),\r\n    stopEvent: false\r\n  });\r\n  olTooltip.setPosition(olPoint.flatCoordinates);\r\n  olPoint.set('_tooltip', olTooltip);\r\n\r\n  return olTooltip;\r\n}\r\n","/* tslint:disable */\r\n// See this issue: https://github.com/Microsoft/TypeScript/issues/13965\r\n// And the solution: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n// for an explanation as to why the prototype is set manually\r\n/* tslint:enable */\r\n\r\nexport class GeometrySliceError extends Error {}\r\n\r\nexport class GeometrySliceMultiPolygonError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice a MultiPolygon.');\r\n    Object.setPrototypeOf(this, GeometrySliceMultiPolygonError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceLineStringError extends GeometrySliceError {\r\n  constructor() {\r\n    super('Can\\'t slice with a line that has more than 2 points.');\r\n    Object.setPrototypeOf(this, GeometrySliceLineStringError.prototype);\r\n  }\r\n}\r\n\r\nexport class GeometrySliceTooManyIntersectionError extends GeometrySliceError {\r\n  constructor() {\r\n    super('More than 2 intersections found between the target polygon and the slicing line.');\r\n    Object.setPrototypeOf(this, GeometrySliceTooManyIntersectionError.prototype);\r\n  }\r\n}\r\n","import * as olstyle from 'ol/style';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport lineIntersect from '@turf/line-intersect';\r\nimport { lineString } from '@turf/helpers';\r\n\r\nimport {\r\n  GeometrySliceMultiPolygonError,\r\n  GeometrySliceLineStringError,\r\n  GeometrySliceTooManyIntersectionError\r\n } from './geometry.errors';\r\n\r\n/**\r\n * Create a default style for draw and modify interactions\r\n * @param color Style color (R, G, B)\r\n * @returns OL style\r\n */\r\nexport function createDrawInteractionStyle(color?: [number, number, number]): olstyle.Style {\r\n  color = color || [0, 153, 255];\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color: color.concat([1]),\r\n      width: 2\r\n    }),\r\n    fill:  new olstyle.Fill({\r\n      color: color.concat([0.2])\r\n    }),\r\n    image: new olstyle.Circle({\r\n      radius: 8,\r\n      stroke: new olstyle.Stroke({\r\n        color: color.concat([1])\r\n      }),\r\n      fill: new olstyle.Fill({\r\n        color: color.concat([0.2])\r\n      })\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Create a default style for drawing a hole\r\n * @returns OL style\r\n */\r\nexport function createDrawHoleInteractionStyle(): olstyle.Style {\r\n  return new olstyle.Style({\r\n    stroke: new olstyle.Stroke({\r\n      color:  [0, 153, 255, 1],\r\n      width: 2\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * Slice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function sliceOlGeometry(\r\n  olGeometry: OlLineString | OlPolygon,\r\n  olSlicer: OlLineString\r\n): Array<OlLineString | OlPolygon> {\r\n  if (olGeometry instanceof OlPolygon) {\r\n    return sliceOlPolygon(olGeometry, olSlicer);\r\n  } else if (olGeometry instanceof OlLineString) {\r\n    return sliceOlLineString(olGeometry, olSlicer);\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL LineString into one or more lines\r\n * @param olLineString OL line string\r\n * @param olSlicer Slicing line\r\n * @returns New OL line strings\r\n */\r\nexport function sliceOlLineString(olLineString: OlLineString, olSlicer: OlLineString): OlLineString[] {\r\n  return [];\r\n}\r\n\r\n/**\r\n * Slice OL Polygon into one or more polygons\r\n * @param olPolygon OL polygon\r\n * @param olSlicer Slicing line\r\n * @returns New OL polygons\r\n */\r\nexport function sliceOlPolygon(olPolygon: OlPolygon, olSlicer: OlLineString): OlPolygon[] {\r\n  if (olPolygon.getLinearRingCount() > 1) {\r\n    throw new GeometrySliceMultiPolygonError();\r\n  }\r\n\r\n  if (olSlicer.getCoordinates().length > 2) {\r\n    throw new GeometrySliceLineStringError();\r\n  }\r\n\r\n  const olGeoJSON = new OlGeoJSON();\r\n  const slicer = olGeoJSON.writeGeometryObject(olSlicer);\r\n  const outerCoordinates = olPolygon.getLinearRing(0).getCoordinates();\r\n\r\n  const parts = [[], []];\r\n  let totalIntersectionCount = 0;\r\n  for (let i = 0, ii = outerCoordinates.length - 1; i < ii; i++) {\r\n    const segmentCoordinates = [outerCoordinates[i], outerCoordinates[i + 1]];\r\n    const segment = lineString(segmentCoordinates);\r\n    const intersections = lineIntersect(segment, slicer).features;\r\n\r\n    const intersectionCount = intersections.length;\r\n    totalIntersectionCount += intersectionCount;\r\n    if (intersectionCount > 1 || totalIntersectionCount > 2) {\r\n      throw new GeometrySliceTooManyIntersectionError();\r\n    }\r\n\r\n    parts[0].push(segmentCoordinates[0]);\r\n    if (intersectionCount === 1) {\r\n      const intersection = intersections[0].geometry.coordinates;\r\n      parts[0].push(intersection);\r\n      parts[1].push(intersection);\r\n      parts.reverse();\r\n    }\r\n  }\r\n\r\n  if (totalIntersectionCount <= 1) {\r\n    return [];\r\n  }\r\n\r\n  parts[0].push(parts[0][0]);\r\n  parts[1].push(parts[1][0]);\r\n\r\n  return [new OlPolygon([parts[0]]), new OlPolygon([parts[1]])];\r\n}\r\n\r\n/**\r\n * Splice geometry into two parts\r\n * @param olGeometry OL geometry\r\n * @param olSlicer Slicing line\r\n * @returns New OL geometries\r\n */\r\nexport function addLinearRingToOlPolygon(olPolygon: OlPolygon, olLinearRing: OlLinearRing ): OlPolygon {\r\n  // TODO: make some validation and support updating an existing linear ring\r\n  olPolygon.appendLinearRing(olLinearRing);\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\nimport { MapBrowserEvent as OlMapBrowserEvent } from 'ol/MapBrowserEvent';\r\nimport { shiftKeyOnly } from 'ol/events/condition';\r\n\r\nimport { Subject, Subscription, fromEvent } from 'rxjs';\r\n\r\nexport interface DrawControlOptions {\r\n  geometryType: OlGeometryType;\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  maxPoints?: number;\r\n}\r\n\r\n/**\r\n * Control to draw geometries\r\n */\r\nexport class DrawControl {\r\n\r\n  /**\r\n   * Draw start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Draw end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olDrawInteraction: OlDraw;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onChangesKey: string;\r\n\r\n  private keyDown$$: Subscription;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Geometry type\r\n   * @internal\r\n   */\r\n  get geometryType(): OlGeometryType {\r\n    return this.options.geometryType;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: DrawControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  private addOlDrawInteraction() {\r\n    const olDrawInteraction = new OlDraw({\r\n      type: this.geometryType,\r\n      source: this.getSource(),\r\n      stopClick: true,\r\n      style: this.options.drawStyle,\r\n      maxPoints: this.options.maxPoints,\r\n      freehand: false,\r\n      freehandCondition: () => false\r\n    });\r\n\r\n    this.onDrawStartKey = olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(olDrawInteraction);\r\n    this.olDrawInteraction = olDrawInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * When drawing starts, clear the overlay and start watching from changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.clearOlInnerOverlaySource();\r\n    this.onChangesKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, update the geometry observable and start watching from changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    this.unsubscribeToKeyDown();\r\n    if (this.onChangesKey !== undefined) {\r\n      unByKey(this.onChangesKey);\r\n    }\r\n    this.end$.next(event.feature.getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.unsubscribeToKeyDown();\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      // On ESC key down, remove the last vertex\r\n      if (event.keyCode === 27) {\r\n        this.olDrawInteraction.removeLastPoint();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n      this.keyDown$$ = undefined;\r\n    }\r\n  }\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlModify from 'ol/interaction/Modify';\r\nimport OlTranslate from 'ol/interaction/Translate';\r\nimport OlDraw from 'ol/interaction/Draw';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlLinearRing from 'ol/geom/LinearRing';\r\nimport OlInteraction from 'ol/interaction/Interaction';\r\nimport OlDragBoxInteraction from 'ol/interaction/DragBox';\r\nimport { MapBrowserEvent as OlMapBrowserEvent } from 'ol/MapBrowserEvent';\r\nimport {\r\n  Geometry as OlGeometry,\r\n  GeometryEvent as OlGeometryEvent\r\n} from 'ol/geom/Geometry';\r\nimport { ModifyEvent as OlModifyEvent } from 'ol/interaction/Modify';\r\nimport { TranslateEvent as OlTranslateEvent } from 'ol/interaction/Translate';\r\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { Subject, Subscription, fromEvent } from 'rxjs';\r\n\r\nimport { addLinearRingToOlPolygon, createDrawHoleInteractionStyle } from '../geometry.utils';\r\n\r\nexport interface ModifyControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class ModifyControl {\r\n\r\n  /**\r\n   * Modify start observable\r\n   */\r\n  public start$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Modify end observable\r\n   */\r\n  public end$: Subject<OlGeometry> = new Subject();\r\n\r\n  /**\r\n   * Geometry changes observable\r\n   */\r\n  public changes$: Subject<OlGeometry> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olModifyInteraction: OlModify;\r\n  private onModifyStartKey: string;\r\n  private onModifyEndKey: string;\r\n  private onModifyKey: string;\r\n  private olModifyInteractionIsActive: boolean = false;\r\n  private olTranslateInteraction: OlTranslate;\r\n  private onTranslateStartKey: string;\r\n  private onTranslateEndKey: string;\r\n  private onTranslateKey: string;\r\n  private olTranslateInteractionIsActive: boolean = false;\r\n  private olDrawInteraction: OlTranslate;\r\n  private onDrawStartKey: string;\r\n  private onDrawEndKey: string;\r\n  private onDrawKey: string;\r\n  private olDrawInteractionIsActive: boolean = false;\r\n\r\n  private keyDown$$: Subscription;\r\n  private drawKeyUp$$: Subscription;\r\n  private drawKeyDown$$: Subscription;\r\n\r\n  private removedOlInteractions: OlInteraction[] = [];\r\n  private olLinearRingsLayer: OlVectorLayer;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  /**\r\n   * OL linear rings source\r\n   * @internal\r\n   */\r\n  get olLinearRingsSource(): OlVectorSource {\r\n    return this.olLinearRingsLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: ModifyControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n    this.olLinearRingsLayer = this.createOlLinearRingsLayer();\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeOlModifyInteraction();\r\n      this.removeOlTranslateInteraction();\r\n      this.removeOlDrawInteraction();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addOlDrawInteraction();\r\n    this.addOlTranslateInteraction();\r\n    this.activateTranslateInteraction();\r\n    this.addOlModifyInteraction();\r\n    this.activateModifyInteraction();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay and start modifying it\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  private createOlLinearRingsLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      style: createDrawHoleInteractionStyle(),\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the linear rings layer\r\n   */\r\n  private addOlLinearRingsLayer() {\r\n    this.olMap.addLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings layer\r\n   */\r\n  private removeOlLinearRingsLayer() {\r\n    this.olMap.removeLayer(this.olLinearRingsLayer);\r\n  }\r\n\r\n  /**\r\n   * Clear the linear rings source\r\n   */\r\n  private clearOlLinearRingsSource() {\r\n    this.olLinearRingsSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Add a modify interaction to the map an set up some listeners\r\n   */\r\n  private addOlModifyInteraction() {\r\n    const olModifyInteraction = new OlModify({\r\n      source: this.olOverlaySource,\r\n      style: this.options.drawStyle\r\n    });\r\n    this.olModifyInteraction = olModifyInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the modify interaction\r\n   */\r\n  private removeOlModifyInteraction() {\r\n    if (this.olModifyInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateModifyInteraction();\r\n    this.olModifyInteraction = undefined;\r\n  }\r\n\r\n  private activateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = true;\r\n    this.onModifyStartKey = this.olModifyInteraction\r\n      .on('modifystart', (event: OlModifyEvent) => this.onModifyStart(event));\r\n    this.onModifyEndKey = this.olModifyInteraction\r\n      .on('modifyend', (event: OlModifyEvent) => this.onModifyEnd(event));\r\n    this.olMap.addInteraction(this.olModifyInteraction);\r\n  }\r\n\r\n  private deactivateModifyInteraction() {\r\n    if (this.olModifyInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olModifyInteractionIsActive = false;\r\n    unByKey(this.onModifyStartKey);\r\n    unByKey(this.onModifyEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olModifyInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When modifying starts, clear the overlay and start watching for changes\r\n   * @param event Modify start event\r\n   */\r\n  private onModifyStart(event: OlModifyEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onModifyKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When modifying ends, update the geometry observable and stop watching for changes\r\n   * @param event Modify end event\r\n   */\r\n  private onModifyEnd(event: OlModifyEvent) {\r\n    if (this.onModifyKey !== undefined) {\r\n      unByKey(this.onModifyKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToKeyDown() {\r\n    this.keyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      // On ESC key down, remove the last vertex\r\n      if (event.keyCode === 27 && this.olDrawInteractionIsActive === true) {\r\n        this.olDrawInteraction.removeLastPoint();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key down\r\n   */\r\n  private unsubscribeToKeyDown() {\r\n    if (this.keyDown$$ !== undefined) {\r\n      this.keyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a translate interaction to the map an set up some listeners\r\n   */\r\n  private addOlTranslateInteraction() {\r\n    const olTranslateInteraction = new OlTranslate({\r\n      layers: [this.olOverlayLayer]\r\n    });\r\n    this.olTranslateInteraction = olTranslateInteraction;\r\n  }\r\n\r\n  /**\r\n   * Remove the translate interaction\r\n   */\r\n  private removeOlTranslateInteraction() {\r\n    if (this.olTranslateInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.deactivateTranslateInteraction();\r\n    this.olTranslateInteraction = undefined;\r\n  }\r\n\r\n  private activateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = true;\r\n    this.onTranslateStartKey = this.olTranslateInteraction\r\n      .on('translatestart', (event: OlTranslateEvent) => this.onTranslateStart(event));\r\n    this.onTranslateEndKey = this.olTranslateInteraction\r\n      .on('translateend', (event: OlTranslateEvent) => this.onTranslateEnd(event));\r\n    this.olMap.addInteraction(this.olTranslateInteraction);\r\n  }\r\n\r\n  private deactivateTranslateInteraction() {\r\n    if (this.olTranslateInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.olTranslateInteractionIsActive = false;\r\n    unByKey(this.onTranslateStartKey);\r\n    unByKey(this.onTranslateEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olTranslateInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When translation starts, clear the overlay and start watching for changes\r\n   * @param event Translate start event\r\n   */\r\n  private onTranslateStart(event: OlTranslateEvent) {\r\n    const olGeometry = event.features.item(0).getGeometry();\r\n    this.start$.next(olGeometry);\r\n    this.onTranslateKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      this.changes$.next(olGeometryEvent.target);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Translate end event\r\n   */\r\n  private onTranslateEnd(event: OlTranslateEvent) {\r\n    if (this.onTranslateKey !== undefined) {\r\n      unByKey(this.onTranslateKey);\r\n    }\r\n    this.end$.next(event.features.item(0).getGeometry());\r\n  }\r\n\r\n  /**\r\n   * Add a draw interaction to the map an set up some listeners\r\n   */\r\n  private addOlDrawInteraction() {\r\n    const olDrawInteraction = new OlDraw({\r\n      type: 'Polygon',\r\n      source: this.olLinearRingsSource,\r\n      stopClick: true,\r\n      style: createDrawHoleInteractionStyle(),\r\n      condition: (event: OlMapBrowserEvent) => {\r\n        return this.getOlGeometry().intersectsCoordinate(event.coordinate);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteraction = olDrawInteraction;\r\n    this.subscribeToDrawKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key down to activate the draw control\r\n   */\r\n  private subscribeToDrawKeyDown() {\r\n    this.drawKeyDown$$ = fromEvent(document, 'keydown').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode !== 17) { return; }\r\n\r\n      this.unsubscribeToDrawKeyDown();\r\n\r\n      const olGeometry = this.getOlGeometry();\r\n      if (!olGeometry || !(olGeometry instanceof OlPolygon)) { return; }\r\n\r\n      this.subscribeToDrawKeyUp();\r\n\r\n      this.deactivateModifyInteraction();\r\n      this.deactivateTranslateInteraction();\r\n      this.activateDrawInteraction();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to CTRL key up to deactivate the draw control\r\n   */\r\n  private subscribeToDrawKeyUp() {\r\n    this.drawKeyUp$$ = fromEvent(document, 'keyup').subscribe((event: KeyboardEvent) => {\r\n      if (event.keyCode !== 17) { return; }\r\n\r\n      this.unsubscribeToDrawKeyUp();\r\n      this.subscribeToDrawKeyDown();\r\n\r\n      this.deactivateDrawInteraction();\r\n      this.activateModifyInteraction();\r\n      this.activateTranslateInteraction();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to draw key down\r\n   */\r\n  private unsubscribeToDrawKeyDown() {\r\n    if (this.drawKeyDown$$ !== undefined) {\r\n      this.drawKeyDown$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to key up\r\n   */\r\n  private unsubscribeToDrawKeyUp() {\r\n    if (this.drawKeyUp$$ !== undefined) {\r\n      this.drawKeyUp$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the draw interaction\r\n   */\r\n  private removeOlDrawInteraction() {\r\n    if (this.olDrawInteraction === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeToKeyDown();\r\n    this.unsubscribeToDrawKeyUp();\r\n    this.unsubscribeToDrawKeyDown();\r\n    this.deactivateDrawInteraction();\r\n    this.olDrawInteraction = undefined;\r\n  }\r\n\r\n  /**\r\n   * Activate the draw interaction\r\n   */\r\n  private activateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === true) {\r\n      return;\r\n    }\r\n\r\n    this.clearOlLinearRingsSource();\r\n    this.addOlLinearRingsLayer();\r\n\r\n    this.olMap.getInteractions().forEach((olInteraction: OlInteraction) => {\r\n      if (olInteraction instanceof OlDragBoxInteraction) {\r\n        this.olMap.removeInteraction(olInteraction);\r\n        this.removedOlInteractions.push(olInteraction);\r\n      }\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = true;\r\n    this.onDrawStartKey = this.olDrawInteraction\r\n      .on('drawstart', (event: OlDrawEvent) => this.onDrawStart(event));\r\n    this.onDrawEndKey = this.olDrawInteraction\r\n      .on('drawend', (event: OlDrawEvent) => this.onDrawEnd(event));\r\n    this.olMap.addInteraction(this.olDrawInteraction);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the draw interaction\r\n   */\r\n  private deactivateDrawInteraction() {\r\n    if (this.olDrawInteractionIsActive === false) {\r\n      return;\r\n    }\r\n\r\n    this.removeOlLinearRingsLayer();\r\n\r\n    this.removedOlInteractions.forEach((olInteraction: OlInteraction) => {\r\n      this.olMap.addInteraction(olInteraction);\r\n    });\r\n\r\n    this.olDrawInteractionIsActive = false;\r\n    unByKey(this.onDrawStartKey);\r\n    unByKey(this.onDrawEndKey);\r\n    if (this.olMap !== undefined) {\r\n      this.olMap.removeInteraction(this.olDrawInteraction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When draw start, add a new linerar ring to the geometrty and start watching for changes\r\n   * @param event Draw start event\r\n   */\r\n  private onDrawStart(event: OlDrawEvent) {\r\n    const olGeometry = event.feature.getGeometry();\r\n    const linearRingCoordinates = olGeometry.getLinearRing().getCoordinates();\r\n    this.addLinearRingToOlGeometry(linearRingCoordinates);\r\n    this.start$.next(this.getOlGeometry());\r\n\r\n    this.onDrawKey = olGeometry.on('change', (olGeometryEvent: OlGeometryEvent) => {\r\n      const _linearRingCoordinates = olGeometryEvent.target.getLinearRing().getCoordinates();\r\n      this.updateLinearRingOfOlGeometry(_linearRingCoordinates);\r\n      this.changes$.next(this.getOlGeometry());\r\n    });\r\n    this.subscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * When translation ends, update the geometry observable and stop watchign for changes\r\n   * @param event Draw end event\r\n   */\r\n  private onDrawEnd(event: OlDrawEvent) {\r\n    if (this.onDrawKey !== undefined) {\r\n      unByKey(this.onDrawKey);\r\n    }\r\n    const linearRingCoordinates = event.feature.getGeometry().getLinearRing().getCoordinates();\r\n    this.updateLinearRingOfOlGeometry(linearRingCoordinates);\r\n    this.clearOlLinearRingsSource();\r\n    this.end$.next(this.getOlGeometry());\r\n    this.unsubscribeToKeyDown();\r\n  }\r\n\r\n  /**\r\n   * Add a linear ring to the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private addLinearRingToOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    const olLinearRing = new OlLinearRing(coordinates);\r\n    addLinearRingToOlPolygon(olGeometry, olLinearRing);\r\n  }\r\n\r\n  /**\r\n   * Update the last linear ring of the geometry being modified\r\n   * @param coordinates Linear ring coordinates\r\n   */\r\n  private updateLinearRingOfOlGeometry(coordinates: number[]) {\r\n    const olGeometry = this.getOlGeometry();\r\n    // Remove the last linear ring (the one we are updating)\r\n    const olLinearRings = olGeometry.getLinearRings().slice(0, -1);\r\n    const newCoordinates = olLinearRings.map((olLinearRing: OlLinearRing) => {\r\n      return olLinearRing.getCoordinates();\r\n    });\r\n    newCoordinates.push(coordinates);\r\n    olGeometry.setCoordinates(newCoordinates);\r\n  }\r\n\r\n  /**\r\n   * Get the geometry being modified\r\n   * @returns OL Geometry\r\n   */\r\n  private getOlGeometry(): OlGeometry {\r\n    const olFeatures = this.olOverlaySource.getFeatures();\r\n    return olFeatures.length > 0 ? olFeatures[0].getGeometry() : undefined;\r\n  }\r\n\r\n}\r\n","import OlMap from 'ol/Map';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlStyle from 'ol/style';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlLineString from 'ol/geom/LineString';\r\n\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\nimport { GeometrySliceError } from '../geometry.errors';\r\nimport { sliceOlGeometry } from '../geometry.utils';\r\nimport { DrawControl } from './draw';\r\n\r\nexport interface SliceControlOptions {\r\n  source?: OlVectorSource;\r\n  layer?: OlVectorLayer;\r\n  layerStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n  drawStyle?: OlStyle | ((olfeature: OlFeature) => OlStyle);\r\n}\r\n\r\n/**\r\n * Control to modify geometries\r\n */\r\nexport class SliceControl {\r\n\r\n  /**\r\n   * Slice end observable\r\n   */\r\n  public end$: Subject<OlGeometry[]> = new Subject();\r\n\r\n  /**\r\n   * Slice error, if any\r\n   */\r\n  public error$: Subject<GeometrySliceError> = new Subject();\r\n\r\n  private olMap: OlMap;\r\n  private olOverlayLayer: OlVectorLayer;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawLineStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawLineEnd$$: Subscription;\r\n\r\n  /**\r\n   * Wheter the control is active\r\n   */\r\n  get active(): boolean {\r\n    return this.olMap !== undefined;\r\n  }\r\n\r\n  /**\r\n   * OL overlay source\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(private options: SliceControlOptions) {\r\n    if (options.layer !== undefined) {\r\n      this.olOverlayLayer = options.layer;\r\n    } else {\r\n      this.olOverlayLayer = this.createOlInnerOverlayLayer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add or remove this control to/from a map.\r\n   * @param map OL Map\r\n   */\r\n  setOlMap(olMap: OlMap | undefined) {\r\n    if (olMap === undefined) {\r\n      this.clearOlInnerOverlaySource();\r\n      this.removeOlInnerOverlayLayer();\r\n      this.removeDrawLineControl();\r\n      this.olMap = olMap;\r\n      return;\r\n    }\r\n\r\n    this.olMap = olMap;\r\n    this.addOlInnerOverlayLayer();\r\n    this.addDrawLineControl();\r\n  }\r\n\r\n  /**\r\n   * Return the overlay source\r\n   */\r\n  getSource(): OlVectorSource {\r\n    return this.olOverlaySource;\r\n  }\r\n\r\n  /**\r\n   * Add an OL geometry to the overlay for slicing\r\n   * @param olGeometry Ol Geometry\r\n   */\r\n  setOlGeometry(olGeometry: OlGeometry) {\r\n    const olFeature = new OlFeature({geometry: olGeometry});\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create an overlay source if none is defined in the options\r\n   */\r\n  private createOlInnerOverlayLayer(): OlVectorLayer {\r\n    return new OlVectorLayer({\r\n      source: this.options.source ? this.options.source : new OlVectorSource(),\r\n      style: this.options.layerStyle,\r\n      zIndex: 500\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer if it wasn't defined in the options\r\n   */\r\n  private removeOlInnerOverlayLayer() {\r\n    if (this.options.layer === undefined && this.olMap !== undefined) {\r\n      this.olMap.removeLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the overlay layer if it wasn't defined in the options\r\n   */\r\n  private addOlInnerOverlayLayer(): OlVectorLayer {\r\n    if (this.options.layer === undefined) {\r\n      this.olMap.addLayer(this.olOverlayLayer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay source if it wasn't defined in the options\r\n   */\r\n  private clearOlInnerOverlaySource() {\r\n    if (this.options.layer === undefined && this.options.source === undefined) {\r\n      this.olOverlaySource.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control and add it to the map\r\n   */\r\n  private addDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      drawStyle: this.options.drawStyle,\r\n      maxPoints: 2\r\n    });\r\n    this.drawLineStart$$ = this.drawLineControl.start$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineStart(olLine));\r\n    this.drawLineEnd$$ = this.drawLineControl.end$\r\n      .subscribe((olLine: OlLineString) => this.onDrawLineEnd(olLine));\r\n    this.drawLineControl.setOlMap(this.olMap);\r\n  }\r\n\r\n  /**\r\n   * Remove draw line control\r\n   */\r\n  private removeDrawLineControl() {\r\n    if (this.drawLineControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.drawLineStart$$.unsubscribe();\r\n    this.drawLineEnd$$.unsubscribe();\r\n    this.drawLineControl.getSource().clear();\r\n    this.drawLineControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olLine Ol linestring or polygon\r\n   */\r\n  private onDrawLineStart(olLine: OlLineString) {\r\n    this.drawLineControl.getSource().clear();\r\n  }\r\n\r\n  /**\r\n   * Slice the first geometry encountered with the drawn line\r\n   * @param olLine Ol linestring\r\n   */\r\n  private onDrawLineEnd(olLine: OlLineString) {\r\n    const olSlicedGeometries = [];\r\n    const lineExtent = olLine.getExtent();\r\n\r\n    const olFeaturesToRemove = [];\r\n    try {\r\n      this.olOverlaySource.forEachFeatureInExtent(lineExtent, (olFeature: OlFeature) => {\r\n        const olGeometry = olFeature.getGeometry();\r\n        const olParts = sliceOlGeometry(olGeometry, olLine);\r\n        if (olParts.length > 0) {\r\n          olSlicedGeometries.push(...olParts);\r\n          olFeaturesToRemove.push(olFeature);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (e instanceof GeometrySliceError) {\r\n        this.error$.next(e);\r\n        return;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    this.drawLineControl.getSource().clear();\r\n\r\n    this.olOverlaySource.addFeatures(\r\n      olSlicedGeometries.map((olGeometry: OlGeometry) => new OlFeature(olGeometry))\r\n    );\r\n    olFeaturesToRemove.forEach((olFeature: OlFeature) => {\r\n      this.olOverlaySource.removeFeature(olFeature);\r\n    });\r\n\r\n    this.error$.next(undefined);\r\n    this.end$.next(olSlicedGeometries);\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nimport { MeasurerDialogData } from '../shared/measure.interfaces';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit} from '../shared/measure.enum';\r\n\r\n@Component({\r\n  selector: 'igo-measurer-dialog',\r\n  templateUrl: 'measurer-dialog.component.html',\r\n  styleUrls: ['./measurer-dialog.component.scss']\r\n})\r\nexport class MeasurerDialogComponent {\r\n\r\n  measureAreaUnit = MeasureAreaUnit;\r\n\r\n  measureLengthUnit = MeasureLengthUnit;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MeasurerDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: MeasurerDialogData\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\n\r\nimport OlProjection from 'ol/proj/Projection';\r\nimport OlStyle from 'ol/style/Style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport { VectorSourceEvent as OlVectorSourceEvent } from 'ol/source/Vector';\r\nimport OlLineString from 'ol/geom/LineString';\r\nimport OlPolygon from 'ol/geom/Polygon';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlOverlay from 'ol/Overlay';\r\nimport { unByKey } from 'ol/Observable';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { EntityRecord, EntityTableTemplate, EntityTableComponent } from '@igo2/common';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { FeatureDataSource } from '../../datasource';\r\nimport {\r\n  FEATURE,\r\n  FeatureStore,\r\n  FeatureStoreLoadingStrategy,\r\n  FeatureStoreSelectionStrategy,\r\n  tryBindStoreLayer,\r\n  tryAddLoadingStrategy,\r\n  tryAddSelectionStrategy\r\n} from '../../feature';\r\nimport { DrawControl, ModifyControl } from '../../geometry';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { Measure, MeasurerDialogData, FeatureWithMeasure } from '../shared/measure.interfaces';\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit,\r\n} from '../shared/measure.enum';\r\nimport {\r\n  measureOlGeometry,\r\n  createMeasureInteractionStyle,\r\n  createMeasureLayerStyle,\r\n  updateOlTooltipsAtMidpoints,\r\n  updateOlTooltipAtCenter,\r\n  getTooltipsOfOlGeometry,\r\n  squareMetersToUnit,\r\n  metersToUnit,\r\n  formatMeasure\r\n} from '../shared/measure.utils';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * Tool to measure lengths and areas\r\n */\r\n@Component({\r\n  selector: 'igo-measurer',\r\n  templateUrl: './measurer.component.html',\r\n  styleUrls: ['./measurer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Table template\r\n   * @internal\r\n   */\r\n  public tableTemplate: EntityTableTemplate = {\r\n    selection: true,\r\n    selectMany: true,\r\n    selectionCheckbox: true,\r\n    sort: true,\r\n    columns: [\r\n      {\r\n        name: 'length',\r\n        title: this.languageService.translate.instant('igo.geo.measure.lengthHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeLengthUnit;\r\n          const measure = metersToUnit(feature.properties.measure.length, unit);\r\n          return formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          });\r\n        }\r\n      },\r\n      {\r\n        name: 'area',\r\n        title: this.languageService.translate.instant('igo.geo.measure.areaHeader'),\r\n        valueAccessor: (feature: FeatureWithMeasure) => {\r\n          const unit = this.activeAreaUnit;\r\n          const measure = squareMetersToUnit(feature.properties.measure.area, unit);\r\n          return measure ? formatMeasure(measure, {\r\n            decimal: 1,\r\n            unit,\r\n            unitAbbr: false,\r\n            locale: 'fr'\r\n          }) : '';\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  /**\r\n   * Reference to the MeasureType enum\r\n   * @internal\r\n   */\r\n  public measureType = MeasureType;\r\n\r\n  /**\r\n   * Reference to the AreaMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureAreaUnit = MeasureAreaUnit;\r\n\r\n  /**\r\n   * Reference to the LengthMeasureUnit enum\r\n   * @internal\r\n   */\r\n  public measureLengthUnit = MeasureLengthUnit;\r\n\r\n  /**\r\n   * Whether measure units should be automatically determined\r\n   * @internal\r\n   */\r\n  public measureUnitsAuto: boolean = false;\r\n\r\n  /**\r\n   * Observable of area\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<Measure> = new BehaviorSubject({});\r\n\r\n  /**\r\n   * Observable of selected features\r\n   * @internal\r\n   */\r\n  public selectedFeatures$: BehaviorSubject<FeatureWithMeasure[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * OL draw source\r\n   * @internal\r\n   */\r\n  public showTooltips: boolean = true;\r\n\r\n  /**\r\n   * Draw line control\r\n   */\r\n  private drawLineControl: DrawControl;\r\n\r\n  /**\r\n   * Draw polygon control\r\n   */\r\n  private drawPolygonControl: DrawControl;\r\n\r\n  /**\r\n   * Modify control\r\n   */\r\n  private modifyControl: ModifyControl;\r\n\r\n  /**\r\n   * Active OL geometry\r\n   */\r\n  private activeOlGeometry: OlLineString | OlPolygon;\r\n\r\n  /**\r\n   * Active mlength unit\r\n   */\r\n  private activeLengthUnit: MeasureLengthUnit = MeasureLengthUnit.Meters;\r\n\r\n  /**\r\n   * Active area unit\r\n   */\r\n  private activeAreaUnit: MeasureAreaUnit = MeasureAreaUnit.SquareMeters;\r\n\r\n  /**\r\n   * Feature added listener key\r\n   */\r\n  private onFeatureAddedKey: string;\r\n\r\n  /**\r\n   * Feature removed listener key\r\n   */\r\n  private onFeatureRemovedKey: string;\r\n\r\n  /**\r\n   * Active draw control\r\n   * @internal\r\n   */\r\n  private activeDrawControl: DrawControl;\r\n\r\n  /**\r\n   * Subscription to draw start\r\n   */\r\n  private drawStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to draw end\r\n   */\r\n  private drawEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private drawChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify start\r\n   */\r\n  private modifyStart$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to modify end\r\n   */\r\n  private modifyEnd$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to controls changes\r\n   */\r\n  private modifyChanges$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to measures selection\r\n   */\r\n  private selectedFeatures$$: Subscription;\r\n\r\n  /**\r\n   * OL draw source\r\n   */\r\n  private olDrawSource = new OlVectorSource();\r\n\r\n  /**\r\n   * The map to measure on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The measures store\r\n   */\r\n  @Input() store: FeatureStore<FeatureWithMeasure>;\r\n\r\n  /**\r\n   * Measure type\r\n   * @internal\r\n   */\r\n  @Input()\r\n  set activeMeasureType(value: MeasureType) { this.setActiveMeasureType(value); }\r\n  get activeMeasureType(): MeasureType { return this._activeMeasureType; }\r\n  private _activeMeasureType: MeasureType = MeasureType.Length;\r\n\r\n  /**\r\n   * The minimum length a segment must have to display a tooltip.\r\n   * It also applies to area tooltips.\r\n   */\r\n  @Input() minSegmentLength: number = 10;\r\n\r\n  @ViewChild('table') table: EntityTableComponent;\r\n\r\n  /**\r\n   * Wheter one of the draw control is active\r\n   * @internal\r\n   */\r\n  get drawControlIsActive(): boolean {\r\n    return this.activeDrawControl !== undefined;\r\n  }\r\n\r\n  get projection(): OlProjection {\r\n    return this.map.ol.getView().getProjection();\r\n  }\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  /**\r\n   * Add draw controls and activate one\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.initStore();\r\n    this.createDrawLineControl();\r\n    this.createDrawPolygonControl();\r\n    this.createModifyControl();\r\n    this.toggleDrawControl();\r\n    this.onToggleTooltips(this.showTooltips);\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.setActiveMeasureType(undefined);\r\n    this.deactivateModifyControl();\r\n    this.freezeStore();\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onMeasureTypeChange(measureType: MeasureType) {\r\n    this.activeMeasureType = measureType;\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleDrawControl(toggle: boolean) {\r\n    if (toggle === true) {\r\n      this.toggleDrawControl();\r\n    } else {\r\n      this.deactivateDrawControl();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleTooltips(toggle: boolean) {\r\n    this.showTooltips = toggle;\r\n    if (toggle === true) {\r\n      this.showTooltipsOfOlSource(this.store.source.ol);\r\n    } else {\r\n      this.clearTooltipsOfOlSource(this.store.source.ol);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the current draw control\r\n   * @internal\r\n   */\r\n  onToggleMeasureUnitsAuto(toggle: boolean) {\r\n    this.measureUnitsAuto = toggle;\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onLengthUnitChange(unit: MeasureLengthUnit) {\r\n    this.activeLengthUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the measure type\r\n   * @internal\r\n   */\r\n  onAreaUnitChange(unit: MeasureAreaUnit) {\r\n    this.activeAreaUnit = unit;\r\n    this.table.refresh();\r\n    this.updateTooltipsOfOlSource(this.store.source.ol);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.updateTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n  }\r\n\r\n  onCalculateClick() {\r\n    const features = this.selectedFeatures$.value;\r\n    const area = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      return sum + feature.properties.measure.area || 0;\r\n    }, 0);\r\n    const length = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'Polygon') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n    const perimeter = features.reduce((sum: number, feature: FeatureWithMeasure) => {\r\n      if (feature.geometry.type === 'LineString') {\r\n        return sum;\r\n      }\r\n      return sum + feature.properties.measure.length || 0;\r\n    }, 0);\r\n\r\n    this.openDialog({\r\n      area,\r\n      length,\r\n      perimeter\r\n    });\r\n  }\r\n\r\n  onDeleteClick() {\r\n    this.store.deleteMany(this.selectedFeatures$.value);\r\n  }\r\n\r\n  onModifyClick() {\r\n    if (this.selectedFeatures$.value.length !== 1) { return; }\r\n\r\n    if (this.modifyControl.active === true) {\r\n      this.deactivateModifyControl();\r\n      this.toggleDrawControl();\r\n    } else {\r\n      const feature = this.selectedFeatures$.value[0];\r\n      const olFeatures = this.store.layer.ol.getSource().getFeatures();\r\n      const olFeature = olFeatures.find((_olFeature: OlFeature) => {\r\n        return _olFeature.get('id') === feature.properties.id;\r\n      });\r\n\r\n      if (olFeature !== undefined) {\r\n        this.deactivateDrawControl();\r\n        this.activateModifyControl();\r\n\r\n        const olGeometry = olFeature.getGeometry();\r\n        this.clearTooltipsOfOlGeometry(olGeometry);\r\n        this.modifyControl.setOlGeometry(olGeometry);\r\n      }\r\n    }\r\n  }\r\n\r\n  private openDialog(data: MeasurerDialogData): void {\r\n    this.dialog.open(MeasurerDialogComponent, {data});\r\n  }\r\n\r\n  /**\r\n   * Initialize the measure store and set up some listeners\r\n   * @internal\r\n   */\r\n  private initStore() {\r\n    const store = this.store;\r\n\r\n    const layer = new VectorLayer({\r\n      title: 'Measures',\r\n      zIndex: 200,\r\n      source: new FeatureDataSource(),\r\n      style: createMeasureLayerStyle(),\r\n      showInLayerList: false,\r\n      exportable: false,\r\n      browsable: false\r\n    });\r\n    tryBindStoreLayer(store, layer);\r\n\r\n    tryAddLoadingStrategy(store);\r\n\r\n    tryAddSelectionStrategy(store, new FeatureStoreSelectionStrategy({\r\n      map: this.map,\r\n      many: true\r\n    }));\r\n\r\n    this.onFeatureAddedKey = store.source.ol.on('addfeature', (event: OlVectorSourceEvent) => {\r\n      const feature = event.feature;\r\n      const olGeometry = feature.getGeometry();\r\n      this.updateMeasureOfOlGeometry(olGeometry, feature.get('measure'));\r\n    });\r\n\r\n    this.onFeatureRemovedKey = store.source.ol.on('removefeature', (event: OlVectorSourceEvent) => {\r\n      const olGeometry = event.feature.getGeometry();\r\n      this.clearTooltipsOfOlGeometry(olGeometry);\r\n    });\r\n\r\n    this.selectedFeatures$$ = store.stateView.manyBy$((record: EntityRecord<FeatureWithMeasure>) => {\r\n      return record.state.selected === true;\r\n    }).pipe(\r\n      skip(1)  // Skip initial emission\r\n    )\r\n    .subscribe((records: EntityRecord<FeatureWithMeasure>[]) => {\r\n      if (this.modifyControl.active === true) {\r\n        this.deactivateModifyControl();\r\n      }\r\n      this.selectedFeatures$.next(records.map(record => record.entity));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Freeze any store, meaning the layer is removed, strategies are deactivated\r\n   * and some listener removed\r\n   * @internal\r\n   */\r\n  private freezeStore() {\r\n    const store = this.store;\r\n    this.selectedFeatures$$.unsubscribe();\r\n    unByKey(this.onFeatureAddedKey);\r\n    unByKey(this.onFeatureRemovedKey);\r\n    this.clearTooltipsOfOlSource(store.source.ol);\r\n    this.map.removeLayer(store.layer);\r\n    store.deactivateStrategyOfType(FeatureStoreLoadingStrategy);\r\n    store.deactivateStrategyOfType(FeatureStoreSelectionStrategy);\r\n  }\r\n\r\n  /**\r\n   * Create a draw line control\r\n   */\r\n  private createDrawLineControl() {\r\n    this.drawLineControl = new DrawControl({\r\n      geometryType: 'LineString',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createDrawPolygonControl() {\r\n    this.drawPolygonControl = new DrawControl({\r\n      geometryType: 'Polygon',\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a draw polygon control\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      source: this.olDrawSource,\r\n      drawStyle: createMeasureInteractionStyle(),\r\n      layerStyle: new OlStyle({})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate the right control\r\n   */\r\n  private toggleDrawControl() {\r\n    this.deactivateDrawControl();\r\n    // this.deactivateModifyControl();\r\n    if (this.activeMeasureType === MeasureType.Length) {\r\n      this.activateDrawControl(this.drawLineControl);\r\n    } else if (this.activeMeasureType === MeasureType.Area) {\r\n      this.activateDrawControl(this.drawPolygonControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param drawControl Draw control\r\n   */\r\n  private activateDrawControl(drawControl: DrawControl) {\r\n    this.activeDrawControl = drawControl;\r\n    this.drawStart$$ = drawControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawStart(olGeometry));\r\n    this.drawEnd$$ = drawControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawEnd(olGeometry));\r\n    this.drawChanges$$ = drawControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onDrawChanges(olGeometry));\r\n\r\n    drawControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active draw control\r\n   */\r\n  private deactivateDrawControl() {\r\n    if (this.activeDrawControl === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n    if (this.drawStart$$ !== undefined ) { this.drawStart$$.unsubscribe(); }\r\n    if (this.drawEnd$$ !== undefined ) { this.drawEnd$$.unsubscribe(); }\r\n    if (this.drawChanges$$ !== undefined ) { this.drawChanges$$.unsubscribe(); }\r\n\r\n    this.clearTooltipsOfOlSource(this.olDrawSource);\r\n    if (this.activeOlGeometry !== undefined) {\r\n      this.clearTooltipsOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n    this.activeDrawControl.setOlMap(undefined);\r\n    this.activeDrawControl = undefined;\r\n    this.activeOlGeometry = undefined;\r\n  }\r\n\r\n  private setActiveMeasureType(measureType: MeasureType) {\r\n    this._activeMeasureType = measureType;\r\n    this.clearMeasures();\r\n    this.toggleDrawControl();\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = olGeometry;\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.activeOlGeometry = undefined;\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n    this.addFeatureToStore(olGeometry);\r\n    this.clearTooltipsOfOlGeometry(olGeometry);\r\n    this.olDrawSource.clear(true);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onDrawChanges(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = measureOlGeometry(olGeometry, this.projection);\r\n    this.updateMeasureOfOlGeometry(olGeometry, Object.assign({}, measure, {\r\n      area: undefined  // We don't want to display an area tooltip while drawing.\r\n    }));\r\n    this.measure$.next(measure);\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param modifyControl Modify control\r\n   */\r\n  private activateModifyControl() {\r\n    const selection = this.store.getStrategyOfType(FeatureStoreSelectionStrategy) as FeatureStoreSelectionStrategy;\r\n    selection.deactivate();\r\n    selection.clear();\r\n\r\n    this.modifyStart$$ = this.modifyControl.start$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyStart(olGeometry));\r\n    this.modifyEnd$$ = this.modifyControl.end$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyEnd(olGeometry));\r\n    this.modifyChanges$$ = this.modifyControl.changes$\r\n      .subscribe((olGeometry: OlLineString | OlPolygon) => this.onModifyChanges(olGeometry));\r\n    this.modifyControl.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active modify control\r\n   */\r\n  private deactivateModifyControl() {\r\n    if (this.modifyStart$$ !== undefined ) { this.modifyStart$$.unsubscribe(); }\r\n    if (this.modifyEnd$$ !== undefined ) { this.modifyEnd$$.unsubscribe(); }\r\n    if (this.modifyChanges$$ !== undefined ) { this.modifyChanges$$.unsubscribe(); }\r\n\r\n    if (this.activeOlGeometry !== undefined) {\r\n      if (this.selectedFeatures$.value.length === 1) {\r\n        const feature = this.selectedFeatures$.value[0];\r\n        this.addFeatureToStore(this.activeOlGeometry, feature);\r\n      }\r\n      this.finalizeMeasureOfOlGeometry(this.activeOlGeometry);\r\n    }\r\n\r\n    this.olDrawSource.clear();\r\n\r\n    this.store.activateStrategyOfType(FeatureStoreSelectionStrategy);\r\n\r\n    this.activeOlGeometry = undefined;\r\n    this.modifyControl.setOlMap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being drawn\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyStart(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawStart(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyChanges(olGeometry: OlLineString | OlPolygon) {\r\n    this.onDrawChanges(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the draw source and track the geometry being draw\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onModifyEnd(olGeometry: OlLineString | OlPolygon) {\r\n    this.finalizeMeasureOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  private finalizeMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    let measure = measureOlGeometry(olGeometry, this.projection);\r\n    if (olGeometry instanceof OlPolygon) {\r\n      measure = Object.assign({}, measure, {\r\n        lengths: []  // We don't want to display an area tooltip while drawing.\r\n      });\r\n    }\r\n    this.updateMeasureOfOlGeometry(olGeometry, measure);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables\r\n   * @param olGeometry Ol linestring or polygon\r\n   * @param measure Measure\r\n   */\r\n  private updateMeasureOfOlGeometry(olGeometry: OlLineString | OlPolygon, measure: Measure) {\r\n    olGeometry.setProperties({_measure: measure}, true);\r\n    this.updateTooltipsOfOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Clear the measures observables\r\n   */\r\n  private clearMeasures() {\r\n    this.measure$.next({});\r\n  }\r\n\r\n  /**\r\n   * Add a feature with measures to the store. The loading stragegy of the store\r\n   * will trigger and add the feature to the map.\r\n   * @internal\r\n   */\r\n  private addFeatureToStore(olGeometry: OlLineString | OlPolygon, feature?: FeatureWithMeasure) {\r\n    const featureId = feature ? feature.properties.id : uuid();\r\n    const projection = this.map.ol.getView().getProjection();\r\n    const geometry = new OlGeoJSON().writeGeometryObject(olGeometry, {\r\n      featureProjection: projection,\r\n      dataProjection: projection\r\n    });\r\n    this.store.update({\r\n      type: FEATURE,\r\n      geometry,\r\n      projection: projection.getCode(),\r\n      properties: {\r\n        id: featureId,\r\n        measure: olGeometry.get('_measure')\r\n      },\r\n      meta: {\r\n        id: featureId\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update all the tooltips of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   * @param lengths Lengths of the OL geometry's segments\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    const measure = olGeometry.get('_measure');\r\n    const lengths = measure.lengths;\r\n    const area = measure.area;\r\n\r\n    const olMidpointsTooltips = updateOlTooltipsAtMidpoints(olGeometry);\r\n    if (lengths.length === olMidpointsTooltips.length) {\r\n      for (let i = 0; i < olMidpointsTooltips.length; i++) {\r\n        const length = lengths[i];\r\n        if (length !== undefined) {\r\n          this.updateOlTooltip(\r\n            olMidpointsTooltips[i],\r\n            metersToUnit(length, this.activeLengthUnit),\r\n            this.activeLengthUnit,\r\n            MeasureType.Length\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (area !== undefined) {\r\n      this.updateOlTooltip(\r\n        updateOlTooltipAtCenter(olGeometry),\r\n        squareMetersToUnit(area,  this.activeAreaUnit),\r\n        this.activeAreaUnit,\r\n        MeasureType.Area\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of a geoemtry\r\n   */\r\n  private showTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (this.shouldShowTooltip(olTooltip)) {\r\n        this.map.ol.addOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the tooltips of an OL geometrys\r\n   * @param olGeometry OL geometry with tooltips\r\n   */\r\n  private clearTooltipsOfOlGeometry(olGeometry: OlLineString | OlPolygon) {\r\n    getTooltipsOfOlGeometry(olGeometry).forEach((olTooltip: OlOverlay | undefined) => {\r\n      if (olTooltip !== undefined && olTooltip.getMap() !== undefined) {\r\n        this.map.ol.removeOverlay(olTooltip);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private updateTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.updateTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the map tooltips of all the geometries of a source\r\n   */\r\n  private showTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      this.showTooltipsOfOlGeometry(olFeature.getGeometry());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the map tooltips\r\n   * @param olDrawSource OL vector source\r\n   */\r\n  private clearTooltipsOfOlSource(olSource: OlVectorSource) {\r\n    olSource.forEachFeature((olFeature: OlFeature) => {\r\n      const olGeometry = olFeature.getGeometry();\r\n      if (olGeometry !== undefined) {\r\n        this.clearTooltipsOfOlGeometry(olFeature.getGeometry());\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update an OL tooltip properties and inner HTML and add it to the map if possible\r\n   * @param olTooltip OL tooltip\r\n   * @param measure The measure valeu ti display\r\n   * @param measureUnit Display tooltip measure in those units\r\n   */\r\n  private updateOlTooltip(\r\n    olTooltip: OlOverlay,\r\n    measure: number,\r\n    unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    type: MeasureType\r\n  ) {\r\n    olTooltip.setProperties({_measure: measure, _unit: unit, _type: type}, true);\r\n    olTooltip.getElement().innerHTML = this.computeTooltipInnerHTML(olTooltip);\r\n    if (this.shouldShowTooltip(olTooltip)) {\r\n      this.map.ol.addOverlay(olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute a tooltip's content\r\n   * @param olTooltip OL overlay\r\n   * @returns Inner HTML\r\n   */\r\n  private computeTooltipInnerHTML(olTooltip: OlOverlay): string {\r\n    const properties = olTooltip.getProperties() as any;\r\n    return formatMeasure(properties._measure, {\r\n      decimal: 1,\r\n      unit: properties._unit,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Whether a tooltip should be showned based on the length\r\n   * of the segment it is bound to.\r\n   * @param olTooltip OL overlay\r\n   * @returns True if the tooltip should be shown\r\n   */\r\n  private shouldShowTooltip(olTooltip: OlOverlay): boolean {\r\n    if (this.showTooltips === false) {\r\n      return false;\r\n    }\r\n\r\n    const properties = olTooltip.getProperties() as any;\r\n    const measure = properties._measure;\r\n    if (measure === undefined) {\r\n      return false;\r\n    }\r\n\r\n    if (properties._unit === MeasureType.Length) {\r\n      const minSegmentLength = metersToUnit(this.minSegmentLength, properties._unit) || 0;\r\n      return measure > Math.max(minSegmentLength, 0);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { MeasureAreaUnit, MeasureLengthUnit } from '../shared/measure.enum';\r\nimport { metersToUnit, squareMetersToUnit, formatMeasure } from '../shared/measure.utils';\r\n\r\n/**\r\n * This pipe returns a measure converted from meters (or square meters)\r\n * to the specified unit. It also keeps a certain number of decimals.\r\n */\r\n@Pipe({\r\n  name: 'measureFormat'\r\n})\r\nexport class MeasureFormatPipe implements PipeTransform {\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  transform(\r\n    value: number, unit: MeasureAreaUnit | MeasureLengthUnit,\r\n    unitAbbr: boolean = false,\r\n    decimal: number = 1\r\n  ): number {\r\n    let out;\r\n    if (Object.values(MeasureAreaUnit).indexOf(unit) >= 0) {\r\n      out = squareMetersToUnit(value, unit as MeasureAreaUnit);\r\n    } else if (Object.values(MeasureLengthUnit).indexOf(unit) >= 0) {\r\n      out = metersToUnit(value, unit as MeasureLengthUnit);\r\n    }\r\n\r\n    return out ? formatMeasure(out, {\r\n      decimal: 1,\r\n      unit,\r\n      unitAbbr,\r\n      locale: 'fr'\r\n    }) : out;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  Self,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { NgControl, ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport * as OlStyle from 'ol/style';\r\nimport OlGeoJSON from 'ol/format/GeoJSON';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlGeometryType from 'ol/geom/GeometryType';\r\nimport OlFeature from 'ol/Feature';\r\nimport OlVectorSource from 'ol/source/Vector';\r\nimport OlVectorLayer from 'ol/layer/Vector';\r\nimport OlOverlay from 'ol/Overlay';\r\n\r\nimport { IgoMap } from '../../map';\r\nimport {\r\n  MeasureLengthUnit,\r\n  updateOlGeometryMidpoints,\r\n  formatMeasure,\r\n  measureOlGeometry\r\n} from '../../measure';\r\nimport { DrawControl, ModifyControl } from '../shared/controls';\r\nimport { createDrawInteractionStyle } from '../shared/geometry.utils';\r\nimport { GeoJSONGeometry } from '../shared/geometry.interfaces';\r\n\r\n/**\r\n * This input allows a user to draw a new geometry or to edit\r\n * an existing one on a map. A text input is also displayed in the\r\n * form with some instructions.\r\n * This is still WIP.\r\n */\r\n@Component({\r\n  selector: 'igo-geometry-form-field-input',\r\n  templateUrl: './geometry-form-field-input.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeometryFormFieldInputComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  private olOverlayLayer: OlVectorLayer;\r\n  private olGeoJSON = new OlGeoJSON();\r\n  private ready = false;\r\n\r\n  private drawControl: DrawControl;\r\n  private modifyControl: ModifyControl;\r\n  private defaultDrawStyleRadius: number;\r\n  private olGeometryEnds$$: Subscription;\r\n  private olGeometryChanges$$: Subscription;\r\n  private olTooltip = OlOverlay;\r\n\r\n  /**\r\n   * Active control\r\n   * @internal\r\n   */\r\n  public activeControl: DrawControl | ModifyControl;\r\n\r\n  /**\r\n   * The map to draw the geometry on\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * The geometry type\r\n   */\r\n  @Input()\r\n  set geometryType(value: OlGeometryType) {\r\n    this._geometryType = value;\r\n    if (this.ready === false) {\r\n      return;\r\n    }\r\n    this.deactivateControl();\r\n    this.createDrawControl();\r\n    this.toggleControl();\r\n  }\r\n  get geometryType(): OlGeometryType { return this._geometryType; }\r\n  private _geometryType: OlGeometryType;\r\n\r\n  /**\r\n   * The drawGuide around the mouse pointer to help drawing\r\n   */\r\n  @Input() drawGuide: number = null;\r\n\r\n  /**\r\n   * Whether a measure tooltip should be displayed\r\n   */\r\n  @Input() measure: boolean = false;\r\n\r\n  /**\r\n   * Style for the draw control (applies while the geometry is being drawn)\r\n   */\r\n  @Input()\r\n  set drawStyle(value: OlStyle) {\r\n    this._drawStyle = value || createDrawInteractionStyle();\r\n    if (this.isStyleWithRadius(this.drawStyle)) {\r\n      this.defaultDrawStyleRadius = this.drawStyle.getImage().getRadius();\r\n    } else {\r\n      this.defaultDrawStyleRadius = null;\r\n    }\r\n  }\r\n  get drawStyle(): OlStyle { return this._drawStyle; }\r\n  private _drawStyle: OlStyle;\r\n\r\n  /**\r\n   * Style for the overlay layer (applies once the geometry is added to the map)\r\n   * If not specified, drawStyle applies\r\n   */\r\n  @Input()\r\n  set overlayStyle(value: OlStyle) {\r\n    this._overlayStyle = value;\r\n  }\r\n  get overlayStyle(): OlStyle {\r\n    return this._overlayStyle || this.drawStyle;\r\n  }\r\n  private _overlayStyle: OlStyle;\r\n\r\n  /**\r\n   * The geometry value (GeoJSON)\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  @Input()\r\n  set value(value: GeoJSONGeometry) {\r\n    if (this.ready === false) {\r\n      this._value = value;\r\n      return;\r\n    }\r\n\r\n    if (value) {\r\n      this.addGeoJSONToOverlay(value);\r\n    } else {\r\n      this.olOverlaySource.clear();\r\n    }\r\n\r\n    this._value = value;\r\n    this.onChange(value);\r\n    this.toggleControl();\r\n    this.cdRef.detectChanges();\r\n  }\r\n  get value(): GeoJSONGeometry { return this._value; }\r\n  private _value: GeoJSONGeometry;\r\n\r\n  /**\r\n   * The vector source to add the geometry to\r\n   * @internal\r\n   */\r\n  get olOverlaySource(): OlVectorSource {\r\n    return this.olOverlayLayer.getSource();\r\n  }\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    @Optional() @Self() public ngControl: NgControl\r\n  ) {\r\n    if (this.ngControl !== undefined) {\r\n      // Setting the value accessor directly (instead of using\r\n      // the providers) to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an overlay layer, add the initial geometry to it (if any)\r\n   * and toggle the right interaction.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.addOlOverlayLayer();\r\n    this.createMeasureTooltip();\r\n    this.createDrawControl();\r\n    this.createModifyControl();\r\n    if (this.value) {\r\n      this.addGeoJSONToOverlay(this.value);\r\n    }\r\n    this.toggleControl();\r\n    this.ready = true;\r\n  }\r\n\r\n  /**\r\n   * Clear the overlay layer and any interaction added by this component.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.deactivateControl();\r\n    this.olOverlaySource.clear();\r\n    this.map.ol.removeLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnChange(fn: Function) {\r\n    this.onChange = fn;\r\n  }\r\n  private onChange: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  // tslint:disable-next-line:ban-types\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n  private onTouched: any = () => {};\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   */\r\n  writeValue(value: GeoJSONGeometry) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Add an overlay layer to the map\r\n   */\r\n  private addOlOverlayLayer(): OlVectorLayer {\r\n    this.olOverlayLayer = new OlVectorLayer({\r\n      source: new OlVectorSource(),\r\n      zIndex: 500,\r\n      style: null\r\n    });\r\n    this.map.ol.addLayer(this.olOverlayLayer);\r\n  }\r\n\r\n  /**\r\n   * Create a draw control and subscribe to it's geometry\r\n   */\r\n  private createDrawControl() {\r\n    this.drawControl = new DrawControl({\r\n      geometryType: this.geometryType || 'Point',\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a modify control and subscribe to it's geometry\r\n   */\r\n  private createModifyControl() {\r\n    this.modifyControl = new ModifyControl({\r\n      layer: this.olOverlayLayer,\r\n      drawStyle: (olFeature: OlFeature, resolution: number) => {\r\n        const style = this.drawStyle;\r\n        this.updateDrawStyleWithDrawGuide(style, resolution);\r\n        return style;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle the proper control (draw or modify)\r\n   */\r\n  private toggleControl() {\r\n    this.deactivateControl();\r\n    if (!this.value && this.geometryType) {\r\n      this.activateControl(this.drawControl);\r\n    } else {\r\n      this.activateControl(this.modifyControl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a given control\r\n   * @param control Control\r\n   */\r\n  private activateControl(control: DrawControl | ModifyControl) {\r\n    this.activeControl = control;\r\n    this.olGeometryEnds$$ = control.end$\r\n      .subscribe((olGeometry: OlGeometry) => this.onOlGeometryEnds(olGeometry));\r\n    if (this.measure === true && control === this.drawControl) {\r\n      this.olGeometryChanges$$ = control.changes$\r\n        .subscribe((olGeometry: OlGeometry) => this.onOlGeometryChanges(olGeometry));\r\n    }\r\n    control.setOlMap(this.map.ol);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active control\r\n   */\r\n  private deactivateControl() {\r\n    this.removeMeasureTooltip();\r\n    if (this.activeControl !== undefined) {\r\n      this.activeControl.setOlMap(undefined);\r\n    }\r\n    if (this.olGeometryEnds$$ !== undefined) {\r\n      this.olGeometryEnds$$.unsubscribe();\r\n    }\r\n    if (this.olGeometryChanges$$ !== undefined) {\r\n      this.olGeometryChanges$$.unsubscribe();\r\n    }\r\n    this.activeControl = undefined;\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryEnds(olGeometry: OlGeometry | undefined) {\r\n    this.removeMeasureTooltip();\r\n    this.setOlGeometry(olGeometry);\r\n  }\r\n\r\n  /**\r\n   * Update measures observables and map tooltips\r\n   * @param olGeometry Ol linestring or polygon\r\n   */\r\n  private onOlGeometryChanges(olGeometry: OlGeometry) {\r\n    if (olGeometry.getType() !== 'Point') {\r\n      this.updateMeasureTooltip(olGeometry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When drawing ends, convert the output value to GeoJSON and keep it.\r\n   * Restore the double click interaction.\r\n   * @param olGeometry OL geometry\r\n   */\r\n  private setOlGeometry(olGeometry: OlGeometry | undefined) {\r\n    if (olGeometry === undefined) {\r\n      return;\r\n    }\r\n    const value = this.olGeoJSON.writeGeometryObject(olGeometry, {\r\n      featureProjection: this.map.projection,\r\n      dataProjection: 'EPSG:4326'\r\n    });\r\n    this.writeValue(value);\r\n  }\r\n\r\n  /**\r\n   * Add a GeoJSON geometry to the overlay\r\n   * @param geometry GeoJSON geometry\r\n   */\r\n  private addGeoJSONToOverlay(geometry: GeoJSONGeometry) {\r\n    const olGeometry = this.olGeoJSON.readGeometry(geometry, {\r\n      dataProjection: 'EPSG:4326',\r\n      featureProjection: this.map.projection\r\n    });\r\n    const olFeature = new OlFeature({\r\n      geometry: olGeometry\r\n    });\r\n    olFeature.setStyle(this.overlayStyle);\r\n    this.olOverlaySource.clear();\r\n    this.olOverlaySource.addFeature(olFeature);\r\n  }\r\n\r\n  /**\r\n   * Create the measure tooltip\r\n   */\r\n  private createMeasureTooltip(): OlOverlay {\r\n    this.olTooltip = new OlOverlay({\r\n      element: document.createElement('div'),\r\n      offset: [-30, -10],\r\n      className: [\r\n        'igo-map-tooltip',\r\n        'igo-map-tooltip-measure'\r\n      ].join(' '),\r\n      stopEvent: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the measure tooltip of an OL geometry\r\n   * @param olGeometry OL Geometry\r\n   */\r\n  private updateMeasureTooltip(olGeometry: OlGeometry) {\r\n    const measure = measureOlGeometry(olGeometry, this.map.projection);\r\n    const lengths = measure.lengths;\r\n    const lastIndex = olGeometry.getType() === 'Polygon' ? lengths.length - 2 : lengths.length - 1;\r\n    const lastLength = lengths[lastIndex];\r\n\r\n    const olMidpoints = updateOlGeometryMidpoints(olGeometry);\r\n    const olLastMidpoint = olMidpoints[lastIndex];\r\n    if (olMidpoints.length === 0 || olLastMidpoint === undefined) {\r\n      this.removeMeasureTooltip();\r\n      return;\r\n    }\r\n\r\n    this.olTooltip.setPosition(olLastMidpoint.flatCoordinates);\r\n\r\n    const innerHtml = formatMeasure(lastLength, {\r\n      decimal: 1,\r\n      unit: MeasureLengthUnit.Meters,\r\n      unitAbbr: true,\r\n      locale: 'fr'\r\n    });\r\n    this.olTooltip.getElement().innerHTML = innerHtml;\r\n    if (this.olTooltip.getMap() === undefined) {\r\n      this.map.ol.addOverlay(this.olTooltip);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the measure tooltip from the map\r\n   */\r\n  private removeMeasureTooltip() {\r\n    if (this.olTooltip.getMap && this.olTooltip.getMap() !== undefined) {\r\n      this.map.ol.removeOverlay(this.olTooltip);\r\n      this.olTooltip.setMap(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjust the draw style with the specified draw guide distance, if possible\r\n   * @param olStyle Draw style to update\r\n   * @param resolution Resolution (to make the screen size of symbol fit the drawGuide value)\r\n   */\r\n  private updateDrawStyleWithDrawGuide(olStyle: OlStyle, resolution: number) {\r\n    if (this.isStyleWithRadius(olStyle)) {\r\n      const drawGuide = this.drawGuide;\r\n      let radius;\r\n      if (drawGuide === null || drawGuide < 0) {\r\n        radius = this.defaultDrawStyleRadius;\r\n      } else {\r\n        radius = drawGuide > 0 ? drawGuide / resolution : drawGuide;\r\n      }\r\n      olStyle.getImage().setRadius(radius);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns wether a given Open Layers style has a radius property that can be set (used to set draw guide)\r\n   * @param olStyle The style on which to perform the check\r\n   */\r\n  private isStyleWithRadius(olStyle: OlStyle): boolean {\r\n    return olStyle.getImage && olStyle.getImage().setRadius;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { GeometryFormFieldComponent } from './geometry-form-field.component';\r\nimport { GeometryFormFieldInputComponent } from './geometry-form-field-input.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ],\r\n  declarations: [\r\n    GeometryFormFieldComponent,\r\n    GeometryFormFieldInputComponent\r\n  ]\r\n})\r\nexport class IgoGeometryFormFieldModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoGeometryFormFieldModule } from './geometry-form-field/geometry-form-field.module';\r\nimport { GeometryFormFieldComponent } from './geometry-form-field/geometry-form-field.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  exports: [\r\n    IgoGeometryFormFieldModule\r\n  ],\r\n  declarations: [],\r\n  providers: [],\r\n  entryComponents: [\r\n    GeometryFormFieldComponent\r\n  ]\r\n})\r\nexport class IgoGeometryModule {}\r\n","export class ExportError extends Error {}\r\n\r\nexport class ExportInvalidFileError extends ExportError {\r\n  constructor() {\r\n    super('Invalid file.');\r\n    Object.setPrototypeOf(this, ExportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ExportNothingToExportError extends ExportError {\r\n  constructor() {\r\n    super('Nothing to export.');\r\n    Object.setPrototypeOf(this, ExportNothingToExportError.prototype);\r\n  }\r\n}\r\n","import { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport {\r\n  getEntityProperty,\r\n  EntityTableColumn,\r\n  EntityTableColumnRenderer\r\n} from '@igo2/common';\r\n\r\nimport { ExportNothingToExportError } from './export.errors';\r\n\r\n/**\r\n * Export array to CSV\r\n *\r\n * @param rows Array of arrays to export as CSV\r\n * @param separator Cell separator\r\n */\r\nexport function exportToCSV(rows: any[][], fileName: string, separator: string = ';') {\r\n  const lines = rows.map((row: any[][], index: number) => row.join(separator));\r\n  const csvContent = lines.join('\\n');\r\n  downloadContent(csvContent, 'text/csv;charset=utf-8', fileName);\r\n}\r\n\r\n/**\r\n * Return an array of values from an array of entities.\r\n *\r\n * @param entities Array of entities\r\n * @param scolumns Columns definition of the output data\r\n */\r\nexport function entitiesToRowData(entities: object[], columns: EntityTableColumn[]) {\r\n  return entities.map((entity: object) => {\r\n    return columns.map((column: EntityTableColumn) => {\r\n      let valueAccessor;\r\n      if (column.renderer === undefined || column.renderer === EntityTableColumnRenderer.Default) {\r\n        valueAccessor = column.valueAccessor;\r\n      }\r\n      valueAccessor = valueAccessor ? valueAccessor : getEntityProperty;\r\n      return valueAccessor(entity, column.name);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Trigger download of a file\r\n *\r\n * @param content File content\r\n * @param mimeType File mime type\r\n * @param fileName File name\r\n */\r\nexport function downloadContent(content: string, mimeType: string, fileName: string) {\r\n  const element = document.createElement('a');\r\n  element.setAttribute(\r\n    'href',\r\n    `data:${mimeType},${encodeURIComponent(content)}`\r\n  );\r\n  element.setAttribute('download', fileName);\r\n  element.style.display = 'none';\r\n  document.body.appendChild(element);\r\n\r\n  element.click();\r\n\r\n  document.body.removeChild(element);\r\n}\r\n\r\nexport function handleFileExportError(\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  if (error instanceof ExportNothingToExportError) {\r\n    handleNothingToExportError(messageService, languageService);\r\n    return;\r\n  }\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.failed.title');\r\n  const message = translate.instant('igo.geo.export.failed.text');\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToExportError(\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.export.nothing.title');\r\n  const message = translate.instant('igo.geo.export.nothing.text');\r\n  messageService.error(message, title);\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const ExportFormat = strEnum(['GeoJSON', 'GML', 'GPX', 'KML', 'Shapefile']);\r\nexport type ExportFormat = keyof typeof ExportFormat;\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { downloadContent } from './export.utils';\r\nimport { ExportFormat } from './export.type';\r\nimport { ExportInvalidFileError, ExportNothingToExportError } from './export.errors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportService {\r\n\r\n  static ogreFormats = {\r\n    GML: 'gml',\r\n    GPX: 'gpx',\r\n    KML: 'kml',\r\n    Shapefile: 'ESRI Shapefile'\r\n  };\r\n\r\n  static noOgreFallbacks = ['GML', 'GPX', 'KML'];\r\n\r\n  private ogreUrl: string;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n  }\r\n\r\n  export(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn = 'EPSG:4326',\r\n    projectionOut = 'EPSG:4326'\r\n  ): Observable<void> {\r\n    const exportOlFeatures = olFeatures.map((olFeature: OlFeature) => {\r\n      const keys = olFeature.getKeys().filter((key: string) => !key.startsWith('_'));\r\n      const properties = keys.reduce((acc: object, key: string) => {\r\n        acc[key] = olFeature.get(key);\r\n        return acc;\r\n      }, {geometry: olFeature.getGeometry()});\r\n      return new OlFeature(properties);\r\n    });\r\n\r\n    return this.exportAsync(exportOlFeatures, format, title, projectionIn, projectionOut);\r\n  }\r\n\r\n  private exportAsync(\r\n    olFeatures: OlFeature[],\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ): Observable<void> {\r\n    const doExport = (observer: Observer<void>) => {\r\n      const nothingToExport = this.nothingToExport(olFeatures, format);\r\n      if (nothingToExport === true) {\r\n        observer.error(new ExportNothingToExportError());\r\n        return;\r\n      }\r\n\r\n      const ogreFormats = Object.keys(ExportService.ogreFormats);\r\n      if (ogreFormats.indexOf(format) >= 0) {\r\n        if (this.ogreUrl === undefined) {\r\n          if (ExportService.noOgreFallbacks.indexOf(format) >= 0) {\r\n            this.exportToFile(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n          } else {\r\n            observer.error(new ExportInvalidFileError());\r\n          }\r\n          return;\r\n        }\r\n        this.exportWithOgre(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n      } else {\r\n        this.exportToFile(olFeatures, observer, format, title, projectionIn, projectionOut);\r\n      }\r\n    };\r\n\r\n    return new Observable(doExport);\r\n  }\r\n\r\n  private exportToFile(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: ExportFormat,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const olFormat = new olformat[format]();\r\n    const featuresText = olFormat.writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const fileName = `${title}.${format.toLowerCase()}`;\r\n\r\n    downloadContent(featuresText, 'text/plain;charset=utf-8', fileName);\r\n    observer.complete();\r\n  }\r\n\r\n  private exportWithOgre(\r\n    olFeatures: OlFeature[],\r\n    observer: Observer<void>,\r\n    format: string,\r\n    title: string,\r\n    projectionIn: string,\r\n    projectionOut: string\r\n  ) {\r\n    const featuresText = new olformat.GeoJSON().writeFeatures(olFeatures, {\r\n      dataProjection: projectionOut,\r\n      featureProjection: projectionIn,\r\n      featureType: 'feature',\r\n      featureNS: 'http://example.com/feature'\r\n    });\r\n\r\n    const url = `${this.ogreUrl}/convert`;\r\n    const form = document.createElement('form');\r\n    form.setAttribute('method', 'post');\r\n    form.setAttribute('action', url);\r\n\r\n    const geojsonField = document.createElement('input');\r\n    geojsonField.setAttribute('type', 'hidden');\r\n    geojsonField.setAttribute('name', 'json');\r\n    geojsonField.setAttribute('value', featuresText);\r\n    form.appendChild(geojsonField);\r\n\r\n    const outputNameField = document.createElement('input');\r\n    const outputName = format === 'Shapefile' ? `${title}.zip` : title;\r\n    outputNameField.setAttribute('type', 'hidden');\r\n    outputNameField.setAttribute('name', 'outputName');\r\n    outputNameField.setAttribute('value', outputName);\r\n    form.appendChild(outputNameField);\r\n\r\n    const ogreFormat = ExportService.ogreFormats[format];\r\n    const outputFormatField = document.createElement('input');\r\n    outputFormatField.setAttribute('type', 'hidden');\r\n    outputFormatField.setAttribute('name', 'formatOutput');\r\n    outputFormatField.setAttribute('value', ogreFormat);\r\n    form.appendChild(outputFormatField);\r\n\r\n    document.body.appendChild(form);\r\n    form.submit();\r\n    document.body.removeChild(form);\r\n\r\n    observer.complete();\r\n  }\r\n\r\n  private nothingToExport(olFeatures: OlFeature[], format: string): boolean {\r\n    if (olFeatures.length === 0) { return true; }\r\n    if (format === 'GPX') {\r\n      const pointOrLine = olFeatures.find((olFeature) => {\r\n        return ['Point', 'LineString'].indexOf(olFeature.getGeometry().getType()) >= 0;\r\n      });\r\n      return pointOrLine === undefined;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","export class ImportError extends Error {}\r\n\r\nexport class ImportInvalidFileError extends ImportError {\r\n  constructor() {\r\n    super('Invalid file.');\r\n    Object.setPrototypeOf(this, ImportInvalidFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportUnreadableFileError extends ImportError {\r\n  constructor() {\r\n      super('Failed to read file.');\r\n      Object.setPrototypeOf(this, ImportUnreadableFileError.prototype);\r\n  }\r\n}\r\n\r\nexport class ImportNothingToImportError extends ImportError {\r\n  constructor() {\r\n      super('Nothing to import.');\r\n      Object.setPrototypeOf(this, ImportNothingToImportError.prototype);\r\n  }\r\n}\r\n","import * as olStyle from 'ol/style';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { FeatureDataSourceOptions } from '../../datasource/shared/datasources/feature-datasource.interface';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { featureToOl, moveToOlFeatures } from '../../feature/shared/feature.utils';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { QueryableDataSourceOptions } from '../../query/shared/query.interfaces';\r\n\r\nexport function addLayerAndFeaturesToMap(features: Feature[], map: IgoMap, layerTitle: string): VectorLayer {\r\n  const olFeatures = features.map((feature: Feature) => featureToOl(feature, map.projection));\r\n\r\n  const r = Math.floor(Math.random() * 255);\r\n  const g = Math.floor(Math.random() * 255);\r\n  const b = Math.floor(Math.random() * 255);\r\n  const stroke = new olStyle.Stroke({\r\n    color: [r, g, b, 1],\r\n    width: 2\r\n  });\r\n\r\n  const fill = new olStyle.Fill({\r\n    color: [r, g, b, 0.4]\r\n  });\r\n  const sourceOptions: FeatureDataSourceOptions & QueryableDataSourceOptions = {\r\n    queryable: true\r\n  };\r\n  const source = new FeatureDataSource(sourceOptions);\r\n  source.ol.addFeatures(olFeatures);\r\n  const layer = new VectorLayer({\r\n    title: layerTitle,\r\n    source,\r\n    style: new olStyle.Style({\r\n      stroke,\r\n      fill,\r\n      image: new olStyle.Circle({\r\n        radius: 5,\r\n        stroke,\r\n        fill\r\n      })\r\n    })\r\n  });\r\n  map.addLayer(layer);\r\n  moveToOlFeatures(map, olFeatures);\r\n\r\n  return layer;\r\n}\r\n\r\nexport function handleFileImportSuccess(\r\n  file: File,\r\n  features: Feature[],\r\n  map: IgoMap,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  if (features.length === 0) {\r\n    this.handleNothingToImportError(file, messageService, languageService);\r\n    return;\r\n  }\r\n\r\n  const layerTitle = computeLayerTitleFromFile(file);\r\n  addLayerAndFeaturesToMap(features, map, layerTitle);\r\n\r\n  const translate = languageService.translate;\r\n  const messageTitle = translate.instant('igo.geo.dropGeoFile.success.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.success.text', {\r\n      value: layerTitle\r\n  });\r\n  messageService.success(message, messageTitle);\r\n}\r\n\r\nexport function handleFileImportError(\r\n  file: File,\r\n  error: Error,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.invalid.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.invalid.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function handleNothingToImportError(\r\n  file: File,\r\n  messageService: MessageService,\r\n  languageService: LanguageService\r\n) {\r\n  const translate = languageService.translate;\r\n  const title = translate.instant('igo.geo.dropGeoFile.empty.title');\r\n  const message = translate.instant('igo.geo.dropGeoFile.empty.text', {\r\n      value: file.name,\r\n      mimeType: file.type\r\n  });\r\n  messageService.error(message, title);\r\n}\r\n\r\nexport function getFileExtension(file: File): string {\r\n  return file.name.split('.').pop().toLowerCase();\r\n}\r\n\r\nexport function computeLayerTitleFromFile(file: File): string {\r\n  return file.name.substr(0, file.name.lastIndexOf('.'));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { uuid } from '@igo2/utils';\r\n\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport * as olformat from 'ol/format';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { ImportInvalidFileError, ImportUnreadableFileError } from './import.errors';\r\nimport { computeLayerTitleFromFile, getFileExtension } from './import.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImportService {\r\n\r\n  static allowedMimeTypes = [\r\n    'application/gml+xml',\r\n    'application/vnd.google-earth.kml+xml',\r\n    'application/gpx+xml',\r\n    'application/json'\r\n  ];\r\n\r\n  static allowedZipMimeTypes = [\r\n    'application/zip',\r\n    'application/x-zip-compressed',\r\n    'application/x-zip'\r\n  ];\r\n\r\n  static allowedExtensions = [\r\n    'geojson',\r\n    'kml',\r\n    'gpx',\r\n    'json',\r\n    'gml'\r\n  ];\r\n\r\n  private ogreUrl: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private config: ConfigService\r\n  ) {\r\n    this.ogreUrl = this.config.getConfig('importExport.url');\r\n  }\r\n\r\n  import(file: File, projectionIn = 'EPSG:4326', projectionOut = 'EPSG:4326'): Observable<Feature[]> {\r\n    return this.importAsync(file, projectionIn, projectionOut);\r\n  }\r\n\r\n  private getFileImporter(file: File): (file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) => void {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n    const allowedMimeTypes = [...ImportService.allowedMimeTypes, ...ImportService.allowedZipMimeTypes];\r\n    const allowedExtensions = ImportService.allowedExtensions;\r\n\r\n    if (allowedMimeTypes.indexOf(mimeType) < 0 && allowedExtensions.indexOf(extension) < 0) {\r\n      return undefined;\r\n    } else if (mimeType === 'application/json' || ['json', 'geojson', 'kml'].indexOf(extension) >= 0) {\r\n      return this.importFile;\r\n    } else if (this.ogreUrl !== undefined) {\r\n      return this.importFileWithOgre;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private importAsync(file: File, projectionIn: string, projectionOut: string): Observable<Feature[]> {\r\n    const doImport = (observer: Observer<Feature[]>) => {\r\n      const importer = this.getFileImporter(file);\r\n      if (importer === undefined) {\r\n        observer.error(new ImportInvalidFileError());\r\n        return;\r\n      }\r\n\r\n      importer.call(this, file, observer, projectionIn, projectionOut);\r\n    };\r\n\r\n    return new Observable(doImport);\r\n  }\r\n\r\n  private importFile(file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event: any) => {\r\n      try {\r\n        const features = this.parseFeaturesFromFile(\r\n          file,\r\n          event.target.result,\r\n          projectionIn,\r\n          projectionOut\r\n        );\r\n        observer.next(features);\r\n      } catch (e) {\r\n        observer.error(new ImportUnreadableFileError());\r\n      }\r\n\r\n      observer.complete();\r\n    };\r\n\r\n    reader.onerror = evt => {\r\n      observer.error(new ImportUnreadableFileError());\r\n    };\r\n\r\n    reader.readAsText(file, 'UTF-8');\r\n  }\r\n\r\n  private importFileWithOgre(file: File, observer: Observer<Feature[]>, projectionIn: string, projectionOut: string) {\r\n    const url = `${this.ogreUrl}/convert`;\r\n    const formData = new FormData();\r\n    formData.append('upload', file);\r\n    formData.append('sourceSrs', projectionIn);\r\n    formData.append('targetSrs', projectionOut);\r\n    formData.append('formatOutput', 'GEOJSON');\r\n    formData.append('skipFailures', '');\r\n\r\n    this.http\r\n      .post(url, formData, {headers: new HttpHeaders()})\r\n      .subscribe(\r\n        (response: {errors?: string[]} | object | null) => {\r\n          if (response === null) {\r\n            observer.error(new ImportUnreadableFileError());\r\n            return;\r\n          }\r\n\r\n          const errors = (response as any).errors || [];\r\n          if (errors.length > 0) {\r\n            observer.error(new ImportUnreadableFileError());\r\n          } else {\r\n            const features = this.parseFeaturesFromGeoJSON(file, response, projectionOut);\r\n            observer.next(features);\r\n            observer.complete();\r\n          }\r\n        },\r\n        (error: Error) => {\r\n          observer.error(new ImportUnreadableFileError());\r\n        }\r\n      );\r\n  }\r\n\r\n  private parseFeaturesFromFile(file: File, data: string, projectionIn: string, projectionOut: string): Feature[] {\r\n    const extension = getFileExtension(file);\r\n    const mimeType = file.type;\r\n\r\n    const GeoJSON = new olformat.GeoJSON();\r\n\r\n    let format;\r\n    if (mimeType === 'application/vnd.google-earth.kml+xml') {\r\n      format = new olformat.KML();\r\n    } else if (mimeType === 'application/gml+xml') {\r\n      format = new olformat.GML();\r\n    } else if (mimeType === 'application/gpx+xml') {\r\n      format = new olformat.GPX();\r\n    } else {\r\n      switch (extension) {\r\n        case 'kml':\r\n          format = new olformat.KML();\r\n          break;\r\n       case 'gpx':\r\n          format = new olformat.GPX();\r\n          break;\r\n        case 'gml':\r\n          format = new olformat.GML();\r\n          break;\r\n        default:\r\n          format = GeoJSON;\r\n          break;\r\n      }\r\n    }\r\n\r\n    const olFeatures = format.readFeatures(data, {\r\n      dataProjection: projectionIn,\r\n      featureProjection: projectionOut\r\n    });\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(GeoJSON.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n\r\n  private parseFeaturesFromGeoJSON(file: File, data: object, projectionOut: string): Feature[] {\r\n    const olFormat = new olformat.GeoJSON();\r\n    const olFeatures = olFormat.readFeatures(data);\r\n    const features = olFeatures.map((olFeature: OlFeature) => {\r\n      return Object.assign(olFormat.writeFeatureObject(olFeature), {\r\n        projection: projectionOut,\r\n        meta: {\r\n          id: uuid(),\r\n          title: computeLayerTitleFromFile(file)\r\n        }\r\n      });\r\n    });\r\n\r\n    return features;\r\n  }\r\n}\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { Layer } from '../../layer/shared/layers/layer';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\n\r\nimport { handleFileExportError } from '../shared/export.utils';\r\nimport { ExportOptions } from '../shared/export.interface';\r\nimport { ExportFormat } from '../shared/export.type';\r\nimport { ExportService } from '../shared/export.service';\r\nimport { ImportService } from '../shared/import.service';\r\nimport { handleFileImportSuccess, handleFileImportError } from '../shared/import.utils';\r\n\r\n@Component({\r\n  selector: 'igo-import-export',\r\n  templateUrl: './import-export.component.html',\r\n  styleUrls: ['./import-export.component.scss']\r\n})\r\nexport class ImportExportComponent implements OnDestroy, OnInit {\r\n\r\n  public form: FormGroup;\r\n  public formats = ExportFormat;\r\n  public layers: VectorLayer[];\r\n  public inputProj: string = 'EPSG:4326';\r\n\r\n  private layers$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  constructor(\r\n    private importService: ImportService,\r\n    private exportService: ExportService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$.subscribe(layers => {\r\n      this.layers = layers\r\n        .filter((layer: Layer) => {\r\n          return layer instanceof VectorLayer && layer.exportable === true;\r\n        }) as VectorLayer[];\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  importFiles(files: File[]) {\r\n    for (const file of files) {\r\n      this.importService\r\n        .import(file, this.inputProj)\r\n        .subscribe(\r\n          (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n          (error: Error) => this.onFileImportError(file, error)\r\n        );\r\n    }\r\n  }\r\n\r\n  handleExportFormSubmit(data: ExportOptions) {\r\n    const layer = this.map.getLayerById(data.layer);\r\n    const olFeatures = layer.dataSource.ol.getFeatures();\r\n    this.exportService\r\n      .export(olFeatures, data.format, layer.title, this.map.projection)\r\n      .subscribe(\r\n        () => {},\r\n        (error: Error) => this.onFileExportError(error)\r\n      );\r\n  }\r\n\r\n  private buildForm() {\r\n    this.form = this.formBuilder.group({\r\n      format: ['', [Validators.required]],\r\n      layer: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    handleFileImportError(file, error, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileExportError(error: Error) {\r\n    handleFileExportError(error, this.messageService, this.languageService);\r\n  }\r\n}\r\n","import { Directive, HostListener, EventEmitter, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MessageService, LanguageService } from '@igo2/core';\r\nimport { DragAndDropDirective } from '@igo2/common';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { ImportService } from './import.service';\r\nimport { handleFileImportSuccess, handleFileImportError } from '../shared/import.utils';\r\n\r\n@Directive({\r\n  selector: '[igoDropGeoFile]'\r\n})\r\nexport class DropGeoFileDirective extends DragAndDropDirective implements OnInit, OnDestroy {\r\n\r\n  protected filesDropped: EventEmitter<File[]> = new EventEmitter();\r\n  protected filesInvalid: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  private filesDropped$$: Subscription;\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    private component: MapBrowserComponent,\r\n    private importService: ImportService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filesDropped$$ = this.filesDropped.subscribe((files: File[]) => {\r\n      this.onFilesDropped(files);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.filesDropped$$.unsubscribe();\r\n  }\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(evt) {\r\n    super.onDragOver(evt);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(evt) {\r\n    super.onDragLeave(evt);\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(evt) {\r\n    super.onDrop(evt);\r\n  }\r\n\r\n  private onFilesDropped(files: File[]) {\r\n    for (const file of files) {\r\n      this.importService\r\n        .import(file)\r\n        .subscribe(\r\n          (features: Feature[]) => this.onFileImportSuccess(file, features),\r\n          (error: Error) => this.onFileImportError(file, error)\r\n        );\r\n    }\r\n  }\r\n\r\n  private onFileImportSuccess(file: File, features: Feature[]) {\r\n    handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);\r\n  }\r\n\r\n  private onFileImportError(file: File, error: Error) {\r\n    handleFileImportError(file, error, this.messageService, this.languageService);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatButtonModule,\r\n  MatTabsModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule, IgoDrapDropModule } from '@igo2/common';\r\n\r\nimport { ImportExportComponent } from './import-export/import-export.component';\r\nimport { DropGeoFileDirective } from './shared/drop-geo-file.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule,\r\n    IgoDrapDropModule\r\n  ],\r\n  exports: [ImportExportComponent, DropGeoFileDirective],\r\n  declarations: [ImportExportComponent, DropGeoFileDirective]\r\n})\r\nexport class IgoImportExportModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoImportExportModule\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatSliderModule,\r\n  MatBadgeModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport {\r\n  IgoListModule,\r\n  IgoCollapsibleModule,\r\n  IgoImageModule\r\n} from '@igo2/common';\r\n\r\nimport { LayerService } from './shared/layer.service';\r\nimport { StyleService } from './shared/style.service';\r\nimport { LayerListService } from './layer-list/layer-list.service';\r\nimport { LayerItemComponent } from './layer-item/layer-item.component';\r\nimport { LayerLegendComponent } from './layer-legend/layer-legend.component';\r\nimport { LayerListComponent } from './layer-list/layer-list.component';\r\nimport { LayerListBindingDirective } from './layer-list/layer-list-binding.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    MatListModule,\r\n    MatSliderModule,\r\n    MatBadgeModule,\r\n    IgoLanguageModule,\r\n    IgoListModule,\r\n    IgoCollapsibleModule,\r\n    IgoImageModule\r\n  ],\r\n  exports: [\r\n    LayerItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListBindingDirective\r\n  ],\r\n  declarations: [\r\n    LayerItemComponent,\r\n    LayerLegendComponent,\r\n    LayerListComponent,\r\n    LayerListBindingDirective\r\n  ]\r\n})\r\nexport class IgoLayerModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLayerModule,\r\n      providers: [LayerService, StyleService, LayerListService]\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoConfirmDialogModule } from '@igo2/common';\r\n\r\nimport { MapBrowserComponent } from './map-browser/map-browser.component';\r\nimport { ZoomButtonComponent } from './zoom-button/zoom-button.component';\r\nimport { GeolocateButtonComponent } from './geolocate-button/geolocate-button.component';\r\nimport { RotationButtonComponent } from './rotation-button/rotation-button.component';\r\nimport { BaseLayersSwitcherComponent } from './baselayers-switcher/baselayers-switcher.component';\r\nimport { MiniBaseMapComponent } from './baselayers-switcher/mini-basemap.component';\r\nimport { MapOfflineDirective } from './shared/mapOffline.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoLanguageModule,\r\n    IgoConfirmDialogModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTooltipModule\r\n  ],\r\n  exports: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapOfflineDirective\r\n  ],\r\n  declarations: [\r\n    MapBrowserComponent,\r\n    ZoomButtonComponent,\r\n    GeolocateButtonComponent,\r\n    RotationButtonComponent,\r\n    BaseLayersSwitcherComponent,\r\n    MiniBaseMapComponent,\r\n    MapOfflineDirective\r\n  ]\r\n})\r\nexport class IgoMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport {\r\n  MeasureType,\r\n  MeasureAreaUnit,\r\n  MeasureLengthUnit\r\n} from '../shared/measure.enum';\r\nimport { computeBestAreaUnit, computeBestLengthUnit } from '../shared/measure.utils';\r\n\r\n/**\r\n * Measurer item\r\n */\r\n@Component({\r\n  selector: 'igo-measurer-item',\r\n  templateUrl: './measurer-item.component.html',\r\n  styleUrls: ['./measurer-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MeasurerItemComponent implements OnDestroy {\r\n\r\n  /**\r\n   * Measure observable\r\n   * @internal\r\n   */\r\n  public measure$: BehaviorSubject<number> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the measure observable when the auto mode is on\r\n   * @internal\r\n   */\r\n  public measure$$: Subscription;\r\n\r\n  /**\r\n   * Measure type\r\n   */\r\n  @Input() measureType: MeasureType;\r\n\r\n  /**\r\n   * Measure unit\r\n   */\r\n  @Input() measureUnit: MeasureAreaUnit | MeasureLengthUnit;\r\n\r\n  /**\r\n   * Measure\r\n   */\r\n  @Input()\r\n  set measure(value: number) {\r\n    this.measure$.next(value);\r\n  }\r\n  get measure(): number { return this.measure$.value; }\r\n\r\n  /**\r\n   * Whther measure units should be automatically determined\r\n   */\r\n  @Input()\r\n  set auto(value: boolean) { this.toggleAutoUnit(value); }\r\n  get auto(): boolean { return this._auto; }\r\n  private _auto: boolean = false;\r\n\r\n  /**\r\n   * Placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Event emitted when the measure unit changes\r\n   */\r\n  @Output() measureUnitChange = new EventEmitter<MeasureAreaUnit | MeasureLengthUnit>();\r\n\r\n  /**\r\n   * Available measure units for the measure type given\r\n   * @internal\r\n   */\r\n  get measureUnits(): string[] {\r\n    if (this.measureType === MeasureType.Area) {\r\n      return Object.values(MeasureAreaUnit);\r\n    }\r\n    return Object.values(MeasureLengthUnit);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Toggle the auto unit off\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.toggleAutoUnit(false);\r\n  }\r\n\r\n  /**\r\n   * Set the measure unit\r\n   * @internal\r\n   */\r\n  onMeasureUnitChange(unit: MeasureAreaUnit | MeasureLengthUnit) {\r\n    this.measureUnit = unit;\r\n    this.measureUnitChange.emit(unit);\r\n  }\r\n\r\n  private toggleAutoUnit(toggle: boolean) {\r\n    if (this.measure$$ !== undefined) {\r\n      this.measure$$.unsubscribe();\r\n    }\r\n    if (toggle === true) {\r\n      this.measure$$ = this.measure$.subscribe((measure: number) => {\r\n        this.computeBestMeasureUnit(measure);\r\n      });\r\n    }\r\n    this._auto = toggle;\r\n  }\r\n\r\n  private computeBestMeasureUnit(measure: number) {\r\n    let measureUnit = this.measureUnit;\r\n    if (this.measureType === MeasureType.Area) {\r\n      measureUnit = computeBestAreaUnit(measure);\r\n    } else if (this.measureType === MeasureType.Length) {\r\n      measureUnit = computeBestLengthUnit(measure);\r\n    }\r\n    if (measureUnit !== this.measureUnit) {\r\n      this.onMeasureUnitChange(measureUnit);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSelectModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoEntityTableModule } from '@igo2/common';\r\n\r\nimport { MeasureFormatPipe } from './measure-format.pipe';\r\nimport { MeasurerItemComponent } from './measurer-item.component';\r\nimport { MeasurerComponent } from './measurer.component';\r\nimport { MeasurerDialogComponent } from './measurer-dialog.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoEntityTableModule\r\n  ],\r\n  declarations: [\r\n    MeasureFormatPipe,\r\n    MeasurerItemComponent,\r\n    MeasurerComponent,\r\n    MeasurerDialogComponent\r\n  ],\r\n  exports: [\r\n    MeasureFormatPipe,\r\n    MeasurerComponent\r\n  ],\r\n  entryComponents: [\r\n    MeasurerDialogComponent\r\n  ]\r\n})\r\nexport class IgoMeasurerModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { IgoMeasurerModule } from './measurer/measurer.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoMeasurerModule\r\n  ]\r\n})\r\nexport class IgoMeasureModule {}\r\n","export enum OverlayAction {\r\n    None,\r\n    Move,\r\n    Zoom,\r\n    ZoomIfOutMapExtent\r\n  }\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayAction } from './overlay.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OverlayService {\r\n  public features$ = new BehaviorSubject<[Feature[], OverlayAction]>([\r\n    [],\r\n    undefined\r\n  ]);\r\n\r\n  constructor() {}\r\n\r\n  setFeatures(features: Feature[], action: OverlayAction = OverlayAction.None) {\r\n    this.features$.next([features, action]);\r\n  }\r\n\r\n  clear() {\r\n    this.features$.next([[], OverlayAction.None]);\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport * as olextent from 'ol/extent';\r\nimport * as olproj from 'ol/proj';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { MapBrowserComponent } from '../../map/map-browser/map-browser.component';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\n\r\nimport { OverlayService } from '../shared/overlay.service';\r\nimport { OverlayAction } from '../shared/overlay.enum';\r\n\r\n@Directive({\r\n  selector: '[igoOverlay]'\r\n})\r\nexport class OverlayDirective implements OnInit, OnDestroy {\r\n  private features$$: Subscription;\r\n  private format = new olFormatGeoJSON();\r\n\r\n  get map(): IgoMap {\r\n    return this.component.map;\r\n  }\r\n\r\n  constructor(\r\n    @Self() private component: MapBrowserComponent,\r\n    private overlayService: OverlayService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.features$$ = this.overlayService.features$.subscribe(res =>\r\n      this.handleFeatures(res[0], res[1])\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.features$$.unsubscribe();\r\n  }\r\n\r\n  private handleFeatures(features: Feature[], action: OverlayAction) {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { OverlayDirective } from './shared/overlay.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [OverlayDirective],\r\n  declarations: [OverlayDirective]\r\n})\r\nexport class IgoOverlayModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoOverlayModule\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { saveAs } from 'file-saver';\r\nimport * as jsPDF from 'jspdf';\r\nimport * as _html2canvas from 'html2canvas';\r\nimport * as JSZip from 'jszip';\r\n\r\nimport { SubjectStatus } from '@igo2/utils';\r\nimport { MessageService, ActivityService, LanguageService } from '@igo2/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { formatScale } from '../../map/shared/map.utils';\r\nimport { LayerLegend } from '../../layer/shared/layers/layer.interface';\r\nimport { getLayersLegends } from '../../layer/utils/legend';\r\n\r\nimport { PrintOptions } from './print.interface';\r\n\r\nconst html2canvas = _html2canvas;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrintService {\r\n  zipFile: JSZip;\r\n  nbFileToProcess: number;\r\n  activityId: string;\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private activityService: ActivityService,\r\n    private languageService: LanguageService\r\n  ) {}\r\n\r\n  print(map: IgoMap, options: PrintOptions): Subject<any> {\r\n    const status$ = new Subject();\r\n\r\n    const paperFormat: string = options.paperFormat;\r\n    const resolution = +options.resolution;  // Default is 96\r\n    const orientation = options.orientation;\r\n\r\n    this.activityId = this.activityService.register();\r\n    const doc = new jsPDF({\r\n      orientation,\r\n      format: paperFormat.toLowerCase()\r\n    });\r\n\r\n    const dimensions = [\r\n      doc.internal.pageSize.width,\r\n      doc.internal.pageSize.height\r\n    ];\r\n\r\n    const margins = [20, 10, 20, 10];\r\n    const width = dimensions[0] - margins[3] - margins[1];\r\n    const height = dimensions[1] - margins[0] - margins[2];\r\n    const size = [width, height];\r\n\r\n    if (options.title !== undefined) {\r\n      this.addTitle(doc, options.title, dimensions[0]);\r\n    }\r\n\r\n    if (options.showProjection === true || options.showScale === true) {\r\n      this.addProjScale(\r\n        doc,\r\n        map,\r\n        resolution,\r\n        options.showProjection,\r\n        options.showScale\r\n      );\r\n    }\r\n    if (options.comment !== '') {\r\n      this.addComment(doc, options.comment);\r\n    }\r\n\r\n    this.addMap(doc, map, resolution, size, margins).subscribe(\r\n      (status: SubjectStatus) => {\r\n        if (status === SubjectStatus.Done) {\r\n          if (options.showLegend === true) {\r\n            this.addLegend(doc, map, margins, resolution);\r\n          } else {\r\n            this.saveDoc(doc);\r\n          }\r\n        }\r\n\r\n        if (status === SubjectStatus.Done || status === SubjectStatus.Error) {\r\n          this.activityService.unregister(this.activityId);\r\n          status$.next(SubjectStatus.Done);\r\n        }\r\n      }\r\n    );\r\n\r\n    return status$;\r\n  }\r\n\r\n  /**\r\n   * Get html code for all layers legend\r\n   * @param  map IgoMap\r\n   * @param  width The width that the legend need to be\r\n   * @return Html code for the legend\r\n   */\r\n  getLayersLegendHtml(map: IgoMap, width: number, resolution: number): string {\r\n    let html = '';\r\n    const legends = getLayersLegends(map.layers, map.viewController.getScale(resolution));\r\n    if (legends.length === 0) {\r\n      return html;\r\n    }\r\n\r\n    // Define important style to be sure that all container is convert\r\n    // to image not just visible part\r\n    html += '<style media=\"screen\" type=\"text/css\">';\r\n    html += '.html2canvas-container { width: ' + width;\r\n    html += 'mm !important; height: 2000px !important; }';\r\n    html += '</style>';\r\n    html += '<font size=\"2\" face=\"Courier New\" >';\r\n    html += '<div style=\"display:inline-block;max-width:' + width + 'mm\">';\r\n    // For each legend, define an html table cell\r\n    legends.forEach((legend: LayerLegend) => {\r\n      html +=\r\n        '<table border=1 style=\"display:inline-block;vertical-align:top\">';\r\n      html += '<tr><th width=\"170px\">' + legend.title + '</th>';\r\n      html += '<td><img class=\"printImageLegend\" src=\"' + legend.url + '\">';\r\n      html += '</td></tr></table>';\r\n    });\r\n    html += '</div>';\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Get all the legend in a single image\r\n   * * @param  format - Image format. default value to \"png\"\r\n   * @return The image of the legend\r\n   */\r\n  getLayersLegendImage(map, format: string = 'png', doZipFile: boolean, resolution: number) {\r\n    const status$ = new Subject();\r\n    // Get html code for the legend\r\n    const width = 200; // milimeters unit, originally define for document pdf\r\n    let html = this.getLayersLegendHtml(map, width, resolution);\r\n    const that = this;\r\n    format = format.toLowerCase();\r\n\r\n    // If no legend show No LEGEND in an image\r\n    if (html.length === 0) {\r\n      html = '<font size=\"12\" face=\"Courier New\" >';\r\n      html += '<div align=\"center\"><b>NO LEGEND</b></div>';\r\n    }\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n    // Define event to execute after all images are loaded to create the canvas\r\n    setTimeout(() => {\r\n      html2canvas(div, { useCORS: true }).then(canvas => {\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          if (!doZipFile) {\r\n            // Save the canvas as file\r\n            that.saveCanvasImageAsFile(canvas, 'legendImage', format);\r\n          } else {\r\n            // Add the canvas to zip\r\n            that.generateCanvaFileToZip(canvas, 'legendImage' + '.' + format);\r\n          }\r\n          div.parentNode.removeChild(div); // remove temp div (IE)\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n        }\r\n        status$.next(status);\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  private addTitle(doc: jsPDF, title: string, pageWidth: number) {\r\n    const pdfResolution = 96;\r\n    const titleSize = 32;\r\n    const titleWidth = ((titleSize * 25.4) / pdfResolution) * title.length;\r\n\r\n    let titleMarginLeft;\r\n    if (titleWidth > pageWidth) {\r\n      titleMarginLeft = 0;\r\n    } else {\r\n      titleMarginLeft = (pageWidth - titleWidth) / 2;\r\n    }\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(32);\r\n    doc.text(title, titleMarginLeft, 15);\r\n  }\r\n\r\n  /**\r\n   * Add comment to the document\r\n   * * @param  doc - pdf document\r\n   * * @param  comment - Comment to add in the document\r\n   * * @param  size - Size of the document\r\n   */\r\n  private addComment(doc: jsPDF, comment: string) {\r\n    const commentSize = 16;\r\n    const commentMarginLeft = 20;\r\n    const marginBottom = 5;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    doc.setFont('courier');\r\n    doc.setFontSize(commentSize);\r\n    doc.text(comment, commentMarginLeft, heightPixels);\r\n  }\r\n  /**\r\n   * Add projection and/or scale to the document\r\n   * @param  doc - pdf document\r\n   * @param  map - Map of the app\r\n   * @param  dpi - DPI resolution of the document\r\n   * @param  projection - Bool to indicate if projection need to be added\r\n   * @param  scale - Bool to indicate if scale need to be added\r\n   */\r\n  private addProjScale(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    dpi: number,\r\n    projection: boolean,\r\n    scale: boolean\r\n  ) {\r\n    const translate = this.languageService.translate;\r\n    const projScaleSize = 16;\r\n    const projScaleMarginLeft = 20;\r\n    const marginBottom = 15;\r\n    const heightPixels = doc.internal.pageSize.height - marginBottom;\r\n\r\n    let textProjScale: string = '';\r\n    if (projection === true) {\r\n      const projText = translate.instant('igo.geo.printForm.projection');\r\n      textProjScale += projText + ': ' + map.projection;\r\n    }\r\n    if (scale === true) {\r\n      if (projection === true) {\r\n        textProjScale += '   ';\r\n      }\r\n      const scaleText = translate.instant('igo.geo.printForm.scale');\r\n      const mapScale = map.viewController.getScale(dpi);\r\n      textProjScale += scaleText + ' ~ 1 ' + formatScale(mapScale);\r\n    }\r\n    doc.setFont('courier');\r\n    doc.setFontSize(projScaleSize);\r\n    doc.text(textProjScale, projScaleMarginLeft, heightPixels);\r\n  }\r\n\r\n  /**\r\n   * Add the legend to the document\r\n   * @param  doc - Pdf document where legend will be added\r\n   * @param  map - Map of the app\r\n   * @param  margins - Page margins\r\n   */\r\n  private addLegend(doc: jsPDF, map: IgoMap, margins: Array<number>, resolution: number) {\r\n    const that = this;\r\n    // Get html code for the legend\r\n    const width = doc.internal.pageSize.width;\r\n    const html = this.getLayersLegendHtml(map, width, resolution);\r\n    // If no legend, save the map directly\r\n    if (html === '') {\r\n      this.saveDoc(doc);\r\n      return true;\r\n    }\r\n\r\n    // Create div to contain html code for legend\r\n    const div = window.document.createElement('div');\r\n    html2canvas(div, { useCORS: true }).then(canvas => {\r\n      let imgData;\r\n      const position = 10;\r\n\r\n      imgData = canvas.toDataURL('image/png');\r\n      doc.addPage();\r\n      const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n      doc.addImage(imgData, 'PNG', 10, position, imageSize[0], imageSize[1]);\r\n      that.saveDoc(doc);\r\n      div.parentNode.removeChild(div); // remove temp div (IE style)\r\n    });\r\n\r\n    // Add html code to convert in the new window\r\n    window.document.body.appendChild(div);\r\n    div.innerHTML = html;\r\n  }\r\n\r\n  private addCanvas(\r\n    doc: jsPDF,\r\n    canvas: HTMLCanvasElement,\r\n    margins: Array<number>\r\n  ) {\r\n    let image;\r\n\r\n    image = canvas.toDataURL('image/jpeg');\r\n\r\n    if (image !== undefined) {\r\n      const imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);\r\n      doc.addImage(\r\n        image,\r\n        'JPEG',\r\n        margins[3],\r\n        margins[0],\r\n        imageSize[0],\r\n        imageSize[1]\r\n      );\r\n      doc.rect(margins[3], margins[0], imageSize[0], imageSize[1]);\r\n    }\r\n  }\r\n\r\n  // TODO fix printing with image resolution\r\n  private addMap(\r\n    doc: jsPDF,\r\n    map: IgoMap,\r\n    resolution: number,\r\n    size: Array<number>,\r\n    margins: Array<number>\r\n  ) {\r\n    const status$ = new Subject();\r\n\r\n    const mapSize = map.ol.getSize();\r\n    const extent = map.ol.getView().calculateExtent(mapSize);\r\n\r\n    const widthPixels = Math.round((size[0] * resolution) / 25.4);\r\n    const heightPixels = Math.round((size[1] * resolution) / 25.4);\r\n\r\n    let timeout;\r\n\r\n    map.ol.once('postcompose', (event: any) => {\r\n      const canvas = event.context.canvas;\r\n      const mapStatus$$ = map.status$.subscribe((mapStatus: SubjectStatus) => {\r\n        clearTimeout(timeout);\r\n\r\n        if (mapStatus !== SubjectStatus.Done) {\r\n          return;\r\n        }\r\n\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      });\r\n\r\n      // If no loading as started after 200ms, then probably no loading\r\n      // is required.\r\n      timeout = window.setTimeout(() => {\r\n        mapStatus$$.unsubscribe();\r\n\r\n        let status = SubjectStatus.Done;\r\n        try {\r\n          this.addCanvas(doc, canvas, margins);\r\n        } catch (err) {\r\n          status = SubjectStatus.Error;\r\n          this.messageService.error(\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageBody'\r\n            ),\r\n            this.languageService.translate.instant(\r\n              'igo.geo.printForm.corsErrorMessageHeader'\r\n            ),\r\n            'print'\r\n          );\r\n        }\r\n\r\n        this.renderMap(map, mapSize, extent);\r\n        status$.next(status);\r\n      }, 200);\r\n    });\r\n\r\n    this.renderMap(map, [widthPixels, heightPixels], extent);\r\n\r\n    return status$;\r\n  }\r\n\r\n  defineNbFileToProcess(nbFileToProcess) {\r\n    this.nbFileToProcess = nbFileToProcess;\r\n  }\r\n\r\n  /**\r\n   * Download an image of the map with addition of informations\r\n   * @param  map - Map of the app\r\n   * @param  format - Image format. default value to \"png\"\r\n   * @param  projection - Indicate if projection need to be add. Default to false\r\n   * @param  scale - Indicate if scale need to be add. Default to false\r\n   * @param  legend - Indicate if the legend of layers need to be download. Default to false\r\n   * @param  title - Title to add for the map - Default to blank\r\n   * @param  comment - Comment to add for the map - Default to blank\r\n   * @param  doZipFile - Indicate if we do a zip with the file\r\n   * @return Image file of the map with extension format given as parameter\r\n   */\r\n  downloadMapImage(\r\n    map: IgoMap,\r\n    resolution: number,\r\n    format = 'png',\r\n    projection = false,\r\n    scale = false,\r\n    legend = false,\r\n    title = '',\r\n    comment = '',\r\n    doZipFile = true\r\n  ) {\r\n    const status$ = new Subject();\r\n    // const resolution = map.ol.getView().getResolution();\r\n    this.activityId = this.activityService.register();\r\n    const translate = this.languageService.translate;\r\n    map.ol.once('postcompose', (event: any) => {\r\n      format = format.toLowerCase();\r\n      const context = event.context;\r\n      const newCanvas = document.createElement('canvas');\r\n      const newContext = newCanvas.getContext('2d');\r\n      // Postion in height to set the canvas in new canvas\r\n      let positionHCanvas = 0;\r\n      // Position in width to set the Proj/Scale in new canvas\r\n      let positionWProjScale = 10;\r\n      // Get height/width of map canvas\r\n      const width = context.canvas.width;\r\n      let height = context.canvas.height;\r\n      // Set Font to calculate comment width\r\n      newContext.font = '20px Calibri';\r\n      const commentWidth = newContext.measureText(comment).width;\r\n      // Add height for title if defined\r\n      height = title !== '' ? height + 30 : height;\r\n      // Add height for projection or scale (same line) if defined\r\n      height = projection !== false || scale !== false ? height + 30 : height;\r\n      const positionHProjScale = height - 10;\r\n      // Define number of line depending of the comment length\r\n      const commentNbLine = Math.ceil(commentWidth / width);\r\n      // Add height for multiline comment if defined\r\n      height = comment !== '' ? height + commentNbLine * 30 : height;\r\n      let positionHComment = height - commentNbLine * 20 + 5;\r\n      // Set the new canvas with the new calculated size\r\n      newCanvas.width = width;\r\n      newCanvas.height = height;\r\n      // Patch Jpeg default black background to white\r\n      if (format === 'jpeg') {\r\n        newContext.fillStyle = '#ffffff';\r\n        newContext.fillRect(0, 0, width, height);\r\n        newContext.fillStyle = '#000000';\r\n      }\r\n      // If a title need to be added to canvas\r\n      if (title !== '') {\r\n        // Set font for title\r\n        newContext.font = '26px Calibri';\r\n        positionHCanvas = 30;\r\n        newContext.textAlign = 'center';\r\n        newContext.fillText(title, width / 2, 20);\r\n      }\r\n      // Set font for next section\r\n      newContext.font = '20px Calibri';\r\n      // If projection need to be added to canvas\r\n      if (projection !== false) {\r\n        const projText = translate.instant('igo.geo.printForm.projection');\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          projText + ': ' + map.projection,\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n        positionWProjScale += 200; // Width position change for scale position\r\n      }\r\n      // If scale need to be added to canvas\r\n      if (scale !== false) {\r\n        const scaleText = translate.instant('igo.geo.printForm.scale');\r\n        const mapScale = map.viewController.getScale(resolution);\r\n        newContext.textAlign = 'start';\r\n        newContext.fillText(\r\n          scaleText + ' ~ 1 : ' + formatScale(mapScale),\r\n          positionWProjScale,\r\n          positionHProjScale\r\n        );\r\n      }\r\n      // If a comment need to be added to canvas\r\n      if (comment !== '') {\r\n        newContext.textAlign = 'center';\r\n        // If only one line, no need to multiline the comment\r\n        if (commentNbLine === 1) {\r\n          newContext.fillText(comment, width / 2, positionHComment);\r\n        } else {\r\n          // Separate the setenses to be approx. the same length\r\n          const nbCommentChar = comment.length;\r\n          const CommentLengthToCut = Math.floor(nbCommentChar / commentNbLine);\r\n          let commentCurrentLine = '';\r\n          let positionFirstCutChar = 0;\r\n          let positionLastBlank;\r\n          // Loop for the number of line calculated\r\n          for (let i = 0; i < commentNbLine; i++) {\r\n            // For all line except last\r\n            if (commentNbLine - 1 > i) {\r\n              // Get comment current line to find the right place tu cut comment\r\n              commentCurrentLine = comment.substr(\r\n                positionFirstCutChar,\r\n                CommentLengthToCut\r\n              );\r\n              // Cut the setence at blank\r\n              positionLastBlank = commentCurrentLine.lastIndexOf(' ');\r\n              newContext.fillText(\r\n                commentCurrentLine.substr(0, positionLastBlank),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n              positionFirstCutChar += positionLastBlank;\r\n              // Go to next line for insertion\r\n              positionHComment += 20;\r\n            } else {\r\n              // Don't cut last part\r\n              newContext.fillText(\r\n                comment.substr(positionFirstCutChar),\r\n                width / 2,\r\n                positionHComment\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // Add map to new canvas\r\n      newContext.drawImage(context.canvas, 0, positionHCanvas);\r\n\r\n      let status = SubjectStatus.Done;\r\n      try {\r\n        // Save the canvas as file\r\n        if (!doZipFile) {\r\n          this.saveCanvasImageAsFile(newCanvas, 'map', format);\r\n        } else if (format.toLowerCase() === 'tiff') {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(\r\n            newCanvas,\r\n            'map' + map.projection.replace(':', '_') + '.' + format\r\n          );\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.generateCanvaFileToZip(newCanvas, 'map' + '.' + format);\r\n        }\r\n      } catch (err) {\r\n        status = SubjectStatus.Error;\r\n      }\r\n\r\n      status$.next(status);\r\n\r\n      if (format.toLowerCase() === 'tiff') {\r\n        const tiwContent = this.getWorldFileInformation(map);\r\n        const blob = new Blob([tiwContent], {\r\n          type: 'text/plain;charset=utf-8'\r\n        });\r\n        if (!doZipFile) {\r\n          // saveAs automaticly replace ':' for '_'\r\n          saveAs(blob, 'map' + map.projection + '.tfw');\r\n          this.saveFileProcessing();\r\n        } else {\r\n          // Add the canvas to zip\r\n          this.addFileToZip(\r\n            'map' + map.projection.replace(':', '_') + '.tfw',\r\n            blob\r\n          );\r\n        }\r\n      }\r\n    });\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  private renderMap(map, size, extent) {\r\n    map.ol.renderSync();\r\n  }\r\n\r\n  /**\r\n   * Save document\r\n   * @param  doc - Document to save\r\n   */\r\n  private saveDoc(doc: jsPDF) {\r\n    doc.save('map.pdf');\r\n  }\r\n\r\n  /**\r\n   * Calculate the best Image size to fit in pdf\r\n   * @param doc - Pdf Document\r\n   * @param canvas - Canvas of image\r\n   * @param margins - Page margins\r\n   */\r\n  private getImageSizeToFitPdf(doc, canvas, margins) {\r\n    // Define variable to calculate best size to fit in one page\r\n    const pageHeight =\r\n      doc.internal.pageSize.getHeight() - (margins[0] + margins[2]);\r\n    const pageWidth =\r\n      doc.internal.pageSize.getWidth() - (margins[1] + margins[3]);\r\n    const canHeight = canvas.height;\r\n    const canWidth = canvas.width;\r\n    const heightRatio = canHeight / pageHeight;\r\n    const widthRatio = canWidth / pageWidth;\r\n    const maxRatio = heightRatio > widthRatio ? heightRatio : widthRatio;\r\n    const imgHeigh = maxRatio > 1 ? canHeight / maxRatio : canHeight;\r\n    const imgWidth = maxRatio > 1 ? canWidth / maxRatio : canWidth;\r\n\r\n    return [imgWidth, imgHeigh];\r\n  }\r\n\r\n  /**\r\n   * Get a world file information for tiff\r\n   * @param  map - Map of the app\r\n   */\r\n  private getWorldFileInformation(map) {\r\n    const currentResolution = map.viewController.getResolution();\r\n    const currentExtent = map.getExtent(); // Return [minx, miny, maxx, maxy]\r\n    return [\r\n      currentResolution,\r\n      0,\r\n      0,\r\n      -currentResolution,\r\n      currentExtent[0] + currentResolution / 0.5,\r\n      currentExtent[3] - currentResolution / 0.5\r\n    ].join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Save canvas image as file\r\n   * @param canvas - Canvas to save\r\n   * @param name - Name of the file\r\n   * @param format - file format\r\n   */\r\n  private saveCanvasImageAsFile(canvas, name, format) {\r\n    const blobFormat = 'image/' + format;\r\n    const that = this;\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      // If navigator is Internet Explorer\r\n      if (navigator.msSaveBlob) {\r\n        navigator.msSaveBlob(canvas.msToBlob(), name + '.' + format);\r\n        this.saveFileProcessing();\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          // download image\r\n          saveAs(blob, name + '.' + format);\r\n          that.saveFileProcessing();\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to a zip\r\n   * @param canvas - File to add to the zip\r\n   * @param  name -Name of the fileoverview\r\n   */\r\n  private generateCanvaFileToZip(canvas, name) {\r\n    const blobFormat = 'image/' + 'jpeg';\r\n    const that = this;\r\n    if (\r\n      !this.hasOwnProperty('zipFile') ||\r\n      typeof this.zipFile === 'undefined'\r\n    ) {\r\n      this.zipFile = new JSZip();\r\n    }\r\n\r\n    try {\r\n      canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched\r\n      if (navigator.msSaveBlob) {\r\n        this.addFileToZip(name, canvas.msToBlob());\r\n      } else {\r\n        canvas.toBlob(blob => {\r\n          that.addFileToZip(name, blob);\r\n        }, blobFormat);\r\n      }\r\n    } catch (err) {\r\n      this.messageService.error(\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageBody'\r\n        ),\r\n        this.languageService.translate.instant(\r\n          'igo.geo.printForm.corsErrorMessageHeader'\r\n        ),\r\n        'print'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file to zip, if all file are zipped, download\r\n   * @param name - Name of the files\r\n   * @param blob - Contain of file\r\n   */\r\n  private addFileToZip(name, blob) {\r\n    // add file to zip\r\n    this.zipFile.file(name, blob);\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Download zip file\r\n      this.getZipFile();\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  private saveFileProcessing() {\r\n    this.nbFileToProcess--;\r\n\r\n    // If all files are proccessed\r\n    if (this.nbFileToProcess === 0) {\r\n      // Stop loading\r\n      this.activityService.unregister(this.activityId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the zipped file\r\n   * @return Retun a zip file\r\n   */\r\n  private getZipFile() {\r\n    const that = this;\r\n    this.zipFile.generateAsync({ type: 'blob' }).then(blob => {\r\n      // 1) generate the zip file\r\n      saveAs(blob, 'map.zip');\r\n      delete that.zipFile;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\nimport { PrintService } from '../shared/print.service';\r\n\r\n@Component({\r\n  selector: 'igo-print',\r\n  templateUrl: './print.component.html'\r\n})\r\nexport class PrintComponent {\r\n  public disabled = false;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this._outputFormat;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this._outputFormat = value;\r\n  }\r\n  private _outputFormat: PrintOutputFormat;\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this._paperFormat;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this._paperFormat = value;\r\n  }\r\n  private _paperFormat: PrintPaperFormat;\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this._orientation;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this._orientation = value;\r\n  }\r\n  private _orientation: PrintOrientation;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this._imageFormat;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this._imageFormat = value;\r\n  }\r\n  private _imageFormat: PrintSaveImageFormat;\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this._resolution;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this._resolution = value;\r\n  }\r\n  private _resolution: PrintResolution;\r\n\r\n  constructor(private printService: PrintService) {}\r\n\r\n  handleFormSubmit(data: PrintOptions) {\r\n    this.disabled = true;\r\n\r\n    if (data.isPrintService === true) {\r\n      this.printService\r\n        .print(this.map, data)\r\n        .subscribe();\r\n    } else {\r\n      let nbFileToProcess = 1;\r\n\r\n      if (data.showLegend) {\r\n        nbFileToProcess++;\r\n      }\r\n      if (data.imageFormat.toLowerCase() === 'tiff') {\r\n        nbFileToProcess++;\r\n      }\r\n\r\n      this.printService.defineNbFileToProcess(nbFileToProcess);\r\n\r\n      const resolution = +data.resolution;\r\n      this.printService.downloadMapImage(\r\n        this.map,\r\n        resolution,\r\n        data.imageFormat,\r\n        data.showProjection,\r\n        data.showScale,\r\n        data.showLegend,\r\n        data.title,\r\n        data.comment,\r\n        data.doZipFile\r\n      );\r\n      if (data.showLegend) {\r\n        this.printService.getLayersLegendImage(\r\n          this.map,\r\n          data.imageFormat,\r\n          data.doZipFile,\r\n          +resolution\r\n        );\r\n      }\r\n    }\r\n    this.disabled = false;\r\n  }\r\n}\r\n","import { strEnum } from '@igo2/utils';\r\n\r\nexport const PrintOutputFormat = strEnum(['Pdf', 'Image']);\r\n\r\nexport type PrintOutputFormat = keyof typeof PrintOutputFormat;\r\n\r\nexport const PrintPaperFormat = strEnum([\r\n  'A0',\r\n  'A1',\r\n  'A2',\r\n  'A3',\r\n  'A4',\r\n  'A5',\r\n  'Letter',\r\n  'Legal'\r\n]);\r\nexport type PrintPaperFormat = keyof typeof PrintPaperFormat;\r\n\r\nexport const PrintOrientation = strEnum(['landscape', 'portrait']);\r\nexport type PrintOrientation = keyof typeof PrintOrientation;\r\n\r\nexport const PrintResolution = strEnum(['72', '96', '150', '300']);\r\nexport type PrintResolution = keyof typeof PrintResolution;\r\n\r\nexport const PrintSaveImageFormat = strEnum([\r\n  'Bmp',\r\n  'Gif',\r\n  'Jpeg',\r\n  'Png',\r\n  'Tiff'\r\n]);\r\nexport type PrintSaveImageFormat = keyof typeof PrintSaveImageFormat;\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators\r\n} from '@angular/forms';\r\n\r\nimport { PrintOptions } from '../shared/print.interface';\r\n\r\nimport {\r\n  PrintOutputFormat,\r\n  PrintPaperFormat,\r\n  PrintOrientation,\r\n  PrintResolution,\r\n  PrintSaveImageFormat\r\n} from '../shared/print.type';\r\n\r\n@Component({\r\n  selector: 'igo-print-form',\r\n  templateUrl: './print-form.component.html',\r\n  styleUrls: ['./print-form.component.scss']\r\n})\r\nexport class PrintFormComponent implements OnInit {\r\n  public form: FormGroup;\r\n  public submitted: boolean;\r\n\r\n  public outputFormats = PrintOutputFormat;\r\n  public paperFormats = PrintPaperFormat;\r\n  public orientations = PrintOrientation;\r\n  public resolutions = PrintResolution;\r\n  public imageFormats = PrintSaveImageFormat;\r\n  public isPrintService = true;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get imageFormat(): PrintSaveImageFormat {\r\n    return this.imageFormatField.value;\r\n  }\r\n  set imageFormat(value: PrintSaveImageFormat) {\r\n    this.imageFormatField.setValue(value || PrintSaveImageFormat.Jpeg, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get outputFormat(): PrintOutputFormat {\r\n    return this.outputFormatField.value;\r\n  }\r\n  set outputFormat(value: PrintOutputFormat) {\r\n    this.outputFormatField.setValue(value || PrintOutputFormat.Pdf, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get paperFormat(): PrintPaperFormat {\r\n    return this.paperFormatField.value;\r\n  }\r\n  set paperFormat(value: PrintPaperFormat) {\r\n    this.paperFormatField.setValue(value || PrintPaperFormat.Letter, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get orientation(): PrintOrientation {\r\n    return this.orientationField.value;\r\n  }\r\n  set orientation(value: PrintOrientation) {\r\n    this.orientationField.setValue(value || PrintOrientation.landscape, {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get resolution(): PrintResolution {\r\n    return this.resolutionField.value;\r\n  }\r\n  set resolution(value: PrintResolution) {\r\n    this.resolutionField.setValue(value || PrintResolution['96'], {\r\n      onlySelf: true\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  get title(): string {\r\n    return this.titleField.value;\r\n  }\r\n  set title(value: string) {\r\n    this.titleField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get comment(): string {\r\n    return this.commentField.value;\r\n  }\r\n  set comment(value: string) {\r\n    this.commentField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showProjection(): boolean {\r\n    return this.showProjectionField.value;\r\n  }\r\n  set showProjection(value: boolean) {\r\n    this.showProjectionField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showScale(): boolean {\r\n    return this.showScaleField.value;\r\n  }\r\n  set showScale(value: boolean) {\r\n    this.showScaleField.setValue(value, { onlySelf: true });\r\n  }\r\n  @Input()\r\n  get showLegend(): boolean {\r\n    return this.showLegendField.value;\r\n  }\r\n  set showLegend(value: boolean) {\r\n    this.showLegendField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  @Input()\r\n  get doZipFile(): boolean {\r\n    return this.doZipFileField.value;\r\n  }\r\n  set doZipFile(value: boolean) {\r\n    this.doZipFileField.setValue(value, { onlySelf: true });\r\n  }\r\n\r\n  get outputFormatField() {\r\n    return (this.form.controls as any).outputFormat as FormControl;\r\n  }\r\n\r\n  get paperFormatField() {\r\n    return (this.form.controls as any).paperFormat as FormControl;\r\n  }\r\n\r\n  get imageFormatField() {\r\n    return (this.form.controls as any).imageFormat as FormControl;\r\n  }\r\n\r\n  get orientationField() {\r\n    return (this.form.controls as any).orientation as FormControl;\r\n  }\r\n\r\n  get resolutionField() {\r\n    return (this.form.controls as any).resolution as FormControl;\r\n  }\r\n\r\n  get commentField() {\r\n    return (this.form.controls as any).comment as FormControl;\r\n  }\r\n\r\n  get showProjectionField() {\r\n    return (this.form.controls as any).showProjection as FormControl;\r\n  }\r\n\r\n  get showScaleField() {\r\n    return (this.form.controls as any).showScale as FormControl;\r\n  }\r\n\r\n  get showLegendField() {\r\n    return (this.form.controls as any).showLegend as FormControl;\r\n  }\r\n\r\n  get doZipFileField() {\r\n    return (this.form.controls as any).doZipFile as FormControl;\r\n  }\r\n\r\n  get titleField() {\r\n    return (this.form.controls as any).title as FormControl;\r\n  }\r\n\r\n  @Output() submit: EventEmitter<PrintOptions> = new EventEmitter();\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n    this.form = this.formBuilder.group({\r\n      title: ['', []],\r\n      comment: ['', []],\r\n      outputFormat: ['', [Validators.required]],\r\n      paperFormat: ['', [Validators.required]],\r\n      imageFormat: [ '', [Validators.required]],\r\n      resolution: ['', [Validators.required]],\r\n      orientation: ['', [Validators.required]],\r\n      showProjection: false,\r\n      showScale: false,\r\n      showLegend: false,\r\n      doZipFile: [{hidden: this.isPrintService }]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doZipFileField.setValue(false);\r\n  }\r\n\r\n  handleFormSubmit(data: PrintOptions, isValid: boolean) {\r\n    this.submitted = true;\r\n    data.isPrintService = this.isPrintService;\r\n    if (isValid) {\r\n      this.submit.emit(data);\r\n    }\r\n  }\r\n\r\n  toggleImageSaveProp() {\r\n    if (this.outputFormatField.value === 'Image') {\r\n      this.isPrintService = false;\r\n    } else {\r\n      this.isPrintService = true;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatSlideToggleModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoKeyValueModule } from '@igo2/common';\r\n\r\nimport { PrintComponent } from './print/print.component';\r\nimport { PrintFormComponent } from './print-form/print-form.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatSlideToggleModule,\r\n    IgoLanguageModule,\r\n    IgoKeyValueModule\r\n  ],\r\n  exports: [PrintComponent, PrintFormComponent],\r\n  declarations: [PrintComponent, PrintFormComponent]\r\n})\r\nexport class IgoPrintModule {}\r\n","import { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from '../../search/shared/sources/source';\r\n\r\nimport { QuerySearchSource } from './query-search-source';\r\n\r\n/**\r\n * Map search source factory\r\n * @ignore\r\n */\r\nexport function querySearchSourceFactory(config: ConfigService) {\r\n  return new QuerySearchSource(\r\n    config.getConfig(`searchSources.${QuerySearchSource.id}`) || {}\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the map search source\r\n */\r\nexport function provideQuerySearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: querySearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { QueryDirective } from './shared/query.directive';\r\nimport { QueryService } from './shared/query.service';\r\nimport { provideQuerySearchSource } from './shared/query-search-source.providers';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [QueryDirective],\r\n  declarations: [QueryDirective],\r\n  providers: [QueryService]\r\n})\r\nexport class IgoQueryModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoQueryModule,\r\n      providers: [provideQuerySearchSource()]\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceSettings } from './sources/source.interfaces';\r\n\r\n/**\r\n * Service where all available search sources are registered.\r\n */\r\nexport class SearchSourceService {\r\n  constructor(private sources: SearchSource[]) {}\r\n\r\n  /**\r\n   * Return available search sources\r\n   * @returns Search sources\r\n   */\r\n  getSources(): SearchSource[] {\r\n    return this.sources;\r\n  }\r\n\r\n  /**\r\n   * Return enabled search sources\r\n   * @returns Search sources\r\n   */\r\n  getEnabledSources(): SearchSource[] {\r\n    return this.getSources().filter(\r\n      (source: SearchSource) => source.enabled === true\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Enable search sources of given type\r\n   * @param type Search type\r\n   * @todo It would be better to track the enabled search sources\r\n   *  without updating their 'enabled' property.\r\n   */\r\n  enableSourcesByType(type: string) {\r\n    this.getSources().forEach((source: SearchSource) => {\r\n      if ((source.constructor as typeof SearchSource).type === type) {\r\n        source.enabled = true;\r\n      } else {\r\n        source.enabled = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set Param from the selected settings\r\n   * @param source search-source\r\n   * @param setting settings\r\n   */\r\n  setParamFromSetting(source: SearchSource, setting: SearchSourceSettings) {\r\n    source.setParamFromSetting(setting);\r\n  }\r\n}\r\n","import { FEATURE } from '../../feature/shared/feature.enums';\r\nimport { Feature } from '../../feature/shared/feature.interfaces';\r\nimport { SearchSource } from './sources/source';\r\nimport { SearchResult } from './search.interfaces';\r\n\r\n/**\r\n * Function that checks whether a search source implements TextSearch\r\n * @param source Search source\r\n * @returns True if the search source implements TextSearch\r\n */\r\nexport function sourceCanSearch(source: SearchSource): boolean {\r\n  return (source as any).search !== undefined;\r\n}\r\n\r\n/**\r\n * Function that checks whether a search source implements ReverseSearch\r\n * @param source Search source\r\n * @returns True if the search source implements ReverseSearch\r\n */\r\nexport function sourceCanReverseSearch(source: SearchSource): boolean {\r\n  return (source as any).reverseSearch !== undefined;\r\n}\r\n\r\n/**\r\n * Return a search result out of an Feature. This is used to adapt\r\n * the IGO query module to the new Feature/SearchResult interfaces\r\n * @param feature feature\r\n * @param source Search source\r\n * @returns SearchResult\r\n */\r\nexport function featureToSearchResult(\r\n  feature: Feature,\r\n  source: SearchSource\r\n): SearchResult<Feature> {\r\n  return {\r\n    source,\r\n    data: feature,\r\n    meta: {\r\n      dataType: FEATURE,\r\n      id: feature.meta.id as string,\r\n      title: feature.meta.title,\r\n      icon: 'map-marker'\r\n    }\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { stringToLonLat } from '../../map';\r\nimport { MapService } from '../../map/shared/map.service';\r\n\r\nimport { SearchSource, TextSearch, ReverseSearch } from './sources/source';\r\nimport { TextSearchOptions, ReverseSearchOptions } from './sources/source.interfaces';\r\nimport { SearchSourceService } from './search-source.service';\r\nimport { Research } from './search.interfaces';\r\nimport { sourceCanSearch, sourceCanReverseSearch } from './search.utils';\r\n\r\n/**\r\n * This service perform researches in all the search sources enabled.\r\n * It returns Research objects who's 'request' property needs to be\r\n * subscribed to in order to trigger the research. This services has\r\n * keeps internal state of the researches it performed\r\n * and the results they yielded.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchService {\r\n\r\n  constructor(private searchSourceService: SearchSourceService, private mapService: MapService) {}\r\n\r\n  /**\r\n   * Perform a research by text\r\n   * @param term Any text\r\n   * @returns Researches\r\n   */\r\n  search(term: string, options?: TextSearchOptions): Research[] {\r\n    if (!this.termIsValid(term)) {\r\n      return [];\r\n    }\r\n\r\n    const response = stringToLonLat(term, this.mapService.getMap().projection);\r\n    if (response.lonLat) {\r\n      return this.reverseSearch(response.lonLat);\r\n    } else if (response.message) {\r\n      console.log(response.message);\r\n    }\r\n\r\n    const sources = this.searchSourceService.getEnabledSources()\r\n      .filter(sourceCanSearch);\r\n    return this.searchSources(sources, term, options || {});\r\n  }\r\n\r\n  /**\r\n   * Perform a research by lon/lat\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Researches\r\n   */\r\n  reverseSearch(lonLat: [number, number], options?: ReverseSearchOptions) {\r\n    const sources = this.searchSourceService.getEnabledSources()\r\n      .filter(sourceCanReverseSearch);\r\n    return this.reverseSearchSources(sources, lonLat, options || {});\r\n  }\r\n\r\n  /**\r\n   * Create a text research out of all given search sources\r\n   * @param sources Search sources that implement TextSearch\r\n   * @param term Search term\r\n   * @returns Observable of Researches\r\n   */\r\n  private searchSources(sources: SearchSource[], term: string, options: TextSearchOptions): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: (source as any as TextSearch).search(term, options),\r\n        reverse: false,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a reverse research out of all given search sources\r\n   * @param sources Search sources that implement ReverseSearch\r\n   * @param lonLat Any lon/lat coordinates\r\n   * @returns Observable of Researches\r\n   */\r\n  private reverseSearchSources(\r\n    sources: SearchSource[],\r\n    lonLat: [number, number],\r\n    options: ReverseSearchOptions\r\n  ): Research[] {\r\n    return sources.map((source: SearchSource) => {\r\n      return {\r\n        request: (source as any as ReverseSearch).reverseSearch(lonLat, options),\r\n        reverse: true,\r\n        source\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate that a search term is valid\r\n   * @param term Search term\r\n   * @returns True if the search term is valid\r\n   */\r\n  private termIsValid(term: string): boolean {\r\n    return typeof term === 'string' && term !== '';\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\n\r\nexport abstract class RoutingSource {\r\n  abstract enabled: boolean;\r\n  abstract getName(): string;\r\n  abstract route(coordinates: [number, number][]): Observable<Routing[]>;\r\n}\r\n","import { RoutingSource } from '../routing-sources/routing-source';\r\n\r\nexport class RoutingSourceService {\r\n  constructor(public sources: RoutingSource[]) {}\r\n}\r\n\r\nexport function routingSourceServiceFactory(sources: RoutingSource[]) {\r\n  return new RoutingSourceService(sources);\r\n}\r\n\r\nexport function provideRoutingSourceService() {\r\n  return {\r\n    provide: RoutingSourceService,\r\n    useFactory: routingSourceServiceFactory,\r\n    deps: [RoutingSource]\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingSource } from '../routing-sources/routing-source';\r\nimport { RoutingSourceService } from './routing-source.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoutingService {\r\n  constructor(private routingSourceService: RoutingSourceService) {}\r\n\r\n  route(coordinates: [number, number][]): Observable<Routing[]>[] {\r\n    if (coordinates.length === 0) {\r\n      return;\r\n    }\r\n    return this.routingSourceService.sources\r\n      .filter((source: RoutingSource) => source.enabled)\r\n      .map((source: RoutingSource) => this.routeSource(source, coordinates));\r\n  }\r\n\r\n  routeSource(\r\n    source: RoutingSource,\r\n    coordinates: [number, number][]\r\n  ): Observable<Routing[]> {\r\n    const request = source.route(coordinates);\r\n    return request;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class RoutingFormService {\r\n  private stopsCoordinates: [number, number][];\r\n  private mapWaitingForRoutingClick: boolean;\r\n\r\n  constructor() {\r\n    this.mapWaitingForRoutingClick = false;\r\n  }\r\n\r\n  getStopsCoordinates(): [number, number][] {\r\n    return this.stopsCoordinates;\r\n  }\r\n\r\n  setStopsCoordinates(stopsCoordinates) {\r\n    this.stopsCoordinates = stopsCoordinates;\r\n  }\r\n\r\n  isMapWaitingForRoutingClick(): boolean {\r\n    return this.mapWaitingForRoutingClick;\r\n  }\r\n\r\n  setMapWaitingForRoutingClick() {\r\n    this.mapWaitingForRoutingClick = true;\r\n  }\r\n\r\n  unsetMapWaitingForRoutingClick() {\r\n    this.mapWaitingForRoutingClick = false;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  Optional\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\nimport olFeature from 'ol/Feature';\r\nimport * as olgeom from 'ol/geom';\r\nimport * as olproj from 'ol/proj';\r\nimport * as olstyle from 'ol/style';\r\nimport * as olcondition from 'ol/events/condition';\r\nimport * as olinteraction from 'ol/interaction';\r\nimport * as olextent from 'ol/extent';\r\nimport * as olobservable from 'ol/Observable';\r\n\r\nimport { Clipboard } from '@igo2/utils';\r\nimport {\r\n  Message,\r\n  LanguageService,\r\n  MessageService,\r\n  RouteService\r\n} from '@igo2/core';\r\nimport { getEntityTitle } from '@igo2/common';\r\n\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { SearchService } from '../../search/shared/search.service';\r\nimport { VectorLayer } from '../../layer/shared/layers/vector-layer';\r\nimport { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';\r\nimport { createOverlayMarkerStyle } from '../../overlay/shared/overlay.utils';\r\nimport { FeatureMotion } from '../../feature/shared/feature.enums';\r\nimport { moveToOlFeatures } from '../../feature/shared/feature.utils';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingService } from '../shared/routing.service';\r\nimport { RoutingFormService } from './routing-form.service';\r\n\r\nimport { QueryService } from '../../query/shared/query.service';\r\n\r\n@Component({\r\n  selector: 'igo-routing-form',\r\n  templateUrl: './routing-form.component.html',\r\n  styleUrls: ['./routing-form.component.scss']\r\n})\r\nexport class RoutingFormComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  private readonly invalidKeys = ['Control', 'Shift', 'Alt'];\r\n\r\n  public stopsForm: FormGroup;\r\n  public projection = 'EPSG:4326';\r\n  public currentStopIndex: number;\r\n  private routesQueries$$: Subscription[] = [];\r\n\r\n  private stream$ = new Subject<string>();\r\n\r\n  public RoutingOverlayMarkerStyle: olstyle.Style;\r\n  public RoutingOverlayStyle: olstyle.Style;\r\n  public routingStopsOverlayDataSource: FeatureDataSource;\r\n  public routingRoutesOverlayDataSource: FeatureDataSource;\r\n\r\n  public routesResults: Routing[] | Message[];\r\n  public activeRoute: Routing;\r\n  private selectRoute;\r\n\r\n  private focusOnStop = false;\r\n  private focusKey = [];\r\n  public initialStopsCoords;\r\n  private browserLanguage;\r\n\r\n  // https://stackoverflow.com/questions/46364852/create-input-fields-dynamically-in-angular-2\r\n\r\n  @Input()\r\n  get term() {\r\n    return this._term;\r\n  }\r\n  set term(value: string) {\r\n    this._term = value;\r\n  }\r\n  private _term = '';\r\n\r\n  get debounce() {\r\n    return this._debounce;\r\n  }\r\n  set debounce(value: number) {\r\n    this._debounce = value;\r\n  }\r\n  private _debounce = 300;\r\n\r\n  @Input()\r\n  get length() {\r\n    return this._length;\r\n  }\r\n  set length(value: number) {\r\n    this._length = value;\r\n  }\r\n  private _length = 3;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Output() submit: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private routingService: RoutingService,\r\n    private languageService: LanguageService,\r\n    private messageService: MessageService,\r\n    private searchService: SearchService,\r\n    private queryService: QueryService,\r\n    private routingFormService: RoutingFormService,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  changeRoute(selectedRoute: Routing) {\r\n    this.showRouteGeometry();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribeRoutesQueries();\r\n    this.unlistenSingleClick();\r\n    this.queryService.queryEnabled = true;\r\n    const stopCoordinates = [];\r\n\r\n    this.stops.value.forEach(stop => {\r\n      stopCoordinates.push(stop.stopCoordinates);\r\n    });\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.routingFormService.setStopsCoordinates(stopCoordinates);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.browserLanguage = this.languageService.getLanguage();\r\n    this.stopsForm = this.formBuilder.group({\r\n      routingType: 'car',\r\n      routingMode: 'driving', // loop\r\n      stopOrderPriority: true,\r\n      routingFixedStartEnd: false,\r\n      stops: this.formBuilder.array([\r\n        this.createStop('start'),\r\n        this.createStop('end')\r\n      ])\r\n    });\r\n\r\n    this.routingStopsOverlayDataSource = new FeatureDataSource({});\r\n    this.routingRoutesOverlayDataSource = new FeatureDataSource({});\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.queryService.queryEnabled = false;\r\n    this.focusOnStop = false;\r\n    const stopsLayer = new VectorLayer({\r\n      title: 'routingStopOverlay',\r\n      zIndex: 999,\r\n      id: 'routingStops',\r\n      source: this.routingStopsOverlayDataSource,\r\n      showInLayerList: false\r\n    });\r\n    const routesLayer = new VectorLayer({\r\n      title: 'routingRoutesOverlay',\r\n      zIndex: 999,\r\n      id: 'routingRoutes',\r\n      opacity: 0.75,\r\n      source: this.routingRoutesOverlayDataSource,\r\n      showInLayerList: false\r\n    });\r\n\r\n    this.map.addLayer(routesLayer);\r\n    this.map.addLayer(stopsLayer);\r\n\r\n    let selectedStopFeature;\r\n\r\n    const selectStops = new olinteraction.Select({\r\n      layers: [stopsLayer.ol],\r\n      condition: olcondition.pointerMove,\r\n      hitTolerance: 7\r\n    });\r\n\r\n    const translateStop = new olinteraction.Translate({\r\n      layers: [stopsLayer.ol],\r\n      features: selectedStopFeature\r\n    });\r\n\r\n    // TODO: Check to disable pointermove IF a stop is already selected\r\n    const selectRouteHover = new olinteraction.Select({\r\n      layers: [routesLayer.ol],\r\n      condition: olcondition.pointerMove,\r\n      hitTolerance: 7\r\n    });\r\n\r\n    this.selectRoute = new olinteraction.Select({\r\n      layers: [routesLayer.ol],\r\n      hitTolerance: 7\r\n    });\r\n\r\n    this.map.ol.on('pointermove', evt => {\r\n      const selectRouteCnt = selectRouteHover.getFeatures().getLength();\r\n      if (selectRouteCnt === 0) {\r\n        this.routingFormService.unsetMapWaitingForRoutingClick();\r\n      } else {\r\n        this.routingFormService.setMapWaitingForRoutingClick();\r\n      }\r\n    });\r\n\r\n    selectStops.on('select', evt => {\r\n      selectedStopFeature = evt.target.getFeatures()[0];\r\n    });\r\n\r\n    this.selectRoute.on('select', evt => {\r\n      if (this.focusOnStop === false) {\r\n        const selectCoordinates = olproj.transform(\r\n          (evt as any).mapBrowserEvent.coordinate,\r\n          this.map.projection,\r\n          this.projection\r\n        );\r\n        this.addStop();\r\n        const pos = this.stops.length - 2;\r\n        this.stops.at(pos).patchValue({ stopCoordinates: selectCoordinates });\r\n        this.handleLocationProposals(selectCoordinates, pos);\r\n        this.addStopOverlay(selectCoordinates, pos);\r\n        this.selectRoute.getFeatures().clear();\r\n      }\r\n      this.selectRoute.getFeatures().clear();\r\n    });\r\n\r\n    this.routesQueries$$.push(\r\n      this.stopsForm.statusChanges\r\n        .pipe(debounceTime(this._debounce))\r\n        .subscribe(val => this.onFormChange())\r\n    );\r\n\r\n    translateStop.on('translateend', evt => {\r\n      const translatedID = evt.features.getArray()[0].getId();\r\n      const translatedPos = translatedID.split('_');\r\n      let p;\r\n      switch (translatedPos[1]) {\r\n        case 'start':\r\n          p = 0;\r\n          break;\r\n        case 'end':\r\n          p = this.stops.length - 1;\r\n          break;\r\n        default:\r\n          p = Number(translatedPos[1]);\r\n          break;\r\n      }\r\n      const translationEndCoordinates = olproj.transform(\r\n        evt.features\r\n          .getArray()[0]\r\n          .getGeometry()\r\n          .getCoordinates(),\r\n        this.map.projection,\r\n        this.projection\r\n      );\r\n      this.stops\r\n        .at(p)\r\n        .patchValue({ stopCoordinates: translationEndCoordinates });\r\n      this.stops.at(p).patchValue({ stopProposals: [] });\r\n      this.handleLocationProposals(translationEndCoordinates, p);\r\n    });\r\n\r\n    this.map.ol.addInteraction(selectStops);\r\n    this.map.ol.addInteraction(selectRouteHover);\r\n    this.map.ol.addInteraction(this.selectRoute);\r\n    this.map.ol.addInteraction(translateStop);\r\n\r\n    this.routesQueries$$.push(\r\n      this.stream$\r\n        .pipe(\r\n          debounceTime(this._debounce),\r\n          distinctUntilChanged()\r\n        )\r\n        .subscribe((term: string) => this.handleTermChanged(term))\r\n    );\r\n  }\r\n\r\n  handleLocationProposals(coordinates: [number, number], stopIndex: number) {\r\n    const groupedLocations = [];\r\n    this.searchService\r\n      .reverseSearch(coordinates, { zoom: this.map.getZoom() })\r\n      .map(res =>\r\n        this.routesQueries$$.push(\r\n          res.request.pipe(map(f => f)).subscribe(results => {\r\n            results.forEach(result => {\r\n              if (\r\n                groupedLocations.filter(f => f.source === result.source)\r\n                  .length === 0\r\n              ) {\r\n                groupedLocations.push({\r\n                  source: result.source,\r\n                  results: results.map(r => r.data)\r\n                });\r\n              }\r\n            });\r\n            this.stops\r\n              .at(stopIndex)\r\n              .patchValue({ stopProposals: groupedLocations });\r\n            // TODO: Prefer another source?\r\n            if (results[0]) {\r\n              if (results[0].source.getId() === 'icherchereverse') {\r\n                // prefer address type.\r\n                let resultPos = 0;\r\n                for (let i = 0; i < results.length; i++) {\r\n                  const feature: any = results[i].data;\r\n                  if (feature.properties.type === 'adresse') {\r\n                    resultPos = i;\r\n                    break;\r\n                  }\r\n                }\r\n                this.stops.at(stopIndex).patchValue({\r\n                  stopPoint: getEntityTitle(results[resultPos])\r\n                });\r\n                if (results[resultPos].data.geometry.type === 'Point') {\r\n                  this.stops.at(stopIndex).patchValue({\r\n                    stopCoordinates:\r\n                      results[resultPos].data.geometry.coordinates\r\n                  });\r\n                } else {\r\n                  // Not moving the translated point Only to suggest value into the UI.\r\n                }\r\n              }\r\n            } else {\r\n              this.stops.at(stopIndex).patchValue({ stopPoint: coordinates });\r\n              this.stops.at(stopIndex).patchValue({ stopProposals: [] });\r\n            }\r\n          })\r\n        )\r\n      );\r\n  }\r\n\r\n  routingText(index: number): string {\r\n    if (index === 0) {\r\n      return 'start';\r\n    } else if (index === this.stops.length - 1 || this.stops.length === 1) {\r\n      return 'end';\r\n    } else {\r\n      return 'intermediate';\r\n    }\r\n  }\r\n\r\n  raiseStop(index: number) {\r\n    if (index > 0) {\r\n      this.moveStop(index, -1);\r\n    }\r\n  }\r\n\r\n  lowerStop(index: number) {\r\n    if (index < this.stops.length - 1) {\r\n      this.moveStop(index, 1);\r\n    }\r\n  }\r\n\r\n  moveStop(index, diff) {\r\n    const fromValue = this.stops.at(index);\r\n    this.removeStop(index);\r\n    this.stops.insert(index + diff, fromValue);\r\n    this.stops.at(index).patchValue({ routingText: this.routingText(index) });\r\n    this.stops\r\n      .at(index + diff)\r\n      .patchValue({ routingText: this.routingText(index + diff) });\r\n    if (this.stops.at(index).value.stopCoordinates) {\r\n      this.addStopOverlay(this.stops.at(index).value.stopCoordinates, index);\r\n    }\r\n    if (this.stops.at(index + diff).value.stopCoordinates) {\r\n      this.addStopOverlay(\r\n        this.stops.at(index + diff).value.stopCoordinates,\r\n        index + diff\r\n      );\r\n    }\r\n  }\r\n\r\n  get stops(): FormArray {\r\n    return this.stopsForm.get('stops') as FormArray;\r\n  }\r\n\r\n  getStopsCoordinates(): [number, number][] {\r\n    const stopCoordinates = [];\r\n    this.stops.value.forEach(stop => {\r\n      if (stop.stopCoordinates instanceof Array) {\r\n        stopCoordinates.push(stop.stopCoordinates);\r\n      }\r\n    });\r\n    this.routingFormService.setStopsCoordinates(stopCoordinates);\r\n    return stopCoordinates;\r\n  }\r\n\r\n  addStop(): void {\r\n    const insertIndex = this.stops.length - 1;\r\n    this.stops.insert(insertIndex, this.createStop());\r\n  }\r\n\r\n  createStop(routingPos = 'intermediate'): FormGroup {\r\n    return this.formBuilder.group({\r\n      stopPoint: [''],\r\n      stopProposals: [[]],\r\n      routingText: routingPos,\r\n      stopCoordinates: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  removeStop(index: number): void {\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.stops.removeAt(index);\r\n    let cnt = 0;\r\n    this.stops.value.forEach(stop => {\r\n      this.stops.at(cnt).patchValue({ routingText: this.routingText(cnt) });\r\n      this.addStopOverlay(this.stops.at(cnt).value.stopCoordinates, cnt);\r\n      cnt++;\r\n    });\r\n  }\r\n\r\n  resetForm() {\r\n    this.routesResults = undefined;\r\n    const nbStops = this.stops.length;\r\n    for (let i = 0; i < nbStops; i++) {\r\n      this.stops.removeAt(0);\r\n    }\r\n    this.stops.insert(0, this.createStop('start'));\r\n    this.stops.insert(1, this.createStop('end'));\r\n    this.routingStopsOverlayDataSource.ol.getFeatures().forEach(element => {\r\n      this.deleteRoutingOverlaybyID(element.getId());\r\n    });\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    this.routingStopsOverlayDataSource.ol.clear();\r\n    this.selectRoute.getFeatures().clear();\r\n  }\r\n\r\n  onFormChange() {\r\n    if (this.stopsForm.valid) {\r\n      this.routingRoutesOverlayDataSource.ol.clear();\r\n      const coords = this.getStopsCoordinates();\r\n      if (coords.length >= 2) {\r\n        this.getRoutes(coords);\r\n      } else {\r\n        this.routingRoutesOverlayDataSource.ol.clear();\r\n      }\r\n    }\r\n  }\r\n\r\n  formatStep(step, cnt) {\r\n    return this.formatInstruction(\r\n      step.maneuver.type,\r\n      step.maneuver.modifier,\r\n      step.name,\r\n      step.maneuver.bearing_after,\r\n      cnt,\r\n      step.maneuver.exit,\r\n      cnt === this.activeRoute.steps.length - 1\r\n    );\r\n  }\r\n\r\n  formatInstruction(\r\n    type,\r\n    modifier,\r\n    route,\r\n    direction,\r\n    stepPosition,\r\n    exit,\r\n    lastStep = false\r\n  ) {\r\n    let directiveFr;\r\n    let directiveEn;\r\n    let image = 'arrow_forward';\r\n    let cssClass = 'rotate-270';\r\n    const translatedDirection = this.translateBearing(direction);\r\n    const translatedModifier = this.translateModifier(modifier);\r\n    const enPrefix = modifier === 'straight' ? '' : 'on the ';\r\n    const frPrefix = modifier === 'straight' ? '' : 'Ã  ';\r\n\r\n    let frAggregatedDirection = frPrefix + translatedModifier;\r\n    let enAggregatedDirection = enPrefix + translatedModifier;\r\n\r\n    if (modifier && modifier.search('slight') >= 0) {\r\n      enAggregatedDirection = translatedModifier;\r\n    }\r\n\r\n    if (modifier === 'uturn') {\r\n      image = 'fast_forward';\r\n      cssClass = 'rotate-90';\r\n    } else if (modifier === 'sharp right') {\r\n      image = 'subdirectory_arrow_right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'right') {\r\n      image = 'subdirectory_arrow_right';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'slight right') {\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-290';\r\n    } else if (modifier === 'straight') {\r\n      image = 'arrow_forward';\r\n    } else if (modifier === 'slight left') {\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-250';\r\n    } else if (modifier === 'left') {\r\n      image = 'subdirectory_arrow_left';\r\n      cssClass = 'icon-flipped';\r\n    } else if (modifier === 'sharp left') {\r\n      image = 'subdirectory_arrow_left';\r\n      cssClass = 'icon-flipped';\r\n    }\r\n\r\n    if (type === 'turn') {\r\n      if (modifier === 'straight') {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      } else if (modifier === 'uturn') {\r\n        directiveFr = 'Faire demi-tour sur ' + route;\r\n        directiveEn = 'Make u-turn on ' + route;\r\n      } else {\r\n        directiveFr = 'Tourner ' + frAggregatedDirection + ' sur ' + route;\r\n        directiveEn = 'Turn ' + translatedModifier + ' onto ' + route;\r\n      }\r\n    } else if (type === 'new name') {\r\n      directiveFr =\r\n        'Continuer en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'explore';\r\n      cssClass = '';\r\n    } else if (type === 'depart') {\r\n      directiveFr =\r\n        'Aller en direction ' + translatedDirection + ' sur ' + route;\r\n      directiveEn = 'Head ' + translatedDirection + ' on ' + route;\r\n      image = 'explore';\r\n      cssClass = '';\r\n    } else if (type === 'arrive') {\r\n      if (lastStep) {\r\n        let coma = ', ';\r\n        if (!translatedModifier) {\r\n          frAggregatedDirection = '';\r\n          enAggregatedDirection = '';\r\n          coma = '';\r\n        }\r\n        directiveFr = 'Vous Ãªtes arrivÃ©' + coma + frAggregatedDirection;\r\n        directiveEn =\r\n          'You have reached your destination' + coma + enAggregatedDirection;\r\n      } else {\r\n        directiveFr = 'Vous atteignez le point intermÃ©diare sur ' + route;\r\n        directiveEn = 'You have reached the intermediate stop onto ' + route;\r\n        image = 'location_on';\r\n        cssClass = '';\r\n      }\r\n    } else if (type === 'merge') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'on ramp') {\r\n      directiveFr = \"Prendre l'entrÃ©e d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take the ramp ' + enAggregatedDirection;\r\n    } else if (type === 'off ramp') {\r\n      directiveFr = \"Prendre la sortie d'autoroute \" + frAggregatedDirection;\r\n      directiveEn = 'Take exit ' + enAggregatedDirection;\r\n    } else if (type === 'fork') {\r\n      if (modifier.search('left') >= 0) {\r\n        directiveFr = 'Garder la gauche sur ' + route;\r\n        directiveEn = 'Merge left onto ' + route;\r\n      } else if (modifier.search('right') >= 0) {\r\n        directiveFr = 'Garder la droite sur ' + route;\r\n        directiveEn = 'Merge right onto ' + route;\r\n      } else {\r\n        directiveFr = 'Continuer sur ' + route;\r\n        directiveEn = 'Continue on ' + route;\r\n      }\r\n    } else if (type === 'end of road') {\r\n      directiveFr =\r\n        'Ã la fin de la route, tourner ' + translatedModifier + ' sur ' + route;\r\n      directiveEn =\r\n        'At the end of the road, turn ' + translatedModifier + ' onto ' + route;\r\n    } else if (type === 'use lane') {\r\n      directiveFr = 'Prendre la voie de ... ';\r\n      directiveEn = 'Take the lane ...';\r\n    } else if (type === 'continue' && modifier !== 'uturn') {\r\n      directiveFr = 'Continuer sur ' + route;\r\n      directiveEn = 'Continue on ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'roundabout') {\r\n      directiveFr = 'Au rond-point, prendre la ' + exit;\r\n      directiveFr += exit === 1 ? 're' : 'e';\r\n      directiveFr += ' sortie vers ' + route;\r\n      directiveEn = 'At the roundabout, take the ' + exit;\r\n      directiveEn += exit === 1 ? 'st' : 'rd';\r\n      directiveEn += ' exit towards ' + route;\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'rotary') {\r\n      directiveFr = 'Rond-point rotary....';\r\n      directiveEn = 'Roundabout rotary....';\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'roundabout turn') {\r\n      directiveFr = 'Rond-point, prendre la ...';\r\n      directiveEn = 'Roundabout, take the ...';\r\n      image = 'donut_large';\r\n      cssClass = '';\r\n    } else if (type === 'exit roundabout') {\r\n      directiveFr = 'Poursuivre vers ' + route;\r\n      directiveEn = 'Continue to ' + route;\r\n      image = 'arrow_forward';\r\n      cssClass = 'rotate-270';\r\n    } else if (type === 'notification') {\r\n      directiveFr = 'notification ....';\r\n      directiveEn = 'notification ....';\r\n    } else if (modifier === 'uturn') {\r\n      directiveFr =\r\n        'Faire demi-tour et continuer en direction ' +\r\n        translatedDirection +\r\n        ' sur ' +\r\n        route;\r\n      directiveEn =\r\n        'Make u-turn and head ' + translatedDirection + ' on ' + route;\r\n    } else {\r\n      directiveFr = '???';\r\n      directiveEn = '???';\r\n    }\r\n\r\n    if (lastStep) {\r\n      image = 'flag';\r\n      cssClass = '';\r\n    }\r\n    if (stepPosition === 0) {\r\n      image = 'explore';\r\n      cssClass = '';\r\n    }\r\n\r\n    let directive;\r\n    if (this.browserLanguage === 'fr') {\r\n      directive = directiveFr;\r\n    } else if (this.browserLanguage === 'en') {\r\n      directive = directiveEn;\r\n    }\r\n\r\n    return { instruction: directive, image, cssClass };\r\n  }\r\n\r\n  translateModifier(modifier) {\r\n    if (modifier === 'uturn') {\r\n      return this.languageService.translate.instant('igo.geo.routing.uturn');\r\n    } else if (modifier === 'sharp right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.sharp right'\r\n      );\r\n    } else if (modifier === 'right') {\r\n      return this.languageService.translate.instant('igo.geo.routing.right');\r\n    } else if (modifier === 'slight right') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.slight right'\r\n      );\r\n    } else if (modifier === 'sharp left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.sharp left'\r\n      );\r\n    } else if (modifier === 'left') {\r\n      return this.languageService.translate.instant('igo.geo.routing.left');\r\n    } else if (modifier === 'slight left') {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.routing.slight left'\r\n      );\r\n    } else if (modifier === 'straight') {\r\n      return this.languageService.translate.instant('igo.geo.routing.straight');\r\n    } else {\r\n      return modifier;\r\n    }\r\n  }\r\n\r\n  translateBearing(bearing) {\r\n    if (bearing >= 337 || bearing < 23) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.n');\r\n    } else if (bearing < 67) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.ne'\r\n      );\r\n    } else if (bearing < 113) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.e');\r\n    } else if (bearing < 157) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.se'\r\n      );\r\n    } else if (bearing < 203) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.s');\r\n    } else if (bearing < 247) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.sw'\r\n      );\r\n    } else if (bearing < 293) {\r\n      return this.languageService.translate.instant('igo.geo.cardinalPoints.w');\r\n    } else if (bearing < 337) {\r\n      return this.languageService.translate.instant(\r\n        'igo.geo.cardinalPoints.nw'\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  formatDistance(distance) {\r\n    if (distance === 0) {\r\n      return;\r\n    }\r\n    if (distance >= 100000) {\r\n      return Math.round(distance / 1000) + ' km';\r\n    }\r\n    if (distance >= 10000) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    if (distance >= 100) {\r\n      return Math.round(distance / 100) / 10 + ' km';\r\n    }\r\n    return distance + ' m';\r\n  }\r\n\r\n  formatDuration(duration: number, summary = false) {\r\n    if (duration >= 3600) {\r\n      const hour = Math.floor(duration / 3600);\r\n      const minute = Math.round((duration / 3600 - hour) * 60);\r\n      if (minute === 60) {\r\n        return hour + 1 + ' h';\r\n      }\r\n      return hour + ' h ' + minute + ' min';\r\n    }\r\n\r\n    if (duration >= 60) {\r\n      return Math.round(duration / 60) + ' min';\r\n    }\r\n    return duration + ' s';\r\n  }\r\n\r\n  showSegment(step, zoomToExtent = false) {\r\n    this.showRouteSegmentGeometry(step.geometry.coordinates, zoomToExtent);\r\n  }\r\n\r\n  showRouteSegmentGeometry(coordinates, zoomToExtent = false) {\r\n    this.deleteRoutingOverlaybyID('endSegment');\r\n    const geometry4326 = new olgeom.LineString(coordinates);\r\n    const geometry3857 = geometry4326.transform('EPSG:4326', 'EPSG:3857');\r\n    const routeSegmentCoordinates = (geometry3857 as any).getCoordinates();\r\n    const lastPoint = routeSegmentCoordinates[0];\r\n\r\n    const geometry = new olgeom.Point(lastPoint);\r\n    const feature = new olFeature({ geometry });\r\n    feature.setId('endSegment');\r\n\r\n    if (geometry === null) {\r\n      return;\r\n    }\r\n    if (geometry.getType() === 'Point') {\r\n      feature.setStyle([\r\n        new olstyle.Style({\r\n          geometry,\r\n          image: new olstyle.Circle({\r\n            radius: 7,\r\n            stroke: new olstyle.Stroke({ color: '#FF0000', width: 3 })\r\n          })\r\n        })\r\n      ]);\r\n    }\r\n    if (zoomToExtent) {\r\n      this.map.viewController.zoomToExtent(feature.getGeometry().getExtent());\r\n    }\r\n    this.routingRoutesOverlayDataSource.ol.addFeature(feature);\r\n  }\r\n\r\n  zoomRoute() {\r\n    this.map.viewController.zoomToExtent(this.routingRoutesOverlayDataSource.ol.getExtent());\r\n  }\r\n\r\n  showRouteGeometry(moveToExtent = false) {\r\n    const geom = this.activeRoute.geometry.coordinates;\r\n    const geometry4326 = new olgeom.LineString(geom);\r\n    const geometry3857 = geometry4326.transform('EPSG:4326', 'EPSG:3857');\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n    const routingFeature = new olFeature({ geometry: geometry3857 });\r\n    routingFeature.setStyle([\r\n      new olstyle.Style({\r\n        stroke: new olstyle.Stroke({ color: '#6a7982', width: 10 })\r\n      }),\r\n      new olstyle.Style({\r\n        stroke: new olstyle.Stroke({ color: '#4fa9dd', width: 6 })\r\n      })\r\n    ]);\r\n    this.routingRoutesOverlayDataSource.ol.addFeature(routingFeature);\r\n    if (moveToExtent) {\r\n      this.map.viewController.zoomToExtent(this.routingRoutesOverlayDataSource.ol.getExtent());\r\n    }\r\n  }\r\n\r\n  getRoutes(stopsArrayCoordinates, moveToExtent = false) {\r\n    const routeResponse = this.routingService.route(stopsArrayCoordinates);\r\n    if (routeResponse) {\r\n      routeResponse.map(res =>\r\n        this.routesQueries$$.push(\r\n          res.subscribe(route => {\r\n            this.routesResults = route;\r\n            this.activeRoute = this.routesResults[0] as Routing;\r\n            this.showRouteGeometry(moveToExtent);\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  private unlistenSingleClick() {\r\n    if (this.focusKey.length !== 0) {\r\n      this.focusKey.forEach(key => {\r\n        olobservable.unByKey(key);\r\n      });\r\n    }\r\n  }\r\n\r\n  private unsubscribeRoutesQueries() {\r\n    this.routesQueries$$.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.routesQueries$$ = [];\r\n  }\r\n\r\n  copyLinkToClipboard() {\r\n    const successful = Clipboard.copy(this.getUrl());\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.routingForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.routingForm.dialog.copyMsgLink');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  copyDirectionsToClipboard() {\r\n    const indent = '\\t';\r\n    let activeRouteDirective =\r\n      this.languageService.translate.instant(\r\n        'igo.geo.routingForm.instructions'\r\n      ) + ':\\n';\r\n    let wayPointList = '';\r\n    const summary =\r\n      this.languageService.translate.instant('igo.geo.routingForm.summary') +\r\n      ': \\n' +\r\n      indent +\r\n      this.activeRoute.title +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDistance(this.activeRoute.distance) +\r\n      '\\n' +\r\n      indent +\r\n      this.formatDuration(this.activeRoute.duration) +\r\n      '\\n\\n' +\r\n      this.languageService.translate.instant('igo.geo.routingForm.stopsList') +\r\n      ':\\n';\r\n\r\n    const url =\r\n      this.languageService.translate.instant('igo.geo.routingForm.link') +\r\n      ':\\n' +\r\n      indent +\r\n      this.getUrl();\r\n\r\n    let wayPointsCnt = 1;\r\n    this.stops.value.forEach(stop => {\r\n      let coord = '';\r\n      let stopPoint = '';\r\n      if (stop.stopPoint !== stop.stopCoordinates) {\r\n        stopPoint = stop.stopPoint;\r\n        coord =\r\n          ' (' +\r\n          [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(',') +\r\n          ')';\r\n      } else {\r\n        stopPoint = [stop.stopCoordinates[1], stop.stopCoordinates[0]].join(\r\n          ','\r\n        );\r\n      }\r\n\r\n      wayPointList =\r\n        wayPointList +\r\n        indent +\r\n        wayPointsCnt.toLocaleString() +\r\n        '. ' +\r\n        stopPoint +\r\n        coord +\r\n        '\\n';\r\n      wayPointsCnt++;\r\n    });\r\n\r\n    // Directions\r\n    let localCnt = 0;\r\n    this.activeRoute.steps.forEach(step => {\r\n      const instruction = this.formatStep(step, localCnt).instruction;\r\n      const distance =\r\n        this.formatDistance(step.distance) === undefined\r\n          ? ''\r\n          : ' (' + this.formatDistance(step.distance) + ')';\r\n      activeRouteDirective =\r\n        activeRouteDirective +\r\n        indent +\r\n        (localCnt + 1).toLocaleString() +\r\n        '. ' +\r\n        instruction +\r\n        distance +\r\n        '\\n';\r\n      localCnt++;\r\n    });\r\n\r\n    const directionsBody =\r\n      summary + wayPointList + '\\n' + url + '\\n\\n' + activeRouteDirective;\r\n\r\n    const successful = Clipboard.copy(directionsBody);\r\n    if (successful) {\r\n      const translate = this.languageService.translate;\r\n      const title = translate.instant('igo.geo.routingForm.dialog.copyTitle');\r\n      const msg = translate.instant('igo.geo.routingForm.dialog.copyMsg');\r\n      this.messageService.success(msg, title);\r\n    }\r\n  }\r\n\r\n  private handleTermChanged(term: string) {\r\n    if (term !== undefined || term.length !== 0) {\r\n      const searchProposals = [];\r\n      const researches = this.searchService.search(term);\r\n      researches.map(res =>\r\n        this.routesQueries$$.push(\r\n          res.request.subscribe(results => {\r\n            results\r\n              .filter(r => r.data.geometry)\r\n              .forEach(element => {\r\n                if (\r\n                  searchProposals.filter(r => r.source === element.source)\r\n                    .length === 0\r\n                ) {\r\n                  searchProposals.push({\r\n                    source: element.source,\r\n                    results: results.map(r => r.data)\r\n                  });\r\n                }\r\n              });\r\n            this.stops\r\n              .at(this.currentStopIndex)\r\n              .patchValue({ stopProposals: searchProposals });\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  setTerm(term: string) {\r\n    this.term = term;\r\n    if (\r\n      this.keyIsValid(term) &&\r\n      (term.length >= this.length || term.length === 0)\r\n    ) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  private keyIsValid(key: string) {\r\n    return this.invalidKeys.find(value => value === key) === undefined;\r\n  }\r\n\r\n  keyup(i, event: KeyboardEvent) {\r\n    const term = (event.target as HTMLInputElement).value;\r\n    this.setTerm(term);\r\n    this.map.ol.un('singleclick', evt => {\r\n      this.handleMapClick(evt, i);\r\n    });\r\n  }\r\n\r\n  clearStop(stopIndex) {\r\n    this.deleteRoutingOverlaybyID(this.getStopOverlayID(stopIndex));\r\n    this.stops.removeAt(stopIndex);\r\n    this.stops.insert(stopIndex, this.createStop(this.routingText(stopIndex)));\r\n    this.routingRoutesOverlayDataSource.ol.clear();\r\n  }\r\n\r\n  chooseProposal(proposal, i) {\r\n    if (proposal !== undefined) {\r\n      let geomCoord;\r\n      const geom = (proposal as any).geometry;\r\n      if (geom.type === 'Point') {\r\n        geomCoord = geom.coordinates;\r\n      } else if (geom.type.search('Line') >= 0) {\r\n        let coordArray = [];\r\n        if (geom.coordinates instanceof Array) {\r\n          // Middle segment of multilinestring\r\n          coordArray =\r\n            geom.coordinates[Math.floor(geom.coordinates.length / 2)];\r\n        } else {\r\n          coordArray = geom.coordinates;\r\n        }\r\n        // middle point of coords\r\n        geomCoord = coordArray[Math.floor(coordArray.length / 2)];\r\n      } else if (geom.type.search('Polygon') >= 0) {\r\n        const polygonExtent = proposal.extent;\r\n        const long =\r\n          polygonExtent[0] + (polygonExtent[2] - polygonExtent[0]) / 2;\r\n        const lat =\r\n          polygonExtent[1] + (polygonExtent[3] - polygonExtent[1]) / 2;\r\n        geomCoord = [long, lat];\r\n      }\r\n\r\n      if (geomCoord !== undefined) {\r\n        this.stops.at(i).patchValue({ stopCoordinates: geomCoord });\r\n        this.addStopOverlay(geomCoord, i);\r\n        const proposalExtent = this.routingStopsOverlayDataSource.ol\r\n          .getFeatureById(this.getStopOverlayID(i))\r\n          .getGeometry()\r\n          .getExtent();\r\n\r\n        if (!olextent.intersects(proposalExtent, this.map.getExtent())) {\r\n          this.map.viewController.moveToExtent(proposalExtent);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  focus(i) {\r\n    this.unlistenSingleClick();\r\n    this.currentStopIndex = i;\r\n    this.focusOnStop = true;\r\n    this.routingFormService.setMapWaitingForRoutingClick();\r\n    this.focusKey.push(\r\n      this.map.ol.once('singleclick', evt => {\r\n        this.handleMapClick(evt, i);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleMapClick(event: olcondition, indexPos?) {\r\n    this.stops.at(indexPos).patchValue({ stopProposals: [] });\r\n    if (this.currentStopIndex === undefined) {\r\n      this.addStop();\r\n      indexPos = this.stops.length - 2;\r\n      this.stops.at(indexPos).value.stopProposals = [];\r\n    } else {\r\n      indexPos = this.currentStopIndex;\r\n    }\r\n    const clickCoordinates = olproj.transform(\r\n      event.coordinate,\r\n      this.map.projection,\r\n      this.projection\r\n    );\r\n    this.stops.at(indexPos).patchValue({ stopCoordinates: clickCoordinates });\r\n\r\n    this.handleLocationProposals(clickCoordinates, indexPos);\r\n    this.addStopOverlay(clickCoordinates, indexPos);\r\n    setTimeout(() => {\r\n      this.focusOnStop = false; // prevent to trigger map click and Select on routes at same time.\r\n    }, 500);\r\n    this.routingFormService.unsetMapWaitingForRoutingClick();\r\n  }\r\n\r\n  geolocateStop(index: number) {\r\n    moveToOlFeatures(this.map, [this.map.geolocationFeature], FeatureMotion.Move);\r\n    const geolocateCoordinates = this.map.getCenter(this.projection);\r\n    this.stops.at(index).patchValue({ stopCoordinates: geolocateCoordinates });\r\n    this.addStopOverlay(geolocateCoordinates, index);\r\n    this.handleLocationProposals(geolocateCoordinates, index);\r\n  }\r\n\r\n  public addStopOverlay(coordinates: [number, number], index: number) {\r\n    const routingText = this.routingText(index);\r\n    let stopColor;\r\n    let stopText;\r\n    if (routingText === 'start') {\r\n      stopColor = 'green';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.routingForm.start'\r\n      );\r\n    } else if (routingText === 'end') {\r\n      stopColor = 'red';\r\n      stopText = this.languageService.translate.instant(\r\n        'igo.geo.routingForm.end'\r\n      );\r\n    } else {\r\n      stopColor = 'yellow';\r\n      stopText =\r\n        this.languageService.translate.instant(\r\n          'igo.geo.routingForm.intermediate'\r\n        ) +\r\n        ' #' +\r\n        index;\r\n    }\r\n\r\n    const geometry = new olgeom.Point(\r\n      olproj.transform(coordinates, this.projection, this.map.projection)\r\n    );\r\n    const feature = new olFeature({ geometry });\r\n\r\n    const stopID = this.getStopOverlayID(index);\r\n    this.deleteRoutingOverlaybyID(stopID);\r\n    feature.setId(stopID);\r\n\r\n    if (geometry === null) {\r\n      return;\r\n    }\r\n    if (geometry.getType() === 'Point') {\r\n      const olStyle = createOverlayMarkerStyle(stopColor);\r\n      // stopText\r\n      feature.setStyle(olStyle);\r\n    }\r\n    this.routingStopsOverlayDataSource.ol.addFeature(feature);\r\n  }\r\n\r\n  public getStopOverlayID(index: number): string {\r\n    let txt;\r\n    if (index === 0) {\r\n      txt = 'start';\r\n    } else if (index === this.stops.length - 1) {\r\n      txt = 'end';\r\n    } else {\r\n      txt = index;\r\n    }\r\n    return 'routingStop_' + txt;\r\n  }\r\n\r\n  private deleteRoutingOverlaybyID(id) {\r\n    if (this.routingStopsOverlayDataSource.ol.getFeatureById(id)) {\r\n      this.routingStopsOverlayDataSource.ol.removeFeature(\r\n        this.routingStopsOverlayDataSource.ol.getFeatureById(id)\r\n      );\r\n    }\r\n    if (this.routingRoutesOverlayDataSource.ol.getFeatureById(id)) {\r\n      this.routingRoutesOverlayDataSource.ol.removeFeature(\r\n        this.routingRoutesOverlayDataSource.ol.getFeatureById(id)\r\n      );\r\n    }\r\n  }\r\n\r\n  private getUrl() {\r\n    if (!this.route) {\r\n      return;\r\n    }\r\n\r\n    const routingKey = this.route.options.routingCoordKey;\r\n    const stopsCoordinates = [];\r\n    if (\r\n      this.routingFormService &&\r\n      this.routingFormService.getStopsCoordinates() &&\r\n      this.routingFormService.getStopsCoordinates().length !== 0\r\n    ) {\r\n      this.routingFormService.getStopsCoordinates().forEach(coord => {\r\n        stopsCoordinates.push(coord);\r\n      });\r\n    }\r\n    let routingUrl = '';\r\n    if (stopsCoordinates.length >= 2) {\r\n      routingUrl = `${routingKey}=${stopsCoordinates.join(';')}`;\r\n    }\r\n\r\n    return `${location.origin}${\r\n      location.pathname\r\n    }?tool=directions&${routingUrl}`;\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  AfterViewInit,\r\n  Optional\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { RoutingFormComponent } from './routing-form.component';\r\nimport { RoutingFormService } from './routing-form.service';\r\n\r\n@Directive({\r\n  selector: '[igoRoutingFormBinding]'\r\n})\r\nexport class RoutingFormBindingDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    @Self() private component: RoutingFormComponent,\r\n    private routingFormService: RoutingFormService,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    const storedStopsCoordinates = this.routingFormService.getStopsCoordinates();\r\n    if (\r\n      !storedStopsCoordinates &&\r\n      this.route &&\r\n      this.route.options.routingCoordKey\r\n    ) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const routingParams =\r\n          params[this.route.options.routingCoordKey as string];\r\n        const stopsCoordinatesFromURL = [];\r\n        if (routingParams) {\r\n          const routingCoordUrl = routingParams.split(';');\r\n          if (routingCoordUrl.length >= 2) {\r\n            let cnt = 0;\r\n            routingCoordUrl.forEach(coord => {\r\n              if (cnt !== 0 && cnt !== routingCoordUrl.length - 1) {\r\n                this.component.stops.insert(cnt, this.component.createStop());\r\n              }\r\n\r\n              const stopCoordinatesFromURL = JSON.parse('[' + coord + ']');\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopCoordinates: stopCoordinatesFromURL });\r\n              this.component.stops\r\n                .at(cnt)\r\n                .patchValue({ stopPoint: stopCoordinatesFromURL });\r\n              this.component.handleLocationProposals(\r\n                stopCoordinatesFromURL,\r\n                cnt\r\n              );\r\n\r\n              stopsCoordinatesFromURL.push(stopCoordinatesFromURL);\r\n              this.component.addStopOverlay(stopCoordinatesFromURL, cnt);\r\n              cnt++;\r\n            });\r\n            this.component.getRoutes(stopsCoordinatesFromURL, true);\r\n          }\r\n        }\r\n      });\r\n    } else if (storedStopsCoordinates) {\r\n      for (let i = 0; i < storedStopsCoordinates.length; i++) {\r\n        if (i !== 0 && i !== storedStopsCoordinates.length - 1) {\r\n          this.component.stops.insert(i, this.component.createStop());\r\n        }\r\n        if (storedStopsCoordinates[i] instanceof Array) {\r\n          this.component.addStopOverlay(storedStopsCoordinates[i], i);\r\n          this.component.stops\r\n            .at(i)\r\n            .patchValue({ stopCoordinates: storedStopsCoordinates[i] });\r\n          this.component.stops\r\n            .at(i)\r\n            .patchValue({ stopPoint: storedStopsCoordinates[i] });\r\n          this.component.handleLocationProposals(storedStopsCoordinates[i], i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatListModule,\r\n  MatDividerModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatTooltipModule,\r\n  MatAutocompleteModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { RoutingFormComponent } from './routing-form/routing-form.component';\r\nimport { RoutingFormBindingDirective } from './routing-form/routing-form-binding.directive';\r\nimport { RoutingFormService } from './routing-form/routing-form.service';\r\nimport { provideRoutingSourceService } from './shared/routing-source.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatListModule,\r\n    MatDividerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [RoutingFormComponent, RoutingFormBindingDirective],\r\n  declarations: [RoutingFormComponent, RoutingFormBindingDirective],\r\n  providers: [RoutingFormService, provideRoutingSourceService()]\r\n})\r\nexport class IgoRoutingModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoRoutingModule\r\n    };\r\n  }\r\n}\r\n","import { SearchSource } from './sources/source';\r\nimport { SearchSourceService } from './search-source.service';\r\n\r\n/**\r\n * Search source factory\r\n * @ignore\r\n */\r\nexport function searchSourceServiceFactory(sources: SearchSource[]) {\r\n  return new SearchSourceService(sources);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the SearchSource service\r\n */\r\nexport function provideSearchSourceService() {\r\n  return {\r\n    provide: SearchSourceService,\r\n    useFactory: searchSourceServiceFactory,\r\n    deps: [SearchSource]\r\n  };\r\n}\r\n","export class GoogleLinks {\r\n  static getGoogleMapsLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=' + lat + ',' + lon;\r\n  }\r\n\r\n  static getGoogleStreetViewLink(lon, lat) {\r\n    return 'https://www.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon;\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\nimport { GoogleLinks } from './../../../utils/googleLinks';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  IChercheData,\r\n  IChercheResponse,\r\n  IChercheReverseData,\r\n  IChercheReverseResponse\r\n} from './icherche.interfaces';\r\n\r\n@Injectable()\r\nexport class IChercheSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * ICherche search source\r\n */\r\n@Injectable()\r\nexport class IChercheSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'icherche';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions,\r\n    @Inject(IChercheSearchResultFormatter)\r\n    private formatter: IChercheSearchResultFormatter\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'ICherche QuÃ©bec',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/icherche/geocode',\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'Adresse',\r\n              value: 'adresses',\r\n              enabled: true\r\n            },\r\n            // {\r\n            //   title: 'Ancienne adresse',\r\n            //   value: 'ancienne_adresse',\r\n            //   enabled: true\r\n            // },\r\n            {\r\n              title: 'Code Postal',\r\n              value: 'codes-postaux',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Route',\r\n              value: 'routes',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'MunicipalitÃ©',\r\n              value: 'municipalites',\r\n              enabled: true\r\n            },\r\n            // {\r\n            //   title: 'Ancienne municipalitÃ©',\r\n            //   value: 'ancienne_municipalite',\r\n            //   enabled: true\r\n            // },\r\n            {\r\n              title: 'mrc',\r\n              value: 'mrc',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'RÃ©gion administrative',\r\n              value: 'regadmin',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Lieu',\r\n              value: 'lieux',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Borne',\r\n              value: 'bornes',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'Entreprise',\r\n              value: 'entreprises',\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '1',\r\n              value: 1,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '5',\r\n              value: 5,\r\n              enabled: true\r\n            },\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '25',\r\n              value: 25,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'trust level',\r\n          name: 'ecmax',\r\n          values: [\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '30',\r\n              value: 30,\r\n              enabled: true\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '75',\r\n              value: 75,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '100',\r\n              value: 100,\r\n              enabled: false\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response: IChercheResponse) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          q: this.computeTerm(term),\r\n          geometry: true,\r\n          type:\r\n            'adresses,codes-postaux,municipalites,mrc,regadmin,lieux,entreprises,bornes'\r\n        },\r\n        this.params,\r\n        this.computeOptionsParam(term, options || {}).params\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: IChercheResponse): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheData) => {\r\n      return this.formatter.formatResult(this.dataToResult(data));\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: IChercheData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, properties.code].join('.');\r\n\r\n    const subtitleHtml = data.highlight.title2\r\n      ? ' <small> ' + data.highlight.title2 + '</small>'\r\n      : '';\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        titleHtml: data.highlight.title + subtitleHtml,\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheSearchSource.propertiesBlacklist\r\n    );\r\n\r\n    const googleLinksProperties: { GoogleMaps: string, GoogleStreetView?: string } = {\r\n      GoogleMaps: GoogleLinks.getGoogleMapsLink(data.geometry.coordinates[0], data.geometry.coordinates[1])\r\n    };\r\n    if (data.geometry.type === 'Point') {\r\n      googleLinksProperties.GoogleStreetView = GoogleLinks.getGoogleStreetViewLink(\r\n        data.geometry.coordinates[0], data.geometry.coordinates[1]\r\n      );\r\n    }\r\n\r\n    return Object.assign(properties, { type: data.index }, googleLinksProperties);\r\n  }\r\n\r\n  /**\r\n   * Remove hashtag from query\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTerm(term: string): string {\r\n    return term.replace(/(#[^\\s]*)/g, '');\r\n  }\r\n\r\n  /**\r\n   * Add hashtag to param if valid\r\n   * @param term Query with hashtag\r\n   * @param options TextSearchOptions\r\n   */\r\n  private computeOptionsParam(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): TextSearchOptions {\r\n    const tags = term.match(/(#[^\\s]+)/g);\r\n    if (tags) {\r\n      let typeValue = '';\r\n      let hashtagToAdd = false;\r\n      tags.forEach(value => {\r\n        if (super.hashtagValid(super.getSettingsValues('type'), value, true)) {\r\n          typeValue += value.substring(1) + ',';\r\n          hashtagToAdd = true;\r\n        }\r\n      });\r\n      if (hashtagToAdd) {\r\n        options.params = Object.assign(options.params || {}, {\r\n          type: typeValue.slice(0, -1)\r\n        });\r\n      }\r\n    }\r\n    return options;\r\n  }\r\n}\r\n\r\n/**\r\n * IChercheReverse search source\r\n */\r\n@Injectable()\r\nexport class IChercheReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'icherchereverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = ['doc_type'];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return IChercheReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Territoire (GÃ©ocodage inversÃ©)',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/territoires/locate',\r\n\r\n      settings: [\r\n        {\r\n          type: 'checkbox',\r\n          title: 'results type',\r\n          name: 'type',\r\n          values: [\r\n            {\r\n              title: 'Adresse',\r\n              value: 'adresses',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Route',\r\n              value: 'routes',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'Arrondissement',\r\n              value: 'arrondissements',\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'MunicipalitÃ©',\r\n              value: 'municipalites',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'mrc',\r\n              value: 'mrc',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'RÃ©gion administrative',\r\n              value: 'regadmin',\r\n              enabled: true\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n    return this.http.get(this.searchUrl, { params }).pipe(\r\n      map((response: IChercheReverseResponse) => {\r\n        return this.extractResults(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    const distance = options.distance;\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          loc: lonLat.join(','),\r\n          buffer: distance ? String(distance) : '100',\r\n          geometry: true\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: IChercheReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: IChercheReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: IChercheReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), properties.type, properties.code].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties.nom\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.nom,\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: IChercheReverseData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      IChercheReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n\r\n  private computeExtent(\r\n    data: IChercheReverseData\r\n  ): [number, number, number, number] | undefined {\r\n    return data.bbox\r\n      ? [data.bbox[0], data.bbox[2], data.bbox[1], data.bbox[3]]\r\n      : undefined;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  IChercheSearchSource,\r\n  IChercheSearchResultFormatter,\r\n  IChercheReverseSearchSource\r\n} from './icherche';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultIChercheSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new IChercheSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultIChercheSearchResultFormatter() {\r\n  return {\r\n    provide: IChercheSearchResultFormatter,\r\n    useFactory: defaultIChercheSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * ICherche search source factory\r\n * @ignore\r\n */\r\nexport function ichercheSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService,\r\n  formatter: IChercheSearchResultFormatter\r\n) {\r\n  return new IChercheSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${IChercheSearchSource.id}`),\r\n    formatter\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search source\r\n */\r\nexport function provideIChercheSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService, IChercheSearchResultFormatter]\r\n  };\r\n}\r\n\r\n/**\r\n * IChercheReverse search source factory\r\n * @ignore\r\n */\r\nexport function ichercheReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new IChercheReverseSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${IChercheReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideIChercheReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ichercheReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, ReverseSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions } from './source.interfaces';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\nimport { GoogleLinks } from '../../../utils/googleLinks';\r\n\r\n@Injectable()\r\nexport class CoordinatesSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(result: SearchResult<Feature>): SearchResult<Feature> {\r\n    return result;\r\n  }\r\n}\r\n/**\r\n * CoordinatesReverse search source\r\n */\r\n@Injectable()\r\nexport class CoordinatesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'coordinatesreverse';\r\n  static type = FEATURE;\r\n\r\n  constructor(@Inject('options') options: SearchSourceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return CoordinatesReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Coordinates'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    return of([this.dataToResult(lonLat)]);\r\n  }\r\n\r\n  private dataToResult(data: [number, number]): SearchResult<Feature> {\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [data[0], data[1]]\r\n        },\r\n        extent: undefined,\r\n        properties: {\r\n          type: 'point',\r\n          coordonnees: String(data[0]) + ', ' + String(data[1]),\r\n          format: 'degrÃ©s decimaux',\r\n          systemeCoordonnees: 'WGS84',\r\n          GoogleMaps: GoogleLinks.getGoogleMapsLink(data[0], data[1]),\r\n          GoogleStreetView: GoogleLinks.getGoogleStreetViewLink(\r\n            data[0],\r\n            data[1]\r\n          )\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id: '1',\r\n        title: String(data[0]) + ', ' + String(data[1]),\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  CoordinatesReverseSearchSource,\r\n  CoordinatesSearchResultFormatter\r\n} from './coordinates';\r\n\r\n/**\r\n * ICherche search result formatter factory\r\n * @ignore\r\n */\r\nexport function defaultCoordinatesSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new CoordinatesSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ICherche search result formatter\r\n */\r\nexport function provideDefaultCoordinatesSearchResultFormatter() {\r\n  return {\r\n    provide: CoordinatesSearchResultFormatter,\r\n    useFactory: defaultCoordinatesSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * CoordinatesReverse search source factory\r\n * @ignore\r\n */\r\nexport function CoordinatesReverseSearchSourceFactory(config: ConfigService) {\r\n  return new CoordinatesReverseSearchSource(\r\n    config.getConfig(`searchSources.${CoordinatesReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the IChercheReverse search source\r\n */\r\nexport function provideCoordinatesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: CoordinatesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [ConfigService]\r\n  };\r\n}\r\n","import { FEATURE } from '../../feature';\r\nimport { LAYER } from '../../layer';\r\n\r\nexport const SEARCH_TYPES = [FEATURE, LAYER];\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, BehaviorSubject  } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LanguageService } from '@igo2/core';\r\n\r\nimport { LAYER } from '../../../layer';\r\nimport { QueryableDataSourceOptions, QueryFormat } from '../../../query';\r\nimport { QueryHtmlTarget } from './../../../query/shared/query.enums';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { TextSearchOptions } from './source.interfaces';\r\nimport { ILayerSearchSourceOptions, ILayerData, ILayerItemResponse, ILayerServiceResponse, ILayerDataSource } from './ilayer.interfaces';\r\n\r\n@Injectable()\r\nexport class ILayerSearchResultFormatter {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  formatResult(data: ILayerData): ILayerData {\r\n    const allowedKey = ['title', 'abstract', 'groupTitle', 'metadataUrl'];\r\n\r\n    const property = Object.entries(data.properties)\r\n      .filter(([key]) => allowedKey.indexOf(key) !== -1)\r\n      .reduce((out: {[key: string]: any}, entries: [string, any]) => {\r\n        const [key, value] = entries;\r\n        let newKey;\r\n        try {\r\n          newKey = this.languageService.translate.instant('igo.geo.search.ilayer.properties.' + key);\r\n        } catch (e) {\r\n          newKey = key;\r\n        }\r\n        out[newKey] = value ? value : '';\r\n        return out;\r\n      }, {});\r\n\r\n    const dataR = Object.assign({}, data);\r\n    dataR.properties = property as ILayerDataSource;\r\n\r\n    return dataR;\r\n  }\r\n}\r\n\r\n/**\r\n * ILayer search source\r\n */\r\n@Injectable()\r\nexport class ILayerSearchSource extends SearchSource implements TextSearch {\r\n\r\n  static id = 'ilayer';\r\n  static type = LAYER;\r\n\r\n  title$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  get title(): string {\r\n    return this.title$.getValue();\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private languageService: LanguageService,\r\n    @Inject('options') options: ILayerSearchSourceOptions,\r\n    @Inject(ILayerSearchResultFormatter)\r\n    private formatter: ILayerSearchResultFormatter\r\n  ) {\r\n    super(options);\r\n    this.languageService.translate.get(this.options.title).subscribe(title => this.title$.next(title));\r\n  }\r\n\r\n  getId(): string {\r\n    return ILayerSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): ILayerSearchSourceOptions {\r\n    return {\r\n      title: 'igo.geo.search.ilayer.name',\r\n      searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/layers/search'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a layer by name or keyword\r\n   * @param term Layer name or keyword\r\n   * @returns Observable of <SearchResult<LayerOptions>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<ILayerItemResponse>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(\r\n        map((response: ILayerServiceResponse) => this.extractResults(response))\r\n      );\r\n  }\r\n\r\n  private computeSearchRequestParams(term: string, options: TextSearchOptions): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign({\r\n        q: term\r\n      }, this.params, options.params || {})\r\n    });\r\n  }\r\n\r\n  private extractResults(response: ILayerServiceResponse): SearchResult<ILayerItemResponse>[] {\r\n    return response.items.map((data: ILayerData) => this.dataToResult(data));\r\n  }\r\n\r\n  private dataToResult(data: ILayerData): SearchResult<ILayerItemResponse> {\r\n    const layerOptions = this.computeLayerOptions(data);\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: LAYER,\r\n        id: [this.getId(), data.properties.id].join('.'),\r\n        title: data.properties.title,\r\n        titleHtml: data.highlight.title,\r\n        icon: data.properties.type === 'Layer' ? 'layers' : 'map'\r\n      },\r\n      data: layerOptions\r\n    };\r\n  }\r\n\r\n  private computeLayerOptions(data: ILayerData): ILayerItemResponse {\r\n    const url = data.properties.url;\r\n    const queryParams: QueryableDataSourceOptions = this.extractQueryParamsFromSourceUrl(url);\r\n    return {\r\n      sourceOptions: {\r\n        id: data.properties.id,\r\n        crossOrigin: 'anonymous',\r\n        type: data.properties.format,\r\n        url,\r\n        queryFormat: queryParams.queryFormat,\r\n        queryHtmlTarget: queryParams.queryHtmlTarget,\r\n        queryable: data.properties.queryable,\r\n        params: {\r\n          layers: data.properties.name\r\n        }\r\n      },\r\n      title: data.properties.title,\r\n      properties: this.formatter.formatResult(data).properties\r\n    };\r\n  }\r\n\r\n  private extractQueryParamsFromSourceUrl(url: string): {queryFormat: QueryFormat; queryHtmlTarget: QueryHtmlTarget; } {\r\n    let queryFormat = QueryFormat.GML2;\r\n    let queryHtmlTarget;\r\n    const formatOpt = (this.options as ILayerSearchSourceOptions).queryFormat;\r\n    if (formatOpt) {\r\n      for (const key of Object.keys(formatOpt)) {\r\n        const value = formatOpt[key];\r\n        if (value === '*') {\r\n          queryFormat = QueryFormat[key.toUpperCase()];\r\n          break;\r\n        }\r\n\r\n        const urls = (value as any as {urls: string[]}).urls;\r\n        if (Array.isArray(urls)) {\r\n          urls.forEach((urlOpt) => {\r\n            if (url.indexOf(urlOpt) !== -1) {\r\n              queryFormat = QueryFormat[key.toUpperCase()];\r\n            }\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (queryFormat === QueryFormat.HTML) {\r\n      queryHtmlTarget = 'iframe';\r\n    }\r\n\r\n    return {\r\n      queryFormat,\r\n      queryHtmlTarget\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { ILayerSearchSource, ILayerSearchResultFormatter } from './ilayer';\r\n\r\n/**\r\n * ILayer search result formatter factory\r\n * @ignore\r\n */\r\nexport function ilayerSearchResultFormatterFactory(\r\n  languageService: LanguageService\r\n) {\r\n  return new ILayerSearchResultFormatter(languageService);\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ILayer search result formatter\r\n */\r\nexport function provideILayerSearchResultFormatter() {\r\n  return {\r\n    provide: ILayerSearchResultFormatter,\r\n    useFactory: ilayerSearchResultFormatterFactory,\r\n    deps: [LanguageService]\r\n  };\r\n}\r\n\r\n/**\r\n * ILayer search source factory\r\n * @ignore\r\n */\r\nexport function ilayerSearchSourceFactory(\r\n  http: HttpClient,\r\n  languageService: LanguageService,\r\n  config: ConfigService,\r\n  formatter: ILayerSearchResultFormatter\r\n) {\r\n  return new ILayerSearchSource(\r\n    http,\r\n    languageService,\r\n    config.getConfig(`searchSources.${ILayerSearchSource.id}`),\r\n    formatter\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the ILayer search source\r\n */\r\nexport function provideILayerSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: ilayerSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, LanguageService, ConfigService, ILayerSearchResultFormatter]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FEATURE, Feature, FeatureGeometry } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch } from './source';\r\nimport { SearchSourceOptions, TextSearchOptions, SearchSourceSettings } from './source.interfaces';\r\nimport { NominatimData } from './nominatim.interfaces';\r\n\r\n/**\r\n * Nominatim search source\r\n */\r\n@Injectable()\r\nexport class NominatimSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'nominatim';\r\n  static type = FEATURE;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n  }\r\n\r\n  getId(): string {\r\n    return NominatimSearchSource.id;\r\n  }\r\n\r\n  /*\r\n   * Source : https://wiki.openstreetmap.org/wiki/Key:amenity\r\n  */\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Nominatim (OSM)',\r\n      searchUrl: 'https://nominatim.openstreetmap.org/search',\r\n      settings: [\r\n        {\r\n            type: 'checkbox',\r\n            title: 'results type',\r\n            name: 'amenity',\r\n            values: [\r\n              {\r\n                title: 'Restauration',\r\n                value: 'bar,bbq,biergaten,cafe,drinking_water,fast_food,food_court,ice_cream,pub,restaurant',\r\n                enabled: false\r\n              },\r\n              {\r\n                title: 'SantÃ©',\r\n                value: 'baby_hatch,clinic,dentist,doctors,hospital,nursing_home,pharmacy,social_facility,veterinary',\r\n                enabled: false\r\n              },\r\n              {\r\n                title: 'Divertissement',\r\n                value: 'arts_centre,brothel,casino,cinema,community_center_fountain,gambling,nightclub,planetarium \\\r\n                          ,public_bookcase,social_centre,stripclub,studio,swingerclub,theatre,internet_cafe',\r\n                enabled: false\r\n              },\r\n              {\r\n                title: 'Finance',\r\n                value: 'atm,bank,bureau_de_change',\r\n                enabled: false\r\n              }\r\n            ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'results limit',\r\n          name: 'limit',\r\n          values: [\r\n            {\r\n              title: '10',\r\n              value: 10,\r\n              enabled: true\r\n            },\r\n            {\r\n              title: '20',\r\n              value: 20,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: '50',\r\n              value: 50,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'country limitation',\r\n          name: 'countrycodes',\r\n          values: [\r\n            {\r\n              title: 'Canada',\r\n              value: 'CA',\r\n              enabled: true\r\n            },\r\n            {\r\n              title: 'Le monde',\r\n              value: null,\r\n              enabled: false\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radiobutton',\r\n          title: 'multiple object',\r\n          name: 'dedupe',\r\n          values: [\r\n            {\r\n              title: 'Oui',\r\n              value: 0,\r\n              enabled: false\r\n            },\r\n            {\r\n              title: 'Non',\r\n              value: 1,\r\n              enabled: true\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a place by name\r\n   * @param term Place name\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string | undefined,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeSearchRequestParams(term, options || {});\r\n    return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response: NominatimData[]) => this.extractResults(response)));\r\n  }\r\n\r\n  private computeSearchRequestParams(\r\n    term: string,\r\n    options: TextSearchOptions\r\n  ): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          q: this.computeTerm(term),\r\n          format: 'json'\r\n        },\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: NominatimData[]): SearchResult<Feature>[] {\r\n    return response.map((data: NominatimData) => this.dataToResult(data));\r\n  }\r\n\r\n  private dataToResult(data: NominatimData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const geometry = this.computeGeometry(data);\r\n    const extent = this.computeExtent(data);\r\n    const id = [this.getId(), 'place', data.place_id].join('.');\r\n\r\n    return {\r\n      source: this,\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.display_name,\r\n        icon: 'map-marker'\r\n      },\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry,\r\n        extent,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.display_name\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: NominatimData): { [key: string]: any } {\r\n    return {\r\n      display_name: data.display_name,\r\n      place_id: data.place_id,\r\n      osm_type: data.osm_type,\r\n      class: data.class,\r\n      type: data.type\r\n    };\r\n  }\r\n\r\n  private computeGeometry(data: NominatimData): FeatureGeometry {\r\n    return {\r\n      type: 'Point',\r\n      coordinates: [parseFloat(data.lon), parseFloat(data.lat)]\r\n    };\r\n  }\r\n\r\n  private computeExtent(data: NominatimData): [number, number, number, number] {\r\n    return [\r\n      parseFloat(data.boundingbox[2]),\r\n      parseFloat(data.boundingbox[0]),\r\n      parseFloat(data.boundingbox[3]),\r\n      parseFloat(data.boundingbox[1])\r\n    ];\r\n  }\r\n\r\n  private computeTerm(term: string): string {\r\n    term = this.computeTermTags(term);\r\n    return term;\r\n  }\r\n\r\n  /**\r\n   * Add hashtag from query in Nominatim's format (+[])\r\n   * @param term Query with hashtag\r\n   */\r\n  private computeTermTags(term: string): string {\r\n    const tags = term.match(/(#[^\\s]+)/g);\r\n\r\n    let addTagsFromSettings = true;\r\n    if ( tags ) {\r\n      tags.forEach( value => {\r\n        term = term.replace(value, '');\r\n        if ( super.hashtagValid(super.getSettingsValues('amenity'), value) ) {\r\n          term += '+[' + value.substring(1) + ']';\r\n          addTagsFromSettings = false;\r\n        }\r\n      });\r\n      addTagsFromSettings = false;\r\n    }\r\n\r\n    if (addTagsFromSettings) {\r\n      term = this.computeTermSettings(term);\r\n    }\r\n    return term;\r\n  }\r\n\r\n  /**\r\n   * Add hashtag from settings in Nominatim's format (+[])\r\n   * @param term Query\r\n   */\r\n  private computeTermSettings(term: string): string {\r\n    this.options.settings.forEach( settings => {\r\n      if (settings.name === 'amenity')Â {\r\n        settings.values.forEach( conf => {\r\n          if (conf.enabled && typeof conf.value === 'string') {\r\n            const splitted = conf.value.split(',');\r\n            splitted.forEach( value => {\r\n              term += '+[' + value + ']';\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return term;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport { NominatimSearchSource } from './nominatim';\r\n\r\n/**\r\n * Nominatim search source factory\r\n * @ignore\r\n */\r\nexport function nominatimSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new NominatimSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${NominatimSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the Nominatim search source\r\n */\r\nexport function provideNominatimSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: nominatimSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { FEATURE, Feature } from '../../../feature';\r\n\r\nimport { SearchResult } from '../search.interfaces';\r\nimport { SearchSource, TextSearch, ReverseSearch } from './source';\r\nimport {\r\n  SearchSourceOptions,\r\n  TextSearchOptions,\r\n  ReverseSearchOptions\r\n} from './source.interfaces';\r\nimport {\r\n  StoredQueriesData,\r\n  StoredQueriesResponse,\r\n  StoredQueriesReverseData,\r\n  StoredQueriesReverseResponse,\r\n  StoredQueriesSearchSourceOptions,\r\n  StoredQueriesFields,\r\n  StoredQueriesReverseSearchSourceOptions\r\n} from './storedqueries.interfaces';\r\n\r\nimport * as olformat from 'ol/format';\r\n\r\n/**\r\n * StoredQueries search source\r\n */\r\n@Injectable()\r\nexport class StoredQueriesSearchSource extends SearchSource implements TextSearch {\r\n  static id = 'storedqueries';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesSearchSourceOptions ;\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err = 'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.fields) {\r\n      throw new Error('Stored Queries :You have to set \"fields\" into options. ex: fields: {\"name\": \"rtss\", \"defaultValue\": \"-99\"}');\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat = this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname = this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n\r\n    const storedQueryId = this.storedQueriesOptions.storedquery_id.toLowerCase();\r\n    if (storedQueryId.includes('getfeaturebyid') && this.storedQueriesOptions.outputformat.toLowerCase().includes('getfeaturebyid') ) {\r\n      let err = 'You must set a geojson format for your stored query. This is due to an openlayers issue)';\r\n      err += ' (wfs 1.1.0 & gml 3.1.1 limitation)';\r\n      throw new Error(err);\r\n    }\r\n\r\n    if (!this.storedQueriesOptions.fields) {\r\n      throw new Error('Stored Queries :You must set a fields definition for your stored query');\r\n    }\r\n\r\n    if (!(this.storedQueriesOptions.fields instanceof Array)) {\r\n      this.storedQueriesOptions.fields = [this.storedQueriesOptions.fields];\r\n    }\r\n\r\n    this.multipleFieldsQuery  = this.storedQueriesOptions.fields.length > 1 ? true : false;\r\n\r\n    this.storedQueriesOptions.fields.forEach((field, index) => {\r\n      if (this.multipleFieldsQuery && !field.splitPrefix && index !== 0) {\r\n        throw new Error('Stored Queries :You must set a field spliter into your field definition (optional for the first one!)');\r\n      }\r\n      if (!field.defaultValue) {\r\n        throw new Error('Stored Queries :You must set a field default value into your field definition');\r\n      }\r\n    });\r\n\r\n    this.storedQueriesOptions.resultTitle = this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries',\r\n      searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'\r\n    };\r\n  }\r\n\r\n  // URL CALL EXAMPLES:\r\n  //  GetFeatureById (mandatory storedquery for wfs server) (outputformat must be in geojson)\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=2.0.0&request=GetFeature&storedquery_id=urn:ogc:def:query:OGC-WFS::GetFeatureById&srsname=epsg:4326&outputformat=geojson&ID=a_num_route.132\r\n  //  Custom StoredQuery\r\n  //  tslint:disable-next-line:max-line-length\r\n  //  https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=rtss&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&rtss=0013801110000c&chainage=12\r\n\r\n  /**\r\n   * Search a location by name or keyword\r\n   * @param term Location name or keyword\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  search(\r\n    term: string,\r\n    options?: TextSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const storedqueriesParams = this.termSplitter(term, this.storedQueriesOptions.fields );\r\n    const params = this.computeRequestParams(options || {}, storedqueriesParams);\r\n\r\n    if (new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)) {\r\n      return this.http\r\n      .get(this.searchUrl, { params, responseType: 'text' })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    } else {\r\n      return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    }\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private termSplitter(term: string, fields: StoredQueriesFields[]): {} {\r\n    const splittedTerm = {};\r\n    let remainingTerm = term;\r\n    let cnt = 0;\r\n\r\n    // Used to build the default values\r\n    fields.forEach(field => {\r\n      splittedTerm[field.name] = field.defaultValue;\r\n      const splitterRegex = new RegExp(field.splitPrefix + '(.+)', 'i');\r\n      if (splitterRegex.test(remainingTerm)) {\r\n        cnt = field.splitPrefix ? cnt += 1 : cnt;\r\n        remainingTerm = remainingTerm.split(splitterRegex)[1];\r\n      }\r\n\r\n    });\r\n    if (cnt === 0) {\r\n      splittedTerm[fields[0].name] = term;\r\n      return splittedTerm;\r\n    }\r\n    remainingTerm = term;\r\n    const localFields = [...fields].reverse();\r\n    localFields.forEach((field) => {\r\n      const splitterRegex = new RegExp(field.splitPrefix || '' + '(.+)', 'i');\r\n      if (remainingTerm || remainingTerm !== '') {\r\n        const values = remainingTerm.split(splitterRegex);\r\n        remainingTerm = values[0];\r\n        if (values[1]) {\r\n          splittedTerm[field.name] = values[1].trim();\r\n        }\r\n      }\r\n    });\r\n    return splittedTerm;\r\n  }\r\n\r\n  private computeRequestParams(options: TextSearchOptions, queryParams): HttpParams {\r\n    const wfsversion = this.storedQueriesOptions.storedquery_id.toLowerCase().includes('getfeaturebyid') ? '2.0.0' : '1.1.0';\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'wfs',\r\n          version: wfsversion,\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat\r\n        },\r\n        queryParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(response: StoredQueriesResponse): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle] ? this.storedQueriesOptions.resultTitle : this.resultTitle;\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        // extent: data.bbox,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties.title,\r\n        titleHtml: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: StoredQueriesData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesSearchSource.propertiesBlacklist\r\n    );\r\n    return properties;\r\n  }\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source\r\n */\r\n\r\n // EXAMPLE CALLS\r\n // tslint:disable-next-line:max-line-length\r\n // https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=lim_adm&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&long=-71.292469&lat=46.748107\r\n //\r\n\r\n@Injectable()\r\nexport class StoredQueriesReverseSearchSource extends SearchSource\r\n  implements ReverseSearch {\r\n  static id = 'storedqueriesreverse';\r\n  static type = FEATURE;\r\n  static propertiesBlacklist: string[] = [];\r\n  public resultTitle: 'title';\r\n  public storedQueriesOptions: StoredQueriesReverseSearchSourceOptions;\r\n  public multipleFieldsQuery: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('options') options: SearchSourceOptions\r\n  ) {\r\n    super(options);\r\n    this.storedQueriesOptions = options as StoredQueriesReverseSearchSourceOptions ;\r\n    if (!this.storedQueriesOptions.storedquery_id) {\r\n      const err = 'Stored Queries :You have to set \"storedquery_id\" into StoredQueries options. ex: storedquery_id: \"nameofstoredquerie\"';\r\n      throw new Error(err);\r\n    }\r\n    if (!this.storedQueriesOptions.longField) {\r\n      throw new Error('Stored Queries :You have to set \"longField\" to map the longitude coordinate to the query params.');\r\n    }\r\n    if (!this.storedQueriesOptions.latField) {\r\n      throw new Error('Stored Queries :You have to set \"latField\" to map the latitude coordinate to the query params.');\r\n    }\r\n\r\n    this.storedQueriesOptions.outputformat = this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';\r\n    this.storedQueriesOptions.srsname = this.storedQueriesOptions.srsname || 'EPSG:4326';\r\n    this.storedQueriesOptions.resultTitle = this.storedQueriesOptions.resultTitle || this.resultTitle;\r\n  }\r\n\r\n  getId(): string {\r\n    return StoredQueriesReverseSearchSource.id;\r\n  }\r\n\r\n  protected getDefaultOptions(): SearchSourceOptions {\r\n    return {\r\n      title: 'Stored Queries (reverse)',\r\n      searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Search a location by coordinates\r\n   * @param lonLat Location coordinates\r\n   * @param distance Search raidus around lonLat\r\n   * @returns Observable of <SearchResult<Feature>[]\r\n   */\r\n  reverseSearch(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): Observable<SearchResult<Feature>[]> {\r\n    const params = this.computeRequestParams(lonLat, options || {});\r\n\r\n    if (new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)) {\r\n      return this.http\r\n      .get(this.searchUrl, { params, responseType: 'text' })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    } else {\r\n      return this.http\r\n      .get(this.searchUrl, { params })\r\n      .pipe(map((response) => {\r\n        return this.extractResults(this.extractWFSData(response));\r\n      }));\r\n    }\r\n\r\n  }\r\n\r\n  private getFormatFromOptions() {\r\n    let olFormatCls;\r\n\r\n    const outputFormat = this.storedQueriesOptions.outputformat;\r\n    const patternGml3 = new RegExp('.*?gml.*?', 'i');\r\n    const patternGeojson = new RegExp('.*?json.*?', 'i');\r\n\r\n    if (patternGeojson.test(outputFormat)) {\r\n      olFormatCls = olformat.GeoJSON;\r\n    }\r\n    if (patternGml3.test(outputFormat)) {\r\n      olFormatCls = olformat.WFS;\r\n    }\r\n\r\n    return new olFormatCls();\r\n  }\r\n\r\n  private extractWFSData(res) {\r\n    const olFormat = this.getFormatFromOptions();\r\n    const geojson = olformat.GeoJSON;\r\n    const wfsfeatures = olFormat.readFeatures(res);\r\n    const features = JSON.parse(new geojson().writeFeatures(wfsfeatures));\r\n    return features;\r\n  }\r\n\r\n  private computeRequestParams(\r\n    lonLat: [number, number],\r\n    options?: ReverseSearchOptions\r\n  ): HttpParams {\r\n    const longLatParams =  {};\r\n    longLatParams[this.storedQueriesOptions.longField] = lonLat[0];\r\n    longLatParams[this.storedQueriesOptions.latField] = lonLat[1];\r\n\r\n    return new HttpParams({\r\n      fromObject: Object.assign(\r\n        {\r\n          service: 'wfs',\r\n          version: '1.1.0',\r\n          request: 'GetFeature',\r\n          storedquery_id: this.storedQueriesOptions.storedquery_id,\r\n          srsname: this.storedQueriesOptions.srsname,\r\n          outputformat: this.storedQueriesOptions.outputformat,\r\n        },\r\n        longLatParams,\r\n        this.params,\r\n        options.params || {}\r\n      )\r\n    });\r\n  }\r\n\r\n  private extractResults(\r\n    response: StoredQueriesReverseResponse\r\n  ): SearchResult<Feature>[] {\r\n    return response.features.map((data: StoredQueriesReverseData) => {\r\n      return this.dataToResult(data);\r\n    });\r\n  }\r\n\r\n  private dataToResult(data: StoredQueriesReverseData): SearchResult<Feature> {\r\n    const properties = this.computeProperties(data);\r\n    const id = [this.getId(), properties.type, data.id].join('.');\r\n    const title = data.properties[this.storedQueriesOptions.resultTitle] ? this.storedQueriesOptions.resultTitle : this.resultTitle;\r\n\r\n    return {\r\n      source: this,\r\n      data: {\r\n        type: FEATURE,\r\n        projection: 'EPSG:4326',\r\n        geometry: data.geometry,\r\n        properties,\r\n        meta: {\r\n          id,\r\n          title: data.properties[title]\r\n        }\r\n      },\r\n      meta: {\r\n        dataType: FEATURE,\r\n        id,\r\n        title: data.properties[title],\r\n        icon: 'map-marker'\r\n      }\r\n    };\r\n  }\r\n\r\n  private computeProperties(data: StoredQueriesReverseData): { [key: string]: any } {\r\n    const properties = ObjectUtils.removeKeys(\r\n      data.properties,\r\n      StoredQueriesReverseSearchSource.propertiesBlacklist\r\n    );\r\n    return Object.assign(properties, { type: data.properties.doc_type });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { SearchSource } from './source';\r\nimport {\r\n  StoredQueriesSearchSource,\r\n  StoredQueriesReverseSearchSource\r\n} from './storedqueries';\r\n\r\n/**\r\n * StoredQueries search source factory\r\n * @ignore\r\n */\r\nexport function storedqueriesSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueries search source\r\n */\r\nexport function provideStoredQueriesSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n\r\n/**\r\n * StoredQueriesReverse search source factory\r\n * @ignore\r\n */\r\n\r\nexport function storedqueriesReverseSearchSourceFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new StoredQueriesReverseSearchSource(\r\n    http,\r\n    config.getConfig(`searchSources.${StoredQueriesReverseSearchSource.id}`)\r\n  );\r\n}\r\n\r\n/**\r\n * Function that returns a provider for the StoredQueriesReverse search source\r\n */\r\nexport function provideStoredQueriesReverseSearchSource() {\r\n  return {\r\n    provide: SearchSource,\r\n    useFactory: storedqueriesReverseSearchSourceFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import {MatCheckboxChange, MatRadioChange } from '@angular/material';\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\nimport { SearchSource } from '../shared/sources/source';\r\nimport { SearchSourceSettings, SettingOptions } from '../shared/sources/source.interfaces';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-selector',\r\n  templateUrl: './search-selector.component.html',\r\n  styleUrls: ['./search-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchSelectorComponent implements OnInit {\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * The search type enabled\r\n   */\r\n  @Input() enabled: string;\r\n\r\n  /**\r\n   * Event emitted when the enabled search type changes\r\n   */\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  constructor(private searchSourceService: SearchSourceService) {}\r\n\r\n  /**\r\n   * Enable the first search type if the enabled input is not defined\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    const initial = this.enabled || this.searchTypes[0];\r\n    this.enableSearchType(initial);\r\n  }\r\n\r\n  /**\r\n   * Enable the selected search type\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.enableSearchType(searchType);\r\n  }\r\n\r\n  /**\r\n   * Get a search type's title. The title\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Search type\r\n   * @internal\r\n   */\r\n  getSearchTypeTitle(searchType: string) {\r\n    return `search.${searchType.toLowerCase()}.title`;\r\n  }\r\n\r\n  /**\r\n   * Emit an event and enable the search sources of the given type.\r\n   * @param searchType Search type\r\n   */\r\n  private enableSearchType(searchType: string) {\r\n    this.enabled = searchType;\r\n    this.searchSourceService.enableSourcesByType(searchType);\r\n    this.change.emit(searchType);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatTabsModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { SearchSelectorComponent } from './search-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatTabsModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSelectorComponent],\r\n  declarations: [SearchSelectorComponent]\r\n})\r\nexport class IgoSearchSelectorModule {}\r\n","import {MatCheckboxChange, MatRadioChange } from '@angular/material';\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { SearchSourceService } from '../shared/search-source.service';\r\nimport { SearchSource } from '../shared/sources/source';\r\nimport { SearchSourceSettings, SettingOptions } from '../shared/sources/source.interfaces';\r\n\r\n/**\r\n * This component allows a user to select a search type yo enable. In it's\r\n * current version, only one search type can be selected at once (radio). If\r\n * this component were to support more than one search source enabled (checkbox),\r\n * the searchbar component would require a small change to it's\r\n * placeholder getter. The search source service already supports having\r\n * more than one search source enabled.\r\n */\r\n@Component({\r\n  selector: 'igo-search-settings',\r\n  templateUrl: './search-settings.component.html',\r\n  styleUrls: ['./search-settings.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class SearchSettingsComponent {\r\n\r\n  /**\r\n   * Event emitted when the enabled search type changes\r\n   */\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  constructor(private searchSourceService: SearchSourceService) {}\r\n\r\n  /**\r\n   * Get all search sources\r\n   * @internal\r\n   */\r\n  getSearchSources(): SearchSource[] {\r\n    return this.searchSourceService.getSources();\r\n  }\r\n\r\n  /**\r\n   * Triggered when a setting is checked (checkbox style)\r\n   * @internal\r\n   */\r\n  settingsValueCheckedCheckbox(\r\n    event: MatCheckboxChange,\r\n    source: SearchSource,\r\n    setting: SearchSourceSettings,\r\n    settingValue: SettingOptions\r\n  ) {\r\n    settingValue.enabled = event.checked;\r\n    source.setParamFromSetting(setting);\r\n  }\r\n\r\n  /**\r\n   * Triggered when a setting is checked (radiobutton style)\r\n   * @internal\r\n   */\r\n  settingsValueCheckedRadioButton(\r\n    event: MatRadioChange,\r\n    source: SearchSource,\r\n    setting: SearchSourceSettings,\r\n    settingValue: SettingOptions\r\n  ) {\r\n    setting.values.forEach( conf => {\r\n      if (conf.value !== settingValue.value) {\r\n        conf.enabled = !event.source.checked;\r\n      } else {\r\n        conf.enabled = event.source.checked;\r\n      }\r\n    });\r\n    source.setParamFromSetting(setting);\r\n  }\r\n\r\n  onCheckSearchSource(event: MatCheckboxChange, source: SearchSource) {\r\n    source.enabled = event.checked;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SearchSettingsComponent } from './search-settings.component';\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  declarations: [SearchSettingsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SearchSettingsComponent]\r\n})\r\nexport class IgoSearchSettingsModule { }\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ElementRef,\r\n  HostBinding,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { FloatLabelType } from '@angular/material';\r\n\r\nimport { Subject, Subscription, EMPTY, timer } from 'rxjs';\r\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { EntityStore } from '@igo2/common';\r\n\r\nimport { SEARCH_TYPES } from '../shared/search.enums';\r\nimport { SearchResult, Research } from '../shared/search.interfaces';\r\nimport { SearchService } from '../shared/search.service';\r\n\r\n/**\r\n * Searchbar that triggers a research in all search sources enabled.\r\n * If the store input is defined, the search results will be loaded\r\n * into that store. An event is always emitted when a research is completed.\r\n */\r\n@Component({\r\n  selector: 'igo-search-bar',\r\n  templateUrl: './search-bar.component.html',\r\n  styleUrls: ['./search-bar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchBarComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Invalid keys\r\n   */\r\n  private readonly invalidKeys = ['Control', 'Shift', 'Alt'];\r\n\r\n  /**\r\n   * Search term stream\r\n   */\r\n  private stream$ = new Subject<string>();\r\n\r\n  /**\r\n   * Subscription to the search term stream\r\n   */\r\n  private stream$$: Subscription;\r\n\r\n  /**\r\n   * Search term\r\n   */\r\n  @Input() term = '';\r\n\r\n  /**\r\n   * Whether a float label should be displayed\r\n   */\r\n  @Input() floatLabel: FloatLabelType = 'never';\r\n\r\n  /**\r\n   * Whether this component is disabled\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  /**\r\n   * Icons color (search and clear)\r\n   */\r\n  @Input() color = 'primary';\r\n\r\n  /**\r\n   * Debounce time between each keystroke\r\n   */\r\n  @Input() debounce = 300;\r\n\r\n  /**\r\n   * Minimum term length required to trigger a research\r\n   */\r\n  @Input() minLength = 2;\r\n\r\n  /**\r\n   * Search icon\r\n   */\r\n  @Input() searchIcon: string;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * List of available search types\r\n   */\r\n  @Input() searchTypes: string[] = SEARCH_TYPES;\r\n\r\n  /**\r\n   * Event emitted when the search term changes\r\n   */\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Event emitted when a research is completed\r\n   */\r\n  @Output() search = new EventEmitter<{\r\n    research: Research;\r\n    results: SearchResult[];\r\n  }>();\r\n\r\n  /**\r\n   * Event emitted when the search type changes\r\n   */\r\n  @Output() searchTypeChange = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Event emitted when the search type changes\r\n   */\r\n  @Output() clearFeature = new EventEmitter();\r\n\r\n  /**\r\n   * Input element\r\n   * @internal\r\n   */\r\n  @ViewChild('input') input: ElementRef;\r\n\r\n  /**\r\n   * Host's empty class\r\n   * @internal\r\n   */\r\n  @HostBinding('class.empty')\r\n  get emptyClass() {\r\n    return this.empty;\r\n  }\r\n\r\n  /**\r\n   * Whether the search bar is empty\r\n   * @internal\r\n   */\r\n  get empty(): boolean {\r\n    return this.term.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Search bar palceholder\r\n   * @internal\r\n   */\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n  }\r\n  get placeholder(): string {\r\n    return this.empty ? this._placeholder : '';\r\n  }\r\n  private _placeholder = '';\r\n\r\n  constructor(private searchService: SearchService) {}\r\n\r\n  /**\r\n   * Subscribe to the search term stream and trigger researches\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this.stream$$ = this.stream$\r\n      .pipe(\r\n        debounce((term: string) => {\r\n          return term === '' ? EMPTY : timer(300);\r\n        }),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe((term: string) => this.onTermChange(term));\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the search term stream\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.stream$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * When a user types, validates the key and send it into the\r\n   * stream if it's valid\r\n   * @param event Keyboard event\r\n   * @internal\r\n   */\r\n  onKeyup(event: KeyboardEvent) {\r\n    const key = (event.target as HTMLInputElement).value;\r\n    if (!this.keyIsValid(key)) {\r\n      return;\r\n    }\r\n    this.setTerm(key);\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   * @internal\r\n   */\r\n  onClearButtonClick() {\r\n    this.clear();\r\n    this.clearFeature.emit();\r\n  }\r\n\r\n  /**\r\n   * Update the placeholder with the enabled search type. The placeholder\r\n   * for all availables search typers needs to be defined in the locale\r\n   * files or an error will be thrown.\r\n   * @param searchType Enabled search type\r\n   * @internal\r\n   */\r\n  onSearchTypeChange(searchType: string) {\r\n    this.searchTypeChange.emit(searchType);\r\n    this.placeholder = `search.${searchType.toLowerCase()}.placeholder`;\r\n    this.doSearch(this.term);\r\n  }\r\n\r\n  /**\r\n   * Send the term into the stream only if this component is not disabled\r\n   * @param term Search term\r\n   */\r\n  setTerm(term: string) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.term = term;\r\n    if (term.replace(/(#[^\\s]*)/g, '').trim().length >= this.minLength ||\r\n      term.replace(/(#[^\\s]*)/g, '').trim().length === 0) {\r\n      this.stream$.next(term);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the stream and the input\r\n   */\r\n  private clear() {\r\n    this.term = '';\r\n    this.stream$.next(this.term);\r\n    this.input.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Validate if a given key stroke is a valid input\r\n   */\r\n  private keyIsValid(key: string) {\r\n    return this.invalidKeys.indexOf(key) === -1;\r\n  }\r\n\r\n  /**\r\n   * When the search term changes, emit an event and trigger a\r\n   * research in every enabled search sources.\r\n   * @param term Search term\r\n   */\r\n  private onTermChange(term: string | undefined) {\r\n    this.change.emit(term);\r\n    this.doSearch(term);\r\n  }\r\n\r\n  /**\r\n   * Execute the search\r\n   * @param term Search term\r\n   */\r\n  private doSearch(term: string | undefined) {\r\n    if (term === undefined || term.replace(/(#[^\\s]*)/g, '').trim() === '') {\r\n      if (this.store !== undefined) {\r\n        this.store.clear();\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.store !== undefined) {\r\n      this.store.softClear();\r\n    }\r\n\r\n    const researches = this.searchService.search(term);\r\n    researches.map(research => {\r\n      research.request.subscribe((results: SearchResult[]) => {\r\n        this.onResearchCompleted(research, results);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When a research  is completed, emit an event and update\r\n   * the store's items.\r\n   * @param research Research\r\n   * @param results Research results\r\n   */\r\n  private onResearchCompleted(research: Research, results: SearchResult[]) {\r\n    this.search.emit({ research, results });\r\n\r\n    if (this.store !== undefined) {\r\n      const newResults = this.store.entities$.value\r\n        .filter(result => result.source !== research.source)\r\n        .concat(results);\r\n      this.store.load(newResults);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Self,\r\n  OnInit,\r\n  Optional,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { RouteService } from '@igo2/core';\r\n\r\nimport { SearchBarComponent } from './search-bar.component';\r\n\r\n@Directive({\r\n  selector: '[igoSearchUrlParam]'\r\n})\r\nexport class SearchUrlParamDirective implements OnInit {\r\n  constructor(\r\n    @Self() private component: SearchBarComponent,\r\n    private ref: ChangeDetectorRef,\r\n    @Optional() private route: RouteService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.route && this.route.options.searchKey) {\r\n      this.route.queryParams.subscribe(params => {\r\n        const searchParams = params[this.route.options.searchKey as string];\r\n        if (searchParams) {\r\n          this.component.setTerm(searchParams);\r\n          this.ref.detectChanges();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatRadioModule,\r\n  MatFormFieldModule,\r\n  MatInputModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoSearchSelectorModule } from '../search-selector/search-selector.module';\r\nimport { IgoSearchSettingsModule } from '../search-settings/search-settings.module';\r\nimport { SearchBarComponent } from './search-bar.component';\r\nimport { SearchUrlParamDirective } from './search-url-param.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    IgoLanguageModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  exports: [\r\n    SearchBarComponent,\r\n  ],\r\n  declarations: [\r\n    SearchBarComponent,\r\n    SearchUrlParamDirective\r\n  ]\r\n})\r\nexport class IgoSearchBarModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ContentChild,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  TemplateRef,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { Observable, EMPTY, timer } from 'rxjs';\r\nimport { debounce, map } from 'rxjs/operators';\r\n\r\nimport { EntityStore, EntityStoreWatcher } from '@igo2/common';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\nimport { SearchSource } from '../shared/sources/source';\r\n\r\nexport enum SearchResultMode {\r\n  Grouped = 'grouped',\r\n  Flat = 'flat'\r\n}\r\n\r\n/**\r\n * List of search results with focus and selection capabilities.\r\n * This component is dumb and only emits events.\r\n */\r\n@Component({\r\n  selector: 'igo-search-results',\r\n  templateUrl: './search-results.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Reference to the SearchResultMode enum\r\n   * @internal\r\n   */\r\n  public searchResultMode = SearchResultMode;\r\n\r\n  /**\r\n   * Search results store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<SearchResult>;\r\n\r\n  /**\r\n   * Search results store\r\n   */\r\n  @Input() store: EntityStore<SearchResult>;\r\n\r\n  /**\r\n   * Search results display mode\r\n   */\r\n  @Input() mode: SearchResultMode = SearchResultMode.Grouped;\r\n\r\n  /**\r\n   * Event emitted when a result is focused\r\n   */\r\n  @Output() resultFocus = new EventEmitter<SearchResult>();\r\n\r\n  /**\r\n   * Event emitted when a result is selected\r\n   */\r\n  @Output() resultSelect = new EventEmitter<SearchResult>();\r\n\r\n  @ContentChild('igoSearchItemToolbar') templateSearchToolbar: TemplateRef<any>;\r\n\r\n  get results$(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    if (this._results$ === undefined) {\r\n      this._results$ = this.liftResults();\r\n    }\r\n    return this._results$;\r\n  }\r\n  private _results$: Observable<\r\n    {source: SearchSource; results: SearchResult[]}[]\r\n  >;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Bind the search results store to the watcher\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n  }\r\n\r\n  /**\r\n   * Unbind the search results store from the watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * When a result is focused, update it's state in the store and emit\r\n   * an event.\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultFocus(result: SearchResult) {\r\n    this.store.state.update(result, {focused: true}, true);\r\n    this.resultFocus.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Compute a group title\r\n   * @param group Search results group\r\n   * @returns Group title\r\n   * @internal\r\n   */\r\n  computeGroupTitle(group: {source: SearchSource; results: SearchResult[]}): string {\r\n    const parts = [group.source.title];\r\n    const count = group.results.length;\r\n    if (count > 1) {\r\n      parts.push(`(${count})`);\r\n    }\r\n    return parts.join(' ');\r\n  }\r\n\r\n  /**\r\n   * When a result is selected, update it's state in the store and emit\r\n   * an event. A selected result is also considered focused\r\n   * @param result Search result\r\n   * @internal\r\n   */\r\n  onResultSelect(result: SearchResult) {\r\n    this.store.state.update(result, {focused: true, selected: true}, true);\r\n    this.resultSelect.emit(result);\r\n  }\r\n\r\n  /**\r\n   * Return an observable of the search results, grouped by search source\r\n   * @returns Observable of grouped search results\r\n   * @internal\r\n   */\r\n  private liftResults(): Observable<{source: SearchSource; results: SearchResult[]}[]> {\r\n    return this.store.view.all$().pipe(\r\n      debounce((results: SearchResult[]) => {\r\n        return results.length === 0 ? EMPTY : timer(200);\r\n      }),\r\n      map((results: SearchResult[]) => {\r\n        return this.groupResults(results.sort(this.sortByOrder));\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sort the results by display order.\r\n   * @param r1 First result\r\n   * @param r2 Second result\r\n   */\r\n  private sortByOrder(r1: SearchResult, r2: SearchResult) {\r\n    return r1.source.displayOrder - r2.source.displayOrder;\r\n  }\r\n\r\n  /**\r\n   * Group results by search source\r\n   * @param results Search results from all sources\r\n   * @returns Search results grouped by source\r\n   */\r\n  private groupResults(results: SearchResult[]): {source: SearchSource; results: SearchResult[]}[] {\r\n    const grouped = new Map<SearchSource, SearchResult[]>();\r\n    results.forEach((result: SearchResult) => {\r\n      const source = result.source;\r\n      let sourceResults = grouped.get(source);\r\n      if (sourceResults === undefined) {\r\n        sourceResults = [];\r\n        grouped.set(source, sourceResults);\r\n      }\r\n      sourceResults.push(result);\r\n    });\r\n\r\n    return Array.from(grouped.keys()).map((source: SearchSource) => {\r\n      return {source, results: grouped.get(source)};\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport {\r\n  getEntityTitle,\r\n  getEntityTitleHtml,\r\n  getEntityIcon\r\n} from '@igo2/common';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\n\r\n/**\r\n * Search results list item\r\n */\r\n@Component({\r\n  selector: 'igo-search-results-item',\r\n  templateUrl: './search-results-item.component.html',\r\n  styleUrls: ['./search-results-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultsItemComponent {\r\n\r\n  /**\r\n   * Search result item\r\n   */\r\n  @Input() result: SearchResult;\r\n\r\n  /**\r\n   * Search result title\r\n   * @internal\r\n   */\r\n  get title(): string {\r\n    return getEntityTitle(this.result);\r\n  }\r\n\r\n  /**\r\n   * Search result HTML title\r\n   * @internal\r\n   */\r\n  get titleHtml(): string {\r\n    return getEntityTitleHtml(this.result);\r\n  }\r\n\r\n  /**\r\n   * Search result icon\r\n   * @internal\r\n   */\r\n  get icon(): string {\r\n    return getEntityIcon(this.result);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\n\r\nimport { SearchResult } from '../shared/search.interfaces';\r\nimport { IgoMap } from '../../map/shared/map';\r\nimport { LayerOptions } from '../../layer/shared/layers/layer.interface';\r\nimport { LayerService } from '../../layer/shared/layer.service';\r\nimport { LAYER } from '../../layer/shared/layer.enums';\r\n\r\n@Component({\r\n  selector: 'igo-search-add-button',\r\n  templateUrl: './search-results-add-button.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchResultAddButtonComponent implements OnInit {\r\n\r\n  @Input() layer: SearchResult;\r\n\r\n  /**\r\n   * Whether the layer is already added to the map\r\n   */\r\n  @Input() added: boolean;\r\n\r\n  /**\r\n   * The map to add the search result layer to\r\n   */\r\n  @Input() map: IgoMap;\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  constructor(private layerService: LayerService) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.layer.meta.dataType === 'Layer') {\r\n      this.added = this.map.layers.findIndex((lay) => lay.id === this.layer.data.sourceOptions.id) !== -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On toggle button click, emit the added change event\r\n   * @internal\r\n   */\r\n  onToggleClick() {\r\n    this.added ? this.remove() : this.add();\r\n  }\r\n\r\n  private add() {\r\n    this.added = true;\r\n    this.addLayerToMap();\r\n  }\r\n\r\n  private remove() {\r\n    this.added = false;\r\n    this.removeLayerFromMap();\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = true\r\n   */\r\n  private addLayerToMap() {\r\n    if (this.map === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (this.layer.meta.dataType !== LAYER) {\r\n      return undefined;\r\n    }\r\n\r\n    const layerOptions = (this.layer as SearchResult<LayerOptions>).data;\r\n    this.layerService\r\n      .createAsyncLayer(layerOptions)\r\n      .subscribe(layer => this.map.addLayer(layer));\r\n  }\r\n\r\n  /**\r\n   * Emit added change event with added = false\r\n   */\r\n  private removeLayerFromMap() {\r\n    if (this.map === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (this.layer.meta.dataType !== LAYER) {\r\n      return undefined;\r\n    }\r\n\r\n    const oLayer = this.map.getLayerById(this.layer.data.sourceOptions.id);\r\n    this.map.removeLayer(oLayer);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatTooltipModule,\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatButtonModule\r\n} from '@angular/material';\r\n\r\nimport {\r\n  IgoCollapsibleModule,\r\n  IgoListModule\r\n} from '@igo2/common';\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoMetadataModule } from './../../metadata/metadata.module';\r\nimport { SearchResultsComponent } from './search-results.component';\r\nimport { SearchResultsItemComponent } from './search-results-item.component';\r\nimport { SearchResultAddButtonComponent } from './search-results-add-button.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatButtonModule,\r\n    IgoCollapsibleModule,\r\n    IgoListModule,\r\n    IgoLanguageModule,\r\n    IgoMetadataModule,\r\n  ],\r\n  exports: [\r\n    SearchResultsComponent,\r\n    SearchResultAddButtonComponent\r\n  ],\r\n  declarations: [\r\n    SearchResultsComponent,\r\n    SearchResultsItemComponent,\r\n    SearchResultAddButtonComponent\r\n  ]\r\n})\r\nexport class IgoSearchResultsModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { provideSearchSourceService } from './shared/search-source-service.providers';\r\nimport { provideDefaultIChercheSearchResultFormatter } from './shared/sources/icherche.providers';\r\nimport { provideDefaultCoordinatesSearchResultFormatter } from './shared/sources/coordinates.providers';\r\nimport { provideILayerSearchResultFormatter } from './shared';\r\n\r\nimport { IgoSearchBarModule } from './search-bar/search-bar.module';\r\nimport { IgoSearchSelectorModule } from './search-selector/search-selector.module';\r\nimport { IgoSearchResultsModule } from './search-results/search-results.module';\r\nimport { IgoSearchSettingsModule } from './search-settings/search-settings.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  exports: [\r\n    IgoSearchBarModule,\r\n    IgoSearchSelectorModule,\r\n    IgoSearchResultsModule,\r\n    IgoSearchSettingsModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoSearchModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoSearchModule,\r\n      providers: [\r\n        provideSearchSourceService(),\r\n        provideDefaultIChercheSearchResultFormatter(),\r\n        provideDefaultCoordinatesSearchResultFormatter(),\r\n        provideILayerSearchResultFormatter()\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { FlexibleState, getEntityTitle } from '@igo2/common';\r\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\r\nimport { Feature } from '../feature/shared/feature.interfaces';\r\nimport { FeatureMotion } from '../feature/shared/feature.enums';\r\nimport { moveToOlFeatures } from '../feature/shared/feature.utils';\r\nimport { IgoMap } from '../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-toast',\r\n  templateUrl: './toast.component.html',\r\n  styleUrls: ['./toast.component.scss']\r\n})\r\nexport class ToastComponent {\r\n  static SWIPE_ACTION = {\r\n    UP: 'swipeup',\r\n    DOWN: 'swipedown'\r\n  };\r\n  private format = new olFormatGeoJSON();\r\n\r\n  @Input()\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n  set expanded(value: boolean) {\r\n    this.state = value ? 'expanded' : 'collapsed';\r\n    this._expanded = value;\r\n  }\r\n  private _expanded: boolean;\r\n\r\n  @Input()\r\n  get map(): IgoMap {\r\n    return this._map;\r\n  }\r\n  set map(value: IgoMap) {\r\n    this._map = value;\r\n  }\r\n  private _map: IgoMap;\r\n\r\n  @Input()\r\n  get feature(): Feature {\r\n    return this._feature;\r\n  }\r\n  set feature(value: Feature) {\r\n    this._feature = value;\r\n  }\r\n  private _feature: Feature;\r\n\r\n  @Output() opened = new EventEmitter<boolean>();\r\n\r\n  public state: FlexibleState;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return getEntityTitle(this.feature); }\r\n\r\n  constructor() {}\r\n\r\n  toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.opened.emit(this.expanded);\r\n  }\r\n\r\n  zoomToFeatureExtent() {\r\n    if (this.feature.geometry) {\r\n      const olFeature = this.format.readFeature(this.feature, {\r\n        dataProjection: this.feature.projection,\r\n        featureProjection: this.map.projection\r\n      });\r\n      moveToOlFeatures(this.map, [olFeature], FeatureMotion.Zoom);\r\n    }\r\n  }\r\n\r\n  swipe(action: string) {\r\n    if (action === ToastComponent.SWIPE_ACTION.UP) {\r\n      if (!this.expanded) {\r\n        this.toggle();\r\n      }\r\n    } else if (action === ToastComponent.SWIPE_ACTION.DOWN) {\r\n      if (this.expanded) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule, MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoPanelModule, IgoFlexibleModule } from '@igo2/common';\r\n\r\nimport { IgoFeatureModule } from '../feature/feature.module';\r\nimport { ToastComponent } from './toast.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    IgoPanelModule,\r\n    IgoFlexibleModule,\r\n    IgoFeatureModule\r\n  ],\r\n  exports: [ToastComponent],\r\n  declarations: [ToastComponent]\r\n})\r\nexport class IgoToastModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoToastModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\nimport { OnUpdateInputs, WidgetComponent } from '@igo2/common';\r\n\r\nimport { Layer } from '../../../layer/shared/layers/layer';\r\nimport { IgoMap } from '../../../map/shared/map';\r\n\r\n@Component({\r\n  selector: 'igo-ogc-filter',\r\n  templateUrl: './ogc-filter.component.html',\r\n  styleUrls: ['./ogc-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OgcFilterComponent implements OnUpdateInputs, WidgetComponent {\r\n\r\n  @Input() layer: Layer;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  /**\r\n   * Event emitted on complete\r\n   */\r\n  @Output() complete = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted on cancel\r\n   */\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Implemented as part of OnUpdateInputs\r\n   */\r\n  onUpdateInputs() {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * On close, emit the cancel event\r\n   */\r\n  onClose() {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nimport { Widget, WidgetService } from '@igo2/common';\r\n\r\nimport { OgcFilterComponent } from './ogc-filter/ogc-filter.component';\r\n\r\nexport const OgcFilterWidget = new InjectionToken<Widget>('OgcFilterWidget');\r\n\r\nexport function ogcFilterWidgetFactory(widgetService: WidgetService): Widget {\r\n  return widgetService.create(OgcFilterComponent);\r\n}\r\n\r\nexport function provideOgcFilterWidget() {\r\n  return {\r\n    provide: OgcFilterWidget,\r\n    useFactory: ogcFilterWidgetFactory,\r\n    deps: [WidgetService]\r\n  };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoFilterModule } from '../../../filter/filter.module';\r\nimport { OgcFilterComponent } from './ogc-filter.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule,\r\n    IgoFilterModule\r\n  ],\r\n  exports: [OgcFilterComponent],\r\n  declarations: [OgcFilterComponent],\r\n  entryComponents: [OgcFilterComponent]\r\n})\r\nexport class IgoOgcFilterModule {}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WfsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: VectorLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WfsWorkspace extends Workspace {\r\n\r\n  get layer(): VectorLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WfsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  ActionStore,\r\n  EntityTableTemplate\r\n} from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { SourceFieldsOptionsParams } from '../../datasource';\r\n\r\nimport { WfsWorkspace } from './wfs-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WfsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: VectorLayer, map: IgoMap): WfsWorkspace {\r\n    return new WfsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      entityStore: this.createFeatureStore(layer, map),\r\n      actionStore: new ActionStore([]),\r\n      meta: {\r\n        tableTemplate: this.createTableTemplate(layer)\r\n      }\r\n    });\r\n  }\r\n\r\n  private createFeatureStore(layer: VectorLayer, map: IgoMap): FeatureStore {\r\n    const store = new FeatureStore([], {map});\r\n    store.bindLayer(layer);\r\n\r\n    const loadingStrategy = new FeatureStoreLoadingLayerStrategy({});\r\n    const selectionStrategy = new FeatureStoreSelectionStrategy({\r\n      map,\r\n      hitTolerance: 5\r\n    });\r\n    store.addStrategy(loadingStrategy, true);\r\n    store.addStrategy(selectionStrategy, true);\r\n\r\n    return store;\r\n  }\r\n\r\n  private createTableTemplate(layer: VectorLayer): EntityTableTemplate {\r\n    const fields = layer.dataSource.options.sourceFields || [];\r\n    const columns = fields.map((field: SourceFieldsOptionsParams) => {\r\n      return {\r\n        name: `properties.${field.name}`,\r\n        title: field.alias ? field.alias : field.name\r\n      };\r\n    });\r\n\r\n    return {\r\n      selection: true,\r\n      sort: true,\r\n      columns\r\n    };\r\n  }\r\n\r\n}\r\n","import {\r\n  Workspace,\r\n  WorkspaceOptions\r\n} from '@igo2/common';\r\n\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nexport interface WmsWorkspaceOptions extends WorkspaceOptions {\r\n  layer: ImageLayer;\r\n  map: IgoMap;\r\n}\r\n\r\nexport class WmsWorkspace extends Workspace {\r\n\r\n  get layer(): ImageLayer { return this.options.layer; }\r\n\r\n  get map(): IgoMap { return this.options.map; }\r\n\r\n  constructor(protected options: WmsWorkspaceOptions) {\r\n    super(options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ActionStore } from '@igo2/common';\r\n\r\nimport {\r\n  FeatureStore,\r\n  FeatureStoreLoadingLayerStrategy,\r\n  FeatureStoreSelectionStrategy\r\n} from '../../feature';\r\nimport { ImageLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\n\r\nimport { WmsWorkspace } from './wms-workspace';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WmsWorkspaceService {\r\n\r\n  constructor() {}\r\n\r\n  createWorkspace(layer: ImageLayer, map: IgoMap): WmsWorkspace {\r\n    return new WmsWorkspace({\r\n      id: layer.id,\r\n      title: layer.title,\r\n      layer,\r\n      map,\r\n      actionStore: new ActionStore([])\r\n    });\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { Workspace, WorkspaceStore, WorkspaceSelectorComponent } from '@igo2/common';\r\n\r\nimport { Layer, ImageLayer, VectorLayer } from '../../layer';\r\nimport { IgoMap } from '../../map';\r\nimport { WFSDataSource, WMSDataSource } from '../../datasource';\r\nimport { OgcFilterableDataSourceOptions } from '../../filter';\r\n\r\nimport { WfsWorkspaceService } from '../shared/wfs-workspace.service';\r\nimport { WmsWorkspaceService } from '../shared/wms-workspace.service';\r\n\r\n@Directive({\r\n  selector: '[igoWorkspaceSelector]'\r\n})\r\nexport class WorkspaceSelectorDirective implements OnInit, OnDestroy {\r\n\r\n  private layers$$: Subscription;\r\n\r\n  @Input() map: IgoMap;\r\n\r\n  get workspaceStore(): WorkspaceStore {\r\n    return this.component.store;\r\n  }\r\n\r\n  constructor(\r\n    private component: WorkspaceSelectorComponent,\r\n    private wfsWorkspaceService: WfsWorkspaceService,\r\n    private wmsWorkspaceService: WmsWorkspaceService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.layers$$ = this.map.layers$\r\n      .pipe(debounceTime(50))\r\n      .subscribe((layers: Layer[]) =>\r\n        this.onLayersChange(layers)\r\n      );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.layers$$.unsubscribe();\r\n  }\r\n\r\n  private onLayersChange(layers: Layer[]) {\r\n    const editableLayers = layers.filter((layer: Layer) =>\r\n      this.layerIsEditable(layer)\r\n    );\r\n    const editableLayersIds = editableLayers.map((layer: Layer) => layer.id);\r\n\r\n    const workspacesToAdd = editableLayers\r\n      .map((layer: VectorLayer) => this.getOrCreateWorkspace(layer))\r\n      .filter((workspace: Workspace | undefined) => workspace !== undefined);\r\n\r\n    const workspacesToRemove = this.workspaceStore.all()\r\n      .filter((workspace: Workspace) => {\r\n        return editableLayersIds.indexOf(workspace.id) < 0;\r\n      });\r\n\r\n    if (workspacesToRemove.length > 0) {\r\n      workspacesToRemove.forEach((workspace: Workspace) => {\r\n        workspace.deactivate();\r\n      });\r\n      this.workspaceStore.state.updateMany(workspacesToRemove, {active: false, selected: false});\r\n      this.workspaceStore.deleteMany(workspacesToRemove);\r\n    }\r\n\r\n    if (workspacesToAdd.length > 0) {\r\n      this.workspaceStore.insertMany(workspacesToAdd);\r\n    }\r\n  }\r\n\r\n  private getOrCreateWorkspace(layer: VectorLayer | ImageLayer): Workspace | undefined {\r\n    const workspace = this.workspaceStore.get(layer.id);\r\n    if (workspace !== undefined) {\r\n      return;\r\n    }\r\n    if (layer.dataSource instanceof WFSDataSource) {\r\n      return this.wfsWorkspaceService.createWorkspace(layer as VectorLayer, this.map);\r\n    } else if (layer.dataSource instanceof WMSDataSource) {\r\n      return this.wmsWorkspaceService.createWorkspace(layer as ImageLayer, this.map);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  private layerIsEditable(layer: Layer): boolean {\r\n    const dataSource = layer.dataSource;\r\n    if (dataSource instanceof WFSDataSource) {\r\n      return true;\r\n    }\r\n\r\n    if (dataSource instanceof WMSDataSource) {\r\n      const dataSourceOptions = (dataSource.options ||\r\n        {}) as OgcFilterableDataSourceOptions;\r\n      return (\r\n        dataSourceOptions.ogcFilters && dataSourceOptions.ogcFilters.enabled\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { WorkspaceSelectorDirective } from './workspace-selector.directive';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n   WorkspaceSelectorDirective\r\n  ],\r\n  declarations: [\r\n    WorkspaceSelectorDirective\r\n  ]\r\n})\r\nexport class IgoWorkspaceSelectorModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IgoWidgetModule } from '@igo2/common';\r\n\r\nimport { provideOgcFilterWidget } from './widgets/widgets';\r\n\r\nimport { IgoOgcFilterModule } from './widgets/ogc-filter/ogc-filter.module';\r\nimport { IgoWorkspaceSelectorModule } from './workspace-selector/workspace-selector.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetModule,\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  exports: [\r\n    IgoWorkspaceSelectorModule,\r\n    IgoOgcFilterModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    provideOgcFilterWidget()\r\n  ]\r\n})\r\nexport class IgoGeoWorkspaceModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: []\r\n})\r\nexport class IgoWktModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoWktModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { IgoCatalogModule } from './catalog/catalog.module';\r\nimport { IgoDataSourceModule } from './datasource/datasource.module';\r\nimport { IgoDownloadModule } from './download/download.module';\r\nimport { IgoFeatureModule } from './feature/feature.module';\r\nimport { IgoFilterModule } from './filter/filter.module';\r\nimport { IgoGeometryModule } from './geometry/geometry.module';\r\nimport { IgoImportExportModule } from './import-export/import-export.module';\r\nimport { IgoLayerModule } from './layer/layer.module';\r\nimport { IgoMapModule } from './map/map.module';\r\nimport { IgoMeasureModule } from './measure/measure.module';\r\nimport { IgoMetadataModule } from './metadata/metadata.module';\r\nimport { IgoOverlayModule } from './overlay/overlay.module';\r\nimport { IgoPrintModule } from './print/print.module';\r\nimport { IgoQueryModule } from './query/query.module';\r\nimport { IgoRoutingModule } from './routing/routing.module';\r\nimport { IgoSearchModule } from './search/search.module';\r\nimport { IgoToastModule } from './toast/toast.module';\r\nimport { IgoGeoWorkspaceModule } from './workspace/workspace.module';\r\nimport { IgoWktModule } from './wkt/wkt.module';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: [\r\n    IgoCatalogModule,\r\n    IgoDataSourceModule,\r\n    IgoDownloadModule,\r\n    IgoFeatureModule,\r\n    IgoFilterModule,\r\n    IgoGeometryModule,\r\n    IgoImportExportModule,\r\n    IgoLayerModule,\r\n    IgoMapModule,\r\n    IgoMeasureModule,\r\n    IgoMetadataModule,\r\n    IgoOverlayModule,\r\n    IgoPrintModule,\r\n    IgoQueryModule,\r\n    IgoRoutingModule,\r\n    IgoSearchModule,\r\n    IgoToastModule,\r\n    IgoGeoWorkspaceModule,\r\n    IgoWktModule\r\n  ]\r\n})\r\nexport class IgoGeoModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoGeoModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","export enum RoutingFormat {\r\n  GeoJSON,\r\n  JSON\r\n}\r\nexport enum SourceRoutingType {\r\n  Route = 'Route',\r\n  Trip = 'Trip'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { uuid } from '@igo2/utils';\r\nimport { ConfigService, Message } from '@igo2/core';\r\n\r\nimport { Routing } from '../shared/routing.interface';\r\nimport { RoutingFormat, SourceRoutingType } from '../shared/routing.enum';\r\n\r\nimport { RoutingSource } from './routing-source';\r\nimport { RoutingSourceOptions } from './routing-source.interface';\r\n\r\n@Injectable()\r\nexport class OsrmRoutingSource extends RoutingSource {\r\n  get enabled(): boolean {\r\n    return this.options.enabled !== false;\r\n  }\r\n  set enabled(value: boolean) {\r\n    this.options.enabled = value;\r\n  }\r\n  static _name = 'OSRM QuÃ©bec';\r\n  private routingUrl =\r\n    'https://geoegl.msp.gouv.qc.ca/services/itineraire/route/v1/driving/';\r\n  private options: RoutingSourceOptions;\r\n\r\n  constructor(private http: HttpClient, private config: ConfigService) {\r\n    super();\r\n    this.options = this.config.getConfig('routingSources.osrm') || {};\r\n    this.routingUrl = this.options.url || this.routingUrl;\r\n  }\r\n\r\n  getName(): string {\r\n    return OsrmRoutingSource._name;\r\n  }\r\n\r\n  route(coordinates: [number, number][]): Observable<Routing[]> {\r\n    const routingParams = this.getRouteParams();\r\n    return this.http\r\n      .get<JSON[]>(this.routingUrl + coordinates.join(';'), {\r\n        params: routingParams\r\n      })\r\n      .pipe(map(res => this.extractRoutesData(res)));\r\n  }\r\n\r\n  private extractRoutesData(response): Routing[] {\r\n    const routeResponse = [];\r\n    response.routes.forEach(route => {\r\n      routeResponse.push(this.formatRoute(route, response.waypoints));\r\n    });\r\n    return routeResponse;\r\n  }\r\n\r\n  private getRouteParams(): HttpParams {\r\n    return new HttpParams({\r\n      fromObject: {\r\n        overview: 'full',\r\n        steps: 'true',\r\n        geometries: 'geojson',\r\n        alternatives: 'true'\r\n      }\r\n    });\r\n  }\r\n\r\n  private formatRoute(roadNetworkRoute: any, waypoints: any): Routing {\r\n    const stepsUI = [];\r\n    roadNetworkRoute.legs.forEach(leg => {\r\n      leg.steps.forEach(step => {\r\n        stepsUI.push(step);\r\n      });\r\n    });\r\n    return {\r\n      id: uuid(),\r\n      title: roadNetworkRoute.legs[0].summary,\r\n      source: OsrmRoutingSource._name,\r\n      sourceType: SourceRoutingType.Route,\r\n      order: 1,\r\n      format: RoutingFormat.GeoJSON,\r\n      icon: 'directions',\r\n      projection: 'EPSG:4326',\r\n      waypoints,\r\n      distance: roadNetworkRoute.distance,\r\n      duration: roadNetworkRoute.duration,\r\n      geometry: roadNetworkRoute.geometry,\r\n      legs: roadNetworkRoute.legs,\r\n      steps: stepsUI,\r\n      weight: roadNetworkRoute.weight,\r\n      weight_name: roadNetworkRoute.weight_name\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\n\r\nimport { RoutingSource } from './routing-source';\r\nimport { OsrmRoutingSource } from './osrm-routing-source';\r\n\r\nexport function osrmRoutingSourcesFactory(\r\n  http: HttpClient,\r\n  config: ConfigService\r\n) {\r\n  return new OsrmRoutingSource(http, config);\r\n}\r\n\r\nexport function provideOsrmRoutingSource() {\r\n  return {\r\n    provide: RoutingSource,\r\n    useFactory: osrmRoutingSourcesFactory,\r\n    multi: true,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n"]}