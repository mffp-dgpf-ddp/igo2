import { EventEmitter, OnInit, AfterViewInit, OnDestroy } from '@angular/core';
import { FormGroup, FormBuilder, FormArray } from '@angular/forms';
import * as olstyle from 'ol/style';
import { Message, LanguageService, MessageService, RouteService } from '@igo2/core';
import { IgoMap } from '../../map/shared/map';
import { SearchService } from '../../search/shared/search.service';
import { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';
import { Routing } from '../shared/routing.interface';
import { RoutingService } from '../shared/routing.service';
import { RoutingFormService } from './routing-form.service';
import { QueryService } from '../../query/shared/query.service';
export declare class RoutingFormComponent implements OnInit, AfterViewInit, OnDestroy {
    private formBuilder;
    private routingService;
    private languageService;
    private messageService;
    private searchService;
    private queryService;
    private routingFormService;
    private route;
    private readonly invalidKeys;
    stopsForm: FormGroup;
    projection: string;
    currentStopIndex: number;
    private routesQueries$$;
    private stream$;
    RoutingOverlayMarkerStyle: olstyle.Style;
    RoutingOverlayStyle: olstyle.Style;
    routingStopsOverlayDataSource: FeatureDataSource;
    routingRoutesOverlayDataSource: FeatureDataSource;
    routesResults: Routing[] | Message[];
    activeRoute: Routing;
    private selectRoute;
    private focusOnStop;
    private focusKey;
    initialStopsCoords: any;
    private browserLanguage;
    term: string;
    private _term;
    debounce: number;
    private _debounce;
    length: number;
    private _length;
    map: IgoMap;
    private _map;
    submit: EventEmitter<any>;
    constructor(formBuilder: FormBuilder, routingService: RoutingService, languageService: LanguageService, messageService: MessageService, searchService: SearchService, queryService: QueryService, routingFormService: RoutingFormService, route: RouteService);
    changeRoute(selectedRoute: Routing): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    handleLocationProposals(coordinates: [number, number], stopIndex: number): void;
    routingText(index: number): string;
    raiseStop(index: number): void;
    lowerStop(index: number): void;
    moveStop(index: any, diff: any): void;
    readonly stops: FormArray;
    getStopsCoordinates(): [number, number][];
    addStop(): void;
    createStop(routingPos?: string): FormGroup;
    removeStop(index: number): void;
    resetForm(): void;
    onFormChange(): void;
    formatStep(step: any, cnt: any): {
        instruction: any;
        image: string;
        cssClass: string;
    };
    formatInstruction(type: any, modifier: any, route: any, direction: any, stepPosition: any, exit: any, lastStep?: boolean): {
        instruction: any;
        image: string;
        cssClass: string;
    };
    translateModifier(modifier: any): any;
    translateBearing(bearing: any): any;
    formatDistance(distance: any): string;
    formatDuration(duration: number, summary?: boolean): string;
    showSegment(step: any, zoomToExtent?: boolean): void;
    showRouteSegmentGeometry(coordinates: any, zoomToExtent?: boolean): void;
    zoomRoute(): void;
    showRouteGeometry(moveToExtent?: boolean): void;
    getRoutes(stopsArrayCoordinates: any, moveToExtent?: boolean): void;
    private unlistenSingleClick;
    private unsubscribeRoutesQueries;
    copyLinkToClipboard(): void;
    copyDirectionsToClipboard(): void;
    private handleTermChanged;
    setTerm(term: string): void;
    private keyIsValid;
    keyup(i: any, event: KeyboardEvent): void;
    clearStop(stopIndex: any): void;
    chooseProposal(proposal: any, i: any): void;
    focus(i: any): void;
    private handleMapClick;
    geolocateStop(index: number): void;
    addStopOverlay(coordinates: [number, number], index: number): void;
    getStopOverlayID(index: number): string;
    private deleteRoutingOverlaybyID;
    private getUrl;
}
