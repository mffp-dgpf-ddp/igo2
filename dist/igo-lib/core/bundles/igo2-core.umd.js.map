{"version":3,"file":"igo2-core.umd.js.map","sources":["ng://@igo2/core/lib/activity/activity.service.ts","ng://@igo2/core/lib/activity/activity.interceptor.ts","ng://@igo2/core/lib/activity/activity.module.ts","ng://@igo2/core/lib/config/config.service.ts","ng://@igo2/core/lib/config/config.provider.ts","ng://@igo2/core/lib/config/config.module.ts","ng://@igo2/core/lib/language/shared/language.loader.ts","ng://@igo2/core/lib/language/shared/language.provider.ts","ng://@igo2/core/lib/language/shared/missing-translation.guard.ts","ng://@igo2/core/lib/language/language.module.ts","ng://@igo2/core/lib/message/message-center/message-center.component.ts","ng://@igo2/core/lib/message/message.module.ts","ng://@igo2/core/lib/message/shared/message.enum.ts","ng://@igo2/core/lib/message/shared/message.service.ts","ng://@igo2/core/lib/language/shared/language.service.ts","ng://@igo2/core/lib/request/error.interceptor.ts","ng://@igo2/core/lib/request/error.module.ts","ng://@igo2/core/lib/core.module.ts","ng://@igo2/core/lib/request/logging.interceptor.ts","ng://@igo2/core/lib/request/logging.module.ts","ng://@igo2/core/lib/route/route.service.ts","ng://@igo2/core/lib/analytics/shared/analytics.service.ts","ng://@igo2/core/lib/media/media.enum.ts","ng://@igo2/core/lib/media/media.service.ts","ng://@igo2/core/lib/network/network.service.ts","ng://@igo2/core/lib/network/network.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityService {\r\n  public counter$ = new BehaviorSubject<number>(0);\r\n\r\n  private ids: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  register(): string {\r\n    const id = uuid();\r\n    this.ids.push(id);\r\n    this.counter$.next(this.ids.length);\r\n\r\n    return id;\r\n  }\r\n\r\n  unregister(id: string) {\r\n    const index = this.ids.indexOf(id);\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n    this.ids.splice(index, 1);\r\n\r\n    this.counter$.next(this.ids.length);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ActivityService } from './activity.service';\r\n\r\n@Injectable()\r\nexport class ActivityInterceptor implements HttpInterceptor {\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const activity = req.headers.get('activityInterceptor');\r\n    if (activity) {\r\n      const actReq = req.clone({\r\n        headers: req.headers.delete('activityInterceptor')\r\n      });\r\n      if (activity === 'false') {\r\n        return next.handle(actReq);\r\n      }\r\n    }\r\n\r\n    const id = this.activityService.register();\r\n\r\n    return next.handle(req).pipe(\r\n      finalize(() => {\r\n        this.activityService.unregister(id);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ActivityInterceptor } from './activity.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoActivityModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoActivityModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: ActivityInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { ConfigOptions } from './config.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigService {\r\n\r\n  private config: object = {};\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  /**\r\n   * Use to get the data found in config file\r\n   */\r\n  public getConfig(key: string): any {\r\n    return ObjectUtils.resolve(this.config, key);\r\n  }\r\n\r\n  /**\r\n   * This method loads \"[path]\" to get all config's variables\r\n   */\r\n  public load(options: ConfigOptions) {\r\n    const baseConfig = options.default || {};\r\n    if (!options.path) {\r\n      this.config = baseConfig;\r\n      return true;\r\n    }\r\n\r\n    const http = this.injector.get(HttpClient);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      http\r\n        .get(options.path)\r\n        .pipe(\r\n          catchError(\r\n            (error: any): any => {\r\n              console.log(\r\n                `Configuration file ${options.path} could not be read`\r\n              );\r\n              resolve(true);\r\n              return throwError(error.error || 'Server error');\r\n            }\r\n          )\r\n        )\r\n        .subscribe(configResponse => {\r\n          this.config = ObjectUtils.mergeDeep(baseConfig, configResponse);\r\n          resolve(true);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import { APP_INITIALIZER, InjectionToken } from '@angular/core';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { ConfigOptions } from './config.interface';\r\n\r\nexport let CONFIG_OPTIONS = new InjectionToken<ConfigOptions>('configOptions');\r\n\r\nexport function provideConfigOptions(options: ConfigOptions) {\r\n  return {\r\n    provide: CONFIG_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\nexport function configFactory(\r\n  configService: ConfigService,\r\n  options: ConfigOptions\r\n) {\r\n  return () => configService.load(options);\r\n}\r\n\r\nexport function provideConfigLoader() {\r\n  return {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: configFactory,\r\n    multi: true,\r\n    deps: [ConfigService, CONFIG_OPTIONS]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { provideConfigOptions, provideConfigLoader } from './config.provider';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoConfigModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoConfigModule,\r\n      providers: [provideConfigOptions({}), provideConfigLoader()]\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { of, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\ndeclare function require(arg: string): any;\r\n\r\nexport class LanguageLoader implements TranslateLoader {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private prefix?: string,\r\n    private suffix: string = '.json',\r\n    private config?: ConfigService\r\n  ) {}\r\n\r\n  public getTranslation(lang: string): any {\r\n    const translation = require(`../locale/${lang}.json`);\r\n    const igoLocale$ = of(translation);\r\n\r\n    if (this.config && !this.prefix) {\r\n      this.prefix = this.config.getConfig('language.prefix');\r\n    }\r\n\r\n    if (!this.prefix) {\r\n      return igoLocale$;\r\n    }\r\n\r\n    const appLocale$ = this.http.get(`${this.prefix}${lang}${this.suffix}`);\r\n\r\n    const locale$ = combineLatest(igoLocale$, appLocale$);\r\n\r\n    return locale$.pipe(\r\n      map(translations => {\r\n        return Object.assign(translations[0], translations[1]);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\nimport { LanguageLoader } from './language.loader';\r\n\r\nexport function defaultLanguageLoader(\r\n  http: HttpClient,\r\n  config?: ConfigService\r\n) {\r\n  return new LanguageLoader(http, undefined, undefined, config);\r\n}\r\n\r\nexport function provideLanguageLoader(loader?) {\r\n  return {\r\n    provide: TranslateLoader,\r\n    useFactory: loader || defaultLanguageLoader,\r\n    deps: [HttpClient]\r\n  };\r\n}\r\n\r\nexport function provideDefaultLanguageLoader(loader?) {\r\n  return {\r\n    provide: TranslateLoader,\r\n    useFactory: loader || defaultLanguageLoader,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import {\r\n  MissingTranslationHandler,\r\n  MissingTranslationHandlerParams\r\n} from '@ngx-translate/core';\r\n\r\nexport class IgoMissingTranslationHandler implements MissingTranslationHandler {\r\n  handle(params: MissingTranslationHandlerParams) {\r\n    if (!params.translateService.langs.length) {\r\n      const error =\r\n        'Translations are not yet loaded. \\\r\n         Check that the LanguageService is injected.';\r\n      throw new Error(error);\r\n    }\r\n    throw new Error(`The Key \"${params.key}\" is missing in locale file.`);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport {\r\n  TranslateModule,\r\n  MissingTranslationHandler\r\n} from '@ngx-translate/core';\r\n\r\nimport { provideDefaultLanguageLoader } from './shared/language.provider';\r\nimport { IgoMissingTranslationHandler } from './shared/missing-translation.guard';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TranslateModule.forRoot({\r\n      missingTranslationHandler: {\r\n        provide: MissingTranslationHandler,\r\n        useClass: IgoMissingTranslationHandler\r\n      }\r\n    })\r\n  ],\r\n  declarations: [],\r\n  exports: [TranslateModule]\r\n})\r\nexport class IgoLanguageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLanguageModule,\r\n      providers: [provideDefaultLanguageLoader()]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-message-center',\r\n  templateUrl: './message-center.component.html',\r\n  styleUrls: ['./message-center.component.scss']\r\n})\r\nexport class MessageCenterComponent {\r\n  static defaultOptions = {\r\n    timeOut: 5000,\r\n    hasCloseIcon: false,\r\n    showProgressBar: true,\r\n    pauseOnHover: true,\r\n    clickToClose: true,\r\n    maxLength: 100,\r\n    maxStack: 3,\r\n    preventDuplicates: true\r\n  };\r\n\r\n  @Input()\r\n  get options(): any {\r\n    return Object.assign(\r\n      {},\r\n      MessageCenterComponent.defaultOptions,\r\n      this._options\r\n    );\r\n  }\r\n  set options(value: any) {\r\n    this._options = value;\r\n  }\r\n  private _options: any = {};\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\n\r\nimport { MessageCenterComponent } from './message-center/message-center.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SimpleNotificationsModule.forRoot()],\r\n  declarations: [MessageCenterComponent],\r\n  exports: [MessageCenterComponent]\r\n})\r\nexport class IgoMessageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMessageModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","export enum MessageType {\r\n  ERROR = 'error',\r\n  ALERT = 'alert',\r\n  INFO = 'info',\r\n  SUCCESS = 'success'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Notification, NotificationsService, NotificationType} from 'angular2-notifications';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\nimport { Message, MessageOptions } from './message.interface';\r\nimport { MessageType } from './message.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  public messages$ = new BehaviorSubject<Message[]>([]);\r\n  private options: MessageOptions;\r\n\r\n  constructor(\r\n    private notificationService: NotificationsService,\r\n    private configService: ConfigService\r\n  ) {\r\n    this.options = this.configService.getConfig('message') || {};\r\n  }\r\n\r\n  showError(httpError: HttpErrorResponse) {\r\n    httpError.error.caught = true;\r\n    return this.error(httpError.error.message, httpError.error.title);\r\n  }\r\n\r\n  message(message: Message) {\r\n    this.messages$.next(this.messages$.value.concat([message]));\r\n\r\n    message.options = message.options || {};\r\n    message = this.handleTemplate(message);\r\n\r\n    let notification: Notification;\r\n    if (message.text) {\r\n      notification = this.notificationService.create(\r\n        message.title,\r\n        message.text,\r\n        (message.type as any) as NotificationType,\r\n        message.options\r\n      );\r\n    } else if (message.html) {\r\n      if (!message.icon) {\r\n        message.options.theClass = message.options.theClass\r\n          ? message.options.theClass + ' noIcon'\r\n          : 'noIcon';\r\n      }\r\n\r\n      notification = this.notificationService.html(\r\n        message.html,\r\n        (message.type as any) as NotificationType,\r\n        message.options\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (message.icon !== undefined) {\r\n      this.addIcon(notification, message.icon);\r\n    }\r\n\r\n    return notification;\r\n  }\r\n\r\n  success(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'check',\r\n      options,\r\n      type: MessageType.SUCCESS\r\n    });\r\n  }\r\n\r\n  error(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'error_outline',\r\n      options,\r\n      type: MessageType.ERROR\r\n    });\r\n  }\r\n\r\n  info(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'info_outline',\r\n      options,\r\n      type: MessageType.INFO\r\n    });\r\n  }\r\n\r\n  alert(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'access_alarm',\r\n      options,\r\n      type: MessageType.ALERT\r\n    });\r\n  }\r\n\r\n  remove(id?: string) {\r\n    this.notificationService.remove(id);\r\n  }\r\n\r\n  private addIcon(notification: Notification, icon: string) {\r\n    // There is no way to add an icon to a notification when reating\r\n    // it so we simply set it on the notification directly.\r\n    // See https://github.com/flauc/angular2-notifications/issues/165\r\n    notification.icon = `\r\n      <mat-icon class=\"material-icons mat-icon mat-list-avatar\" svgIcon=\"${icon}\">\r\n      </mat-icon>`;\r\n  }\r\n\r\n  private handleTemplate(message: Message): Message {\r\n    if (!this.options.template || message.html) {\r\n      return message;\r\n    }\r\n\r\n    let html = this.options.template;\r\n    html = html.replace('${text}', message.text);\r\n    html = html.replace('${title}', message.title);\r\n    html = html.replace('${icon}', message.icon);\r\n\r\n    message.html = html;\r\n    message.text = undefined;\r\n    message.title = undefined;\r\n    message.icon = undefined;\r\n    return message;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService {\r\n  constructor(public translate: TranslateService) {\r\n    const lang = this.getLanguage();\r\n    this.translate.setDefaultLang(lang);\r\n  }\r\n\r\n  public getLanguage(): string {\r\n    const browserLang = this.translate.getBrowserLang();\r\n    return browserLang.match(/en|fr/) ? browserLang : 'en';\r\n  }\r\n\r\n  public setLanguage(language: string) {\r\n    this.translate.use(language);\r\n    this.translate.reloadLang(language);\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n  HttpEvent,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../message/shared/message.service';\r\nimport { LanguageService } from '../language/shared/language.service';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  private httpError: HttpErrorResponse;\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n      catchError(error => this.handleError(error, req)),\r\n      finalize(() => this.handleCaughtError()),\r\n      finalize(() => this.handleUncaughtError())\r\n    );\r\n  }\r\n\r\n  private handleError(httpError: HttpErrorResponse, req: HttpRequest<any>) {\r\n    const msg = `${req.method} ${req.urlWithParams} ${httpError.status} (${\r\n      httpError.statusText\r\n    })`;\r\n\r\n    if (httpError instanceof HttpErrorResponse) {\r\n      const errorObj = httpError.error === 'object' ? httpError.error : {};\r\n      errorObj.message = httpError.error.message || httpError.statusText;\r\n      errorObj.caught = false;\r\n      console.error(msg, '\\n', errorObj.message, '\\n\\n', httpError);\r\n\r\n      this.httpError = new HttpErrorResponse({\r\n        error: errorObj,\r\n        headers: httpError.headers,\r\n        status: httpError.status,\r\n        statusText: httpError.statusText,\r\n        url: httpError.url\r\n      });\r\n    }\r\n\r\n    return throwError(this.httpError);\r\n  }\r\n\r\n  private handleCaughtError() {\r\n    if (this.httpError && this.httpError.error.toDisplay) {\r\n      this.httpError.error.caught = true;\r\n      this.messageService.error(\r\n        this.httpError.error.message,\r\n        this.httpError.error.title\r\n      );\r\n    }\r\n  }\r\n\r\n  private handleUncaughtError() {\r\n    if (this.httpError && !this.httpError.error.caught) {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.errors.uncaught.message');\r\n      const title = translate.instant('igo.core.errors.uncaught.title');\r\n      this.httpError.error.caught = true;\r\n      this.messageService.error(message, title);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ErrorInterceptor } from './error.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoErrorModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoErrorModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: ErrorInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material';\r\n\r\nimport { IgoActivityModule } from './activity/activity.module';\r\nimport { IgoConfigModule } from './config/config.module';\r\nimport { IgoLanguageModule } from './language/language.module';\r\nimport { IgoMessageModule } from './message/message.module';\r\nimport { IgoErrorModule } from './request/error.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    IgoActivityModule.forRoot(),\r\n    IgoConfigModule.forRoot(),\r\n    IgoErrorModule.forRoot(),\r\n    IgoLanguageModule.forRoot(),\r\n    IgoMessageModule.forRoot()\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n    IgoActivityModule,\r\n    IgoConfigModule,\r\n    IgoErrorModule,\r\n    IgoLanguageModule,\r\n    IgoMessageModule\r\n  ]\r\n})\r\nexport class IgoCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCoreModule,\r\n      providers: []\r\n    };\r\n  }\r\n\r\n  constructor(matIconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    matIconRegistry.addSvgIconSet(\r\n      domSanitizer.bypassSecurityTrustResourceUrl(\r\n        './assets/igo2/core/icons/mdi.svg'\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpRequest,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { tap, finalize } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class LoggingInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const started = Date.now();\r\n    let ok: string;\r\n\r\n    // extend server response observable with logging\r\n    return next.handle(req).pipe(\r\n      tap(\r\n        // Succeeds when there is a response; ignore other events\r\n        event => (ok = event instanceof HttpResponse ? 'succeeded' : ''),\r\n        // Operation failed; error is an HttpErrorResponse\r\n        error => (ok = 'failed')\r\n      ),\r\n      // Log when response observable either completes or errors\r\n      finalize(() => {\r\n        const elapsed = Date.now() - started;\r\n        const msg = `${req.method} \"${req.urlWithParams}\"\r\n             ${ok} in ${elapsed} ms.`;\r\n\r\n        console.log(msg);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { LoggingInterceptor } from './logging.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoLoggingModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLoggingModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: LoggingInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject, InjectionToken, Optional } from '@angular/core';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { RouteServiceOptions } from './route.interface';\r\n\r\nexport let ROUTE_SERVICE_OPTIONS = new InjectionToken<RouteServiceOptions>(\r\n  'routeServiceOptions'\r\n);\r\n\r\nexport function provideRouteServiceOptions(options: RouteServiceOptions) {\r\n  return {\r\n    provide: ROUTE_SERVICE_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RouteService {\r\n  public options: RouteServiceOptions;\r\n\r\n  constructor(\r\n    public route: ActivatedRoute,\r\n    @Inject(ROUTE_SERVICE_OPTIONS)\r\n    @Optional()\r\n    options: RouteServiceOptions\r\n  ) {\r\n    const defaultOptions = {\r\n      centerKey: 'center',\r\n      zoomKey: 'zoom',\r\n      projectionKey: 'projection',\r\n      contextKey: 'context',\r\n      searchKey: 'search',\r\n      visibleOnLayersKey: 'visiblelayers',\r\n      visibleOffLayersKey: 'invisiblelayers',\r\n      routingCoordKey: 'routing',\r\n      toolKey: 'tool',\r\n      llcKKey: 'llck',\r\n      llcAKey: 'llca',\r\n      llcVKey: 'llcv',\r\n      llcRKey: 'llcr'\r\n    };\r\n    this.options = Object.assign({}, defaultOptions, options);\r\n  }\r\n\r\n  get queryParams(): Observable<Params> {\r\n    return this.route.queryParams;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\nimport { AnalyticsOptions } from './analytics.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AnalyticsService {\r\n  private options: AnalyticsOptions;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.options = this.config.getConfig('analytics') || {};\r\n\r\n    if (this.options.provider === 'matomo') {\r\n      this.initMatomo();\r\n    }\r\n  }\r\n\r\n  private initMatomo() {\r\n    if (!this.options.url || !this.options.id) {\r\n      return;\r\n    }\r\n\r\n    (window as any)._paq = (window as any)._paq || [];\r\n    const paq: any = (window as any)._paq;\r\n    paq.push(['trackPageView']);\r\n    paq.push(['enableLinkTracking']);\r\n    (() => {\r\n      paq.push(['setTrackerUrl', this.options.url + 'matomo.php']);\r\n      paq.push(['setSiteId', this.options.id]);\r\n      const g = document.createElement('script');\r\n      const s = document.getElementsByTagName('script')[0];\r\n      g.type = 'text/javascript';\r\n      g.async = true;\r\n      g.defer = true;\r\n      g.src = this.options.url + 'matomo.js';\r\n      s.parentNode.insertBefore(g, s);\r\n    })();\r\n  }\r\n}\r\n","export enum Media {\r\n  Mobile = 'mobile',\r\n  Tablet = 'tablet',\r\n  Desktop = 'desktop'\r\n}\r\n\r\nexport enum MediaOrientation {\r\n  Portrait = 'portrait',\r\n  Landscape = 'landscape'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Media, MediaOrientation } from './media.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MediaService {\r\n  public media$ = new BehaviorSubject<Media>(undefined);\r\n  public orientation$ = new BehaviorSubject<MediaOrientation>(undefined);\r\n\r\n  constructor(breakpointObserver: BreakpointObserver) {\r\n    breakpointObserver\r\n      .observe([Breakpoints.HandsetLandscape])\r\n      .subscribe(res => {\r\n        if (res.matches) {\r\n          this.media$.next(Media.Mobile);\r\n          this.orientation$.next(MediaOrientation.Landscape);\r\n        }\r\n      });\r\n\r\n    breakpointObserver.observe([Breakpoints.HandsetPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Mobile);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.TabletLandscape]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Tablet);\r\n        this.orientation$.next(MediaOrientation.Landscape);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.TabletPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Tablet);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.WebLandscape]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Desktop);\r\n        this.orientation$.next(MediaOrientation.Landscape);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.WebPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Desktop);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n  }\r\n\r\n  getMedia(): Media {\r\n    return this.media$.value;\r\n  }\r\n\r\n  getOrientation(): MediaOrientation {\r\n    return this.orientation$.value;\r\n  }\r\n}\r\n","import { Injectable, EventEmitter, OnDestroy, Injector } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { debounceTime, startWith } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../message';\r\nimport { LanguageService } from '../language/shared/language.service';\r\n\r\nimport { Network } from '@ionic-native/network/ngx';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nexport interface ConnectionState {\r\n  connection: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NetworkService implements OnDestroy {\r\n\r\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\r\n  private onlineSubscription: Subscription;\r\n  private offlineSubscription: Subscription;\r\n  private connectionType: string;\r\n\r\n  private state: ConnectionState = {\r\n    connection: window.navigator.onLine\r\n  };\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector,\r\n    private network: Network,\r\n    private platform: Platform\r\n    ) {\r\n      this.platform.ready().then(() => {\r\n        if (this.platform.is('cordova')) {\r\n          if (this.platform.is('android')) {\r\n            this.checkNetworkStateMobile();\r\n          }\r\n        } else {\r\n          console.log('browser');\r\n          this.checkNetworkState();\r\n        }\r\n      });\r\n  }\r\n\r\n  private checkNetworkState() {\r\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.online.message');\r\n      const title = translate.instant('igo.core.network.online.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = true;\r\n      this.emitEvent();\r\n    });\r\n\r\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.offline.message');\r\n      const title = translate.instant('igo.core.network.offline.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = false;\r\n      this.emitEvent();\r\n    });\r\n  }\r\n\r\n  private checkNetworkStateMobile() {\r\n    if (this.network.type !== this.network.Connection.NONE) {\r\n      this.connectionType = this.network.type;\r\n      this.state.connection = true;\r\n    }\r\n\r\n    this.offlineSubscription = this.network.onDisconnect().subscribe(() => {\r\n      this.state.connection = false;\r\n      setTimeout(() => {\r\n        if (!this.state.connection) {\r\n          const translate = this.injector.get(LanguageService).translate;\r\n          const message = translate.instant('igo.core.network.offline.message');\r\n          const title = translate.instant('igo.core.network.offline.title');\r\n          this.messageService.info(message, title);\r\n          this.state.connection = false;\r\n          this.emitEvent();\r\n        }\r\n      }, 10000);\r\n    });\r\n\r\n    this.onlineSubscription = this.network.onConnect().subscribe(() => {\r\n      this.state.connection = true;\r\n      setTimeout(() => {\r\n        if (!this.state.connection) {\r\n          const translate = this.injector.get(LanguageService).translate;\r\n          const message = translate.instant('igo.core.network.online.message');\r\n          const title = translate.instant('igo.core.network.online.title');\r\n          this.messageService.info(message, title);\r\n          this.state.connection = true;\r\n          this.emitEvent();\r\n        }\r\n      }, 10000);\r\n    });\r\n  }\r\n\r\n  private emitEvent() {\r\n    this.stateChangeEventEmitter.emit(this.state);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    try {\r\n      this.offlineSubscription.unsubscribe();\r\n      this.onlineSubscription.unsubscribe();\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  currentState(reportState = true): Observable<ConnectionState> {\r\n    return reportState ?\r\n    this.stateChangeEventEmitter.pipe(\r\n      debounceTime(300),\r\n      startWith(this.state),\r\n    )\r\n    :\r\n    this.stateChangeEventEmitter.pipe(\r\n      debounceTime(300)\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NetworkService } from './network.service';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n  providers: [NetworkService]\r\n})\r\nexport class NetworkModule { }\r\n"],"names":["BehaviorSubject","uuid","Injectable","finalize","HTTP_INTERCEPTORS","NgModule","ObjectUtils","http","HttpClient","catchError","throwError","Injector","InjectionToken","APP_INITIALIZER","of","combineLatest","map","TranslateLoader","TranslateModule","MissingTranslationHandler","Component","Input","CommonModule","SimpleNotificationsModule","NotificationsService","TranslateService","HttpErrorResponse","HttpClientModule","MatIconRegistry","DomSanitizer","tap","HttpResponse","ActivatedRoute","Inject","Optional","Breakpoints","BreakpointObserver","EventEmitter","fromEvent","debounceTime","startWith","Network","Platform"],"mappings":";;;;;;;;;;AAAA;QAcE;YAJO,aAAQ,GAAG,IAAIA,oBAAe,CAAS,CAAC,CAAC,CAAC;YAEzC,QAAG,GAAa,EAAE,CAAC;SAEX;;;;QAEhB,kCAAQ;;;YAAR;;oBACQ,EAAE,GAAGC,UAAI,EAAE;gBACjB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAEpC,OAAO,EAAE,CAAC;aACX;;;;;QAED,oCAAU;;;;YAAV,UAAW,EAAU;;oBACb,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;gBAClC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;oBAChB,OAAO;iBACR;gBACD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAE1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACrC;;oBA1BFC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;8BARD;KAMA;;;;;;ACNA;QAeE,6BAAoB,eAAgC;YAAhC,oBAAe,GAAf,eAAe,CAAiB;SAAI;;;;;;QAExD,uCAAS;;;;;YAAT,UACE,GAAqB,EACrB,IAAiB;gBAFnB,iBAqBC;;oBAjBO,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;gBACvD,IAAI,QAAQ,EAAE;;wBACN,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;wBACvB,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC;qBACnD,CAAC;oBACF,IAAI,QAAQ,KAAK,OAAO,EAAE;wBACxB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;qBAC5B;iBACF;;oBAEK,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;gBAE1C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAC1BC,kBAAQ;;mBAAC;oBACP,KAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;iBACrC,EAAC,CACH,CAAC;aACH;;oBAzBFD,aAAU;;;;;wBAFF,eAAe;;;QA4BxB,0BAAC;KA1BD;;;;;;ACbA;QAKA;SAkBC;;;;QAZQ,yBAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,iBAAiB;oBAC3B,SAAS,EAAE;wBACT;4BACE,OAAO,EAAEE,sBAAiB;4BAC1B,QAAQ,EAAE,mBAAmB;4BAC7B,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF,CAAC;aACH;;oBAjBFC,WAAQ,SAAC;wBACR,OAAO,EAAE,EAAE;wBACX,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,EAAE;qBACZ;;QAcD,wBAAC;KAlBD;;;;;;ACLA;QAgBE,uBAAoB,QAAkB;YAAlB,aAAQ,GAAR,QAAQ,CAAU;YAF9B,WAAM,GAAW,EAAE,CAAC;SAEc;;;;;;;;;QAKnC,iCAAS;;;;;YAAhB,UAAiB,GAAW;gBAC1B,OAAOC,iBAAW,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aAC9C;;;;;;;;;QAKM,4BAAI;;;;;YAAX,UAAY,OAAsB;gBAAlC,iBA4BC;;oBA3BO,UAAU,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE;gBACxC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;oBACjB,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;oBACzB,OAAO,IAAI,CAAC;iBACb;;oBAEKC,OAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAACC,eAAU,CAAC;gBAE1C,OAAO,IAAI,OAAO;;;;mBAAC,UAAC,OAAO,EAAE,MAAM;oBACjCD,OAAI;yBACD,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;yBACjB,IAAI,CACHE,oBAAU;;;mBACR,UAAC,KAAU;wBACT,OAAO,CAAC,GAAG,CACT,wBAAsB,OAAO,CAAC,IAAI,uBAAoB,CACvD,CAAC;wBACF,OAAO,CAAC,IAAI,CAAC,CAAC;wBACd,OAAOC,eAAU,CAAC,KAAK,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;qBAClD,EACF,CACF;yBACA,SAAS;;;mBAAC,UAAA,cAAc;wBACvB,KAAI,CAAC,MAAM,GAAGJ,iBAAW,CAAC,SAAS,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;wBAChE,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf,EAAC,CAAC;iBACN,EAAC,CAAC;aACJ;;oBA/CFJ,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAXoBS,WAAQ;;;;4BAA7B;KASA;;;;;;ACTA;AAKA,QAAW,cAAc,GAAG,IAAIC,iBAAc,CAAgB,eAAe,CAAC;;;;;AAE9E,aAAgB,oBAAoB,CAAC,OAAsB;QACzD,OAAO;YACL,OAAO,EAAE,cAAc;YACvB,QAAQ,EAAE,OAAO;SAClB,CAAC;IACJ,CAAC;;;;;;AAED,aAAgB,aAAa,CAC3B,aAA4B,EAC5B,OAAsB;QAEtB;;WAAO,cAAM,OAAA,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,GAAA,EAAC;IAC3C,CAAC;;;;AAED,aAAgB,mBAAmB;QACjC,OAAO;YACL,OAAO,EAAEC,kBAAe;YACxB,UAAU,EAAE,aAAa;YACzB,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC;SACtC,CAAC;IACJ,CAAC;;;;;;AC5BD;QAGA;SAYC;;;;QANQ,uBAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,eAAe;oBACzB,SAAS,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,EAAE,mBAAmB,EAAE,CAAC;iBAC7D,CAAC;aACH;;oBAXFR,WAAQ,SAAC;wBACR,OAAO,EAAE,EAAE;wBACX,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,EAAE;qBACZ;;QAQD,sBAAC;KAZD;;;;;;ACDA;QAUE,wBACUE,OAAgB,EAChB,MAAe,EACf,MAAwB,EACxB,MAAsB;YADtB,uBAAA;gBAAA,gBAAwB;;YAFxB,SAAI,GAAJA,OAAI,CAAY;YAChB,WAAM,GAAN,MAAM,CAAS;YACf,WAAM,GAAN,MAAM,CAAkB;YACxB,WAAM,GAAN,MAAM,CAAgB;SAC5B;;;;;QAEG,uCAAc;;;;YAArB,UAAsB,IAAY;;oBAC1B,WAAW,GAAG,OAAO,CAAC,eAAa,IAAI,UAAO,CAAC;;oBAC/C,UAAU,GAAGO,OAAE,CAAC,WAAW,CAAC;gBAElC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;oBAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;iBACxD;gBAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;oBAChB,OAAO,UAAU,CAAC;iBACnB;;oBAEK,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAG,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,MAAQ,CAAC;;oBAEjE,OAAO,GAAGC,kBAAa,CAAC,UAAU,EAAE,UAAU,CAAC;gBAErD,OAAO,OAAO,CAAC,IAAI,CACjBC,aAAG;;;mBAAC,UAAA,YAAY;oBACd,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;iBACxD,EAAC,CACH,CAAC;aACH;QACH,qBAAC;IAAD,CAAC;;;;;;ACzCD;;;;;AAMA,aAAgB,qBAAqB,CACnCT,OAAgB,EAChB,MAAsB;QAEtB,OAAO,IAAI,cAAc,CAACA,OAAI,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAChE,CAAC;;;;;AAED,aAAgB,qBAAqB,CAAC,MAAO;QAC3C,OAAO;YACL,OAAO,EAAEU,oBAAe;YACxB,UAAU,EAAE,MAAM,IAAI,qBAAqB;YAC3C,IAAI,EAAE,CAACT,eAAU,CAAC;SACnB,CAAC;IACJ,CAAC;;;;;AAED,aAAgB,4BAA4B,CAAC,MAAO;QAClD,OAAO;YACL,OAAO,EAAES,oBAAe;YACxB,UAAU,EAAE,MAAM,IAAI,qBAAqB;YAC3C,IAAI,EAAE,CAACT,eAAU,EAAE,aAAa,CAAC;SAClC,CAAC;IACJ,CAAC;;;;;;ACtBD;QAAA;SAUC;;;;;QATC,6CAAM;;;;YAAN,UAAO,MAAuC;gBAC5C,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,MAAM,EAAE;;wBACnC,KAAK,GACT;qDAC6C;oBAC/C,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;iBACxB;gBACD,MAAM,IAAI,KAAK,CAAC,eAAY,MAAM,CAAC,GAAG,kCAA8B,CAAC,CAAC;aACvE;QACH,mCAAC;IAAD,CAAC;;;;;;ACfD;QASA;SAmBC;;;;QANQ,yBAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,iBAAiB;oBAC3B,SAAS,EAAE,CAAC,4BAA4B,EAAE,CAAC;iBAC5C,CAAC;aACH;;oBAlBFH,WAAQ,SAAC;wBACR,OAAO,EAAE;4BACPa,oBAAe,CAAC,OAAO,CAAC;gCACtB,yBAAyB,EAAE;oCACzB,OAAO,EAAEC,8BAAyB;oCAClC,QAAQ,EAAE,4BAA4B;iCACvC;6BACF,CAAC;yBACH;wBACD,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,CAACD,oBAAe,CAAC;qBAC3B;;QAQD,wBAAC;KAnBD;;;;;;ACTA;QAgCE;YAFQ,aAAQ,GAAQ,EAAE,CAAC;SAEX;QAbhB,sBACI,2CAAO;;;gBADX;gBAEE,OAAO,MAAM,CAAC,MAAM,CAClB,EAAE,EACF,sBAAsB,CAAC,cAAc,EACrC,IAAI,CAAC,QAAQ,CACd,CAAC;aACH;;;;gBACD,UAAY,KAAU;gBACpB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;aACvB;;;WAHA;QAlBM,qCAAc,GAAG;YACtB,OAAO,EAAE,IAAI;YACb,YAAY,EAAE,KAAK;YACnB,eAAe,EAAE,IAAI;YACrB,YAAY,EAAE,IAAI;YAClB,YAAY,EAAE,IAAI;YAClB,SAAS,EAAE,GAAG;YACd,QAAQ,EAAE,CAAC;YACX,iBAAiB,EAAE,IAAI;SACxB,CAAC;;oBAfHE,YAAS,SAAC;wBACT,QAAQ,EAAE,oBAAoB;wBAC9B,iJAA8C;;qBAE/C;;;;;8BAaEC,QAAK;;QAcR,6BAAC;KA/BD;;;;;;ACFA;QAOA;SAYC;;;;QANQ,wBAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,gBAAgB;oBAC1B,SAAS,EAAE,EAAE;iBACd,CAAC;aACH;;oBAXFhB,WAAQ,SAAC;wBACR,OAAO,EAAE,CAACiB,mBAAY,EAAEC,4BAAyB,CAAC,OAAO,EAAE,CAAC;wBAC5D,YAAY,EAAE,CAAC,sBAAsB,CAAC;wBACtC,OAAO,EAAE,CAAC,sBAAsB,CAAC;qBAClC;;QAQD,uBAAC;KAZD;;;;;;;;QCNE,OAAQ,OAAO;QACf,OAAQ,OAAO;QACf,MAAO,MAAM;QACb,SAAU,SAAS;;;;;;;ACJrB;QAiBE,wBACU,mBAAyC,EACzC,aAA4B;YAD5B,wBAAmB,GAAnB,mBAAmB,CAAsB;YACzC,kBAAa,GAAb,aAAa,CAAe;YAL/B,cAAS,GAAG,IAAIvB,oBAAe,CAAY,EAAE,CAAC,CAAC;YAOpD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;SAC9D;;;;;QAED,kCAAS;;;;YAAT,UAAU,SAA4B;gBACpC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;gBAC9B,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACnE;;;;;QAED,gCAAO;;;;YAAP,UAAQ,OAAgB;gBACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAE5D,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;gBACxC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;oBAEnC,YAA0B;gBAC9B,IAAI,OAAO,CAAC,IAAI,EAAE;oBAChB,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAC5C,OAAO,CAAC,KAAK,EACb,OAAO,CAAC,IAAI,yCACX,OAAO,CAAC,IAAI,OACb,OAAO,CAAC,OAAO,CAChB,CAAC;iBACH;qBAAM,IAAI,OAAO,CAAC,IAAI,EAAE;oBACvB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;wBACjB,OAAO,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ;8BAC/C,OAAO,CAAC,OAAO,CAAC,QAAQ,GAAG,SAAS;8BACpC,QAAQ,CAAC;qBACd;oBAED,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAC1C,OAAO,CAAC,IAAI,yCACX,OAAO,CAAC,IAAI,OACb,OAAO,CAAC,OAAO,CAChB,CAAC;iBACH;qBAAM;oBACL,OAAO;iBACR;gBAED,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE;oBAC9B,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC1C;gBAED,OAAO,YAAY,CAAC;aACrB;;;;;;;QAED,gCAAO;;;;;;YAAP,UAAQ,IAAY,EAAE,KAAc,EAAE,OAAiB;gBAAjB,wBAAA;oBAAA,YAAiB;;gBACrD,OAAO,IAAI,CAAC,OAAO,CAAC;oBAClB,IAAI,MAAA;oBACJ,KAAK,OAAA;oBACL,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO;oBAC7B,OAAO,SAAA;oBACP,IAAI,EAAE,WAAW,CAAC,OAAO;iBAC1B,CAAC,CAAC;aACJ;;;;;;;QAED,8BAAK;;;;;;YAAL,UAAM,IAAY,EAAE,KAAc,EAAE,OAAiB;gBAAjB,wBAAA;oBAAA,YAAiB;;gBACnD,OAAO,IAAI,CAAC,OAAO,CAAC;oBAClB,IAAI,MAAA;oBACJ,KAAK,OAAA;oBACL,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,eAAe;oBACrC,OAAO,SAAA;oBACP,IAAI,EAAE,WAAW,CAAC,KAAK;iBACxB,CAAC,CAAC;aACJ;;;;;;;QAED,6BAAI;;;;;;YAAJ,UAAK,IAAY,EAAE,KAAc,EAAE,OAAiB;gBAAjB,wBAAA;oBAAA,YAAiB;;gBAClD,OAAO,IAAI,CAAC,OAAO,CAAC;oBAClB,IAAI,MAAA;oBACJ,KAAK,OAAA;oBACL,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,cAAc;oBACpC,OAAO,SAAA;oBACP,IAAI,EAAE,WAAW,CAAC,IAAI;iBACvB,CAAC,CAAC;aACJ;;;;;;;QAED,8BAAK;;;;;;YAAL,UAAM,IAAY,EAAE,KAAc,EAAE,OAAiB;gBAAjB,wBAAA;oBAAA,YAAiB;;gBACnD,OAAO,IAAI,CAAC,OAAO,CAAC;oBAClB,IAAI,MAAA;oBACJ,KAAK,OAAA;oBACL,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,cAAc;oBACpC,OAAO,SAAA;oBACP,IAAI,EAAE,WAAW,CAAC,KAAK;iBACxB,CAAC,CAAC;aACJ;;;;;QAED,+BAAM;;;;YAAN,UAAO,EAAW;gBAChB,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aACrC;;;;;;;QAEO,gCAAO;;;;;;YAAf,UAAgB,YAA0B,EAAE,IAAY;;;;gBAItD,YAAY,CAAC,IAAI,GAAG,mFACmD,IAAI,2BAC7D,CAAC;aAChB;;;;;;QAEO,uCAAc;;;;;YAAtB,UAAuB,OAAgB;gBACrC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,EAAE;oBAC1C,OAAO,OAAO,CAAC;iBAChB;;oBAEG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ;gBAChC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC7C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC/C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;gBAE7C,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;gBACpB,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;gBACzB,OAAO,CAAC,KAAK,GAAG,SAAS,CAAC;gBAC1B,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;gBACzB,OAAO,OAAO,CAAC;aAChB;;oBA5HFE,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBATsBsB,uBAAoB;wBAElC,aAAa;;;;6BALtB;KAUA;;;;;;ACVA;QAOE,yBAAmB,SAA2B;YAA3B,cAAS,GAAT,SAAS,CAAkB;;gBACtC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;YAC/B,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACrC;;;;QAEM,qCAAW;;;YAAlB;;oBACQ,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE;gBACnD,OAAO,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,WAAW,GAAG,IAAI,CAAC;aACxD;;;;;QAEM,qCAAW;;;;YAAlB,UAAmB,QAAgB;gBACjC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC7B,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;aACrC;;oBAjBFtB,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAJQuB,qBAAgB;;;;8BADzB;KAGA;;;;;;ACHA;QAmBE,0BACU,cAA8B,EAC9B,QAAkB;YADlB,mBAAc,GAAd,cAAc,CAAgB;YAC9B,aAAQ,GAAR,QAAQ,CAAU;SACxB;;;;;;QAEJ,oCAAS;;;;;YAAT,UACE,GAAqB,EACrB,IAAiB;gBAFnB,iBASC;gBALC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAC1BhB,oBAAU;;;mBAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,GAAA,EAAC,EACjDN,kBAAQ;;mBAAC,cAAM,OAAA,KAAI,CAAC,iBAAiB,EAAE,GAAA,EAAC,EACxCA,kBAAQ;;mBAAC,cAAM,OAAA,KAAI,CAAC,mBAAmB,EAAE,GAAA,EAAC,CAC3C,CAAC;aACH;;;;;;;QAEO,sCAAW;;;;;;YAAnB,UAAoB,SAA4B,EAAE,GAAqB;;oBAC/D,GAAG,GAAM,GAAG,CAAC,MAAM,SAAI,GAAG,CAAC,aAAa,SAAI,SAAS,CAAC,MAAM,UAChE,SAAS,CAAC,UAAU,MACnB;gBAEH,IAAI,SAAS,YAAYuB,sBAAiB,EAAE;;wBACpC,QAAQ,GAAG,SAAS,CAAC,KAAK,KAAK,QAAQ,GAAG,SAAS,CAAC,KAAK,GAAG,EAAE;oBACpE,QAAQ,CAAC,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,IAAI,SAAS,CAAC,UAAU,CAAC;oBACnE,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;oBACxB,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;oBAE9D,IAAI,CAAC,SAAS,GAAG,IAAIA,sBAAiB,CAAC;wBACrC,KAAK,EAAE,QAAQ;wBACf,OAAO,EAAE,SAAS,CAAC,OAAO;wBAC1B,MAAM,EAAE,SAAS,CAAC,MAAM;wBACxB,UAAU,EAAE,SAAS,CAAC,UAAU;wBAChC,GAAG,EAAE,SAAS,CAAC,GAAG;qBACnB,CAAC,CAAC;iBACJ;gBAED,OAAOhB,eAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACnC;;;;;QAEO,4CAAiB;;;;YAAzB;gBACE,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE;oBACpD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;oBACnC,IAAI,CAAC,cAAc,CAAC,KAAK,CACvB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAC5B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAC3B,CAAC;iBACH;aACF;;;;;QAEO,8CAAmB;;;;YAA3B;gBACE,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE;;wBAC5C,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,SAAS;;wBACxD,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,kCAAkC,CAAC;;wBAC/D,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,gCAAgC,CAAC;oBACjE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;oBACnC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;iBAC3C;aACF;;oBA7DFR,aAAU;;;;;wBAHF,cAAc;wBAZFS,WAAQ;;;QA6E7B,uBAAC;KA9DD;;;;;;ACfA;QAKA;SAkBC;;;;QAZQ,sBAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,cAAc;oBACxB,SAAS,EAAE;wBACT;4BACE,OAAO,EAAEP,sBAAiB;4BAC1B,QAAQ,EAAE,gBAAgB;4BAC1B,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF,CAAC;aACH;;oBAjBFC,WAAQ,SAAC;wBACR,OAAO,EAAE,EAAE;wBACX,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,EAAE;qBACZ;;QAcD,qBAAC;KAlBD;;;;;;ACLA;QAuCE,uBAAY,eAAgC,EAAE,YAA0B;YACtE,eAAe,CAAC,aAAa,CAC3B,YAAY,CAAC,8BAA8B,CACzC,kCAAkC,CACnC,CACF,CAAC;SACH;;;;QAbM,qBAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,aAAa;oBACvB,SAAS,EAAE,EAAE;iBACd,CAAC;aACH;;oBAzBFA,WAAQ,SAAC;wBACR,OAAO,EAAE;4BACPiB,mBAAY;4BACZK,qBAAgB;4BAChB,iBAAiB,CAAC,OAAO,EAAE;4BAC3B,eAAe,CAAC,OAAO,EAAE;4BACzB,cAAc,CAAC,OAAO,EAAE;4BACxB,iBAAiB,CAAC,OAAO,EAAE;4BAC3B,gBAAgB,CAAC,OAAO,EAAE;yBAC3B;wBACD,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE;4BACP,iBAAiB;4BACjB,eAAe;4BACf,cAAc;4BACd,iBAAiB;4BACjB,gBAAgB;yBACjB;qBACF;;;;;wBA1BQC,wBAAe;wBADfC,4BAAY;;;QA2CrB,oBAAC;KAlCD;;;;;;ACZA;QAYA;SA2BC;;;;;;QAzBC,sCAAS;;;;;YAAT,UACE,GAAqB,EACrB,IAAiB;;oBAEX,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE;;oBACtB,EAAU;;gBAGd,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAC1BC,aAAG;;;;;;;gBAED,UAAA,KAAK,IAAI,QAAC,EAAE,GAAG,KAAK,YAAYC,iBAAY,GAAG,WAAW,GAAG,EAAE,IAAC;;;;;;;gBAEhE,UAAA,KAAK,IAAI,QAAC,EAAE,GAAG,QAAQ,IAAC,EACzB;;gBAED5B,kBAAQ;;mBAAC;;wBACD,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO;;wBAC9B,GAAG,GAAM,GAAG,CAAC,MAAM,WAAK,GAAG,CAAC,aAAa,yBACxC,EAAE,YAAO,OAAO,SAAM;oBAE7B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;iBAClB,EAAC,CACH,CAAC;aACH;;oBA1BFD,aAAU;;QA2BX,yBAAC;KA3BD;;;;;;ACZA;QAKA;SAkBC;;;;QAZQ,wBAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,gBAAgB;oBAC1B,SAAS,EAAE;wBACT;4BACE,OAAO,EAAEE,sBAAiB;4BAC1B,QAAQ,EAAE,kBAAkB;4BAC5B,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF,CAAC;aACH;;oBAjBFC,WAAQ,SAAC;wBACR,OAAO,EAAE,EAAE;wBACX,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,EAAE;qBACZ;;QAcD,uBAAC;KAlBD;;;;;;ACLA;AAMA,QAAW,qBAAqB,GAAG,IAAIO,iBAAc,CACnD,qBAAqB,CACtB;;;;;AAED,aAAgB,0BAA0B,CAAC,OAA4B;QACrE,OAAO;YACL,OAAO,EAAE,qBAAqB;YAC9B,QAAQ,EAAE,OAAO;SAClB,CAAC;IACJ,CAAC;AAED;QAME,sBACS,KAAqB,EAG5B,OAA4B;YAHrB,UAAK,GAAL,KAAK,CAAgB;;gBAKtB,cAAc,GAAG;gBACrB,SAAS,EAAE,QAAQ;gBACnB,OAAO,EAAE,MAAM;gBACf,aAAa,EAAE,YAAY;gBAC3B,UAAU,EAAE,SAAS;gBACrB,SAAS,EAAE,QAAQ;gBACnB,kBAAkB,EAAE,eAAe;gBACnC,mBAAmB,EAAE,iBAAiB;gBACtC,eAAe,EAAE,SAAS;gBAC1B,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,MAAM;aAChB;YACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;SAC3D;QAED,sBAAI,qCAAW;;;gBAAf;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;aAC/B;;;WAAA;;oBAhCFV,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAlBQ8B,mBAAc;wDAwBlBC,SAAM,SAAC,qBAAqB,cAC5BC,WAAQ;;;;2BA1Bb;KAiBA;;;;;;;;;;;ACjBA;QAYE,0BAAoB,MAAqB;YAArB,WAAM,GAAN,MAAM,CAAe;YACvC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YAExD,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;gBACtC,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;SACF;;;;;QAEO,qCAAU;;;;YAAlB;gBAAA,iBAoBC;gBAnBC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;oBACzC,OAAO;iBACR;gBAED,oBAAC,MAAM,IAAS,IAAI,GAAG,oBAAC,MAAM,IAAS,IAAI,IAAI,EAAE,CAAC;;oBAC5C,GAAG,GAAQ,oBAAC,MAAM,IAAS,IAAI;gBACrC,GAAG,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC5B,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACjC;;mBAAC;oBACC,GAAG,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,KAAI,CAAC,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC;oBAC7D,GAAG,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,KAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;;wBACnC,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;;wBACpC,CAAC,GAAG,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACpD,CAAC,CAAC,IAAI,GAAG,iBAAiB,CAAC;oBAC3B,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;oBACf,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;oBACf,CAAC,CAAC,GAAG,GAAG,KAAI,CAAC,OAAO,CAAC,GAAG,GAAG,WAAW,CAAC;oBACvC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBACjC,IAAG,CAAC;aACN;;oBAlCFhC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBANQ,aAAa;;;;+BAFtB;KAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCLE,QAAS,QAAQ;QACjB,QAAS,QAAQ;QACjB,SAAU,SAAS;;;;QAInB,UAAW,UAAU;QACrB,WAAY,WAAW;;;;;;;ACRzB;QAcE,sBAAY,kBAAsC;YAAlD,iBA4CC;YA/CM,WAAM,GAAG,IAAIF,oBAAe,CAAQ,SAAS,CAAC,CAAC;YAC/C,iBAAY,GAAG,IAAIA,oBAAe,CAAmB,SAAS,CAAC,CAAC;YAGrE,kBAAkB;iBACf,OAAO,CAAC,CAACmC,gBAAW,CAAC,gBAAgB,CAAC,CAAC;iBACvC,SAAS;;;WAAC,UAAA,GAAG;gBACZ,IAAI,GAAG,CAAC,OAAO,EAAE;oBACf,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC/B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;iBACpD;aACF,EAAC,CAAC;YAEL,kBAAkB,CAAC,OAAO,CAAC,CAACA,gBAAW,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS;;;eAAC,UAAA,GAAG;gBACrE,IAAI,GAAG,CAAC,OAAO,EAAE;oBACf,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC/B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;iBACnD;aACF,EAAC,CAAC;YAEH,kBAAkB,CAAC,OAAO,CAAC,CAACA,gBAAW,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS;;;eAAC,UAAA,GAAG;gBACrE,IAAI,GAAG,CAAC,OAAO,EAAE;oBACf,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC/B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;iBACpD;aACF,EAAC,CAAC;YAEH,kBAAkB,CAAC,OAAO,CAAC,CAACA,gBAAW,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS;;;eAAC,UAAA,GAAG;gBACpE,IAAI,GAAG,CAAC,OAAO,EAAE;oBACf,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC/B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;iBACnD;aACF,EAAC,CAAC;YAEH,kBAAkB,CAAC,OAAO,CAAC,CAACA,gBAAW,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS;;;eAAC,UAAA,GAAG;gBAClE,IAAI,GAAG,CAAC,OAAO,EAAE;oBACf,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAChC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;iBACpD;aACF,EAAC,CAAC;YAEH,kBAAkB,CAAC,OAAO,CAAC,CAACA,gBAAW,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS;;;eAAC,UAAA,GAAG;gBACjE,IAAI,GAAG,CAAC,OAAO,EAAE;oBACf,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAChC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;iBACnD;aACF,EAAC,CAAC;SACJ;;;;QAED,+BAAQ;;;YAAR;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;aAC1B;;;;QAED,qCAAc;;;YAAd;gBACE,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;aAChC;;oBA3DFjC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBARqBkC,uBAAkB;;;;2BADxC;KAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;QA4BE,wBACU,cAA8B,EAC9B,QAAkB,EAClB,OAAgB,EAChB,QAAkB;YAJ5B,iBAgBC;YAfS,mBAAc,GAAd,cAAc,CAAgB;YAC9B,aAAQ,GAAR,QAAQ,CAAU;YAClB,YAAO,GAAP,OAAO,CAAS;YAChB,aAAQ,GAAR,QAAQ,CAAU;YAbpB,4BAAuB,GAAG,IAAIC,eAAY,EAAmB,CAAC;YAK9D,UAAK,GAAoB;gBAC/B,UAAU,EAAE,MAAM,CAAC,SAAS,CAAC,MAAM;aACpC,CAAC;YAQE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI;;eAAC;gBACzB,IAAI,KAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE;oBAC/B,IAAI,KAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE;wBAC/B,KAAI,CAAC,uBAAuB,EAAE,CAAC;qBAChC;iBACF;qBAAM;oBACL,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;oBACvB,KAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC1B;aACF,EAAC,CAAC;SACN;;;;;QAEO,0CAAiB;;;;YAAzB;gBAAA,iBAkBC;gBAjBC,IAAI,CAAC,kBAAkB,GAAGC,cAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,SAAS;;mBAAC;;wBACxD,SAAS,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,SAAS;;wBACxD,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,iCAAiC,CAAC;;wBAC9D,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,+BAA+B,CAAC;oBAChE,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBACzC,KAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;oBAC7B,KAAI,CAAC,SAAS,EAAE,CAAC;iBAClB,EAAC,CAAC;gBAEH,IAAI,CAAC,mBAAmB,GAAGA,cAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,SAAS;;mBAAC;;wBAC1D,SAAS,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,SAAS;;wBACxD,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,kCAAkC,CAAC;;wBAC/D,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,gCAAgC,CAAC;oBACjE,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBACzC,KAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;oBAC9B,KAAI,CAAC,SAAS,EAAE,CAAC;iBAClB,EAAC,CAAC;aACJ;;;;;QAEO,gDAAuB;;;;YAA/B;gBAAA,iBAiCC;gBAhCC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE;oBACtD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;oBACxC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;iBAC9B;gBAED,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,SAAS;;mBAAC;oBAC/D,KAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;oBAC9B,UAAU;;uBAAC;wBACT,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,UAAU,EAAE;;gCACpB,SAAS,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,SAAS;;gCACxD,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,kCAAkC,CAAC;;gCAC/D,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,gCAAgC,CAAC;4BACjE,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;4BACzC,KAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;4BAC9B,KAAI,CAAC,SAAS,EAAE,CAAC;yBAClB;qBACF,GAAE,KAAK,CAAC,CAAC;iBACX,EAAC,CAAC;gBAEH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,SAAS;;mBAAC;oBAC3D,KAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;oBAC7B,UAAU;;uBAAC;wBACT,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,UAAU,EAAE;;gCACpB,SAAS,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,SAAS;;gCACxD,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,iCAAiC,CAAC;;gCAC9D,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,+BAA+B,CAAC;4BAChE,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;4BACzC,KAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;4BAC7B,KAAI,CAAC,SAAS,EAAE,CAAC;yBAClB;qBACF,GAAE,KAAK,CAAC,CAAC;iBACX,EAAC,CAAC;aACJ;;;;;QAEO,kCAAS;;;;YAAjB;gBACE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC/C;;;;QAED,oCAAW;;;YAAX;gBACE,IAAI;oBACF,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;oBACvC,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;iBACvC;gBAAC,OAAO,CAAC,EAAE;iBACX;aACF;;;;;QAED,qCAAY;;;;YAAZ,UAAa,WAAkB;gBAAlB,4BAAA;oBAAA,kBAAkB;;gBAC7B,OAAO,WAAW;oBAClB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAC/BC,sBAAY,CAAC,GAAG,CAAC,EACjBC,mBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CACtB;;wBAED,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAC/BD,sBAAY,CAAC,GAAG,CAAC,CAClB,CAAC;aACH;;oBA7GFrC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAZQ,cAAc;wBAJuBS,WAAQ;wBAO7C8B,WAAO;wBACPC,WAAQ;;;;6BARjB;KAcA;;;;;;ACdA;QAIA;SAK8B;;oBAL7BrC,WAAQ,SAAC;wBACR,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,CAACiB,mBAAY,CAAC;wBACvB,SAAS,EAAE,CAAC,cAAc,CAAC;qBAC5B;;QAC4B,oBAAC;KAL9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
