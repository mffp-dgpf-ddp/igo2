{"version":3,"sources":["ng://@igo2/core/lib/activity/activity.service.ts","ng://@igo2/core/lib/activity/activity.interceptor.ts","ng://@igo2/core/lib/activity/activity.module.ts","ng://@igo2/core/lib/config/config.service.ts","ng://@igo2/core/lib/config/config.provider.ts","ng://@igo2/core/lib/config/config.module.ts","ng://@igo2/core/lib/language/shared/language.loader.ts","ng://@igo2/core/lib/language/shared/language.provider.ts","ng://@igo2/core/lib/language/shared/missing-translation.guard.ts","ng://@igo2/core/lib/language/language.module.ts","ng://@igo2/core/lib/message/message-center/message-center.component.ts","ng://@igo2/core/lib/message/message.module.ts","ng://@igo2/core/lib/message/shared/message.enum.ts","ng://@igo2/core/lib/message/shared/message.service.ts","ng://@igo2/core/lib/language/shared/language.service.ts","ng://@igo2/core/lib/request/error.interceptor.ts","ng://@igo2/core/lib/request/error.module.ts","ng://@igo2/core/lib/core.module.ts","ng://@igo2/core/lib/request/logging.interceptor.ts","ng://@igo2/core/lib/request/logging.module.ts","ng://@igo2/core/lib/route/route.service.ts","ng://@igo2/core/lib/analytics/shared/analytics.service.ts","ng://@igo2/core/lib/media/media.enum.ts","ng://@igo2/core/lib/media/media.service.ts","ng://@igo2/core/lib/network/network.service.ts","ng://@igo2/core/lib/network/network.module.ts"],"names":["ActivityService","prototype","register","id","uuid","this","ids","push","counter$","next","length","unregister","index","indexOf","splice","Injectable","args","providedIn","BehaviorSubject","ActivityInterceptor","intercept","req","_this","activity","headers","get","actReq","clone","delete","handle","activityService","pipe","finalize","IgoActivityModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","declarations","exports","ConfigService","getConfig","key","ObjectUtils","resolve","config","load","options","baseConfig","default","path","http","injector","HttpClient","Promise","reject","catchError","error","console","log","throwError","subscribe","configResponse","mergeDeep","Injector","CONFIG_OPTIONS","InjectionToken","provideConfigOptions","useValue","configFactory","configService","provideConfigLoader","APP_INITIALIZER","useFactory","deps","IgoConfigModule","LanguageLoader","getTranslation","lang","translation","require","igoLocale$","of","prefix","appLocale$","suffix","combineLatest","map","translations","Object","assign","defaultLanguageLoader","undefined","provideDefaultLanguageLoader","loader","TranslateLoader","IgoMissingTranslationHandler","params","translateService","langs","Error","IgoLanguageModule","TranslateModule","MissingTranslationHandler","i1$1","MessageCenterComponent","defaultOptions","_options","value","configurable","timeOut","hasCloseIcon","showProgressBar","pauseOnHover","clickToClose","maxLength","maxStack","preventDuplicates","Component","selector","styles","Input","IgoMessageModule","CommonModule","common","i1","SimpleNotificationsModule","MessageType","ERROR","ALERT","INFO","MessageService","httpError","caught","message","title","notification","messages$","concat","text","notificationService","create","html","icon","theClass","addIcon","type","SUCCESS","remove","template","replace","NotificationsService","ngInjectableDef","i0","defineInjectable","factory","inject","token","rxjs","LanguageService","browserLang","translate","getBrowserLang","match","language","use","reloadLang","TranslateService","getLanguage","setDefaultLang","ErrorInterceptor","handleUncaughtError","msg","method","HttpErrorResponse","status","statusText","errorObj","url","toDisplay","messageService","instant","IgoErrorModule","IgoCoreModule","HttpClientModule","DomSanitizer","matIconRegistry","domSanitizer","addSvgIconSet","bypassSecurityTrustResourceUrl","LoggingInterceptor","urlWithParams","ok","elapsed","IgoLoggingModule","RouteService","route","queryParams","i1$2","ActivatedRoute","ROUTE_SERVICE_OPTIONS","centerKey","zoomKey","projectionKey","contextKey","searchKey","visibleOnLayersKey","visibleOffLayersKey","routingCoordKey","toolKey","llcKKey","llcAKey","llcVKey","llcRKey","AnalyticsService","paq","_paq","s","document","getElementsByTagName","g","async","defer","src","parentNode","insertBefore","provider","initMatomo","Media","Mobile","Tablet","MediaOrientation","Portrait","MediaService","media$","orientation$","i1$3","BreakpointObserver","breakpointObserver","observe","Breakpoints","HandsetLandscape","res","matches","Landscape","Desktop","NetworkService","info","state","connection","emitEvent","network","Connection","NONE","connectionType","stateChangeEventEmitter","emit","offlineSubscription","unsubscribe","onlineSubscription","e","reportState","operators","debounceTime","Network","Platform","INJECTOR","i2","i3","platform","EventEmitter","window","navigator","onLine","is","checkNetworkStateMobile","checkNetworkState","NetworkModule","provideLanguageLoader","provideRouteServiceOptions"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityService {\r\n  public counter$ = new BehaviorSubject<number>(0);\r\n\r\n  private ids: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  register(): string {\r\n    const id = uuid();\r\n    this.ids.push(id);\r\n    this.counter$.next(this.ids.length);\r\n\r\n    return id;\r\n  }\r\n\r\n  unregister(id: string) {\r\n    const index = this.ids.indexOf(id);\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n    this.ids.splice(index, 1);\r\n\r\n    this.counter$.next(this.ids.length);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ActivityService } from './activity.service';\r\n\r\n@Injectable()\r\nexport class ActivityInterceptor implements HttpInterceptor {\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const activity = req.headers.get('activityInterceptor');\r\n    if (activity) {\r\n      const actReq = req.clone({\r\n        headers: req.headers.delete('activityInterceptor')\r\n      });\r\n      if (activity === 'false') {\r\n        return next.handle(actReq);\r\n      }\r\n    }\r\n\r\n    const id = this.activityService.register();\r\n\r\n    return next.handle(req).pipe(\r\n      finalize(() => {\r\n        this.activityService.unregister(id);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ActivityInterceptor } from './activity.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoActivityModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoActivityModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: ActivityInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { ConfigOptions } from './config.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigService {\r\n\r\n  private config: object = {};\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  /**\r\n   * Use to get the data found in config file\r\n   */\r\n  public getConfig(key: string): any {\r\n    return ObjectUtils.resolve(this.config, key);\r\n  }\r\n\r\n  /**\r\n   * This method loads \"[path]\" to get all config's variables\r\n   */\r\n  public load(options: ConfigOptions) {\r\n    const baseConfig = options.default || {};\r\n    if (!options.path) {\r\n      this.config = baseConfig;\r\n      return true;\r\n    }\r\n\r\n    const http = this.injector.get(HttpClient);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      http\r\n        .get(options.path)\r\n        .pipe(\r\n          catchError(\r\n            (error: any): any => {\r\n              console.log(\r\n                `Configuration file ${options.path} could not be read`\r\n              );\r\n              resolve(true);\r\n              return throwError(error.error || 'Server error');\r\n            }\r\n          )\r\n        )\r\n        .subscribe(configResponse => {\r\n          this.config = ObjectUtils.mergeDeep(baseConfig, configResponse);\r\n          resolve(true);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import { APP_INITIALIZER, InjectionToken } from '@angular/core';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { ConfigOptions } from './config.interface';\r\n\r\nexport let CONFIG_OPTIONS = new InjectionToken<ConfigOptions>('configOptions');\r\n\r\nexport function provideConfigOptions(options: ConfigOptions) {\r\n  return {\r\n    provide: CONFIG_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\nexport function configFactory(\r\n  configService: ConfigService,\r\n  options: ConfigOptions\r\n) {\r\n  return () => configService.load(options);\r\n}\r\n\r\nexport function provideConfigLoader() {\r\n  return {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: configFactory,\r\n    multi: true,\r\n    deps: [ConfigService, CONFIG_OPTIONS]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { provideConfigOptions, provideConfigLoader } from './config.provider';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoConfigModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoConfigModule,\r\n      providers: [provideConfigOptions({}), provideConfigLoader()]\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { of, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\ndeclare function require(arg: string): any;\r\n\r\nexport class LanguageLoader implements TranslateLoader {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private prefix?: string,\r\n    private suffix: string = '.json',\r\n    private config?: ConfigService\r\n  ) {}\r\n\r\n  public getTranslation(lang: string): any {\r\n    const translation = require(`../locale/${lang}.json`);\r\n    const igoLocale$ = of(translation);\r\n\r\n    if (this.config && !this.prefix) {\r\n      this.prefix = this.config.getConfig('language.prefix');\r\n    }\r\n\r\n    if (!this.prefix) {\r\n      return igoLocale$;\r\n    }\r\n\r\n    const appLocale$ = this.http.get(`${this.prefix}${lang}${this.suffix}`);\r\n\r\n    const locale$ = combineLatest(igoLocale$, appLocale$);\r\n\r\n    return locale$.pipe(\r\n      map(translations => {\r\n        return Object.assign(translations[0], translations[1]);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\nimport { LanguageLoader } from './language.loader';\r\n\r\nexport function defaultLanguageLoader(\r\n  http: HttpClient,\r\n  config?: ConfigService\r\n) {\r\n  return new LanguageLoader(http, undefined, undefined, config);\r\n}\r\n\r\nexport function provideLanguageLoader(loader?) {\r\n  return {\r\n    provide: TranslateLoader,\r\n    useFactory: loader || defaultLanguageLoader,\r\n    deps: [HttpClient]\r\n  };\r\n}\r\n\r\nexport function provideDefaultLanguageLoader(loader?) {\r\n  return {\r\n    provide: TranslateLoader,\r\n    useFactory: loader || defaultLanguageLoader,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import {\r\n  MissingTranslationHandler,\r\n  MissingTranslationHandlerParams\r\n} from '@ngx-translate/core';\r\n\r\nexport class IgoMissingTranslationHandler implements MissingTranslationHandler {\r\n  handle(params: MissingTranslationHandlerParams) {\r\n    if (!params.translateService.langs.length) {\r\n      const error =\r\n        'Translations are not yet loaded. \\\r\n         Check that the LanguageService is injected.';\r\n      throw new Error(error);\r\n    }\r\n    throw new Error(`The Key \"${params.key}\" is missing in locale file.`);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport {\r\n  TranslateModule,\r\n  MissingTranslationHandler\r\n} from '@ngx-translate/core';\r\n\r\nimport { provideDefaultLanguageLoader } from './shared/language.provider';\r\nimport { IgoMissingTranslationHandler } from './shared/missing-translation.guard';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TranslateModule.forRoot({\r\n      missingTranslationHandler: {\r\n        provide: MissingTranslationHandler,\r\n        useClass: IgoMissingTranslationHandler\r\n      }\r\n    })\r\n  ],\r\n  declarations: [],\r\n  exports: [TranslateModule]\r\n})\r\nexport class IgoLanguageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLanguageModule,\r\n      providers: [provideDefaultLanguageLoader()]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-message-center',\r\n  templateUrl: './message-center.component.html',\r\n  styleUrls: ['./message-center.component.scss']\r\n})\r\nexport class MessageCenterComponent {\r\n  static defaultOptions = {\r\n    timeOut: 5000,\r\n    hasCloseIcon: false,\r\n    showProgressBar: true,\r\n    pauseOnHover: true,\r\n    clickToClose: true,\r\n    maxLength: 100,\r\n    maxStack: 3,\r\n    preventDuplicates: true\r\n  };\r\n\r\n  @Input()\r\n  get options(): any {\r\n    return Object.assign(\r\n      {},\r\n      MessageCenterComponent.defaultOptions,\r\n      this._options\r\n    );\r\n  }\r\n  set options(value: any) {\r\n    this._options = value;\r\n  }\r\n  private _options: any = {};\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\n\r\nimport { MessageCenterComponent } from './message-center/message-center.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SimpleNotificationsModule.forRoot()],\r\n  declarations: [MessageCenterComponent],\r\n  exports: [MessageCenterComponent]\r\n})\r\nexport class IgoMessageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMessageModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","export enum MessageType {\r\n  ERROR = 'error',\r\n  ALERT = 'alert',\r\n  INFO = 'info',\r\n  SUCCESS = 'success'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Notification, NotificationsService, NotificationType} from 'angular2-notifications';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\nimport { Message, MessageOptions } from './message.interface';\r\nimport { MessageType } from './message.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  public messages$ = new BehaviorSubject<Message[]>([]);\r\n  private options: MessageOptions;\r\n\r\n  constructor(\r\n    private notificationService: NotificationsService,\r\n    private configService: ConfigService\r\n  ) {\r\n    this.options = this.configService.getConfig('message') || {};\r\n  }\r\n\r\n  showError(httpError: HttpErrorResponse) {\r\n    httpError.error.caught = true;\r\n    return this.error(httpError.error.message, httpError.error.title);\r\n  }\r\n\r\n  message(message: Message) {\r\n    this.messages$.next(this.messages$.value.concat([message]));\r\n\r\n    message.options = message.options || {};\r\n    message = this.handleTemplate(message);\r\n\r\n    let notification: Notification;\r\n    if (message.text) {\r\n      notification = this.notificationService.create(\r\n        message.title,\r\n        message.text,\r\n        (message.type as any) as NotificationType,\r\n        message.options\r\n      );\r\n    } else if (message.html) {\r\n      if (!message.icon) {\r\n        message.options.theClass = message.options.theClass\r\n          ? message.options.theClass + ' noIcon'\r\n          : 'noIcon';\r\n      }\r\n\r\n      notification = this.notificationService.html(\r\n        message.html,\r\n        (message.type as any) as NotificationType,\r\n        message.options\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (message.icon !== undefined) {\r\n      this.addIcon(notification, message.icon);\r\n    }\r\n\r\n    return notification;\r\n  }\r\n\r\n  success(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'check',\r\n      options,\r\n      type: MessageType.SUCCESS\r\n    });\r\n  }\r\n\r\n  error(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'error_outline',\r\n      options,\r\n      type: MessageType.ERROR\r\n    });\r\n  }\r\n\r\n  info(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'info_outline',\r\n      options,\r\n      type: MessageType.INFO\r\n    });\r\n  }\r\n\r\n  alert(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'access_alarm',\r\n      options,\r\n      type: MessageType.ALERT\r\n    });\r\n  }\r\n\r\n  remove(id?: string) {\r\n    this.notificationService.remove(id);\r\n  }\r\n\r\n  private addIcon(notification: Notification, icon: string) {\r\n    // There is no way to add an icon to a notification when reating\r\n    // it so we simply set it on the notification directly.\r\n    // See https://github.com/flauc/angular2-notifications/issues/165\r\n    notification.icon = `\r\n      <mat-icon class=\"material-icons mat-icon mat-list-avatar\" svgIcon=\"${icon}\">\r\n      </mat-icon>`;\r\n  }\r\n\r\n  private handleTemplate(message: Message): Message {\r\n    if (!this.options.template || message.html) {\r\n      return message;\r\n    }\r\n\r\n    let html = this.options.template;\r\n    html = html.replace('${text}', message.text);\r\n    html = html.replace('${title}', message.title);\r\n    html = html.replace('${icon}', message.icon);\r\n\r\n    message.html = html;\r\n    message.text = undefined;\r\n    message.title = undefined;\r\n    message.icon = undefined;\r\n    return message;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService {\r\n  constructor(public translate: TranslateService) {\r\n    const lang = this.getLanguage();\r\n    this.translate.setDefaultLang(lang);\r\n  }\r\n\r\n  public getLanguage(): string {\r\n    const browserLang = this.translate.getBrowserLang();\r\n    return browserLang.match(/en|fr/) ? browserLang : 'en';\r\n  }\r\n\r\n  public setLanguage(language: string) {\r\n    this.translate.use(language);\r\n    this.translate.reloadLang(language);\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n  HttpEvent,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../message/shared/message.service';\r\nimport { LanguageService } from '../language/shared/language.service';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  private httpError: HttpErrorResponse;\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n      catchError(error => this.handleError(error, req)),\r\n      finalize(() => this.handleCaughtError()),\r\n      finalize(() => this.handleUncaughtError())\r\n    );\r\n  }\r\n\r\n  private handleError(httpError: HttpErrorResponse, req: HttpRequest<any>) {\r\n    const msg = `${req.method} ${req.urlWithParams} ${httpError.status} (${\r\n      httpError.statusText\r\n    })`;\r\n\r\n    if (httpError instanceof HttpErrorResponse) {\r\n      const errorObj = httpError.error === 'object' ? httpError.error : {};\r\n      errorObj.message = httpError.error.message || httpError.statusText;\r\n      errorObj.caught = false;\r\n      console.error(msg, '\\n', errorObj.message, '\\n\\n', httpError);\r\n\r\n      this.httpError = new HttpErrorResponse({\r\n        error: errorObj,\r\n        headers: httpError.headers,\r\n        status: httpError.status,\r\n        statusText: httpError.statusText,\r\n        url: httpError.url\r\n      });\r\n    }\r\n\r\n    return throwError(this.httpError);\r\n  }\r\n\r\n  private handleCaughtError() {\r\n    if (this.httpError && this.httpError.error.toDisplay) {\r\n      this.httpError.error.caught = true;\r\n      this.messageService.error(\r\n        this.httpError.error.message,\r\n        this.httpError.error.title\r\n      );\r\n    }\r\n  }\r\n\r\n  private handleUncaughtError() {\r\n    if (this.httpError && !this.httpError.error.caught) {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.errors.uncaught.message');\r\n      const title = translate.instant('igo.core.errors.uncaught.title');\r\n      this.httpError.error.caught = true;\r\n      this.messageService.error(message, title);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ErrorInterceptor } from './error.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoErrorModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoErrorModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: ErrorInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material';\r\n\r\nimport { IgoActivityModule } from './activity/activity.module';\r\nimport { IgoConfigModule } from './config/config.module';\r\nimport { IgoLanguageModule } from './language/language.module';\r\nimport { IgoMessageModule } from './message/message.module';\r\nimport { IgoErrorModule } from './request/error.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    IgoActivityModule.forRoot(),\r\n    IgoConfigModule.forRoot(),\r\n    IgoErrorModule.forRoot(),\r\n    IgoLanguageModule.forRoot(),\r\n    IgoMessageModule.forRoot()\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n    IgoActivityModule,\r\n    IgoConfigModule,\r\n    IgoErrorModule,\r\n    IgoLanguageModule,\r\n    IgoMessageModule\r\n  ]\r\n})\r\nexport class IgoCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCoreModule,\r\n      providers: []\r\n    };\r\n  }\r\n\r\n  constructor(matIconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    matIconRegistry.addSvgIconSet(\r\n      domSanitizer.bypassSecurityTrustResourceUrl(\r\n        './assets/igo2/core/icons/mdi.svg'\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpRequest,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { tap, finalize } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class LoggingInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const started = Date.now();\r\n    let ok: string;\r\n\r\n    // extend server response observable with logging\r\n    return next.handle(req).pipe(\r\n      tap(\r\n        // Succeeds when there is a response; ignore other events\r\n        event => (ok = event instanceof HttpResponse ? 'succeeded' : ''),\r\n        // Operation failed; error is an HttpErrorResponse\r\n        error => (ok = 'failed')\r\n      ),\r\n      // Log when response observable either completes or errors\r\n      finalize(() => {\r\n        const elapsed = Date.now() - started;\r\n        const msg = `${req.method} \"${req.urlWithParams}\"\r\n             ${ok} in ${elapsed} ms.`;\r\n\r\n        console.log(msg);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { LoggingInterceptor } from './logging.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoLoggingModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLoggingModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: LoggingInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject, InjectionToken, Optional } from '@angular/core';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { RouteServiceOptions } from './route.interface';\r\n\r\nexport let ROUTE_SERVICE_OPTIONS = new InjectionToken<RouteServiceOptions>(\r\n  'routeServiceOptions'\r\n);\r\n\r\nexport function provideRouteServiceOptions(options: RouteServiceOptions) {\r\n  return {\r\n    provide: ROUTE_SERVICE_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RouteService {\r\n  public options: RouteServiceOptions;\r\n\r\n  constructor(\r\n    public route: ActivatedRoute,\r\n    @Inject(ROUTE_SERVICE_OPTIONS)\r\n    @Optional()\r\n    options: RouteServiceOptions\r\n  ) {\r\n    const defaultOptions = {\r\n      centerKey: 'center',\r\n      zoomKey: 'zoom',\r\n      projectionKey: 'projection',\r\n      contextKey: 'context',\r\n      searchKey: 'search',\r\n      visibleOnLayersKey: 'visiblelayers',\r\n      visibleOffLayersKey: 'invisiblelayers',\r\n      routingCoordKey: 'routing',\r\n      toolKey: 'tool',\r\n      llcKKey: 'llck',\r\n      llcAKey: 'llca',\r\n      llcVKey: 'llcv',\r\n      llcRKey: 'llcr'\r\n    };\r\n    this.options = Object.assign({}, defaultOptions, options);\r\n  }\r\n\r\n  get queryParams(): Observable<Params> {\r\n    return this.route.queryParams;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\nimport { AnalyticsOptions } from './analytics.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AnalyticsService {\r\n  private options: AnalyticsOptions;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.options = this.config.getConfig('analytics') || {};\r\n\r\n    if (this.options.provider === 'matomo') {\r\n      this.initMatomo();\r\n    }\r\n  }\r\n\r\n  private initMatomo() {\r\n    if (!this.options.url || !this.options.id) {\r\n      return;\r\n    }\r\n\r\n    (window as any)._paq = (window as any)._paq || [];\r\n    const paq: any = (window as any)._paq;\r\n    paq.push(['trackPageView']);\r\n    paq.push(['enableLinkTracking']);\r\n    (() => {\r\n      paq.push(['setTrackerUrl', this.options.url + 'matomo.php']);\r\n      paq.push(['setSiteId', this.options.id]);\r\n      const g = document.createElement('script');\r\n      const s = document.getElementsByTagName('script')[0];\r\n      g.type = 'text/javascript';\r\n      g.async = true;\r\n      g.defer = true;\r\n      g.src = this.options.url + 'matomo.js';\r\n      s.parentNode.insertBefore(g, s);\r\n    })();\r\n  }\r\n}\r\n","export enum Media {\r\n  Mobile = 'mobile',\r\n  Tablet = 'tablet',\r\n  Desktop = 'desktop'\r\n}\r\n\r\nexport enum MediaOrientation {\r\n  Portrait = 'portrait',\r\n  Landscape = 'landscape'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Media, MediaOrientation } from './media.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MediaService {\r\n  public media$ = new BehaviorSubject<Media>(undefined);\r\n  public orientation$ = new BehaviorSubject<MediaOrientation>(undefined);\r\n\r\n  constructor(breakpointObserver: BreakpointObserver) {\r\n    breakpointObserver\r\n      .observe([Breakpoints.HandsetLandscape])\r\n      .subscribe(res => {\r\n        if (res.matches) {\r\n          this.media$.next(Media.Mobile);\r\n          this.orientation$.next(MediaOrientation.Landscape);\r\n        }\r\n      });\r\n\r\n    breakpointObserver.observe([Breakpoints.HandsetPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Mobile);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.TabletLandscape]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Tablet);\r\n        this.orientation$.next(MediaOrientation.Landscape);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.TabletPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Tablet);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.WebLandscape]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Desktop);\r\n        this.orientation$.next(MediaOrientation.Landscape);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.WebPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Desktop);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n  }\r\n\r\n  getMedia(): Media {\r\n    return this.media$.value;\r\n  }\r\n\r\n  getOrientation(): MediaOrientation {\r\n    return this.orientation$.value;\r\n  }\r\n}\r\n","import { Injectable, EventEmitter, OnDestroy, Injector } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { debounceTime, startWith } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../message';\r\nimport { LanguageService } from '../language/shared/language.service';\r\n\r\nimport { Network } from '@ionic-native/network/ngx';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nexport interface ConnectionState {\r\n  connection: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NetworkService implements OnDestroy {\r\n\r\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\r\n  private onlineSubscription: Subscription;\r\n  private offlineSubscription: Subscription;\r\n  private connectionType: string;\r\n\r\n  private state: ConnectionState = {\r\n    connection: window.navigator.onLine\r\n  };\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector,\r\n    private network: Network,\r\n    private platform: Platform\r\n    ) {\r\n      this.platform.ready().then(() => {\r\n        if (this.platform.is('cordova')) {\r\n          if (this.platform.is('android')) {\r\n            this.checkNetworkStateMobile();\r\n          }\r\n        } else {\r\n          console.log('browser');\r\n          this.checkNetworkState();\r\n        }\r\n      });\r\n  }\r\n\r\n  private checkNetworkState() {\r\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.online.message');\r\n      const title = translate.instant('igo.core.network.online.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = true;\r\n      this.emitEvent();\r\n    });\r\n\r\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.offline.message');\r\n      const title = translate.instant('igo.core.network.offline.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = false;\r\n      this.emitEvent();\r\n    });\r\n  }\r\n\r\n  private checkNetworkStateMobile() {\r\n    if (this.network.type !== this.network.Connection.NONE) {\r\n      this.connectionType = this.network.type;\r\n      this.state.connection = true;\r\n    }\r\n\r\n    this.offlineSubscription = this.network.onDisconnect().subscribe(() => {\r\n      this.state.connection = false;\r\n      setTimeout(() => {\r\n        if (!this.state.connection) {\r\n          const translate = this.injector.get(LanguageService).translate;\r\n          const message = translate.instant('igo.core.network.offline.message');\r\n          const title = translate.instant('igo.core.network.offline.title');\r\n          this.messageService.info(message, title);\r\n          this.state.connection = false;\r\n          this.emitEvent();\r\n        }\r\n      }, 10000);\r\n    });\r\n\r\n    this.onlineSubscription = this.network.onConnect().subscribe(() => {\r\n      this.state.connection = true;\r\n      setTimeout(() => {\r\n        if (!this.state.connection) {\r\n          const translate = this.injector.get(LanguageService).translate;\r\n          const message = translate.instant('igo.core.network.online.message');\r\n          const title = translate.instant('igo.core.network.online.title');\r\n          this.messageService.info(message, title);\r\n          this.state.connection = true;\r\n          this.emitEvent();\r\n        }\r\n      }, 10000);\r\n    });\r\n  }\r\n\r\n  private emitEvent() {\r\n    this.stateChangeEventEmitter.emit(this.state);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    try {\r\n      this.offlineSubscription.unsubscribe();\r\n      this.onlineSubscription.unsubscribe();\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  currentState(reportState = true): Observable<ConnectionState> {\r\n    return reportState ?\r\n    this.stateChangeEventEmitter.pipe(\r\n      debounceTime(300),\r\n      startWith(this.state),\r\n    )\r\n    :\r\n    this.stateChangeEventEmitter.pipe(\r\n      debounceTime(300)\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NetworkService } from './network.service';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n  providers: [NetworkService]\r\n})\r\nexport class NetworkModule { }\r\n"]}