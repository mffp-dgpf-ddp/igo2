{"version":3,"sources":["ng://@igo2/core/lib/activity/activity.service.ts","ng://@igo2/core/lib/activity/activity.interceptor.ts","ng://@igo2/core/lib/activity/activity.module.ts","ng://@igo2/core/lib/config/config.service.ts","ng://@igo2/core/lib/config/config.provider.ts","ng://@igo2/core/lib/config/config.module.ts","ng://@igo2/core/lib/language/shared/language.loader.ts","ng://@igo2/core/lib/language/shared/language.provider.ts","ng://@igo2/core/lib/language/shared/missing-translation.guard.ts","ng://@igo2/core/lib/language/language.module.ts","ng://@igo2/core/lib/message/message-center/message-center.component.ts","ng://@igo2/core/lib/message/message.module.ts","ng://@igo2/core/lib/message/shared/message.enum.ts","ng://@igo2/core/lib/message/shared/message.service.ts","ng://@igo2/core/lib/language/shared/language.service.ts","ng://@igo2/core/lib/request/error.interceptor.ts","ng://@igo2/core/lib/request/error.module.ts","ng://@igo2/core/lib/core.module.ts","ng://@igo2/core/lib/request/logging.interceptor.ts","ng://@igo2/core/lib/request/logging.module.ts","ng://@igo2/core/lib/route/route.service.ts","ng://@igo2/core/lib/analytics/shared/analytics.service.ts","ng://@igo2/core/lib/media/media.enum.ts","ng://@igo2/core/lib/media/media.service.ts","ng://@igo2/core/lib/network/network.service.ts","ng://@igo2/core/lib/network/network.module.ts"],"names":["ActivityService","this","counter$","BehaviorSubject","ids","prototype","register","id","uuid","push","next","length","unregister","index","indexOf","splice","Injectable","args","providedIn","ActivityInterceptor","activityService","intercept","req","_this","activity","headers","get","actReq","clone","delete","handle","pipe","finalize","IgoActivityModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","declarations","exports","ConfigService","injector","config","getConfig","key","ObjectUtils","resolve","load","options","baseConfig","default","path","http","HttpClient","Promise","reject","catchError","error","console","log","throwError","subscribe","configResponse","mergeDeep","Injector","CONFIG_OPTIONS","InjectionToken","provideConfigOptions","useValue","configFactory","configService","provideConfigLoader","APP_INITIALIZER","useFactory","deps","IgoConfigModule","LanguageLoader","prefix","suffix","getTranslation","lang","translation","require","igoLocale$","of","appLocale$","combineLatest","map","translations","Object","assign","defaultLanguageLoader","undefined","provideDefaultLanguageLoader","loader","TranslateLoader","IgoMissingTranslationHandler","params","translateService","langs","Error","IgoLanguageModule","TranslateModule","MissingTranslationHandler","i1$1","MessageCenterComponent","_options","defaultOptions","value","configurable","timeOut","hasCloseIcon","showProgressBar","pauseOnHover","clickToClose","maxLength","maxStack","preventDuplicates","Component","selector","styles","Input","IgoMessageModule","CommonModule","common","i1","SimpleNotificationsModule","MessageType","ERROR","ALERT","INFO","MessageService","notificationService","messages$","rxjs","httpError","caught","message","title","notification","concat","text","create","html","icon","theClass","addIcon","type","SUCCESS","remove","template","replace","NotificationsService","ngInjectableDef","i0","defineInjectable","factory","inject","token","LanguageService","translate","getLanguage","setDefaultLang","browserLang","getBrowserLang","match","language","use","reloadLang","TranslateService","ErrorInterceptor","messageService","handleUncaughtError","msg","method","HttpErrorResponse","status","statusText","errorObj","url","toDisplay","instant","IgoErrorModule","IgoCoreModule","matIconRegistry","domSanitizer","addSvgIconSet","bypassSecurityTrustResourceUrl","HttpClientModule","DomSanitizer","LoggingInterceptor","urlWithParams","ok","elapsed","IgoLoggingModule","RouteService","route","centerKey","zoomKey","projectionKey","contextKey","searchKey","visibleOnLayersKey","visibleOffLayersKey","routingCoordKey","toolKey","llcKKey","llcAKey","llcVKey","llcRKey","queryParams","i1$2","ActivatedRoute","ROUTE_SERVICE_OPTIONS","AnalyticsService","provider","initMatomo","paq","_paq","s","document","getElementsByTagName","g","async","defer","src","parentNode","insertBefore","Media","Mobile","Tablet","MediaOrientation","Portrait","MediaService","breakpointObserver","media$","orientation$","observe","i1$3","Breakpoints","HandsetLandscape","res","matches","Landscape","Desktop","BreakpointObserver","NetworkService","network","platform","stateChangeEventEmitter","EventEmitter","state","connection","window","navigator","onLine","is","initializeService","checkNetworkState","info","emitEvent","Connection","NONE","connectionType","emit","offlineSubscription","unsubscribe","onlineSubscription","e","reportState","operators","debounceTime","Network","Platform","INJECTOR","i2","i3","NetworkModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { uuid } from '@igo2/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityService {\r\n  public counter$ = new BehaviorSubject<number>(0);\r\n\r\n  private ids: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  register(): string {\r\n    const id = uuid();\r\n    this.ids.push(id);\r\n    this.counter$.next(this.ids.length);\r\n\r\n    return id;\r\n  }\r\n\r\n  unregister(id: string) {\r\n    const index = this.ids.indexOf(id);\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n    this.ids.splice(index, 1);\r\n\r\n    this.counter$.next(this.ids.length);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ActivityService } from './activity.service';\r\n\r\n@Injectable()\r\nexport class ActivityInterceptor implements HttpInterceptor {\r\n  constructor(private activityService: ActivityService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const activity = req.headers.get('activityInterceptor');\r\n    if (activity) {\r\n      const actReq = req.clone({\r\n        headers: req.headers.delete('activityInterceptor')\r\n      });\r\n      if (activity === 'false') {\r\n        return next.handle(actReq);\r\n      }\r\n    }\r\n\r\n    const id = this.activityService.register();\r\n\r\n    return next.handle(req).pipe(\r\n      finalize(() => {\r\n        this.activityService.unregister(id);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ActivityInterceptor } from './activity.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoActivityModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoActivityModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: ActivityInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { ConfigOptions } from './config.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigService {\r\n\r\n  private config: object = {};\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  /**\r\n   * Use to get the data found in config file\r\n   */\r\n  public getConfig(key: string): any {\r\n    return ObjectUtils.resolve(this.config, key);\r\n  }\r\n\r\n  /**\r\n   * This method loads \"[path]\" to get all config's variables\r\n   */\r\n  public load(options: ConfigOptions) {\r\n    const baseConfig = options.default || {};\r\n    if (!options.path) {\r\n      this.config = baseConfig;\r\n      return true;\r\n    }\r\n\r\n    const http = this.injector.get(HttpClient);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      http\r\n        .get(options.path)\r\n        .pipe(\r\n          catchError(\r\n            (error: any): any => {\r\n              console.log(\r\n                `Configuration file ${options.path} could not be read`\r\n              );\r\n              resolve(true);\r\n              return throwError(error.error || 'Server error');\r\n            }\r\n          )\r\n        )\r\n        .subscribe(configResponse => {\r\n          this.config = ObjectUtils.mergeDeep(baseConfig, configResponse);\r\n          resolve(true);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import { APP_INITIALIZER, InjectionToken } from '@angular/core';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { ConfigOptions } from './config.interface';\r\n\r\nexport let CONFIG_OPTIONS = new InjectionToken<ConfigOptions>('configOptions');\r\n\r\nexport function provideConfigOptions(options: ConfigOptions) {\r\n  return {\r\n    provide: CONFIG_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\nexport function configFactory(\r\n  configService: ConfigService,\r\n  options: ConfigOptions\r\n) {\r\n  return () => configService.load(options);\r\n}\r\n\r\nexport function provideConfigLoader() {\r\n  return {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: configFactory,\r\n    multi: true,\r\n    deps: [ConfigService, CONFIG_OPTIONS]\r\n  };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { provideConfigOptions, provideConfigLoader } from './config.provider';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoConfigModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoConfigModule,\r\n      providers: [provideConfigOptions({}), provideConfigLoader()]\r\n    };\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { of, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\ndeclare function require(arg: string): any;\r\n\r\nexport class LanguageLoader implements TranslateLoader {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private prefix?: string,\r\n    private suffix: string = '.json',\r\n    private config?: ConfigService\r\n  ) {}\r\n\r\n  public getTranslation(lang: string): any {\r\n    const translation = require(`../locale/${lang}.json`);\r\n    const igoLocale$ = of(translation);\r\n\r\n    if (this.config && !this.prefix) {\r\n      this.prefix = this.config.getConfig('language.prefix');\r\n    }\r\n\r\n    if (!this.prefix) {\r\n      return igoLocale$;\r\n    }\r\n\r\n    const appLocale$ = this.http.get(`${this.prefix}${lang}${this.suffix}`);\r\n\r\n    const locale$ = combineLatest(igoLocale$, appLocale$);\r\n\r\n    return locale$.pipe(\r\n      map(translations => {\r\n        return Object.assign(translations[0], translations[1]);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\nimport { LanguageLoader } from './language.loader';\r\n\r\nexport function defaultLanguageLoader(\r\n  http: HttpClient,\r\n  config?: ConfigService\r\n) {\r\n  return new LanguageLoader(http, undefined, undefined, config);\r\n}\r\n\r\nexport function provideLanguageLoader(loader?) {\r\n  return {\r\n    provide: TranslateLoader,\r\n    useFactory: loader || defaultLanguageLoader,\r\n    deps: [HttpClient]\r\n  };\r\n}\r\n\r\nexport function provideDefaultLanguageLoader(loader?) {\r\n  return {\r\n    provide: TranslateLoader,\r\n    useFactory: loader || defaultLanguageLoader,\r\n    deps: [HttpClient, ConfigService]\r\n  };\r\n}\r\n","import {\r\n  MissingTranslationHandler,\r\n  MissingTranslationHandlerParams\r\n} from '@ngx-translate/core';\r\n\r\nexport class IgoMissingTranslationHandler implements MissingTranslationHandler {\r\n  handle(params: MissingTranslationHandlerParams) {\r\n    if (!params.translateService.langs.length) {\r\n      const error =\r\n        'Translations are not yet loaded. \\\r\n         Check that the LanguageService is injected.';\r\n      throw new Error(error);\r\n    }\r\n    throw new Error(`The Key \"${params.key}\" is missing in locale file.`);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport {\r\n  TranslateModule,\r\n  MissingTranslationHandler\r\n} from '@ngx-translate/core';\r\n\r\nimport { provideDefaultLanguageLoader } from './shared/language.provider';\r\nimport { IgoMissingTranslationHandler } from './shared/missing-translation.guard';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TranslateModule.forRoot({\r\n      missingTranslationHandler: {\r\n        provide: MissingTranslationHandler,\r\n        useClass: IgoMissingTranslationHandler\r\n      }\r\n    })\r\n  ],\r\n  declarations: [],\r\n  exports: [TranslateModule]\r\n})\r\nexport class IgoLanguageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLanguageModule,\r\n      providers: [provideDefaultLanguageLoader()]\r\n    };\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-message-center',\r\n  templateUrl: './message-center.component.html',\r\n  styleUrls: ['./message-center.component.scss']\r\n})\r\nexport class MessageCenterComponent {\r\n  static defaultOptions = {\r\n    timeOut: 5000,\r\n    hasCloseIcon: false,\r\n    showProgressBar: true,\r\n    pauseOnHover: true,\r\n    clickToClose: true,\r\n    maxLength: 100,\r\n    maxStack: 3,\r\n    preventDuplicates: true\r\n  };\r\n\r\n  @Input()\r\n  get options(): any {\r\n    return Object.assign(\r\n      {},\r\n      MessageCenterComponent.defaultOptions,\r\n      this._options\r\n    );\r\n  }\r\n  set options(value: any) {\r\n    this._options = value;\r\n  }\r\n  private _options: any = {};\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\n\r\nimport { MessageCenterComponent } from './message-center/message-center.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SimpleNotificationsModule.forRoot()],\r\n  declarations: [MessageCenterComponent],\r\n  exports: [MessageCenterComponent]\r\n})\r\nexport class IgoMessageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoMessageModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","export enum MessageType {\r\n  ERROR = 'error',\r\n  ALERT = 'alert',\r\n  INFO = 'info',\r\n  SUCCESS = 'success'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Notification, NotificationsService, NotificationType} from 'angular2-notifications';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\nimport { Message, MessageOptions } from './message.interface';\r\nimport { MessageType } from './message.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  public messages$ = new BehaviorSubject<Message[]>([]);\r\n  private options: MessageOptions;\r\n\r\n  constructor(\r\n    private notificationService: NotificationsService,\r\n    private configService: ConfigService\r\n  ) {\r\n    this.options = this.configService.getConfig('message') || {};\r\n  }\r\n\r\n  showError(httpError: HttpErrorResponse) {\r\n    httpError.error.caught = true;\r\n    return this.error(httpError.error.message, httpError.error.title);\r\n  }\r\n\r\n  message(message: Message) {\r\n    this.messages$.next(this.messages$.value.concat([message]));\r\n\r\n    message.options = message.options || {};\r\n    message = this.handleTemplate(message);\r\n\r\n    let notification: Notification;\r\n    if (message.text) {\r\n      notification = this.notificationService.create(\r\n        message.title,\r\n        message.text,\r\n        (message.type as any) as NotificationType,\r\n        message.options\r\n      );\r\n    } else if (message.html) {\r\n      if (!message.icon) {\r\n        message.options.theClass = message.options.theClass\r\n          ? message.options.theClass + ' noIcon'\r\n          : 'noIcon';\r\n      }\r\n\r\n      notification = this.notificationService.html(\r\n        message.html,\r\n        (message.type as any) as NotificationType,\r\n        message.options\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (message.icon !== undefined) {\r\n      this.addIcon(notification, message.icon);\r\n    }\r\n\r\n    return notification;\r\n  }\r\n\r\n  success(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'check',\r\n      options,\r\n      type: MessageType.SUCCESS\r\n    });\r\n  }\r\n\r\n  error(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'error_outline',\r\n      options,\r\n      type: MessageType.ERROR\r\n    });\r\n  }\r\n\r\n  info(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'info_outline',\r\n      options,\r\n      type: MessageType.INFO\r\n    });\r\n  }\r\n\r\n  alert(text: string, title?: string, options: any = {}) {\r\n    return this.message({\r\n      text,\r\n      title,\r\n      icon: options.icon || 'access_alarm',\r\n      options,\r\n      type: MessageType.ALERT\r\n    });\r\n  }\r\n\r\n  remove(id?: string) {\r\n    this.notificationService.remove(id);\r\n  }\r\n\r\n  private addIcon(notification: Notification, icon: string) {\r\n    // There is no way to add an icon to a notification when reating\r\n    // it so we simply set it on the notification directly.\r\n    // See https://github.com/flauc/angular2-notifications/issues/165\r\n    notification.icon = `\r\n      <mat-icon class=\"material-icons mat-icon mat-list-avatar\" svgIcon=\"${icon}\">\r\n      </mat-icon>`;\r\n  }\r\n\r\n  private handleTemplate(message: Message): Message {\r\n    if (!this.options.template || message.html) {\r\n      return message;\r\n    }\r\n\r\n    let html = this.options.template;\r\n    html = html.replace('${text}', message.text);\r\n    html = html.replace('${title}', message.title);\r\n    html = html.replace('${icon}', message.icon);\r\n\r\n    message.html = html;\r\n    message.text = undefined;\r\n    message.title = undefined;\r\n    message.icon = undefined;\r\n    return message;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService {\r\n  constructor(public translate: TranslateService) {\r\n    const lang = this.getLanguage();\r\n    this.translate.setDefaultLang(lang);\r\n  }\r\n\r\n  public getLanguage(): string {\r\n    const browserLang = this.translate.getBrowserLang();\r\n    return browserLang.match(/en|fr/) ? browserLang : 'en';\r\n  }\r\n\r\n  public setLanguage(language: string) {\r\n    this.translate.use(language);\r\n    this.translate.reloadLang(language);\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n  HttpEvent,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../message/shared/message.service';\r\nimport { LanguageService } from '../language/shared/language.service';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  private httpError: HttpErrorResponse;\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n      catchError(error => this.handleError(error, req)),\r\n      finalize(() => this.handleCaughtError()),\r\n      finalize(() => this.handleUncaughtError())\r\n    );\r\n  }\r\n\r\n  private handleError(httpError: HttpErrorResponse, req: HttpRequest<any>) {\r\n    const msg = `${req.method} ${req.urlWithParams} ${httpError.status} (${\r\n      httpError.statusText\r\n    })`;\r\n\r\n    if (httpError instanceof HttpErrorResponse) {\r\n      const errorObj = httpError.error === 'object' ? httpError.error : {};\r\n      errorObj.message = httpError.error.message || httpError.statusText;\r\n      errorObj.caught = false;\r\n      console.error(msg, '\\n', errorObj.message, '\\n\\n', httpError);\r\n\r\n      this.httpError = new HttpErrorResponse({\r\n        error: errorObj,\r\n        headers: httpError.headers,\r\n        status: httpError.status,\r\n        statusText: httpError.statusText,\r\n        url: httpError.url\r\n      });\r\n    }\r\n\r\n    return throwError(this.httpError);\r\n  }\r\n\r\n  private handleCaughtError() {\r\n    if (this.httpError && this.httpError.error.toDisplay) {\r\n      this.httpError.error.caught = true;\r\n      this.messageService.error(\r\n        this.httpError.error.message,\r\n        this.httpError.error.title\r\n      );\r\n    }\r\n  }\r\n\r\n  private handleUncaughtError() {\r\n    if (this.httpError && !this.httpError.error.caught) {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.errors.uncaught.message');\r\n      const title = translate.instant('igo.core.errors.uncaught.title');\r\n      this.httpError.error.caught = true;\r\n      this.messageService.error(message, title);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ErrorInterceptor } from './error.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoErrorModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoErrorModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: ErrorInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material';\r\n\r\nimport { IgoActivityModule } from './activity/activity.module';\r\nimport { IgoConfigModule } from './config/config.module';\r\nimport { IgoLanguageModule } from './language/language.module';\r\nimport { IgoMessageModule } from './message/message.module';\r\nimport { IgoErrorModule } from './request/error.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    IgoActivityModule.forRoot(),\r\n    IgoConfigModule.forRoot(),\r\n    IgoErrorModule.forRoot(),\r\n    IgoLanguageModule.forRoot(),\r\n    IgoMessageModule.forRoot()\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n    IgoActivityModule,\r\n    IgoConfigModule,\r\n    IgoErrorModule,\r\n    IgoLanguageModule,\r\n    IgoMessageModule\r\n  ]\r\n})\r\nexport class IgoCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCoreModule,\r\n      providers: []\r\n    };\r\n  }\r\n\r\n  constructor(matIconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    matIconRegistry.addSvgIconSet(\r\n      domSanitizer.bypassSecurityTrustResourceUrl(\r\n        './assets/igo2/core/icons/mdi.svg'\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpRequest,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { tap, finalize } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class LoggingInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const started = Date.now();\r\n    let ok: string;\r\n\r\n    // extend server response observable with logging\r\n    return next.handle(req).pipe(\r\n      tap(\r\n        // Succeeds when there is a response; ignore other events\r\n        event => (ok = event instanceof HttpResponse ? 'succeeded' : ''),\r\n        // Operation failed; error is an HttpErrorResponse\r\n        error => (ok = 'failed')\r\n      ),\r\n      // Log when response observable either completes or errors\r\n      finalize(() => {\r\n        const elapsed = Date.now() - started;\r\n        const msg = `${req.method} \"${req.urlWithParams}\"\r\n             ${ok} in ${elapsed} ms.`;\r\n\r\n        console.log(msg);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { LoggingInterceptor } from './logging.interceptor';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class IgoLoggingModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoLoggingModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: LoggingInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject, InjectionToken, Optional } from '@angular/core';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { RouteServiceOptions } from './route.interface';\r\n\r\nexport let ROUTE_SERVICE_OPTIONS = new InjectionToken<RouteServiceOptions>(\r\n  'routeServiceOptions'\r\n);\r\n\r\nexport function provideRouteServiceOptions(options: RouteServiceOptions) {\r\n  return {\r\n    provide: ROUTE_SERVICE_OPTIONS,\r\n    useValue: options\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RouteService {\r\n  public options: RouteServiceOptions;\r\n\r\n  constructor(\r\n    public route: ActivatedRoute,\r\n    @Inject(ROUTE_SERVICE_OPTIONS)\r\n    @Optional()\r\n    options: RouteServiceOptions\r\n  ) {\r\n    const defaultOptions = {\r\n      centerKey: 'center',\r\n      zoomKey: 'zoom',\r\n      projectionKey: 'projection',\r\n      contextKey: 'context',\r\n      searchKey: 'search',\r\n      visibleOnLayersKey: 'visiblelayers',\r\n      visibleOffLayersKey: 'invisiblelayers',\r\n      routingCoordKey: 'routing',\r\n      toolKey: 'tool',\r\n      llcKKey: 'llck',\r\n      llcAKey: 'llca',\r\n      llcVKey: 'llcv',\r\n      llcRKey: 'llcr'\r\n    };\r\n    this.options = Object.assign({}, defaultOptions, options);\r\n  }\r\n\r\n  get queryParams(): Observable<Params> {\r\n    return this.route.queryParams;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigService } from '../../config/config.service';\r\n\r\nimport { AnalyticsOptions } from './analytics.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AnalyticsService {\r\n  private options: AnalyticsOptions;\r\n\r\n  constructor(private config: ConfigService) {\r\n    this.options = this.config.getConfig('analytics') || {};\r\n\r\n    if (this.options.provider === 'matomo') {\r\n      this.initMatomo();\r\n    }\r\n  }\r\n\r\n  private initMatomo() {\r\n    if (!this.options.url || !this.options.id) {\r\n      return;\r\n    }\r\n\r\n    (window as any)._paq = (window as any)._paq || [];\r\n    const paq: any = (window as any)._paq;\r\n    paq.push(['trackPageView']);\r\n    paq.push(['enableLinkTracking']);\r\n    (() => {\r\n      paq.push(['setTrackerUrl', this.options.url + 'matomo.php']);\r\n      paq.push(['setSiteId', this.options.id]);\r\n      const g = document.createElement('script');\r\n      const s = document.getElementsByTagName('script')[0];\r\n      g.type = 'text/javascript';\r\n      g.async = true;\r\n      g.defer = true;\r\n      g.src = this.options.url + 'matomo.js';\r\n      s.parentNode.insertBefore(g, s);\r\n    })();\r\n  }\r\n}\r\n","export enum Media {\r\n  Mobile = 'mobile',\r\n  Tablet = 'tablet',\r\n  Desktop = 'desktop'\r\n}\r\n\r\nexport enum MediaOrientation {\r\n  Portrait = 'portrait',\r\n  Landscape = 'landscape'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Media, MediaOrientation } from './media.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MediaService {\r\n  public media$ = new BehaviorSubject<Media>(undefined);\r\n  public orientation$ = new BehaviorSubject<MediaOrientation>(undefined);\r\n\r\n  constructor(breakpointObserver: BreakpointObserver) {\r\n    breakpointObserver\r\n      .observe([Breakpoints.HandsetLandscape])\r\n      .subscribe(res => {\r\n        if (res.matches) {\r\n          this.media$.next(Media.Mobile);\r\n          this.orientation$.next(MediaOrientation.Landscape);\r\n        }\r\n      });\r\n\r\n    breakpointObserver.observe([Breakpoints.HandsetPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Mobile);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.TabletLandscape]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Tablet);\r\n        this.orientation$.next(MediaOrientation.Landscape);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.TabletPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Tablet);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.WebLandscape]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Desktop);\r\n        this.orientation$.next(MediaOrientation.Landscape);\r\n      }\r\n    });\r\n\r\n    breakpointObserver.observe([Breakpoints.WebPortrait]).subscribe(res => {\r\n      if (res.matches) {\r\n        this.media$.next(Media.Desktop);\r\n        this.orientation$.next(MediaOrientation.Portrait);\r\n      }\r\n    });\r\n  }\r\n\r\n  getMedia(): Media {\r\n    return this.media$.value;\r\n  }\r\n\r\n  getOrientation(): MediaOrientation {\r\n    return this.orientation$.value;\r\n  }\r\n}\r\n","import { Injectable, EventEmitter, OnDestroy, AfterViewInit, OnInit, Injector } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { debounceTime, startWith } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../message';\r\nimport { LanguageService } from '../language/shared/language.service';\r\n\r\nimport { Network } from '@ionic-native/network/ngx';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nexport interface ConnectionState {\r\n  connection: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NetworkService implements OnDestroy {\r\n\r\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\r\n  private onlineSubscription: Subscription;\r\n  private offlineSubscription: Subscription;\r\n  private connectionType: string;\r\n\r\n  private state: ConnectionState = {\r\n    connection: window.navigator.onLine\r\n  };\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private injector: Injector,\r\n    private network: Network,\r\n    private platform: Platform\r\n\r\n    ) {\r\n      console.log(this.platform + 'premier');\r\n      this.platform.ready().then(() => {\r\n        console.log(this.platform);\r\n        if (this.platform.is('cordova')) {\r\n          console.log('cordova');\r\n          if (this.platform.is('android')) {\r\n            console.log('android');\r\n            this.initializeService();\r\n          }\r\n        } else {\r\n          console.log('browser');\r\n          this.checkNetworkState();\r\n        }\r\n      });\r\n  }\r\n\r\n  private checkNetworkState() {\r\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.online.message');\r\n      const title = translate.instant('igo.core.network.online.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = true;\r\n      this.emitEvent();\r\n    });\r\n\r\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\r\n      const translate = this.injector.get(LanguageService).translate;\r\n      const message = translate.instant('igo.core.network.offline.message');\r\n      const title = translate.instant('igo.core.network.offline.title');\r\n      this.messageService.info(message, title);\r\n      this.state.connection = false;\r\n      this.emitEvent();\r\n    });\r\n  }\r\n\r\n  initializeService() {\r\n\r\n    if (this.network.type !== this.network.Connection.NONE) {\r\n      this.connectionType = this.network.type;\r\n      this.state.connection = true;\r\n    }\r\n\r\n    this.offlineSubscription = this.network.onDisconnect().subscribe(() => {\r\n      this.state.connection = false;\r\n      setTimeout(() => {\r\n        if (!this.state.connection) {\r\n          const translate = this.injector.get(LanguageService).translate;\r\n          const message = translate.instant('igo.core.network.offline.message');\r\n          const title = translate.instant('igo.core.network.offline.title');\r\n          this.messageService.info(message, title);\r\n          this.state.connection = false;\r\n          this.emitEvent();\r\n        }\r\n      }, 10000);\r\n    });\r\n\r\n    this.onlineSubscription = this.network.onConnect().subscribe(() => {\r\n      this.state.connection = true;\r\n      setTimeout(() => {\r\n        if (!this.state.connection) {\r\n          const translate = this.injector.get(LanguageService).translate;\r\n          const message = translate.instant('igo.core.network.online.message');\r\n          const title = translate.instant('igo.core.network.online.title');\r\n          this.messageService.info(message, title);\r\n          this.state.connection = true;\r\n          this.emitEvent();\r\n        }\r\n      }, 10000);\r\n    });\r\n  }\r\n\r\n  private emitEvent() {\r\n    this.stateChangeEventEmitter.emit(this.state);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    try {\r\n      this.offlineSubscription.unsubscribe();\r\n      this.onlineSubscription.unsubscribe();\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  currentState(reportState = true): Observable<ConnectionState> {\r\n    return reportState ?\r\n    this.stateChangeEventEmitter.pipe(\r\n      debounceTime(300),\r\n      startWith(this.state),\r\n    )\r\n    :\r\n    this.stateChangeEventEmitter.pipe(\r\n      debounceTime(300)\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NetworkService } from './network.service';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n  providers: [NetworkService]\r\n})\r\nexport class NetworkModule { }\r\n"]}