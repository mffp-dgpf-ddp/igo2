/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { EntityStore } from './store';
import { EntityOperationType } from './entity.enums';
import { getEntityId } from './entity.utils';
/**
 * This class holds a reference to the insert, update and delete
 * operations performed on a store. This is useful to commit
 * these operations in a single pass or to cancel them.
 */
var /**
 * This class holds a reference to the insert, update and delete
 * operations performed on a store. This is useful to commit
 * these operations in a single pass or to cancel them.
 */
EntityTransaction = /** @class */ (function () {
    function EntityTransaction(options) {
        if (options === void 0) { options = {}; }
        this._inCommitPhase = false;
        this.getKey = options.getKey ? options.getKey : getEntityId;
        this.operations = new EntityStore([], {
            getKey: (/**
             * @param {?} operation
             * @return {?}
             */
            function (operation) { return operation.key; })
        });
    }
    Object.defineProperty(EntityTransaction.prototype, "empty", {
        /**
         * Whether there are pending operations
         */
        get: /**
         * Whether there are pending operations
         * @return {?}
         */
        function () { return this.operations.entities$.value.length === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityTransaction.prototype, "inCommitPhase", {
        /**
         * Whether thise store is in commit phase
         */
        get: /**
         * Whether thise store is in commit phase
         * @return {?}
         */
        function () { return this._inCommitPhase; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    EntityTransaction.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.operations.destroy();
    };
    /**
     * Insert an entity into a store. If no store is specified, an insert
     * operation is still created but the transaction won't add the new
     * entity to the store.
     * @param current The entity to insert
     * @param store Optional: The store to insert the entity into
     * @param meta Optional: Any metadata on the operation
     */
    /**
     * Insert an entity into a store. If no store is specified, an insert
     * operation is still created but the transaction won't add the new
     * entity to the store.
     * @param {?} current The entity to insert
     * @param {?=} store Optional: The store to insert the entity into
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    EntityTransaction.prototype.insert = /**
     * Insert an entity into a store. If no store is specified, an insert
     * operation is still created but the transaction won't add the new
     * entity to the store.
     * @param {?} current The entity to insert
     * @param {?=} store Optional: The store to insert the entity into
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    function (current, store, meta) {
        /** @type {?} */
        var existingOperation = this.getOperationByEntity(current);
        if (existingOperation !== undefined) {
            this.removeOperation(existingOperation);
        }
        this.doInsert(current, store, meta);
    };
    /**
     * Update an entity in a store. If no store is specified, an update
     * operation is still created but the transaction won't update the
     * entity into the store.
     * @param previous The entity before update
     * @param current The entity after update
     * @param store Optional: The store to update the entity into
     * @param meta Optional: Any metadata on the operation
     */
    /**
     * Update an entity in a store. If no store is specified, an update
     * operation is still created but the transaction won't update the
     * entity into the store.
     * @param {?} previous The entity before update
     * @param {?} current The entity after update
     * @param {?=} store Optional: The store to update the entity into
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    EntityTransaction.prototype.update = /**
     * Update an entity in a store. If no store is specified, an update
     * operation is still created but the transaction won't update the
     * entity into the store.
     * @param {?} previous The entity before update
     * @param {?} current The entity after update
     * @param {?=} store Optional: The store to update the entity into
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    function (previous, current, store, meta) {
        /** @type {?} */
        var existingOperation = this.getOperationByEntity(current);
        if (existingOperation !== undefined) {
            this.removeOperation(existingOperation);
            if (existingOperation.type === EntityOperationType.Insert) {
                this.doInsert(current, store, meta);
                return;
            }
        }
        this.doUpdate(previous, current, store, meta);
    };
    /**
     * Delete an entity from a store. If no store is specified, a delete
     * operation is still created but the transaction won't remove the
     * entity from the store.
     * @param previous The entity before delete
     * @param store Optional: The store to delete the entity from
     * @param meta Optional: Any metadata on the operation
     */
    /**
     * Delete an entity from a store. If no store is specified, a delete
     * operation is still created but the transaction won't remove the
     * entity from the store.
     * @param {?} previous The entity before delete
     * @param {?=} store Optional: The store to delete the entity from
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    EntityTransaction.prototype.delete = /**
     * Delete an entity from a store. If no store is specified, a delete
     * operation is still created but the transaction won't remove the
     * entity from the store.
     * @param {?} previous The entity before delete
     * @param {?=} store Optional: The store to delete the entity from
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    function (previous, store, meta) {
        /** @type {?} */
        var existingOperation = this.getOperationByEntity(previous);
        if (existingOperation !== undefined) {
            this.removeOperation(existingOperation);
            if (existingOperation.type === EntityOperationType.Insert) {
                if (store !== undefined) {
                    store.delete(previous);
                }
                return;
            }
        }
        this.doDelete(previous, store, meta);
    };
    /**
     * Commit operations the transaction. This method doesn't do much
     * in itself. The handler it receives does the hard work and it's
     * implementation is left to the caller. This method simply wraps
     * the handler into an error catching mechanism to update
     * the transaction afterward. The caller needs to subscribe to this
     * method's output (observable) for the commit to be performed.
     * @param operations Operations to commit
     * @param handler Function that handles the commit operation
     * @returns The handler output (observable)
     */
    /**
     * Commit operations the transaction. This method doesn't do much
     * in itself. The handler it receives does the hard work and it's
     * implementation is left to the caller. This method simply wraps
     * the handler into an error catching mechanism to update
     * the transaction afterward. The caller needs to subscribe to this
     * method's output (observable) for the commit to be performed.
     * @param {?} operations Operations to commit
     * @param {?} handler Function that handles the commit operation
     * @return {?} The handler output (observable)
     */
    EntityTransaction.prototype.commit = /**
     * Commit operations the transaction. This method doesn't do much
     * in itself. The handler it receives does the hard work and it's
     * implementation is left to the caller. This method simply wraps
     * the handler into an error catching mechanism to update
     * the transaction afterward. The caller needs to subscribe to this
     * method's output (observable) for the commit to be performed.
     * @param {?} operations Operations to commit
     * @param {?} handler Function that handles the commit operation
     * @return {?} The handler output (observable)
     */
    function (operations, handler) {
        var _this = this;
        this._inCommitPhase = true;
        return handler(this, operations)
            .pipe(catchError((/**
         * @return {?}
         */
        function () { return of(new Error()); })), tap((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (result instanceof Error) {
                _this.onCommitError(operations);
            }
            else {
                _this.onCommitSuccess(operations);
            }
        })));
    };
    /**
     * Commit all the operations of the transaction.
     * @param handler Function that handles the commit operation
     * @returns The handler output (observable)
     */
    /**
     * Commit all the operations of the transaction.
     * @param {?} handler Function that handles the commit operation
     * @return {?} The handler output (observable)
     */
    EntityTransaction.prototype.commitAll = /**
     * Commit all the operations of the transaction.
     * @param {?} handler Function that handles the commit operation
     * @return {?} The handler output (observable)
     */
    function (handler) {
        /** @type {?} */
        var operations = this.getOperationsInCommit();
        return this.commit(operations, handler);
    };
    /**
     * Rollback this transaction
     */
    /**
     * Rollback this transaction
     * @return {?}
     */
    EntityTransaction.prototype.rollback = /**
     * Rollback this transaction
     * @return {?}
     */
    function () {
        this.rollbackOperations(this.operations.all());
    };
    /**
     * Rollback specific operations
     */
    /**
     * Rollback specific operations
     * @param {?} operations
     * @return {?}
     */
    EntityTransaction.prototype.rollbackOperations = /**
     * Rollback specific operations
     * @param {?} operations
     * @return {?}
     */
    function (operations) {
        var e_1, _a;
        this.checkInCommitPhase();
        /** @type {?} */
        var operationsFactory = (/**
         * @return {?}
         */
        function () { return new Map([
            [EntityOperationType.Delete, []],
            [EntityOperationType.Update, []],
            [EntityOperationType.Insert, []]
        ]); });
        /** @type {?} */
        var storesOperations = new Map();
        try {
            // Group operations by store and by operation type.
            // Grouping operations allows us to revert them in bacth, thus, triggering
            // observables only one per operation type.
            for (var operations_1 = tslib_1.__values(operations), operations_1_1 = operations_1.next(); !operations_1_1.done; operations_1_1 = operations_1.next()) {
                var operation = operations_1_1.value;
                /** @type {?} */
                var store = operation.store;
                if (operation.store === undefined) {
                    continue;
                }
                /** @type {?} */
                var storeOperations = storesOperations.get(store);
                if (storeOperations === undefined) {
                    storeOperations = operationsFactory();
                    storesOperations.set(store, storeOperations);
                }
                storeOperations.get(operation.type).push(operation);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (operations_1_1 && !operations_1_1.done && (_a = operations_1.return)) _a.call(operations_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        Array.from(storesOperations.keys()).forEach((/**
         * @param {?} store
         * @return {?}
         */
        function (store) {
            /** @type {?} */
            var storeOperations = storesOperations.get(store);
            /** @type {?} */
            var deletes = storeOperations.get(EntityOperationType.Delete);
            store.insertMany(deletes.map((/**
             * @param {?} _delete
             * @return {?}
             */
            function (_delete) { return _delete.previous; })));
            /** @type {?} */
            var updates = storeOperations.get(EntityOperationType.Update);
            store.updateMany(updates.map((/**
             * @param {?} _update
             * @return {?}
             */
            function (_update) { return _update.previous; })));
            /** @type {?} */
            var inserts = storeOperations.get(EntityOperationType.Insert);
            store.deleteMany(inserts.map((/**
             * @param {?} _insert
             * @return {?}
             */
            function (_insert) { return _insert.current; })));
        }));
        this.operations.deleteMany(operations);
        this._inCommitPhase = false;
    };
    /**
     * Clear this transaction
     * @todo Raise event and synchronize stores?
     */
    /**
     * Clear this transaction
     * \@todo Raise event and synchronize stores?
     * @return {?}
     */
    EntityTransaction.prototype.clear = /**
     * Clear this transaction
     * \@todo Raise event and synchronize stores?
     * @return {?}
     */
    function () {
        this.operations.clear();
        this._inCommitPhase = false;
    };
    /**
     * Merge another transaction in this one
     * @param transaction Another transaction
     */
    /**
     * Merge another transaction in this one
     * @param {?} transaction Another transaction
     * @return {?}
     */
    EntityTransaction.prototype.mergeTransaction = /**
     * Merge another transaction in this one
     * @param {?} transaction Another transaction
     * @return {?}
     */
    function (transaction) {
        var _this = this;
        this.checkInCommitPhase();
        /** @type {?} */
        var operations = transaction.operations.all();
        operations.forEach((/**
         * @param {?} operation
         * @return {?}
         */
        function (operation) {
            _this.addOperation(operation);
        }));
    };
    /**
     * Create an insert operation and add an entity to the store
     * @param current The entity to insert
     * @param store Optional: The store to insert the entity into
     * @param meta Optional: Any metadata on the operation
     */
    /**
     * Create an insert operation and add an entity to the store
     * @private
     * @param {?} current The entity to insert
     * @param {?=} store Optional: The store to insert the entity into
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    EntityTransaction.prototype.doInsert = /**
     * Create an insert operation and add an entity to the store
     * @private
     * @param {?} current The entity to insert
     * @param {?=} store Optional: The store to insert the entity into
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    function (current, store, meta) {
        this.addOperation({
            key: this.getKey(current),
            type: EntityOperationType.Insert,
            previous: undefined,
            current: current,
            store: store,
            meta: meta
        });
        if (store !== undefined) {
            store.insert(current);
        }
    };
    /**
     * Create an update operation and update an entity into the store
     * @param previous The entity before update
     * @param current The entity after update
     * @param store Optional: The store to update the entity into
     * @param meta Optional: Any metadata on the operation
     */
    /**
     * Create an update operation and update an entity into the store
     * @private
     * @param {?} previous The entity before update
     * @param {?} current The entity after update
     * @param {?=} store Optional: The store to update the entity into
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    EntityTransaction.prototype.doUpdate = /**
     * Create an update operation and update an entity into the store
     * @private
     * @param {?} previous The entity before update
     * @param {?} current The entity after update
     * @param {?=} store Optional: The store to update the entity into
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    function (previous, current, store, meta) {
        this.addOperation({
            key: this.getKey(current),
            type: EntityOperationType.Update,
            previous: previous,
            current: current,
            store: store,
            meta: meta
        });
        if (store !== undefined) {
            store.update(current);
        }
    };
    /**
     * Create a delete operation and delete an entity from the store
     * @param previous The entity before delete
     * @param store Optional: The store to delete the entity from
     * @param meta Optional: Any metadata on the operation
     */
    /**
     * Create a delete operation and delete an entity from the store
     * @private
     * @param {?} previous The entity before delete
     * @param {?=} store Optional: The store to delete the entity from
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    EntityTransaction.prototype.doDelete = /**
     * Create a delete operation and delete an entity from the store
     * @private
     * @param {?} previous The entity before delete
     * @param {?=} store Optional: The store to delete the entity from
     * @param {?=} meta Optional: Any metadata on the operation
     * @return {?}
     */
    function (previous, store, meta) {
        this.addOperation({
            key: this.getKey(previous),
            type: EntityOperationType.Delete,
            previous: previous,
            current: undefined,
            store: store,
            meta: meta
        });
        if (store !== undefined) {
            store.delete(previous);
        }
    };
    /**
     * Remove committed operations from store
     * @param operations Commited operations
     * @todo Raise event and synchronize stores?
     */
    /**
     * Remove committed operations from store
     * \@todo Raise event and synchronize stores?
     * @private
     * @param {?} operations Commited operations
     * @return {?}
     */
    EntityTransaction.prototype.resolveOperations = /**
     * Remove committed operations from store
     * \@todo Raise event and synchronize stores?
     * @private
     * @param {?} operations Commited operations
     * @return {?}
     */
    function (operations) {
        this.operations.deleteMany(operations);
    };
    /**
     * On commit success, resolve commited operations and exit commit phase
     * @param operations Commited operations
     */
    /**
     * On commit success, resolve commited operations and exit commit phase
     * @private
     * @param {?} operations Commited operations
     * @return {?}
     */
    EntityTransaction.prototype.onCommitSuccess = /**
     * On commit success, resolve commited operations and exit commit phase
     * @private
     * @param {?} operations Commited operations
     * @return {?}
     */
    function (operations) {
        this.resolveOperations(operations);
        this._inCommitPhase = false;
    };
    /**
     * On commit error, abort transaction
     * @param operations Commited operations
     */
    /**
     * On commit error, abort transaction
     * @private
     * @param {?} operations Commited operations
     * @return {?}
     */
    EntityTransaction.prototype.onCommitError = /**
     * On commit error, abort transaction
     * @private
     * @param {?} operations Commited operations
     * @return {?}
     */
    function (operations) {
        this._inCommitPhase = false;
    };
    /**
     * Add an operation to the operations store
     * @param operation Operation to add
     */
    /**
     * Add an operation to the operations store
     * @private
     * @param {?} operation Operation to add
     * @return {?}
     */
    EntityTransaction.prototype.addOperation = /**
     * Add an operation to the operations store
     * @private
     * @param {?} operation Operation to add
     * @return {?}
     */
    function (operation) {
        this.checkInCommitPhase();
        this.operations.insert(operation);
        this.operations.state.update(operation, { added: true });
    };
    /**
     * Remove an operation from the operations store
     * @param operation Operation to remove
     */
    /**
     * Remove an operation from the operations store
     * @private
     * @param {?} operation Operation to remove
     * @return {?}
     */
    EntityTransaction.prototype.removeOperation = /**
     * Remove an operation from the operations store
     * @private
     * @param {?} operation Operation to remove
     * @return {?}
     */
    function (operation) {
        this.checkInCommitPhase();
        this.operations.delete(operation);
        this.operations.state.update(operation, { added: false });
    };
    /**
     * Get the any existing operation an entity
     * @param entity Entity
     * @returns Either an insert, update or delete operation
     */
    /**
     * Get the any existing operation an entity
     * @private
     * @param {?} entity Entity
     * @return {?} Either an insert, update or delete operation
     */
    EntityTransaction.prototype.getOperationByEntity = /**
     * Get the any existing operation an entity
     * @private
     * @param {?} entity Entity
     * @return {?} Either an insert, update or delete operation
     */
    function (entity) {
        return this.operations.get(this.getKey(entity));
    };
    /**
     * Get all the operations to commit
     * @returns Operations to commit
     */
    /**
     * Get all the operations to commit
     * @private
     * @return {?} Operations to commit
     */
    EntityTransaction.prototype.getOperationsInCommit = /**
     * Get all the operations to commit
     * @private
     * @return {?} Operations to commit
     */
    function () {
        return this.operations.stateView
            .manyBy((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value.state.added === true;
        }))
            .map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value.entity; }));
    };
    /**
     * Check if the transaction is in the commit phase and throw an error if it is
     */
    /**
     * Check if the transaction is in the commit phase and throw an error if it is
     * @private
     * @return {?}
     */
    EntityTransaction.prototype.checkInCommitPhase = /**
     * Check if the transaction is in the commit phase and throw an error if it is
     * @private
     * @return {?}
     */
    function () {
        if (this.inCommitPhase === true) {
            throw new Error('This transaction is in the commit phase. Cannot complete this operation.');
        }
    };
    return EntityTransaction;
}());
/**
 * This class holds a reference to the insert, update and delete
 * operations performed on a store. This is useful to commit
 * these operations in a single pass or to cancel them.
 */
export { EntityTransaction };
if (false) {
    /**
     * Store holding the operations on another store
     * @type {?}
     */
    EntityTransaction.prototype.operations;
    /**
     * Method to get an entity's id
     * @type {?}
     */
    EntityTransaction.prototype.getKey;
    /**
     * @type {?}
     * @private
     */
    EntityTransaction.prototype._inCommitPhase;
}
//# sourceMappingURL=data:application/json;base64,