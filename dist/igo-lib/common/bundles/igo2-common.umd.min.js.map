{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@igo2/common/lib/entity/shared/entity.enums.ts","ng://@igo2/common/lib/entity/shared/entity.utils.ts","ng://@igo2/common/lib/entity/shared/state.ts","ng://@igo2/common/lib/entity/shared/view.ts","ng://@igo2/common/lib/entity/shared/store.ts","ng://@igo2/common/lib/entity/shared/watcher.ts","ng://@igo2/common/lib/entity/shared/transaction.ts","ng://@igo2/common/lib/entity/entity-selector/entity-selector.component.ts","ng://@igo2/common/lib/entity/entity-table/entity-table.component.ts","ng://@igo2/common/lib/action/shared/action.enums.ts","ng://@igo2/common/lib/action/actionbar/actionbar.component.ts","ng://@igo2/common/lib/action/actionbar/actionbar-item.component.ts","ng://@igo2/common/lib/action/actionbar/actionbar.module.ts","ng://@igo2/common/lib/action/action.module.ts","ng://@igo2/common/lib/backdrop/backdrop.component.ts","ng://@igo2/common/lib/backdrop/backdrop.module.ts","ng://@igo2/common/lib/clickout/clickout.directive.ts","ng://@igo2/common/lib/clickout/clickout.module.ts","ng://@igo2/common/lib/clone/clone.pipe.ts","ng://@igo2/common/lib/clone/clone.module.ts","ng://@igo2/common/lib/collapsible/collapse.directive.ts","ng://@igo2/common/lib/collapsible/collapsible.component.ts","ng://@igo2/common/lib/collapsible/collapsible.module.ts","ng://@igo2/common/lib/confirm-dialog/confirm-dialog.component.ts","ng://@igo2/common/lib/confirm-dialog/confirm-dialog.service.ts","ng://@igo2/common/lib/confirm-dialog/confirm-dialog.module.ts","ng://@igo2/common/lib/context-menu/context-menu.directive.ts","ng://@igo2/common/lib/context-menu/context-menu.module.ts","ng://@igo2/common/lib/custom-html/custom-html.component.ts","ng://@igo2/common/lib/custom-html/custom-html.pipe.ts","ng://@igo2/common/lib/custom-html/custom-html.module.ts","ng://@igo2/common/lib/drag-drop/drag-drop.directive.ts","ng://@igo2/common/lib/drag-drop/drag-drop.module.ts","ng://@igo2/common/lib/dynamic-component/shared/dynamic-component.ts","ng://@igo2/common/lib/dynamic-component/shared/dynamic-component.service.ts","ng://@igo2/common/lib/dynamic-component/dynamic-outlet/dynamic-outlet.component.ts","ng://@igo2/common/lib/dynamic-component/dynamic-outlet/dynamic-outlet.module.ts","ng://@igo2/common/lib/dynamic-component/dynamic-component.module.ts","ng://@igo2/common/lib/flexible/flexible.component.ts","ng://@igo2/common/lib/flexible/flexible.module.ts","ng://@igo2/common/lib/form/shared/form.utils.ts","ng://@igo2/common/lib/form/form/form.component.ts","ng://@igo2/common/lib/form/form/form.module.ts","ng://@igo2/common/lib/form/shared/form-field.service.ts","ng://@igo2/common/lib/form/shared/form.service.ts","ng://@igo2/common/lib/form/shared/form-field-component.ts","ng://@igo2/common/lib/form/form-field/form-field.component.ts","ng://@igo2/common/lib/form/form-field/form-field-select.component.ts","ng://@igo2/common/lib/form/form-field/form-field-text.component.ts","ng://@igo2/common/lib/form/form-field/form-field-textarea.component.ts","ng://@igo2/common/lib/form/form-field/form-field.module.ts","ng://@igo2/common/lib/form/form-group/form-group.component.ts","ng://@igo2/common/lib/form/form-group/form-group.module.ts","ng://@igo2/common/lib/form/form.module.ts","ng://@igo2/common/lib/entity/entity-selector/entity-selector.module.ts","ng://@igo2/common/lib/stop-propagation/stop-drop-propagation.directive.ts","ng://@igo2/common/lib/stop-propagation/stop-propagation.directive.ts","ng://@igo2/common/lib/stop-propagation/stop-propagation.module.ts","ng://@igo2/common/lib/entity/entity-table/entity-table-row.directive.ts","ng://@igo2/common/lib/entity/entity-table/entity-table.module.ts","ng://@igo2/common/lib/entity/entity.module.ts","ng://@igo2/common/lib/image/secure-image.pipe.ts","ng://@igo2/common/lib/image/image.module.ts","ng://@igo2/common/lib/keyvalue/keyvalue.pipe.ts","ng://@igo2/common/lib/keyvalue/keyvalue.module.ts","ng://@igo2/common/lib/json-dialog/json-dialog.component.ts","ng://@igo2/common/lib/json-dialog/json-dialog.service.ts","ng://@igo2/common/lib/json-dialog/json-dialog.module.ts","ng://@igo2/common/lib/list/list-item.directive.ts","ng://@igo2/common/lib/list/list.component.ts","ng://@igo2/common/lib/list/list.module.ts","ng://@igo2/common/lib/panel/panel.component.ts","ng://@igo2/common/lib/panel/panel.module.ts","ng://@igo2/common/lib/sidenav/sidenav-shim.directive.ts","ng://@igo2/common/lib/sidenav/sidenav.module.ts","ng://@igo2/common/lib/spinner/spinner.component.ts","ng://@igo2/common/lib/spinner/spinner-activity.directive.ts","ng://@igo2/common/lib/spinner/spinner.module.ts","ng://@igo2/common/lib/table/table-datasource.ts","ng://@igo2/common/lib/table/table-action-color.enum.ts","ng://@igo2/common/lib/table/table.component.ts","ng://@igo2/common/lib/table/table.module.ts","ng://@igo2/common/lib/tool/shared/tool.service.ts","ng://@igo2/common/lib/action/shared/store.ts","ng://@igo2/common/lib/tool/toolbox/toolbox.animation.ts","ng://@igo2/common/lib/tool/toolbox/toolbox.component.ts","ng://@igo2/common/lib/tool/toolbox/toolbox.module.ts","ng://@igo2/common/lib/tool/tool.module.ts","ng://@igo2/common/lib/widget/widget-outlet/widget-outlet.component.ts","ng://@igo2/common/lib/widget/widget-outlet/widget-outlet.module.ts","ng://@igo2/common/lib/widget/shared/widget.service.ts","ng://@igo2/common/lib/widget/widget.module.ts","ng://@igo2/common/lib/workspace/workspace-selector/workspace-selector.component.ts","ng://@igo2/common/lib/workspace/workspace-selector/workspace-selector.module.ts","ng://@igo2/common/lib/workspace/workspace-widget-outlet/workspace-widget-outlet.component.ts","ng://@igo2/common/lib/workspace/workspace-widget-outlet/workspace-widget-outlet.module.ts","ng://@igo2/common/lib/workspace/workspace.module.ts","ng://@igo2/common/lib/table/table-database.ts","ng://@igo2/common/lib/tool/shared/toolbox.ts","ng://@igo2/common/lib/widget/shared/widget.ts","ng://@igo2/common/lib/workspace/shared/store.ts","ng://@igo2/common/lib/workspace/shared/workspace.ts","ng://@igo2/common/lib/tool/shared/tool-component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","__spread","concat","Insert","Update","Delete","Default","HTML","UnsanitizedHTML","Icon","ButtonGroup","Auto","Instant","Smooth","None","All","Some","getEntityProperty","entity","property","t","safeObject","getEntityId","meta","id","idProperty","getEntityTitle","title","titleProperty","EntityStateManager","clear","index","size","get","getKey","set","state","setMany","entities","_this","forEach","assign","setAll","from","keys","update","changes","exclusive","updateMany","updateManyExclusive","reverse","reverseMany","currentState","reduce","acc","reversedChanges","reverseChanges","updateAll","allKeys","getAllKeys","map","Set","indexOf","entries","bunch","_a","changeKey","storeKeys","store","change$","options","Map","ReplaySubject","undefined","EntityView","count$","empty$","all","values$","all$","firstBy","clause","find","firstBy$","pipe","values","manyBy","filter","manyBy$","sort","destroy","values$$","unsubscribe","join","lifted","Error","joins","filter$","sort$","lift","source$","liftJoinedSource","liftSource","combineLatest","skip","debounceTime","subscribe","_values","processValues","setValues","sources$","apply","source","joinData","computeJoinedValue","joinIndex","slice","filterValues","sortValues","v1","v2","ObjectUtils","naturalCompare","valueAccessor","direction","count","empty","BehaviorSubject","EntityStore","_index","_pristine","entities$","load","pristine","generateIndex","softClear","updateCount","stateView","view","insert","insertMany","delete","deleteMany","getProperty","EntityStoreWatcher","setChangeDetector","setStore","teardownObservers","innerStateIndex","setupObservers","detectChanges","cdRef","entities$$","onEntitiesChange","state$$","onStateChange","changesDetected","storeIndex","innerIndex","storeKeys_1","tslib_1.__values","storeKeys_1_1","storeValue","innerValue","objectsAreEquivalent","EntityTransaction","operations","_inCommitPhase","current","existingOperation","getOperationByEntity","removeOperation","doInsert","previous","type","EntityOperationType","doUpdate","doDelete","commit","handler","catchError","of","tap","result","onCommitError","onCommitSuccess","commitAll","getOperationsInCommit","rollback","rollbackOperations","checkInCommitPhase","storesOperations","operations_1","operations_1_1","operation","storeOperations","deletes","_delete","updates","_update","inserts","_insert","mergeTransaction","transaction","addOperation","resolveOperations","added","inCommitPhase","EntitySelectorComponent","ngOnInit","watcher","selected$$","record","selected","records","onSelectFromStore","ngOnDestroy","onSelectionChange","event","multiSelect","_value","multiSelectValue","multi","selectedChange","emit","selected$","updateMultiToggleWithEntities","multiText$","multiNoneText","multiAllText","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","titleAccessor","emptyText","EventEmitter","EntityTableComponent","columns","column","visible","name","selectionCheckbox","selection","selectMany","fixedHeader","selection$$","selectionState$","computeSelectionState","ngOnChanges","currentValue","previousValue","refresh","onSort","active","getValue","onRowClick","entityClick","onRowSelect","entitySelectChange","onToggleRows","toggle","onToggleRow","selectedRecords","states","EntityTableSelectionState","selectionCount","columnIsSortable","sortable","rowIsSelected","getColumnRenderer","renderer","EntityTableColumnRenderer","getTableClass","igo-entity-table-with-selection","getHeaderClass","func","headerClassFunc","Function","getRowClass","rowClassFunc","getCellClass","cls","tableFunc","cellClassFunc","columnFunc","onButtonClick","clickFunc","entityTableColumnRenderer","entityTableSelectionState","scrollBehavior","EntityTableScrollBehavior","Dock","Overlay","Context","ActionbarComponent","_overlayClass","withTitle","withIcon","horizontal","defaultItemClassFunc","action","onTriggerAction","HostBinding","overlay","actionbarMode","ActionbarMode","collapsed","toggleCollapseAction","icon","mode","withToggleButton","color","xPosition","yPosition","itemClassFunc","ActionbarItemComponent","tooltip","onClick","disabled","trigger","IgoActionbarModule","NgModule","imports","CommonModule","IgoLanguageModule","MatButtonModule","MatIconModule","MatTooltipModule","MatMenuModule","MatListModule","MatCardModule","exports","declarations","IgoActionModule","providers","BackdropComponent","_shown","IgoBackdropModule","forRoot","ngModule","ClickoutDirective","handleMouseClick","el","nativeElement","contains","clickout","Directive","ElementRef","HostListener","IgoClickoutModule","ClonePipe","transform","obj","Pipe","IgoCloneModule","CollapseDirective","_target","_collapsed","collapseTarget","expandTarget","click","addClass","removeClass","Renderer2","CollapsibleComponent","_title","IgoCollapsibleModule","ConfirmDialogComponent","MatDialogRef","dialogRef","ConfirmDialogService","open","message","dialog","disableClose","componentInstance","confirmMessage","afterClosed","Injectable","MatDialog","IgoConfirmDialogModule","MatDialogModule","entryComponents","ContextMenuDirective","onContextMenu","x","y","close","preventDefault","menuPosition","overlayRef","positionStrategy","position","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","scrollStrategy","scrollStrategies","attach","TemplatePortal","menuContext","viewContainerRef","$implicit","sub","fromEvent","document","clickTarget","overlayElement","take","elementRef","dispose","ViewContainerRef","IgoContextMenuModule","CustomHtmlComponent","_html","SanitizeHtmlPipe","v","_sanitizer","bypassSecurityTrustHtml","DomSanitizer","IgoCustomHtmlModule","MatInputModule","DragAndDropDirective","onDragOver","evt","stopPropagation","background","onDragLeave","onDrop","filesObj","validExtensions","valid","filesDropped","invalid","filesInvalid","files","dataTransfer","files_1","files_1_1","file","ext","split","allowedExtensions","lastIndexOf","IgoDrapDropModule","DynamicComponent","setTarget","componentRef","createComponent","componentFactory","updateInputs","inputs","updateSubscribers","subscribers","unsubscribeAll","instance","propName","onUpdateInputs","outputs","emitter_1","subscriber","isArray","_subscriber","subscriptions","s","DynamicComponentService","componentCls","factory","resolver","resolveComponentFactory","providedIn","ComponentFactoryResolver","DynamicOutletComponent","component","eq","inputsAreEquivalents","subscribersAreEquivalents","dynamicComponent","dynamicComponentService","renderComponent","ViewChild","read","IgoDynamicOutletModule","IgoDynamicComponentModule","FlexibleComponent","_initial","_expanded","_initialMobile","_collapsedMobile","_expandedMobile","_direction","_state","sizes","initial","expanded","mediaService","media$","initialMobile","collapsedMobile","expandedMobile","setSize","setTimeout","transitionTime","className","media","main","style","height","width","MediaService","IgoFlexibleModule","formControlIsRequired","control","validator","required","controls","getDefaultErrorMessages","getControlErrorMessage","messages","errors","errorMessages","getAllFormFields","form","groups","group","fields","FormComponent","buttons","children","formData","setData","onSubmit","submitForm","getData","data","field","setValue","updateDataWithFormField","reset","IgoFormFormModule","FormsModule","ReactiveFormsModule","FormFieldService","register","getFieldByType","FormService","formBuilder","addControl","config","setValidators","extendFieldConfig","partial","FormBuilder","FormFieldComponent","compType","FormFieldComponent$1","formFieldService","fieldOptions","placeholder","disableSwitch","formControl","FormFieldComponent$$1","FormFieldSelectComponent","Observable","choices$","disabled$","getErrorMessage","onDisableSwitchClick","toggleDisabled","disable","enable","FormFieldTextComponent","FormFieldTextareaComponent","IgoFormFieldModule","MatFormFieldModule","MatSelectModule","FormGroupComponent","getFieldColSpan","colSpan","cols","Math","min","getFieldNgClass","IgoFormGroupModule","IgoFormModule","IgoEntitySelectorModule","StopDropPropagationDirective","StopPropagationDirective","IgoStopPropagationModule","EntityTableRowDirective","_selected","toggleSelected","scroll","selectOnClick","select","addCls","selectedCls","highlightSelection","highlightedCls","removeCls","scrollIntoView","behavior","block","inline","IgoEntityTableModule","MatTableModule","MatSortModule","MatCheckboxModule","IgoEntityModule","SecureImagePipe","url","http","headers","activityInterceptor","responseType","switchMap","blob","observer","reader","FileReader","readAsDataURL","onloadend","HttpClient","IgoImageModule","KeyValuePipe","keyValues","getOwnPropertyNames","IgoKeyValueModule","JsonDialogComponent","isObject","val","baseKey","JsonDialogService","ignoreKeys","IgoJsonDialogModule","ListItemDirective","_color","_focused","beforeFocus","beforeUnfocus","toggleSelectedClass","focus","unfocus","beforeSelect","beforeUnselect","unselect","_disabled","beforeDisable","beforeEnable","toggleDisabledClass","getOffsetTop","offsetTop","focused","disabledCls","ListComponent","_navigation","_selection","_selectedItem","focusedItem","_focusedItem","handleKeyboardEvent","navigationEnabled","keyCode","navigate","enableNavigation","ngAfterViewInit","listItems","init","listItems$$","items","item","focusNext","toArray","getFocusedIndex","focusPrevious","selectedItem","navigation","disableNavigation","scrollToItem","scrollTop","findSelectedItem","findFocusedItem","item2","handleItemBeforeSelect","handleItemSelect","handleItemBeforeFocus","handleItemFocus","findIndex","ContentChildren","descendants","IgoListModule","PanelComponent","_withHeader","IgoPanelModule","SidenavShimDirective","onOpen","focusedElement","onCloseStart","blurElement","onClose","selectRootElement","blur","MatSidenav","Self","IgoSidenavModule","SpinnerComponent","shown$","show","shown","hide","SpinnerActivityDirective","counter$$","activityService","counter$","spinner","ActivityService","IgoSpinnerModule","MatProgressSpinnerModule","tslib_1.__extends","DataSource","TableDataSource","_filterChange","connect","_database","merge","displayDataChanges","dataChange","_sort","sortChange","getFilteredData","getSortedData","disconnect","_model","filterable","resolve","toLowerCase","a","propertyA","propertyB","_super","primary","accent","warn","TableComponent","_hasFIlterInput","dataSource","database","model","displayedColumns","displayed","unshift","actions","changed","distinctUntilChanged","change","getActionColor","colorId","TableActionColor","row","isAllSelected","masterToggle","handleClickAction","MatSort","SelectionModel","IgoTableModule","CdkTableModule","ToolService","tool","tools","getTool","getTools","ActionStore","updateActionsAvailability","availables","unavailables","conditions","conditionArgs","every","condition","toolSlideInOut","speed","transition","animate","ToolboxComponent","activeTool$","toolbar$$","toolbox","toolbar$","toolbar","onToolbarChange","activeTool$$","onActiveToolChange","actionStore","onAnimationStart","animating$","onAnimationComplete","getToolInputs","tool-actived","setToolbar","onAnimate","setActiveTool","animation$","toolName","_tool","_toolbox","activateTool","callback","unAnimate","animating$$","animation","animations","IgoToolboxModule","IgoToolModule","WidgetOutletComponent","destroyWidget","getEffectiveSubscribers","baseSubscribers","baseSubscriber","onCancel","cancel","onComplete","complete","widget","IgoWidgetOutletModule","WidgetService","widgetCls","IgoWidgetModule","WorkspaceSelectorComponent","getWorkspaceTitle","workspace","onSelectedChange","activateWorkspace","IgoWorkspaceSelectorModule","WorkspaceWidgetOutletComponent","widget$","widgetInputs$","widgetSubscribers$","onWidgetCancel","deactivateWidget","onWidgetComplete","IgoWorkspaceWidgetOutletModule","IgoWorkspaceModule","TableDatabase","add","copiedData","remove","splice","Toolbox","setTools","activatePreviousTool","activeToolHistory","deactivateTool","clearActiveToolHistory","initStore","Widget","WorkspaceStore","activeWorkspace$","deactivate","deactivateWorkspace","activate","Workspace","isActive","entityStore","activateWidget","Subject","getEntityTitleHtml","titleHtml","titleHtmlProperty","getEntityIcon","iconProperty","getEntityRevision","revision","ToolComponent"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum EntityOperationType {\r\n  Insert = 'Insert',\r\n  Update = 'Update',\r\n  Delete = 'Delete'\r\n}\r\n\r\nexport enum EntityTableColumnRenderer {\r\n  Default = 'Default',\r\n  HTML = 'HTML',\r\n  UnsanitizedHTML = 'UnsanitizedHTML',\r\n  Icon = 'Icon',\r\n  ButtonGroup = 'ButtonGroup'\r\n}\r\n\r\nexport enum EntityTableScrollBehavior {\r\n  Auto = 'auto',\r\n  Instant = 'instant',\r\n  Smooth = 'smooth'\r\n}\r\n\r\nexport enum EntityTableSelectionState {\r\n  None = 'None',\r\n  All = 'All',\r\n  Some = 'Some'\r\n}\r\n","import t from 'typy';\r\n\r\nimport { EntityKey } from './entity.interfaces';\r\n\r\n/**\r\n * Get an entity's named property. Nested properties are supported\r\n * with the dotted notation. (i.e 'author.name')\r\n *\r\n * Note: this method is a 'best attempt' at getting an entity's property.\r\n * It fits the most common cases but you might need to explicitely define\r\n * a property getter when using an EntityStore, for example.\r\n * @param entity Entity\r\n * @param property Property name\r\n * @returns Property value\r\n */\r\nexport function getEntityProperty(entity: object, property: string): any {\r\n  return t(entity, property).safeObject;\r\n}\r\n\r\n/**\r\n * Get an entity's id. An entity's id can be one of:\r\n * 'entity.meta.id', 'entity.meta.idProperty' or 'entity.id'.\r\n *\r\n * Note: See the note in the 'getEntityProperty' documentation.\r\n * @param entity Entity\r\n * @returns Entity id\r\n */\r\nexport function getEntityId(entity: object): EntityKey {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.id ? meta.id : getEntityProperty(entity, meta.idProperty || 'id');\r\n}\r\n\r\n/**\r\n * Get an entity's title. An entity's title can be one of:\r\n * 'entity.meta.title', 'entity.meta.titleProperty' or 'entity.title'.\r\n * @param entity Entity\r\n * @returns Entity title\r\n */\r\nexport function getEntityTitle(entity: object): string {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.title ? meta.title : getEntityProperty(entity, meta.titleProperty || 'title');\r\n}\r\n\r\n/**\r\n * Get an entity's HTML title. An entity's HTML title can be one of:\r\n * 'entity.meta.titleHtml', 'entity.meta.titleHtmlProperty' or 'entity.titleHtml'.\r\n * @param entity Entity\r\n * @returns Entity HTML title\r\n */\r\nexport function getEntityTitleHtml(entity: object): string {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.titleHtml ? meta.titleHtml : getEntityProperty(entity, meta.titleHtmlProperty || 'titleHtml');\r\n}\r\n\r\n/**\r\n * Get an entity's icon. An entity's icon can be one of:\r\n * 'entity.meta.icon', 'entity.meta.iconProperty' or 'entity.icon'.\r\n * @param entity Entity\r\n * @returns Entity icon\r\n */\r\nexport function getEntityIcon(entity: object): string {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.icon ? meta.icon : getEntityProperty(entity, meta.iconProperty || 'icon');\r\n}\r\n\r\n/**\r\n * Get an entity's revision.\r\n * @param entity Entity\r\n * @returns Entity revision\r\n */\r\nexport function getEntityRevision(entity: object): number {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.revision || 0;\r\n}\r\n","import { ReplaySubject } from 'rxjs';\r\n\r\nimport { EntityKey, EntityState, EntityStateManagerOptions } from './entity.interfaces';\r\nimport { getEntityId } from './entity.utils';\r\nimport { EntityStore } from './store';\r\n\r\n/**\r\n * This class is used to track a store's entities state\r\n */\r\nexport class EntityStateManager<E extends object, S extends EntityState = EntityState> {\r\n\r\n  /**\r\n   * State index\r\n   */\r\n  readonly index = new Map<EntityKey, S>();\r\n\r\n  /**\r\n   * Change emitter\r\n   */\r\n  readonly change$ = new ReplaySubject<void>(1);\r\n\r\n  /**\r\n   * Method to get an entity's id\r\n   */\r\n  readonly getKey: (E) => EntityKey;\r\n\r\n  private store: EntityStore<object> | undefined;\r\n\r\n  constructor(options: EntityStateManagerOptions = {}) {\r\n    this.store = options.store ? options.store : undefined;\r\n    this.getKey = options.getKey\r\n      ? options.getKey\r\n      : (this.store ? this.store.getKey : getEntityId);\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Clear state\r\n   */\r\n  clear() {\r\n    if (this.index.size > 0) {\r\n      this.index.clear();\r\n      this.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an entity's state\r\n   * @param entity Entity\r\n   * @returns State\r\n   */\r\n  get(entity: E): S {\r\n    return (this.index.get(this.getKey(entity)) || {}) as S;\r\n  }\r\n\r\n  /**\r\n   * Set an entity's state\r\n   * @param entity Entity\r\n   * @param state State\r\n   */\r\n  set(entity: E, state: S) {\r\n    this.setMany([entity], state);\r\n  }\r\n\r\n  /**\r\n   * Set many entitie's state\r\n   * @param entitie Entities\r\n   * @param state State\r\n   */\r\n  setMany(entities: E[], state: S) {\r\n    entities.forEach((entity: E) => {\r\n      this.index.set(this.getKey(entity), Object.assign({}, state));\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Set state of all entities that already have a state. This is not\r\n   * the same as setting the state of all the store's entities.\r\n   * @param state State\r\n   */\r\n  setAll(state: S) {\r\n    Array.from(this.index.keys()).forEach((key: EntityKey) => {\r\n      this.index.set(key, Object.assign({}, state));\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Update an entity's state\r\n   * @param entity Entity\r\n   * @param changes State changes\r\n   */\r\n  update(entity: E, changes: Partial<S>, exclusive = false) {\r\n    this.updateMany([entity], changes, exclusive);\r\n  }\r\n\r\n  /**\r\n   * Update many entitie's state\r\n   * @param entitie Entities\r\n   * @param changes State changes\r\n   */\r\n  updateMany(entities: E[], changes: Partial<S>, exclusive = false) {\r\n    if (exclusive === true) {\r\n      return this.updateManyExclusive(entities, changes);\r\n    }\r\n\r\n    entities.forEach((entity: E) => {\r\n      const state = Object.assign({}, this.get(entity), changes);\r\n      this.index.set(this.getKey(entity), state);\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Reversee an entity's state\r\n   * @param entity Entity\r\n   * @param keys State keys to reverse\r\n   */\r\n  reverse(entity: E, keys: string[]) {\r\n    this.reverseMany([entity], keys);\r\n  }\r\n\r\n  /**\r\n   * Reverse many entitie's state\r\n   * @param entitie Entities\r\n   * @param keys State keys to reverse\r\n   */\r\n  reverseMany(entities: E[], keys: string[]) {\r\n    entities.forEach((entity: E) => {\r\n      const currentState = this.get(entity);\r\n      const changes = keys.reduce((acc: {[key: string]: boolean}, key: string) => {\r\n        acc[key] = currentState[key] || false;\r\n        return acc;\r\n      }, {});\r\n      const reversedChanges = this.reverseChanges(changes);\r\n      const state = Object.assign({}, currentState, reversedChanges);\r\n      this.index.set(this.getKey(entity), state);\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Update state of all entities that already have a state. This is not\r\n   * the same as updating the state of all the store's entities.\r\n   * @param changes State\r\n   */\r\n  updateAll(changes: Partial<S>) {\r\n    const allKeys = this.getAllKeys();\r\n    Array.from(allKeys).forEach((key: EntityKey) => {\r\n      const state = Object.assign({}, this.index.get(key), changes);\r\n      this.index.set(key, state);\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * When some state changes are flagged as 'exclusive', reverse\r\n   * the state of all other entities. Changes are reversable when\r\n   * they are boolean.\r\n   * @param entitie Entities\r\n   * @param changes State changes\r\n   */\r\n  private updateManyExclusive(entities: E[], changes: Partial<S>) {\r\n    const reverseChanges = this.reverseChanges(changes);\r\n\r\n    const keys = entities.map((entity: E) => this.getKey(entity));\r\n    const allKeys = new Set(keys.concat(Array.from(this.getAllKeys())));\r\n    allKeys.forEach((key: EntityKey) => {\r\n      const state = this.index.get(key) || {} as S;\r\n      if (keys.indexOf(key) >= 0) {\r\n        this.index.set(key, Object.assign({}, state, changes));\r\n      } else {\r\n        this.index.set(key, Object.assign({}, state, reverseChanges));\r\n      }\r\n    });\r\n\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Compute a 'reversed' version of some state changes.\r\n   * Changes are reversable when they are boolean.\r\n   * @param changes State changes\r\n   * @returns Reversed state changes\r\n   */\r\n  private reverseChanges(changes: Partial<S>): Partial<S> {\r\n    return Object.entries(changes).reduce((reverseChanges: Partial<S>, bunch: [string, any]) => {\r\n      const [changeKey, value] = bunch;\r\n      if (typeof value === typeof true) {\r\n        reverseChanges[changeKey] = !value;\r\n      }\r\n      return reverseChanges;\r\n    }, {});\r\n  }\r\n\r\n  /**\r\n   * Return all the keys in that state and in the store it's bound to, if any.\r\n   * @returns Set of keys\r\n   */\r\n  private getAllKeys(): Set<EntityKey> {\r\n    const storeKeys = this.store ? Array.from(this.store.index.keys()) : [];\r\n    return new Set(Array.from(this.index.keys()).concat(storeKeys));\r\n  }\r\n\r\n  /**\r\n   * Emit 'change' event\r\n   */\r\n  private next() {\r\n    this.change$.next();\r\n  }\r\n\r\n}\r\n","import { BehaviorSubject, Observable, Subscription, combineLatest } from 'rxjs';\r\nimport { debounceTime, map, skip } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport {\r\n  EntityFilterClause,\r\n  EntitySortClause,\r\n  EntityJoinClause\r\n} from './entity.interfaces';\r\n\r\n/**\r\n * An entity view streams entities from an observable source. These entities\r\n * can be filtered or sorted without affecting the source. A view can also\r\n * combine data from multiple sources, joined together.\r\n */\r\nexport class EntityView<E extends object, V extends object = E> {\r\n\r\n  /**\r\n   * Observable stream of values\r\n   */\r\n  readonly values$ = new BehaviorSubject<V[]>([]);\r\n\r\n  /**\r\n   * Whether this view has been lifted\r\n   */\r\n  private lifted = false;\r\n\r\n  /**\r\n   * Join clauses\r\n   */\r\n  private joins: EntityJoinClause[] = [];\r\n\r\n  /**\r\n   * Observable of a filter clause\r\n   */\r\n  private filter$ = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Observable of a sort clause\r\n   */\r\n  private sort$ = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the source (and joined sources) values\r\n   */\r\n  private values$$: Subscription;\r\n\r\n  /**\r\n   * Number of entities\r\n   */\r\n  readonly count$ = new BehaviorSubject<number>(0);\r\n  get count(): number { return this.count$.value; }\r\n\r\n  /**\r\n   * Whether the store is empty\r\n   */\r\n  readonly empty$ = new BehaviorSubject<boolean>(true);\r\n  get empty(): boolean { return this.empty$.value; }\r\n\r\n  constructor(private source$: BehaviorSubject<E[]>) {}\r\n\r\n  /**\r\n   * Get all the values\r\n   * @returns Array of values\r\n   */\r\n  all(): V[] {\r\n    return this.values$.value;\r\n  }\r\n\r\n  /**\r\n   * Observe all the values\r\n   * @returns Observable of values\r\n   */\r\n  all$(): BehaviorSubject<V[]> {\r\n    return this.values$;\r\n  }\r\n\r\n  /**\r\n   * Get the first value that respects a criteria\r\n   * @returns A value\r\n   */\r\n  firstBy(clause: EntityFilterClause<V>): V {\r\n    return this.values$.value.find(clause);\r\n  }\r\n\r\n  /**\r\n   * Observe the first value that respects a criteria\r\n   * @returns Observable of a value\r\n   */\r\n  firstBy$(clause: EntityFilterClause<V>): Observable<V> {\r\n    return this.values$.pipe(map((values: V[]) => values.find(clause)));\r\n  }\r\n\r\n  /**\r\n   * Get all the values that respect a criteria\r\n   * @returns Array of values\r\n   */\r\n  manyBy(clause: EntityFilterClause<V>): V[] {\r\n    return this.values$.value.filter(clause);\r\n  }\r\n\r\n  /**\r\n   * Observe all the values that respect a criteria\r\n   * @returns Observable of values\r\n   */\r\n  manyBy$(clause: EntityFilterClause<V>): Observable<V[]> {\r\n    return this.values$.pipe(map((values: V[]) => values.filter(clause)));\r\n  }\r\n\r\n  /**\r\n   * Clear the filter and sort and unsubscribe from the source\r\n   */\r\n  clear() {\r\n    this.filter(undefined);\r\n    this.sort(undefined);\r\n  }\r\n\r\n  destroy() {\r\n    if (this.values$$ !== undefined) {\r\n      this.values$$.unsubscribe();\r\n    }\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Join another source to the stream (chainable)\r\n   * @param clause Join clause\r\n   * @returns The view\r\n   */\r\n  join(clause: EntityJoinClause): EntityView<E, V> {\r\n    if (this.lifted === true) {\r\n      throw new Error('This view has already been lifted, therefore, no join is allowed.');\r\n    }\r\n    this.joins.push(clause);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filter values (chainable)\r\n   * @param clause Filter clause\r\n   * @returns The view\r\n   */\r\n  filter(clause: EntityFilterClause<V>): EntityView<E, V> {\r\n    this.filter$.next(clause);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sort values (chainable)\r\n   * @param clauseSort clause\r\n   * @returns The view\r\n   */\r\n  sort(clause: EntitySortClause<V>): EntityView<E, V> {\r\n    this.sort$.next(clause);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Create the final observable\r\n   * @returns Observable\r\n   */\r\n  lift() {\r\n    this.lifted = true;\r\n    const source$ = this.joins.length > 0 ? this.liftJoinedSource() : this.liftSource();\r\n    this.values$$ = combineLatest(source$, this.filter$, this.sort$)\r\n      .pipe(skip(1), debounceTime(25))\r\n      .subscribe((bunch: [V[], EntityFilterClause, EntitySortClause]) => {\r\n        const [_values, filter, sort] = bunch;\r\n        const values = this.processValues(_values, filter, sort);\r\n        this.setValues(values);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Create the source observable when no joins are defined\r\n   * @returns Observable\r\n   */\r\n  private liftSource(): Observable<V[]> {\r\n    return this.source$ as any as Observable<V[]>;\r\n  }\r\n\r\n  /**\r\n   * Create the source observable when joins are defined\r\n   * @returns Observable\r\n   */\r\n  private liftJoinedSource(): Observable<V[]> {\r\n    const sources$ = [this.source$, combineLatest(\r\n      ...this.joins.map((join: EntityJoinClause) => join.source)\r\n    )];\r\n\r\n    return combineLatest(...sources$)\r\n      .pipe(\r\n        map((bunch: [E[], any[]]) => {\r\n          const [entities, joinData] = bunch;\r\n          return entities.reduce((values: V[], entity: E) => {\r\n            const value = this.computeJoinedValue(entity, joinData);\r\n            if (value !== undefined) {\r\n              values.push(value);\r\n            }\r\n            return values;\r\n          }, []);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Apply joins to a source's entity and return the final value\r\n   * @returns Final value\r\n   */\r\n  private computeJoinedValue(entity: E, joinData: any[]): V | undefined {\r\n    let value = entity as Partial<V>;\r\n    let joinIndex = 0;\r\n    while (value !== undefined && joinIndex < this.joins.length) {\r\n      value = this.joins[joinIndex].reduce(value, joinData[joinIndex]);\r\n      joinIndex += 1;\r\n    }\r\n    return value as V;\r\n  }\r\n\r\n  /**\r\n   * Filter and sort values before streaming them\r\n   * @param values Values\r\n   * @param filter Filter clause\r\n   * @param sort Sort clause\r\n   * @returns Filtered and sorted values\r\n   */\r\n  private processValues(values: V[], filter: EntityFilterClause, sort: EntitySortClause): V[] {\r\n    values = values.slice(0);\r\n    values = this.filterValues(values, filter);\r\n    values = this.sortValues(values, sort);\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Filter values\r\n   * @param values Values\r\n   * @param filter Filter clause\r\n   * @returns Filtered values\r\n   */\r\n  private filterValues(values: V[], clause: EntityFilterClause): V[] {\r\n    if (clause === undefined) { return values; }\r\n    return values.filter((value: V) => clause(value));\r\n  }\r\n\r\n  /**\r\n   * Sort values\r\n   * @param values Values\r\n   * @param sort Sort clause\r\n   * @returns Sorted values\r\n   */\r\n  private sortValues(values: V[], clause: EntitySortClause): V[] {\r\n    if (clause === undefined) { return values; }\r\n    return values.sort((v1: V, v2: V) => {\r\n      return ObjectUtils.naturalCompare(\r\n        clause.valueAccessor(v1),\r\n        clause.valueAccessor(v2),\r\n        clause.direction\r\n      );\r\n    });\r\n  }\r\n\r\n  private setValues(values: V[]) {\r\n    this.values$.next(values);\r\n    const count = values.length;\r\n    const empty = count === 0;\r\n    this.count$.next(count);\r\n    this.empty$.next(empty);\r\n  }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStateManager } from './state';\r\nimport { EntityView } from './view';\r\nimport { EntityKey, EntityState, EntityRecord, EntityStoreOptions } from './entity.interfaces';\r\nimport { getEntityId, getEntityProperty } from './entity.utils';\r\n\r\n/**\r\n * An entity store class holds any number of entities\r\n * as well as their state. It can be observed, filtered and sorted and\r\n * provides methods to insert, update or delete entities.\r\n */\r\nexport class EntityStore<E extends object, S extends EntityState = EntityState> {\r\n\r\n  /**\r\n   * Observable of the raw entities\r\n   */\r\n  readonly entities$ = new BehaviorSubject<E[]>([]);\r\n\r\n  /**\r\n   * Number of entities\r\n   */\r\n  readonly count$ = new BehaviorSubject<number>(0);\r\n  get count(): number { return this.count$.value; }\r\n\r\n  /**\r\n   * Whether the store is empty\r\n   */\r\n  readonly empty$ = new BehaviorSubject<boolean>(true);\r\n  get empty(): boolean { return this.empty$.value; }\r\n\r\n  /**\r\n   * Entity store state\r\n   */\r\n  readonly state: EntityStateManager<E, S>;\r\n\r\n  /**\r\n   * View of all the entities\r\n   */\r\n  readonly view: EntityView<E>;\r\n\r\n  /**\r\n   * View of all the entities and their state\r\n   */\r\n  readonly stateView: EntityView<E, EntityRecord<E, S>>;\r\n\r\n  /**\r\n   * Method to get an entity's id\r\n   */\r\n  readonly getKey: (E) => EntityKey;\r\n\r\n  /**\r\n   * Method to get an entity's named property\r\n   */\r\n  readonly getProperty: (E, prop: string) => any;\r\n\r\n  /**\r\n   * Store index\r\n   */\r\n  get index(): Map<EntityKey, E> { return this._index; }\r\n  private _index: Map<EntityKey, E>;\r\n\r\n  /**\r\n   * Store index\r\n   */\r\n  get pristine(): boolean { return this._pristine; }\r\n  private _pristine: boolean = true;\r\n\r\n  constructor(entities: E[], options: EntityStoreOptions = {}) {\r\n    this.getKey = options.getKey ? options.getKey : getEntityId;\r\n    this.getProperty = options.getProperty ? options.getProperty : getEntityProperty;\r\n\r\n    this.state = new EntityStateManager<E, S>({store: this});\r\n    this.view = new EntityView<E>(this.entities$);\r\n    this.stateView = new EntityView<E, EntityRecord<E, S>>(this.view.all$()).join({\r\n      source: this.state.change$,\r\n      reduce: (entity: E): EntityRecord<E, S> => {\r\n        return {entity, state: this.state.get(entity)};\r\n      }\r\n    });\r\n\r\n    this.view.lift();\r\n    this.stateView.lift();\r\n\r\n    if (entities.length > 0) {\r\n      this.load(entities);\r\n    } else {\r\n      this._index = this.generateIndex(entities);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an entity from the store by key\r\n   * @param key Key\r\n   * @returns Entity\r\n   */\r\n  get(key: EntityKey): E {\r\n    return this.index.get(key);\r\n  }\r\n\r\n  /**\r\n   * Get all entities in the store\r\n   * @returns Array of entities\r\n   */\r\n  all(): E[] {\r\n    return this.entities$.value;\r\n  }\r\n\r\n  /**\r\n   * Set this store's entities\r\n   * @param entities Entities\r\n   */\r\n  load(entities: E[], pristine: boolean = true) {\r\n    this._index = this.generateIndex(entities);\r\n    this._pristine = pristine;\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Clear the store's entities but keep the state and views intact.\r\n   * Views won't return any data but future data will be subject to the\r\n   * current views filter and sort\r\n   */\r\n  softClear() {\r\n    if (this.index && this.index.size > 0) {\r\n      this.index.clear();\r\n      this._pristine = true;\r\n      this.next();\r\n    } else if (this.index) {\r\n      this.updateCount();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the store's entities, state and views\r\n   */\r\n  clear() {\r\n    this.stateView.clear();\r\n    this.view.clear();\r\n    this.state.clear();\r\n    this.softClear();\r\n  }\r\n\r\n  destroy() {\r\n    this.stateView.destroy();\r\n    this.view.destroy();\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Insert an entity into the store\r\n   * @param entity Entity\r\n   */\r\n  insert(entity: E) {\r\n    this.insertMany([entity]);\r\n  }\r\n\r\n  /**\r\n   * Insert many entities into the store\r\n   * @param entities Entities\r\n   */\r\n  insertMany(entities: E[]) {\r\n    entities.forEach((entity: E) => this.index.set(this.getKey(entity), entity));\r\n    this._pristine = false;\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Update or insert an entity into the store\r\n   * @param entity Entity\r\n   */\r\n  update(entity: E) {\r\n    this.updateMany([entity]);\r\n  }\r\n\r\n  /**\r\n   * Update or insert many entities into the store\r\n   * @param entities Entities\r\n   */\r\n  updateMany(entities: E[]) {\r\n    entities.forEach((entity: E) => this.index.set(this.getKey(entity), entity));\r\n    this._pristine = false;\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Delete an entity from the store\r\n   * @param entity Entity\r\n   */\r\n  delete(entity: E) {\r\n    this.deleteMany([entity]);\r\n  }\r\n\r\n  /**\r\n   * Delete many entities from the store\r\n   * @param entities Entities\r\n   */\r\n  deleteMany(entities: E[]) {\r\n    entities.forEach((entity: E) => this.index.delete(this.getKey(entity)));\r\n    this._pristine = false;\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Generate a complete index of all the entities\r\n   * @param entities Entities\r\n   * @returns Index\r\n   */\r\n  private generateIndex(entities: E[]): Map<EntityKey, E> {\r\n    const entries = entities.map((entity: E) => [this.getKey(entity), entity]);\r\n    return new Map(entries as [EntityKey, E][]);\r\n  }\r\n\r\n  /**\r\n   * Push the index's entities into the entities$ observable\r\n   */\r\n  private next() {\r\n    this.entities$.next(Array.from(this.index.values()));\r\n    this.updateCount();\r\n  }\r\n\r\n  /**\r\n   * Update the store's count and empty\r\n   */\r\n  private updateCount() {\r\n    const count = this.index.size;\r\n    const empty = count === 0;\r\n    this.count$.next(count);\r\n    this.empty$.next(empty);\r\n  }\r\n\r\n}\r\n","import { ChangeDetectorRef } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { EntityKey } from './entity.interfaces';\r\n\r\nimport { EntityStore } from './store';\r\n\r\n/**\r\n * This class is used to synchronize a component's changes\r\n * detection with an EntityStore changes. For example, it is frequent\r\n * to have a component subscribe to a store's selected entity and, at the same time,\r\n * this component provides a way to select an entity with, let's say, a click.\r\n *\r\n * This class automatically handles those case and triggers the compoent's\r\n * change detection when needed.\r\n *\r\n * Note: If the component observes the store's stateView, a workspace is\r\n * probably not required because the stateView catches any changes to the\r\n * entities and their state.\r\n */\r\nexport class EntityStoreWatcher<E extends object> {\r\n\r\n  /**\r\n   * Component change detector\r\n   */\r\n  private cdRef: ChangeDetectorRef;\r\n\r\n  /**\r\n   * Entity store\r\n   */\r\n  private store: EntityStore<E>;\r\n\r\n  /**\r\n   * Component inner state\r\n   */\r\n  private innerStateIndex = new Map<EntityKey, {[key: string]: any}>();\r\n\r\n  /**\r\n   * Subscription to the store's entities\r\n   */\r\n  private entities$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to the store's state\r\n   */\r\n  private state$$: Subscription;\r\n\r\n  constructor(store?: EntityStore<E>, cdRef?: ChangeDetectorRef) {\r\n    this.setChangeDetector(cdRef);\r\n    this.setStore(store);\r\n  }\r\n\r\n  destroy() {\r\n    this.setChangeDetector(undefined);\r\n    this.setStore(undefined);\r\n  }\r\n\r\n  /**\r\n   * Bind this workspace to a store and start watching for changes\r\n   * @param store Entity store\r\n   */\r\n  setStore(store?: EntityStore<E>) {\r\n    if (store === undefined) {\r\n      this.teardownObservers();\r\n      this.innerStateIndex.clear();\r\n      this.store = undefined;\r\n      return;\r\n    }\r\n\r\n    this.setStore(undefined);\r\n    this.store = store;\r\n    this.setupObservers();\r\n    this.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Bind this workspace to a component's change detector\r\n   * @param cdRef Change detector\r\n   */\r\n  setChangeDetector(cdRef?: ChangeDetectorRef) {\r\n    this.cdRef = cdRef;\r\n  }\r\n\r\n  /**\r\n   * Set up observers on a store's entities and their state\r\n   * @param store Entity store\r\n   */\r\n  private setupObservers() {\r\n    this.teardownObservers();\r\n\r\n    this.entities$$ = this.store.entities$\r\n      .subscribe((entities: E[]) => this.onEntitiesChange(entities));\r\n\r\n    this.state$$ = this.store.state.change$\r\n      .pipe(skip(1))\r\n      .subscribe(() => this.onStateChange());\r\n  }\r\n\r\n  /**\r\n   * Teardown store observers\r\n   */\r\n  private teardownObservers() {\r\n    if (this.entities$$ !== undefined) {\r\n      this.entities$$.unsubscribe();\r\n    }\r\n    if (this.state$$ !== undefined) {\r\n      this.state$$.unsubscribe();\r\n    }\r\n    this.entities$$ = undefined;\r\n    this.state$$ = undefined;\r\n  }\r\n\r\n  /**\r\n   * When the entities change, always trigger the changes detection\r\n   */\r\n  private onEntitiesChange(entities: E[]) {\r\n    this.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * When the entities state change, trigger the change detection\r\n   * only if the component has not handled these changes yet. For example,\r\n   * the component might have initiated thoses changes itself.\r\n   */\r\n  private onStateChange() {\r\n    let changesDetected = false;\r\n    const storeIndex = this.store.state.index;\r\n    const innerIndex = this.innerStateIndex;\r\n\r\n    if (storeIndex.size !== innerIndex.size) {\r\n      changesDetected = this.detectChanges();\r\n    }\r\n\r\n    const storeKeys = Array.from(storeIndex.keys());\r\n    for (const key of storeKeys) {\r\n      const storeValue = storeIndex.get(key);\r\n      const innerValue = innerIndex.get(key);\r\n      if (changesDetected === false) {\r\n        if (innerValue === undefined) {\r\n          changesDetected = this.detectChanges();\r\n        } else if (!ObjectUtils.objectsAreEquivalent(storeValue, innerValue)) {\r\n          changesDetected = this.detectChanges();\r\n        }\r\n      }\r\n\r\n      this.innerStateIndex.set(key, Object.assign({}, storeValue));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger the change detection of the workspace is bound to a change detector\r\n   */\r\n  private detectChanges() {\r\n    if (this.cdRef !== undefined) {\r\n      this.cdRef.detectChanges();\r\n    }\r\n    return true;\r\n  }\r\n\r\n}\r\n","import { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nimport {\r\n  EntityKey,\r\n  EntityTransactionOptions,\r\n  EntityOperation,\r\n  EntityOperationState\r\n} from './entity.interfaces';\r\nimport { EntityStore } from './store';\r\nimport { EntityOperationType } from './entity.enums';\r\nimport { getEntityId } from './entity.utils';\r\n\r\nexport type EntityTransactionCommitHandler = (\r\n  transaction: EntityTransaction,\r\n  operations: EntityOperation[]\r\n) => Observable<any>;\r\n\r\n/**\r\n * This class holds a reference to the insert, update and delete\r\n * operations performed on a store. This is useful to commit\r\n * these operations in a single pass or to cancel them.\r\n */\r\nexport class EntityTransaction {\r\n\r\n  /**\r\n   * Store holding the operations on another store\r\n   */\r\n  readonly operations: EntityStore<EntityOperation, EntityOperationState>;\r\n\r\n  /**\r\n   * Method to get an entity's id\r\n   */\r\n  readonly getKey: (E) => EntityKey;\r\n\r\n  /**\r\n   * Whether there are pending operations\r\n   */\r\n  get empty(): boolean { return this.operations.entities$.value.length === 0; }\r\n\r\n  /**\r\n   * Whether thise store is in commit phase\r\n   */\r\n  get inCommitPhase(): boolean { return this._inCommitPhase; }\r\n  private _inCommitPhase = false;\r\n\r\n  constructor(options: EntityTransactionOptions = {}) {\r\n    this.getKey = options.getKey ? options.getKey : getEntityId;\r\n    this.operations = new EntityStore<EntityOperation, EntityOperationState>([], {\r\n      getKey: (operation: EntityOperation) => operation.key\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.operations.destroy();\r\n  }\r\n\r\n  /**\r\n   * Insert an entity into a store. If no store is specified, an insert\r\n   * operation is still created but the transaction won't add the new\r\n   * entity to the store.\r\n   * @param current The entity to insert\r\n   * @param store Optional: The store to insert the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  insert(current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    const existingOperation = this.getOperationByEntity(current);\r\n    if (existingOperation !== undefined) {\r\n      this.removeOperation(existingOperation);\r\n    }\r\n\r\n    this.doInsert(current, store, meta);\r\n  }\r\n\r\n  /**\r\n   * Update an entity in a store. If no store is specified, an update\r\n   * operation is still created but the transaction won't update the\r\n   * entity into the store.\r\n   * @param previous The entity before update\r\n   * @param current The entity after update\r\n   * @param store Optional: The store to update the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  update(previous: object, current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    const existingOperation = this.getOperationByEntity(current);\r\n    if (existingOperation !== undefined) {\r\n      this.removeOperation(existingOperation);\r\n      if (existingOperation.type === EntityOperationType.Insert) {\r\n        this.doInsert(current, store, meta);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.doUpdate(previous, current, store, meta);\r\n  }\r\n\r\n  /**\r\n   * Delete an entity from a store. If no store is specified, a delete\r\n   * operation is still created but the transaction won't remove the\r\n   * entity from the store.\r\n   * @param previous The entity before delete\r\n   * @param store Optional: The store to delete the entity from\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  delete(previous: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    const existingOperation = this.getOperationByEntity(previous);\r\n    if (existingOperation !== undefined) {\r\n      this.removeOperation(existingOperation);\r\n      if (existingOperation.type === EntityOperationType.Insert) {\r\n        if (store !== undefined) {\r\n          store.delete(previous);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.doDelete(previous, store, meta);\r\n  }\r\n\r\n  /**\r\n   * Commit operations the transaction. This method doesn't do much\r\n   * in itself. The handler it receives does the hard work and it's\r\n   * implementation is left to the caller. This method simply wraps\r\n   * the handler into an error catching mechanism to update\r\n   * the transaction afterward. The caller needs to subscribe to this\r\n   * method's output (observable) for the commit to be performed.\r\n   * @param operations Operations to commit\r\n   * @param handler Function that handles the commit operation\r\n   * @returns The handler output (observable)\r\n   */\r\n  commit(operations: EntityOperation[], handler: EntityTransactionCommitHandler): Observable<any> {\r\n    this._inCommitPhase = true;\r\n\r\n    return handler(this, operations)\r\n      .pipe(\r\n        catchError(() => of(new Error())),\r\n        tap((result: any) => {\r\n          if (result instanceof Error) {\r\n            this.onCommitError(operations);\r\n          } else {\r\n            this.onCommitSuccess(operations);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Commit all the operations of the transaction.\r\n   * @param handler Function that handles the commit operation\r\n   * @returns The handler output (observable)\r\n   */\r\n  commitAll(handler: EntityTransactionCommitHandler): Observable<any> {\r\n    const operations = this.getOperationsInCommit();\r\n    return this.commit(operations, handler);\r\n  }\r\n\r\n  /**\r\n   * Rollback this transaction\r\n   */\r\n  rollback() {\r\n    this.rollbackOperations(this.operations.all());\r\n  }\r\n\r\n  /**\r\n   * Rollback specific operations\r\n   */\r\n  rollbackOperations(operations: EntityOperation[]) {\r\n    this.checkInCommitPhase();\r\n\r\n    const operationsFactory = () => new Map([\r\n      [EntityOperationType.Delete, []],\r\n      [EntityOperationType.Update, []],\r\n      [EntityOperationType.Insert, []]\r\n    ]);\r\n    const storesOperations = new Map();\r\n\r\n    // Group operations by store and by operation type.\r\n    // Grouping operations allows us to revert them in bacth, thus, triggering\r\n    // observables only one per operation type.\r\n    for (const operation of operations) {\r\n      const store = operation.store;\r\n      if (operation.store === undefined) { continue; }\r\n\r\n      let storeOperations = storesOperations.get(store);\r\n      if (storeOperations === undefined) {\r\n        storeOperations = operationsFactory();\r\n        storesOperations.set(store, storeOperations);\r\n      }\r\n      storeOperations.get(operation.type).push(operation);\r\n    }\r\n\r\n    Array.from(storesOperations.keys()).forEach((store: EntityStore<object>) => {\r\n      const storeOperations = storesOperations.get(store);\r\n\r\n      const deletes = storeOperations.get(EntityOperationType.Delete);\r\n      store.insertMany(deletes.map((_delete: EntityOperation) => _delete.previous));\r\n\r\n      const updates = storeOperations.get(EntityOperationType.Update);\r\n      store.updateMany(updates.map((_update: EntityOperation) => _update.previous));\r\n\r\n      const inserts = storeOperations.get(EntityOperationType.Insert);\r\n      store.deleteMany(inserts.map((_insert: EntityOperation) => _insert.current));\r\n    });\r\n\r\n    this.operations.deleteMany(operations);\r\n    this._inCommitPhase = false;\r\n  }\r\n\r\n  /**\r\n   * Clear this transaction\r\n   * @todo Raise event and synchronize stores?\r\n   */\r\n  clear() {\r\n    this.operations.clear();\r\n    this._inCommitPhase = false;\r\n  }\r\n\r\n  /**\r\n   * Merge another transaction in this one\r\n   * @param transaction Another transaction\r\n   */\r\n  mergeTransaction(transaction: EntityTransaction) {\r\n    this.checkInCommitPhase();\r\n\r\n    const operations = transaction.operations.all();\r\n    operations.forEach((operation: EntityOperation) => {\r\n      this.addOperation(operation);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create an insert operation and add an entity to the store\r\n   * @param current The entity to insert\r\n   * @param store Optional: The store to insert the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  private doInsert(current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    this.addOperation({\r\n      key: this.getKey(current),\r\n      type: EntityOperationType.Insert,\r\n      previous: undefined,\r\n      current,\r\n      store,\r\n      meta\r\n    });\r\n\r\n    if (store !== undefined) {\r\n      store.insert(current);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an update operation and update an entity into the store\r\n   * @param previous The entity before update\r\n   * @param current The entity after update\r\n   * @param store Optional: The store to update the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  private doUpdate(previous: object, current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    this.addOperation({\r\n      key: this.getKey(current),\r\n      type: EntityOperationType.Update,\r\n      previous,\r\n      current,\r\n      store,\r\n      meta\r\n    });\r\n\r\n    if (store !== undefined) {\r\n      store.update(current);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a delete operation and delete an entity from the store\r\n   * @param previous The entity before delete\r\n   * @param store Optional: The store to delete the entity from\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  private doDelete(previous: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    this.addOperation({\r\n      key: this.getKey(previous),\r\n      type: EntityOperationType.Delete,\r\n      previous,\r\n      current: undefined,\r\n      store,\r\n      meta\r\n    });\r\n\r\n    if (store !== undefined) {\r\n      store.delete(previous);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove committed operations from store\r\n   * @param operations Commited operations\r\n   * @todo Raise event and synchronize stores?\r\n   */\r\n  private resolveOperations(operations: EntityOperation[]) {\r\n    this.operations.deleteMany(operations);\r\n  }\r\n\r\n  /**\r\n   * On commit success, resolve commited operations and exit commit phase\r\n   * @param operations Commited operations\r\n   */\r\n  private onCommitSuccess(operations: EntityOperation[]) {\r\n    this.resolveOperations(operations);\r\n    this._inCommitPhase = false;\r\n  }\r\n\r\n  /**\r\n   * On commit error, abort transaction\r\n   * @param operations Commited operations\r\n   */\r\n  private onCommitError(operations: EntityOperation[]) {\r\n    this._inCommitPhase = false;\r\n  }\r\n\r\n  /**\r\n   * Add an operation to the operations store\r\n   * @param operation Operation to add\r\n   */\r\n  private addOperation(operation: EntityOperation) {\r\n    this.checkInCommitPhase();\r\n\r\n    this.operations.insert(operation);\r\n    this.operations.state.update(operation, {added: true});\r\n  }\r\n\r\n  /**\r\n   * Remove an operation from the operations store\r\n   * @param operation Operation to remove\r\n   */\r\n  private removeOperation(operation: EntityOperation) {\r\n    this.checkInCommitPhase();\r\n\r\n    this.operations.delete(operation);\r\n    this.operations.state.update(operation, {added: false});\r\n  }\r\n\r\n  /**\r\n   * Get the any existing operation an entity\r\n   * @param entity Entity\r\n   * @returns Either an insert, update or delete operation\r\n   */\r\n  private getOperationByEntity(entity: object): EntityOperation {\r\n    return this.operations.get(this.getKey(entity));\r\n  }\r\n\r\n  /**\r\n   * Get all the operations to commit\r\n   * @returns Operations to commit\r\n   */\r\n  private getOperationsInCommit(): EntityOperation[] {\r\n    return this.operations.stateView\r\n      .manyBy((value: {entity: EntityOperation, state: EntityOperationState}) => {\r\n        return value.state.added === true;\r\n      })\r\n      .map((value: {entity: EntityOperation, state: EntityOperationState}) => value.entity);\r\n  }\r\n\r\n  /**\r\n   * Check if the transaction is in the commit phase and throw an error if it is\r\n   */\r\n  private checkInCommitPhase() {\r\n    if (this.inCommitPhase === true) {\r\n      throw new Error('This transaction is in the commit phase. Cannot complete this operation.');\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport { EntityRecord } from '../shared/entity.interfaces';\r\nimport { EntityStore } from '../shared/store';\r\nimport { EntityStoreWatcher } from '../shared/watcher';\r\nimport { getEntityTitle } from '../shared/entity.utils';\r\n\r\n@Component({\r\n  selector: 'igo-entity-selector',\r\n  templateUrl: './entity-selector.component.html',\r\n  styleUrls: ['./entity-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EntitySelectorComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * The selected entity\r\n   * @internal\r\n   */\r\n  selected$ = new BehaviorSubject<object>(undefined);\r\n\r\n  /**\r\n   * The current multi select option text\r\n   * @internal\r\n   */\r\n  multiText$ = new BehaviorSubject<string>(undefined);\r\n\r\n  readonly multiSelectValue = {id: 'IGO_MULTI_SELECT'};\r\n\r\n  /**\r\n   * Subscription to the selected entity\r\n   */\r\n  private selected$$: Subscription;\r\n\r\n  /**\r\n   * Store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<object>;\r\n\r\n  /**\r\n   * Entity store\r\n   */\r\n  @Input() store: EntityStore<object>;\r\n\r\n  /**\r\n   * Title accessor\r\n   */\r\n  @Input() titleAccessor: (object) => string = getEntityTitle;\r\n\r\n  /**\r\n   * Text to display when nothing is selected\r\n   */\r\n  @Input() emptyText: string = undefined;\r\n\r\n  /**\r\n   * Wheter selecting many entities is allowed\r\n   */\r\n  @Input() multi: boolean = false;\r\n\r\n  /**\r\n   * Text to display for the select all option\r\n   */\r\n  @Input() multiAllText: string = 'All';\r\n\r\n  /**\r\n   * Text to display for the select none option\r\n   */\r\n  @Input() multiNoneText: string = 'None';\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Event emitted when the selection changes\r\n   */\r\n  @Output() selectedChange = new EventEmitter<{\r\n    selected: boolean;\r\n    value: object | object[];\r\n  }>();\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Create a store watcher and subscribe to the selected entity\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n\r\n    this.selected$$ = this.store.stateView\r\n      .manyBy$((record: EntityRecord<object>) => record.state.selected === true)\r\n      .subscribe((records: EntityRecord<object>[]) => {\r\n        const entities = records.map((record: EntityRecord<object>) => record.entity);\r\n        this.onSelectFromStore(entities);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the selected entity and destroy the store watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n    this.selected$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * On selection change, update the store's state and emit an event\r\n   * @internal\r\n   */\r\n  onSelectionChange(event: {value: object | undefined}) {\r\n    const values = event.value instanceof Array ? event.value : [event.value];\r\n\r\n    const multiSelect = values.find((_value: object) => _value === this.multiSelectValue);\r\n    let entities = values.filter((_value: object) => _value !== this.multiSelectValue);\r\n    if (multiSelect !== undefined) {\r\n      if (entities.length === this.store.count) {\r\n        entities = [];\r\n      } else if (entities.length < this.store.count) {\r\n        entities = this.store.all();\r\n      }\r\n    }\r\n\r\n    if (entities.length === 0) {\r\n      this.store.state.updateAll({selected: false});\r\n    } else {\r\n      this.store.state.updateMany(entities, {selected: true}, true);\r\n    }\r\n\r\n    const value = this.multi ? entities : event.value;\r\n    this.selectedChange.emit({selected: true, value});\r\n  }\r\n\r\n  private onSelectFromStore(entities: object[]) {\r\n    if (this.multi === true) {\r\n      this.selected$.next(entities);\r\n    } else {\r\n      const entity = entities.length > 0 ? entities[0] : undefined;\r\n      this.selected$.next(entity);\r\n    }\r\n\r\n    this.updateMultiToggleWithEntities(entities);\r\n  }\r\n\r\n  private updateMultiToggleWithEntities(entities: object[]) {\r\n    if (entities.length === this.store.count && this.multiText$.value !== this.multiNoneText) {\r\n      this.multiText$.next(this.multiNoneText);\r\n    } else if (entities.length < this.store.count && this.multiText$.value !== this.multiAllText) {\r\n      this.multiText$.next(this.multiAllText);\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SimpleChanges,\r\n  OnInit,\r\n  OnDestroy,\r\n  OnChanges\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport {\r\n  EntityRecord,\r\n  EntityStore,\r\n  EntityStoreWatcher,\r\n  EntityTableTemplate,\r\n  EntityTableColumn,\r\n  EntityTableColumnRenderer,\r\n  EntityTableSelectionState,\r\n  EntityTableScrollBehavior\r\n} from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-entity-table',\r\n  templateUrl: './entity-table.component.html',\r\n  styleUrls: ['./entity-table.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EntityTableComponent implements OnInit, OnDestroy, OnChanges  {\r\n\r\n  /**\r\n   * Reference to the column renderer types\r\n   * @internal\r\n   */\r\n  entityTableColumnRenderer = EntityTableColumnRenderer;\r\n\r\n  /**\r\n   * Reference to the selection states\r\n   * @internal\r\n   */\r\n  entityTableSelectionState = EntityTableSelectionState;\r\n\r\n  /**\r\n   * Observable of the selection,s state\r\n   * @internal\r\n   */\r\n  selectionState$: BehaviorSubject<EntityTableSelectionState> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Entity store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<object>;\r\n\r\n  /**\r\n   * Subscription to the store's selection\r\n   */\r\n  private selection$$: Subscription;\r\n\r\n  /**\r\n   * Entity store\r\n   */\r\n  @Input() store: EntityStore<object>;\r\n\r\n  /**\r\n   * Table template\r\n   */\r\n  @Input() template: EntityTableTemplate;\r\n\r\n  /**\r\n   * Scroll behavior on selection\r\n   */\r\n  @Input()\r\n  scrollBehavior: EntityTableScrollBehavior = EntityTableScrollBehavior.Auto;\r\n\r\n  /**\r\n   * Event emitted when an entity (row) is clicked\r\n   */\r\n  @Output() entityClick = new EventEmitter<object>();\r\n\r\n  /**\r\n   * Event emitted when an entity (row) is selected\r\n   */\r\n  @Output() entitySelectChange = new EventEmitter<{\r\n    added: object[];\r\n  }>();\r\n\r\n  /**\r\n   * Table headers\r\n   * @internal\r\n   */\r\n  get headers(): string[] {\r\n    let columns = this.template.columns\r\n      .filter((column: EntityTableColumn) => column.visible !== false)\r\n      .map((column: EntityTableColumn) => column.name);\r\n\r\n    if (this.selectionCheckbox === true) {\r\n      columns = ['selectionCheckbox'].concat(columns);\r\n    }\r\n\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Data source consumable by the underlying material table\r\n   * @internal\r\n   */\r\n  get dataSource(): BehaviorSubject<object[]> { return this.store.view.all$(); }\r\n\r\n  /**\r\n   * Whether selection is supported\r\n   * @internal\r\n   */\r\n  get selection(): boolean { return this.template.selection || false; }\r\n\r\n  /**\r\n   * Whether a selection checkbox should be displayed\r\n   * @internal\r\n   */\r\n  get selectionCheckbox(): boolean { return this.template.selectionCheckbox || false; }\r\n\r\n  /**\r\n   * Whether selection many entities should eb supported\r\n   * @internal\r\n   */\r\n  get selectMany(): boolean { return this.template.selectMany || false; }\r\n\r\n  /**\r\n   * Whether selection many entities should eb supported\r\n   * @internal\r\n   */\r\n  get fixedHeader(): boolean { return this.template.fixedHeader === undefined ? true : this.template.fixedHeader; }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Track the selection state to properly display the selection checkboxes\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.selection$$ = this.store.stateView\r\n      .manyBy$((record: EntityRecord<object>) => record.state.selected === true)\r\n      .subscribe((records: EntityRecord<object>[]) => {\r\n        this.selectionState$.next(this.computeSelectionState(records));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * When the store change, create a new watcher\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const store = changes.store;\r\n    if (store && store.currentValue !== store.previousValue) {\r\n      if (this.watcher !== undefined) {\r\n        this.watcher.destroy();\r\n      }\r\n      this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind the store watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.watcher !== undefined) {\r\n      this.watcher.destroy();\r\n    }\r\n    this.selection$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Trigger a refresh of thre table. This can be useful when\r\n   * the data source doesn't emit a new value but for some reason\r\n   * the records need an update.\r\n   * @internal\r\n   */\r\n  refresh() {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * On sort, sort the store\r\n   * @param event Sort event\r\n   * @internal\r\n   */\r\n  onSort(event: {active: string, direction: string}) {\r\n    const direction = event.direction;\r\n    const column = this.template.columns\r\n      .find((c: EntityTableColumn) => c.name === event.active);\r\n\r\n    if (direction === 'asc' || direction === 'desc') {\r\n      this.store.view.sort({\r\n        valueAccessor: (entity: object) => this.getValue(entity, column),\r\n        direction\r\n      });\r\n    } else {\r\n      this.store.view.sort(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When an entity is clicked, emit an event\r\n   * @param entity Entity\r\n   * @internal\r\n   */\r\n  onRowClick(entity: object) {\r\n    this.entityClick.emit(entity);\r\n  }\r\n\r\n  /**\r\n   * When an entity is selected, select it in the store and emit an event. Even if\r\n   * \"many\" is set to true, this method always select a single, exclusive row. Selecting\r\n   * multiple rows should be achieved by using the checkboxes.\r\n   * @param entity Entity\r\n   * @internal\r\n   */\r\n  onRowSelect(entity: object) {\r\n    if (this.selection === false) { return; }\r\n\r\n    // Selecting a\r\n    this.store.state.update(entity, {selected: true}, true);\r\n    this.entitySelectChange.emit({added: [entity]});\r\n  }\r\n\r\n  /**\r\n   * Select or unselect all rows at once. On select, emit an event.\r\n   * @param toggle Select or unselect\r\n   * @internal\r\n   */\r\n  onToggleRows(toggle: boolean) {\r\n    if (this.selection === false) { return; }\r\n\r\n    this.store.state.updateAll({selected: toggle});\r\n    if (toggle === true) {\r\n      this.entitySelectChange.emit({added: [this.store.view.all()]});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When an entity is toggled, select or unselect it in the store. On select,\r\n   * emit an event.\r\n   * @param toggle Select or unselect\r\n   * @param entity Entity\r\n   * @internal\r\n   */\r\n  onToggleRow(toggle: boolean, entity: object) {\r\n    if (this.selection === false) { return; }\r\n\r\n    const exclusive = toggle === true && !this.selectMany;\r\n    this.store.state.update(entity, {selected: toggle}, exclusive);\r\n    if (toggle === true) {\r\n      this.entitySelectChange.emit({added: [entity]});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute the selection state\r\n   * @returns Whether all, some or no rows are selected\r\n   * @internal\r\n   */\r\n  private computeSelectionState(selectedRecords: EntityRecord<object>[]): EntityTableSelectionState {\r\n    const states = EntityTableSelectionState;\r\n    const selectionCount = selectedRecords.length;\r\n    return selectionCount === 0 ?\r\n      states.None :\r\n      (selectionCount === this.store.view.count ? states.All : states.Some);\r\n  }\r\n\r\n  /**\r\n   * Whether a column is sortable\r\n   * @param column Column\r\n   * @returns True if a column is sortable\r\n   * @internal\r\n   */\r\n  columnIsSortable(column: EntityTableColumn): boolean {\r\n    let sortable = column.sort;\r\n    if (sortable === undefined) {\r\n      sortable = this.template.sort === undefined ? false : this.template.sort;\r\n    }\r\n    return sortable;\r\n  }\r\n\r\n  /**\r\n   * Whether a row is should be selected based on the underlying entity state\r\n   * @param entity Entity\r\n   * @returns True if a row should be selected\r\n   * @internal\r\n   */\r\n  rowIsSelected(entity: object): boolean {\r\n    const state = this.store.state.get(entity);\r\n    return state.selected ? state.selected : false;\r\n  }\r\n\r\n  /**\r\n   * Method to access an entity's values\r\n   * @param entity Entity\r\n   * @param column Column\r\n   * @returns Any value\r\n   * @internal\r\n   */\r\n  getValue(entity: object, column: EntityTableColumn): any {\r\n    if (column.valueAccessor !== undefined) {\r\n      return column.valueAccessor(entity);\r\n    }\r\n    if (this.template.valueAccessor !== undefined) {\r\n      return this.template.valueAccessor(entity, column.name);\r\n    }\r\n    return this.store.getProperty(entity, column.name);\r\n  }\r\n\r\n  /**\r\n   * Return the type of renderer of a column\r\n   * @param column Column\r\n   * @returns Renderer type\r\n   * @internal\r\n   */\r\n  getColumnRenderer(column: EntityTableColumn): EntityTableColumnRenderer {\r\n    if (column.renderer !== undefined) {\r\n      return column.renderer;\r\n    }\r\n    return EntityTableColumnRenderer.Default;\r\n  }\r\n\r\n  /**\r\n   * Return the table ngClass\r\n   * @returns ngClass\r\n   * @internal\r\n   */\r\n  getTableClass(): {[key: string]: boolean} {\r\n    return {\r\n      'igo-entity-table-with-selection': this.selection\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Return a header ngClass\r\n   * @returns ngClass\r\n   * @internal\r\n   */\r\n  getHeaderClass(): {[key: string]: boolean} {\r\n    const func = this.template.headerClassFunc;\r\n    if (func instanceof Function) {\r\n      return func();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Return a row ngClass\r\n   * @param entity Entity\r\n   * @returns ngClass\r\n   * @internal\r\n   */\r\n  getRowClass(entity: object): {[key: string]: boolean} {\r\n    const func = this.template.rowClassFunc;\r\n    if (func instanceof Function) {\r\n      return func(entity);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Return a row ngClass\r\n   * @param entity Entity\r\n   * @param column Column\r\n   * @returns ngClass\r\n   * @internal\r\n   */\r\n  getCellClass(entity: object, column: EntityTableColumn): {[key: string]: boolean} {\r\n    const cls = {};\r\n\r\n    const tableFunc = this.template.cellClassFunc;\r\n    if (tableFunc instanceof Function) {\r\n      Object.assign(cls, tableFunc(entity, column));\r\n    }\r\n\r\n    const columnFunc = column.cellClassFunc;\r\n    if (columnFunc instanceof Function) {\r\n      Object.assign(cls, columnFunc(entity));\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  /**\r\n   * When a button is clicked\r\n   * @param func Function\r\n   * @param entity Entity\r\n   * @internal\r\n   */\r\n  onButtonClick(clickFunc: (entity: object) => void, entity: object) {\r\n    if (typeof clickFunc === 'function') {\r\n      clickFunc(entity);\r\n    }\r\n  }\r\n\r\n}\r\n","export enum ActionbarMode {\r\n  Dock = 'dock',\r\n  Overlay = 'overlay',\r\n  Context = 'context'\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { EntityStoreWatcher } from '../../entity';\r\nimport { Action } from '../shared/action.interfaces';\r\nimport { ActionbarMode } from '../shared/action.enums';\r\nimport { ActionStore } from '../shared/store';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\n\r\n/**\r\n * A list of action buttons.\r\n * This component can be displayed in one of two way: 'dock' or 'overlay'\r\n */\r\n@Component({\r\n  selector: 'igo-actionbar',\r\n  templateUrl: './actionbar.component.html',\r\n  styleUrls: ['./actionbar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActionbarComponent implements OnDestroy, OnChanges {\r\n  /**\r\n   * Reference to the ActionbarMode enum for use in the template\r\n   * @internal\r\n   */\r\n  actionbarMode = ActionbarMode;\r\n\r\n  /**\r\n   * Whether the actionbar is collapsed (Dock mode)\r\n   * @internal\r\n   */\r\n  collapsed = false;\r\n\r\n  /**\r\n   * Toggle collapse action (Dock)\r\n   * @internal\r\n   */\r\n  toggleCollapseAction = {\r\n    id: 'actionbar_toggle',\r\n    icon: 'dots-vertical',\r\n    handler: () => {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Action store watcher\r\n   * @internal\r\n   */\r\n  private watcher: EntityStoreWatcher<Action>;\r\n\r\n  /**\r\n   * Action store\r\n   */\r\n  @Input() store: ActionStore;\r\n\r\n  /**\r\n   * Actionbar mode\r\n   */\r\n  @Input() mode: ActionbarMode = ActionbarMode.Dock;\r\n\r\n  /**\r\n   * Whether a toggle button should be displayed (Dock mode)\r\n   */\r\n  @Input() withToggleButton = false;\r\n\r\n  /**\r\n   * Whether a the actionbar should display buttons horizontally\r\n   */\r\n  @Input() horizontal = false;\r\n\r\n  /**\r\n   * Color\r\n   */\r\n  @Input() color = 'default';\r\n\r\n  /**\r\n   * Whether action titles are displayed\r\n   */\r\n  @Input() withTitle = true;\r\n\r\n  /**\r\n   * Whether action icons are displayed\r\n   */\r\n  @Input() withIcon = true;\r\n\r\n  /**\r\n   * Overlay X position\r\n   */\r\n  @Input() xPosition = 'before';\r\n\r\n  /**\r\n   * Overlay X position\r\n   */\r\n  @Input() yPosition = 'above';\r\n\r\n  /**\r\n   * Class to add to the actionbar overlay\r\n   */\r\n  @Input()\r\n  set overlayClass(value: string) {\r\n    this._overlayClass = value;\r\n  }\r\n  get overlayClass(): string {\r\n    return [this._overlayClass, 'igo-actionbar-overlay'].join(' ');\r\n  }\r\n  private _overlayClass = '';\r\n\r\n  /**\r\n   * Function to add class to item actionbar\r\n   */\r\n  @Input() itemClassFunc: (action: Action) => { [key: string]: boolean } =\r\n    ActionbarComponent.defaultItemClassFunc;\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  @HostBinding('class.with-title')\r\n  get withTitleClass() {\r\n    return this.withTitle;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  @HostBinding('class.with-icon')\r\n  get withIconClass() {\r\n    return this.withIcon;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  @HostBinding('class.horizontal')\r\n  get horizontalClass() {\r\n    return this.horizontal;\r\n  }\r\n\r\n  static defaultItemClassFunc(action: Action) {\r\n    return {};\r\n  }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef, public overlay: Overlay) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const store = changes.store;\r\n    if (store && store.currentValue !== store.previousValue) {\r\n      if (this.watcher !== undefined) {\r\n        this.watcher.destroy();\r\n      }\r\n      this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * Invoke the action handler\r\n   * @internal\r\n   */\r\n  onTriggerAction(action: Action) {\r\n    const args = action.args || [];\r\n    action.handler(...args);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { Action } from '../shared/action.interfaces';\r\n\r\n /**\r\n  * An action button\r\n  */\r\n@Component({\r\n  selector: 'igo-actionbar-item',\r\n  templateUrl: './actionbar-item.component.html',\r\n  styleUrls: ['./actionbar-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActionbarItemComponent {\r\n\r\n  /**\r\n   * Action\r\n   */\r\n  @Input() action: Action;\r\n\r\n  /**\r\n   * Color\r\n   */\r\n  @Input() color = 'default';\r\n\r\n  /**\r\n   * Whether the action title is displayed\r\n   */\r\n  @Input() withTitle = true;\r\n\r\n  /**\r\n   * Whether the action icon is displayed\r\n   */\r\n  @Input() withIcon = true;\r\n\r\n  /**\r\n   * Whether the action is disabled\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  /**\r\n   * Event emitted when the action button is clicked\r\n   */\r\n  @Output() trigger: EventEmitter<Action> = new EventEmitter();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return this.action.title; }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get tooltip(): string { return this.action.tooltip || this.title; }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string { return this.action.icon; }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * When the action button is clicked, emit the 'trigger' event but don't\r\n   * invoke the action handler. This is handled by the parent component.\r\n   * @internal\r\n   */\r\n  onClick() {\r\n    if (this.disabled === true) {\r\n      return;\r\n    }\r\n    this.trigger.emit(this.action);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatCardModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { ActionbarComponent } from './actionbar.component';\r\nimport { ActionbarItemComponent } from './actionbar-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoLanguageModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatMenuModule,\r\n    MatListModule,\r\n    MatCardModule\r\n  ],\r\n  exports: [ActionbarComponent],\r\n  declarations: [ActionbarComponent, ActionbarItemComponent]\r\n})\r\nexport class IgoActionbarModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoActionbarModule } from './actionbar/actionbar.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoActionbarModule\r\n  ],\r\n  exports: [\r\n    IgoActionbarModule\r\n  ],\r\n  declarations: [],\r\n  providers: []\r\n})\r\nexport class IgoActionModule {}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-backdrop',\r\n  templateUrl: './backdrop.component.html',\r\n  styleUrls: ['./backdrop.component.scss']\r\n})\r\nexport class BackdropComponent {\r\n  @Input()\r\n  get shown(): boolean {\r\n    return this._shown;\r\n  }\r\n  set shown(value: boolean) {\r\n    this._shown = value;\r\n  }\r\n  private _shown: boolean;\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { BackdropComponent } from './backdrop.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [BackdropComponent],\r\n  exports: [BackdropComponent]\r\n})\r\nexport class IgoBackdropModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoBackdropModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Output\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoClickout]'\r\n})\r\nexport class ClickoutDirective {\r\n  @Output() clickout = new EventEmitter<MouseEvent>();\r\n\r\n  @HostListener('document:click', ['$event', '$event.target'])\r\n  handleMouseClick(event: MouseEvent, target: HTMLElement) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    if (!this.el.nativeElement.contains(target)) {\r\n      this.clickout.emit(event);\r\n    }\r\n  }\r\n\r\n  constructor(private el: ElementRef) {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ClickoutDirective } from './clickout.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [ClickoutDirective],\r\n  exports: [ClickoutDirective]\r\n})\r\nexport class IgoClickoutModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoClickoutModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'clone'\r\n})\r\nexport class ClonePipe implements PipeTransform {\r\n  transform(value: any, args?: any): any {\r\n    if (value === undefined) {\r\n      return value;\r\n    }\r\n\r\n    if (value instanceof Array) {\r\n      return value.map(obj => Object.assign(Object.create(obj), obj));\r\n    } else {\r\n      return Object.assign(Object.create(value), value);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ClonePipe } from './clone.pipe';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [ClonePipe],\r\n  exports: [ClonePipe]\r\n})\r\nexport class IgoCloneModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCloneModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoCollapse]'\r\n})\r\nexport class CollapseDirective {\r\n  @Input()\r\n  get target() {\r\n    return this._target;\r\n  }\r\n  set target(value: Element) {\r\n    this._target = value;\r\n  }\r\n  private _target: Element;\r\n\r\n  @Input()\r\n  get collapsed(): boolean {\r\n    return this._collapsed;\r\n  }\r\n  set collapsed(collapsed: boolean) {\r\n    collapsed ? this.collapseTarget() : this.expandTarget();\r\n    this._collapsed = collapsed;\r\n    this.toggle.emit(collapsed);\r\n  }\r\n  private _collapsed = false;\r\n\r\n  @Output() toggle: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  @HostListener('click')\r\n  click() {\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\r\n\r\n  private collapseTarget() {\r\n    this.renderer.addClass(this.target, 'igo-collapsed');\r\n    this.renderer.addClass(this.el.nativeElement, 'collapsed');\r\n  }\r\n\r\n  private expandTarget() {\r\n    this.renderer.removeClass(this.target, 'igo-collapsed');\r\n    this.renderer.removeClass(this.el.nativeElement, 'collapsed');\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-collapsible',\r\n  templateUrl: './collapsible.component.html',\r\n  styleUrls: ['./collapsible.component.scss']\r\n})\r\nexport class CollapsibleComponent {\r\n  @Input()\r\n  get title() {\r\n    return this._title;\r\n  }\r\n  set title(value: string) {\r\n    this._title = value;\r\n  }\r\n  private _title = '';\r\n\r\n  @Input()\r\n  get collapsed() {\r\n    return this._collapsed;\r\n  }\r\n  set collapsed(value: boolean) {\r\n    this._collapsed = value;\r\n  }\r\n  private _collapsed = false;\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { MatIconModule, MatListModule } from '@angular/material';\r\n\r\nimport { CollapseDirective } from './collapse.directive';\r\nimport { CollapsibleComponent } from './collapsible.component';\r\n\r\n@NgModule({\r\n  imports: [MatIconModule, MatListModule],\r\n  declarations: [CollapsibleComponent, CollapseDirective],\r\n  exports: [CollapsibleComponent, CollapseDirective]\r\n})\r\nexport class IgoCollapsibleModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCollapsibleModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'igo-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss']\r\n})\r\nexport class ConfirmDialogComponent {\r\n  public confirmMessage: string;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfirmDialogComponent } from './confirm-dialog.component';\r\n\r\n@Injectable()\r\nexport class ConfirmDialogService {\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  public open(message: string): Observable<any> {\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      disableClose: false\r\n    });\r\n    dialogRef.componentInstance.confirmMessage = message;\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { MatButtonModule, MatDialogModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { ConfirmDialogComponent } from './confirm-dialog.component';\r\nimport { ConfirmDialogService } from './confirm-dialog.service';\r\n\r\n@NgModule({\r\n  imports: [MatButtonModule, MatDialogModule, IgoLanguageModule],\r\n  declarations: [ConfirmDialogComponent],\r\n  exports: [ConfirmDialogComponent],\r\n  providers: [ConfirmDialogService],\r\n  entryComponents: [ConfirmDialogComponent]\r\n})\r\nexport class IgoConfirmDialogModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoConfirmDialogModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\r\n\r\n@Directive({\r\n  selector: '[igoContextMenu]'\r\n})\r\nexport class ContextMenuDirective {\r\n  overlayRef: OverlayRef | null;\r\n  sub: Subscription;\r\n\r\n  @Input('igoContextMenu') menuContext: TemplateRef<any>;\r\n  @Output() menuPosition = new EventEmitter<{ x: number; y: number }>();\r\n\r\n  constructor(\r\n    public overlay: Overlay,\r\n    public viewContainerRef: ViewContainerRef,\r\n    private elementRef: ElementRef\r\n  ) {}\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  public onContextMenu({ x, y }: MouseEvent): void {\r\n    this.close();\r\n    event.preventDefault();\r\n    this.menuPosition.emit({ x, y });\r\n    this.overlayRef = null;\r\n    const positionStrategy = this.overlay\r\n      .position()\r\n      .flexibleConnectedTo({ x, y })\r\n      .withPositions([\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        }\r\n      ]);\r\n    this.overlayRef = this.overlay.create({\r\n      positionStrategy,\r\n      scrollStrategy: this.overlay.scrollStrategies.close()\r\n    });\r\n    this.overlayRef.attach(\r\n      new TemplatePortal(this.menuContext, this.viewContainerRef, {\r\n        $implicit: undefined\r\n      })\r\n    );\r\n\r\n    this.sub = fromEvent<MouseEvent>(document, 'click')\r\n      .pipe(\r\n        filter(event => {\r\n          const clickTarget = event.target as HTMLElement;\r\n          this.close();\r\n          return (\r\n            !!this.overlayRef &&\r\n            !this.overlayRef.overlayElement.contains(clickTarget)\r\n          );\r\n        }),\r\n        take(1)\r\n      )\r\n      .subscribe(() => this.close());\r\n\r\n    this.sub = fromEvent<MouseEvent>(document, 'contextmenu')\r\n      .pipe(\r\n        filter(event => {\r\n          const clickTarget = event.target as HTMLElement;\r\n          if (\r\n            clickTarget &&\r\n            !this.elementRef.nativeElement.contains(clickTarget) &&\r\n            !this.overlayRef.overlayElement.contains(clickTarget)\r\n          ) {\r\n            return true;\r\n          } else {\r\n            event.preventDefault();\r\n          }\r\n        }),\r\n        take(1)\r\n      )\r\n      .subscribe(() => this.close());\r\n  }\r\n  close() {\r\n    if (this.overlayRef) {\r\n      this.overlayRef.dispose();\r\n      this.overlayRef = null;\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ContextMenuDirective } from './context-menu.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [ContextMenuDirective],\r\n  exports: [ContextMenuDirective]\r\n})\r\nexport class IgoContextMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoContextMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-custom-html',\r\n  templateUrl: './custom-html.component.html',\r\n  styleUrls: ['./custom-html.component.scss']\r\n})\r\nexport class CustomHtmlComponent {\r\n  @Input()\r\n  get html(): string {\r\n    return this._html;\r\n  }\r\n  set html(value: string) {\r\n    this._html = value;\r\n  }\r\n  private _html = '';\r\n\r\n  constructor() {}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'sanitizeHtml' })\r\nexport class SanitizeHtmlPipe implements PipeTransform {\r\n  constructor(private _sanitizer: DomSanitizer) {\r\n  }\r\n  transform(v: string): SafeHtml {\r\n    return this._sanitizer.bypassSecurityTrustHtml(v);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatInputModule,\r\n  MatButtonModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { CustomHtmlComponent } from './custom-html.component';\r\nimport { SanitizeHtmlPipe } from './custom-html.pipe';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SanitizeHtmlPipe, CustomHtmlComponent],\r\n  declarations: [SanitizeHtmlPipe, CustomHtmlComponent]\r\n})\r\nexport class IgoCustomHtmlModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCustomHtmlModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  HostListener,\r\n  HostBinding,\r\n  EventEmitter,\r\n  Output,\r\n  Input\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoDragAndDrop]'\r\n})\r\nexport class DragAndDropDirective {\r\n\r\n  @Input() allowedExtensions: Array<string> = [];\r\n\r\n  @Output() protected filesDropped: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  @Output() protected filesInvalid: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  @HostBinding('style.background') private background = 'inherit';\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.background = '#999';\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.background = 'inherit';\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.background = 'inherit';\r\n    const filesObj = this.validExtensions(evt);\r\n    if (filesObj.valid.length) {\r\n      this.filesDropped.emit(filesObj.valid);\r\n    }\r\n    if (filesObj.invalid.length) {\r\n      this.filesInvalid.emit(filesObj.invalid);\r\n    }\r\n  }\r\n\r\n  private validExtensions(evt) {\r\n    const files = evt.dataTransfer.files;\r\n    const filesObj = {\r\n      valid: [],\r\n      invalid: []\r\n    };\r\n    if (files.length > 0) {\r\n      for (const file of files) {\r\n        const ext = file.name.split('.')[file.name.split('.').length - 1];\r\n        if (\r\n          this.allowedExtensions.length === 0 ||\r\n          (\r\n            this.allowedExtensions.lastIndexOf(ext) !== -1 &&\r\n            file.size !== 0\r\n          )\r\n        ) {\r\n          filesObj.valid.push(file);\r\n        } else {\r\n          filesObj.invalid.push(file);\r\n        }\r\n      }\r\n    }\r\n\r\n    return filesObj;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { DragAndDropDirective } from './drag-drop.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [DragAndDropDirective],\r\n  exports: [DragAndDropDirective]\r\n})\r\nexport class IgoDrapDropModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDrapDropModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  ComponentFactory,\r\n  ComponentRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * This class is used in the DynamicComponentOutlet component. It holds\r\n * a reference to a component factory and can render that component\r\n * in a target element on demand. It's also possible to set inputs\r\n * and to subscribe to outputs.\r\n */\r\nexport class DynamicComponent<C> {\r\n\r\n  /**\r\n   * Component reference\r\n   */\r\n  private componentRef: ComponentRef<C>;\r\n\r\n  /**\r\n   * Subscriptions to the component's outputs. Those need\r\n   * to be unsubscribed when the component is destroyed.\r\n   */\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  /**\r\n   * Component target element\r\n   */\r\n  private target: ViewContainerRef;\r\n\r\n  /**\r\n   * Component inputs\r\n   */\r\n  private inputs: {[key: string]: any} = {};\r\n\r\n  /**\r\n   * Subscribers to the component's outputs\r\n   */\r\n  private subscribers: {[key: string]: (event: any) => void} = {};\r\n\r\n  constructor(private componentFactory: ComponentFactory<C>) {}\r\n\r\n  /**\r\n   * Render the component to a target element.\r\n   * Set it's inputs and subscribe to it's outputs.\r\n   * @param target Target element\r\n   */\r\n  setTarget(target: ViewContainerRef) {\r\n    this.target = target;\r\n    this.componentRef = target.createComponent(this.componentFactory);\r\n    this.updateInputs(this.inputs);\r\n    this.updateSubscribers(this.subscribers);\r\n  }\r\n\r\n  /**\r\n   * Destroy this component. That means, removing from it's target\r\n   * element and unsubscribing to it's outputs.\r\n   */\r\n  destroy() {\r\n    if (this.target !== undefined) {\r\n      this.target.clear();\r\n    }\r\n    if (this.componentRef !== undefined) {\r\n      this.componentRef.destroy();\r\n      this.componentRef = undefined;\r\n    }\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * Update the component inputs. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   */\r\n  updateInputs(inputs: {[key: string]: any}) {\r\n    this.inputs = inputs;\r\n    if (this.componentRef === undefined) {\r\n      return;\r\n    }\r\n\r\n    const instance = this.componentRef.instance;\r\n    const allowedInputs = this.componentFactory.inputs;\r\n    allowedInputs.forEach((value: {propName: string; templateName: string; }) => {\r\n      const key = value.propName;\r\n      if (inputs.hasOwnProperty(key)) {\r\n        instance[key] = inputs[key];\r\n      }\r\n    });\r\n\r\n    if (typeof (instance as any).onUpdateInputs === 'function') {\r\n      (instance as any).onUpdateInputs();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the component subscribers. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   */\r\n  updateSubscribers(subscribers: {[key: string]: (event: any) => void}) {\r\n    this.subscribers = subscribers;\r\n    if (this.componentRef === undefined) {\r\n      return;\r\n    }\r\n\r\n    const instance = this.componentRef.instance;\r\n    const allowedSubscribers = this.componentFactory.outputs;\r\n    allowedSubscribers.forEach((value: {propName: string; templateName: string; }) => {\r\n      const key = value.propName;\r\n      if (subscribers.hasOwnProperty(key)) {\r\n        const emitter = instance[key];\r\n        const subscriber = subscribers[key];\r\n        if (Array.isArray(subscriber)) {\r\n          subscriber.forEach((_subscriber) => {\r\n            this.subscriptions.push(emitter.subscribe(_subscriber));\r\n          });\r\n        } else {\r\n          this.subscriptions.push(emitter.subscribe(subscriber));\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to all outputs.\r\n   */\r\n  private unsubscribeAll() {\r\n    this.subscriptions.forEach((s: Subscription) => s.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  Injectable\r\n} from '@angular/core';\r\n\r\nimport { DynamicComponent } from './dynamic-component';\r\n\r\n/**\r\n * Service to creates DynamicComponent instances from base component classes\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DynamicComponentService {\r\n\r\n  constructor(private resolver: ComponentFactoryResolver) {}\r\n\r\n  /**\r\n   * Creates a DynamicComponent instance from a base component class\r\n   * @param componentCls The component class\r\n   * @returns DynamicComponent instance\r\n   */\r\n  create(componentCls: any): DynamicComponent<any> {\r\n    const factory = this.resolver.resolveComponentFactory(componentCls as any);\r\n    return new DynamicComponent<typeof componentCls>(factory);\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewContainerRef,\r\n  ViewChild\r\n} from '@angular/core';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { DynamicComponent } from '../shared/dynamic-component';\r\nimport { DynamicComponentService } from '../shared/dynamic-component.service';\r\n\r\n@Component({\r\n  selector: 'igo-dynamic-outlet',\r\n  templateUrl: 'dynamic-outlet.component.html',\r\n  styleUrls: ['dynamic-outlet.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DynamicOutletComponent implements OnChanges, OnDestroy {\r\n  /**\r\n   * The dynamic component base class or the dynamic component itself\r\n   */\r\n  @Input() component: DynamicComponent<any> | any;\r\n\r\n  /**\r\n   * The dynamic component inputs\r\n   */\r\n  @Input() inputs: { [key: string]: any } = {};\r\n\r\n  /**\r\n   * The subscribers to the dynamic component outputs\r\n   */\r\n  @Input() subscribers: { [key: string]: (event: any) => void } = {};\r\n\r\n  /**\r\n   * The dynamic component\r\n   */\r\n  private dynamicComponent: DynamicComponent<any>;\r\n\r\n  /**\r\n   * The view element to render the component to\r\n   * @ignore\r\n   */\r\n  @ViewChild('target', { read: ViewContainerRef })\r\n  private target: ViewContainerRef;\r\n\r\n  constructor(\r\n    private dynamicComponentService: DynamicComponentService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  /**\r\n   * If the dynamic component changes, create it.\r\n   * If the inputs or subscribers change, update the current component's\r\n   * inputs or subscribers.\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const component = changes.component;\r\n    const inputs = changes.inputs;\r\n    const subscribers = changes.subscribers;\r\n    const eq = ObjectUtils.objectsAreEquivalent;\r\n\r\n    if (component && component.currentValue !== component.previousValue) {\r\n      this.createComponent(component.currentValue);\r\n    } else {\r\n      const inputsAreEquivalents =\r\n        inputs && eq(inputs.currentValue || {}, inputs.previousValue || {});\r\n      const subscribersAreEquivalents =\r\n        subscribers &&\r\n        eq(subscribers.currentValue || {}, subscribers.previousValue || {});\r\n\r\n      if (inputsAreEquivalents === false) {\r\n        this.updateInputs();\r\n      }\r\n\r\n      if (subscribersAreEquivalents === false) {\r\n        this.updateSubscribers();\r\n      }\r\n    }\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Destroy the dynamic component and all it's subscribers\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.dynamicComponent) {\r\n      this.dynamicComponent.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a  DynamicComponent out of the component class and render it.\r\n   * @internal\r\n   */\r\n  private createComponent(component: DynamicComponent<any> | any) {\r\n    if (this.dynamicComponent !== undefined) {\r\n      this.dynamicComponent.destroy();\r\n    }\r\n    this.dynamicComponent =\r\n      component instanceof DynamicComponent\r\n        ? component\r\n        : this.dynamicComponentService.create(component);\r\n    this.renderComponent();\r\n  }\r\n\r\n  /**\r\n   * Create and render the dynamic component. Set it's inputs and subscribers\r\n   * @internal\r\n   */\r\n  private renderComponent() {\r\n    this.updateInputs();\r\n    this.updateSubscribers();\r\n    this.dynamicComponent.setTarget(this.target);\r\n  }\r\n\r\n  /**\r\n   * Update the dynamic component inputs. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   * @internal\r\n   */\r\n  private updateInputs() {\r\n    this.dynamicComponent.updateInputs(this.inputs);\r\n  }\r\n\r\n  /**\r\n   * Update the dynamic component subscribers. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   * @internal\r\n   */\r\n  private updateSubscribers() {\r\n    this.dynamicComponent.updateSubscribers(this.subscribers);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DynamicOutletComponent } from './dynamic-outlet.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    DynamicOutletComponent\r\n  ],\r\n  declarations: [\r\n    DynamicOutletComponent\r\n  ]\r\n})\r\nexport class IgoDynamicOutletModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoDynamicOutletModule } from './dynamic-outlet/dynamic-outlet.module';\r\nimport { DynamicComponentService } from './shared/dynamic-component.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoDynamicOutletModule\r\n  ],\r\n  exports: [\r\n    IgoDynamicOutletModule\r\n  ],\r\n  providers: [\r\n    DynamicComponentService\r\n  ]\r\n})\r\nexport class IgoDynamicComponentModule {}\r\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\n\r\nimport { Media, MediaService } from '@igo2/core';\r\n\r\nimport { FlexibleState, FlexibleDirection } from './flexible.type';\r\n\r\n@Component({\r\n  selector: 'igo-flexible',\r\n  templateUrl: './flexible.component.html',\r\n  styleUrls: ['./flexible.component.scss']\r\n})\r\nexport class FlexibleComponent implements OnInit {\r\n  static transitionTime = 250;\r\n\r\n  @ViewChild('flexibleMain') main;\r\n\r\n  @Input()\r\n  get initial(): string {\r\n    return this._initial;\r\n  }\r\n  set initial(value: string) {\r\n    this._initial = value;\r\n  }\r\n  private _initial = '0';\r\n\r\n  @Input()\r\n  get collapsed(): string {\r\n    return this._collapsed;\r\n  }\r\n  set collapsed(value: string) {\r\n    this._collapsed = value;\r\n  }\r\n  private _collapsed = '0';\r\n\r\n  @Input()\r\n  get expanded(): string {\r\n    return this._expanded;\r\n  }\r\n  set expanded(value: string) {\r\n    this._expanded = value;\r\n  }\r\n  private _expanded = '100%';\r\n\r\n  @Input()\r\n  get initialMobile(): string {\r\n    return this._initialMobile;\r\n  }\r\n  set initialMobile(value: string) {\r\n    this._initialMobile = value;\r\n  }\r\n  private _initialMobile: string = this.expanded;\r\n\r\n  @Input()\r\n  get collapsedMobile(): string {\r\n    return this._collapsedMobile;\r\n  }\r\n  set collapsedMobile(value: string) {\r\n    this._collapsedMobile = value;\r\n  }\r\n  private _collapsedMobile: string = this.collapsed;\r\n\r\n  @Input()\r\n  get expandedMobile(): string {\r\n    return this._expandedMobile;\r\n  }\r\n  set expandedMobile(value: string) {\r\n    this._expandedMobile = value;\r\n  }\r\n  private _expandedMobile: string = this.expanded;\r\n\r\n  @Input()\r\n  get direction(): FlexibleDirection {\r\n    return this._direction;\r\n  }\r\n  set direction(value: FlexibleDirection) {\r\n    this._direction = value;\r\n  }\r\n  private _direction: FlexibleDirection = 'column';\r\n\r\n  @Input()\r\n  get state(): FlexibleState {\r\n    return this._state;\r\n  }\r\n  set state(value: FlexibleState) {\r\n    const sizes = {\r\n      initial: this.initial,\r\n      collapsed: this.collapsed,\r\n      expanded: this.expanded\r\n    };\r\n\r\n    const media = this.mediaService.media$.value;\r\n    if (media === 'mobile') {\r\n      Object.assign(sizes, {\r\n        initial: this.initialMobile,\r\n        collapsed: this.collapsedMobile,\r\n        expanded: this.expandedMobile\r\n      });\r\n    }\r\n\r\n    const size = sizes[value];\r\n    if (size !== undefined) {\r\n      this.setSize(size);\r\n      setTimeout(() => {\r\n        this._state = value;\r\n      }, FlexibleComponent.transitionTime);\r\n    }\r\n  }\r\n  private _state: FlexibleState = 'initial';\r\n\r\n  constructor(private el: ElementRef, private mediaService: MediaService) {}\r\n\r\n  ngOnInit() {\r\n    this.el.nativeElement.className += this.direction;\r\n\r\n    // Since this component supports different sizes\r\n    // on mobile, force a redraw when the media changes\r\n    this.mediaService.media$.subscribe(\r\n      (media: Media) => (this.state = this.state)\r\n    );\r\n  }\r\n\r\n  private setSize(size: string) {\r\n    this._state = 'transition';\r\n\r\n    if (this.direction === 'column') {\r\n      this.main.nativeElement.style.height = size;\r\n    } else if (this.direction === 'row') {\r\n      this.main.nativeElement.style.width = size;\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FlexibleComponent } from './flexible.component';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [FlexibleComponent],\r\n  exports: [FlexibleComponent]\r\n})\r\nexport class IgoFlexibleModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoFlexibleModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nimport { Form, FormField, FormFieldGroup } from './form.interfaces';\r\n\r\nexport function formControlIsRequired(control: AbstractControl): boolean {\r\n  if (control.validator) {\r\n    const validator = control.validator({} as AbstractControl);\r\n    if (validator && validator.required) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if ((control as any).controls) {\r\n    const requiredControl = Object.keys((control as any).controls).find((key: string) => {\r\n      return formControlIsRequired((control as any).controls[key]);\r\n    });\r\n    return requiredControl !== undefined;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function getDefaultErrorMessages(): {[key: string]: string} {\r\n  return {\r\n    required: 'igo.common.form.errors.required'\r\n  };\r\n}\r\n\r\nexport function getControlErrorMessage(control: AbstractControl, messages: {[key: string]: string}): string {\r\n  const errors = control.errors || {};\r\n  const errorKeys = Object.keys(errors);\r\n  const errorMessages = errorKeys\r\n    .map((key: string) => messages[key])\r\n    .filter((message: string) => message !== undefined);\r\n  return errorMessages.length > 0 ? errorMessages[0] : '';\r\n}\r\n\r\nexport function getAllFormFields(form: Form): FormField[] {\r\n  return form.groups.reduce((acc: FormField[], group: FormFieldGroup) => {\r\n    return acc.concat(group.fields);\r\n  }, [].concat(form.fields));\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\n\r\nimport t from 'typy';\r\n\r\nimport { Form, FormField, FormFieldGroup } from '../shared/form.interfaces';\r\nimport { getAllFormFields } from '../shared/form.utils';\r\n\r\n/**\r\n * A configurable form\r\n */\r\n@Component({\r\n  selector: 'igo-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormComponent implements OnChanges {\r\n\r\n  /**\r\n   * Form\r\n   */\r\n  @Input() form: Form;\r\n\r\n  /**\r\n   * Input data\r\n   */\r\n  @Input() formData: { [key: string]: any};\r\n\r\n  /**\r\n   * Event emitted when the form is submitted\r\n   */\r\n  @Output() submitForm = new EventEmitter<{[key: string]: any}>();\r\n\r\n  @ViewChild('buttons') buttons: ElementRef;\r\n\r\n  get hasButtons(): boolean {\r\n    return this.buttons.nativeElement.children.length !== 0;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Is the entity or the template change, recreate the form or repopulate it.\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const formData = changes.formData;\r\n    if (formData && formData.currentValue !== formData.previousValue) {\r\n      if (formData.currentValue === undefined) {\r\n        this.clear();\r\n      } else {\r\n        this.setData(formData.currentValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature and emit an event\r\n   * @param event Form submit event\r\n   * @internal\r\n   */\r\n  onSubmit() {\r\n    this.submitForm.emit(this.getData());\r\n  }\r\n\r\n  private setData(data: {[key: string]: any}) {\r\n    this.form.fields.forEach((field: FormField) => {\r\n      field.control.setValue(t(data, field.name).safeObject);\r\n    });\r\n\r\n    this.form.groups.forEach((group: FormFieldGroup) => {\r\n      group.fields.forEach((field: FormField) => {\r\n        field.control.setValue(t(data, field.name).safeObject);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getData(): { [key: string]: any} {\r\n    const data = {};\r\n    getAllFormFields(this.form).forEach((field: FormField) => {\r\n      this.updateDataWithFormField(data, field);\r\n    });\r\n    return data;\r\n  }\r\n\r\n  private updateDataWithFormField(data: { [key: string]: any}, field: FormField) {\r\n    const control = field.control;\r\n    if (!control.disabled) {\r\n      data[field.name] = control.value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear form\r\n   */\r\n  private clear() {\r\n    this.form.control.reset();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { FormComponent } from './form.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  exports: [\r\n    FormComponent,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [\r\n    FormComponent\r\n  ]\r\n})\r\nexport class IgoFormFormModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Service where all available form fields are registered.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormFieldService {\r\n\r\n  static fields: {[key: string]: any} = {};\r\n\r\n  static register(type: string, component: any) {\r\n    FormFieldService.fields[type] = component;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Return field component by type\r\n   * @param type Field type\r\n   * @returns Field component\r\n   */\r\n  getFieldByType(type: string): any {\r\n    return FormFieldService.fields[type];\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormFieldConfig,\r\n  FormFieldGroup,\r\n  FormFieldGroupConfig\r\n} from './form.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormService {\r\n\r\n  constructor(private formBuilder: FormBuilder) {}\r\n\r\n  form(fields: FormField[], groups: FormFieldGroup[]): Form {\r\n    const control = this.formBuilder.group({});\r\n    fields.forEach((field: FormField) => {\r\n      control.addControl(field.name, field.control);\r\n    });\r\n    groups.forEach((group: FormFieldGroup) => {\r\n      control.addControl(group.name, group.control);\r\n    });\r\n\r\n    return {fields, groups, control};\r\n  }\r\n\r\n  group(config: FormFieldGroupConfig, fields: FormField[]): FormFieldGroup {\r\n    const options = config.options || {};\r\n    const control = this.formBuilder.group({});\r\n    fields.forEach((field: FormField) => {\r\n      control.addControl(field.name, field.control);\r\n    });\r\n    control.setValidators(options.validator);\r\n\r\n    return Object.assign({}, config, {fields, control}) as FormFieldGroup;\r\n  }\r\n\r\n  field(config: FormFieldConfig): FormField {\r\n    const options = config.options || {};\r\n    const state = Object.assign({value: ''}, {\r\n      disabled: options.disabled\r\n    });\r\n    const control = this.formBuilder.control(state);\r\n    control.setValidators(options.validator);\r\n\r\n    return Object.assign({type: 'text'}, config, {control}) as FormField;\r\n  }\r\n\r\n  extendFieldConfig(config: FormFieldConfig, partial: Partial<FormFieldConfig>): FormFieldConfig {\r\n    const options = Object.assign({}, config.options || {}, partial.options || {});\r\n    const inputs = Object.assign({}, config.inputs || {}, partial.inputs || {});\r\n    const subscribers = Object.assign({}, config.subscribers || {}, partial.subscribers || {});\r\n    return Object.assign({}, config, {options, inputs, subscribers});\r\n  }\r\n\r\n}\r\n","import { FormFieldService } from './form-field.service';\r\n\r\nexport function FormFieldComponent(type: string): (cls: any) => any {\r\n  return (compType: any) => {\r\n    FormFieldService.register(type, compType);\r\n  };\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { FormField, FormFieldInputs, FormFieldOptions } from '../shared/form.interfaces';\r\nimport { FormFieldService } from '../shared/form-field.service';\r\nimport { getDefaultErrorMessages } from '../shared';\r\n\r\n/**\r\n * This component renders the proper form input based on\r\n * the field configuration it receives.\r\n */\r\n@Component({\r\n  selector: 'igo-form-field',\r\n  templateUrl: './form-field.component.html',\r\n  styleUrls: ['./form-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormFieldComponent {\r\n\r\n  /**\r\n   * Field configuration\r\n   */\r\n  @Input() field: FormField;\r\n\r\n  get fieldOptions(): FormFieldOptions {\r\n    return this.field.options || {};\r\n  }\r\n\r\n  constructor(private formFieldService: FormFieldService) {}\r\n\r\n  getFieldComponent(): any {\r\n    return this.formFieldService.getFieldByType(this.field.type || 'text');\r\n  }\r\n\r\n  getFieldInputs(): FormFieldInputs {\r\n    const errors = this.fieldOptions.errors || {};\r\n    return Object.assign(\r\n      {\r\n        placeholder: this.field.title,\r\n        disableSwitch: this.fieldOptions.disableSwitch || false\r\n      },\r\n      Object.assign({}, this.field.inputs || {}),\r\n      {\r\n        formControl: this.field.control,\r\n        errors: Object.assign({}, getDefaultErrorMessages(), errors)\r\n      }\r\n    );\r\n  }\r\n\r\n  getFieldSubscribers(): {[key: string]: ({field: FormField, control: FormControl}) => void } {\r\n    return Object.assign({}, this.field.subscribers || {});\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\nimport { formControlIsRequired, getControlErrorMessage } from '../shared/form.utils';\r\nimport { FormFieldSelectChoice } from '../shared/form.interfaces';\r\nimport { FormFieldComponent } from '../shared/form-field-component';\r\n\r\n/**\r\n * This component renders a select field\r\n */\r\n@FormFieldComponent('select')\r\n@Component({\r\n  selector: 'igo-form-field-select',\r\n  templateUrl: './form-field-select.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormFieldSelectComponent implements OnInit {\r\n\r\n  choices$: Observable<FormFieldSelectChoice[]>;\r\n\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Select input choices\r\n   */\r\n  @Input()\r\n  set choices(value: Observable<FormFieldSelectChoice[]> | FormFieldSelectChoice[]) {\r\n    if (value instanceof Observable) {\r\n      this.choices$ = value;\r\n    } else {\r\n      this.choices$ = of(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() errors: {[key: string]: string};\r\n\r\n  /**\r\n   * Wheter a disable switch should be available\r\n   */\r\n  @Input() disableSwitch: boolean = false;\r\n\r\n  /**\r\n   * Whether the field is required\r\n   */\r\n  get required(): boolean {\r\n    return formControlIsRequired(this.formControl);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabled$.next(this.formControl.disabled);\r\n  }\r\n\r\n  /**\r\n   * Get error message\r\n   */\r\n  getErrorMessage(): string {\r\n    return getControlErrorMessage(this.formControl, this.errors);\r\n  }\r\n\r\n  onDisableSwitchClick() {\r\n    this.toggleDisabled();\r\n  }\r\n\r\n  private toggleDisabled() {\r\n    const disabled = !this.disabled$.value;\r\n    if (disabled === true) {\r\n      this.formControl.disable();\r\n    } else {\r\n      this.formControl.enable();\r\n    }\r\n    this.disabled$.next(disabled);\r\n  }\r\n\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport {\r\n  formControlIsRequired,\r\n  getControlErrorMessage\r\n} from '../shared/form.utils';\r\nimport { FormFieldComponent } from '../shared/form-field-component';\r\n\r\n/**\r\n * This component renders a text field\r\n */\r\n@FormFieldComponent('text')\r\n@Component({\r\n  selector: 'igo-form-field-text',\r\n  templateUrl: './form-field-text.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormFieldTextComponent implements OnInit {\r\n\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() errors: {[key: string]: string};\r\n\r\n  /**\r\n   * Wheter a disable switch should be available\r\n   */\r\n  @Input() disableSwitch: boolean = false;\r\n\r\n  /**\r\n   * Whether the field is required\r\n   */\r\n  get required(): boolean {\r\n    return formControlIsRequired(this.formControl);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabled$.next(this.formControl.disabled);\r\n  }\r\n\r\n  /**\r\n   * Get error message\r\n   */\r\n  getErrorMessage(): string {\r\n    return getControlErrorMessage(this.formControl, this.errors);\r\n  }\r\n\r\n  onDisableSwitchClick() {\r\n    this.toggleDisabled();\r\n  }\r\n\r\n  private toggleDisabled() {\r\n    const disabled = !this.disabled$.value;\r\n    if (disabled === true) {\r\n      this.formControl.disable();\r\n    } else {\r\n      this.formControl.enable();\r\n    }\r\n    this.disabled$.next(disabled);\r\n  }\r\n\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { formControlIsRequired, getControlErrorMessage } from '../shared/form.utils';\r\nimport { FormFieldComponent } from '../shared/form-field-component';\r\n\r\n/**\r\n * This component renders a textarea field\r\n */\r\n@FormFieldComponent('textarea')\r\n@Component({\r\n  selector: 'igo-form-field-textarea',\r\n  templateUrl: './form-field-textarea.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormFieldTextareaComponent implements OnInit {\r\n\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() errors: {[key: string]: string};\r\n\r\n  /**\r\n   * Wheter a disable switch should be available\r\n   */\r\n  @Input() disableSwitch: boolean = false;\r\n\r\n  /**\r\n   * Whether the field is required\r\n   */\r\n  get required(): boolean {\r\n    return formControlIsRequired(this.formControl);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabled$.next(this.formControl.disabled);\r\n  }\r\n\r\n  /**\r\n   * Get error message\r\n   */\r\n  getErrorMessage(): string {\r\n    return getControlErrorMessage(this.formControl, this.errors);\r\n  }\r\n\r\n  onDisableSwitchClick() {\r\n    this.toggleDisabled();\r\n  }\r\n\r\n  private toggleDisabled() {\r\n    const disabled = !this.disabled$.value;\r\n    if (disabled === true) {\r\n      this.formControl.disable();\r\n    } else {\r\n      this.formControl.enable();\r\n    }\r\n    this.disabled$.next(disabled);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSelectModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoDynamicOutletModule } from '../../dynamic-component/dynamic-outlet/dynamic-outlet.module';\r\n\r\nimport { FormFieldComponent } from './form-field.component';\r\nimport { FormFieldSelectComponent } from './form-field-select.component';\r\nimport { FormFieldTextComponent } from './form-field-text.component';\r\nimport { FormFieldTextareaComponent } from './form-field-textarea.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    IgoLanguageModule,\r\n    IgoDynamicOutletModule\r\n  ],\r\n  exports: [\r\n    FormFieldComponent,\r\n    FormFieldSelectComponent,\r\n    FormFieldTextComponent,\r\n    FormFieldTextareaComponent\r\n  ],\r\n  declarations: [\r\n    FormFieldComponent,\r\n    FormFieldSelectComponent,\r\n    FormFieldTextComponent,\r\n    FormFieldTextareaComponent\r\n  ]\r\n})\r\nexport class IgoFormFieldModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nimport { getControlErrorMessage } from '../shared/form.utils';\r\nimport { FormField, FormFieldGroup } from '../shared/form.interfaces';\r\n\r\n/**\r\n * A configurable form, optionnally bound to an entity\r\n * (for example in case of un update). Submitting that form\r\n * emits an event with the form data but no other operation is performed.\r\n */\r\n@Component({\r\n  selector: 'igo-form-group',\r\n  templateUrl: './form-group.component.html',\r\n  styleUrls: ['./form-group.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormGroupComponent {\r\n\r\n  /**\r\n   * Form field group\r\n   */\r\n  @Input() group: FormFieldGroup;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() errors: {[key: string]: string};\r\n\r\n  /**\r\n   * Form group control\r\n   */\r\n  get formControl(): FormGroup { return this.group.control; }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Return the number of columns a field should occupy.\r\n   * The maximum allowed is 2, even if the field config says more.\r\n   * @param field Field\r\n   * @returns Number of columns\r\n   * @internal\r\n   */\r\n  getFieldColSpan(field: FormField): number {\r\n    let colSpan = 2;\r\n    const options = field.options || {};\r\n    if (options.cols && options.cols > 0) {\r\n      colSpan = Math.min(options.cols, 2);\r\n    }\r\n\r\n    return colSpan;\r\n  }\r\n\r\n  /**\r\n   * Return the number of columns a field should occupy.\r\n   * The maximum allowed is 2, even if the field config says more.\r\n   * @param field Field\r\n   * @returns Number of columns\r\n   * @internal\r\n   */\r\n  getFieldNgClass(field: FormField): {[key: string]: boolean} {\r\n    const colspan = this.getFieldColSpan(field);\r\n    return {[`igo-form-field-colspan-${colspan}`]: true};\r\n  }\r\n\r\n  /**\r\n   * Get error message\r\n   */\r\n  getErrorMessage(): string {\r\n    const options = this.group.options || {};\r\n    return getControlErrorMessage(this.formControl, options.errors || {});\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatFormFieldModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoFormFieldModule } from '../form-field/form-field.module';\r\nimport { FormGroupComponent } from './form-group.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    IgoLanguageModule,\r\n    IgoFormFieldModule\r\n  ],\r\n  exports: [\r\n    FormGroupComponent\r\n  ],\r\n  declarations: [\r\n    FormGroupComponent\r\n  ]\r\n})\r\nexport class IgoFormGroupModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFormFormModule } from './form/form.module';\r\nimport { IgoFormGroupModule } from './form-group/form-group.module';\r\nimport { IgoFormFieldModule } from './form-field/form-field.module';\r\nimport { FormFieldSelectComponent } from './form-field/form-field-select.component';\r\nimport { FormFieldTextComponent } from './form-field/form-field-text.component';\r\nimport { FormFieldTextareaComponent } from './form-field/form-field-textarea.component';\r\nimport { FormService } from './shared/form.service';\r\nimport { FormFieldService } from './shared/form-field.service';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoFormGroupModule,\r\n    IgoFormFieldModule\r\n  ],\r\n  exports: [\r\n    IgoFormFormModule,\r\n    IgoFormGroupModule,\r\n    IgoFormFieldModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    FormService,\r\n    FormFieldService\r\n  ],\r\n  entryComponents: [\r\n    FormFieldSelectComponent,\r\n    FormFieldTextComponent,\r\n    FormFieldTextareaComponent\r\n  ]\r\n})\r\nexport class IgoFormModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { MatSelectModule } from '@angular/material';\r\n\r\nimport { EntitySelectorComponent } from './entity-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatSelectModule\r\n  ],\r\n  exports: [EntitySelectorComponent],\r\n  declarations: [EntitySelectorComponent]\r\n})\r\nexport class IgoEntitySelectorModule {}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoStopDropPropagation]'\r\n})\r\nexport class StopDropPropagationDirective {\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(event: any): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoStopPropagation]'\r\n})\r\nexport class StopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  public onClick(event: any): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { StopDropPropagationDirective } from './stop-drop-propagation.directive';\r\nimport { StopPropagationDirective } from './stop-propagation.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [StopDropPropagationDirective, StopPropagationDirective],\r\n  exports: [StopDropPropagationDirective, StopPropagationDirective]\r\n})\r\nexport class IgoStopPropagationModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoStopPropagationModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  ElementRef,\r\n  Renderer2,\r\n  EventEmitter,\r\n  Output,\r\n  HostListener\r\n} from '@angular/core';\r\n\r\nimport { EntityTableScrollBehavior } from '../shared/entity.enums';\r\n\r\n/**\r\n * Directive that handles an entity table row click and selection.\r\n */\r\n@Directive({\r\n  selector: '[igoEntityTableRow]'\r\n})\r\nexport class EntityTableRowDirective {\r\n\r\n  /**\r\n   * Class added to a selected row\r\n   */\r\n  static selectedCls = 'igo-entity-table-row-selected';\r\n\r\n  /**\r\n   * Class added to a highlighted row\r\n   */\r\n  static highlightedCls = 'igo-entity-table-row-highlighted';\r\n\r\n  /**\r\n   * Whether a row supports selection\r\n   */\r\n  @Input() selection = false;\r\n\r\n  /**\r\n   * Whether clicking a row should select it (if selection is true)\r\n   */\r\n  @Input() selectOnClick: boolean = true;\r\n\r\n  /**\r\n   * Whether the selected row should be highlighted\r\n   */\r\n  @Input()\r\n  highlightSelection: boolean = true;\r\n\r\n  /**\r\n   * Whether a row is selected\r\n   */\r\n  @Input()\r\n  set selected(value: boolean) {\r\n    if (this.selection === false) { return; }\r\n    if (value === this._selected) { return; }\r\n\r\n    this.toggleSelected(value);\r\n    this.scroll();\r\n  }\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n  private _selected = false;\r\n\r\n  /**\r\n   * Scroll behavior on selection\r\n   */\r\n  @Input()\r\n  scrollBehavior: EntityTableScrollBehavior = EntityTableScrollBehavior.Auto;\r\n\r\n  /**\r\n   * Event emitted when a row is selected\r\n   */\r\n  @Output() select = new EventEmitter<EntityTableRowDirective>();\r\n\r\n  /**\r\n   * When a row is clicked, select it if it's supported\r\n   * @ignore\r\n   */\r\n  @HostListener('click')\r\n  onClick() {\r\n    if (this.selection === false || this.selectOnClick === false) {\r\n      return;\r\n    }\r\n\r\n    this.toggleSelected(true);\r\n    this.select.emit(this);\r\n  }\r\n\r\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\r\n\r\n  /**\r\n   * Select a row and add or remove the selected class from it\r\n   * @param selected Whether the row should be selected\r\n   */\r\n  private toggleSelected(selected: boolean) {\r\n    this._selected = selected;\r\n    if (selected === true) {\r\n      this.addCls(EntityTableRowDirective.selectedCls);\r\n      if (this.highlightSelection === true) {\r\n        this.addCls(EntityTableRowDirective.highlightedCls);\r\n      }\r\n    } else {\r\n      this.removeCls(EntityTableRowDirective.selectedCls);\r\n      this.removeCls(EntityTableRowDirective.highlightedCls);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scroll to the selected row\r\n   */\r\n  private scroll() {\r\n    if (this._selected === true) {\r\n      this.el.nativeElement.scrollIntoView({\r\n        behavior: this.scrollBehavior,\r\n        block: 'center',\r\n        inline: 'center'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the selected CSS class\r\n   */\r\n  private addCls(cls: string) {\r\n    this.renderer.addClass(this.el.nativeElement, cls);\r\n  }\r\n\r\n  /**\r\n   * Remove the selected CSS class\r\n   */\r\n  private removeCls(cls: string) {\r\n    this.renderer.removeClass(this.el.nativeElement, cls);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatTableModule,\r\n  MatSortModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoStopPropagationModule } from '../../stop-propagation/stop-propagation.module';\r\nimport { IgoCustomHtmlModule } from '../../custom-html/custom-html.module';\r\nimport { EntityTableRowDirective } from './entity-table-row.directive';\r\nimport { EntityTableComponent } from './entity-table.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    IgoStopPropagationModule,\r\n    IgoCustomHtmlModule\r\n  ],\r\n  exports: [\r\n    EntityTableComponent\r\n  ],\r\n  declarations: [\r\n    EntityTableComponent,\r\n    EntityTableRowDirective\r\n  ]\r\n})\r\nexport class IgoEntityTableModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoEntitySelectorModule } from './entity-selector/entity-selector.module';\r\nimport { IgoEntityTableModule } from './entity-table/entity-table.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoEntitySelectorModule,\r\n    IgoEntityTableModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoEntityModule {}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Pipe({\r\n  name: 'secureImage'\r\n})\r\nexport class SecureImagePipe implements PipeTransform {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  transform(url: string) {\r\n    return this.http\r\n      .get(url, {\r\n        headers: {\r\n          activityInterceptor: 'false'\r\n        },\r\n        responseType: 'blob'\r\n      })\r\n      .pipe(\r\n        switchMap(blob => {\r\n          return new Observable(observer => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n              observer.next(reader.result);\r\n            };\r\n          });\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { SecureImagePipe } from './secure-image.pipe';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [SecureImagePipe],\r\n  exports: [SecureImagePipe]\r\n})\r\nexport class IgoImageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoImageModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'keyvalue'\r\n})\r\nexport class KeyValuePipe implements PipeTransform {\r\n  transform(value: any, args?: any): any {\r\n    const keyValues = [];\r\n    Object.getOwnPropertyNames(value).forEach((key: string) =>\r\n      keyValues.push({ key, value: value[key] })\r\n    );\r\n\r\n    return keyValues;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { KeyValuePipe } from './keyvalue.pipe';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [KeyValuePipe],\r\n  exports: [KeyValuePipe]\r\n})\r\nexport class IgoKeyValueModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoKeyValueModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'igo-json-dialog',\r\n  templateUrl: './json-dialog.component.html'\r\n})\r\nexport class JsonDialogComponent {\r\n  public title: string;\r\n  public data: any;\r\n  public ignoreKeys: string[];\r\n\r\n  constructor(public dialogRef: MatDialogRef<JsonDialogComponent>) {}\r\n\r\n  isObject(val) {\r\n    return typeof val === 'object' && !Array.isArray(val);\r\n  }\r\n\r\n  getKey(baseKey, key) {\r\n    return (baseKey ? baseKey + '.' : '') + key;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { JsonDialogComponent } from './json-dialog.component';\r\n\r\n@Injectable()\r\nexport class JsonDialogService {\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  public open(title: any, data, ignoreKeys?: string[]): Observable<any> {\r\n    const dialogRef = this.dialog.open(JsonDialogComponent, {\r\n      disableClose: false\r\n    });\r\n    dialogRef.componentInstance.data = data;\r\n    dialogRef.componentInstance.title = title;\r\n    dialogRef.componentInstance.ignoreKeys = ignoreKeys;\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule, MatDialogModule } from '@angular/material';\r\n\r\nimport { IgoKeyValueModule } from '../keyvalue/keyvalue.module';\r\n\r\nimport { JsonDialogComponent } from './json-dialog.component';\r\nimport { JsonDialogService } from './json-dialog.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatButtonModule, MatDialogModule, IgoKeyValueModule],\r\n  exports: [JsonDialogComponent],\r\n  declarations: [JsonDialogComponent],\r\n  entryComponents: [JsonDialogComponent],\r\n  providers: [JsonDialogService]\r\n})\r\nexport class IgoJsonDialogModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoJsonDialogModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  ElementRef,\r\n  Renderer2,\r\n  HostListener,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoListItem]'\r\n})\r\nexport class ListItemDirective {\r\n\r\n  static selectedCls = 'igo-list-item-selected';\r\n  static disabledCls = 'igo-list-item-disabled';\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  @Input()\r\n  get focused() {\r\n    return this._focused;\r\n  }\r\n  set focused(value: boolean) {\r\n    if (value === this._focused) {\r\n      return;\r\n    }\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    value ? this.beforeFocus.emit(this) : this.beforeUnfocus.emit(this);\r\n\r\n    this._focused = value;\r\n    this.toggleSelectedClass();\r\n\r\n    value ? this.focus.emit(this) : this.unfocus.emit(this);\r\n  }\r\n  private _focused = false;\r\n\r\n  @Input()\r\n  get selected() {\r\n    return this._selected;\r\n  }\r\n  set selected(value: boolean) {\r\n    if (value === this._selected) {\r\n      return;\r\n    }\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    value ? this.beforeSelect.emit(this) : this.beforeUnselect.emit(this);\r\n\r\n    this._selected = value;\r\n    this._focused = value;\r\n    this.toggleSelectedClass();\r\n\r\n    value ? this.select.emit(this) : this.unselect.emit(this);\r\n  }\r\n  private _selected = false;\r\n\r\n  @Input()\r\n  get disabled() {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    if (value === this._disabled) {\r\n      return;\r\n    }\r\n\r\n    if (value === true) {\r\n      this.selected = false;\r\n    }\r\n\r\n    value ? this.beforeDisable.emit(this) : this.beforeEnable.emit(this);\r\n\r\n    this._disabled = value;\r\n    this.toggleDisabledClass();\r\n\r\n    value ? this.disable.emit(this) : this.enable.emit(this);\r\n  }\r\n  private _disabled = false;\r\n\r\n  @Output() beforeSelect = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeFocus = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeUnselect = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeUnfocus = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeDisable = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeEnable = new EventEmitter<ListItemDirective>();\r\n  @Output() focus = new EventEmitter<ListItemDirective>();\r\n  @Output() unfocus = new EventEmitter<ListItemDirective>();\r\n  @Output() select = new EventEmitter<ListItemDirective>();\r\n  @Output() unselect = new EventEmitter<ListItemDirective>();\r\n  @Output() disable = new EventEmitter<ListItemDirective>();\r\n  @Output() enable = new EventEmitter<ListItemDirective>();\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.selected = true;\r\n  }\r\n\r\n  constructor(public renderer: Renderer2, private el: ElementRef) {}\r\n\r\n  getOffsetTop(): number {\r\n    const padding = 5;\r\n\r\n    return this.el.nativeElement.offsetTop - padding;\r\n  }\r\n\r\n  private toggleSelectedClass() {\r\n    if (this.focused || this.selected) {\r\n      this.addCls(ListItemDirective.selectedCls);\r\n    } else {\r\n      this.removeCls(ListItemDirective.selectedCls);\r\n    }\r\n  }\r\n\r\n  private toggleDisabledClass() {\r\n    if (this.disabled) {\r\n      this.addCls(ListItemDirective.disabledCls);\r\n    } else {\r\n      this.removeCls(ListItemDirective.disabledCls);\r\n    }\r\n  }\r\n\r\n  private addCls(cls: string) {\r\n    this.renderer.addClass(this.el.nativeElement, cls);\r\n  }\r\n\r\n  private removeCls(cls: string) {\r\n    this.renderer.removeClass(this.el.nativeElement, cls);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n  QueryList,\r\n  Input,\r\n  ContentChildren,\r\n  HostListener,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { ListItemDirective } from './list-item.directive';\r\n\r\n@Component({\r\n  selector: 'igo-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss']\r\n})\r\nexport class ListComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  @Input()\r\n  get navigation() {\r\n    return this._navigation;\r\n  }\r\n  set navigation(value: boolean) {\r\n    this._navigation = value;\r\n  }\r\n  private _navigation = true;\r\n\r\n  @Input()\r\n  get selection() {\r\n    return this._selection;\r\n  }\r\n  set selection(value: boolean) {\r\n    this._selection = value;\r\n  }\r\n  private _selection = true;\r\n\r\n  get selectedItem() {\r\n    return this._selectedItem;\r\n  }\r\n  set selectedItem(value: ListItemDirective) {\r\n    this.focusedItem = value;\r\n    this._selectedItem = value;\r\n  }\r\n  private _selectedItem: ListItemDirective;\r\n\r\n  get focusedItem() {\r\n    return this._focusedItem;\r\n  }\r\n  set focusedItem(value: ListItemDirective) {\r\n    this._focusedItem = value;\r\n  }\r\n  private _focusedItem: ListItemDirective;\r\n\r\n  private navigationEnabled: boolean;\r\n  private listItems$$: Subscription;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  @ContentChildren(ListItemDirective, { descendants: true })\r\n  listItems: QueryList<ListItemDirective>;\r\n\r\n  @HostListener('document:keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n    // It would be nice to be able to unsubscribe to the event\r\n    // completely but until ES7 this won't be possible because\r\n    // document events are not observables\r\n    if (this.navigationEnabled) {\r\n      if (event.keyCode === 38 || event.keyCode === 40) {\r\n        event.preventDefault();\r\n        this.navigate(event.keyCode);\r\n      } else if (event.keyCode === 13) {\r\n        this.select(this.focusedItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(private el: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    this.enableNavigation();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.listItems.length) {\r\n      this.init();\r\n    }\r\n\r\n    this.listItems$$ = this.listItems.changes.subscribe(\r\n      (items: ListItemDirective[]) => this.init()\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.listItems$$.unsubscribe();\r\n  }\r\n\r\n  focus(item?: ListItemDirective) {\r\n    if (!this.selection) {\r\n      return;\r\n    }\r\n\r\n    this.unfocus();\r\n\r\n    // We need to make this check because dynamic\r\n    // lists such as in the search results list may fail\r\n    if (item !== undefined) {\r\n      item.focused = true;\r\n    }\r\n  }\r\n\r\n  unfocus() {\r\n    if (this.focusedItem !== undefined) {\r\n      this.focusedItem.focused = false;\r\n    }\r\n\r\n    this.focusedItem = undefined;\r\n  }\r\n\r\n  focusNext() {\r\n    const items = this.listItems.toArray();\r\n    let item;\r\n    let disabled = true;\r\n    let index = this.getFocusedIndex();\r\n    if (index === undefined) {\r\n      index = -1;\r\n    }\r\n\r\n    while (disabled && index < items.length - 1) {\r\n      index += 1;\r\n      item = items[index];\r\n      disabled = item.disabled;\r\n    }\r\n\r\n    if (item !== undefined) {\r\n      this.focus(item);\r\n    }\r\n  }\r\n\r\n  focusPrevious() {\r\n    const items = this.listItems.toArray();\r\n    let item;\r\n    let disabled = true;\r\n    let index = this.getFocusedIndex();\r\n\r\n    while (disabled && index > 0) {\r\n      index -= 1;\r\n      item = items[index];\r\n      disabled = item.disabled;\r\n    }\r\n\r\n    if (item !== undefined) {\r\n      this.focus(item);\r\n    }\r\n  }\r\n\r\n  select(item?: ListItemDirective) {\r\n    if (!this.selection) {\r\n      return;\r\n    }\r\n\r\n    this.unselect();\r\n\r\n    if (item !== undefined) {\r\n      item.selected = true;\r\n    }\r\n  }\r\n\r\n  unselect() {\r\n    this.unfocus();\r\n\r\n    if (this.selectedItem !== undefined) {\r\n      this.selectedItem.selected = false;\r\n    }\r\n\r\n    this.selectedItem = undefined;\r\n  }\r\n\r\n  enableNavigation() {\r\n    if (this.navigation) {\r\n      this.navigationEnabled = true;\r\n    }\r\n  }\r\n\r\n  disableNavigation() {\r\n    this.navigationEnabled = false;\r\n  }\r\n\r\n  scrollToItem(item: ListItemDirective) {\r\n    this.el.nativeElement.scrollTop = item.getOffsetTop();\r\n  }\r\n\r\n  private init() {\r\n    this.subscribe();\r\n\r\n    this.selectedItem = this.findSelectedItem();\r\n    this.focusedItem = this.findFocusedItem();\r\n\r\n    this.enableNavigation();\r\n  }\r\n\r\n  private subscribe() {\r\n    this.unsubscribe();\r\n\r\n    this.listItems.toArray().forEach(item => {\r\n      this.subscriptions.push(\r\n        item.beforeSelect.subscribe((item2: ListItemDirective) =>\r\n          this.handleItemBeforeSelect(item2)\r\n        )\r\n      );\r\n\r\n      this.subscriptions.push(\r\n        item.select.subscribe((item2: ListItemDirective) =>\r\n          this.handleItemSelect(item2)\r\n        )\r\n      );\r\n\r\n      this.subscriptions.push(\r\n        item.beforeFocus.subscribe((item2: ListItemDirective) =>\r\n          this.handleItemBeforeFocus(item2)\r\n        )\r\n      );\r\n\r\n      this.subscriptions.push(\r\n        item.focus.subscribe((item2: ListItemDirective) =>\r\n          this.handleItemFocus(item2)\r\n        )\r\n      );\r\n    }, this);\r\n  }\r\n\r\n  private unsubscribe() {\r\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  private handleItemBeforeFocus(item: ListItemDirective) {\r\n    if (item !== this.focusedItem) {\r\n      this.unselect();\r\n    }\r\n  }\r\n\r\n  private handleItemFocus(item: ListItemDirective) {\r\n    this.focusedItem = item;\r\n  }\r\n\r\n  private handleItemBeforeSelect(item: ListItemDirective) {\r\n    if (item !== this.focusedItem) {\r\n      this.unselect();\r\n    }\r\n  }\r\n\r\n  private handleItemSelect(item: ListItemDirective) {\r\n    this.selectedItem = item;\r\n  }\r\n\r\n  private findSelectedItem() {\r\n    return this.listItems.toArray().find(item => item.selected);\r\n  }\r\n\r\n  private findFocusedItem() {\r\n    return this.listItems.toArray().find(item => item.focused);\r\n  }\r\n\r\n  private getFocusedIndex() {\r\n    return this.listItems\r\n      .toArray()\r\n      .findIndex(item => item === this.focusedItem);\r\n  }\r\n\r\n  private navigate(key: number) {\r\n    switch (key) {\r\n      case 38:\r\n        this.focusPrevious();\r\n        break;\r\n      case 40:\r\n        this.focusNext();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule, MatListModule } from '@angular/material';\r\n\r\nimport { IgoClickoutModule } from '../clickout/clickout.module';\r\n\r\nimport { ListItemDirective } from './list-item.directive';\r\nimport { ListComponent } from './list.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatIconModule, MatListModule, IgoClickoutModule],\r\n  declarations: [ListItemDirective, ListComponent],\r\n  exports: [ListItemDirective, ListComponent]\r\n})\r\nexport class IgoListModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoListModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  HostBinding\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-panel',\r\n  templateUrl: './panel.component.html',\r\n  styleUrls: ['./panel.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PanelComponent {\r\n\r\n  @Input()\r\n  get title() {\r\n    return this._title;\r\n  }\r\n  set title(value: string) {\r\n    this._title = value;\r\n  }\r\n  private _title: string;\r\n\r\n  @Input()\r\n  @HostBinding('class.igo-panel-with-header')\r\n  get withHeader(): boolean {\r\n    return this._withHeader;\r\n  }\r\n  set withHeader(value: boolean) {\r\n    this._withHeader = value;\r\n  }\r\n  private _withHeader = true;\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PanelComponent } from './panel.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    PanelComponent\r\n  ],\r\n  declarations: [\r\n    PanelComponent\r\n  ]\r\n})\r\nexport class IgoPanelModule {}\r\n","import { Directive, Self, HostListener, Renderer2 } from '@angular/core';\r\nimport { MatSidenav } from '@angular/material';\r\n\r\n/**\r\n * <igoSidenavShim> directive.\r\n *\r\n * This directive prevents a material sidenav with mode=\"side\"\r\n * from focusing an element after it's closed\r\n */\r\n@Directive({\r\n  selector: '[igoSidenavShim]'\r\n})\r\nexport class SidenavShimDirective {\r\n  private focusedElement: HTMLElement;\r\n  private blurElement: HTMLElement;\r\n\r\n  @HostListener('open', ['$event'])\r\n  onOpen() {\r\n    this.focusedElement = document.activeElement as HTMLElement;\r\n  }\r\n\r\n  @HostListener('close-start', ['$event'])\r\n  onCloseStart() {\r\n    const focusedElement = document.activeElement as HTMLElement;\r\n    if (focusedElement !== this.focusedElement) {\r\n      this.blurElement = this.focusedElement;\r\n    } else {\r\n      this.blurElement = undefined;\r\n    }\r\n  }\r\n\r\n  @HostListener('close', ['$event'])\r\n  onClose() {\r\n    if (this.blurElement) {\r\n      this.renderer.selectRootElement(this.blurElement).blur();\r\n    }\r\n\r\n    this.blurElement = undefined;\r\n    this.focusedElement = undefined;\r\n  }\r\n\r\n  constructor(@Self() component: MatSidenav, private renderer: Renderer2) {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { SidenavShimDirective } from './sidenav-shim.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [SidenavShimDirective],\r\n  exports: [SidenavShimDirective]\r\n})\r\nexport class IgoSidenavModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoSidenavModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'igo-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.scss']\r\n})\r\nexport class SpinnerComponent {\r\n\r\n  public shown$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  @Input()\r\n  set shown(value: boolean) { this.shown$.next(value); }\r\n  get shown(): boolean { return this.shown$.value; }\r\n\r\n  constructor() {}\r\n\r\n  show() {\r\n    this.shown = true;\r\n  }\r\n\r\n  hide() {\r\n    this.shown = false;\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { ActivityService } from '@igo2/core';\r\nimport { SpinnerComponent } from './spinner.component';\r\n\r\n/**\r\n * A directive to bind a SpinnerComponent to the activity service.\r\n * The activity service tracks any HTTP request and this directive\r\n * will display the spinner it's attached to when the activity counter\r\n * is greater than 0.\r\n */\r\n@Directive({\r\n  selector: '[igoSpinnerActivity]',\r\n  providers: [SpinnerComponent]\r\n})\r\nexport class SpinnerActivityDirective implements OnInit, OnDestroy {\r\n  /**\r\n   * Subscription to the activity service counter\r\n   */\r\n  private counter$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() private spinner: SpinnerComponent,\r\n    private activityService: ActivityService\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to the activity service counter and display the spinner\r\n   * when it's is greater than 0.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.counter$$ = this.activityService.counter$\r\n      .pipe(debounceTime(50))\r\n      .subscribe((count: number) => {\r\n        count > 0 ? this.spinner.show() : this.spinner.hide();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unsubcribe to the activity service counter.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.counter$$.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatProgressSpinnerModule } from '@angular/material';\r\n\r\nimport { SpinnerActivityDirective } from './spinner-activity.directive';\r\nimport { SpinnerComponent } from './spinner.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatProgressSpinnerModule],\r\n  declarations: [SpinnerActivityDirective, SpinnerComponent],\r\n  exports: [SpinnerActivityDirective, SpinnerComponent]\r\n})\r\nexport class IgoSpinnerModule {}\r\n","import { DataSource } from '@angular/cdk/table';\r\nimport { MatSort } from '@angular/material';\r\n\r\nimport { Observable, BehaviorSubject, merge } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { TableDatabase, TableModel } from './index';\r\n\r\nexport class TableDataSource extends DataSource<any> {\r\n  get filter(): string {\r\n    return this._filterChange.value;\r\n  }\r\n  set filter(filter: string) {\r\n    this._filterChange.next(filter);\r\n  }\r\n  private _filterChange = new BehaviorSubject('');\r\n\r\n  constructor(\r\n    private _database: TableDatabase,\r\n    private _model: TableModel,\r\n    private _sort: MatSort\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // Connect function called by the table to retrieve one stream containing\r\n  // the data to render.\r\n  connect(): Observable<any[]> {\r\n    if (!this._database) {\r\n      return merge([]);\r\n    }\r\n    const displayDataChanges = [\r\n      this._database.dataChange,\r\n      this._filterChange,\r\n      this._sort.sortChange\r\n    ];\r\n\r\n    return merge(...displayDataChanges).pipe(\r\n      map(() => {\r\n        return this.getFilteredData(this._database.data);\r\n      }),\r\n      map(data => {\r\n        return this.getSortedData(data);\r\n      })\r\n    );\r\n  }\r\n\r\n  disconnect() {}\r\n\r\n  getFilteredData(data): any[] {\r\n    if (!this.filter) {\r\n      return data;\r\n    }\r\n    return data.slice().filter((item: any) => {\r\n      const searchStr: string = this._model.columns\r\n        .filter(c => c.filterable)\r\n        .map(c => ObjectUtils.resolve(item, c.name))\r\n        .join(' ')\r\n        .toLowerCase();\r\n\r\n      return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\r\n    });\r\n  }\r\n\r\n  getSortedData(data): any[] {\r\n    if (!this._sort.active || this._sort.direction === '') {\r\n      return data;\r\n    }\r\n\r\n    return data.sort((a, b) => {\r\n      const propertyA: number | string = ObjectUtils.resolve(\r\n        a,\r\n        this._sort.active\r\n      );\r\n      const propertyB: number | string = ObjectUtils.resolve(\r\n        b,\r\n        this._sort.active\r\n      );\r\n\r\n      return ObjectUtils.naturalCompare(\r\n        propertyB,\r\n        propertyA,\r\n        this._sort.direction\r\n      );\r\n    });\r\n  }\r\n}\r\n","export enum TableActionColor {\r\n  primary,\r\n  accent,\r\n  warn\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  ViewChild,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  OnInit,\r\n  AfterViewInit,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { MatSort } from '@angular/material';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\n\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\nimport { fromEvent } from 'rxjs';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { TableModel } from './table-model.interface';\r\nimport { TableDatabase } from './table-database';\r\nimport { TableDataSource } from './table-datasource';\r\nimport { TableActionColor } from './table-action-color.enum';\r\n\r\n@Component({\r\n  selector: 'igo-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss']\r\n})\r\nexport class TableComponent implements OnChanges, OnInit, AfterViewInit {\r\n  @Input()\r\n  get database(): TableDatabase {\r\n    return this._database;\r\n  }\r\n  set database(value: TableDatabase) {\r\n    this._database = value;\r\n  }\r\n  private _database: TableDatabase;\r\n\r\n  @Input()\r\n  get model(): TableModel {\r\n    return this._model;\r\n  }\r\n  set model(value: TableModel) {\r\n    this._model = value;\r\n  }\r\n  private _model: TableModel;\r\n\r\n  @Input()\r\n  get hasFilterInput(): boolean {\r\n    return this._hasFIlterInput;\r\n  }\r\n  set hasFilterInput(value: boolean) {\r\n    this._hasFIlterInput = value;\r\n  }\r\n  private _hasFIlterInput = true;\r\n\r\n  public displayedColumns;\r\n  public dataSource: TableDataSource | null;\r\n  public selection = new SelectionModel<any>(true, []);\r\n\r\n  @Output()\r\n  select = new EventEmitter<{\r\n    added: any[];\r\n    removed: any[];\r\n    source: SelectionModel<any>;\r\n  }>();\r\n\r\n  @ViewChild('filter') filter: ElementRef;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new TableDataSource(this.database, this.model, this.sort);\r\n\r\n    if (this.model) {\r\n      this.displayedColumns = this.model.columns\r\n        .filter(c => c.displayed !== false)\r\n        .map(c => c.name);\r\n\r\n      if (this.model.selectionCheckbox) {\r\n        this.displayedColumns.unshift('selectionCheckbox');\r\n      }\r\n      if (this.model.actions && this.model.actions.length) {\r\n        this.displayedColumns.push('action');\r\n      }\r\n    }\r\n\r\n    this.selection.changed.subscribe(e => this.select.emit(e));\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.filter) {\r\n      fromEvent(this.filter.nativeElement, 'keyup')\r\n        .pipe(\r\n          debounceTime(150),\r\n          distinctUntilChanged()\r\n        )\r\n        .subscribe(() => {\r\n          if (!this.dataSource) {\r\n            return;\r\n          }\r\n          this.dataSource.filter = this.filter.nativeElement.value;\r\n        });\r\n    }\r\n  }\r\n\r\n  ngOnChanges(change) {\r\n    if (change.database) {\r\n      this.dataSource = new TableDataSource(\r\n        this.database,\r\n        this.model,\r\n        this.sort\r\n      );\r\n      this.selection.clear();\r\n    }\r\n  }\r\n\r\n  getActionColor(colorId: number): string {\r\n    return TableActionColor[colorId];\r\n  }\r\n\r\n  getValue(row, key) {\r\n    return ObjectUtils.resolve(row, key);\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.database.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected()\r\n      ? this.selection.clear()\r\n      : this.database.data.forEach(row => this.selection.select(row));\r\n  }\r\n\r\n  handleClickAction(event, action, row) {\r\n    event.stopPropagation();\r\n    action.click(row);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTableModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSortModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { TableComponent } from './table.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    CdkTableModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTableModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule\r\n  ],\r\n  declarations: [TableComponent],\r\n  exports: [TableComponent]\r\n})\r\nexport class IgoTableModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoTableModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Tool } from './tool.interface';\r\n\r\n/**\r\n * Service where runtime tool configurations are registered\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToolService {\r\n\r\n  static tools: {[key: string]: Tool} = {};\r\n\r\n  static register(tool: Tool) {\r\n    ToolService.tools[tool.name] = tool;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Return a tool\r\n   * @param name Tool name\r\n   * @returns tool Tool\r\n   */\r\n  getTool(name: string): Tool {\r\n    return ToolService.tools[name];\r\n  }\r\n\r\n  /**\r\n   * Return all tools\r\n   * @returns tTols\r\n   */\r\n  getTools(): Tool[] {\r\n    return Object.values(ToolService.tools);\r\n  }\r\n\r\n}\r\n","import { EntityStore } from '../../entity';\r\nimport { Action } from './action.interfaces';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * actions.\r\n */\r\nexport class ActionStore extends EntityStore<Action> {\r\n\r\n  /**\r\n   * Update actions availability. That means disabling or enabling some\r\n   * actions based on the conditions they define.\r\n   */\r\n  updateActionsAvailability() {\r\n    const availables = [];\r\n    const unavailables = [];\r\n\r\n    this.entities$.value.forEach((action: Action) => {\r\n      const conditions = action.conditions || [];\r\n      const args = action.conditionArgs || [];\r\n      const available = conditions.every((condition: (...args: any[]) => boolean) => {\r\n        return condition(...args);\r\n      });\r\n      available ? availables.push(action) : unavailables.push(action);\r\n    });\r\n\r\n    if (unavailables.length > 0) {\r\n      this.state.updateMany(unavailables, {\r\n        disabled: true,\r\n        active: false\r\n      });\r\n    }\r\n\r\n    if (availables.length > 0) {\r\n      this.state.updateMany(availables, {\r\n        disabled: false\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationTriggerMetadata\r\n} from '@angular/animations';\r\n\r\nexport function toolSlideInOut(\r\n  speed = '300ms',\r\n  type = 'ease-in-out'\r\n): AnimationTriggerMetadata {\r\n  return trigger('toolSlideInOut', [\r\n    state(\r\n      'enter',\r\n      style({\r\n        transform: 'translate3d(0, 0, 0)'\r\n      })\r\n    ),\r\n    transition('void => enter', animate(speed + ' ' + type))\r\n  ]);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { Action, ActionStore } from '../../action';\r\nimport { Tool } from '../shared/tool.interface';\r\nimport { Toolbox } from '../shared/toolbox';\r\nimport { toolSlideInOut } from './toolbox.animation';\r\n\r\n@Component({\r\n  selector: 'igo-toolbox',\r\n  templateUrl: 'toolbox.component.html',\r\n  styleUrls: ['toolbox.component.scss'],\r\n  animations: [toolSlideInOut()],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ToolboxComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Observable of the active tool\r\n   */\r\n  activeTool$: BehaviorSubject<Tool> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Store of actions that toggle tools\r\n   */\r\n  actionStore: ActionStore = new ActionStore([]);\r\n\r\n  /**\r\n   * Observable of he anmation state\r\n   */\r\n  animation$: BehaviorSubject<string> = new BehaviorSubject('none');\r\n\r\n  /**\r\n   * Observable of the toolbar\r\n   */\r\n  toolbar$: BehaviorSubject<string[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Subscription to the active tool\r\n   */\r\n  private activeTool$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to the toolbar\r\n   */\r\n  private toolbar$$: Subscription;\r\n\r\n  /**\r\n   * Observable of the ongoing animation. This is useful when\r\n   * multiple animations are triggered at once i.e. when the user clicks\r\n   * too fast on different actions\r\n   */\r\n  private animating$ = new BehaviorSubject<boolean>(false);\r\n\r\n  /**\r\n   * Subscription to the ongoing animation\r\n   */\r\n  private animating$$: Subscription;\r\n\r\n  /**\r\n   * Toolbox\r\n   */\r\n  @Input() toolbox: Toolbox;\r\n\r\n  /**\r\n   * Whether the toolbox should animate the first tool entering\r\n   */\r\n  @Input() animate: boolean = false;\r\n\r\n  /**\r\n   * Whether the Toolbar should display actions' titles\r\n   */\r\n  get toolbarWithTitle(): boolean {\r\n    return this.activeTool$.value === undefined;\r\n  }\r\n\r\n  /**\r\n   * Initialize the toolbar and subscribe to the active tool\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.toolbar$$ = this.toolbox.toolbar$.subscribe((toolbar: string[]) =>\r\n      this.onToolbarChange(toolbar)\r\n    );\r\n    this.activeTool$$ = this.toolbox.activeTool$.subscribe((tool: Tool) =>\r\n      this.onActiveToolChange(tool)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the active tool and destroy the action store\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.toolbar$$.unsubscribe();\r\n    this.activeTool$$.unsubscribe();\r\n    this.actionStore.destroy();\r\n  }\r\n\r\n  /**\r\n   * Track the starting animation\r\n   * @internal\r\n   */\r\n  onAnimationStart() {\r\n    this.animating$.next(true);\r\n  }\r\n\r\n  /**\r\n   * Untrack the completed animation\r\n   * @internal\r\n   */\r\n  onAnimationComplete() {\r\n    this.animating$.next(false);\r\n  }\r\n\r\n  /**\r\n   * Return a tool's inputs\r\n   * @param tool Tool\r\n   * @returns Tool inputs\r\n   * @internal\r\n   */\r\n  getToolInputs(tool: Tool): { [key: string]: any } {\r\n    return tool.options || {};\r\n  }\r\n\r\n  /**\r\n   * Get Action bar item class function\r\n   * @internal\r\n   */\r\n  get actionBarItemClassFunc() {\r\n    return (tool: Tool) => {\r\n      if (!this.toolbox.activeTool$.value) {\r\n        return;\r\n      }\r\n      return { 'tool-actived': tool.id === this.toolbox.activeTool$.value.name };\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize an action store\r\n   * @param toolbar Toolbar\r\n   */\r\n  private onToolbarChange(toolbar: string[]) {\r\n    this.setToolbar(toolbar);\r\n  }\r\n\r\n  /**\r\n   * Activate a tool and trigger an animation or not\r\n   * @param tool Tool to activate\r\n   */\r\n  private onActiveToolChange(tool: Tool) {\r\n    if (!this.animate) {\r\n      this.setActiveTool(tool);\r\n      return;\r\n    }\r\n    this.onAnimate(() => this.setActiveTool(tool));\r\n  }\r\n\r\n  /**\r\n   * Set the active tool\r\n   * @param tool Tool to activate\r\n   */\r\n  private setActiveTool(tool: Tool | undefined) {\r\n    if (tool === undefined) {\r\n      this.actionStore.state.updateAll({ active: false });\r\n    } else {\r\n      const action = this.actionStore.get(tool.name);\r\n      if (action !== undefined) {\r\n        this.actionStore.state.update(action, { active: true }, true);\r\n      }\r\n    }\r\n\r\n    this.activeTool$.next(tool);\r\n    if (this.animate) {\r\n      this.animation$.next('enter');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the toolbar\r\n   */\r\n  private setToolbar(toolbar: string[]) {\r\n    const actions = toolbar.reduce((acc: Action[], toolName: string) => {\r\n      const tool = this.toolbox.getTool(toolName);\r\n      if (tool === undefined) {\r\n        return acc;\r\n      }\r\n\r\n      acc.push({\r\n        id: tool.name,\r\n        title: tool.title,\r\n        icon: tool.icon,\r\n        // iconImage: tool.iconImage,\r\n        tooltip: tool.tooltip,\r\n        args: [tool, this.toolbox],\r\n        handler: (_tool: Tool, _toolbox: Toolbox) => {\r\n          _toolbox.activateTool(_tool.name);\r\n        }\r\n      });\r\n      return acc;\r\n    }, []);\r\n    this.actionStore.load(actions);\r\n    this.toolbar$.next(toolbar);\r\n  }\r\n\r\n  /**\r\n   * Observe the ongoing animation and ignore any incoming animation\r\n   * while one is still ongoing.\r\n   * @param callback Callback to execute when the animation completes\r\n   */\r\n  private onAnimate(callback: () => void) {\r\n    this.unAnimate();\r\n    this.animating$$ = this.animating$.subscribe((animation: boolean) => {\r\n      if (!animation) {\r\n        callback.call(this);\r\n        this.unAnimate();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop observing an animation when it's complete\r\n   */\r\n  private unAnimate() {\r\n    if (this.animating$$) {\r\n      this.animating$$.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoActionModule } from '../../action/action.module';\r\nimport {\r\n    IgoDynamicComponentModule\r\n} from '../../dynamic-component/dynamic-component.module';\r\n\r\nimport { ToolboxComponent } from './toolbox.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoActionModule,\r\n    IgoDynamicComponentModule\r\n  ],\r\n  exports: [\r\n    ToolboxComponent\r\n  ],\r\n  declarations: [\r\n    ToolboxComponent\r\n  ]\r\n})\r\nexport class IgoToolboxModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ToolService } from './shared/tool.service';\r\nimport { IgoToolboxModule } from './toolbox/toolbox.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoToolboxModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoToolModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoToolModule,\r\n      providers: [\r\n        ToolService\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { DynamicComponent } from '../../dynamic-component';\r\n\r\nimport { WidgetComponent } from '../shared/widget.interfaces';\r\n\r\n/**\r\n * This component dynamically renders a widget. It also subscribes\r\n * to the widget's 'cancel' and 'complete' events and destroys it\r\n * when any of those event is emitted.\r\n */\r\n@Component({\r\n  selector: 'igo-widget-outlet',\r\n  templateUrl: './widget-outlet.component.html',\r\n  styleUrls: ['./widget-outlet.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class WidgetOutletComponent implements OnDestroy {\r\n\r\n  /**\r\n   * Widget subscribers to 'cancel' and 'complete'\r\n   * @internal\r\n   */\r\n  private baseSubscribers = {\r\n    cancel: (event: any) => this.onCancel(event),\r\n    complete: (event: any) => this.onComplete(event)\r\n  };\r\n\r\n  /**\r\n   * Widget\r\n   */\r\n  @Input() widget: DynamicComponent<WidgetComponent>;\r\n\r\n  /**\r\n   * Widget inputs\r\n   */\r\n  @Input() inputs: {[key: string]: any};\r\n\r\n  /**\r\n   * Widget subscribers\r\n   */\r\n  @Input() subscribers: {[key: string]: (event: any) => void} = {};\r\n\r\n  /**\r\n   * Event emitted when the widget emits 'complete'\r\n   */\r\n  @Output() complete = new EventEmitter<any>();\r\n\r\n  /**\r\n   * Event emitted when the widget emits 'cancel'\r\n   */\r\n  @Output() cancel = new EventEmitter<any>();\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Destroy the current widget and all it's inner subscriptions\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.destroyWidget();\r\n  }\r\n\r\n  /**\r\n   * Get the effective subscribers. That means a combination of the base\r\n   * subscribers and any subscriber given as input.\r\n   * @returns Combined subscribers\r\n   * @internal\r\n   */\r\n  getEffectiveSubscribers(): {[key: string]: (event: any) => void} {\r\n    const subscribers = Object.assign({}, this.subscribers);\r\n\r\n    // Base subscribers\r\n    Object.keys(this.baseSubscribers).forEach((key: string) => {\r\n      const subscriber = subscribers[key];\r\n      const baseSubscriber = this.baseSubscribers[key];\r\n      if (subscriber !== undefined) {\r\n        subscribers[key] = (event: any) => {\r\n          subscriber(event);\r\n          baseSubscriber(event);\r\n        };\r\n      } else {\r\n        subscribers[key] = baseSubscriber;\r\n      }\r\n    });\r\n\r\n    return subscribers;\r\n  }\r\n\r\n  /**\r\n   * When the widget emits 'cancel', propagate that event and destroy\r\n   * the widget\r\n   */\r\n  private onCancel(event: any) {\r\n    this.cancel.emit(event);\r\n    this.destroyWidget();\r\n  }\r\n\r\n  /**\r\n   * When the widget emits 'complete', propagate that event and destroy\r\n   * the widget\r\n   */\r\n  private onComplete(event: any) {\r\n    this.complete.emit(event);\r\n    this.destroyWidget();\r\n  }\r\n\r\n  /**\r\n   * Destroy the current widget\r\n   */\r\n  private destroyWidget() {\r\n    if (this.widget !== undefined) {\r\n      this.widget.destroy();\r\n    }\r\n    this.widget = undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  IgoDynamicComponentModule\r\n} from '../../dynamic-component/dynamic-component.module';\r\n\r\nimport { WidgetOutletComponent } from './widget-outlet.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoDynamicComponentModule\r\n  ],\r\n  exports: [\r\n    WidgetOutletComponent\r\n  ],\r\n  declarations: [\r\n    WidgetOutletComponent\r\n  ]\r\n})\r\nexport class IgoWidgetOutletModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { DynamicComponentService } from '../../dynamic-component/shared/dynamic-component.service';\r\n\r\nimport { Widget } from './widget';\r\nimport { WidgetComponent } from './widget.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WidgetService {\r\n\r\n  constructor(private dynamicComponentService: DynamicComponentService) {}\r\n\r\n  create(widgetCls: any): Widget {\r\n    return this.dynamicComponentService.create(widgetCls as WidgetComponent);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoWidgetOutletModule } from './widget-outlet/widget-outlet.module';\r\nimport { WidgetService } from './shared/widget.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetOutletModule\r\n  ],\r\n  exports: [\r\n    IgoWidgetOutletModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    WidgetService\r\n  ]\r\n})\r\nexport class IgoWidgetModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { getEntityTitle } from '../../entity';\r\nimport { Workspace } from '../shared/workspace';\r\nimport { WorkspaceStore } from '../shared/store';\r\n\r\n/**\r\n * Drop list that activates the selected workspace emit an event.\r\n */\r\n@Component({\r\n  selector: 'igo-workspace-selector',\r\n  templateUrl: './workspace-selector.component.html',\r\n  styleUrls: ['./workspace-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class WorkspaceSelectorComponent {\r\n\r\n  /**\r\n   * Store that holds the available workspaces.\r\n   */\r\n  @Input() store: WorkspaceStore;\r\n\r\n  /**\r\n   * Event emitted when an workspace is selected or unselected\r\n   */\r\n  @Output() selectedChange = new EventEmitter<{\r\n    selected: boolean;\r\n    value: Workspace;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  getWorkspaceTitle(workspace: Workspace): string {\r\n    return getEntityTitle(workspace);\r\n  }\r\n\r\n  /**\r\n   * When an workspace is manually selected, select it into the\r\n   * store and emit an event.\r\n   * @internal\r\n   * @param event The selection change event\r\n   */\r\n  onSelectedChange(event: {value: Workspace}) {\r\n    const workspace = event.value;\r\n    this.store.activateWorkspace(workspace);\r\n    this.selectedChange.emit({selected: true, value: workspace});\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoEntitySelectorModule } from '../../entity/entity-selector/entity-selector.module';\r\nimport { WorkspaceSelectorComponent } from './workspace-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoEntitySelectorModule\r\n  ],\r\n  exports: [\r\n    WorkspaceSelectorComponent\r\n  ],\r\n  declarations: [\r\n    WorkspaceSelectorComponent\r\n  ]\r\n})\r\nexport class IgoWorkspaceSelectorModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Widget } from '../../widget';\r\nimport { Workspace } from '../shared/workspace';\r\n\r\n/**\r\n * This component dynamically render an Workspace's active widget.\r\n * It also deactivate that widget whenever the widget's component\r\n * emit the 'cancel' or 'complete' event.\r\n */\r\n@Component({\r\n  selector: 'igo-workspace-widget-outlet',\r\n  templateUrl: './workspace-widget-outlet.component.html',\r\n  styleUrls: ['./workspace-widget-outlet.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class WorkspaceWidgetOutletComponent {\r\n\r\n  /**\r\n   * Workspace\r\n   */\r\n  @Input() workspace: Workspace;\r\n\r\n  /**\r\n   * Event emitted when a widget is deactivate which happens\r\n   * when the widget's component emits the 'cancel' or 'complete' event.\r\n   */\r\n  @Output() deactivateWidget = new EventEmitter<Widget>();\r\n\r\n  /**\r\n   * Observable of the workspace's active widget\r\n   * @internal\r\n   */\r\n  get widget$(): BehaviorSubject<Widget> { return this.workspace.widget$; }\r\n\r\n  /**\r\n   * Observable of the workspace's widget inputs\r\n   * @internal\r\n   */\r\n  get widgetInputs$(): BehaviorSubject<{[key: string]: any}> {\r\n    return this.workspace.widgetInputs$;\r\n  }\r\n\r\n  /**\r\n   * Observable of the workspace's widget inputs\r\n   * @internal\r\n   */\r\n  get widgetSubscribers$(): BehaviorSubject<{[key: string]: (event: any) => void}> {\r\n    return this.workspace.widgetSubscribers$;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * When a widget's component emit the 'cancel' event,\r\n   * deactivate that widget and emit the 'deactivateWidget' event.\r\n   * @param widget Widget\r\n   * @internal\r\n   */\r\n  onWidgetCancel(widget: Widget) {\r\n    this.workspace.deactivateWidget();\r\n    this.deactivateWidget.emit(widget);\r\n  }\r\n\r\n  /**\r\n   * When a widget's component emit the 'cancel' event,\r\n   * deactivate that widget and emit the 'deactivateWidget' event.\r\n   * @param widget Widget\r\n   * @internal\r\n   */\r\n  onWidgetComplete(widget: Widget) {\r\n    this.workspace.deactivateWidget();\r\n    this.deactivateWidget.emit(widget);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoWidgetOutletModule } from '../../widget/widget-outlet/widget-outlet.module';\r\n\r\nimport { WorkspaceWidgetOutletComponent } from './workspace-widget-outlet.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetOutletModule\r\n  ],\r\n  exports: [\r\n    WorkspaceWidgetOutletComponent\r\n  ],\r\n  declarations: [\r\n    WorkspaceWidgetOutletComponent\r\n  ]\r\n})\r\nexport class IgoWorkspaceWidgetOutletModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoWorkspaceSelectorModule } from './workspace-selector/workspace-selector.module';\r\nimport { IgoWorkspaceWidgetOutletModule } from './workspace-widget-outlet/workspace-widget-outlet.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoWorkspaceSelectorModule,\r\n    IgoWorkspaceWidgetOutletModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoWorkspaceModule {}\r\n","import { BehaviorSubject } from 'rxjs';\r\n\r\nexport class TableDatabase {\r\n  /** Stream that emits whenever the data has been modified. */\r\n  dataChange: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\r\n  get data(): any[] {\r\n    return this.dataChange.value;\r\n  }\r\n\r\n  constructor(data?) {\r\n    if (data) {\r\n      this.dataChange.next(data);\r\n    }\r\n  }\r\n\r\n  set(data) {\r\n    this.dataChange.next(data);\r\n  }\r\n\r\n  add(item) {\r\n    const copiedData = this.data.slice();\r\n    copiedData.push(item);\r\n    this.set(copiedData);\r\n  }\r\n\r\n  remove(item) {\r\n    const copiedData = this.data.slice();\r\n    const index = copiedData.indexOf(item);\r\n    copiedData.splice(index, 1);\r\n    this.set(copiedData);\r\n  }\r\n}\r\n","import { EntityRecord, EntityStore } from '../../entity';\r\nimport { Tool, ToolboxOptions } from './tool.interface';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\n/**\r\n * Service where all available tools and their component are registered.\r\n */\r\nexport class Toolbox {\r\n  /**\r\n   * Observable of the active tool\r\n   */\r\n  activeTool$: BehaviorSubject<Tool> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Ordered list of tool names to display in a toolbar\r\n   */\r\n  toolbar$: BehaviorSubject<string[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Observable of the active tool\r\n   */\r\n  private activeTool$$: Subscription;\r\n\r\n  /**\r\n   * Active tool history. Useful for activating the previous tool.\r\n   */\r\n  private activeToolHistory: string[] = [];\r\n\r\n  /**\r\n   * Tool store\r\n   */\r\n  private store = new EntityStore<Tool>([], {\r\n    getKey: (tool: Tool) => tool.name\r\n  });\r\n\r\n  get tools$(): BehaviorSubject<Tool[]> {\r\n    return this.store.entities$;\r\n  }\r\n\r\n  constructor(private options: ToolboxOptions = {}) {\r\n    this.setToolbar(options.toolbar);\r\n    this.initStore();\r\n  }\r\n\r\n  /**\r\n   * Destroy the toolbox\r\n   */\r\n  destroy() {\r\n    this.activeTool$$.unsubscribe();\r\n    this.store.destroy();\r\n  }\r\n\r\n  /**\r\n   * Return a tool\r\n   * @param name Tool name\r\n   * @returns tool Tool\r\n   */\r\n  getTool(name: string): Tool {\r\n    return this.store.get(name);\r\n  }\r\n\r\n  /**\r\n   * Return all tools\r\n   * @returns Array of tools\r\n   */\r\n  getTools(): Tool[] {\r\n    return this.store.all();\r\n  }\r\n\r\n  /**\r\n   * Set tool configurations\r\n   * @param tools Tools\r\n   */\r\n  setTools(tools: Tool[]) {\r\n    this.store.load(tools);\r\n  }\r\n\r\n  /**\r\n   * Set toolbar\r\n   * @param toolbar A list of tool names\r\n   */\r\n  setToolbar(toolbar: string[]) {\r\n    this.toolbar$.next(toolbar || []);\r\n  }\r\n\r\n  /**\r\n   * Activate a tool (and deactivate other tools)\r\n   * @param name Tool name\r\n   * @param options Tool options\r\n   */\r\n  activateTool(name: string, options: { [key: string]: any } = {}) {\r\n    const tool = this.getTool(name);\r\n    if (tool === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.store.state.update(tool, { active: true, options }, true);\r\n  }\r\n\r\n  /**\r\n   * Activate the previous tool, if any\r\n   */\r\n  activatePreviousTool() {\r\n    if (this.activeToolHistory.length <= 1) {\r\n      this.deactivateTool();\r\n      return;\r\n    }\r\n    const [previous, current] = this.activeToolHistory.splice(-2, 2);\r\n    this.activateTool(previous);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active tool\r\n   */\r\n  deactivateTool() {\r\n    this.clearActiveToolHistory();\r\n    this.store.state.updateAll({ active: false });\r\n  }\r\n\r\n  /**\r\n   * Initialize the tool store and start observing the active tool\r\n   */\r\n  private initStore() {\r\n    this.store = new EntityStore<Tool>([], {\r\n      getKey: (entity: Tool) => entity.name\r\n    });\r\n\r\n    this.activeTool$$ = this.store.stateView\r\n      .firstBy$((record: EntityRecord<Tool>) => record.state.active === true)\r\n      .subscribe((record: EntityRecord<Tool>) => {\r\n        if (record === undefined) {\r\n          this.setActiveTool(undefined);\r\n          return;\r\n        }\r\n\r\n        const tool = record.entity;\r\n        const options = Object.assign(\r\n          {},\r\n          tool.options || {},\r\n          record.state.options || {}\r\n        );\r\n        this.setActiveTool(Object.assign({}, tool, { options }));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set the active tool and update the tool history\r\n   * @param tool Tool\r\n   */\r\n  private setActiveTool(tool: Tool | undefined) {\r\n    this.activeTool$.next(tool);\r\n    if (tool === undefined) {\r\n      this.clearActiveToolHistory();\r\n    } else {\r\n      this.activeToolHistory = this.activeToolHistory\r\n        .filter((name: string) => name !== tool.name)\r\n        .concat([tool.name]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the tool history\r\n   */\r\n  private clearActiveToolHistory() {\r\n    this.activeToolHistory = [];\r\n  }\r\n}\r\n","import { DynamicComponent } from '../../dynamic-component/shared/dynamic-component';\r\nimport { WidgetComponent } from './widget.interfaces';\r\n\r\nexport class Widget extends DynamicComponent<WidgetComponent> {}\r\n","import { EntityStore } from '../../entity';\r\nimport { Workspace } from './workspace';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * workspaces.\r\n */\r\nexport class WorkspaceStore extends EntityStore<Workspace> {\r\n\r\n  activeWorkspace$: BehaviorSubject<Workspace> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Activate the an workspace workspace and deactivate the one currently active\r\n   * @param workspace Workspace\r\n   */\r\n  activateWorkspace(workspace: Workspace) {\r\n    const active = this.activeWorkspace$.value;\r\n    if (active !== undefined) {\r\n      active.deactivate();\r\n    }\r\n\r\n    this.deactivateWorkspace();\r\n    if (workspace !== undefined) {\r\n      this.state.update(workspace, {active: true, selected: true}, true);\r\n      this.activeWorkspace$.next(workspace);\r\n      workspace.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the current workspace\r\n   * @param workspace Workspace\r\n   */\r\n  deactivateWorkspace() {\r\n    const active = this.activeWorkspace$.value;\r\n    if (active !== undefined) {\r\n      active.deactivate();\r\n      this.activeWorkspace$.next(undefined);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Subscription, BehaviorSubject, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { ActionStore } from '../../action';\r\nimport { Widget } from '../../widget';\r\nimport { EntityRecord, EntityStore } from '../../entity';\r\n\r\nimport { WorkspaceOptions } from './workspace.interfaces';\r\n\r\n/**\r\n * This class is responsible of managing the relations between\r\n * entities and the actions that consume them. It also defines an\r\n * entity table template that may be used by an entity table component.\r\n */\r\nexport class Workspace<E extends object = object> {\r\n\r\n  /**\r\n   * Observable of the selected widget\r\n   */\r\n  readonly widget$ = new BehaviorSubject<Widget>(undefined);\r\n\r\n  /**\r\n   * Observable of the selected widget's inputs\r\n   */\r\n  readonly widgetInputs$ = new BehaviorSubject<{[key: string]: any}>({});\r\n\r\n  /**\r\n   * Observable of the selected widget's subscribers\r\n   */\r\n  readonly widgetSubscribers$ = new BehaviorSubject<{[key: string]: (event: any) => void}>({});\r\n\r\n  /**\r\n   * Subscription to the selected entity\r\n   */\r\n  private entities$$: Subscription;\r\n\r\n  /**\r\n   * Whether this workspace is active\r\n   */\r\n  private active: boolean = false;\r\n\r\n  /**\r\n   * State change that trigger an update of the actions availability\r\n   */\r\n  private change: Subject<void> = new Subject();\r\n\r\n  /**\r\n   * Subscription to state changes\r\n   */\r\n  private change$: Subscription;\r\n\r\n  /**\r\n   * Workspace id\r\n   */\r\n  get id(): string { return this.options.id; }\r\n\r\n  /**\r\n   * Workspace title\r\n   */\r\n  get title(): string { return this.options.title; }\r\n\r\n  /**\r\n   * Workspace title\r\n   */\r\n  get meta(): {[key: string]: any} { return this.options.meta || {}; }\r\n\r\n  /**\r\n   * Entities store\r\n   */\r\n  get entityStore(): EntityStore<E> { return this.options.entityStore as EntityStore<E>; }\r\n\r\n  /**\r\n   * Actions store (some actions activate a widget)\r\n   */\r\n  get actionStore(): ActionStore { return this.options.actionStore; }\r\n\r\n  /**\r\n   * Selected widget\r\n   */\r\n  get widget(): Widget { return this.widget$.value; }\r\n\r\n  /**\r\n   * Whether a widget is selected\r\n   */\r\n  get hasWidget(): boolean { return this.widget !== undefined; }\r\n\r\n  constructor(protected options: WorkspaceOptions) {}\r\n\r\n  /**\r\n   * Whether this workspace is active\r\n   */\r\n  isActive(): boolean { return this.active; }\r\n\r\n  /**\r\n   * Activate the workspace. By doing that, the workspace will observe\r\n   * the selected entity (from the store) and update the actions availability.\r\n   * For example, some actions require an entity to be selected.\r\n   */\r\n  activate() {\r\n    if (this.active === true) {\r\n      this.deactivate();\r\n    }\r\n    this.active = true;\r\n\r\n    if (this.entityStore !== undefined) {\r\n      this.entities$$ = this.entityStore.stateView.all$()\r\n        .subscribe(() => this.onStateChange());\r\n    }\r\n\r\n    if (this.actionStore !== undefined) {\r\n      this.change$ = this.change\r\n        .pipe(debounceTime(35))\r\n        .subscribe(() => this.actionStore.updateActionsAvailability());\r\n    }\r\n\r\n    this.change.next();\r\n  }\r\n\r\n  /**\r\n   * Deactivate the workspace. Unsubcribe to the selected entity.\r\n   */\r\n  deactivate() {\r\n    this.active = false;\r\n    this.deactivateWidget();\r\n\r\n    if (this.entities$$ !== undefined) {\r\n      this.entities$$.unsubscribe();\r\n    }\r\n    if (this.change$ !== undefined) {\r\n      this.change$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a widget. In itself, activating a widget doesn't render it but,\r\n   * if an WorkspaceWidgetOutlet component is bound to this workspace, the widget will\r\n   * show up.\r\n   * @param widget Widget\r\n   * @param inputs Inputs the widget will receive\r\n   */\r\n  activateWidget(\r\n    widget: Widget,\r\n    inputs: {[key: string]: any} = {},\r\n    subscribers: {[key: string]: (event: any) => void} = {}\r\n  ) {\r\n    this.widget$.next(widget);\r\n    this.widgetInputs$.next(inputs);\r\n    this.widgetSubscribers$.next(subscribers);\r\n    this.change.next();\r\n  }\r\n\r\n  /**\r\n   * Deactivate a widget.\r\n   */\r\n  deactivateWidget() {\r\n    this.widget$.next(undefined);\r\n    this.change.next();\r\n  }\r\n\r\n  /**\r\n   * When the state changes, update the actions availability.\r\n   */\r\n  private onStateChange() {\r\n    this.change.next();\r\n  }\r\n\r\n}\r\n","import { Tool } from './tool.interface';\r\nimport { ToolService } from './tool.service';\r\n\r\nexport function ToolComponent(tool: Partial<Tool>): (cls: any) => any {\r\n  return (compType: any) => {\r\n    ToolService.register(Object.assign({}, tool, {\r\n      component: compType\r\n    } as Tool));\r\n  };\r\n}\r\n"]}