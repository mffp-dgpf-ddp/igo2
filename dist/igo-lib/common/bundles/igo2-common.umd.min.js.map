{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@igo2/common/lib/entity/shared/entity.enums.ts","ng://@igo2/common/lib/entity/shared/entity.utils.ts","ng://@igo2/common/lib/entity/shared/state.ts","ng://@igo2/common/lib/entity/shared/view.ts","ng://@igo2/common/lib/entity/shared/store.ts","ng://@igo2/common/lib/entity/shared/watcher.ts","ng://@igo2/common/lib/entity/shared/transaction.ts","ng://@igo2/common/lib/entity/entity-selector/entity-selector.component.ts","ng://@igo2/common/lib/entity/entity-table/entity-table.component.ts","ng://@igo2/common/lib/action/shared/action.enums.ts","ng://@igo2/common/lib/action/actionbar/actionbar.component.ts","ng://@igo2/common/lib/action/actionbar/actionbar-item.component.ts","ng://@igo2/common/lib/action/actionbar/actionbar.module.ts","ng://@igo2/common/lib/action/action.module.ts","ng://@igo2/common/lib/backdrop/backdrop.component.ts","ng://@igo2/common/lib/backdrop/backdrop.module.ts","ng://@igo2/common/lib/clickout/clickout.directive.ts","ng://@igo2/common/lib/clickout/clickout.module.ts","ng://@igo2/common/lib/clone/clone.pipe.ts","ng://@igo2/common/lib/clone/clone.module.ts","ng://@igo2/common/lib/collapsible/collapse.directive.ts","ng://@igo2/common/lib/collapsible/collapsible.component.ts","ng://@igo2/common/lib/collapsible/collapsible.module.ts","ng://@igo2/common/lib/confirm-dialog/confirm-dialog.component.ts","ng://@igo2/common/lib/confirm-dialog/confirm-dialog.service.ts","ng://@igo2/common/lib/confirm-dialog/confirm-dialog.module.ts","ng://@igo2/common/lib/context-menu/context-menu.directive.ts","ng://@igo2/common/lib/context-menu/context-menu.module.ts","ng://@igo2/common/lib/custom-html/custom-html.component.ts","ng://@igo2/common/lib/custom-html/custom-html.pipe.ts","ng://@igo2/common/lib/custom-html/custom-html.module.ts","ng://@igo2/common/lib/drag-drop/drag-drop.directive.ts","ng://@igo2/common/lib/drag-drop/drag-drop.module.ts","ng://@igo2/common/lib/dynamic-component/shared/dynamic-component.ts","ng://@igo2/common/lib/dynamic-component/shared/dynamic-component.service.ts","ng://@igo2/common/lib/dynamic-component/dynamic-outlet/dynamic-outlet.component.ts","ng://@igo2/common/lib/dynamic-component/dynamic-outlet/dynamic-outlet.module.ts","ng://@igo2/common/lib/dynamic-component/dynamic-component.module.ts","ng://@igo2/common/lib/flexible/flexible.component.ts","ng://@igo2/common/lib/flexible/flexible.module.ts","ng://@igo2/common/lib/form/shared/form.utils.ts","ng://@igo2/common/lib/form/form/form.component.ts","ng://@igo2/common/lib/form/form/form.module.ts","ng://@igo2/common/lib/form/shared/form-field.service.ts","ng://@igo2/common/lib/form/shared/form.service.ts","ng://@igo2/common/lib/form/shared/form-field-component.ts","ng://@igo2/common/lib/form/form-field/form-field.component.ts","ng://@igo2/common/lib/form/form-field/form-field-select.component.ts","ng://@igo2/common/lib/form/form-field/form-field-text.component.ts","ng://@igo2/common/lib/form/form-field/form-field-textarea.component.ts","ng://@igo2/common/lib/form/form-field/form-field.module.ts","ng://@igo2/common/lib/form/form-group/form-group.component.ts","ng://@igo2/common/lib/form/form-group/form-group.module.ts","ng://@igo2/common/lib/form/form.module.ts","ng://@igo2/common/lib/entity/entity-selector/entity-selector.module.ts","ng://@igo2/common/lib/stop-propagation/stop-drop-propagation.directive.ts","ng://@igo2/common/lib/stop-propagation/stop-propagation.directive.ts","ng://@igo2/common/lib/stop-propagation/stop-propagation.module.ts","ng://@igo2/common/lib/entity/entity-table/entity-table-row.directive.ts","ng://@igo2/common/lib/entity/entity-table/entity-table.module.ts","ng://@igo2/common/lib/entity/entity.module.ts","ng://@igo2/common/lib/image/secure-image.pipe.ts","ng://@igo2/common/lib/image/image.module.ts","ng://@igo2/common/lib/keyvalue/keyvalue.pipe.ts","ng://@igo2/common/lib/keyvalue/keyvalue.module.ts","ng://@igo2/common/lib/json-dialog/json-dialog.component.ts","ng://@igo2/common/lib/json-dialog/json-dialog.service.ts","ng://@igo2/common/lib/json-dialog/json-dialog.module.ts","ng://@igo2/common/lib/list/list-item.directive.ts","ng://@igo2/common/lib/list/list.component.ts","ng://@igo2/common/lib/list/list.module.ts","ng://@igo2/common/lib/panel/panel.component.ts","ng://@igo2/common/lib/panel/panel.module.ts","ng://@igo2/common/lib/sidenav/sidenav-shim.directive.ts","ng://@igo2/common/lib/sidenav/sidenav.module.ts","ng://@igo2/common/lib/spinner/spinner.component.ts","ng://@igo2/common/lib/spinner/spinner-activity.directive.ts","ng://@igo2/common/lib/spinner/spinner.module.ts","ng://@igo2/common/lib/table/table-datasource.ts","ng://@igo2/common/lib/table/table-action-color.enum.ts","ng://@igo2/common/lib/table/table.component.ts","ng://@igo2/common/lib/table/table.module.ts","ng://@igo2/common/lib/tool/shared/tool.service.ts","ng://@igo2/common/lib/action/shared/store.ts","ng://@igo2/common/lib/tool/toolbox/toolbox.animation.ts","ng://@igo2/common/lib/tool/toolbox/toolbox.component.ts","ng://@igo2/common/lib/tool/toolbox/toolbox.module.ts","ng://@igo2/common/lib/tool/tool.module.ts","ng://@igo2/common/lib/widget/widget-outlet/widget-outlet.component.ts","ng://@igo2/common/lib/widget/widget-outlet/widget-outlet.module.ts","ng://@igo2/common/lib/widget/shared/widget.service.ts","ng://@igo2/common/lib/widget/widget.module.ts","ng://@igo2/common/lib/workspace/workspace-selector/workspace-selector.component.ts","ng://@igo2/common/lib/workspace/workspace-selector/workspace-selector.module.ts","ng://@igo2/common/lib/workspace/workspace-widget-outlet/workspace-widget-outlet.component.ts","ng://@igo2/common/lib/workspace/workspace-widget-outlet/workspace-widget-outlet.module.ts","ng://@igo2/common/lib/workspace/workspace.module.ts","ng://@igo2/common/lib/table/table-database.ts","ng://@igo2/common/lib/tool/shared/toolbox.ts","ng://@igo2/common/lib/widget/shared/widget.ts","ng://@igo2/common/lib/workspace/shared/store.ts","ng://@igo2/common/lib/workspace/shared/workspace.ts","ng://@igo2/common/lib/tool/shared/tool-component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","__spread","concat","Insert","Update","Delete","Default","HTML","UnsanitizedHTML","Icon","ButtonGroup","Auto","Instant","Smooth","None","All","Some","getEntityProperty","entity","property","t","safeObject","getEntityId","meta","id","idProperty","getEntityTitle","title","titleProperty","EntityStateManager","options","index","Map","change$","ReplaySubject","store","undefined","getKey","clear","size","get","set","state","setMany","entities","_this","forEach","assign","setAll","from","keys","update","changes","exclusive","updateMany","updateManyExclusive","reverse","reverseMany","currentState","reduce","acc","reversedChanges","reverseChanges","updateAll","allKeys","getAllKeys","map","Set","indexOf","entries","bunch","_a","changeKey","storeKeys","EntityView","source$","values$","BehaviorSubject","lifted","joins","filter$","sort$","count","all","all$","firstBy","clause","find","firstBy$","pipe","values","manyBy","filter","manyBy$","sort","destroy","values$$","unsubscribe","join","Error","lift","liftJoinedSource","liftSource","combineLatest","skip","debounceTime","subscribe","processValues","sources$","apply","source","joinData","computeJoinedValue","joinIndex","slice","filterValues","sortValues","v1","v2","ObjectUtils","naturalCompare","valueAccessor","direction","EntityStore","entities$","count$","empty$","_pristine","getProperty","view","stateView","load","_index","generateIndex","pristine","softClear","updateCount","insert","insertMany","delete","deleteMany","empty","EntityStoreWatcher","cdRef","innerStateIndex","setChangeDetector","setStore","teardownObservers","setupObservers","detectChanges","entities$$","onEntitiesChange","state$$","onStateChange","changesDetected","storeIndex","innerIndex","storeKeys_1","tslib_1.__values","storeKeys_1_1","storeValue","innerValue","objectsAreEquivalent","EntityTransaction","_inCommitPhase","operations","operation","current","existingOperation","getOperationByEntity","removeOperation","doInsert","previous","type","EntityOperationType","doUpdate","doDelete","commit","handler","catchError","of","tap","result","onCommitError","onCommitSuccess","commitAll","getOperationsInCommit","rollback","rollbackOperations","checkInCommitPhase","storesOperations","operations_1","operations_1_1","storeOperations","deletes","_delete","updates","_update","inserts","_insert","mergeTransaction","transaction","addOperation","resolveOperations","added","inCommitPhase","EntitySelectorComponent","selected$","many","titleAccessor","emptyText","selectedChange","EventEmitter","ngOnInit","watcher","selected$$","record","selected","records","ngOnDestroy","onSelectionChange","event","emit","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","EntityTableComponent","entityTableColumnRenderer","EntityTableColumnRenderer","entityTableSelectionState","EntityTableSelectionState","selectionState$","scrollBehavior","EntityTableScrollBehavior","entityClick","entitySelectChange","columns","column","visible","name","selectionCheckbox","selection","selectMany","fixedHeader","selection$$","computeSelectionState","ngOnChanges","currentValue","previousValue","refresh","onSort","active","getValue","onRowClick","onRowSelect","onToggleRows","toggle","onToggleRow","selectedRecords","states","selectionCount","columnIsSortable","sortable","rowIsSelected","getColumnRenderer","renderer","getTableClass","igo-entity-table-with-selection","getHeaderClass","func","headerClassFunc","Function","getRowClass","rowClassFunc","getCellClass","cls","tableFunc","cellClassFunc","columnFunc","onButtonClick","clickFunc","Dock","Overlay","Context","ActionbarComponent","overlay","actionbarMode","ActionbarMode","collapsed","toggleCollapseAction","icon","mode","withToggleButton","horizontal","color","withTitle","withIcon","xPosition","yPosition","_overlayClass","itemClassFunc","defaultItemClassFunc","action","onTriggerAction","HostBinding","ActionbarItemComponent","disabled","trigger","tooltip","onClick","IgoActionbarModule","NgModule","imports","CommonModule","IgoLanguageModule","MatButtonModule","MatIconModule","MatTooltipModule","MatMenuModule","MatListModule","MatCardModule","exports","declarations","IgoActionModule","providers","BackdropComponent","_shown","IgoBackdropModule","forRoot","ngModule","ClickoutDirective","el","clickout","handleMouseClick","nativeElement","contains","Directive","ElementRef","HostListener","IgoClickoutModule","ClonePipe","transform","obj","Pipe","IgoCloneModule","CollapseDirective","_collapsed","_target","collapseTarget","expandTarget","click","addClass","removeClass","Renderer2","CollapsibleComponent","_title","IgoCollapsibleModule","ConfirmDialogComponent","dialogRef","MatDialogRef","ConfirmDialogService","dialog","open","message","disableClose","componentInstance","confirmMessage","afterClosed","Injectable","MatDialog","IgoConfirmDialogModule","MatDialogModule","entryComponents","ContextMenuDirective","viewContainerRef","elementRef","menuPosition","onContextMenu","x","y","close","preventDefault","overlayRef","positionStrategy","position","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","scrollStrategy","scrollStrategies","attach","TemplatePortal","menuContext","$implicit","sub","fromEvent","document","clickTarget","overlayElement","take","dispose","ViewContainerRef","IgoContextMenuModule","CustomHtmlComponent","_html","SanitizeHtmlPipe","_sanitizer","v","bypassSecurityTrustHtml","DomSanitizer","IgoCustomHtmlModule","MatInputModule","DragAndDropDirective","allowedExtensions","filesDropped","filesInvalid","background","onDragOver","evt","stopPropagation","onDragLeave","onDrop","filesObj","validExtensions","valid","invalid","files","dataTransfer","files_1","files_1_1","file","ext","split","lastIndexOf","IgoDrapDropModule","DynamicComponent","componentFactory","subscriptions","inputs","subscribers","setTarget","componentRef","createComponent","updateInputs","updateSubscribers","unsubscribeAll","instance","propName","onUpdateInputs","outputs","emitter_1","subscriber","isArray","_subscriber","s","DynamicComponentService","resolver","componentCls","factory","resolveComponentFactory","providedIn","ComponentFactoryResolver","DynamicOutletComponent","dynamicComponentService","component","eq","inputsAreEquivalents","subscribersAreEquivalents","dynamicComponent","renderComponent","ViewChild","read","IgoDynamicOutletModule","IgoDynamicComponentModule","FlexibleComponent","mediaService","_initial","_expanded","_initialMobile","expanded","_collapsedMobile","_expandedMobile","_direction","_state","sizes","initial","media$","initialMobile","collapsedMobile","expandedMobile","setSize","setTimeout","transitionTime","className","media","main","style","height","width","MediaService","IgoFlexibleModule","formControlIsRequired","control","validator","required","controls","getDefaultErrorMessages","getControlErrorMessage","messages","errors","errorMessages","getAllFormFields","form","groups","group","fields","FormComponent","submitForm","buttons","children","formData","setData","onSubmit","getData","data","field","setValue","updateDataWithFormField","reset","IgoFormFormModule","FormsModule","ReactiveFormsModule","FormFieldService","register","getFieldByType","FormService","formBuilder","addControl","config","setValidators","extendFieldConfig","partial","FormBuilder","FormFieldComponent","compType","FormFieldComponent$1","FormFieldComponent$$1","formFieldService","placeholder","disableSwitch","formControl","FormFieldSelectComponent","disabled$","Observable","choices$","getErrorMessage","onDisableSwitchClick","toggleDisabled","disable","enable","FormFieldTextComponent","FormFieldTextareaComponent","IgoFormFieldModule","MatFormFieldModule","MatSelectModule","FormGroupComponent","getFieldColSpan","colSpan","cols","Math","min","getFieldNgClass","IgoFormGroupModule","IgoFormModule","IgoEntitySelectorModule","StopDropPropagationDirective","StopPropagationDirective","IgoStopPropagationModule","EntityTableRowDirective","selectOnClick","highlightSelection","_selected","select","toggleSelected","scroll","addCls","selectedCls","highlightedCls","removeCls","scrollIntoView","behavior","block","inline","IgoEntityTableModule","MatTableModule","MatSortModule","MatCheckboxModule","IgoEntityModule","SecureImagePipe","http","url","headers","activityInterceptor","responseType","switchMap","blob","observer","reader","FileReader","readAsDataURL","onloadend","HttpClient","IgoImageModule","KeyValuePipe","keyValues","getOwnPropertyNames","IgoKeyValueModule","JsonDialogComponent","isObject","val","baseKey","JsonDialogService","ignoreKeys","IgoJsonDialogModule","ListItemDirective","_color","_focused","_disabled","beforeSelect","beforeFocus","beforeUnselect","beforeUnfocus","beforeDisable","beforeEnable","focus","unfocus","unselect","toggleSelectedClass","toggleDisabledClass","getOffsetTop","offsetTop","focused","disabledCls","ListComponent","_navigation","_selection","_selectedItem","focusedItem","_focusedItem","scrollToItem","handleKeyboardEvent","navigationEnabled","keyCode","navigate","enableNavigation","ngAfterViewInit","listItems","init","listItems$$","items","item","focusNext","toArray","getFocusedIndex","focusPrevious","selectedItem","navigation","disableNavigation","findSelectedItem","findFocusedItem","item2","handleItemBeforeSelect","handleItemSelect","handleItemBeforeFocus","handleItemFocus","findIndex","scrollTop","ContentChildren","descendants","IgoListModule","PanelComponent","_withHeader","IgoPanelModule","SidenavShimDirective","onOpen","focusedElement","onCloseStart","blurElement","onClose","selectRootElement","blur","MatSidenav","Self","IgoSidenavModule","SpinnerComponent","shown$","show","shown","hide","SpinnerActivityDirective","spinner","activityService","counter$$","counter$","ActivityService","IgoSpinnerModule","MatProgressSpinnerModule","TableDataSource","_database","_model","_sort","_super","_filterChange","tslib_1.__extends","connect","merge","displayDataChanges","dataChange","sortChange","getFilteredData","getSortedData","disconnect","filterable","resolve","toLowerCase","a","propertyA","propertyB","DataSource","primary","accent","warn","TableComponent","_hasFIlterInput","SelectionModel","dataSource","database","model","displayedColumns","displayed","unshift","actions","changed","distinctUntilChanged","change","getActionColor","colorId","TableActionColor","row","isAllSelected","masterToggle","handleClickAction","MatSort","IgoTableModule","CdkTableModule","ToolService","tool","tools","getTool","getTools","ActionStore","updateActionsAvailability","availables","unavailables","conditions","conditionArgs","every","condition","toolSlideInOut","speed","transition","animate","ToolboxComponent","activeTool$","actionStore","animation$","toolbar$","animating$","toolbar$$","toolbox","toolbar","onToolbarChange","activeTool$$","onActiveToolChange","onAnimationStart","onAnimationComplete","getToolInputs","tool-actived","setToolbar","onAnimate","setActiveTool","toolName","_tool","_toolbox","activateTool","callback","unAnimate","animating$$","animation","animations","IgoToolboxModule","IgoToolModule","WidgetOutletComponent","baseSubscribers","cancel","onCancel","complete","onComplete","destroyWidget","getEffectiveSubscribers","baseSubscriber","widget","IgoWidgetOutletModule","WidgetService","widgetCls","IgoWidgetModule","WorkspaceSelectorComponent","getWorkspaceTitle","workspace","onSelectedChange","activateWorkspace","IgoWorkspaceSelectorModule","WorkspaceWidgetOutletComponent","deactivateWidget","widget$","widgetInputs$","widgetSubscribers$","onWidgetCancel","onWidgetComplete","IgoWorkspaceWidgetOutletModule","IgoWorkspaceModule","TableDatabase","add","copiedData","remove","splice","Toolbox","activeToolHistory","initStore","setTools","activatePreviousTool","deactivateTool","clearActiveToolHistory","Widget","WorkspaceStore","activeWorkspace$","deactivate","deactivateWorkspace","activate","Workspace","entity$","changes$","Subject","isActive","entityStore","onSelectEntity","changes$$","activateWidget","titleHtml","titleHtmlProperty","iconProperty","revision"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum EntityOperationType {\r\n  Insert = 'Insert',\r\n  Update = 'Update',\r\n  Delete = 'Delete'\r\n}\r\n\r\nexport enum EntityTableColumnRenderer {\r\n  Default = 'Default',\r\n  HTML = 'HTML',\r\n  UnsanitizedHTML = 'UnsanitizedHTML',\r\n  Icon = 'Icon',\r\n  ButtonGroup = 'ButtonGroup'\r\n}\r\n\r\nexport enum EntityTableScrollBehavior {\r\n  Auto = 'auto',\r\n  Instant = 'instant',\r\n  Smooth = 'smooth'\r\n}\r\n\r\nexport enum EntityTableSelectionState {\r\n  None = 'None',\r\n  All = 'All',\r\n  Some = 'Some'\r\n}\r\n","import t from 'typy';\r\n\r\nimport { EntityKey } from './entity.interfaces';\r\n\r\n/**\r\n * Get an entity's named property. Nested properties are supported\r\n * with the dotted notation. (i.e 'author.name')\r\n *\r\n * Note: this method is a 'best attempt' at getting an entity's property.\r\n * It fits the most common cases but you might need to explicitely define\r\n * a property getter when using an EntityStore, for example.\r\n * @param entity Entity\r\n * @param property Property name\r\n * @returns Property value\r\n */\r\nexport function getEntityProperty(entity: object, property: string): any {\r\n  return t(entity, property).safeObject;\r\n}\r\n\r\n/**\r\n * Get an entity's id. An entity's id can be one of:\r\n * 'entity.meta.id', 'entity.meta.idProperty' or 'entity.id'.\r\n *\r\n * Note: See the note in the 'getEntityProperty' documentation.\r\n * @param entity Entity\r\n * @returns Entity id\r\n */\r\nexport function getEntityId(entity: object): EntityKey {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.id ? meta.id : getEntityProperty(entity, meta.idProperty || 'id');\r\n}\r\n\r\n/**\r\n * Get an entity's title. An entity's title can be one of:\r\n * 'entity.meta.title', 'entity.meta.titleProperty' or 'entity.title'.\r\n * @param entity Entity\r\n * @returns Entity title\r\n */\r\nexport function getEntityTitle(entity: object): string {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.title ? meta.title : getEntityProperty(entity, meta.titleProperty || 'title');\r\n}\r\n\r\n/**\r\n * Get an entity's HTML title. An entity's HTML title can be one of:\r\n * 'entity.meta.titleHtml', 'entity.meta.titleHtmlProperty' or 'entity.titleHtml'.\r\n * @param entity Entity\r\n * @returns Entity HTML title\r\n */\r\nexport function getEntityTitleHtml(entity: object): string {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.titleHtml ? meta.titleHtml : getEntityProperty(entity, meta.titleHtmlProperty || 'titleHtml');\r\n}\r\n\r\n/**\r\n * Get an entity's icon. An entity's icon can be one of:\r\n * 'entity.meta.icon', 'entity.meta.iconProperty' or 'entity.icon'.\r\n * @param entity Entity\r\n * @returns Entity icon\r\n */\r\nexport function getEntityIcon(entity: object): string {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.icon ? meta.icon : getEntityProperty(entity, meta.iconProperty || 'icon');\r\n}\r\n\r\n/**\r\n * Get an entity's revision.\r\n * @param entity Entity\r\n * @returns Entity revision\r\n */\r\nexport function getEntityRevision(entity: object): number {\r\n  const meta = (entity as any).meta || {};\r\n  return meta.revision || 0;\r\n}\r\n","import { ReplaySubject } from 'rxjs';\r\n\r\nimport { EntityKey, EntityState, EntityStateManagerOptions } from './entity.interfaces';\r\nimport { getEntityId } from './entity.utils';\r\nimport { EntityStore } from './store';\r\n\r\n/**\r\n * This class is used to track a store's entities state\r\n */\r\nexport class EntityStateManager<E extends object, S extends EntityState = EntityState> {\r\n\r\n  /**\r\n   * State index\r\n   */\r\n  readonly index = new Map<EntityKey, S>();\r\n\r\n  /**\r\n   * Change emitter\r\n   */\r\n  readonly change$ = new ReplaySubject<void>(1);\r\n\r\n  /**\r\n   * Method to get an entity's id\r\n   */\r\n  readonly getKey: (E) => EntityKey;\r\n\r\n  private store: EntityStore<object> | undefined;\r\n\r\n  constructor(options: EntityStateManagerOptions = {}) {\r\n    this.store = options.store ? options.store : undefined;\r\n    this.getKey = options.getKey\r\n      ? options.getKey\r\n      : (this.store ? this.store.getKey : getEntityId);\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Clear state\r\n   */\r\n  clear() {\r\n    if (this.index.size > 0) {\r\n      this.index.clear();\r\n      this.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an entity's state\r\n   * @param entity Entity\r\n   * @returns State\r\n   */\r\n  get(entity: E): S {\r\n    return (this.index.get(this.getKey(entity)) || {}) as S;\r\n  }\r\n\r\n  /**\r\n   * Set an entity's state\r\n   * @param entity Entity\r\n   * @param state State\r\n   */\r\n  set(entity: E, state: S) {\r\n    this.setMany([entity], state);\r\n  }\r\n\r\n  /**\r\n   * Set many entitie's state\r\n   * @param entitie Entities\r\n   * @param state State\r\n   */\r\n  setMany(entities: E[], state: S) {\r\n    entities.forEach((entity: E) => {\r\n      this.index.set(this.getKey(entity), Object.assign({}, state));\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Set state of all entities that already have a state. This is not\r\n   * the same as setting the state of all the store's entities.\r\n   * @param state State\r\n   */\r\n  setAll(state: S) {\r\n    Array.from(this.index.keys()).forEach((key: EntityKey) => {\r\n      this.index.set(key, Object.assign({}, state));\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Update an entity's state\r\n   * @param entity Entity\r\n   * @param changes State changes\r\n   */\r\n  update(entity: E, changes: Partial<S>, exclusive = false) {\r\n    this.updateMany([entity], changes, exclusive);\r\n  }\r\n\r\n  /**\r\n   * Update many entitie's state\r\n   * @param entitie Entities\r\n   * @param changes State changes\r\n   */\r\n  updateMany(entities: E[], changes: Partial<S>, exclusive = false) {\r\n    if (exclusive === true) {\r\n      return this.updateManyExclusive(entities, changes);\r\n    }\r\n\r\n    entities.forEach((entity: E) => {\r\n      const state = Object.assign({}, this.get(entity), changes);\r\n      this.index.set(this.getKey(entity), state);\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Reversee an entity's state\r\n   * @param entity Entity\r\n   * @param keys State keys to reverse\r\n   */\r\n  reverse(entity: E, keys: string[]) {\r\n    this.reverseMany([entity], keys);\r\n  }\r\n\r\n  /**\r\n   * Reverse many entitie's state\r\n   * @param entitie Entities\r\n   * @param keys State keys to reverse\r\n   */\r\n  reverseMany(entities: E[], keys: string[]) {\r\n    entities.forEach((entity: E) => {\r\n      const currentState = this.get(entity);\r\n      const changes = keys.reduce((acc: {[key: string]: boolean}, key: string) => {\r\n        acc[key] = currentState[key] || false;\r\n        return acc;\r\n      }, {});\r\n      const reversedChanges = this.reverseChanges(changes);\r\n      const state = Object.assign({}, currentState, reversedChanges);\r\n      this.index.set(this.getKey(entity), state);\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Update state of all entities that already have a state. This is not\r\n   * the same as updating the state of all the store's entities.\r\n   * @param changes State\r\n   */\r\n  updateAll(changes: Partial<S>) {\r\n    const allKeys = this.getAllKeys();\r\n    Array.from(allKeys).forEach((key: EntityKey) => {\r\n      const state = Object.assign({}, this.index.get(key), changes);\r\n      this.index.set(key, state);\r\n    });\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * When some state changes are flagged as 'exclusive', reverse\r\n   * the state of all other entities. Changes are reversable when\r\n   * they are boolean.\r\n   * @param entitie Entities\r\n   * @param changes State changes\r\n   */\r\n  private updateManyExclusive(entities: E[], changes: Partial<S>) {\r\n    const reverseChanges = this.reverseChanges(changes);\r\n\r\n    const keys = entities.map((entity: E) => this.getKey(entity));\r\n    const allKeys = new Set(keys.concat(Array.from(this.getAllKeys())));\r\n    allKeys.forEach((key: EntityKey) => {\r\n      const state = this.index.get(key) || {} as S;\r\n      if (keys.indexOf(key) >= 0) {\r\n        this.index.set(key, Object.assign({}, state, changes));\r\n      } else {\r\n        this.index.set(key, Object.assign({}, state, reverseChanges));\r\n      }\r\n    });\r\n\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Compute a 'reversed' version of some state changes.\r\n   * Changes are reversable when they are boolean.\r\n   * @param changes State changes\r\n   * @returns Reversed state changes\r\n   */\r\n  private reverseChanges(changes: Partial<S>): Partial<S> {\r\n    return Object.entries(changes).reduce((reverseChanges: Partial<S>, bunch: [string, any]) => {\r\n      const [changeKey, value] = bunch;\r\n      if (typeof value === typeof true) {\r\n        reverseChanges[changeKey] = !value;\r\n      }\r\n      return reverseChanges;\r\n    }, {});\r\n  }\r\n\r\n  /**\r\n   * Return all the keys in that state and in the store it's bound to, if any.\r\n   * @returns Set of keys\r\n   */\r\n  private getAllKeys(): Set<EntityKey> {\r\n    const storeKeys = this.store ? Array.from(this.store.index.keys()) : [];\r\n    return new Set(Array.from(this.index.keys()).concat(storeKeys));\r\n  }\r\n\r\n  /**\r\n   * Emit 'change' event\r\n   */\r\n  private next() {\r\n    this.change$.next();\r\n  }\r\n\r\n}\r\n","import { BehaviorSubject, Observable, Subscription, combineLatest } from 'rxjs';\r\nimport { debounceTime, map, skip } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport {\r\n  EntityFilterClause,\r\n  EntitySortClause,\r\n  EntityJoinClause\r\n} from './entity.interfaces';\r\n\r\n/**\r\n * An entity view streams entities from an observable source. These entities\r\n * can be filtered or sorted without affecting the source. A view can also\r\n * combine data from multiple sources, joined together.\r\n */\r\nexport class EntityView<E extends object, V extends object = E> {\r\n\r\n  /**\r\n   * Observable stream of values\r\n   */\r\n  readonly values$ = new BehaviorSubject<V[]>([]);\r\n\r\n  /**\r\n   * Whether this view has been lifted\r\n   */\r\n  private lifted = false;\r\n\r\n  /**\r\n   * Join clauses\r\n   */\r\n  private joins: EntityJoinClause[] = [];\r\n\r\n  /**\r\n   * Observable of a filter clause\r\n   */\r\n  private filter$ = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Observable of a sort clause\r\n   */\r\n  private sort$ = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Subscription to the source (and joined sources) values\r\n   */\r\n  private values$$: Subscription;\r\n\r\n  /**\r\n   * Number of entities\r\n   */\r\n  get count(): number { return this.values$.value.length; }\r\n\r\n  /**\r\n   * Whether there are entities in the view\r\n   */\r\n  get empty(): boolean { return this.count === 0; }\r\n\r\n  constructor(private source$: BehaviorSubject<E[]>) {}\r\n\r\n  /**\r\n   * Get all the values\r\n   * @returns Array of values\r\n   */\r\n  all(): V[] {\r\n    return this.values$.value;\r\n  }\r\n\r\n  /**\r\n   * Observe all the values\r\n   * @returns Observable of values\r\n   */\r\n  all$(): BehaviorSubject<V[]> {\r\n    return this.values$;\r\n  }\r\n\r\n  /**\r\n   * Get the first value that respects a criteria\r\n   * @returns A value\r\n   */\r\n  firstBy(clause: EntityFilterClause<V>): V {\r\n    return this.values$.value.find(clause);\r\n  }\r\n\r\n  /**\r\n   * Observe the first value that respects a criteria\r\n   * @returns Observable of a value\r\n   */\r\n  firstBy$(clause: EntityFilterClause<V>): Observable<V> {\r\n    return this.values$.pipe(map((values: V[]) => values.find(clause)));\r\n  }\r\n\r\n  /**\r\n   * Get all the values that respect a criteria\r\n   * @returns Array of values\r\n   */\r\n  manyBy(clause: EntityFilterClause<V>): V[] {\r\n    return this.values$.value.filter(clause);\r\n  }\r\n\r\n  /**\r\n   * Observe all the values that respect a criteria\r\n   * @returns Observable of values\r\n   */\r\n  manyBy$(clause: EntityFilterClause<V>): Observable<V[]> {\r\n    return this.values$.pipe(map((values: V[]) => values.filter(clause)));\r\n  }\r\n\r\n  /**\r\n   * Clear the filter and sort and unsubscribe from the source\r\n   */\r\n  clear() {\r\n    this.filter(undefined);\r\n    this.sort(undefined);\r\n  }\r\n\r\n  destroy() {\r\n    if (this.values$$ !== undefined) {\r\n      this.values$$.unsubscribe();\r\n    }\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Join another source to the stream (chainable)\r\n   * @param clause Join clause\r\n   * @returns The view\r\n   */\r\n  join(clause: EntityJoinClause): EntityView<E, V> {\r\n    if (this.lifted === true) {\r\n      throw new Error('This view has already been lifted, therefore, no join is allowed.');\r\n    }\r\n    this.joins.push(clause);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filter values (chainable)\r\n   * @param clause Filter clause\r\n   * @returns The view\r\n   */\r\n  filter(clause: EntityFilterClause<V>): EntityView<E, V> {\r\n    this.filter$.next(clause);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sort values (chainable)\r\n   * @param clauseSort clause\r\n   * @returns The view\r\n   */\r\n  sort(clause: EntitySortClause<V>): EntityView<E, V> {\r\n    this.sort$.next(clause);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Create the final observable\r\n   * @returns Observable\r\n   */\r\n  lift() {\r\n    this.lifted = true;\r\n    const source$ = this.joins.length > 0 ? this.liftJoinedSource() : this.liftSource();\r\n    this.values$$ = combineLatest(source$, this.filter$, this.sort$)\r\n      .pipe(skip(1), debounceTime(50))\r\n      .subscribe((bunch: [V[], EntityFilterClause, EntitySortClause]) => {\r\n        const [values, filter, sort] = bunch;\r\n        this.values$.next(this.processValues(values, filter, sort));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Create the source observable when no joins are defined\r\n   * @returns Observable\r\n   */\r\n  private liftSource(): Observable<V[]> {\r\n    return this.source$ as any as Observable<V[]>;\r\n  }\r\n\r\n  /**\r\n   * Create the source observable when joins are defined\r\n   * @returns Observable\r\n   */\r\n  private liftJoinedSource(): Observable<V[]> {\r\n    const sources$ = [this.source$, combineLatest(\r\n      ...this.joins.map((join: EntityJoinClause) => join.source)\r\n    )];\r\n\r\n    return combineLatest(...sources$)\r\n      .pipe(\r\n        map((bunch: [E[], any[]]) => {\r\n          const [entities, joinData] = bunch;\r\n          return entities.reduce((values: V[], entity: E) => {\r\n            const value = this.computeJoinedValue(entity, joinData);\r\n            if (value !== undefined) {\r\n              values.push(value);\r\n            }\r\n            return values;\r\n          }, []);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Apply joins to a source's entity and return the final value\r\n   * @returns Final value\r\n   */\r\n  private computeJoinedValue(entity: E, joinData: any[]): V | undefined {\r\n    let value = entity as Partial<V>;\r\n    let joinIndex = 0;\r\n    while (value !== undefined && joinIndex < this.joins.length) {\r\n      value = this.joins[joinIndex].reduce(value, joinData[joinIndex]);\r\n      joinIndex += 1;\r\n    }\r\n    return value as V;\r\n  }\r\n\r\n  /**\r\n   * Filter and sort values before streaming them\r\n   * @param values Values\r\n   * @param filter Filter clause\r\n   * @param sort Sort clause\r\n   * @returns Filtered and sorted values\r\n   */\r\n  private processValues(values: V[], filter: EntityFilterClause, sort: EntitySortClause): V[] {\r\n    values = values.slice(0);\r\n    values = this.filterValues(values, filter);\r\n    values = this.sortValues(values, sort);\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Filter values\r\n   * @param values Values\r\n   * @param filter Filter clause\r\n   * @returns Filtered values\r\n   */\r\n  private filterValues(values: V[], clause: EntityFilterClause): V[] {\r\n    if (clause === undefined) { return values; }\r\n    return values.filter((value: V) => clause(value));\r\n  }\r\n\r\n  /**\r\n   * Sort values\r\n   * @param values Values\r\n   * @param sort Sort clause\r\n   * @returns Sorted values\r\n   */\r\n  private sortValues(values: V[], clause: EntitySortClause): V[] {\r\n    if (clause === undefined) { return values; }\r\n    return values.sort((v1: V, v2: V) => {\r\n      return ObjectUtils.naturalCompare(\r\n        clause.valueAccessor(v1),\r\n        clause.valueAccessor(v2),\r\n        clause.direction\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\n\r\nimport { EntityStateManager } from './state';\r\nimport { EntityView } from './view';\r\nimport { EntityKey, EntityState, EntityRecord, EntityStoreOptions } from './entity.interfaces';\r\nimport { getEntityId, getEntityProperty } from './entity.utils';\r\n\r\n/**\r\n * An entity store class holds any number of entities\r\n * as well as their state. It can be observed, filtered and sorted and\r\n * provides methods to insert, update or delete entities.\r\n */\r\nexport class EntityStore<E extends object, S extends EntityState = EntityState> {\r\n\r\n  /**\r\n   * Observable of the raw entities\r\n   */\r\n  readonly entities$ = new BehaviorSubject<E[]>([]);\r\n\r\n  /**\r\n   * Number of entities\r\n   */\r\n  readonly count$ = new BehaviorSubject<number>(0);\r\n  get count(): number { return this.count$.value; }\r\n\r\n  /**\r\n   * Whether the store is empty\r\n   */\r\n  readonly empty$ = new BehaviorSubject<boolean>(true);\r\n  get empty(): boolean { return this.empty$.value; }\r\n\r\n  /**\r\n   * Entity store state\r\n   */\r\n  readonly state: EntityStateManager<E, S>;\r\n\r\n  /**\r\n   * View of all the entities\r\n   */\r\n  readonly view: EntityView<E>;\r\n\r\n  /**\r\n   * View of all the entities and their state\r\n   */\r\n  readonly stateView: EntityView<E, EntityRecord<E, S>>;\r\n\r\n  /**\r\n   * Method to get an entity's id\r\n   */\r\n  readonly getKey: (E) => EntityKey;\r\n\r\n  /**\r\n   * Method to get an entity's named property\r\n   */\r\n  readonly getProperty: (E, prop: string) => any;\r\n\r\n  /**\r\n   * Store index\r\n   */\r\n  get index(): Map<EntityKey, E> { return this._index; }\r\n  private _index: Map<EntityKey, E>;\r\n\r\n  /**\r\n   * Store index\r\n   */\r\n  get pristine(): boolean { return this._pristine; }\r\n  private _pristine: boolean = true;\r\n\r\n  constructor(entities: E[], options: EntityStoreOptions = {}) {\r\n    this.getKey = options.getKey ? options.getKey : getEntityId;\r\n    this.getProperty = options.getProperty ? options.getProperty : getEntityProperty;\r\n\r\n    this.state = new EntityStateManager<E, S>({store: this});\r\n    this.view = new EntityView<E>(this.entities$);\r\n    this.stateView = new EntityView<E, EntityRecord<E, S>>(this.view.all$()).join({\r\n      source: this.state.change$,\r\n      reduce: (entity: E): EntityRecord<E, S> => {\r\n        return {entity, state: this.state.get(entity)};\r\n      }\r\n    });\r\n\r\n    this.view.lift();\r\n    this.stateView.lift();\r\n\r\n    if (entities.length > 0) {\r\n      this.load(entities);\r\n    } else {\r\n      this._index = this.generateIndex(entities);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an entity from the store by key\r\n   * @param key Key\r\n   * @returns Entity\r\n   */\r\n  get(key: EntityKey): E {\r\n    return this.index.get(key);\r\n  }\r\n\r\n  /**\r\n   * Get all entities in the store\r\n   * @returns Array of entities\r\n   */\r\n  all(): E[] {\r\n    return this.entities$.value;\r\n  }\r\n\r\n  /**\r\n   * Set this store's entities\r\n   * @param entities Entities\r\n   */\r\n  load(entities: E[], pristine: boolean = true) {\r\n    this._index = this.generateIndex(entities);\r\n    this._pristine = pristine;\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Clear the store's entities but keep the state and views intact.\r\n   * Views won't return any data but future data will be subject to the\r\n   * current views filter and sort\r\n   */\r\n  softClear() {\r\n    if (this.index && this.index.size > 0) {\r\n      this.index.clear();\r\n      this._pristine = true;\r\n      this.next();\r\n    } else if (this.index) {\r\n      this.updateCount();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the store's entities, state and views\r\n   */\r\n  clear() {\r\n    this.stateView.clear();\r\n    this.view.clear();\r\n    this.state.clear();\r\n    this.softClear();\r\n  }\r\n\r\n  destroy() {\r\n    this.stateView.destroy();\r\n    this.view.destroy();\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Insert an entity into the store\r\n   * @param entity Entity\r\n   */\r\n  insert(entity: E) {\r\n    this.insertMany([entity]);\r\n  }\r\n\r\n  /**\r\n   * Insert many entities into the store\r\n   * @param entities Entities\r\n   */\r\n  insertMany(entities: E[]) {\r\n    entities.forEach((entity: E) => this.index.set(this.getKey(entity), entity));\r\n    this._pristine = false;\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Update or insert an entity into the store\r\n   * @param entity Entity\r\n   */\r\n  update(entity: E) {\r\n    this.updateMany([entity]);\r\n  }\r\n\r\n  /**\r\n   * Update or insert many entities into the store\r\n   * @param entities Entities\r\n   */\r\n  updateMany(entities: E[]) {\r\n    entities.forEach((entity: E) => this.index.set(this.getKey(entity), entity));\r\n    this._pristine = false;\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Delete an entity from the store\r\n   * @param entity Entity\r\n   */\r\n  delete(entity: E) {\r\n    this.deleteMany([entity]);\r\n  }\r\n\r\n  /**\r\n   * Delete many entities from the store\r\n   * @param entities Entities\r\n   */\r\n  deleteMany(entities: E[]) {\r\n    entities.forEach((entity: E) => this.index.delete(this.getKey(entity)));\r\n    this._pristine = false;\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Generate a complete index of all the entities\r\n   * @param entities Entities\r\n   * @returns Index\r\n   */\r\n  private generateIndex(entities: E[]): Map<EntityKey, E> {\r\n    const entries = entities.map((entity: E) => [this.getKey(entity), entity]);\r\n    return new Map(entries as [EntityKey, E][]);\r\n  }\r\n\r\n  /**\r\n   * Push the index's entities into the entities$ observable\r\n   */\r\n  private next() {\r\n    this.entities$.next(Array.from(this.index.values()));\r\n    this.updateCount();\r\n  }\r\n\r\n  /**\r\n   * Update the store's count and empty\r\n   */\r\n  private updateCount() {\r\n    const count = this.index.size;\r\n    const empty = count === 0;\r\n    this.count$.next(count);\r\n    this.empty$.next(empty);\r\n  }\r\n\r\n}\r\n","import { ChangeDetectorRef } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\nimport { EntityKey } from './entity.interfaces';\r\n\r\nimport { EntityStore } from './store';\r\n\r\n/**\r\n * This class is used to synchronize a component's changes\r\n * detection with an EntityStore changes. For example, it is frequent\r\n * to have a component subscribe to a store's selected entity and, at the same time,\r\n * this component provides a way to select an entity with, let's say, a click.\r\n *\r\n * This class automatically handles those case and triggers the compoent's\r\n * change detection when needed.\r\n *\r\n * Note: If the component observes the store's stateView, a workspace is\r\n * probably not required because the stateView catches any changes to the\r\n * entities and their state.\r\n */\r\nexport class EntityStoreWatcher<E extends object> {\r\n\r\n  /**\r\n   * Component change detector\r\n   */\r\n  private cdRef: ChangeDetectorRef;\r\n\r\n  /**\r\n   * Entity store\r\n   */\r\n  private store: EntityStore<E>;\r\n\r\n  /**\r\n   * Component inner state\r\n   */\r\n  private innerStateIndex = new Map<EntityKey, {[key: string]: any}>();\r\n\r\n  /**\r\n   * Subscription to the store's entities\r\n   */\r\n  private entities$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to the store's state\r\n   */\r\n  private state$$: Subscription;\r\n\r\n  constructor(store?: EntityStore<E>, cdRef?: ChangeDetectorRef) {\r\n    this.setChangeDetector(cdRef);\r\n    this.setStore(store);\r\n  }\r\n\r\n  destroy() {\r\n    this.setChangeDetector(undefined);\r\n    this.setStore(undefined);\r\n  }\r\n\r\n  /**\r\n   * Bind this workspace to a store and start watching for changes\r\n   * @param store Entity store\r\n   */\r\n  setStore(store?: EntityStore<E>) {\r\n    if (store === undefined) {\r\n      this.teardownObservers();\r\n      this.innerStateIndex.clear();\r\n      this.store = undefined;\r\n      return;\r\n    }\r\n\r\n    this.setStore(undefined);\r\n    this.store = store;\r\n    this.setupObservers();\r\n    this.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Bind this workspace to a component's change detector\r\n   * @param cdRef Change detector\r\n   */\r\n  setChangeDetector(cdRef?: ChangeDetectorRef) {\r\n    this.cdRef = cdRef;\r\n  }\r\n\r\n  /**\r\n   * Set up observers on a store's entities and their state\r\n   * @param store Entity store\r\n   */\r\n  private setupObservers() {\r\n    this.teardownObservers();\r\n\r\n    this.entities$$ = this.store.entities$\r\n      .subscribe((entities: E[]) => this.onEntitiesChange(entities));\r\n\r\n    this.state$$ = this.store.state.change$\r\n      .pipe(skip(1))\r\n      .subscribe(() => this.onStateChange());\r\n  }\r\n\r\n  /**\r\n   * Teardown store observers\r\n   */\r\n  private teardownObservers() {\r\n    if (this.entities$$ !== undefined) {\r\n      this.entities$$.unsubscribe();\r\n    }\r\n    if (this.state$$ !== undefined) {\r\n      this.state$$.unsubscribe();\r\n    }\r\n    this.entities$$ = undefined;\r\n    this.state$$ = undefined;\r\n  }\r\n\r\n  /**\r\n   * When the entities change, always trigger the changes detection\r\n   */\r\n  private onEntitiesChange(entities: E[]) {\r\n    this.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * When the entities state change, trigger the change detection\r\n   * only if the component has not handled these changes yet. For example,\r\n   * the component might have initiated thoses changes itself.\r\n   */\r\n  private onStateChange() {\r\n    let changesDetected = false;\r\n    const storeIndex = this.store.state.index;\r\n    const innerIndex = this.innerStateIndex;\r\n\r\n    if (storeIndex.size !== innerIndex.size) {\r\n      changesDetected = this.detectChanges();\r\n    }\r\n\r\n    const storeKeys = Array.from(storeIndex.keys());\r\n    for (const key of storeKeys) {\r\n      const storeValue = storeIndex.get(key);\r\n      const innerValue = innerIndex.get(key);\r\n      if (changesDetected === false) {\r\n        if (innerValue === undefined) {\r\n          changesDetected = this.detectChanges();\r\n        } else if (!ObjectUtils.objectsAreEquivalent(storeValue, innerValue)) {\r\n          changesDetected = this.detectChanges();\r\n        }\r\n      }\r\n\r\n      this.innerStateIndex.set(key, Object.assign({}, storeValue));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger the change detection of the workspace is bound to a change detector\r\n   */\r\n  private detectChanges() {\r\n    if (this.cdRef !== undefined) {\r\n      this.cdRef.detectChanges();\r\n    }\r\n    return true;\r\n  }\r\n\r\n}\r\n","import { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nimport {\r\n  EntityKey,\r\n  EntityTransactionOptions,\r\n  EntityOperation,\r\n  EntityOperationState\r\n} from './entity.interfaces';\r\nimport { EntityStore } from './store';\r\nimport { EntityOperationType } from './entity.enums';\r\nimport { getEntityId } from './entity.utils';\r\n\r\nexport type EntityTransactionCommitHandler = (\r\n  transaction: EntityTransaction,\r\n  operations: EntityOperation[]\r\n) => Observable<any>;\r\n\r\n/**\r\n * This class holds a reference to the insert, update and delete\r\n * operations performed on a store. This is useful to commit\r\n * these operations in a single pass or to cancel them.\r\n */\r\nexport class EntityTransaction {\r\n\r\n  /**\r\n   * Store holding the operations on another store\r\n   */\r\n  readonly operations: EntityStore<EntityOperation, EntityOperationState>;\r\n\r\n  /**\r\n   * Method to get an entity's id\r\n   */\r\n  readonly getKey: (E) => EntityKey;\r\n\r\n  /**\r\n   * Whether there are pending operations\r\n   */\r\n  get empty(): boolean { return this.operations.entities$.value.length === 0; }\r\n\r\n  /**\r\n   * Whether thise store is in commit phase\r\n   */\r\n  get inCommitPhase(): boolean { return this._inCommitPhase; }\r\n  private _inCommitPhase = false;\r\n\r\n  constructor(options: EntityTransactionOptions = {}) {\r\n    this.getKey = options.getKey ? options.getKey : getEntityId;\r\n    this.operations = new EntityStore<EntityOperation, EntityOperationState>([], {\r\n      getKey: (operation: EntityOperation) => operation.key\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.operations.destroy();\r\n  }\r\n\r\n  /**\r\n   * Insert an entity into a store. If no store is specified, an insert\r\n   * operation is still created but the transaction won't add the new\r\n   * entity to the store.\r\n   * @param current The entity to insert\r\n   * @param store Optional: The store to insert the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  insert(current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    const existingOperation = this.getOperationByEntity(current);\r\n    if (existingOperation !== undefined) {\r\n      this.removeOperation(existingOperation);\r\n    }\r\n\r\n    this.doInsert(current, store, meta);\r\n  }\r\n\r\n  /**\r\n   * Update an entity in a store. If no store is specified, an update\r\n   * operation is still created but the transaction won't update the\r\n   * entity into the store.\r\n   * @param previous The entity before update\r\n   * @param current The entity after update\r\n   * @param store Optional: The store to update the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  update(previous: object, current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    const existingOperation = this.getOperationByEntity(current);\r\n    if (existingOperation !== undefined) {\r\n      this.removeOperation(existingOperation);\r\n      if (existingOperation.type === EntityOperationType.Insert) {\r\n        this.doInsert(current, store, meta);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.doUpdate(previous, current, store, meta);\r\n  }\r\n\r\n  /**\r\n   * Delete an entity from a store. If no store is specified, a delete\r\n   * operation is still created but the transaction won't remove the\r\n   * entity from the store.\r\n   * @param previous The entity before delete\r\n   * @param store Optional: The store to delete the entity from\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  delete(previous: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    const existingOperation = this.getOperationByEntity(previous);\r\n    if (existingOperation !== undefined) {\r\n      this.removeOperation(existingOperation);\r\n      if (existingOperation.type === EntityOperationType.Insert) {\r\n        if (store !== undefined) {\r\n          store.delete(previous);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.doDelete(previous, store, meta);\r\n  }\r\n\r\n  /**\r\n   * Commit operations the transaction. This method doesn't do much\r\n   * in itself. The handler it receives does the hard work and it's\r\n   * implementation is left to the caller. This method simply wraps\r\n   * the handler into an error catching mechanism to update\r\n   * the transaction afterward. The caller needs to subscribe to this\r\n   * method's output (observable) for the commit to be performed.\r\n   * @param operations Operations to commit\r\n   * @param handler Function that handles the commit operation\r\n   * @returns The handler output (observable)\r\n   */\r\n  commit(operations: EntityOperation[], handler: EntityTransactionCommitHandler): Observable<any> {\r\n    this._inCommitPhase = true;\r\n\r\n    return handler(this, operations)\r\n      .pipe(\r\n        catchError(() => of(new Error())),\r\n        tap((result: any) => {\r\n          if (result instanceof Error) {\r\n            this.onCommitError(operations);\r\n          } else {\r\n            this.onCommitSuccess(operations);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Commit all the operations of the transaction.\r\n   * @param handler Function that handles the commit operation\r\n   * @returns The handler output (observable)\r\n   */\r\n  commitAll(handler: EntityTransactionCommitHandler): Observable<any> {\r\n    const operations = this.getOperationsInCommit();\r\n    return this.commit(operations, handler);\r\n  }\r\n\r\n  /**\r\n   * Rollback this transaction\r\n   */\r\n  rollback() {\r\n    this.rollbackOperations(this.operations.all());\r\n  }\r\n\r\n  /**\r\n   * Rollback specific operations\r\n   */\r\n  rollbackOperations(operations: EntityOperation[]) {\r\n    this.checkInCommitPhase();\r\n\r\n    const operationsFactory = () => new Map([\r\n      [EntityOperationType.Delete, []],\r\n      [EntityOperationType.Update, []],\r\n      [EntityOperationType.Insert, []]\r\n    ]);\r\n    const storesOperations = new Map();\r\n\r\n    // Group operations by store and by operation type.\r\n    // Grouping operations allows us to revert them in bacth, thus, triggering\r\n    // observables only one per operation type.\r\n    for (const operation of operations) {\r\n      const store = operation.store;\r\n      if (operation.store === undefined) { continue; }\r\n\r\n      let storeOperations = storesOperations.get(store);\r\n      if (storeOperations === undefined) {\r\n        storeOperations = operationsFactory();\r\n        storesOperations.set(store, storeOperations);\r\n      }\r\n      storeOperations.get(operation.type).push(operation);\r\n    }\r\n\r\n    Array.from(storesOperations.keys()).forEach((store: EntityStore<object>) => {\r\n      const storeOperations = storesOperations.get(store);\r\n\r\n      const deletes = storeOperations.get(EntityOperationType.Delete);\r\n      store.insertMany(deletes.map((_delete: EntityOperation) => _delete.previous));\r\n\r\n      const updates = storeOperations.get(EntityOperationType.Update);\r\n      store.updateMany(updates.map((_update: EntityOperation) => _update.previous));\r\n\r\n      const inserts = storeOperations.get(EntityOperationType.Insert);\r\n      store.deleteMany(inserts.map((_insert: EntityOperation) => _insert.current));\r\n    });\r\n\r\n    this.operations.deleteMany(operations);\r\n    this._inCommitPhase = false;\r\n  }\r\n\r\n  /**\r\n   * Clear this transaction\r\n   * @todo Raise event and synchronize stores?\r\n   */\r\n  clear() {\r\n    this.operations.clear();\r\n    this._inCommitPhase = false;\r\n  }\r\n\r\n  /**\r\n   * Merge another transaction in this one\r\n   * @param transaction Another transaction\r\n   */\r\n  mergeTransaction(transaction: EntityTransaction) {\r\n    this.checkInCommitPhase();\r\n\r\n    const operations = transaction.operations.all();\r\n    operations.forEach((operation: EntityOperation) => {\r\n      this.addOperation(operation);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create an insert operation and add an entity to the store\r\n   * @param current The entity to insert\r\n   * @param store Optional: The store to insert the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  private doInsert(current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    this.addOperation({\r\n      key: this.getKey(current),\r\n      type: EntityOperationType.Insert,\r\n      previous: undefined,\r\n      current,\r\n      store,\r\n      meta\r\n    });\r\n\r\n    if (store !== undefined) {\r\n      store.insert(current);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an update operation and update an entity into the store\r\n   * @param previous The entity before update\r\n   * @param current The entity after update\r\n   * @param store Optional: The store to update the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  private doUpdate(previous: object, current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    this.addOperation({\r\n      key: this.getKey(current),\r\n      type: EntityOperationType.Update,\r\n      previous,\r\n      current,\r\n      store,\r\n      meta\r\n    });\r\n\r\n    if (store !== undefined) {\r\n      store.update(current);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a delete operation and delete an entity from the store\r\n   * @param previous The entity before delete\r\n   * @param store Optional: The store to delete the entity from\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\r\n  private doDelete(previous: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\r\n    this.addOperation({\r\n      key: this.getKey(previous),\r\n      type: EntityOperationType.Delete,\r\n      previous,\r\n      current: undefined,\r\n      store,\r\n      meta\r\n    });\r\n\r\n    if (store !== undefined) {\r\n      store.delete(previous);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove committed operations from store\r\n   * @param operations Commited operations\r\n   * @todo Raise event and synchronize stores?\r\n   */\r\n  private resolveOperations(operations: EntityOperation[]) {\r\n    this.operations.deleteMany(operations);\r\n  }\r\n\r\n  /**\r\n   * On commit success, resolve commited operations and exit commit phase\r\n   * @param operations Commited operations\r\n   */\r\n  private onCommitSuccess(operations: EntityOperation[]) {\r\n    this.resolveOperations(operations);\r\n    this._inCommitPhase = false;\r\n  }\r\n\r\n  /**\r\n   * On commit error, abort transaction\r\n   * @param operations Commited operations\r\n   */\r\n  private onCommitError(operations: EntityOperation[]) {\r\n    this._inCommitPhase = false;\r\n  }\r\n\r\n  /**\r\n   * Add an operation to the operations store\r\n   * @param operation Operation to add\r\n   */\r\n  private addOperation(operation: EntityOperation) {\r\n    this.checkInCommitPhase();\r\n\r\n    this.operations.insert(operation);\r\n    this.operations.state.update(operation, {added: true});\r\n  }\r\n\r\n  /**\r\n   * Remove an operation from the operations store\r\n   * @param operation Operation to remove\r\n   */\r\n  private removeOperation(operation: EntityOperation) {\r\n    this.checkInCommitPhase();\r\n\r\n    this.operations.delete(operation);\r\n    this.operations.state.update(operation, {added: false});\r\n  }\r\n\r\n  /**\r\n   * Get the any existing operation an entity\r\n   * @param entity Entity\r\n   * @returns Either an insert, update or delete operation\r\n   */\r\n  private getOperationByEntity(entity: object): EntityOperation {\r\n    return this.operations.get(this.getKey(entity));\r\n  }\r\n\r\n  /**\r\n   * Get all the operations to commit\r\n   * @returns Operations to commit\r\n   */\r\n  private getOperationsInCommit(): EntityOperation[] {\r\n    return this.operations.stateView\r\n      .manyBy((value: {entity: EntityOperation, state: EntityOperationState}) => {\r\n        return value.state.added === true;\r\n      })\r\n      .map((value: {entity: EntityOperation, state: EntityOperationState}) => value.entity);\r\n  }\r\n\r\n  /**\r\n   * Check if the transaction is in the commit phase and throw an error if it is\r\n   */\r\n  private checkInCommitPhase() {\r\n    if (this.inCommitPhase === true) {\r\n      throw new Error('This transaction is in the commit phase. Cannot complete this operation.');\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport { EntityRecord } from '../shared/entity.interfaces';\r\nimport { EntityStore } from '../shared/store';\r\nimport { EntityStoreWatcher } from '../shared/watcher';\r\nimport { getEntityTitle } from '../shared/entity.utils';\r\n\r\n@Component({\r\n  selector: 'igo-entity-selector',\r\n  templateUrl: './entity-selector.component.html',\r\n  styleUrls: ['./entity-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EntitySelectorComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * The selected entity\r\n   * @internal\r\n   */\r\n  selected$ = new BehaviorSubject<object>(undefined);\r\n\r\n  /**\r\n   * Subscription to the selected entity\r\n   */\r\n  private selected$$: Subscription;\r\n\r\n  /**\r\n   * Store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<object>;\r\n\r\n  /**\r\n   * Entity store\r\n   */\r\n  @Input() store: EntityStore<object>;\r\n\r\n  /**\r\n   * Wheter selecting many entities is allowed\r\n   */\r\n  @Input() many: boolean = false;\r\n\r\n  /**\r\n   * Title accessor\r\n   */\r\n  @Input() titleAccessor: (object) => string = getEntityTitle;\r\n\r\n  /**\r\n   * Text to display when nothing is selected\r\n   */\r\n  @Input() emptyText: string = undefined;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Event emitted when the selection changes\r\n   */\r\n  @Output() selectedChange = new EventEmitter<{\r\n    selected: boolean;\r\n    value: object | object[];\r\n  }>();\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Create a store watcher and subscribe to the selected entity\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n    this.selected$$ = this.store.stateView\r\n      .manyBy$((record: EntityRecord<object>) => record.state.selected === true)\r\n      .subscribe((records: EntityRecord<object>[]) => {\r\n        const entities = records.map((record: EntityRecord<object>) => record.entity);\r\n        if (this.many === true) {\r\n          this.selected$.next(entities);\r\n        } else {\r\n          const entity = entities.length > 0 ? entities[0] : undefined;\r\n          this.selected$.next(entity);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the selected entity and destroy the store watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n    this.selected$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * On selection change, update the store's state and emit an event\r\n   * @internal\r\n   */\r\n  onSelectionChange(event: {value: object | undefined}) {\r\n    const entities = event.value instanceof Array ? event.value : [event.value];\r\n    if (entities.length === 0) {\r\n      this.store.state.updateAll({selected: false});\r\n    } else {\r\n      this.store.state.updateMany(entities, {selected: true}, true);\r\n    }\r\n\r\n    this.selectedChange.emit({selected: true, value: event.value});\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SimpleChanges,\r\n  OnInit,\r\n  OnDestroy,\r\n  OnChanges\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\nimport {\r\n  EntityRecord,\r\n  EntityStore,\r\n  EntityStoreWatcher,\r\n  EntityTableTemplate,\r\n  EntityTableColumn,\r\n  EntityTableColumnRenderer,\r\n  EntityTableSelectionState,\r\n  EntityTableScrollBehavior\r\n} from '../shared';\r\n\r\n@Component({\r\n  selector: 'igo-entity-table',\r\n  templateUrl: './entity-table.component.html',\r\n  styleUrls: ['./entity-table.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EntityTableComponent implements OnInit, OnDestroy, OnChanges  {\r\n\r\n  /**\r\n   * Reference to the column renderer types\r\n   * @internal\r\n   */\r\n  entityTableColumnRenderer = EntityTableColumnRenderer;\r\n\r\n  /**\r\n   * Reference to the selection states\r\n   * @internal\r\n   */\r\n  entityTableSelectionState = EntityTableSelectionState;\r\n\r\n  /**\r\n   * Observable of the selection,s state\r\n   * @internal\r\n   */\r\n  selectionState$: BehaviorSubject<EntityTableSelectionState> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Entity store watcher\r\n   */\r\n  private watcher: EntityStoreWatcher<object>;\r\n\r\n  /**\r\n   * Subscription to the store's selection\r\n   */\r\n  private selection$$: Subscription;\r\n\r\n  /**\r\n   * Entity store\r\n   */\r\n  @Input() store: EntityStore<object>;\r\n\r\n  /**\r\n   * Table template\r\n   */\r\n  @Input() template: EntityTableTemplate;\r\n\r\n  /**\r\n   * Scroll behavior on selection\r\n   */\r\n  @Input()\r\n  scrollBehavior: EntityTableScrollBehavior = EntityTableScrollBehavior.Auto;\r\n\r\n  /**\r\n   * Event emitted when an entity (row) is clicked\r\n   */\r\n  @Output() entityClick = new EventEmitter<object>();\r\n\r\n  /**\r\n   * Event emitted when an entity (row) is selected\r\n   */\r\n  @Output() entitySelectChange = new EventEmitter<{\r\n    added: object[];\r\n  }>();\r\n\r\n  /**\r\n   * Table headers\r\n   * @internal\r\n   */\r\n  get headers(): string[] {\r\n    let columns = this.template.columns\r\n      .filter((column: EntityTableColumn) => column.visible !== false)\r\n      .map((column: EntityTableColumn) => column.name);\r\n\r\n    if (this.selectionCheckbox === true) {\r\n      columns = ['selectionCheckbox'].concat(columns);\r\n    }\r\n\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Data source consumable by the underlying material table\r\n   * @internal\r\n   */\r\n  get dataSource(): BehaviorSubject<object[]> { return this.store.view.all$(); }\r\n\r\n  /**\r\n   * Whether selection is supported\r\n   * @internal\r\n   */\r\n  get selection(): boolean { return this.template.selection || false; }\r\n\r\n  /**\r\n   * Whether a selection checkbox should be displayed\r\n   * @internal\r\n   */\r\n  get selectionCheckbox(): boolean { return this.template.selectionCheckbox || false; }\r\n\r\n  /**\r\n   * Whether selection many entities should eb supported\r\n   * @internal\r\n   */\r\n  get selectMany(): boolean { return this.template.selectMany || false; }\r\n\r\n  /**\r\n   * Whether selection many entities should eb supported\r\n   * @internal\r\n   */\r\n  get fixedHeader(): boolean { return this.template.fixedHeader === undefined ? true : this.template.fixedHeader; }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   * Track the selection state to properly display the selection checkboxes\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.selection$$ = this.store.stateView\r\n      .manyBy$((record: EntityRecord<object>) => record.state.selected === true)\r\n      .subscribe((records: EntityRecord<object>[]) => {\r\n        this.selectionState$.next(this.computeSelectionState(records));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * When the store change, create a new watcher\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const store = changes.store;\r\n    if (store && store.currentValue !== store.previousValue) {\r\n      if (this.watcher !== undefined) {\r\n        this.watcher.destroy();\r\n      }\r\n      this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind the store watcher\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.watcher !== undefined) {\r\n      this.watcher.destroy();\r\n    }\r\n    this.selection$$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Trigger a refresh of thre table. This can be useful when\r\n   * the data source doesn't emit a new value but for some reason\r\n   * the records need an update.\r\n   * @internal\r\n   */\r\n  refresh() {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * On sort, sort the store\r\n   * @param event Sort event\r\n   * @internal\r\n   */\r\n  onSort(event: {active: string, direction: string}) {\r\n    const direction = event.direction;\r\n    const column = this.template.columns\r\n      .find((c: EntityTableColumn) => c.name === event.active);\r\n\r\n    if (direction === 'asc' || direction === 'desc') {\r\n      this.store.view.sort({\r\n        valueAccessor: (entity: object) => this.getValue(entity, column),\r\n        direction\r\n      });\r\n    } else {\r\n      this.store.view.sort(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When an entity is clicked, emit an event\r\n   * @param entity Entity\r\n   * @internal\r\n   */\r\n  onRowClick(entity: object) {\r\n    this.entityClick.emit(entity);\r\n  }\r\n\r\n  /**\r\n   * When an entity is selected, select it in the store and emit an event. Even if\r\n   * \"many\" is set to true, this method always select a single, exclusive row. Selecting\r\n   * multiple rows should be achieved by using the checkboxes.\r\n   * @param entity Entity\r\n   * @internal\r\n   */\r\n  onRowSelect(entity: object) {\r\n    if (this.selection === false) { return; }\r\n\r\n    // Selecting a\r\n    this.store.state.update(entity, {selected: true}, true);\r\n    this.entitySelectChange.emit({added: [entity]});\r\n  }\r\n\r\n  /**\r\n   * Select or unselect all rows at once. On select, emit an event.\r\n   * @param toggle Select or unselect\r\n   * @internal\r\n   */\r\n  onToggleRows(toggle: boolean) {\r\n    if (this.selection === false) { return; }\r\n\r\n    this.store.state.updateAll({selected: toggle});\r\n    if (toggle === true) {\r\n      this.entitySelectChange.emit({added: [this.store.view.all()]});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When an entity is toggled, select or unselect it in the store. On select,\r\n   * emit an event.\r\n   * @param toggle Select or unselect\r\n   * @param entity Entity\r\n   * @internal\r\n   */\r\n  onToggleRow(toggle: boolean, entity: object) {\r\n    if (this.selection === false) { return; }\r\n\r\n    const exclusive = toggle === true && !this.selectMany;\r\n    this.store.state.update(entity, {selected: toggle}, exclusive);\r\n    if (toggle === true) {\r\n      this.entitySelectChange.emit({added: [entity]});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute the selection state\r\n   * @returns Whether all, some or no rows are selected\r\n   * @internal\r\n   */\r\n  private computeSelectionState(selectedRecords: EntityRecord<object>[]): EntityTableSelectionState {\r\n    const states = EntityTableSelectionState;\r\n    const selectionCount = selectedRecords.length;\r\n    return selectionCount === 0 ?\r\n      states.None :\r\n      (selectionCount === this.store.view.count ? states.All : states.Some);\r\n  }\r\n\r\n  /**\r\n   * Whether a column is sortable\r\n   * @param column Column\r\n   * @returns True if a column is sortable\r\n   * @internal\r\n   */\r\n  columnIsSortable(column: EntityTableColumn): boolean {\r\n    let sortable = column.sort;\r\n    if (sortable === undefined) {\r\n      sortable = this.template.sort === undefined ? false : this.template.sort;\r\n    }\r\n    return sortable;\r\n  }\r\n\r\n  /**\r\n   * Whether a row is should be selected based on the underlying entity state\r\n   * @param entity Entity\r\n   * @returns True if a row should be selected\r\n   * @internal\r\n   */\r\n  rowIsSelected(entity: object): boolean {\r\n    const state = this.store.state.get(entity);\r\n    return state.selected ? state.selected : false;\r\n  }\r\n\r\n  /**\r\n   * Method to access an entity's values\r\n   * @param entity Entity\r\n   * @param column Column\r\n   * @returns Any value\r\n   * @internal\r\n   */\r\n  getValue(entity: object, column: EntityTableColumn): any {\r\n    if (column.valueAccessor !== undefined) {\r\n      return column.valueAccessor(entity);\r\n    }\r\n    if (this.template.valueAccessor !== undefined) {\r\n      return this.template.valueAccessor(entity, column.name);\r\n    }\r\n    return this.store.getProperty(entity, column.name);\r\n  }\r\n\r\n  /**\r\n   * Return the type of renderer of a column\r\n   * @param column Column\r\n   * @returns Renderer type\r\n   * @internal\r\n   */\r\n  getColumnRenderer(column: EntityTableColumn): EntityTableColumnRenderer {\r\n    if (column.renderer !== undefined) {\r\n      return column.renderer;\r\n    }\r\n    return EntityTableColumnRenderer.Default;\r\n  }\r\n\r\n  /**\r\n   * Return the table ngClass\r\n   * @returns ngClass\r\n   * @internal\r\n   */\r\n  getTableClass(): {[key: string]: boolean} {\r\n    return {\r\n      'igo-entity-table-with-selection': this.selection\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Return a header ngClass\r\n   * @returns ngClass\r\n   * @internal\r\n   */\r\n  getHeaderClass(): {[key: string]: boolean} {\r\n    const func = this.template.headerClassFunc;\r\n    if (func instanceof Function) {\r\n      return func();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Return a row ngClass\r\n   * @param entity Entity\r\n   * @returns ngClass\r\n   * @internal\r\n   */\r\n  getRowClass(entity: object): {[key: string]: boolean} {\r\n    const func = this.template.rowClassFunc;\r\n    if (func instanceof Function) {\r\n      return func(entity);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Return a row ngClass\r\n   * @param entity Entity\r\n   * @param column Column\r\n   * @returns ngClass\r\n   * @internal\r\n   */\r\n  getCellClass(entity: object, column: EntityTableColumn): {[key: string]: boolean} {\r\n    const cls = {};\r\n\r\n    const tableFunc = this.template.cellClassFunc;\r\n    if (tableFunc instanceof Function) {\r\n      Object.assign(cls, tableFunc(entity, column));\r\n    }\r\n\r\n    const columnFunc = column.cellClassFunc;\r\n    if (columnFunc instanceof Function) {\r\n      Object.assign(cls, columnFunc(entity));\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  /**\r\n   * When a button is clicked\r\n   * @param func Function\r\n   * @param entity Entity\r\n   * @internal\r\n   */\r\n  onButtonClick(clickFunc: (entity: object) => void, entity: object) {\r\n    if (typeof clickFunc === 'function') {\r\n      clickFunc(entity);\r\n    }\r\n  }\r\n\r\n}\r\n","export enum ActionbarMode {\r\n  Dock = 'dock',\r\n  Overlay = 'overlay',\r\n  Context = 'context'\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { EntityStoreWatcher } from '../../entity';\r\nimport { Action } from '../shared/action.interfaces';\r\nimport { ActionbarMode } from '../shared/action.enums';\r\nimport { ActionStore } from '../shared/store';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\n\r\n/**\r\n * A list of action buttons.\r\n * This component can be displayed in one of two way: 'dock' or 'overlay'\r\n */\r\n@Component({\r\n  selector: 'igo-actionbar',\r\n  templateUrl: './actionbar.component.html',\r\n  styleUrls: ['./actionbar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActionbarComponent implements OnDestroy, OnChanges {\r\n  /**\r\n   * Reference to the ActionbarMode enum for use in the template\r\n   * @internal\r\n   */\r\n  actionbarMode = ActionbarMode;\r\n\r\n  /**\r\n   * Whether the actionbar is collapsed (Dock mode)\r\n   * @internal\r\n   */\r\n  collapsed = false;\r\n\r\n  /**\r\n   * Toggle collapse action (Dock)\r\n   * @internal\r\n   */\r\n  toggleCollapseAction = {\r\n    id: 'actionbar_toggle',\r\n    icon: 'dots-vertical',\r\n    handler: () => {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Action store watcher\r\n   * @internal\r\n   */\r\n  private watcher: EntityStoreWatcher<Action>;\r\n\r\n  /**\r\n   * Action store\r\n   */\r\n  @Input() store: ActionStore;\r\n\r\n  /**\r\n   * Actionbar mode\r\n   */\r\n  @Input() mode: ActionbarMode = ActionbarMode.Dock;\r\n\r\n  /**\r\n   * Whether a toggle button should be displayed (Dock mode)\r\n   */\r\n  @Input() withToggleButton = false;\r\n\r\n  /**\r\n   * Whether a the actionbar should display buttons horizontally\r\n   */\r\n  @Input() horizontal = false;\r\n\r\n  /**\r\n   * Color\r\n   */\r\n  @Input() color = 'default';\r\n\r\n  /**\r\n   * Whether action titles are displayed\r\n   */\r\n  @Input() withTitle = true;\r\n\r\n  /**\r\n   * Whether action icons are displayed\r\n   */\r\n  @Input() withIcon = true;\r\n\r\n  /**\r\n   * Overlay X position\r\n   */\r\n  @Input() xPosition = 'before';\r\n\r\n  /**\r\n   * Overlay X position\r\n   */\r\n  @Input() yPosition = 'above';\r\n\r\n  /**\r\n   * Class to add to the actionbar overlay\r\n   */\r\n  @Input()\r\n  set overlayClass(value: string) {\r\n    this._overlayClass = value;\r\n  }\r\n  get overlayClass(): string {\r\n    return [this._overlayClass, 'igo-actionbar-overlay'].join(' ');\r\n  }\r\n  private _overlayClass = '';\r\n\r\n  /**\r\n   * Function to add class to item actionbar\r\n   */\r\n  @Input() itemClassFunc: (action: Action) => { [key: string]: boolean } =\r\n    ActionbarComponent.defaultItemClassFunc;\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  @HostBinding('class.with-title')\r\n  get withTitleClass() {\r\n    return this.withTitle;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  @HostBinding('class.with-icon')\r\n  get withIconClass() {\r\n    return this.withIcon;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  @HostBinding('class.horizontal')\r\n  get horizontalClass() {\r\n    return this.horizontal;\r\n  }\r\n\r\n  static defaultItemClassFunc(action: Action) {\r\n    return {};\r\n  }\r\n\r\n  constructor(private cdRef: ChangeDetectorRef, public overlay: Overlay) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const store = changes.store;\r\n    if (store && store.currentValue !== store.previousValue) {\r\n      if (this.watcher !== undefined) {\r\n        this.watcher.destroy();\r\n      }\r\n      this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.watcher.destroy();\r\n  }\r\n\r\n  /**\r\n   * Invoke the action handler\r\n   * @internal\r\n   */\r\n  onTriggerAction(action: Action) {\r\n    const args = action.args || [];\r\n    action.handler(...args);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { Action } from '../shared/action.interfaces';\r\n\r\n /**\r\n  * An action button\r\n  */\r\n@Component({\r\n  selector: 'igo-actionbar-item',\r\n  templateUrl: './actionbar-item.component.html',\r\n  styleUrls: ['./actionbar-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActionbarItemComponent {\r\n\r\n  /**\r\n   * Action\r\n   */\r\n  @Input() action: Action;\r\n\r\n  /**\r\n   * Color\r\n   */\r\n  @Input() color = 'default';\r\n\r\n  /**\r\n   * Whether the action title is displayed\r\n   */\r\n  @Input() withTitle = true;\r\n\r\n  /**\r\n   * Whether the action icon is displayed\r\n   */\r\n  @Input() withIcon = true;\r\n\r\n  /**\r\n   * Whether the action is disabled\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  /**\r\n   * Event emitted when the action button is clicked\r\n   */\r\n  @Output() trigger: EventEmitter<Action> = new EventEmitter();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get title(): string { return this.action.title; }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get tooltip(): string { return this.action.tooltip || this.title; }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get icon(): string { return this.action.icon; }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * When the action button is clicked, emit the 'trigger' event but don't\r\n   * invoke the action handler. This is handled by the parent component.\r\n   * @internal\r\n   */\r\n  onClick() {\r\n    if (this.disabled === true) {\r\n      return;\r\n    }\r\n    this.trigger.emit(this.action);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatCardModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { ActionbarComponent } from './actionbar.component';\r\nimport { ActionbarItemComponent } from './actionbar-item.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoLanguageModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatMenuModule,\r\n    MatListModule,\r\n    MatCardModule\r\n  ],\r\n  exports: [ActionbarComponent],\r\n  declarations: [ActionbarComponent, ActionbarItemComponent]\r\n})\r\nexport class IgoActionbarModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoActionbarModule } from './actionbar/actionbar.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoActionbarModule\r\n  ],\r\n  exports: [\r\n    IgoActionbarModule\r\n  ],\r\n  declarations: [],\r\n  providers: []\r\n})\r\nexport class IgoActionModule {}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-backdrop',\r\n  templateUrl: './backdrop.component.html',\r\n  styleUrls: ['./backdrop.component.scss']\r\n})\r\nexport class BackdropComponent {\r\n  @Input()\r\n  get shown(): boolean {\r\n    return this._shown;\r\n  }\r\n  set shown(value: boolean) {\r\n    this._shown = value;\r\n  }\r\n  private _shown: boolean;\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { BackdropComponent } from './backdrop.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [BackdropComponent],\r\n  exports: [BackdropComponent]\r\n})\r\nexport class IgoBackdropModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoBackdropModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Output\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoClickout]'\r\n})\r\nexport class ClickoutDirective {\r\n  @Output() clickout = new EventEmitter<MouseEvent>();\r\n\r\n  @HostListener('document:click', ['$event', '$event.target'])\r\n  handleMouseClick(event: MouseEvent, target: HTMLElement) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    if (!this.el.nativeElement.contains(target)) {\r\n      this.clickout.emit(event);\r\n    }\r\n  }\r\n\r\n  constructor(private el: ElementRef) {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ClickoutDirective } from './clickout.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [ClickoutDirective],\r\n  exports: [ClickoutDirective]\r\n})\r\nexport class IgoClickoutModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoClickoutModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'clone'\r\n})\r\nexport class ClonePipe implements PipeTransform {\r\n  transform(value: any, args?: any): any {\r\n    if (value === undefined) {\r\n      return value;\r\n    }\r\n\r\n    if (value instanceof Array) {\r\n      return value.map(obj => Object.assign(Object.create(obj), obj));\r\n    } else {\r\n      return Object.assign(Object.create(value), value);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ClonePipe } from './clone.pipe';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [ClonePipe],\r\n  exports: [ClonePipe]\r\n})\r\nexport class IgoCloneModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCloneModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoCollapse]'\r\n})\r\nexport class CollapseDirective {\r\n  @Input()\r\n  get target() {\r\n    return this._target;\r\n  }\r\n  set target(value: Element) {\r\n    this._target = value;\r\n  }\r\n  private _target: Element;\r\n\r\n  @Input()\r\n  get collapsed(): boolean {\r\n    return this._collapsed;\r\n  }\r\n  set collapsed(collapsed: boolean) {\r\n    collapsed ? this.collapseTarget() : this.expandTarget();\r\n    this._collapsed = collapsed;\r\n    this.toggle.emit(collapsed);\r\n  }\r\n  private _collapsed = false;\r\n\r\n  @Output() toggle: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  @HostListener('click')\r\n  click() {\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\r\n\r\n  private collapseTarget() {\r\n    this.renderer.addClass(this.target, 'igo-collapsed');\r\n    this.renderer.addClass(this.el.nativeElement, 'collapsed');\r\n  }\r\n\r\n  private expandTarget() {\r\n    this.renderer.removeClass(this.target, 'igo-collapsed');\r\n    this.renderer.removeClass(this.el.nativeElement, 'collapsed');\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-collapsible',\r\n  templateUrl: './collapsible.component.html',\r\n  styleUrls: ['./collapsible.component.scss']\r\n})\r\nexport class CollapsibleComponent {\r\n  @Input()\r\n  get title() {\r\n    return this._title;\r\n  }\r\n  set title(value: string) {\r\n    this._title = value;\r\n  }\r\n  private _title = '';\r\n\r\n  @Input()\r\n  get collapsed() {\r\n    return this._collapsed;\r\n  }\r\n  set collapsed(value: boolean) {\r\n    this._collapsed = value;\r\n  }\r\n  private _collapsed = false;\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { MatIconModule, MatListModule } from '@angular/material';\r\n\r\nimport { CollapseDirective } from './collapse.directive';\r\nimport { CollapsibleComponent } from './collapsible.component';\r\n\r\n@NgModule({\r\n  imports: [MatIconModule, MatListModule],\r\n  declarations: [CollapsibleComponent, CollapseDirective],\r\n  exports: [CollapsibleComponent, CollapseDirective]\r\n})\r\nexport class IgoCollapsibleModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCollapsibleModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'igo-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss']\r\n})\r\nexport class ConfirmDialogComponent {\r\n  public confirmMessage: string;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfirmDialogComponent } from './confirm-dialog.component';\r\n\r\n@Injectable()\r\nexport class ConfirmDialogService {\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  public open(message: string): Observable<any> {\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      disableClose: false\r\n    });\r\n    dialogRef.componentInstance.confirmMessage = message;\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { MatButtonModule, MatDialogModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { ConfirmDialogComponent } from './confirm-dialog.component';\r\nimport { ConfirmDialogService } from './confirm-dialog.service';\r\n\r\n@NgModule({\r\n  imports: [MatButtonModule, MatDialogModule, IgoLanguageModule],\r\n  declarations: [ConfirmDialogComponent],\r\n  exports: [ConfirmDialogComponent],\r\n  providers: [ConfirmDialogService],\r\n  entryComponents: [ConfirmDialogComponent]\r\n})\r\nexport class IgoConfirmDialogModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoConfirmDialogModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\r\n\r\n@Directive({\r\n  selector: '[igoContextMenu]'\r\n})\r\nexport class ContextMenuDirective {\r\n  overlayRef: OverlayRef | null;\r\n  sub: Subscription;\r\n\r\n  @Input('igoContextMenu') menuContext: TemplateRef<any>;\r\n  @Output() menuPosition = new EventEmitter<{ x: number; y: number }>();\r\n\r\n  constructor(\r\n    public overlay: Overlay,\r\n    public viewContainerRef: ViewContainerRef,\r\n    private elementRef: ElementRef\r\n  ) {}\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  public onContextMenu({ x, y }: MouseEvent): void {\r\n    this.close();\r\n    event.preventDefault();\r\n    this.menuPosition.emit({ x, y });\r\n    this.overlayRef = null;\r\n    const positionStrategy = this.overlay\r\n      .position()\r\n      .flexibleConnectedTo({ x, y })\r\n      .withPositions([\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        }\r\n      ]);\r\n    this.overlayRef = this.overlay.create({\r\n      positionStrategy,\r\n      scrollStrategy: this.overlay.scrollStrategies.close()\r\n    });\r\n    this.overlayRef.attach(\r\n      new TemplatePortal(this.menuContext, this.viewContainerRef, {\r\n        $implicit: undefined\r\n      })\r\n    );\r\n\r\n    this.sub = fromEvent<MouseEvent>(document, 'click')\r\n      .pipe(\r\n        filter(event => {\r\n          const clickTarget = event.target as HTMLElement;\r\n          this.close();\r\n          return (\r\n            !!this.overlayRef &&\r\n            !this.overlayRef.overlayElement.contains(clickTarget)\r\n          );\r\n        }),\r\n        take(1)\r\n      )\r\n      .subscribe(() => this.close());\r\n\r\n    this.sub = fromEvent<MouseEvent>(document, 'contextmenu')\r\n      .pipe(\r\n        filter(event => {\r\n          const clickTarget = event.target as HTMLElement;\r\n          if (\r\n            clickTarget &&\r\n            !this.elementRef.nativeElement.contains(clickTarget) &&\r\n            !this.overlayRef.overlayElement.contains(clickTarget)\r\n          ) {\r\n            return true;\r\n          } else {\r\n            event.preventDefault();\r\n          }\r\n        }),\r\n        take(1)\r\n      )\r\n      .subscribe(() => this.close());\r\n  }\r\n  close() {\r\n    if (this.overlayRef) {\r\n      this.overlayRef.dispose();\r\n      this.overlayRef = null;\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ContextMenuDirective } from './context-menu.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [ContextMenuDirective],\r\n  exports: [ContextMenuDirective]\r\n})\r\nexport class IgoContextMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoContextMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-custom-html',\r\n  templateUrl: './custom-html.component.html',\r\n  styleUrls: ['./custom-html.component.scss']\r\n})\r\nexport class CustomHtmlComponent {\r\n  @Input()\r\n  get html(): string {\r\n    return this._html;\r\n  }\r\n  set html(value: string) {\r\n    this._html = value;\r\n  }\r\n  private _html = '';\r\n\r\n  constructor() {}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'sanitizeHtml' })\r\nexport class SanitizeHtmlPipe implements PipeTransform {\r\n  constructor(private _sanitizer: DomSanitizer) {\r\n  }\r\n  transform(v: string): SafeHtml {\r\n    return this._sanitizer.bypassSecurityTrustHtml(v);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatInputModule,\r\n  MatButtonModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { CustomHtmlComponent } from './custom-html.component';\r\nimport { SanitizeHtmlPipe } from './custom-html.pipe';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule\r\n  ],\r\n  exports: [SanitizeHtmlPipe, CustomHtmlComponent],\r\n  declarations: [SanitizeHtmlPipe, CustomHtmlComponent]\r\n})\r\nexport class IgoCustomHtmlModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoCustomHtmlModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  HostListener,\r\n  HostBinding,\r\n  EventEmitter,\r\n  Output,\r\n  Input\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoDragAndDrop]'\r\n})\r\nexport class DragAndDropDirective {\r\n\r\n  @Input() allowedExtensions: Array<string> = [];\r\n\r\n  @Output() protected filesDropped: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  @Output() protected filesInvalid: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  @HostBinding('style.background') private background = 'inherit';\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.background = '#999';\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.background = 'inherit';\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.background = 'inherit';\r\n    const filesObj = this.validExtensions(evt);\r\n    if (filesObj.valid.length) {\r\n      this.filesDropped.emit(filesObj.valid);\r\n    }\r\n    if (filesObj.invalid.length) {\r\n      this.filesInvalid.emit(filesObj.invalid);\r\n    }\r\n  }\r\n\r\n  private validExtensions(evt) {\r\n    const files = evt.dataTransfer.files;\r\n    const filesObj = {\r\n      valid: [],\r\n      invalid: []\r\n    };\r\n    if (files.length > 0) {\r\n      for (const file of files) {\r\n        const ext = file.name.split('.')[file.name.split('.').length - 1];\r\n        if (\r\n          this.allowedExtensions.length === 0 ||\r\n          (\r\n            this.allowedExtensions.lastIndexOf(ext) !== -1 &&\r\n            file.size !== 0\r\n          )\r\n        ) {\r\n          filesObj.valid.push(file);\r\n        } else {\r\n          filesObj.invalid.push(file);\r\n        }\r\n      }\r\n    }\r\n\r\n    return filesObj;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { DragAndDropDirective } from './drag-drop.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [DragAndDropDirective],\r\n  exports: [DragAndDropDirective]\r\n})\r\nexport class IgoDrapDropModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoDrapDropModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  ComponentFactory,\r\n  ComponentRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * This class is used in the DynamicComponentOutlet component. It holds\r\n * a reference to a component factory and can render that component\r\n * in a target element on demand. It's also possible to set inputs\r\n * and to subscribe to outputs.\r\n */\r\nexport class DynamicComponent<C> {\r\n\r\n  /**\r\n   * Component reference\r\n   */\r\n  private componentRef: ComponentRef<C>;\r\n\r\n  /**\r\n   * Subscriptions to the component's outputs. Those need\r\n   * to be unsubscribed when the component is destroyed.\r\n   */\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  /**\r\n   * Component target element\r\n   */\r\n  private target: ViewContainerRef;\r\n\r\n  /**\r\n   * Component inputs\r\n   */\r\n  private inputs: {[key: string]: any} = {};\r\n\r\n  /**\r\n   * Subscribers to the component's outputs\r\n   */\r\n  private subscribers: {[key: string]: (event: any) => void} = {};\r\n\r\n  constructor(private componentFactory: ComponentFactory<C>) {}\r\n\r\n  /**\r\n   * Render the component to a target element.\r\n   * Set it's inputs and subscribe to it's outputs.\r\n   * @param target Target element\r\n   */\r\n  setTarget(target: ViewContainerRef) {\r\n    this.target = target;\r\n    this.componentRef = target.createComponent(this.componentFactory);\r\n    this.updateInputs(this.inputs);\r\n    this.updateSubscribers(this.subscribers);\r\n  }\r\n\r\n  /**\r\n   * Destroy this component. That means, removing from it's target\r\n   * element and unsubscribing to it's outputs.\r\n   */\r\n  destroy() {\r\n    if (this.target !== undefined) {\r\n      this.target.clear();\r\n    }\r\n    if (this.componentRef !== undefined) {\r\n      this.componentRef.destroy();\r\n      this.componentRef = undefined;\r\n    }\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  /**\r\n   * Update the component inputs. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   */\r\n  updateInputs(inputs: {[key: string]: any}) {\r\n    this.inputs = inputs;\r\n    if (this.componentRef === undefined) {\r\n      return;\r\n    }\r\n\r\n    const instance = this.componentRef.instance;\r\n    const allowedInputs = this.componentFactory.inputs;\r\n    allowedInputs.forEach((value: {propName: string; templateName: string; }) => {\r\n      const key = value.propName;\r\n      if (inputs.hasOwnProperty(key)) {\r\n        instance[key] = inputs[key];\r\n      }\r\n    });\r\n\r\n    if (typeof (instance as any).onUpdateInputs === 'function') {\r\n      (instance as any).onUpdateInputs();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the component subscribers. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   */\r\n  updateSubscribers(subscribers: {[key: string]: (event: any) => void}) {\r\n    this.subscribers = subscribers;\r\n    if (this.componentRef === undefined) {\r\n      return;\r\n    }\r\n\r\n    const instance = this.componentRef.instance;\r\n    const allowedSubscribers = this.componentFactory.outputs;\r\n    allowedSubscribers.forEach((value: {propName: string; templateName: string; }) => {\r\n      const key = value.propName;\r\n      if (subscribers.hasOwnProperty(key)) {\r\n        const emitter = instance[key];\r\n        const subscriber = subscribers[key];\r\n        if (Array.isArray(subscriber)) {\r\n          subscriber.forEach((_subscriber) => {\r\n            this.subscriptions.push(emitter.subscribe(_subscriber));\r\n          });\r\n        } else {\r\n          this.subscriptions.push(emitter.subscribe(subscriber));\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to all outputs.\r\n   */\r\n  private unsubscribeAll() {\r\n    this.subscriptions.forEach((s: Subscription) => s.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  Injectable\r\n} from '@angular/core';\r\n\r\nimport { DynamicComponent } from './dynamic-component';\r\n\r\n/**\r\n * Service to creates DynamicComponent instances from base component classes\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DynamicComponentService {\r\n\r\n  constructor(private resolver: ComponentFactoryResolver) {}\r\n\r\n  /**\r\n   * Creates a DynamicComponent instance from a base component class\r\n   * @param componentCls The component class\r\n   * @returns DynamicComponent instance\r\n   */\r\n  create(componentCls: any): DynamicComponent<any> {\r\n    const factory = this.resolver.resolveComponentFactory(componentCls as any);\r\n    return new DynamicComponent<typeof componentCls>(factory);\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewContainerRef,\r\n  ViewChild\r\n} from '@angular/core';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { DynamicComponent } from '../shared/dynamic-component';\r\nimport { DynamicComponentService } from '../shared/dynamic-component.service';\r\n\r\n@Component({\r\n  selector: 'igo-dynamic-outlet',\r\n  templateUrl: 'dynamic-outlet.component.html',\r\n  styleUrls: ['dynamic-outlet.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DynamicOutletComponent implements OnChanges, OnDestroy {\r\n  /**\r\n   * The dynamic component base class or the dynamic component itself\r\n   */\r\n  @Input() component: DynamicComponent<any> | any;\r\n\r\n  /**\r\n   * The dynamic component inputs\r\n   */\r\n  @Input() inputs: { [key: string]: any } = {};\r\n\r\n  /**\r\n   * The subscribers to the dynamic component outputs\r\n   */\r\n  @Input() subscribers: { [key: string]: (event: any) => void } = {};\r\n\r\n  /**\r\n   * The dynamic component\r\n   */\r\n  private dynamicComponent: DynamicComponent<any>;\r\n\r\n  /**\r\n   * The view element to render the component to\r\n   * @ignore\r\n   */\r\n  @ViewChild('target', { read: ViewContainerRef })\r\n  private target: ViewContainerRef;\r\n\r\n  constructor(\r\n    private dynamicComponentService: DynamicComponentService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  /**\r\n   * If the dynamic component changes, create it.\r\n   * If the inputs or subscribers change, update the current component's\r\n   * inputs or subscribers.\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const component = changes.component;\r\n    const inputs = changes.inputs;\r\n    const subscribers = changes.subscribers;\r\n    const eq = ObjectUtils.objectsAreEquivalent;\r\n\r\n    if (component && component.currentValue !== component.previousValue) {\r\n      this.createComponent(component.currentValue);\r\n    } else {\r\n      const inputsAreEquivalents =\r\n        inputs && eq(inputs.currentValue || {}, inputs.previousValue || {});\r\n      const subscribersAreEquivalents =\r\n        subscribers &&\r\n        eq(subscribers.currentValue || {}, subscribers.previousValue || {});\r\n\r\n      if (inputsAreEquivalents === false) {\r\n        this.updateInputs();\r\n      }\r\n\r\n      if (subscribersAreEquivalents === false) {\r\n        this.updateSubscribers();\r\n      }\r\n    }\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Destroy the dynamic component and all it's subscribers\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.dynamicComponent) {\r\n      this.dynamicComponent.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a  DynamicComponent out of the component class and render it.\r\n   * @internal\r\n   */\r\n  private createComponent(component: DynamicComponent<any> | any) {\r\n    if (this.dynamicComponent !== undefined) {\r\n      this.dynamicComponent.destroy();\r\n    }\r\n    this.dynamicComponent =\r\n      component instanceof DynamicComponent\r\n        ? component\r\n        : this.dynamicComponentService.create(component);\r\n    this.renderComponent();\r\n  }\r\n\r\n  /**\r\n   * Create and render the dynamic component. Set it's inputs and subscribers\r\n   * @internal\r\n   */\r\n  private renderComponent() {\r\n    this.updateInputs();\r\n    this.updateSubscribers();\r\n    this.dynamicComponent.setTarget(this.target);\r\n  }\r\n\r\n  /**\r\n   * Update the dynamic component inputs. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   * @internal\r\n   */\r\n  private updateInputs() {\r\n    this.dynamicComponent.updateInputs(this.inputs);\r\n  }\r\n\r\n  /**\r\n   * Update the dynamic component subscribers. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   * @internal\r\n   */\r\n  private updateSubscribers() {\r\n    this.dynamicComponent.updateSubscribers(this.subscribers);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DynamicOutletComponent } from './dynamic-outlet.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    DynamicOutletComponent\r\n  ],\r\n  declarations: [\r\n    DynamicOutletComponent\r\n  ]\r\n})\r\nexport class IgoDynamicOutletModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoDynamicOutletModule } from './dynamic-outlet/dynamic-outlet.module';\r\nimport { DynamicComponentService } from './shared/dynamic-component.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoDynamicOutletModule\r\n  ],\r\n  exports: [\r\n    IgoDynamicOutletModule\r\n  ],\r\n  providers: [\r\n    DynamicComponentService\r\n  ]\r\n})\r\nexport class IgoDynamicComponentModule {}\r\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\n\r\nimport { Media, MediaService } from '@igo2/core';\r\n\r\nimport { FlexibleState, FlexibleDirection } from './flexible.type';\r\n\r\n@Component({\r\n  selector: 'igo-flexible',\r\n  templateUrl: './flexible.component.html',\r\n  styleUrls: ['./flexible.component.scss']\r\n})\r\nexport class FlexibleComponent implements OnInit {\r\n  static transitionTime = 250;\r\n\r\n  @ViewChild('flexibleMain') main;\r\n\r\n  @Input()\r\n  get initial(): string {\r\n    return this._initial;\r\n  }\r\n  set initial(value: string) {\r\n    this._initial = value;\r\n  }\r\n  private _initial = '0';\r\n\r\n  @Input()\r\n  get collapsed(): string {\r\n    return this._collapsed;\r\n  }\r\n  set collapsed(value: string) {\r\n    this._collapsed = value;\r\n  }\r\n  private _collapsed = '0';\r\n\r\n  @Input()\r\n  get expanded(): string {\r\n    return this._expanded;\r\n  }\r\n  set expanded(value: string) {\r\n    this._expanded = value;\r\n  }\r\n  private _expanded = '100%';\r\n\r\n  @Input()\r\n  get initialMobile(): string {\r\n    return this._initialMobile;\r\n  }\r\n  set initialMobile(value: string) {\r\n    this._initialMobile = value;\r\n  }\r\n  private _initialMobile: string = this.expanded;\r\n\r\n  @Input()\r\n  get collapsedMobile(): string {\r\n    return this._collapsedMobile;\r\n  }\r\n  set collapsedMobile(value: string) {\r\n    this._collapsedMobile = value;\r\n  }\r\n  private _collapsedMobile: string = this.collapsed;\r\n\r\n  @Input()\r\n  get expandedMobile(): string {\r\n    return this._expandedMobile;\r\n  }\r\n  set expandedMobile(value: string) {\r\n    this._expandedMobile = value;\r\n  }\r\n  private _expandedMobile: string = this.expanded;\r\n\r\n  @Input()\r\n  get direction(): FlexibleDirection {\r\n    return this._direction;\r\n  }\r\n  set direction(value: FlexibleDirection) {\r\n    this._direction = value;\r\n  }\r\n  private _direction: FlexibleDirection = 'column';\r\n\r\n  @Input()\r\n  get state(): FlexibleState {\r\n    return this._state;\r\n  }\r\n  set state(value: FlexibleState) {\r\n    const sizes = {\r\n      initial: this.initial,\r\n      collapsed: this.collapsed,\r\n      expanded: this.expanded\r\n    };\r\n\r\n    const media = this.mediaService.media$.value;\r\n    if (media === 'mobile') {\r\n      Object.assign(sizes, {\r\n        initial: this.initialMobile,\r\n        collapsed: this.collapsedMobile,\r\n        expanded: this.expandedMobile\r\n      });\r\n    }\r\n\r\n    const size = sizes[value];\r\n    if (size !== undefined) {\r\n      this.setSize(size);\r\n      setTimeout(() => {\r\n        this._state = value;\r\n      }, FlexibleComponent.transitionTime);\r\n    }\r\n  }\r\n  private _state: FlexibleState = 'initial';\r\n\r\n  constructor(private el: ElementRef, private mediaService: MediaService) {}\r\n\r\n  ngOnInit() {\r\n    this.el.nativeElement.className += this.direction;\r\n\r\n    // Since this component supports different sizes\r\n    // on mobile, force a redraw when the media changes\r\n    this.mediaService.media$.subscribe(\r\n      (media: Media) => (this.state = this.state)\r\n    );\r\n  }\r\n\r\n  private setSize(size: string) {\r\n    this._state = 'transition';\r\n\r\n    if (this.direction === 'column') {\r\n      this.main.nativeElement.style.height = size;\r\n    } else if (this.direction === 'row') {\r\n      this.main.nativeElement.style.width = size;\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FlexibleComponent } from './flexible.component';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [FlexibleComponent],\r\n  exports: [FlexibleComponent]\r\n})\r\nexport class IgoFlexibleModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoFlexibleModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nimport { Form, FormField, FormFieldGroup } from './form.interfaces';\r\n\r\nexport function formControlIsRequired(control: AbstractControl): boolean {\r\n  if (control.validator) {\r\n    const validator = control.validator({} as AbstractControl);\r\n    if (validator && validator.required) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if ((control as any).controls) {\r\n    const requiredControl = Object.keys((control as any).controls).find((key: string) => {\r\n      return formControlIsRequired((control as any).controls[key]);\r\n    });\r\n    return requiredControl !== undefined;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function getDefaultErrorMessages(): {[key: string]: string} {\r\n  return {\r\n    required: 'igo.common.form.errors.required'\r\n  };\r\n}\r\n\r\nexport function getControlErrorMessage(control: AbstractControl, messages: {[key: string]: string}): string {\r\n  const errors = control.errors || {};\r\n  const errorKeys = Object.keys(errors);\r\n  const errorMessages = errorKeys\r\n    .map((key: string) => messages[key])\r\n    .filter((message: string) => message !== undefined);\r\n  return errorMessages.length > 0 ? errorMessages[0] : '';\r\n}\r\n\r\nexport function getAllFormFields(form: Form): FormField[] {\r\n  return form.groups.reduce((acc: FormField[], group: FormFieldGroup) => {\r\n    return acc.concat(group.fields);\r\n  }, [].concat(form.fields));\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\n\r\nimport t from 'typy';\r\n\r\nimport { Form, FormField, FormFieldGroup } from '../shared/form.interfaces';\r\nimport { getAllFormFields } from '../shared/form.utils';\r\n\r\n/**\r\n * A configurable form\r\n */\r\n@Component({\r\n  selector: 'igo-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormComponent implements OnChanges {\r\n\r\n  /**\r\n   * Form\r\n   */\r\n  @Input() form: Form;\r\n\r\n  /**\r\n   * Input data\r\n   */\r\n  @Input() formData: { [key: string]: any};\r\n\r\n  /**\r\n   * Event emitted when the form is submitted\r\n   */\r\n  @Output() submitForm = new EventEmitter<{[key: string]: any}>();\r\n\r\n  @ViewChild('buttons') buttons: ElementRef;\r\n\r\n  get hasButtons(): boolean {\r\n    return this.buttons.nativeElement.children.length !== 0;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Is the entity or the template change, recreate the form or repopulate it.\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const formData = changes.formData;\r\n    if (formData && formData.currentValue !== formData.previousValue) {\r\n      if (formData.currentValue === undefined) {\r\n        this.clear();\r\n      } else {\r\n        this.setData(formData.currentValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform the form data to a feature and emit an event\r\n   * @param event Form submit event\r\n   * @internal\r\n   */\r\n  onSubmit() {\r\n    this.submitForm.emit(this.getData());\r\n  }\r\n\r\n  private setData(data: {[key: string]: any}) {\r\n    this.form.fields.forEach((field: FormField) => {\r\n      field.control.setValue(t(data, field.name).safeObject);\r\n    });\r\n\r\n    this.form.groups.forEach((group: FormFieldGroup) => {\r\n      group.fields.forEach((field: FormField) => {\r\n        field.control.setValue(t(data, field.name).safeObject);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getData(): { [key: string]: any} {\r\n    const data = {};\r\n    getAllFormFields(this.form).forEach((field: FormField) => {\r\n      this.updateDataWithFormField(data, field);\r\n    });\r\n    return data;\r\n  }\r\n\r\n  private updateDataWithFormField(data: { [key: string]: any}, field: FormField) {\r\n    const control = field.control;\r\n    if (!control.disabled) {\r\n      data[field.name] = control.value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear form\r\n   */\r\n  private clear() {\r\n    this.form.control.reset();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { FormComponent } from './form.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  exports: [\r\n    FormComponent,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [\r\n    FormComponent\r\n  ]\r\n})\r\nexport class IgoFormFormModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Service where all available form fields are registered.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormFieldService {\r\n\r\n  static fields: {[key: string]: any} = {};\r\n\r\n  static register(type: string, component: any) {\r\n    FormFieldService.fields[type] = component;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Return field component by type\r\n   * @param type Field type\r\n   * @returns Field component\r\n   */\r\n  getFieldByType(type: string): any {\r\n    return FormFieldService.fields[type];\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormFieldConfig,\r\n  FormFieldGroup,\r\n  FormFieldGroupConfig\r\n} from './form.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormService {\r\n\r\n  constructor(private formBuilder: FormBuilder) {}\r\n\r\n  form(fields: FormField[], groups: FormFieldGroup[]): Form {\r\n    const control = this.formBuilder.group({});\r\n    fields.forEach((field: FormField) => {\r\n      control.addControl(field.name, field.control);\r\n    });\r\n    groups.forEach((group: FormFieldGroup) => {\r\n      control.addControl(group.name, group.control);\r\n    });\r\n\r\n    return {fields, groups, control};\r\n  }\r\n\r\n  group(config: FormFieldGroupConfig, fields: FormField[]): FormFieldGroup {\r\n    const options = config.options || {};\r\n    const control = this.formBuilder.group({});\r\n    fields.forEach((field: FormField) => {\r\n      control.addControl(field.name, field.control);\r\n    });\r\n    control.setValidators(options.validator);\r\n\r\n    return Object.assign({}, config, {fields, control}) as FormFieldGroup;\r\n  }\r\n\r\n  field(config: FormFieldConfig): FormField {\r\n    const options = config.options || {};\r\n    const state = Object.assign({value: ''}, {\r\n      disabled: options.disabled\r\n    });\r\n    const control = this.formBuilder.control(state);\r\n    control.setValidators(options.validator);\r\n\r\n    return Object.assign({type: 'text'}, config, {control}) as FormField;\r\n  }\r\n\r\n  extendFieldConfig(config: FormFieldConfig, partial: Partial<FormFieldConfig>): FormFieldConfig {\r\n    const options = Object.assign({}, config.options || {}, partial.options || {});\r\n    const inputs = Object.assign({}, config.inputs || {}, partial.inputs || {});\r\n    const subscribers = Object.assign({}, config.subscribers || {}, partial.subscribers || {});\r\n    return Object.assign({}, config, {options, inputs, subscribers});\r\n  }\r\n\r\n}\r\n","import { FormFieldService } from './form-field.service';\r\n\r\nexport function FormFieldComponent(type: string): (cls: any) => any {\r\n  return (compType: any) => {\r\n    FormFieldService.register(type, compType);\r\n  };\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { FormField, FormFieldInputs } from '../shared/form.interfaces';\r\nimport { FormFieldService } from '../shared/form-field.service';\r\nimport { getDefaultErrorMessages } from '../shared';\r\n\r\n/**\r\n * This component renders the proper form input based on\r\n * the field configuration it receives.\r\n */\r\n@Component({\r\n  selector: 'igo-form-field',\r\n  templateUrl: './form-field.component.html',\r\n  styleUrls: ['./form-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormFieldComponent {\r\n\r\n  /**\r\n   * Field configuration\r\n   */\r\n  @Input() field: FormField;\r\n\r\n  constructor(private formFieldService: FormFieldService) {}\r\n\r\n  getFieldComponent(): any {\r\n    return this.formFieldService.getFieldByType(this.field.type || 'text');\r\n  }\r\n\r\n  getFieldInputs(): FormFieldInputs {\r\n    const errors = this.field.options.errors || {};\r\n    return Object.assign(\r\n      {\r\n        placeholder: this.field.title,\r\n        disableSwitch: this.field.options.disableSwitch || false\r\n      },\r\n      Object.assign({}, this.field.inputs || {}),\r\n      {\r\n        formControl: this.field.control,\r\n        errors: Object.assign({}, getDefaultErrorMessages(), errors)\r\n      }\r\n    );\r\n  }\r\n\r\n  getFieldSubscribers(): {[key: string]: ({field: FormField, control: FormControl}) => void } {\r\n    return Object.assign({}, this.field.subscribers || {});\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\nimport { formControlIsRequired, getControlErrorMessage } from '../shared/form.utils';\r\nimport { FormFieldSelectChoice } from '../shared/form.interfaces';\r\nimport { FormFieldComponent } from '../shared/form-field-component';\r\n\r\n/**\r\n * This component renders a select field\r\n */\r\n@FormFieldComponent('select')\r\n@Component({\r\n  selector: 'igo-form-field-select',\r\n  templateUrl: './form-field-select.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormFieldSelectComponent {\r\n\r\n  choices$: Observable<FormFieldSelectChoice[]>;\r\n\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Select input choices\r\n   */\r\n  @Input()\r\n  set choices(value: Observable<FormFieldSelectChoice[]> | FormFieldSelectChoice[]) {\r\n    if (value instanceof Observable) {\r\n      this.choices$ = value;\r\n    } else {\r\n      this.choices$ = of(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() errors: {[key: string]: string};\r\n\r\n  /**\r\n   * Wheter a disable switch should be available\r\n   */\r\n  @Input() disableSwitch: boolean = false;\r\n\r\n  /**\r\n   * Whether the field is required\r\n   */\r\n  get required(): boolean {\r\n    return formControlIsRequired(this.formControl);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabled$.next(this.formControl.disabled);\r\n  }\r\n\r\n  /**\r\n   * Get error message\r\n   */\r\n  getErrorMessage(): string {\r\n    return getControlErrorMessage(this.formControl, this.errors);\r\n  }\r\n\r\n  onDisableSwitchClick() {\r\n    this.toggleDisabled();\r\n  }\r\n\r\n  private toggleDisabled() {\r\n    const disabled = !this.disabled$.value;\r\n    if (disabled === true) {\r\n      this.formControl.disable();\r\n    } else {\r\n      this.formControl.enable();\r\n    }\r\n    this.disabled$.next(disabled);  \r\n  }\r\n\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport {\r\n  formControlIsRequired,\r\n  getControlErrorMessage\r\n} from '../shared/form.utils';\r\nimport { FormFieldComponent } from '../shared/form-field-component';\r\n\r\n/**\r\n * This component renders a text field\r\n */\r\n@FormFieldComponent('text')\r\n@Component({\r\n  selector: 'igo-form-field-text',\r\n  templateUrl: './form-field-text.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormFieldTextComponent {\r\n\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() errors: {[key: string]: string};\r\n\r\n  /**\r\n   * Wheter a disable switch should be available\r\n   */\r\n  @Input() disableSwitch: boolean = false;\r\n\r\n  /**\r\n   * Whether the field is required\r\n   */\r\n  get required(): boolean {\r\n    return formControlIsRequired(this.formControl);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabled$.next(this.formControl.disabled);\r\n  }\r\n\r\n  /**\r\n   * Get error message\r\n   */\r\n  getErrorMessage(): string {\r\n    return getControlErrorMessage(this.formControl, this.errors);\r\n  }\r\n\r\n  onDisableSwitchClick() {\r\n    this.toggleDisabled();\r\n  }\r\n\r\n  private toggleDisabled() {\r\n    const disabled = !this.disabled$.value;\r\n    if (disabled === true) {\r\n      this.formControl.disable();\r\n    } else {\r\n      this.formControl.enable();\r\n    }\r\n    this.disabled$.next(disabled);  \r\n  }\r\n\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { formControlIsRequired, getControlErrorMessage } from '../shared/form.utils';\r\nimport { FormFieldComponent } from '../shared/form-field-component';\r\n\r\n/**\r\n * This component renders a textarea field\r\n */\r\n@FormFieldComponent('textarea')\r\n@Component({\r\n  selector: 'igo-form-field-textarea',\r\n  templateUrl: './form-field-textarea.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormFieldTextareaComponent {\r\n\r\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * The field's form control\r\n   */\r\n  @Input() formControl: FormControl;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() errors: {[key: string]: string};\r\n\r\n  /**\r\n   * Wheter a disable switch should be available\r\n   */\r\n  @Input() disableSwitch: boolean = false;\r\n\r\n  /**\r\n   * Whether the field is required\r\n   */\r\n  get required(): boolean {\r\n    return formControlIsRequired(this.formControl);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabled$.next(this.formControl.disabled);\r\n  }\r\n\r\n  /**\r\n   * Get error message\r\n   */\r\n  getErrorMessage(): string {\r\n    return getControlErrorMessage(this.formControl, this.errors);\r\n  }\r\n\r\n  onDisableSwitchClick() {\r\n    this.toggleDisabled();\r\n  }\r\n\r\n  private toggleDisabled() {\r\n    const disabled = !this.disabled$.value;\r\n    if (disabled === true) {\r\n      this.formControl.disable();\r\n    } else {\r\n      this.formControl.enable();\r\n    }\r\n    this.disabled$.next(disabled);  \r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSelectModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\nimport { IgoDynamicOutletModule } from '../../dynamic-component/dynamic-outlet/dynamic-outlet.module';\r\n\r\nimport { FormFieldComponent } from './form-field.component';\r\nimport { FormFieldSelectComponent } from './form-field-select.component';\r\nimport { FormFieldTextComponent } from './form-field-text.component';\r\nimport { FormFieldTextareaComponent } from './form-field-textarea.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    IgoLanguageModule,\r\n    IgoDynamicOutletModule\r\n  ],\r\n  exports: [\r\n    FormFieldComponent,\r\n    FormFieldSelectComponent,\r\n    FormFieldTextComponent,\r\n    FormFieldTextareaComponent\r\n  ],\r\n  declarations: [\r\n    FormFieldComponent,\r\n    FormFieldSelectComponent,\r\n    FormFieldTextComponent,\r\n    FormFieldTextareaComponent\r\n  ]\r\n})\r\nexport class IgoFormFieldModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nimport { getControlErrorMessage } from '../shared/form.utils';\r\nimport { FormField, FormFieldGroup } from '../shared/form.interfaces';\r\n\r\n/**\r\n * A configurable form, optionnally bound to an entity\r\n * (for example in case of un update). Submitting that form\r\n * emits an event with the form data but no other operation is performed.\r\n */\r\n@Component({\r\n  selector: 'igo-form-group',\r\n  templateUrl: './form-group.component.html',\r\n  styleUrls: ['./form-group.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormGroupComponent {\r\n\r\n  /**\r\n   * Form field group\r\n   */\r\n  @Input() group: FormFieldGroup;\r\n\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  @Input() errors: {[key: string]: string};\r\n\r\n  /**\r\n   * Form group control\r\n   */\r\n  get formControl(): FormGroup { return this.group.control; }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Return the number of columns a field should occupy.\r\n   * The maximum allowed is 2, even if the field config says more.\r\n   * @param field Field\r\n   * @returns Number of columns\r\n   * @internal\r\n   */\r\n  getFieldColSpan(field: FormField): number {\r\n    let colSpan = 2;\r\n    const options = field.options || {};\r\n    if (options.cols && options.cols > 0) {\r\n      colSpan = Math.min(options.cols, 2);\r\n    }\r\n\r\n    return colSpan;\r\n  }\r\n\r\n  /**\r\n   * Return the number of columns a field should occupy.\r\n   * The maximum allowed is 2, even if the field config says more.\r\n   * @param field Field\r\n   * @returns Number of columns\r\n   * @internal\r\n   */\r\n  getFieldNgClass(field: FormField): {[key: string]: boolean} {\r\n    const colspan = this.getFieldColSpan(field);\r\n    return {[`igo-form-field-colspan-${colspan}`]: true};\r\n  }\r\n\r\n  /**\r\n   * Get error message\r\n   */\r\n  getErrorMessage(): string {\r\n    const options = this.group.options || {};\r\n    return getControlErrorMessage(this.formControl, options.errors || {});\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatFormFieldModule } from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { IgoFormFieldModule } from '../form-field/form-field.module';\r\nimport { FormGroupComponent } from './form-group.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    IgoLanguageModule,\r\n    IgoFormFieldModule\r\n  ],\r\n  exports: [\r\n    FormGroupComponent\r\n  ],\r\n  declarations: [\r\n    FormGroupComponent\r\n  ]\r\n})\r\nexport class IgoFormGroupModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoFormFormModule } from './form/form.module';\r\nimport { IgoFormGroupModule } from './form-group/form-group.module';\r\nimport { IgoFormFieldModule } from './form-field/form-field.module';\r\nimport { FormFieldSelectComponent } from './form-field/form-field-select.component';\r\nimport { FormFieldTextComponent } from './form-field/form-field-text.component';\r\nimport { FormFieldTextareaComponent } from './form-field/form-field-textarea.component';\r\nimport { FormService } from './shared/form.service';\r\nimport { FormFieldService } from './shared/form-field.service';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoFormGroupModule,\r\n    IgoFormFieldModule\r\n  ],\r\n  exports: [\r\n    IgoFormFormModule,\r\n    IgoFormGroupModule,\r\n    IgoFormFieldModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    FormService,\r\n    FormFieldService\r\n  ],\r\n  entryComponents: [\r\n    FormFieldSelectComponent,\r\n    FormFieldTextComponent,\r\n    FormFieldTextareaComponent\r\n  ]\r\n})\r\nexport class IgoFormModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { MatSelectModule } from '@angular/material';\r\n\r\nimport { EntitySelectorComponent } from './entity-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatSelectModule\r\n  ],\r\n  exports: [EntitySelectorComponent],\r\n  declarations: [EntitySelectorComponent]\r\n})\r\nexport class IgoEntitySelectorModule {}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoStopDropPropagation]'\r\n})\r\nexport class StopDropPropagationDirective {\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(event: any): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoStopPropagation]'\r\n})\r\nexport class StopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  public onClick(event: any): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { StopDropPropagationDirective } from './stop-drop-propagation.directive';\r\nimport { StopPropagationDirective } from './stop-propagation.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [StopDropPropagationDirective, StopPropagationDirective],\r\n  exports: [StopDropPropagationDirective, StopPropagationDirective]\r\n})\r\nexport class IgoStopPropagationModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoStopPropagationModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  ElementRef,\r\n  Renderer2,\r\n  EventEmitter,\r\n  Output,\r\n  HostListener\r\n} from '@angular/core';\r\n\r\nimport { EntityTableScrollBehavior } from '../shared/entity.enums';\r\n\r\n/**\r\n * Directive that handles an entity table row click and selection.\r\n */\r\n@Directive({\r\n  selector: '[igoEntityTableRow]'\r\n})\r\nexport class EntityTableRowDirective {\r\n\r\n  /**\r\n   * Class added to a selected row\r\n   */\r\n  static selectedCls = 'igo-entity-table-row-selected';\r\n\r\n  /**\r\n   * Class added to a highlighted row\r\n   */\r\n  static highlightedCls = 'igo-entity-table-row-highlighted';\r\n\r\n  /**\r\n   * Whether a row supports selection\r\n   */\r\n  @Input() selection = false;\r\n\r\n  /**\r\n   * Whether clicking a row should select it (if selection is true)\r\n   */\r\n  @Input() selectOnClick: boolean = true;\r\n\r\n  /**\r\n   * Whether the selected row should be highlighted\r\n   */\r\n  @Input()\r\n  highlightSelection: boolean = true;\r\n\r\n  /**\r\n   * Whether a row is selected\r\n   */\r\n  @Input()\r\n  set selected(value: boolean) {\r\n    if (this.selection === false) { return; }\r\n    if (value === this._selected) { return; }\r\n\r\n    this.toggleSelected(value);\r\n    this.scroll();\r\n  }\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n  private _selected = false;\r\n\r\n  /**\r\n   * Scroll behavior on selection\r\n   */\r\n  @Input()\r\n  scrollBehavior: EntityTableScrollBehavior = EntityTableScrollBehavior.Auto;\r\n\r\n  /**\r\n   * Event emitted when a row is selected\r\n   */\r\n  @Output() select = new EventEmitter<EntityTableRowDirective>();\r\n\r\n  /**\r\n   * When a row is clicked, select it if it's supported\r\n   * @ignore\r\n   */\r\n  @HostListener('click')\r\n  onClick() {\r\n    if (this.selection === false || this.selectOnClick === false) {\r\n      return;\r\n    }\r\n\r\n    this.toggleSelected(true);\r\n    this.select.emit(this);\r\n  }\r\n\r\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\r\n\r\n  /**\r\n   * Select a row and add or remove the selected class from it\r\n   * @param selected Whether the row should be selected\r\n   */\r\n  private toggleSelected(selected: boolean) {\r\n    this._selected = selected;\r\n    if (selected === true) {\r\n      this.addCls(EntityTableRowDirective.selectedCls);\r\n      if (this.highlightSelection === true) {\r\n        this.addCls(EntityTableRowDirective.highlightedCls);\r\n      }\r\n    } else {\r\n      this.removeCls(EntityTableRowDirective.selectedCls);\r\n      this.removeCls(EntityTableRowDirective.highlightedCls);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scroll to the selected row\r\n   */\r\n  private scroll() {\r\n    if (this._selected === true) {\r\n      this.el.nativeElement.scrollIntoView({\r\n        behavior: this.scrollBehavior,\r\n        block: 'center',\r\n        inline: 'center'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the selected CSS class\r\n   */\r\n  private addCls(cls: string) {\r\n    this.renderer.addClass(this.el.nativeElement, cls);\r\n  }\r\n\r\n  /**\r\n   * Remove the selected CSS class\r\n   */\r\n  private removeCls(cls: string) {\r\n    this.renderer.removeClass(this.el.nativeElement, cls);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatTableModule,\r\n  MatSortModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoStopPropagationModule } from '../../stop-propagation/stop-propagation.module';\r\nimport { IgoCustomHtmlModule } from '../../custom-html/custom-html.module';\r\nimport { EntityTableRowDirective } from './entity-table-row.directive';\r\nimport { EntityTableComponent } from './entity-table.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    IgoStopPropagationModule,\r\n    IgoCustomHtmlModule\r\n  ],\r\n  exports: [\r\n    EntityTableComponent\r\n  ],\r\n  declarations: [\r\n    EntityTableComponent,\r\n    EntityTableRowDirective\r\n  ]\r\n})\r\nexport class IgoEntityTableModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoEntitySelectorModule } from './entity-selector/entity-selector.module';\r\nimport { IgoEntityTableModule } from './entity-table/entity-table.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoEntitySelectorModule,\r\n    IgoEntityTableModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoEntityModule {}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Pipe({\r\n  name: 'secureImage'\r\n})\r\nexport class SecureImagePipe implements PipeTransform {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  transform(url: string) {\r\n    return this.http\r\n      .get(url, {\r\n        headers: {\r\n          activityInterceptor: 'false'\r\n        },\r\n        responseType: 'blob'\r\n      })\r\n      .pipe(\r\n        switchMap(blob => {\r\n          return new Observable(observer => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n              observer.next(reader.result);\r\n            };\r\n          });\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { SecureImagePipe } from './secure-image.pipe';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [SecureImagePipe],\r\n  exports: [SecureImagePipe]\r\n})\r\nexport class IgoImageModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoImageModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'keyvalue'\r\n})\r\nexport class KeyValuePipe implements PipeTransform {\r\n  transform(value: any, args?: any): any {\r\n    const keyValues = [];\r\n    Object.getOwnPropertyNames(value).forEach((key: string) =>\r\n      keyValues.push({ key, value: value[key] })\r\n    );\r\n\r\n    return keyValues;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { KeyValuePipe } from './keyvalue.pipe';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [KeyValuePipe],\r\n  exports: [KeyValuePipe]\r\n})\r\nexport class IgoKeyValueModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoKeyValueModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'igo-json-dialog',\r\n  templateUrl: './json-dialog.component.html'\r\n})\r\nexport class JsonDialogComponent {\r\n  public title: string;\r\n  public data: any;\r\n  public ignoreKeys: string[];\r\n\r\n  constructor(public dialogRef: MatDialogRef<JsonDialogComponent>) {}\r\n\r\n  isObject(val) {\r\n    return typeof val === 'object' && !Array.isArray(val);\r\n  }\r\n\r\n  getKey(baseKey, key) {\r\n    return (baseKey ? baseKey + '.' : '') + key;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { JsonDialogComponent } from './json-dialog.component';\r\n\r\n@Injectable()\r\nexport class JsonDialogService {\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  public open(title: any, data, ignoreKeys?: string[]): Observable<any> {\r\n    const dialogRef = this.dialog.open(JsonDialogComponent, {\r\n      disableClose: false\r\n    });\r\n    dialogRef.componentInstance.data = data;\r\n    dialogRef.componentInstance.title = title;\r\n    dialogRef.componentInstance.ignoreKeys = ignoreKeys;\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule, MatDialogModule } from '@angular/material';\r\n\r\nimport { IgoKeyValueModule } from '../keyvalue/keyvalue.module';\r\n\r\nimport { JsonDialogComponent } from './json-dialog.component';\r\nimport { JsonDialogService } from './json-dialog.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatButtonModule, MatDialogModule, IgoKeyValueModule],\r\n  exports: [JsonDialogComponent],\r\n  declarations: [JsonDialogComponent],\r\n  entryComponents: [JsonDialogComponent],\r\n  providers: [JsonDialogService]\r\n})\r\nexport class IgoJsonDialogModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoJsonDialogModule\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  ElementRef,\r\n  Renderer2,\r\n  HostListener,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoListItem]'\r\n})\r\nexport class ListItemDirective {\r\n\r\n  static selectedCls = 'igo-list-item-selected';\r\n  static disabledCls = 'igo-list-item-disabled';\r\n\r\n  @Input()\r\n  get color() {\r\n    return this._color;\r\n  }\r\n  set color(value: string) {\r\n    this._color = value;\r\n  }\r\n  private _color = 'primary';\r\n\r\n  @Input()\r\n  get focused() {\r\n    return this._focused;\r\n  }\r\n  set focused(value: boolean) {\r\n    if (value === this._focused) {\r\n      return;\r\n    }\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    value ? this.beforeFocus.emit(this) : this.beforeUnfocus.emit(this);\r\n\r\n    this._focused = value;\r\n    this.toggleSelectedClass();\r\n\r\n    value ? this.focus.emit(this) : this.unfocus.emit(this);\r\n  }\r\n  private _focused = false;\r\n\r\n  @Input()\r\n  get selected() {\r\n    return this._selected;\r\n  }\r\n  set selected(value: boolean) {\r\n    if (value === this._selected) {\r\n      return;\r\n    }\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    value ? this.beforeSelect.emit(this) : this.beforeUnselect.emit(this);\r\n\r\n    this._selected = value;\r\n    this._focused = value;\r\n    this.toggleSelectedClass();\r\n\r\n    value ? this.select.emit(this) : this.unselect.emit(this);\r\n  }\r\n  private _selected = false;\r\n\r\n  @Input()\r\n  get disabled() {\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    if (value === this._disabled) {\r\n      return;\r\n    }\r\n\r\n    if (value === true) {\r\n      this.selected = false;\r\n    }\r\n\r\n    value ? this.beforeDisable.emit(this) : this.beforeEnable.emit(this);\r\n\r\n    this._disabled = value;\r\n    this.toggleDisabledClass();\r\n\r\n    value ? this.disable.emit(this) : this.enable.emit(this);\r\n  }\r\n  private _disabled = false;\r\n\r\n  @Output() beforeSelect = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeFocus = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeUnselect = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeUnfocus = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeDisable = new EventEmitter<ListItemDirective>();\r\n  @Output() beforeEnable = new EventEmitter<ListItemDirective>();\r\n  @Output() focus = new EventEmitter<ListItemDirective>();\r\n  @Output() unfocus = new EventEmitter<ListItemDirective>();\r\n  @Output() select = new EventEmitter<ListItemDirective>();\r\n  @Output() unselect = new EventEmitter<ListItemDirective>();\r\n  @Output() disable = new EventEmitter<ListItemDirective>();\r\n  @Output() enable = new EventEmitter<ListItemDirective>();\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.selected = true;\r\n  }\r\n\r\n  constructor(public renderer: Renderer2, private el: ElementRef) {}\r\n\r\n  getOffsetTop(): number {\r\n    const padding = 5;\r\n\r\n    return this.el.nativeElement.offsetTop - padding;\r\n  }\r\n\r\n  private toggleSelectedClass() {\r\n    if (this.focused || this.selected) {\r\n      this.addCls(ListItemDirective.selectedCls);\r\n    } else {\r\n      this.removeCls(ListItemDirective.selectedCls);\r\n    }\r\n  }\r\n\r\n  private toggleDisabledClass() {\r\n    if (this.disabled) {\r\n      this.addCls(ListItemDirective.disabledCls);\r\n    } else {\r\n      this.removeCls(ListItemDirective.disabledCls);\r\n    }\r\n  }\r\n\r\n  private addCls(cls: string) {\r\n    this.renderer.addClass(this.el.nativeElement, cls);\r\n  }\r\n\r\n  private removeCls(cls: string) {\r\n    this.renderer.removeClass(this.el.nativeElement, cls);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n  QueryList,\r\n  Input,\r\n  ContentChildren,\r\n  HostListener,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { ListItemDirective } from './list-item.directive';\r\n\r\n@Component({\r\n  selector: 'igo-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss']\r\n})\r\nexport class ListComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  @Input()\r\n  get navigation() {\r\n    return this._navigation;\r\n  }\r\n  set navigation(value: boolean) {\r\n    this._navigation = value;\r\n  }\r\n  private _navigation = true;\r\n\r\n  @Input()\r\n  get selection() {\r\n    return this._selection;\r\n  }\r\n  set selection(value: boolean) {\r\n    this._selection = value;\r\n  }\r\n  private _selection = true;\r\n\r\n  get selectedItem() {\r\n    return this._selectedItem;\r\n  }\r\n  set selectedItem(value: ListItemDirective) {\r\n    this.focusedItem = value;\r\n    this._selectedItem = value;\r\n  }\r\n  private _selectedItem: ListItemDirective;\r\n\r\n  get focusedItem() {\r\n    return this._focusedItem;\r\n  }\r\n  set focusedItem(value: ListItemDirective) {\r\n    this._focusedItem = value;\r\n    if (value !== undefined) {\r\n      this.scrollToItem(value);\r\n    }\r\n  }\r\n  private _focusedItem: ListItemDirective;\r\n\r\n  private navigationEnabled: boolean;\r\n  private listItems$$: Subscription;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  @ContentChildren(ListItemDirective, { descendants: true })\r\n  listItems: QueryList<ListItemDirective>;\r\n\r\n  @HostListener('document:keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n    // It would be nice to be able to unsubscribe to the event\r\n    // completely but until ES7 this won't be possible because\r\n    // document events are not observables\r\n    if (this.navigationEnabled) {\r\n      if (event.keyCode === 38 || event.keyCode === 40) {\r\n        event.preventDefault();\r\n        this.navigate(event.keyCode);\r\n      } else if (event.keyCode === 13) {\r\n        this.select(this.focusedItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(private el: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    this.enableNavigation();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.listItems.length) {\r\n      this.init();\r\n    }\r\n\r\n    this.listItems$$ = this.listItems.changes.subscribe(\r\n      (items: ListItemDirective[]) => this.init()\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.listItems$$.unsubscribe();\r\n  }\r\n\r\n  focus(item?: ListItemDirective) {\r\n    if (!this.selection) {\r\n      return;\r\n    }\r\n\r\n    this.unfocus();\r\n\r\n    // We need to make this check because dynamic\r\n    // lists such as in the search results list may fail\r\n    if (item !== undefined) {\r\n      item.focused = true;\r\n    }\r\n  }\r\n\r\n  unfocus() {\r\n    if (this.focusedItem !== undefined) {\r\n      this.focusedItem.focused = false;\r\n    }\r\n\r\n    this.focusedItem = undefined;\r\n  }\r\n\r\n  focusNext() {\r\n    const items = this.listItems.toArray();\r\n    let item;\r\n    let disabled = true;\r\n    let index = this.getFocusedIndex();\r\n    if (index === undefined) {\r\n      index = -1;\r\n    }\r\n\r\n    while (disabled && index < items.length - 1) {\r\n      index += 1;\r\n      item = items[index];\r\n      disabled = item.disabled;\r\n    }\r\n\r\n    if (item !== undefined) {\r\n      this.focus(item);\r\n    }\r\n  }\r\n\r\n  focusPrevious() {\r\n    const items = this.listItems.toArray();\r\n    let item;\r\n    let disabled = true;\r\n    let index = this.getFocusedIndex();\r\n\r\n    while (disabled && index > 0) {\r\n      index -= 1;\r\n      item = items[index];\r\n      disabled = item.disabled;\r\n    }\r\n\r\n    if (item !== undefined) {\r\n      this.focus(item);\r\n    }\r\n  }\r\n\r\n  select(item?: ListItemDirective) {\r\n    if (!this.selection) {\r\n      return;\r\n    }\r\n\r\n    this.unselect();\r\n\r\n    if (item !== undefined) {\r\n      item.selected = true;\r\n    }\r\n  }\r\n\r\n  unselect() {\r\n    this.unfocus();\r\n\r\n    if (this.selectedItem !== undefined) {\r\n      this.selectedItem.selected = false;\r\n    }\r\n\r\n    this.selectedItem = undefined;\r\n  }\r\n\r\n  enableNavigation() {\r\n    if (this.navigation) {\r\n      this.navigationEnabled = true;\r\n    }\r\n  }\r\n\r\n  disableNavigation() {\r\n    this.navigationEnabled = false;\r\n  }\r\n\r\n  private init() {\r\n    this.subscribe();\r\n\r\n    this.selectedItem = this.findSelectedItem();\r\n    this.focusedItem = this.findFocusedItem();\r\n\r\n    this.enableNavigation();\r\n  }\r\n\r\n  private subscribe() {\r\n    this.unsubscribe();\r\n\r\n    this.listItems.toArray().forEach(item => {\r\n      this.subscriptions.push(\r\n        item.beforeSelect.subscribe((item2: ListItemDirective) =>\r\n          this.handleItemBeforeSelect(item2)\r\n        )\r\n      );\r\n\r\n      this.subscriptions.push(\r\n        item.select.subscribe((item2: ListItemDirective) =>\r\n          this.handleItemSelect(item2)\r\n        )\r\n      );\r\n\r\n      this.subscriptions.push(\r\n        item.beforeFocus.subscribe((item2: ListItemDirective) =>\r\n          this.handleItemBeforeFocus(item2)\r\n        )\r\n      );\r\n\r\n      this.subscriptions.push(\r\n        item.focus.subscribe((item2: ListItemDirective) =>\r\n          this.handleItemFocus(item2)\r\n        )\r\n      );\r\n    }, this);\r\n  }\r\n\r\n  private unsubscribe() {\r\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  private handleItemBeforeFocus(item: ListItemDirective) {\r\n    if (item !== this.focusedItem) {\r\n      this.unselect();\r\n    }\r\n  }\r\n\r\n  private handleItemFocus(item: ListItemDirective) {\r\n    this.focusedItem = item;\r\n  }\r\n\r\n  private handleItemBeforeSelect(item: ListItemDirective) {\r\n    if (item !== this.focusedItem) {\r\n      this.unselect();\r\n    }\r\n  }\r\n\r\n  private handleItemSelect(item: ListItemDirective) {\r\n    this.selectedItem = item;\r\n  }\r\n\r\n  private findSelectedItem() {\r\n    return this.listItems.toArray().find(item => item.selected);\r\n  }\r\n\r\n  private findFocusedItem() {\r\n    return this.listItems.toArray().find(item => item.focused);\r\n  }\r\n\r\n  private getFocusedIndex() {\r\n    return this.listItems\r\n      .toArray()\r\n      .findIndex(item => item === this.focusedItem);\r\n  }\r\n\r\n  private navigate(key: number) {\r\n    switch (key) {\r\n      case 38:\r\n        this.focusPrevious();\r\n        break;\r\n      case 40:\r\n        this.focusNext();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private scrollToItem(item: ListItemDirective) {\r\n    this.el.nativeElement.scrollTop = item.getOffsetTop();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule, MatListModule } from '@angular/material';\r\n\r\nimport { IgoClickoutModule } from '../clickout/clickout.module';\r\n\r\nimport { ListItemDirective } from './list-item.directive';\r\nimport { ListComponent } from './list.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatIconModule, MatListModule, IgoClickoutModule],\r\n  declarations: [ListItemDirective, ListComponent],\r\n  exports: [ListItemDirective, ListComponent]\r\n})\r\nexport class IgoListModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoListModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  HostBinding\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'igo-panel',\r\n  templateUrl: './panel.component.html',\r\n  styleUrls: ['./panel.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PanelComponent {\r\n\r\n  @Input()\r\n  get title() {\r\n    return this._title;\r\n  }\r\n  set title(value: string) {\r\n    this._title = value;\r\n  }\r\n  private _title: string;\r\n\r\n  @Input()\r\n  @HostBinding('class.igo-panel-with-header')\r\n  get withHeader(): boolean {\r\n    return this._withHeader;\r\n  }\r\n  set withHeader(value: boolean) {\r\n    this._withHeader = value;\r\n  }\r\n  private _withHeader = true;\r\n\r\n  constructor() {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PanelComponent } from './panel.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    PanelComponent\r\n  ],\r\n  declarations: [\r\n    PanelComponent\r\n  ]\r\n})\r\nexport class IgoPanelModule {}\r\n","import { Directive, Self, HostListener, Renderer2 } from '@angular/core';\r\nimport { MatSidenav } from '@angular/material';\r\n\r\n/**\r\n * <igoSidenavShim> directive.\r\n *\r\n * This directive prevents a material sidenav with mode=\"side\"\r\n * from focusing an element after it's closed\r\n */\r\n@Directive({\r\n  selector: '[igoSidenavShim]'\r\n})\r\nexport class SidenavShimDirective {\r\n  private focusedElement: HTMLElement;\r\n  private blurElement: HTMLElement;\r\n\r\n  @HostListener('open', ['$event'])\r\n  onOpen() {\r\n    this.focusedElement = document.activeElement as HTMLElement;\r\n  }\r\n\r\n  @HostListener('close-start', ['$event'])\r\n  onCloseStart() {\r\n    const focusedElement = document.activeElement as HTMLElement;\r\n    if (focusedElement !== this.focusedElement) {\r\n      this.blurElement = this.focusedElement;\r\n    } else {\r\n      this.blurElement = undefined;\r\n    }\r\n  }\r\n\r\n  @HostListener('close', ['$event'])\r\n  onClose() {\r\n    if (this.blurElement) {\r\n      this.renderer.selectRootElement(this.blurElement).blur();\r\n    }\r\n\r\n    this.blurElement = undefined;\r\n    this.focusedElement = undefined;\r\n  }\r\n\r\n  constructor(@Self() component: MatSidenav, private renderer: Renderer2) {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { SidenavShimDirective } from './sidenav-shim.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [SidenavShimDirective],\r\n  exports: [SidenavShimDirective]\r\n})\r\nexport class IgoSidenavModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoSidenavModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'igo-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.scss']\r\n})\r\nexport class SpinnerComponent {\r\n\r\n  public shown$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  @Input()\r\n  set shown(value: boolean) { this.shown$.next(value); }\r\n  get shown(): boolean { return this.shown$.value; }\r\n\r\n  constructor() {}\r\n\r\n  show() {\r\n    this.shown = true;\r\n  }\r\n\r\n  hide() {\r\n    this.shown = false;\r\n  }\r\n}\r\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { ActivityService } from '@igo2/core';\r\nimport { SpinnerComponent } from './spinner.component';\r\n\r\n/**\r\n * A directive to bind a SpinnerComponent to the activity service.\r\n * The activity service tracks any HTTP request and this directive\r\n * will display the spinner it's attached to when the activity counter\r\n * is greater than 0.\r\n */\r\n@Directive({\r\n  selector: '[igoSpinnerActivity]',\r\n  providers: [SpinnerComponent]\r\n})\r\nexport class SpinnerActivityDirective implements OnInit, OnDestroy {\r\n  /**\r\n   * Subscription to the activity service counter\r\n   */\r\n  private counter$$: Subscription;\r\n\r\n  constructor(\r\n    @Self() private spinner: SpinnerComponent,\r\n    private activityService: ActivityService\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to the activity service counter and display the spinner\r\n   * when it's is greater than 0.\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.counter$$ = this.activityService.counter$\r\n      .pipe(debounceTime(50))\r\n      .subscribe((count: number) => {\r\n        count > 0 ? this.spinner.show() : this.spinner.hide();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unsubcribe to the activity service counter.\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.counter$$.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatProgressSpinnerModule } from '@angular/material';\r\n\r\nimport { SpinnerActivityDirective } from './spinner-activity.directive';\r\nimport { SpinnerComponent } from './spinner.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatProgressSpinnerModule],\r\n  declarations: [SpinnerActivityDirective, SpinnerComponent],\r\n  exports: [SpinnerActivityDirective, SpinnerComponent]\r\n})\r\nexport class IgoSpinnerModule {}\r\n","import { DataSource } from '@angular/cdk/table';\r\nimport { MatSort } from '@angular/material';\r\n\r\nimport { Observable, BehaviorSubject, merge } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { TableDatabase, TableModel } from './index';\r\n\r\nexport class TableDataSource extends DataSource<any> {\r\n  get filter(): string {\r\n    return this._filterChange.value;\r\n  }\r\n  set filter(filter: string) {\r\n    this._filterChange.next(filter);\r\n  }\r\n  private _filterChange = new BehaviorSubject('');\r\n\r\n  constructor(\r\n    private _database: TableDatabase,\r\n    private _model: TableModel,\r\n    private _sort: MatSort\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // Connect function called by the table to retrieve one stream containing\r\n  // the data to render.\r\n  connect(): Observable<any[]> {\r\n    if (!this._database) {\r\n      return merge([]);\r\n    }\r\n    const displayDataChanges = [\r\n      this._database.dataChange,\r\n      this._filterChange,\r\n      this._sort.sortChange\r\n    ];\r\n\r\n    return merge(...displayDataChanges).pipe(\r\n      map(() => {\r\n        return this.getFilteredData(this._database.data);\r\n      }),\r\n      map(data => {\r\n        return this.getSortedData(data);\r\n      })\r\n    );\r\n  }\r\n\r\n  disconnect() {}\r\n\r\n  getFilteredData(data): any[] {\r\n    if (!this.filter) {\r\n      return data;\r\n    }\r\n    return data.slice().filter((item: any) => {\r\n      const searchStr: string = this._model.columns\r\n        .filter(c => c.filterable)\r\n        .map(c => ObjectUtils.resolve(item, c.name))\r\n        .join(' ')\r\n        .toLowerCase();\r\n\r\n      return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\r\n    });\r\n  }\r\n\r\n  getSortedData(data): any[] {\r\n    if (!this._sort.active || this._sort.direction === '') {\r\n      return data;\r\n    }\r\n\r\n    return data.sort((a, b) => {\r\n      const propertyA: number | string = ObjectUtils.resolve(\r\n        a,\r\n        this._sort.active\r\n      );\r\n      const propertyB: number | string = ObjectUtils.resolve(\r\n        b,\r\n        this._sort.active\r\n      );\r\n\r\n      return ObjectUtils.naturalCompare(\r\n        propertyB,\r\n        propertyA,\r\n        this._sort.direction\r\n      );\r\n    });\r\n  }\r\n}\r\n","export enum TableActionColor {\r\n  primary,\r\n  accent,\r\n  warn\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  ViewChild,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  OnInit,\r\n  AfterViewInit,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { MatSort } from '@angular/material';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\n\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\nimport { fromEvent } from 'rxjs';\r\n\r\nimport { ObjectUtils } from '@igo2/utils';\r\n\r\nimport { TableModel } from './table-model.interface';\r\nimport { TableDatabase } from './table-database';\r\nimport { TableDataSource } from './table-datasource';\r\nimport { TableActionColor } from './table-action-color.enum';\r\n\r\n@Component({\r\n  selector: 'igo-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss']\r\n})\r\nexport class TableComponent implements OnChanges, OnInit, AfterViewInit {\r\n  @Input()\r\n  get database(): TableDatabase {\r\n    return this._database;\r\n  }\r\n  set database(value: TableDatabase) {\r\n    this._database = value;\r\n  }\r\n  private _database: TableDatabase;\r\n\r\n  @Input()\r\n  get model(): TableModel {\r\n    return this._model;\r\n  }\r\n  set model(value: TableModel) {\r\n    this._model = value;\r\n  }\r\n  private _model: TableModel;\r\n\r\n  @Input()\r\n  get hasFilterInput(): boolean {\r\n    return this._hasFIlterInput;\r\n  }\r\n  set hasFilterInput(value: boolean) {\r\n    this._hasFIlterInput = value;\r\n  }\r\n  private _hasFIlterInput = true;\r\n\r\n  public displayedColumns;\r\n  public dataSource: TableDataSource | null;\r\n  public selection = new SelectionModel<any>(true, []);\r\n\r\n  @Output()\r\n  select = new EventEmitter<{\r\n    added: any[];\r\n    removed: any[];\r\n    source: SelectionModel<any>;\r\n  }>();\r\n\r\n  @ViewChild('filter') filter: ElementRef;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new TableDataSource(this.database, this.model, this.sort);\r\n\r\n    if (this.model) {\r\n      this.displayedColumns = this.model.columns\r\n        .filter(c => c.displayed !== false)\r\n        .map(c => c.name);\r\n\r\n      if (this.model.selectionCheckbox) {\r\n        this.displayedColumns.unshift('selectionCheckbox');\r\n      }\r\n      if (this.model.actions && this.model.actions.length) {\r\n        this.displayedColumns.push('action');\r\n      }\r\n    }\r\n\r\n    this.selection.changed.subscribe(e => this.select.emit(e));\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.filter) {\r\n      fromEvent(this.filter.nativeElement, 'keyup')\r\n        .pipe(\r\n          debounceTime(150),\r\n          distinctUntilChanged()\r\n        )\r\n        .subscribe(() => {\r\n          if (!this.dataSource) {\r\n            return;\r\n          }\r\n          this.dataSource.filter = this.filter.nativeElement.value;\r\n        });\r\n    }\r\n  }\r\n\r\n  ngOnChanges(change) {\r\n    if (change.database) {\r\n      this.dataSource = new TableDataSource(\r\n        this.database,\r\n        this.model,\r\n        this.sort\r\n      );\r\n      this.selection.clear();\r\n    }\r\n  }\r\n\r\n  getActionColor(colorId: number): string {\r\n    return TableActionColor[colorId];\r\n  }\r\n\r\n  getValue(row, key) {\r\n    return ObjectUtils.resolve(row, key);\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.database.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected()\r\n      ? this.selection.clear()\r\n      : this.database.data.forEach(row => this.selection.select(row));\r\n  }\r\n\r\n  handleClickAction(event, action, row) {\r\n    event.stopPropagation();\r\n    action.click(row);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatTableModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSortModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { TableComponent } from './table.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    CdkTableModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTableModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSortModule,\r\n    MatCheckboxModule,\r\n    IgoLanguageModule\r\n  ],\r\n  declarations: [TableComponent],\r\n  exports: [TableComponent]\r\n})\r\nexport class IgoTableModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoTableModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Tool } from './tool.interface';\r\n\r\n/**\r\n * Service where runtime tool configurations are registered\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToolService {\r\n\r\n  static tools: {[key: string]: Tool} = {};\r\n\r\n  static register(tool: Tool) {\r\n    ToolService.tools[tool.name] = tool;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Return a tool\r\n   * @param name Tool name\r\n   * @returns tool Tool\r\n   */\r\n  getTool(name: string): Tool {\r\n    return ToolService.tools[name];\r\n  }\r\n\r\n  /**\r\n   * Return all tools\r\n   * @returns tTols\r\n   */\r\n  getTools(): Tool[] {\r\n    return Object.values(ToolService.tools);\r\n  }\r\n\r\n}\r\n","import { EntityStore } from '../../entity';\r\nimport { Action } from './action.interfaces';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * actions.\r\n */\r\nexport class ActionStore extends EntityStore<Action> {\r\n\r\n  /**\r\n   * Update actions availability. That means disabling or enabling some\r\n   * actions based on the conditions they define.\r\n   */\r\n  updateActionsAvailability() {\r\n    const availables = [];\r\n    const unavailables = [];\r\n\r\n    this.entities$.value.forEach((action: Action) => {\r\n      const conditions = action.conditions || [];\r\n      const args = action.conditionArgs || [];\r\n      const available = conditions.every((condition: (...args: any[]) => boolean) => {\r\n        return condition(...args);\r\n      });\r\n      available ? availables.push(action) : unavailables.push(action);\r\n    });\r\n\r\n    if (unavailables.length > 0) {\r\n      this.state.updateMany(unavailables, {\r\n        disabled: true,\r\n        active: false\r\n      });\r\n    }\r\n\r\n    if (availables.length > 0) {\r\n      this.state.updateMany(availables, {\r\n        disabled: false\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationTriggerMetadata\r\n} from '@angular/animations';\r\n\r\nexport function toolSlideInOut(\r\n  speed = '300ms',\r\n  type = 'ease-in-out'\r\n): AnimationTriggerMetadata {\r\n  return trigger('toolSlideInOut', [\r\n    state(\r\n      'enter',\r\n      style({\r\n        transform: 'translate3d(0, 0, 0)'\r\n      })\r\n    ),\r\n    transition('void => enter', animate(speed + ' ' + type))\r\n  ]);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\nimport { Action, ActionStore } from '../../action';\r\nimport { Tool } from '../shared/tool.interface';\r\nimport { Toolbox } from '../shared/toolbox';\r\nimport { toolSlideInOut } from './toolbox.animation';\r\n\r\n@Component({\r\n  selector: 'igo-toolbox',\r\n  templateUrl: 'toolbox.component.html',\r\n  styleUrls: ['toolbox.component.scss'],\r\n  animations: [toolSlideInOut()],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ToolboxComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Observable of the active tool\r\n   */\r\n  activeTool$: BehaviorSubject<Tool> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Store of actions that toggle tools\r\n   */\r\n  actionStore: ActionStore = new ActionStore([]);\r\n\r\n  /**\r\n   * Observable of he anmation state\r\n   */\r\n  animation$: BehaviorSubject<string> = new BehaviorSubject('none');\r\n\r\n  /**\r\n   * Observable of the toolbar\r\n   */\r\n  toolbar$: BehaviorSubject<string[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Subscription to the active tool\r\n   */\r\n  private activeTool$$: Subscription;\r\n\r\n  /**\r\n   * Subscription to the toolbar\r\n   */\r\n  private toolbar$$: Subscription;\r\n\r\n  /**\r\n   * Observable of the ongoing animation. This is useful when\r\n   * multiple animations are triggered at once i.e. when the user clicks\r\n   * too fast on different actions\r\n   */\r\n  private animating$ = new BehaviorSubject<boolean>(false);\r\n\r\n  /**\r\n   * Subscription to the ongoing animation\r\n   */\r\n  private animating$$: Subscription;\r\n\r\n  /**\r\n   * Toolbox\r\n   */\r\n  @Input() toolbox: Toolbox;\r\n\r\n  /**\r\n   * Whether the toolbox should animate the first tool entering\r\n   */\r\n  @Input() animate: boolean = false;\r\n\r\n  /**\r\n   * Whether the Toolbar should display actions' titles\r\n   */\r\n  get toolbarWithTitle(): boolean {\r\n    return this.activeTool$.value === undefined;\r\n  }\r\n\r\n  /**\r\n   * Initialize the toolbar and subscribe to the active tool\r\n   * @internal\r\n   */\r\n  ngOnInit() {\r\n    this.toolbar$$ = this.toolbox.toolbar$.subscribe((toolbar: string[]) =>\r\n      this.onToolbarChange(toolbar)\r\n    );\r\n    this.activeTool$$ = this.toolbox.activeTool$.subscribe((tool: Tool) =>\r\n      this.onActiveToolChange(tool)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe to the active tool and destroy the action store\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.toolbar$$.unsubscribe();\r\n    this.activeTool$$.unsubscribe();\r\n    this.actionStore.destroy();\r\n  }\r\n\r\n  /**\r\n   * Track the starting animation\r\n   * @internal\r\n   */\r\n  onAnimationStart() {\r\n    this.animating$.next(true);\r\n  }\r\n\r\n  /**\r\n   * Untrack the completed animation\r\n   * @internal\r\n   */\r\n  onAnimationComplete() {\r\n    this.animating$.next(false);\r\n  }\r\n\r\n  /**\r\n   * Return a tool's inputs\r\n   * @param tool Tool\r\n   * @returns Tool inputs\r\n   * @internal\r\n   */\r\n  getToolInputs(tool: Tool): { [key: string]: any } {\r\n    return tool.options || {};\r\n  }\r\n\r\n  /**\r\n   * Get Action bar item class function\r\n   * @internal\r\n   */\r\n  get actionBarItemClassFunc() {\r\n    return (tool: Tool) => {\r\n      if (!this.toolbox.activeTool$.value) {\r\n        return;\r\n      }\r\n      return { 'tool-actived': tool.id === this.toolbox.activeTool$.value.name };\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize an action store\r\n   * @param toolbar Toolbar\r\n   */\r\n  private onToolbarChange(toolbar: string[]) {\r\n    this.setToolbar(toolbar);\r\n  }\r\n\r\n  /**\r\n   * Activate a tool and trigger an animation or not\r\n   * @param tool Tool to activate\r\n   */\r\n  private onActiveToolChange(tool: Tool) {\r\n    if (!this.animate) {\r\n      this.setActiveTool(tool);\r\n      return;\r\n    }\r\n    this.onAnimate(() => this.setActiveTool(tool));\r\n  }\r\n\r\n  /**\r\n   * Set the active tool\r\n   * @param tool Tool to activate\r\n   */\r\n  private setActiveTool(tool: Tool | undefined) {\r\n    if (tool === undefined) {\r\n      this.actionStore.state.updateAll({ active: false });\r\n    } else {\r\n      const action = this.actionStore.get(tool.name);\r\n      if (action !== undefined) {\r\n        this.actionStore.state.update(action, { active: true }, true);\r\n      }\r\n    }\r\n\r\n    this.activeTool$.next(tool);\r\n    if (this.animate) {\r\n      this.animation$.next('enter');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the toolbar\r\n   */\r\n  private setToolbar(toolbar: string[]) {\r\n    const actions = toolbar.reduce((acc: Action[], toolName: string) => {\r\n      const tool = this.toolbox.getTool(toolName);\r\n      if (tool === undefined) {\r\n        return acc;\r\n      }\r\n\r\n      acc.push({\r\n        id: tool.name,\r\n        title: tool.title,\r\n        icon: tool.icon,\r\n        // iconImage: tool.iconImage,\r\n        tooltip: tool.tooltip,\r\n        args: [tool, this.toolbox],\r\n        handler: (_tool: Tool, _toolbox: Toolbox) => {\r\n          _toolbox.activateTool(_tool.name);\r\n        }\r\n      });\r\n      return acc;\r\n    }, []);\r\n    this.actionStore.load(actions);\r\n    this.toolbar$.next(toolbar);\r\n  }\r\n\r\n  /**\r\n   * Observe the ongoing animation and ignore any incoming animation\r\n   * while one is still ongoing.\r\n   * @param callback Callback to execute when the animation completes\r\n   */\r\n  private onAnimate(callback: () => void) {\r\n    this.unAnimate();\r\n    this.animating$$ = this.animating$.subscribe((animation: boolean) => {\r\n      if (!animation) {\r\n        callback.call(this);\r\n        this.unAnimate();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop observing an animation when it's complete\r\n   */\r\n  private unAnimate() {\r\n    if (this.animating$$) {\r\n      this.animating$$.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoActionModule } from '../../action/action.module';\r\nimport {\r\n    IgoDynamicComponentModule\r\n} from '../../dynamic-component/dynamic-component.module';\r\n\r\nimport { ToolboxComponent } from './toolbox.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoActionModule,\r\n    IgoDynamicComponentModule\r\n  ],\r\n  exports: [\r\n    ToolboxComponent\r\n  ],\r\n  declarations: [\r\n    ToolboxComponent\r\n  ]\r\n})\r\nexport class IgoToolboxModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ToolService } from './shared/tool.service';\r\nimport { IgoToolboxModule } from './toolbox/toolbox.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoToolboxModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoToolModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoToolModule,\r\n      providers: [\r\n        ToolService\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { DynamicComponent } from '../../dynamic-component';\r\n\r\nimport { WidgetComponent } from '../shared/widget.interfaces';\r\n\r\n/**\r\n * This component dynamically renders a widget. It also subscribes\r\n * to the widget's 'cancel' and 'complete' events and destroys it\r\n * when any of those event is emitted.\r\n */\r\n@Component({\r\n  selector: 'igo-widget-outlet',\r\n  templateUrl: './widget-outlet.component.html',\r\n  styleUrls: ['./widget-outlet.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class WidgetOutletComponent implements OnDestroy {\r\n\r\n  /**\r\n   * Widget subscribers to 'cancel' and 'complete'\r\n   * @internal\r\n   */\r\n  private baseSubscribers = {\r\n    cancel: (event: any) => this.onCancel(event),\r\n    complete: (event: any) => this.onComplete(event)\r\n  };\r\n\r\n  /**\r\n   * Widget\r\n   */\r\n  @Input() widget: DynamicComponent<WidgetComponent>;\r\n\r\n  /**\r\n   * Widget inputs\r\n   */\r\n  @Input() inputs: {[key: string]: any};\r\n\r\n  /**\r\n   * Widget subscribers\r\n   */\r\n  @Input() subscribers: {[key: string]: (event: any) => void} = {};\r\n\r\n  /**\r\n   * Event emitted when the widget emits 'complete'\r\n   */\r\n  @Output() complete = new EventEmitter<any>();\r\n\r\n  /**\r\n   * Event emitted when the widget emits 'cancel'\r\n   */\r\n  @Output() cancel = new EventEmitter<any>();\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Destroy the current widget and all it's inner subscriptions\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    this.destroyWidget();\r\n  }\r\n\r\n  /**\r\n   * Get the effective subscribers. That means a combination of the base\r\n   * subscribers and any subscriber given as input.\r\n   * @returns Combined subscribers\r\n   * @internal\r\n   */\r\n  getEffectiveSubscribers(): {[key: string]: (event: any) => void} {\r\n    const subscribers = Object.assign({}, this.subscribers);\r\n\r\n    // Base subscribers\r\n    Object.keys(this.baseSubscribers).forEach((key: string) => {\r\n      const subscriber = subscribers[key];\r\n      const baseSubscriber = this.baseSubscribers[key];\r\n      if (subscriber !== undefined) {\r\n        subscribers[key] = (event: any) => {\r\n          subscriber(event);\r\n          baseSubscriber(event);\r\n        };\r\n      } else {\r\n        subscribers[key] = baseSubscriber;\r\n      }\r\n    });\r\n\r\n    return subscribers;\r\n  }\r\n\r\n  /**\r\n   * When the widget emits 'cancel', propagate that event and destroy\r\n   * the widget\r\n   */\r\n  private onCancel(event: any) {\r\n    this.cancel.emit(event);\r\n    this.destroyWidget();\r\n  }\r\n\r\n  /**\r\n   * When the widget emits 'complete', propagate that event and destroy\r\n   * the widget\r\n   */\r\n  private onComplete(event: any) {\r\n    this.complete.emit(event);\r\n    this.destroyWidget();\r\n  }\r\n\r\n  /**\r\n   * Destroy the current widget\r\n   */\r\n  private destroyWidget() {\r\n    if (this.widget !== undefined) {\r\n      this.widget.destroy();\r\n    }\r\n    this.widget = undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  IgoDynamicComponentModule\r\n} from '../../dynamic-component/dynamic-component.module';\r\n\r\nimport { WidgetOutletComponent } from './widget-outlet.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoDynamicComponentModule\r\n  ],\r\n  exports: [\r\n    WidgetOutletComponent\r\n  ],\r\n  declarations: [\r\n    WidgetOutletComponent\r\n  ]\r\n})\r\nexport class IgoWidgetOutletModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { DynamicComponentService } from '../../dynamic-component/shared/dynamic-component.service';\r\n\r\nimport { Widget } from './widget';\r\nimport { WidgetComponent } from './widget.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WidgetService {\r\n\r\n  constructor(private dynamicComponentService: DynamicComponentService) {}\r\n\r\n  create(widgetCls: any): Widget {\r\n    return this.dynamicComponentService.create(widgetCls as WidgetComponent);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoWidgetOutletModule } from './widget-outlet/widget-outlet.module';\r\nimport { WidgetService } from './shared/widget.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetOutletModule\r\n  ],\r\n  exports: [\r\n    IgoWidgetOutletModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    WidgetService\r\n  ]\r\n})\r\nexport class IgoWidgetModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { getEntityTitle } from '../../entity';\r\nimport { Workspace } from '../shared/workspace';\r\nimport { WorkspaceStore } from '../shared/store';\r\n\r\n/**\r\n * Drop list that activates the selected workspace emit an event.\r\n */\r\n@Component({\r\n  selector: 'igo-workspace-selector',\r\n  templateUrl: './workspace-selector.component.html',\r\n  styleUrls: ['./workspace-selector.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class WorkspaceSelectorComponent {\r\n\r\n  /**\r\n   * Store that holds the available workspaces.\r\n   */\r\n  @Input() store: WorkspaceStore;\r\n\r\n  /**\r\n   * Event emitted when an workspace is selected or unselected\r\n   */\r\n  @Output() selectedChange = new EventEmitter<{\r\n    selected: boolean;\r\n    value: Workspace;\r\n  }>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  getWorkspaceTitle(workspace: Workspace): string {\r\n    return getEntityTitle(workspace);\r\n  }\r\n\r\n  /**\r\n   * When an workspace is manually selected, select it into the\r\n   * store and emit an event.\r\n   * @internal\r\n   * @param event The selection change event\r\n   */\r\n  onSelectedChange(event: {value: Workspace}) {\r\n    const workspace = event.value;\r\n    this.store.activateWorkspace(workspace);\r\n    this.selectedChange.emit({selected: true, value: workspace});\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoEntitySelectorModule } from '../../entity/entity-selector/entity-selector.module';\r\nimport { WorkspaceSelectorComponent } from './workspace-selector.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoEntitySelectorModule\r\n  ],\r\n  exports: [\r\n    WorkspaceSelectorComponent\r\n  ],\r\n  declarations: [\r\n    WorkspaceSelectorComponent\r\n  ]\r\n})\r\nexport class IgoWorkspaceSelectorModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Widget } from '../../widget';\r\nimport { Workspace } from '../shared/workspace';\r\n\r\n/**\r\n * This component dynamically render an Workspace's active widget.\r\n * It also deactivate that widget whenever the widget's component\r\n * emit the 'cancel' or 'complete' event.\r\n */\r\n@Component({\r\n  selector: 'igo-workspace-widget-outlet',\r\n  templateUrl: './workspace-widget-outlet.component.html',\r\n  styleUrls: ['./workspace-widget-outlet.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class WorkspaceWidgetOutletComponent {\r\n\r\n  /**\r\n   * Workspace\r\n   */\r\n  @Input() workspace: Workspace;\r\n\r\n  /**\r\n   * Event emitted when a widget is deactivate which happens\r\n   * when the widget's component emits the 'cancel' or 'complete' event.\r\n   */\r\n  @Output() deactivateWidget = new EventEmitter<Widget>();\r\n\r\n  /**\r\n   * Observable of the workspace's active widget\r\n   * @internal\r\n   */\r\n  get widget$(): BehaviorSubject<Widget> { return this.workspace.widget$; }\r\n\r\n  /**\r\n   * Observable of the workspace's widget inputs\r\n   * @internal\r\n   */\r\n  get widgetInputs$(): BehaviorSubject<{[key: string]: any}> {\r\n    return this.workspace.widgetInputs$;\r\n  }\r\n\r\n  /**\r\n   * Observable of the workspace's widget inputs\r\n   * @internal\r\n   */\r\n  get widgetSubscribers$(): BehaviorSubject<{[key: string]: (event: any) => void}> {\r\n    return this.workspace.widgetSubscribers$;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * When a widget's component emit the 'cancel' event,\r\n   * deactivate that widget and emit the 'deactivateWidget' event.\r\n   * @param widget Widget\r\n   * @internal\r\n   */\r\n  onWidgetCancel(widget: Widget) {\r\n    this.workspace.deactivateWidget();\r\n    this.deactivateWidget.emit(widget);\r\n  }\r\n\r\n  /**\r\n   * When a widget's component emit the 'cancel' event,\r\n   * deactivate that widget and emit the 'deactivateWidget' event.\r\n   * @param widget Widget\r\n   * @internal\r\n   */\r\n  onWidgetComplete(widget: Widget) {\r\n    this.workspace.deactivateWidget();\r\n    this.deactivateWidget.emit(widget);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoWidgetOutletModule } from '../../widget/widget-outlet/widget-outlet.module';\r\n\r\nimport { WorkspaceWidgetOutletComponent } from './workspace-widget-outlet.component';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IgoWidgetOutletModule\r\n  ],\r\n  exports: [\r\n    WorkspaceWidgetOutletComponent\r\n  ],\r\n  declarations: [\r\n    WorkspaceWidgetOutletComponent\r\n  ]\r\n})\r\nexport class IgoWorkspaceWidgetOutletModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IgoWorkspaceSelectorModule } from './workspace-selector/workspace-selector.module';\r\nimport { IgoWorkspaceWidgetOutletModule } from './workspace-widget-outlet/workspace-widget-outlet.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    IgoWorkspaceSelectorModule,\r\n    IgoWorkspaceWidgetOutletModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class IgoWorkspaceModule {}\r\n","import { BehaviorSubject } from 'rxjs';\r\n\r\nexport class TableDatabase {\r\n  /** Stream that emits whenever the data has been modified. */\r\n  dataChange: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\r\n  get data(): any[] {\r\n    return this.dataChange.value;\r\n  }\r\n\r\n  constructor(data?) {\r\n    if (data) {\r\n      this.dataChange.next(data);\r\n    }\r\n  }\r\n\r\n  set(data) {\r\n    this.dataChange.next(data);\r\n  }\r\n\r\n  add(item) {\r\n    const copiedData = this.data.slice();\r\n    copiedData.push(item);\r\n    this.set(copiedData);\r\n  }\r\n\r\n  remove(item) {\r\n    const copiedData = this.data.slice();\r\n    const index = copiedData.indexOf(item);\r\n    copiedData.splice(index, 1);\r\n    this.set(copiedData);\r\n  }\r\n}\r\n","import { EntityRecord, EntityStore } from '../../entity';\r\nimport { Tool, ToolboxOptions } from './tool.interface';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\n\r\n/**\r\n * Service where all available tools and their component are registered.\r\n */\r\nexport class Toolbox {\r\n  /**\r\n   * Observable of the active tool\r\n   */\r\n  activeTool$: BehaviorSubject<Tool> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Ordered list of tool names to display in a toolbar\r\n   */\r\n  toolbar$: BehaviorSubject<string[]> = new BehaviorSubject([]);\r\n\r\n  /**\r\n   * Observable of the active tool\r\n   */\r\n  private activeTool$$: Subscription;\r\n\r\n  /**\r\n   * Active tool history. Useful for activating the previous tool.\r\n   */\r\n  private activeToolHistory: string[] = [];\r\n\r\n  /**\r\n   * Tool store\r\n   */\r\n  private store = new EntityStore<Tool>([], {\r\n    getKey: (tool: Tool) => tool.name\r\n  });\r\n\r\n  get tools$(): BehaviorSubject<Tool[]> {\r\n    return this.store.entities$;\r\n  }\r\n\r\n  constructor(private options: ToolboxOptions = {}) {\r\n    this.setToolbar(options.toolbar);\r\n    this.initStore();\r\n  }\r\n\r\n  /**\r\n   * Destroy the toolbox\r\n   */\r\n  destroy() {\r\n    this.activeTool$$.unsubscribe();\r\n    this.store.destroy();\r\n  }\r\n\r\n  /**\r\n   * Return a tool\r\n   * @param name Tool name\r\n   * @returns tool Tool\r\n   */\r\n  getTool(name: string): Tool {\r\n    return this.store.get(name);\r\n  }\r\n\r\n  /**\r\n   * Return all tools\r\n   * @returns Array of tools\r\n   */\r\n  getTools(): Tool[] {\r\n    return this.store.all();\r\n  }\r\n\r\n  /**\r\n   * Set tool configurations\r\n   * @param tools Tools\r\n   */\r\n  setTools(tools: Tool[]) {\r\n    this.store.load(tools);\r\n  }\r\n\r\n  /**\r\n   * Set toolbar\r\n   * @param toolbar A list of tool names\r\n   */\r\n  setToolbar(toolbar: string[]) {\r\n    this.toolbar$.next(toolbar || []);\r\n  }\r\n\r\n  /**\r\n   * Activate a tool (and deactivate other tools)\r\n   * @param name Tool name\r\n   * @param options Tool options\r\n   */\r\n  activateTool(name: string, options: { [key: string]: any } = {}) {\r\n    const tool = this.getTool(name);\r\n    if (tool === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.store.state.update(tool, { active: true, options }, true);\r\n  }\r\n\r\n  /**\r\n   * Activate the previous tool, if any\r\n   */\r\n  activatePreviousTool() {\r\n    if (this.activeToolHistory.length <= 1) {\r\n      this.deactivateTool();\r\n      return;\r\n    }\r\n    const [previous, current] = this.activeToolHistory.splice(-2, 2);\r\n    this.activateTool(previous);\r\n  }\r\n\r\n  /**\r\n   * Deactivate the active tool\r\n   */\r\n  deactivateTool() {\r\n    this.clearActiveToolHistory();\r\n    this.store.state.updateAll({ active: false });\r\n  }\r\n\r\n  /**\r\n   * Initialize the tool store and start observing the active tool\r\n   */\r\n  private initStore() {\r\n    this.store = new EntityStore<Tool>([], {\r\n      getKey: (entity: Tool) => entity.name\r\n    });\r\n\r\n    this.activeTool$$ = this.store.stateView\r\n      .firstBy$((record: EntityRecord<Tool>) => record.state.active === true)\r\n      .subscribe((record: EntityRecord<Tool>) => {\r\n        if (record === undefined) {\r\n          this.setActiveTool(undefined);\r\n          return;\r\n        }\r\n\r\n        const tool = record.entity;\r\n        const options = Object.assign(\r\n          {},\r\n          tool.options || {},\r\n          record.state.options || {}\r\n        );\r\n        this.setActiveTool(Object.assign({}, tool, { options }));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set the active tool and update the tool history\r\n   * @param tool Tool\r\n   */\r\n  private setActiveTool(tool: Tool | undefined) {\r\n    this.activeTool$.next(tool);\r\n    if (tool === undefined) {\r\n      this.clearActiveToolHistory();\r\n    } else {\r\n      this.activeToolHistory = this.activeToolHistory\r\n        .filter((name: string) => name !== tool.name)\r\n        .concat([tool.name]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the tool history\r\n   */\r\n  private clearActiveToolHistory() {\r\n    this.activeToolHistory = [];\r\n  }\r\n}\r\n","import { DynamicComponent } from '../../dynamic-component/shared/dynamic-component';\r\nimport { WidgetComponent } from './widget.interfaces';\r\n\r\nexport class Widget extends DynamicComponent<WidgetComponent> {}\r\n","import { EntityStore } from '../../entity';\r\nimport { Workspace } from './workspace';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * workspaces.\r\n */\r\nexport class WorkspaceStore extends EntityStore<Workspace> {\r\n\r\n  activeWorkspace$: BehaviorSubject<Workspace> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Activate the an workspace workspace and deactivate the one currently active\r\n   * @param workspace Workspace\r\n   */\r\n  activateWorkspace(workspace: Workspace) {\r\n    const active = this.activeWorkspace$.value;\r\n    if (active !== undefined) {\r\n      active.deactivate();\r\n    }\r\n\r\n    this.deactivateWorkspace();\r\n    if (workspace !== undefined) {\r\n      this.state.update(workspace, {active: true, selected: true}, true);\r\n      this.activeWorkspace$.next(workspace);\r\n      workspace.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the current workspace\r\n   * @param workspace Workspace\r\n   */\r\n  deactivateWorkspace() {\r\n    const active = this.activeWorkspace$.value;\r\n    if (active !== undefined) {\r\n      active.deactivate();\r\n      this.activeWorkspace$.next(undefined);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Subscription, BehaviorSubject, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { ActionStore } from '../../action';\r\nimport { Widget } from '../../widget';\r\nimport { EntityRecord, EntityStore } from '../../entity';\r\n\r\nimport { WorkspaceOptions } from './workspace.interfaces';\r\n\r\n/**\r\n * This class is responsible of managing the relations between\r\n * entities and the actions that consume them. It also defines an\r\n * entity table template that may be used by an entity table component.\r\n */\r\nexport class Workspace<E extends object = object> {\r\n\r\n  /**\r\n   * Observable of the selected entity\r\n   */\r\n  public entity$ = new BehaviorSubject<E>(undefined);\r\n\r\n  /**\r\n   * Observable of the selected widget\r\n   */\r\n  public widget$ = new BehaviorSubject<Widget>(undefined);\r\n\r\n  /**\r\n   * Observable of the selected widget's inputs\r\n   */\r\n  public widgetInputs$ = new BehaviorSubject<{[key: string]: any}>({});\r\n\r\n  /**\r\n   * Observable of the selected widget's subscribers\r\n   */\r\n  public widgetSubscribers$ = new BehaviorSubject<{[key: string]: (event: any) => void}>({});\r\n\r\n  /**\r\n   * Subscription to the selected entity\r\n   */\r\n  private entities$$: Subscription;\r\n\r\n  /**\r\n   * Whether this workspace is active\r\n   */\r\n  private active: boolean = false;\r\n\r\n  /**\r\n   * State change that trigger an update of the actions availability\r\n   */\r\n  private changes$: Subject<void> = new Subject();\r\n\r\n  /**\r\n   * Subscription to state changes\r\n   */\r\n  private changes$$: Subscription;\r\n\r\n  /**\r\n   * Workspace id\r\n   */\r\n  get id(): string { return this.options.id; }\r\n\r\n  /**\r\n   * Workspace title\r\n   */\r\n  get title(): string { return this.options.title; }\r\n\r\n  /**\r\n   * Workspace title\r\n   */\r\n  get meta(): {[key: string]: any} { return this.options.meta || {}; }\r\n\r\n  /**\r\n   * Entities store\r\n   */\r\n  get entityStore(): EntityStore<E> { return this.options.entityStore as EntityStore<E>; }\r\n\r\n  /**\r\n   * Actions store (some actions activate a widget)\r\n   */\r\n  get actionStore(): ActionStore { return this.options.actionStore; }\r\n\r\n  /**\r\n   * Selected entity\r\n   */\r\n  get entity(): E { return this.entity$.value; }\r\n\r\n  /**\r\n   * Selected widget\r\n   */\r\n  get widget(): Widget { return this.widget$.value; }\r\n\r\n  /**\r\n   * Whether a widget is selected\r\n   */\r\n  get hasWidget(): boolean { return this.widget !== undefined; }\r\n\r\n  constructor(protected options: WorkspaceOptions) {}\r\n\r\n  /**\r\n   * Whether this workspace is active\r\n   */\r\n  isActive(): boolean { return this.active; }\r\n\r\n  /**\r\n   * Activate the workspace. By doing that, the workspace will observe\r\n   * the selected entity (from the store) and update the actions availability.\r\n   * For example, some actions require an entity to be selected.\r\n   */\r\n  activate() {\r\n    if (this.active === true) {\r\n      this.deactivate();\r\n    }\r\n    this.active = true;\r\n\r\n    if (this.entityStore !== undefined) {\r\n      this.entities$$ = this.entityStore.stateView\r\n        .manyBy$((record: EntityRecord<E>) => record.state.selected === true)\r\n        .subscribe((records: EntityRecord<E>[]) => {\r\n          // If more than one entity is selected, consider that no entity at all is selected.\r\n          const entity = (records.length === 0 || records.length > 1) ? undefined : records[0].entity;\r\n          this.onSelectEntity(entity);\r\n        });\r\n    }\r\n\r\n    if (this.actionStore !== undefined) {\r\n      this.changes$$ = this.changes$\r\n        .pipe(debounceTime(50))\r\n        .subscribe(() => this.actionStore.updateActionsAvailability());\r\n    }\r\n\r\n    this.changes$.next();\r\n  }\r\n\r\n  /**\r\n   * Deactivate the workspace. Unsubcribe to the selected entity.\r\n   */\r\n  deactivate() {\r\n    this.active = false;\r\n    this.deactivateWidget();\r\n\r\n    if (this.entities$$ !== undefined) {\r\n      this.entities$$.unsubscribe();\r\n    }\r\n    if (this.changes$$ !== undefined) {\r\n      this.changes$$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate a widget. In itself, activating a widget doesn't render it but,\r\n   * if an WorkspaceWidgetOutlet component is bound to this workspace, the widget will\r\n   * show up.\r\n   * @param widget Widget\r\n   * @param inputs Inputs the widget will receive\r\n   */\r\n  activateWidget(\r\n    widget: Widget,\r\n    inputs: {[key: string]: any} = {},\r\n    subscribers: {[key: string]: (event: any) => void} = {}\r\n  ) {\r\n    this.widget$.next(widget);\r\n    this.widgetInputs$.next(inputs);\r\n    this.widgetSubscribers$.next(subscribers);\r\n  }\r\n\r\n  /**\r\n   * Deactivate a widget.\r\n   */\r\n  deactivateWidget() {\r\n    this.widget$.next(undefined);\r\n    this.changes$.next();\r\n  }\r\n\r\n  /**\r\n   * When an entity is selected, keep a reference to that\r\n   * entity and update the actions availability.\r\n   * @param entity Entity\r\n   */\r\n  private onSelectEntity(entity: E) {\r\n    if (entity === this.entity$.value) {\r\n      return;\r\n    }\r\n    this.entity$.next(entity);\r\n    this.changes$.next();\r\n  }\r\n\r\n}\r\n","import { Tool } from './tool.interface';\r\nimport { ToolService } from './tool.service';\r\n\r\nexport function ToolComponent(tool: Partial<Tool>): (cls: any) => any {\r\n  return (compType: any) => {\r\n    ToolService.register(Object.assign({}, tool, {\r\n      component: compType\r\n    } as Tool));\r\n  };\r\n}\r\n"]}