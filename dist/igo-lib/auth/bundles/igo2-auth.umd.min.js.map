{"version":3,"sources":["ng://@igo2/auth/lib/shared/token.service.ts","ng://@igo2/auth/lib/shared/auth.service.ts","ng://@igo2/auth/lib/auth-form/auth-form.component.ts","ng://@igo2/auth/lib/auth-form/auth-intern.component.ts","ng://@igo2/auth/lib/auth-form/auth-facebook.component.ts","ng://@igo2/auth/lib/auth-form/auth-google.component.ts","ng://@igo2/auth/lib/shared/logged.guard.ts","ng://@igo2/auth/lib/shared/auth.guard.ts","ng://@igo2/auth/lib/shared/admin.guard.ts","ng://@igo2/auth/lib/shared/profils.guard.ts","ng://@igo2/auth/lib/shared/auth.interceptor.ts","ng://@igo2/auth/lib/shared/protected.directive.ts","ng://@igo2/auth/lib/auth-routing.module.ts","ng://@igo2/auth/lib/auth.module.ts"],"names":["TokenService","injector","this","prototype","set","token","localStorage","setItem","tokenKey","remove","removeItem","get","getItem","decode","jwtDecode","isExpired","jwt","currentTime","Date","getTime","exp","Object","defineProperty","config","ConfigService","options","getConfig","Injectable","args","providedIn","Injector","AuthService","http","tokenService","languageService","router","authenticate$","BehaviorSubject","undefined","anonymous","next","authenticated","login","username","password","myHeader","HttpHeaders","append","body","JSON","stringify","encodePassword","loginCall","loginWithToken","type","typeConnection","loginAnonymous","of","logout","isAuthenticated","getToken","decodeToken","goToRedirectUrl","redirectUrl","url","loginRoute","homeRoute","navigateByUrl","getUserInfo","getProfils","updateUser","user","patch","Base64","encode","isAnonymous","headers","_this","post","pipe","tap","data","tokenDecoded","locale","setLanguage","HttpClient","LanguageService","Router","decorators","Optional","AuthFormComponent","auth","_backgroundDisable","_hasAlreadyConnectedDiv","_hasLogoutDiv","_showAlreadyConnectedDiv","_showLogoutDiv","visible","getOwnPropertyNames","length","isLogoutRoute","value","toString","hasAlreadyConnectedDiv","hasLogoutDiv","ngOnInit","analyzeRoute","getName","subscribe","logoutRoute","navigate","home","name","firstName","sourceId","events","filter","event","NavigationStart","changeEvent","currentRoute","isLoginRoute","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","Input","AuthInternComponent","fb","_allowAnonymous","error","EventEmitter","form","group","Validators","required","loginUser","values","emit","message","FormBuilder","Output","AuthFacebookComponent","authService","appRef","apiKey","loadSDKFacebook","subscribeEvents","FB","Event","rep","statusChangeCallback","response","status","accessToken","authResponse","loginFacebook","tick","document","getElementById","fjs","getElementsByTagName","js","createElement","id","src","urlSDK","onload","parentNode","insertBefore","OnPush","ApplicationRef","AuthGoogleComponent","clientId","loadSDKGoogle","loadPlatform","handleSignInClick","gapi","auth2","getAuthInstance","signIn","handleSignOutClick","signOut","handleClientLoad","load","initClient","client","init","discoveryDocs","scope","then","isSignedIn","listen","updateSigninStatus","loginGoogle","access_token","LoggedGuard","canActivate","route","state","logged","authConfig","AuthGuard","AdminGuard","isAdmin","ProfilsGuard","map","profils","some","v","profilsGuard","indexOf","AuthInterceptor","trustHosts","push","window","location","hostname","intercept","req","element","href","handle","authHeader","authReq","clone","ProtectedDirective","authentication","el","nativeElement","removeChild","Directive","ElementRef","routes","path","component","AuthRoutingModule","NgModule","imports","RouterModule","forChild","exports","providers","IgoAuthModule","forRoot","ngModule","provide","HTTP_INTERCEPTORS","useClass","multi","CommonModule","ReactiveFormsModule","MatFormFieldModule","MatInputModule","MatButtonModule","IgoLanguageModule","declarations"],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthOptions } from './auth.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n  private options: AuthOptions;\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  set(token) {\r\n    localStorage.setItem(this.tokenKey, token);\r\n  }\r\n\r\n  remove() {\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n\r\n  get(): string {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  decode() {\r\n    const token = this.get();\r\n    if (!token) {\r\n      return;\r\n    }\r\n    return jwtDecode(token);\r\n  }\r\n\r\n  isExpired() {\r\n    const jwt = this.decode();\r\n    const currentTime = new Date().getTime() / 1000;\r\n    if (jwt && currentTime < jwt.exp) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private get tokenKey() {\r\n    const config = this.injector.get(ConfigService);\r\n    this.options = config.getConfig('auth') || {};\r\n    return this.options.tokenKey;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Observable, BehaviorSubject, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\nimport { Base64 } from '@igo2/utils';\r\n\r\nimport { AuthOptions, User } from './auth.interface';\r\nimport { TokenService } from './token.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  public authenticate$ = new BehaviorSubject<boolean>(undefined);\r\n  public redirectUrl: string;\r\n  private options: AuthOptions;\r\n  private anonymous = false;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private tokenService: TokenService,\r\n    private config: ConfigService,\r\n    private languageService: LanguageService,\r\n    @Optional() private router: Router\r\n  ) {\r\n    this.options = this.config.getConfig('auth') || {};\r\n    this.authenticate$.next(this.authenticated);\r\n  }\r\n\r\n  login(username: string, password: string): any {\r\n    const myHeader = new HttpHeaders();\r\n    myHeader.append('Content-Type', 'application/json');\r\n\r\n    const body = JSON.stringify({\r\n      username,\r\n      password: this.encodePassword(password)\r\n    });\r\n\r\n    return this.loginCall(body, myHeader);\r\n  }\r\n\r\n  loginWithToken(token: string, type: string): any {\r\n    const myHeader = new HttpHeaders();\r\n    myHeader.append('Content-Type', 'application/json');\r\n\r\n    const body = JSON.stringify({\r\n      token,\r\n      typeConnection: type\r\n    });\r\n\r\n    return this.loginCall(body, myHeader);\r\n  }\r\n\r\n  loginAnonymous() {\r\n    this.anonymous = true;\r\n    return of(true);\r\n  }\r\n\r\n  logout() {\r\n    this.anonymous = false;\r\n    this.tokenService.remove();\r\n    this.authenticate$.next(false);\r\n    return of(true);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !this.tokenService.isExpired();\r\n  }\r\n\r\n  getToken(): string {\r\n    return this.tokenService.get();\r\n  }\r\n\r\n  decodeToken() {\r\n    if (this.isAuthenticated()) {\r\n      return this.tokenService.decode();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  goToRedirectUrl() {\r\n    if (!this.router) {\r\n      return;\r\n    }\r\n    const redirectUrl = this.redirectUrl || this.router.url;\r\n\r\n    if (redirectUrl === this.options.loginRoute) {\r\n      const homeRoute = this.options.homeRoute || '/';\r\n      this.router.navigateByUrl(homeRoute);\r\n    } else if (redirectUrl) {\r\n      this.router.navigateByUrl(redirectUrl);\r\n    }\r\n  }\r\n\r\n  getUserInfo(): Observable<User> {\r\n    const url = this.options.url + '/info';\r\n    return this.http.get<User>(url);\r\n  }\r\n\r\n  getProfils() {\r\n    return this.http.get(`${this.options.url}/profils`);\r\n  }\r\n\r\n  updateUser(user: User): Observable<User> {\r\n    const url = this.options.url;\r\n    return this.http.patch<User>(url, JSON.stringify(user));\r\n  }\r\n\r\n  private encodePassword(password: string) {\r\n    return Base64.encode(password);\r\n  }\r\n\r\n  // authenticated or anonymous\r\n  get logged(): boolean {\r\n    return this.authenticated || this.isAnonymous;\r\n  }\r\n\r\n  get isAnonymous(): boolean {\r\n    return this.anonymous;\r\n  }\r\n\r\n  get authenticated(): boolean {\r\n    return this.isAuthenticated();\r\n  }\r\n\r\n  private loginCall(body, headers) {\r\n    return this.http\r\n      .post(`${this.options.url}/login`, body, { headers })\r\n      .pipe(\r\n        tap((data: any) => {\r\n          this.tokenService.set(data.token);\r\n          const tokenDecoded = this.decodeToken();\r\n          if (tokenDecoded && tokenDecoded.user && tokenDecoded.user.locale) {\r\n            this.languageService.setLanguage(tokenDecoded.user.locale);\r\n          }\r\n          this.authenticate$.next(true);\r\n        })\r\n      );\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  Input,\r\n  Optional\r\n} from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthOptions } from '../shared/auth.interface';\r\nimport { AuthService } from '../shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'igo-auth-form',\r\n  templateUrl: './auth-form.component.html',\r\n  styleUrls: ['./auth-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class AuthFormComponent implements OnInit {\r\n  @Input()\r\n  get backgroundDisable(): boolean {\r\n    if (this.isLogoutRoute || this.isLogoutRoute) {\r\n      return false;\r\n    }\r\n    return this._backgroundDisable;\r\n  }\r\n  set backgroundDisable(value: boolean) {\r\n    this._backgroundDisable = value.toString() === 'true';\r\n  }\r\n  private _backgroundDisable = true;\r\n\r\n  @Input()\r\n  get hasAlreadyConnectedDiv(): boolean {\r\n    return this._hasAlreadyConnectedDiv;\r\n  }\r\n  set hasAlreadyConnectedDiv(value: boolean) {\r\n    this._hasAlreadyConnectedDiv = value.toString() === 'true';\r\n  }\r\n  private _hasAlreadyConnectedDiv = true;\r\n\r\n  @Input()\r\n  get hasLogoutDiv(): boolean {\r\n    return this._hasLogoutDiv;\r\n  }\r\n  set hasLogoutDiv(value: boolean) {\r\n    this._hasLogoutDiv = value.toString() === 'true';\r\n  }\r\n  private _hasLogoutDiv = true;\r\n\r\n  @Input()\r\n  get showAlreadyConnectedDiv(): boolean {\r\n    if (this.isLogoutRoute) {\r\n      return this.hasAlreadyConnectedDiv;\r\n    }\r\n    return this._showAlreadyConnectedDiv;\r\n  }\r\n  set showAlreadyConnectedDiv(value: boolean) {\r\n    this._showAlreadyConnectedDiv = value.toString() === 'true';\r\n  }\r\n  private _showAlreadyConnectedDiv = false;\r\n\r\n  @Input()\r\n  get showLogoutDiv(): boolean {\r\n    if (this.isLogoutRoute) {\r\n      return this.hasLogoutDiv;\r\n    }\r\n    return this._showLogoutDiv;\r\n  }\r\n  set showLogoutDiv(value: boolean) {\r\n    this._showLogoutDiv = value.toString() === 'true';\r\n  }\r\n  private _showLogoutDiv = false;\r\n\r\n  get showLoginDiv(): boolean {\r\n    if (!this.isLogoutRoute) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public options: AuthOptions;\r\n  public user;\r\n\r\n  public visible = true;\r\n\r\n  private isLoginRoute: boolean;\r\n  private isLogoutRoute: boolean;\r\n\r\n  constructor(\r\n    public auth: AuthService,\r\n    private config: ConfigService,\r\n    @Optional() private router: Router\r\n  ) {\r\n    this.options = this.config.getConfig('auth') || {};\r\n    this.visible = Object.getOwnPropertyNames(this.options).length !== 0;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.analyzeRoute();\r\n    this.getName();\r\n  }\r\n\r\n  public login() {\r\n    this.auth.goToRedirectUrl();\r\n    this.getName();\r\n  }\r\n\r\n  public logout() {\r\n    this.auth.logout().subscribe(() => {\r\n      this.user = undefined;\r\n      if (this.router) {\r\n        if (this.options.logoutRoute) {\r\n          this.router.navigate([this.options.logoutRoute]);\r\n        } else if (this.options.homeRoute) {\r\n          this.router.navigate([this.options.homeRoute]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public home() {\r\n    if (this.router && this.options.homeRoute) {\r\n      this.router.navigate([this.options.homeRoute]);\r\n    }\r\n  }\r\n\r\n  private getName() {\r\n    if (this.auth.decodeToken()) {\r\n      const tokenDecoded = this.auth.decodeToken();\r\n      this.user = {\r\n        name: tokenDecoded.user.firstName || tokenDecoded.user.sourceId\r\n      };\r\n    }\r\n  }\r\n\r\n  private analyzeRoute() {\r\n    if (!this.router) {\r\n      return;\r\n    }\r\n\r\n    this.router.events\r\n      .pipe(filter(event => event instanceof NavigationStart))\r\n      .subscribe((changeEvent: any) => {\r\n        if (changeEvent.url) {\r\n          const currentRoute = changeEvent.url;\r\n          const logoutRoute = this.options.logoutRoute;\r\n          const loginRoute = this.options.loginRoute;\r\n\r\n          this.isLogoutRoute = currentRoute === logoutRoute;\r\n          this.isLoginRoute = currentRoute === loginRoute;\r\n\r\n          if (this.isLogoutRoute) {\r\n            this.auth.logout();\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { AuthService } from '../shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'igo-auth-intern',\r\n  templateUrl: './auth-intern.component.html',\r\n  styleUrls: ['./auth-intern.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class AuthInternComponent {\r\n  @Input()\r\n  get allowAnonymous(): boolean {\r\n    return this._allowAnonymous;\r\n  }\r\n  set allowAnonymous(value: boolean) {\r\n    this._allowAnonymous = value;\r\n  }\r\n  private _allowAnonymous = true;\r\n\r\n  public error = '';\r\n  public form: FormGroup;\r\n\r\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor(public auth: AuthService, fb: FormBuilder) {\r\n    this.form = fb.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  loginUser(values: any) {\r\n    this.auth.login(values.username, values.password).subscribe(\r\n      () => {\r\n        this.login.emit(true);\r\n      },\r\n      (error: any) => {\r\n        this.error = error.error.message;\r\n      }\r\n    );\r\n    return false;\r\n  }\r\n\r\n  loginAnonymous() {\r\n    this.auth.loginAnonymous().subscribe(() => {\r\n      this.login.emit(true);\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ApplicationRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthFacebookOptions } from '../shared/auth.interface';\r\nimport { AuthService } from '../shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'igo-auth-facebook',\r\n  templateUrl: './auth-facebook.component.html',\r\n  styleUrls: ['./auth-facebook.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AuthFacebookComponent {\r\n  private options: AuthFacebookOptions;\r\n\r\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private appRef: ApplicationRef\r\n  ) {\r\n    this.options = this.config.getConfig('auth.facebook') || {};\r\n\r\n    if (this.options.apiKey) {\r\n      this.loadSDKFacebook();\r\n    }\r\n  }\r\n\r\n  private subscribeEvents() {\r\n    (window as any).FB.Event.subscribe('auth.statusChange', rep => {\r\n      this.statusChangeCallback(rep);\r\n    });\r\n  }\r\n\r\n  private statusChangeCallback(response) {\r\n    if (response.status === 'connected') {\r\n      const accessToken = response.authResponse.accessToken;\r\n      this.loginFacebook(accessToken);\r\n    }\r\n  }\r\n\r\n  private loginFacebook(token) {\r\n    this.authService.loginWithToken(token, 'facebook').subscribe(() => {\r\n      this.appRef.tick();\r\n      this.login.emit(true);\r\n    });\r\n  }\r\n\r\n  private loadSDKFacebook() {\r\n    if (document.getElementById('facebook-jssdk')) {\r\n      return;\r\n    }\r\n\r\n    const urlSDK =\r\n      'https://connect.facebook.net/fr_CA/sdk.js#xfbml=1&version=v2.9';\r\n\r\n    const fjs = document.getElementsByTagName('script')[0];\r\n    const js = document.createElement('script');\r\n    js.id = 'facebook-jssdk';\r\n    js.src = `${urlSDK}&appId=${this.options.apiKey}`;\r\n    js.onload = () => {\r\n      this.subscribeEvents();\r\n    };\r\n    fjs.parentNode.insertBefore(js, fjs);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ApplicationRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthGoogleOptions } from '../shared/auth.interface';\r\nimport { AuthService } from '../shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'igo-auth-google',\r\n  templateUrl: './auth-google.component.html',\r\n  styleUrls: ['./auth-google.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AuthGoogleComponent {\r\n  private options: AuthGoogleOptions;\r\n\r\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private appRef: ApplicationRef\r\n  ) {\r\n    this.options = this.config.getConfig('auth.google') || {};\r\n\r\n    if (this.options.apiKey && this.options.clientId) {\r\n      this.loadSDKGoogle();\r\n      this.loadPlatform();\r\n    }\r\n  }\r\n\r\n  public handleSignInClick() {\r\n    (window as any).gapi.auth2.getAuthInstance().signIn();\r\n  }\r\n\r\n  public handleSignOutClick() {\r\n    (window as any).gapi.auth2.getAuthInstance().signOut();\r\n  }\r\n\r\n  private handleClientLoad() {\r\n    (window as any).gapi.load('client:auth2', () => this.initClient());\r\n  }\r\n\r\n  private initClient() {\r\n    (window as any).gapi.client\r\n      .init({\r\n        apiKey: this.options.apiKey,\r\n        clientId: this.options.clientId,\r\n        discoveryDocs: [\r\n          'https://people.googleapis.com/$discovery/rest?version=v1'\r\n        ],\r\n        scope: 'profile'\r\n      })\r\n      .then(() => {\r\n        this.handleSignOutClick();\r\n        (window as any).gapi.auth2.getAuthInstance().isSignedIn.listen(rep => {\r\n          this.updateSigninStatus(rep);\r\n        });\r\n      });\r\n  }\r\n\r\n  private updateSigninStatus(isSignedIn) {\r\n    if (isSignedIn) {\r\n      this.loginGoogle((window as any).gapi.client.getToken().access_token);\r\n    }\r\n  }\r\n\r\n  private loginGoogle(token) {\r\n    this.authService.loginWithToken(token, 'google').subscribe(() => {\r\n      this.appRef.tick();\r\n      this.login.emit(true);\r\n    });\r\n  }\r\n\r\n  private loadSDKGoogle() {\r\n    const fjs = document.getElementsByTagName('script')[0];\r\n    const js = document.createElement('script');\r\n    js.id = 'google-jssdk';\r\n    js.src = 'https://apis.google.com/js/api.js';\r\n    js.onload = () => {\r\n      this.handleClientLoad();\r\n    };\r\n    fjs.parentNode.insertBefore(js, fjs);\r\n  }\r\n\r\n  private loadPlatform() {\r\n    const fjs = document.getElementsByTagName('script')[0];\r\n    const js = document.createElement('script');\r\n    js.id = 'google-platform';\r\n    js.src = 'https://apis.google.com/js/platform.js';\r\n    fjs.parentNode.insertBefore(js, fjs);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggedGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.authService.logged) {\r\n      return true;\r\n    }\r\n\r\n    this.authService.redirectUrl = state.url;\r\n\r\n    const authConfig = this.config.getConfig('auth');\r\n    if (authConfig && authConfig.loginRoute) {\r\n      this.router.navigateByUrl(authConfig.loginRoute);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.authService.authenticated) {\r\n      return true;\r\n    }\r\n\r\n    this.authService.redirectUrl = state.url;\r\n\r\n    const authConfig = this.config.getConfig('auth');\r\n    if (authConfig && authConfig.loginRoute) {\r\n      this.router.navigateByUrl(authConfig.loginRoute);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const token = this.authService.decodeToken();\r\n    if (token && token.user && token.user.isAdmin) {\r\n      return true;\r\n    }\r\n\r\n    this.authService.redirectUrl = state.url;\r\n\r\n    const authConfig = this.config.getConfig('auth');\r\n    if (authConfig && authConfig.loginRoute) {\r\n      this.router.navigateByUrl(authConfig.loginRoute);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfilsGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    return this.authService.getProfils().pipe(\r\n      map((profils: string[]) => {\r\n        const authConfig = this.config.getConfig('auth');\r\n\r\n        if (\r\n          profils &&\r\n          profils.some(v => authConfig.profilsGuard.indexOf(v) !== -1)\r\n        ) {\r\n          return true;\r\n        }\r\n\r\n        this.authService.redirectUrl = state.url;\r\n\r\n        if (authConfig && authConfig.loginRoute) {\r\n          this.router.navigateByUrl(authConfig.loginRoute);\r\n        }\r\n\r\n        return false;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { TokenService } from './token.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  private trustHosts: string[] = [];\r\n\r\n  constructor(\r\n    private config: ConfigService,\r\n    private tokenService: TokenService\r\n  ) {\r\n    this.trustHosts = this.config.getConfig('auth.trustHosts') || [];\r\n    this.trustHosts.push(window.location.hostname);\r\n  }\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = this.tokenService.get();\r\n    const element = document.createElement('a');\r\n    element.href = req.url;\r\n\r\n    if (!token && this.trustHosts.indexOf(element.hostname) === -1) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const authHeader = `Bearer ${token}`;\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('Authorization', authHeader)\r\n    });\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Directive({\r\n  selector: '[igoProtected]'\r\n})\r\nexport class ProtectedDirective {\r\n  constructor(authentication: AuthService, el: ElementRef) {\r\n    if (!authentication.isAuthenticated()) {\r\n      el.nativeElement.parentNode.removeChild(el.nativeElement);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AuthFormComponent } from './auth-form/auth-form.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: AuthFormComponent },\r\n  { path: 'logout', component: AuthFormComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n  providers: []\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatButtonModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { ProtectedDirective } from './shared/protected.directive';\r\nimport { AuthInterceptor } from './shared/auth.interceptor';\r\n\r\nimport { AuthInternComponent } from './auth-form/auth-intern.component';\r\nimport { AuthFormComponent } from './auth-form/auth-form.component';\r\nimport { AuthGoogleComponent } from './auth-form/auth-google.component';\r\nimport { AuthFacebookComponent } from './auth-form/auth-facebook.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule\r\n  ],\r\n  declarations: [\r\n    AuthFormComponent,\r\n    AuthGoogleComponent,\r\n    AuthInternComponent,\r\n    AuthFacebookComponent,\r\n    ProtectedDirective\r\n  ],\r\n  exports: [AuthFormComponent, ProtectedDirective]\r\n})\r\nexport class IgoAuthModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoAuthModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}