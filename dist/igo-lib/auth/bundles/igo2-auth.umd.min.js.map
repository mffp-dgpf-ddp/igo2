{"version":3,"sources":["ng://@igo2/auth/lib/shared/token.service.ts","ng://@igo2/auth/lib/shared/auth.service.ts","ng://@igo2/auth/lib/auth-form/auth-form.component.ts","ng://@igo2/auth/lib/auth-form/auth-intern.component.ts","ng://@igo2/auth/lib/auth-form/auth-facebook.component.ts","ng://@igo2/auth/lib/auth-form/auth-google.component.ts","ng://@igo2/auth/lib/shared/logged.guard.ts","ng://@igo2/auth/lib/shared/auth.guard.ts","ng://@igo2/auth/lib/shared/admin.guard.ts","ng://@igo2/auth/lib/shared/profils.guard.ts","ng://@igo2/auth/lib/shared/auth.interceptor.ts","ng://@igo2/auth/lib/shared/protected.directive.ts","ng://@igo2/auth/lib/auth-routing.module.ts","ng://@igo2/auth/lib/auth.module.ts"],"names":["TokenService","prototype","set","token","localStorage","setItem","this","tokenKey","remove","removeItem","get","getItem","decode","jwtDecode","isExpired","jwt","currentTime","Date","getTime","exp","Object","defineProperty","config","injector","ConfigService","options","getConfig","Injectable","args","providedIn","Injector","AuthService","login","username","password","myHeader","HttpHeaders","append","body","JSON","stringify","encodePassword","loginCall","loginWithToken","type","typeConnection","loginAnonymous","anonymous","of","logout","tokenService","authenticate$","next","isAuthenticated","getToken","decodeToken","goToRedirectUrl","router","redirectUrl","url","loginRoute","homeRoute","navigateByUrl","getUserInfo","http","getProfils","updateUser","user","patch","Base64","encode","authenticated","isAnonymous","headers","_this","post","pipe","tap","data","tokenDecoded","locale","languageService","setLanguage","HttpClient","LanguageService","Router","decorators","Optional","BehaviorSubject","undefined","AuthFormComponent","isLogoutRoute","_backgroundDisable","value","toString","_hasAlreadyConnectedDiv","_hasLogoutDiv","hasAlreadyConnectedDiv","_showAlreadyConnectedDiv","hasLogoutDiv","_showLogoutDiv","ngOnInit","analyzeRoute","getName","auth","subscribe","logoutRoute","navigate","home","name","firstName","sourceId","events","filter","event","NavigationStart","changeEvent","currentRoute","isLoginRoute","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","Input","visible","getOwnPropertyNames","length","AuthInternComponent","_allowAnonymous","loginUser","values","emit","error","message","FormBuilder","Output","fb","EventEmitter","form","group","Validators","required","AuthFacebookComponent","subscribeEvents","FB","Event","rep","statusChangeCallback","response","status","accessToken","authResponse","loginFacebook","authService","appRef","tick","loadSDKFacebook","document","getElementById","fjs","getElementsByTagName","js","createElement","id","src","urlSDK","apiKey","onload","parentNode","insertBefore","OnPush","ApplicationRef","AuthGoogleComponent","handleSignInClick","gapi","auth2","getAuthInstance","signIn","handleSignOutClick","signOut","handleClientLoad","load","initClient","client","init","clientId","discoveryDocs","scope","then","isSignedIn","listen","updateSigninStatus","loginGoogle","access_token","loadSDKGoogle","loadPlatform","LoggedGuard","canActivate","route","state","logged","authConfig","AuthGuard","AdminGuard","isAdmin","ProfilsGuard","map","profils","some","v","profilsGuard","indexOf","AuthInterceptor","intercept","req","element","href","trustHosts","hostname","handle","authHeader","authReq","clone","push","window","location","ProtectedDirective","Directive","ElementRef","authentication","el","nativeElement","removeChild","routes","path","component","AuthRoutingModule","NgModule","imports","RouterModule","forChild","exports","providers","IgoAuthModule","forRoot","ngModule","provide","HTTP_INTERCEPTORS","useClass","multi","CommonModule","ReactiveFormsModule","MatFormFieldModule","MatInputModule","MatButtonModule","IgoLanguageModule","declarations"],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthOptions } from './auth.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n  private options: AuthOptions;\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  set(token) {\r\n    localStorage.setItem(this.tokenKey, token);\r\n  }\r\n\r\n  remove() {\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n\r\n  get(): string {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  decode() {\r\n    const token = this.get();\r\n    if (!token) {\r\n      return;\r\n    }\r\n    return jwtDecode(token);\r\n  }\r\n\r\n  isExpired() {\r\n    const jwt = this.decode();\r\n    const currentTime = new Date().getTime() / 1000;\r\n    if (jwt && currentTime < jwt.exp) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private get tokenKey() {\r\n    const config = this.injector.get(ConfigService);\r\n    this.options = config.getConfig('auth') || {};\r\n    return this.options.tokenKey;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Observable, BehaviorSubject, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { ConfigService, LanguageService } from '@igo2/core';\r\nimport { Base64 } from '@igo2/utils';\r\n\r\nimport { AuthOptions, User } from './auth.interface';\r\nimport { TokenService } from './token.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  public authenticate$ = new BehaviorSubject<boolean>(undefined);\r\n  public redirectUrl: string;\r\n  private options: AuthOptions;\r\n  private anonymous = false;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private tokenService: TokenService,\r\n    private config: ConfigService,\r\n    private languageService: LanguageService,\r\n    @Optional() private router: Router\r\n  ) {\r\n    this.options = this.config.getConfig('auth') || {};\r\n    this.authenticate$.next(this.authenticated);\r\n  }\r\n\r\n  login(username: string, password: string): any {\r\n    const myHeader = new HttpHeaders();\r\n    myHeader.append('Content-Type', 'application/json');\r\n\r\n    const body = JSON.stringify({\r\n      username,\r\n      password: this.encodePassword(password)\r\n    });\r\n\r\n    return this.loginCall(body, myHeader);\r\n  }\r\n\r\n  loginWithToken(token: string, type: string): any {\r\n    const myHeader = new HttpHeaders();\r\n    myHeader.append('Content-Type', 'application/json');\r\n\r\n    const body = JSON.stringify({\r\n      token,\r\n      typeConnection: type\r\n    });\r\n\r\n    return this.loginCall(body, myHeader);\r\n  }\r\n\r\n  loginAnonymous() {\r\n    this.anonymous = true;\r\n    return of(true);\r\n  }\r\n\r\n  logout() {\r\n    this.anonymous = false;\r\n    this.tokenService.remove();\r\n    this.authenticate$.next(false);\r\n    return of(true);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !this.tokenService.isExpired();\r\n  }\r\n\r\n  getToken(): string {\r\n    return this.tokenService.get();\r\n  }\r\n\r\n  decodeToken() {\r\n    if (this.isAuthenticated()) {\r\n      return this.tokenService.decode();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  goToRedirectUrl() {\r\n    if (!this.router) {\r\n      return;\r\n    }\r\n    const redirectUrl = this.redirectUrl || this.router.url;\r\n\r\n    if (redirectUrl === this.options.loginRoute) {\r\n      const homeRoute = this.options.homeRoute || '/';\r\n      this.router.navigateByUrl(homeRoute);\r\n    } else if (redirectUrl) {\r\n      this.router.navigateByUrl(redirectUrl);\r\n    }\r\n  }\r\n\r\n  getUserInfo(): Observable<User> {\r\n    const url = this.options.url + '/info';\r\n    return this.http.get<User>(url);\r\n  }\r\n\r\n  getProfils() {\r\n    return this.http.get(`${this.options.url}/profils`);\r\n  }\r\n\r\n  updateUser(user: User): Observable<User> {\r\n    const url = this.options.url;\r\n    return this.http.patch<User>(url, JSON.stringify(user));\r\n  }\r\n\r\n  private encodePassword(password: string) {\r\n    return Base64.encode(password);\r\n  }\r\n\r\n  // authenticated or anonymous\r\n  get logged(): boolean {\r\n    return this.authenticated || this.isAnonymous;\r\n  }\r\n\r\n  get isAnonymous(): boolean {\r\n    return this.anonymous;\r\n  }\r\n\r\n  get authenticated(): boolean {\r\n    return this.isAuthenticated();\r\n  }\r\n\r\n  private loginCall(body, headers) {\r\n    return this.http\r\n      .post(`${this.options.url}/login`, body, { headers })\r\n      .pipe(\r\n        tap((data: any) => {\r\n          this.tokenService.set(data.token);\r\n          const tokenDecoded = this.decodeToken();\r\n          if (tokenDecoded && tokenDecoded.user && tokenDecoded.user.locale) {\r\n            this.languageService.setLanguage(tokenDecoded.user.locale);\r\n          }\r\n          this.authenticate$.next(true);\r\n        })\r\n      );\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  Input,\r\n  Optional\r\n} from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthOptions } from '../shared/auth.interface';\r\nimport { AuthService } from '../shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'igo-auth-form',\r\n  templateUrl: './auth-form.component.html',\r\n  styleUrls: ['./auth-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class AuthFormComponent implements OnInit {\r\n  @Input()\r\n  get backgroundDisable(): boolean {\r\n    if (this.isLogoutRoute || this.isLogoutRoute) {\r\n      return false;\r\n    }\r\n    return this._backgroundDisable;\r\n  }\r\n  set backgroundDisable(value: boolean) {\r\n    this._backgroundDisable = value.toString() === 'true';\r\n  }\r\n  private _backgroundDisable = true;\r\n\r\n  @Input()\r\n  get hasAlreadyConnectedDiv(): boolean {\r\n    return this._hasAlreadyConnectedDiv;\r\n  }\r\n  set hasAlreadyConnectedDiv(value: boolean) {\r\n    this._hasAlreadyConnectedDiv = value.toString() === 'true';\r\n  }\r\n  private _hasAlreadyConnectedDiv = true;\r\n\r\n  @Input()\r\n  get hasLogoutDiv(): boolean {\r\n    return this._hasLogoutDiv;\r\n  }\r\n  set hasLogoutDiv(value: boolean) {\r\n    this._hasLogoutDiv = value.toString() === 'true';\r\n  }\r\n  private _hasLogoutDiv = true;\r\n\r\n  @Input()\r\n  get showAlreadyConnectedDiv(): boolean {\r\n    if (this.isLogoutRoute) {\r\n      return this.hasAlreadyConnectedDiv;\r\n    }\r\n    return this._showAlreadyConnectedDiv;\r\n  }\r\n  set showAlreadyConnectedDiv(value: boolean) {\r\n    this._showAlreadyConnectedDiv = value.toString() === 'true';\r\n  }\r\n  private _showAlreadyConnectedDiv = false;\r\n\r\n  @Input()\r\n  get showLogoutDiv(): boolean {\r\n    if (this.isLogoutRoute) {\r\n      return this.hasLogoutDiv;\r\n    }\r\n    return this._showLogoutDiv;\r\n  }\r\n  set showLogoutDiv(value: boolean) {\r\n    this._showLogoutDiv = value.toString() === 'true';\r\n  }\r\n  private _showLogoutDiv = false;\r\n\r\n  get showLoginDiv(): boolean {\r\n    if (!this.isLogoutRoute) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public options: AuthOptions;\r\n  public user;\r\n\r\n  public visible = true;\r\n\r\n  private isLoginRoute: boolean;\r\n  private isLogoutRoute: boolean;\r\n\r\n  constructor(\r\n    public auth: AuthService,\r\n    private config: ConfigService,\r\n    @Optional() private router: Router\r\n  ) {\r\n    this.options = this.config.getConfig('auth') || {};\r\n    this.visible = Object.getOwnPropertyNames(this.options).length !== 0;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.analyzeRoute();\r\n    this.getName();\r\n  }\r\n\r\n  public login() {\r\n    this.auth.goToRedirectUrl();\r\n    this.getName();\r\n  }\r\n\r\n  public logout() {\r\n    this.auth.logout().subscribe(() => {\r\n      this.user = undefined;\r\n      if (this.router) {\r\n        if (this.options.logoutRoute) {\r\n          this.router.navigate([this.options.logoutRoute]);\r\n        } else if (this.options.homeRoute) {\r\n          this.router.navigate([this.options.homeRoute]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public home() {\r\n    if (this.router && this.options.homeRoute) {\r\n      this.router.navigate([this.options.homeRoute]);\r\n    }\r\n  }\r\n\r\n  private getName() {\r\n    if (this.auth.decodeToken()) {\r\n      const tokenDecoded = this.auth.decodeToken();\r\n      this.user = {\r\n        name: tokenDecoded.user.firstName || tokenDecoded.user.sourceId\r\n      };\r\n    }\r\n  }\r\n\r\n  private analyzeRoute() {\r\n    if (!this.router) {\r\n      return;\r\n    }\r\n\r\n    this.router.events\r\n      .pipe(filter(event => event instanceof NavigationStart))\r\n      .subscribe((changeEvent: any) => {\r\n        if (changeEvent.url) {\r\n          const currentRoute = changeEvent.url;\r\n          const logoutRoute = this.options.logoutRoute;\r\n          const loginRoute = this.options.loginRoute;\r\n\r\n          this.isLogoutRoute = currentRoute === logoutRoute;\r\n          this.isLoginRoute = currentRoute === loginRoute;\r\n\r\n          if (this.isLogoutRoute) {\r\n            this.auth.logout();\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { AuthService } from '../shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'igo-auth-intern',\r\n  templateUrl: './auth-intern.component.html',\r\n  styleUrls: ['./auth-intern.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class AuthInternComponent {\r\n  @Input()\r\n  get allowAnonymous(): boolean {\r\n    return this._allowAnonymous;\r\n  }\r\n  set allowAnonymous(value: boolean) {\r\n    this._allowAnonymous = value;\r\n  }\r\n  private _allowAnonymous = true;\r\n\r\n  public error = '';\r\n  public form: FormGroup;\r\n\r\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor(public auth: AuthService, fb: FormBuilder) {\r\n    this.form = fb.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  loginUser(values: any) {\r\n    this.auth.login(values.username, values.password).subscribe(\r\n      () => {\r\n        this.login.emit(true);\r\n      },\r\n      (error: any) => {\r\n        this.error = error.error.message;\r\n      }\r\n    );\r\n    return false;\r\n  }\r\n\r\n  loginAnonymous() {\r\n    this.auth.loginAnonymous().subscribe(() => {\r\n      this.login.emit(true);\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ApplicationRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthFacebookOptions } from '../shared/auth.interface';\r\nimport { AuthService } from '../shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'igo-auth-facebook',\r\n  templateUrl: './auth-facebook.component.html',\r\n  styleUrls: ['./auth-facebook.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AuthFacebookComponent {\r\n  private options: AuthFacebookOptions;\r\n\r\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private appRef: ApplicationRef\r\n  ) {\r\n    this.options = this.config.getConfig('auth.facebook') || {};\r\n\r\n    if (this.options.apiKey) {\r\n      this.loadSDKFacebook();\r\n    }\r\n  }\r\n\r\n  private subscribeEvents() {\r\n    (window as any).FB.Event.subscribe('auth.statusChange', rep => {\r\n      this.statusChangeCallback(rep);\r\n    });\r\n  }\r\n\r\n  private statusChangeCallback(response) {\r\n    if (response.status === 'connected') {\r\n      const accessToken = response.authResponse.accessToken;\r\n      this.loginFacebook(accessToken);\r\n    }\r\n  }\r\n\r\n  private loginFacebook(token) {\r\n    this.authService.loginWithToken(token, 'facebook').subscribe(() => {\r\n      this.appRef.tick();\r\n      this.login.emit(true);\r\n    });\r\n  }\r\n\r\n  private loadSDKFacebook() {\r\n    if (document.getElementById('facebook-jssdk')) {\r\n      return;\r\n    }\r\n\r\n    const urlSDK =\r\n      'https://connect.facebook.net/fr_CA/sdk.js#xfbml=1&version=v2.9';\r\n\r\n    const fjs = document.getElementsByTagName('script')[0];\r\n    const js = document.createElement('script');\r\n    js.id = 'facebook-jssdk';\r\n    js.src = `${urlSDK}&appId=${this.options.apiKey}`;\r\n    js.onload = () => {\r\n      this.subscribeEvents();\r\n    };\r\n    fjs.parentNode.insertBefore(js, fjs);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ApplicationRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthGoogleOptions } from '../shared/auth.interface';\r\nimport { AuthService } from '../shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'igo-auth-google',\r\n  templateUrl: './auth-google.component.html',\r\n  styleUrls: ['./auth-google.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AuthGoogleComponent {\r\n  private options: AuthGoogleOptions;\r\n\r\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private appRef: ApplicationRef\r\n  ) {\r\n    this.options = this.config.getConfig('auth.google') || {};\r\n\r\n    if (this.options.apiKey && this.options.clientId) {\r\n      this.loadSDKGoogle();\r\n      this.loadPlatform();\r\n    }\r\n  }\r\n\r\n  public handleSignInClick() {\r\n    (window as any).gapi.auth2.getAuthInstance().signIn();\r\n  }\r\n\r\n  public handleSignOutClick() {\r\n    (window as any).gapi.auth2.getAuthInstance().signOut();\r\n  }\r\n\r\n  private handleClientLoad() {\r\n    (window as any).gapi.load('client:auth2', () => this.initClient());\r\n  }\r\n\r\n  private initClient() {\r\n    (window as any).gapi.client\r\n      .init({\r\n        apiKey: this.options.apiKey,\r\n        clientId: this.options.clientId,\r\n        discoveryDocs: [\r\n          'https://people.googleapis.com/$discovery/rest?version=v1'\r\n        ],\r\n        scope: 'profile'\r\n      })\r\n      .then(() => {\r\n        this.handleSignOutClick();\r\n        (window as any).gapi.auth2.getAuthInstance().isSignedIn.listen(rep => {\r\n          this.updateSigninStatus(rep);\r\n        });\r\n      });\r\n  }\r\n\r\n  private updateSigninStatus(isSignedIn) {\r\n    if (isSignedIn) {\r\n      this.loginGoogle((window as any).gapi.client.getToken().access_token);\r\n    }\r\n  }\r\n\r\n  private loginGoogle(token) {\r\n    this.authService.loginWithToken(token, 'google').subscribe(() => {\r\n      this.appRef.tick();\r\n      this.login.emit(true);\r\n    });\r\n  }\r\n\r\n  private loadSDKGoogle() {\r\n    const fjs = document.getElementsByTagName('script')[0];\r\n    const js = document.createElement('script');\r\n    js.id = 'google-jssdk';\r\n    js.src = 'https://apis.google.com/js/api.js';\r\n    js.onload = () => {\r\n      this.handleClientLoad();\r\n    };\r\n    fjs.parentNode.insertBefore(js, fjs);\r\n  }\r\n\r\n  private loadPlatform() {\r\n    const fjs = document.getElementsByTagName('script')[0];\r\n    const js = document.createElement('script');\r\n    js.id = 'google-platform';\r\n    js.src = 'https://apis.google.com/js/platform.js';\r\n    fjs.parentNode.insertBefore(js, fjs);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggedGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.authService.logged) {\r\n      return true;\r\n    }\r\n\r\n    this.authService.redirectUrl = state.url;\r\n\r\n    const authConfig = this.config.getConfig('auth');\r\n    if (authConfig && authConfig.loginRoute) {\r\n      this.router.navigateByUrl(authConfig.loginRoute);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.authService.authenticated) {\r\n      return true;\r\n    }\r\n\r\n    this.authService.redirectUrl = state.url;\r\n\r\n    const authConfig = this.config.getConfig('auth');\r\n    if (authConfig && authConfig.loginRoute) {\r\n      this.router.navigateByUrl(authConfig.loginRoute);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const token = this.authService.decodeToken();\r\n    if (token && token.user && token.user.isAdmin) {\r\n      return true;\r\n    }\r\n\r\n    this.authService.redirectUrl = state.url;\r\n\r\n    const authConfig = this.config.getConfig('auth');\r\n    if (authConfig && authConfig.loginRoute) {\r\n      this.router.navigateByUrl(authConfig.loginRoute);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfilsGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private config: ConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    return this.authService.getProfils().pipe(\r\n      map((profils: string[]) => {\r\n        const authConfig = this.config.getConfig('auth');\r\n\r\n        if (\r\n          profils &&\r\n          profils.some(v => authConfig.profilsGuard.indexOf(v) !== -1)\r\n        ) {\r\n          return true;\r\n        }\r\n\r\n        this.authService.redirectUrl = state.url;\r\n\r\n        if (authConfig && authConfig.loginRoute) {\r\n          this.router.navigateByUrl(authConfig.loginRoute);\r\n        }\r\n\r\n        return false;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService } from '@igo2/core';\r\nimport { TokenService } from './token.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  private trustHosts: string[] = [];\r\n\r\n  constructor(\r\n    private config: ConfigService,\r\n    private tokenService: TokenService\r\n  ) {\r\n    this.trustHosts = this.config.getConfig('auth.trustHosts') || [];\r\n    this.trustHosts.push(window.location.hostname);\r\n  }\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = this.tokenService.get();\r\n    const element = document.createElement('a');\r\n    element.href = req.url;\r\n\r\n    if (!token && this.trustHosts.indexOf(element.hostname) === -1) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const authHeader = `Bearer ${token}`;\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('Authorization', authHeader)\r\n    });\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Directive({\r\n  selector: '[igoProtected]'\r\n})\r\nexport class ProtectedDirective {\r\n  constructor(authentication: AuthService, el: ElementRef) {\r\n    if (!authentication.isAuthenticated()) {\r\n      el.nativeElement.parentNode.removeChild(el.nativeElement);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AuthFormComponent } from './auth-form/auth-form.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: AuthFormComponent },\r\n  { path: 'logout', component: AuthFormComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n  providers: []\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatButtonModule\r\n} from '@angular/material';\r\n\r\nimport { IgoLanguageModule } from '@igo2/core';\r\n\r\nimport { ProtectedDirective } from './shared/protected.directive';\r\nimport { AuthInterceptor } from './shared/auth.interceptor';\r\n\r\nimport { AuthInternComponent } from './auth-form/auth-intern.component';\r\nimport { AuthFormComponent } from './auth-form/auth-form.component';\r\nimport { AuthGoogleComponent } from './auth-form/auth-google.component';\r\nimport { AuthFacebookComponent } from './auth-form/auth-facebook.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    IgoLanguageModule\r\n  ],\r\n  declarations: [\r\n    AuthFormComponent,\r\n    AuthGoogleComponent,\r\n    AuthInternComponent,\r\n    AuthFacebookComponent,\r\n    ProtectedDirective\r\n  ],\r\n  exports: [AuthFormComponent, ProtectedDirective]\r\n})\r\nexport class IgoAuthModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: IgoAuthModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}